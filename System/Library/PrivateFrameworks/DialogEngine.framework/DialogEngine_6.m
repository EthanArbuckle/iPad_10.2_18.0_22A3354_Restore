void sub_1BFAADE7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SectionHeader_Rich>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::SectionHeader_Standard::InitAsDefaultInstance(SnippetUI::SectionHeader_Standard *this)
{
  qword_1EF584418 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584420 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SectionHeader_Standard::_Internal::text_1(SnippetUI::SectionHeader_Standard::_Internal *this, const SnippetUI::SectionHeader_Standard *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::SectionHeader_Standard::_Internal::action(SnippetUI::SectionHeader_Standard::_Internal *this, const SnippetUI::SectionHeader_Standard *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SectionHeader_Standard::clear_text_1(SnippetUI::SectionHeader_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::SectionHeader_Standard::clear_action(SnippetUI::SectionHeader_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

SnippetUI::SectionHeader_Standard *SnippetUI::SectionHeader_Standard::SectionHeader_Standard(SnippetUI::SectionHeader_Standard *this, const SnippetUI::SectionHeader_Standard *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;

  *(_QWORD *)this = &off_1E7932D88;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SectionHeader_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 4));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 4) = v9;
  return this;
}

void sub_1BFAAE124(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SectionHeader_Standard::CopyFrom(SnippetUI::SectionHeader_Standard *this, const SnippetUI::SectionHeader_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::SectionHeader_Standard::Clear(this);
    SnippetUI::SectionHeader_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SectionHeader_Standard::InternalSwap(SnippetUI::SectionHeader_Standard *this, SnippetUI::SectionHeader_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::SectionHeader_Standard *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
}

void SnippetUI::SectionHeader_Rich::InitAsDefaultInstance(SnippetUI::SectionHeader_Rich *this)
{
  qword_1EF584448 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584450 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EF584458 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SectionHeader_Rich::_Internal::text_1(SnippetUI::SectionHeader_Rich::_Internal *this, const SnippetUI::SectionHeader_Rich *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::SectionHeader_Rich::_Internal::thumbnail(SnippetUI::SectionHeader_Rich::_Internal *this, const SnippetUI::SectionHeader_Rich *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SectionHeader_Rich::_Internal::action(SnippetUI::SectionHeader_Rich::_Internal *this, const SnippetUI::SectionHeader_Rich *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SectionHeader_Rich::clear_text_1(SnippetUI::SectionHeader_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::SectionHeader_Rich::clear_thumbnail(SnippetUI::SectionHeader_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SectionHeader_Rich::clear_action(SnippetUI::SectionHeader_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::SectionHeader_Rich *SnippetUI::SectionHeader_Rich::SectionHeader_Rich(SnippetUI::SectionHeader_Rich *this, const SnippetUI::SectionHeader_Rich *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;
  SnippetUI::VisualProperty *v10;

  *(_QWORD *)this = &off_1E7932E48;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SectionHeader_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v10, *((const SnippetUI::VisualProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 5) = v9;
  return this;
}

void sub_1BFAAE4F4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SectionHeader_Rich::CopyFrom(SnippetUI::SectionHeader_Rich *this, const SnippetUI::SectionHeader_Rich *a2)
{
  if (a2 != this)
  {
    SnippetUI::SectionHeader_Rich::Clear(this);
    SnippetUI::SectionHeader_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::SectionHeader_Rich::InternalSwap(SnippetUI::SectionHeader_Rich *this, SnippetUI::SectionHeader_Rich *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::UnknownFieldSet *v16;

  v4 = (SnippetUI::SectionHeader_Rich *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v16;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
}

void siri::dialogengine::ExecuteTableSet::~ExecuteTableSet(siri::dialogengine::ExecuteTableSet *this)
{
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
  JUMPOUT(0x1C3B8D890);
}

void siri::dialogengine::ExecuteTableSet::Execute(siri::dialogengine **this@<X0>, _QWORD *a2@<X8>)
{
  _BOOL4 BooleanParameter;
  double NumberParameter;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  siri::dialogengine::VariableObject *v10;
  int v11;
  int v12;
  _DWORD *p_p;
  uint64_t v14;
  int v15;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;
  void *__p;
  uint64_t v27;
  unsigned __int8 v28;

  std::string::basic_string[abi:ne180100]<0>(&__p, "conclusionInSingleWindowResponse");
  BooleanParameter = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "windowSize");
  NumberParameter = siri::dialogengine::ExecutePatternBase::GetNumberParameter((uint64_t)this, (const void **)&__p, 0.0);
  if ((char)v28 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "isFirstWindow");
  v6 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "isLastWindow");
  v7 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "isConclusion");
  v8 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(v23, "promptType");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  siri::dialogengine::ExecutePatternBase::GetStringParameter((uint64_t)this, (const void **)v23, (char *)v21, &v25);
  siri::dialogengine::StringToUpper((uint64_t)&v25, (uint64_t)&__p);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup(this, v9, v10)
    && (std::string::basic_string[abi:ne180100]<0>(&v25, "Sash"),
        siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25),
        SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (v8)
    {
LABEL_20:
      std::string::basic_string[abi:ne180100]<0>(&v25, "Conclusion");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      goto LABEL_50;
    }
  }
  else if (v8)
  {
    goto LABEL_20;
  }
  if (NumberParameter < 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v25, "Table");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v25, "Attribution");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v25, "Reference");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v25.__r_.__value_.__l.__data_);
      if (!BooleanParameter)
        goto LABEL_50;
    }
    else if (!BooleanParameter)
    {
LABEL_50:
      std::string::basic_string[abi:ne180100]<0>(&v25, "Prompt");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      goto LABEL_76;
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "Conclusion");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    goto LABEL_50;
  }
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  v11 = v6 && v7;
  if ((v11 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "WindowIntro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "Table");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v25, "Attribution");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v25, "Reference");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_62;
  }
  else if (!v7)
  {
    goto LABEL_62;
  }
  v12 = v28;
  if ((char)v28 < 0)
  {
    if (v27 == 12)
    {
      p_p = __p;
LABEL_58:
      v14 = *(_QWORD *)p_p;
      v15 = p_p[2];
      if (v14 == 0x41554E49544E4F43 && v15 == 1313818964)
        goto LABEL_67;
    }
  }
  else if (v28 == 12)
  {
    p_p = &__p;
    goto LABEL_58;
  }
LABEL_62:
  std::string::basic_string[abi:ne180100]<0>(&v25, "WindowPrompt");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_76;
  }
  else if (!v7)
  {
    goto LABEL_76;
  }
  v12 = v28;
LABEL_67:
  if ((v12 & 0x80) != 0)
  {
    if (v27 != 12)
      goto LABEL_76;
    v17 = __p;
  }
  else
  {
    if (v12 != 12)
      goto LABEL_76;
    v17 = &__p;
  }
  v18 = *(_QWORD *)v17;
  v19 = v17[2];
  if (v18 == 0x41554E49544E4F43 && v19 == 1313818964)
  {
    if ((v11 ^ 1 | BooleanParameter) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v25, "Conclusion");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
    }
    goto LABEL_50;
  }
LABEL_76:
  siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
  if ((char)v28 < 0)
    operator delete(__p);
}

void sub_1BFAAEC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetCatVersionForOS(std::vector<std::pair<std::string, std::string>> *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  unsigned __int8 v6;
  unint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  unint64_t v11;
  std::pair<std::string, std::string> *v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v18;
  std::string *p_str;
  size_t v20;
  int v21;
  BOOL v22;
  std::string::size_type v23;
  std::string *v24;
  size_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  char v31;
  std::string *v32;
  std::string *v33;
  std::pair<std::string, std::string> *v34;
  __int128 v35;
  _QWORD *v36;
  std::string v37;
  std::string __p;
  std::string __str;

  if (this->__begin_ == this->__end_)
  {
    {
      v36 = (_QWORD *)operator new();
      *v36 = 0;
      siri::dialogengine::GetOSCatVersions(void)::flag = (uint64_t)v36;
    }
    v7 = atomic_load((unint64_t *)siri::dialogengine::GetOSCatVersions(void)::flag);
    if (v7 != -1)
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetOSCatVersions(void)::flag, &__p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetOSCatVersions(void)::$_0 &&>>);
    }
    if ((std::vector<std::pair<std::string, std::string>> *)siri::dialogengine::GetOSCatVersions(void)::sOSCatVersions != this)
      std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, *(std::string **)siri::dialogengine::GetOSCatVersions(void)::sOSCatVersions, *(std::string **)(siri::dialogengine::GetOSCatVersions(void)::sOSCatVersions + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(siri::dialogengine::GetOSCatVersions(void)::sOSCatVersions + 8)- *(_QWORD *)siri::dialogengine::GetOSCatVersions(void)::sOSCatVersions) >> 4));
  }
  siri::dialogengine::StringToLower(a2, (uint64_t)&__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "release/");
  v8 = siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)&__p);
  v9 = v8;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v8)
      goto LABEL_14;
LABEL_11:
    siri::dialogengine::StringSplit((unsigned __int8 *)&__str, "-", &__p);
    if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] == 48)
      std::string::operator=(&__str, (const std::string *)(__p.__r_.__value_.__r.__words[0] + 24));
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    goto LABEL_14;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v9)
    goto LABEL_11;
LABEL_14:
  begin = this->__begin_;
  if ((std::vector<std::pair<std::string, std::string>>::pointer)((char *)this->__end_ - (char *)this->__begin_) == (std::vector<std::pair<std::string, std::string>>::pointer)48)
  {
    v11 = 0;
LABEL_16:
    v12 = &begin[v11];
    if (SHIBYTE(v12->second.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a3, v12->second.__r_.__value_.__l.__data_, v12->second.__r_.__value_.__l.__size_);
    }
    else
    {
      v13 = *(_OWORD *)&v12->second.__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v12->second.__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v13;
    }
    goto LABEL_84;
  }
  v14 = 0;
  while (1)
  {
    siri::dialogengine::StringToLower((uint64_t)&begin[v14], (uint64_t)&__p);
    v15 = v14 + 1;
    siri::dialogengine::StringToLower((uint64_t)&this->__begin_[v14 + 1], (uint64_t)&v37);
    if (!siri::dialogengine::IsSameBaseOS(&__str, &__p))
    {
      v31 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      goto LABEL_67;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v18 = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v18 >= size)
      v20 = size;
    else
      v20 = v18;
    v21 = memcmp(p_p, p_str, v20);
    v22 = size >= v18;
    if (v21)
      v22 = v21 >= 0;
    if (v22)
      break;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v23 = v37.__r_.__value_.__l.__size_;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v37;
    else
      v24 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if (v23 >= v18)
      v25 = v18;
    else
      v25 = v23;
    v26 = memcmp(p_str, v24, v25);
    v27 = v18 < v23;
    if (v26)
      v27 = v26 < 0;
    if (v27 || !siri::dialogengine::IsSameBaseOS(&__str, &v37))
      break;
    v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v29 = __str.__r_.__value_.__l.__size_;
    v30 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    v31 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = v37.__r_.__value_.__l.__size_;
    if (v29 == v30)
    {
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v37;
      else
        v32 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(__str.__r_.__value_.__l.__data_, v32, __str.__r_.__value_.__l.__size_))
        {
LABEL_74:
          v34 = &this->__begin_[v15];
          goto LABEL_77;
        }
      }
      else
      {
        if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
          goto LABEL_74;
        v33 = &__str;
        while (v33->__r_.__value_.__s.__data_[0] == v32->__r_.__value_.__s.__data_[0])
        {
          v33 = (std::string *)((char *)v33 + 1);
          v32 = (std::string *)((char *)v32 + 1);
          if (!--v28)
            goto LABEL_74;
        }
      }
    }
LABEL_67:
    if (v31 < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    begin = this->__begin_;
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 4) - 1;
    ++v14;
    if (v15 >= v11)
      goto LABEL_16;
  }
  v34 = &this->__begin_[v14];
LABEL_77:
  if (SHIBYTE(v34->second.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a3, v34->second.__r_.__value_.__l.__data_, v34->second.__r_.__value_.__l.__size_);
  }
  else
  {
    v35 = *(_OWORD *)&v34->second.__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v34->second.__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v35;
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_84:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFAAF194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetOSCatVersions(void)::$_0 &&>>()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  std::string *v3;
  __int128 v4;
  char v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  __int128 v14;
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  __int128 v26;
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  __int128 v42;
  char v43;
  _QWORD *v44;
  char v45;
  std::string v46[2];
  std::string v47[2];
  std::string v48[2];
  std::string v49[2];
  std::string v50[2];
  std::string v51[2];
  std::string v52[2];
  std::string v53[2];
  std::string v54[2];
  std::string v55[2];
  std::string v56[2];
  std::string v57[2];
  std::string v58[2];
  std::string v59[2];
  std::string v60[2];
  std::string v61[2];
  std::string v62[2];
  std::string v63[2];
  std::string v64[2];
  std::string v65[2];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v43 = 4;
  strcpy((char *)&v42, "AZUL");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v40, (const void **)&v42, 66);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v38, (const void **)&v42, 69);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v36, (const void **)&v42, 70);
  v35 = 3;
  LODWORD(v34) = 5851987;
  *((_QWORD *)&v32 + 1) = 0;
  v33 = 0x700000000000000;
  strcpy((char *)&v32, "SKYECHO");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v30, (const void **)&v42, 70);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v28, (const void **)&v42, 71);
  v27 = 6;
  strcpy((char *)&v26, "SYDNEY");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v24, (const void **)&v26, 67);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v22, (const void **)&v26, 68);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v20, (const void **)&v26, 69);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v18, (const void **)&v26, 70);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v16, (const void **)&v26, 71);
  v15 = 4;
  strcpy((char *)&v14, "DAWN");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v12, (const void **)&v14, 66);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v10, (const void **)&v14, 67);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v8, (const void **)&v14, 69);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)&v14, 70);
  v5 = 7;
  *(_QWORD *)&v4 = 0x4C415453595243;
  v0 = (_QWORD *)operator new();
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v46, &v42, "1.0");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v47, (__int128 *)v40, "1.1");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v48, (__int128 *)v38, "1.4");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v49, (__int128 *)v36, "1.5");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v50, &v34, "2.0");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v51, &v32, "2.4");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v52, (__int128 *)v30, "2.5");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v53, (__int128 *)v28, "2.6");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v54, &v26, "3.0");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v55, (__int128 *)v24, "3.2");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v56, (__int128 *)v22, "3.4");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v57, (__int128 *)v20, "3.6");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v58, (__int128 *)v18, "3.7");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v59, (__int128 *)v16, "3.8");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v60, &v14, "4.0");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v61, (__int128 *)v12, "4.1");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v62, (__int128 *)v10, "4.2");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v63, (__int128 *)v8, "4.4");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v64, (__int128 *)__p, "4.5");
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(v65, &v4, "5.0");
  *v0 = 0;
  v0[1] = 0;
  v0[2] = 0;
  v44 = v0;
  v45 = 0;
  v1 = (char *)operator new(0x3C0uLL);
  *v0 = v1;
  v0[1] = v1;
  v0[2] = v1 + 960;
  v0[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)(v0 + 2), (uint64_t)v46, (uint64_t)&v66, (uint64_t)v1);
  siri::dialogengine::GetOSCatVersions(void)::sOSCatVersions = (uint64_t)v0;
  v2 = 40;
  do
  {
    v3 = &v46[v2];
    if (SHIBYTE(v46[v2 - 1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v3[-1].__r_.__value_.__l.__data_);
    if (SHIBYTE(v3[-2].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v3[-2].__r_.__value_.__l.__data_);
    v2 -= 2;
  }
  while (v2 * 24);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  if (v41 < 0)
    operator delete(v40[0]);
}

void sub_1BFAAF780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a64;
  char a69;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  void *a78;
  char a79;
  void *a80;
  char a81;
  void **a82;
  char a83;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  char *v87;

  *(_QWORD *)(v83 + 8) = v84;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a82);
  v86 = 960;
  while (1)
  {
    v87 = &a83 + v86;
    if (*(&a83 + v86 - 1) < 0)
      operator delete(*((void **)v87 - 3));
    if (*(v87 - 25) < 0)
      operator delete(*((void **)v87 - 6));
    v86 -= 48;
    if (!v86)
    {
      MEMORY[0x1C3B8D890](v83, 0x20C40960023A9);
      if (a18 < 0)
        operator delete(__p);
      if (a24 < 0)
        operator delete(a19);
      if (a30 < 0)
        operator delete(a25);
      if (a36 < 0)
        operator delete(a31);
      if (a45 < 0)
        operator delete(a40);
      if (a51 < 0)
        operator delete(a46);
      if (a57 < 0)
        operator delete(a52);
      if (a63 < 0)
        operator delete(a58);
      if (a69 < 0)
        operator delete(a64);
      if (a73 < 0)
        operator delete(a72);
      if (a75 < 0)
        operator delete(a74);
      if (a77 < 0)
        operator delete(a76);
      if (a79 < 0)
        operator delete(a78);
      if (a81 < 0)
        operator delete(a80);
      _Unwind_Resume(a1);
    }
  }
}

BOOL siri::dialogengine::IsSameBaseOS(std::string *__str, std::string *a2)
{
  uint64_t v2;
  size_t size;
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  char v9;
  size_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  int v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  char v22;
  _BOOL8 v23;
  std::string::size_type v24;
  std::string::size_type v25;
  int v26;
  uint64_t v27;
  std::string *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  std::string::size_type v34;
  std::string *v35;
  void *v37;
  std::string::size_type v39;
  char v40;
  std::string::size_type v41;
  std::string::size_type v42;
  int v43;
  std::string *v44;
  uint64_t v45;
  std::string *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char v51;
  std::string v52;
  std::string v53;
  char v54;

  v2 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  size = __str->__r_.__value_.__l.__size_;
  if ((v2 & 0x80u) == 0)
    v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    v4 = __str->__r_.__value_.__l.__size_;
  if (!v4)
    return 0;
  v5 = a2;
  v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v7 = (v6 & 0x80u) == 0 ? HIBYTE(a2->__r_.__value_.__r.__words[2]) : a2->__r_.__value_.__l.__size_;
  if (!v7)
    return 0;
  if ((v6 & 0x80) != 0)
  {
    if (v4 <= a2->__r_.__value_.__l.__size_)
      goto LABEL_32;
    v6 = a2->__r_.__value_.__l.__size_;
  }
  else if (v4 <= v6)
  {
LABEL_32:
    if (v4 < v7)
    {
      std::string::basic_string(&v53, a2, 0, v4, (std::allocator<char> *)&v52);
      v9 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      v10 = v53.__r_.__value_.__l.__size_;
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      else
        v24 = v53.__r_.__value_.__l.__size_;
      v25 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      v26 = (char)v25;
      if ((v25 & 0x80u) != 0)
        v25 = __str->__r_.__value_.__l.__size_;
      if (v24 == v25)
      {
        if (v26 >= 0)
          v14 = __str;
        else
          v14 = (std::string *)__str->__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v53.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&v53.__r_.__value_.__s + 23))
          {
            v27 = HIBYTE(v53.__r_.__value_.__r.__words[2]) - 1;
            v28 = &v53;
            do
            {
              v30 = v28->__r_.__value_.__s.__data_[0];
              v28 = (std::string *)((char *)v28 + 1);
              v29 = v30;
              v32 = v14->__r_.__value_.__s.__data_[0];
              v14 = (std::string *)((char *)v14 + 1);
              v31 = v32;
              v21 = v27-- != 0;
              v33 = v21;
              v23 = v29 == v31;
            }
            while (v29 == v31 && (v33 & 1) != 0);
            goto LABEL_52;
          }
          return 1;
        }
LABEL_61:
        v34 = v53.__r_.__value_.__r.__words[0];
        v23 = memcmp(v53.__r_.__value_.__l.__data_, v14, v10) == 0;
        goto LABEL_62;
      }
LABEL_51:
      v23 = 0;
      goto LABEL_52;
    }
    if ((v2 & 0x80) != 0)
    {
      if (size < 2)
      {
        if (v4 == v7)
        {
          if ((v6 & 0x80u) != 0)
            a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
          return memcmp(__str->__r_.__value_.__l.__data_, a2, size) == 0;
        }
        return 0;
      }
    }
    else
    {
      if (v2 < 2)
      {
        if (v7 == v2)
        {
          if ((v6 & 0x80u) == 0)
            v35 = a2;
          else
            v35 = (std::string *)a2->__r_.__value_.__r.__words[0];
          return __str->__r_.__value_.__s.__data_[0] == v35->__r_.__value_.__s.__data_[0];
        }
        return 0;
      }
      size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    std::string::basic_string(&v53, __str, 0, size - 1, (std::allocator<char> *)&v52);
    v39 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    if ((v39 & 0x80u) != 0)
      v39 = v5->__r_.__value_.__l.__size_;
    std::string::basic_string(&v52, v5, 0, v39 - 1, (std::allocator<char> *)&v54);
    v40 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      v41 = v53.__r_.__value_.__l.__size_;
    v42 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    v43 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v42 = v52.__r_.__value_.__l.__size_;
    if (v41 == v42)
    {
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v52;
      else
        v44 = (std::string *)v52.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      {
        v23 = memcmp(v53.__r_.__value_.__l.__data_, v44, v53.__r_.__value_.__l.__size_) == 0;
      }
      else if (*((_BYTE *)&v53.__r_.__value_.__s + 23))
      {
        v45 = HIBYTE(v53.__r_.__value_.__r.__words[2]) - 1;
        v46 = &v53;
        do
        {
          v48 = v46->__r_.__value_.__s.__data_[0];
          v46 = (std::string *)((char *)v46 + 1);
          v47 = v48;
          v50 = v44->__r_.__value_.__s.__data_[0];
          v44 = (std::string *)((char *)v44 + 1);
          v49 = v50;
          v21 = v45-- != 0;
          v51 = v21;
          v23 = v47 == v49;
        }
        while (v47 == v49 && (v51 & 1) != 0);
      }
      else
      {
        v23 = 1;
      }
    }
    else
    {
      v23 = 0;
    }
    if (v43 < 0)
    {
      operator delete(v52.__r_.__value_.__l.__data_);
      v40 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    if (v40 < 0)
    {
      v37 = (void *)v53.__r_.__value_.__r.__words[0];
      goto LABEL_63;
    }
    return v23;
  }
  std::string::basic_string(&v53, __str, 0, v6, (std::allocator<char> *)&v52);
  v9 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  v10 = v53.__r_.__value_.__l.__size_;
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  else
    v11 = v53.__r_.__value_.__l.__size_;
  v12 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = v5->__r_.__value_.__l.__size_;
  if (v11 != v12)
    goto LABEL_51;
  if (v13 >= 0)
    v14 = v5;
  else
    v14 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&v53.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_61;
  if (!*((_BYTE *)&v53.__r_.__value_.__s + 23))
    return 1;
  v15 = HIBYTE(v53.__r_.__value_.__r.__words[2]) - 1;
  v16 = &v53;
  do
  {
    v18 = v16->__r_.__value_.__s.__data_[0];
    v16 = (std::string *)((char *)v16 + 1);
    v17 = v18;
    v20 = v14->__r_.__value_.__s.__data_[0];
    v14 = (std::string *)((char *)v14 + 1);
    v19 = v20;
    v21 = v15-- != 0;
    v22 = v21;
    v23 = v17 == v19;
  }
  while (v17 == v19 && (v22 & 1) != 0);
LABEL_52:
  if (v9 < 0)
  {
    v34 = v53.__r_.__value_.__r.__words[0];
LABEL_62:
    v37 = (void *)v34;
LABEL_63:
    operator delete(v37);
  }
  return v23;
}

void sub_1BFAAFCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[4],0>(std::string *this, __int128 *a2, char *__s)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::basic_string[abi:ne180100]<0>(this[1].__r_.__value_.__r.__words, __s);
  return this;
}

void sub_1BFAAFD2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::dialogengine::GetVersionMajorMinorBuild@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "3400.54.1");
}

void siri::dialogengine::GetValidVersion(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  const char *v4;
  int v5;
  void *v6;
  std::vector<std::pair<std::string, std::string>> v7;
  std::string __p;
  std::vector<std::pair<std::string, std::string>> *v9;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  if ((siri::dialogengine::IsValidVersionNumber((char *)a2) & 1) == 0)
  {
    memset(&v7, 0, sizeof(v7));
    siri::dialogengine::GetCatVersionForOS(&v7, a2, &__p);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = __p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v9 = &v7;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "5.0");
  v3 = siri::dialogengine::VersionGreaterThan(a2, (uint64_t)&__p);
  v5 = v3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v5)
      return;
  }
  else if (!v3)
  {
    return;
  }
  if (*(char *)(a2 + 23) >= 0)
    v6 = (void *)a2;
  else
    v6 = *(void **)a2;
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Request to upgrade CAT to version to %s which is greater than the max version %s", v4, v6, "5.0");
  MEMORY[0x1C3B8D53C](a2, "5.0");
}

void sub_1BFAAFE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v22 - 40) = v21;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 40));
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::ChangeVersionForCATXML(std::string *a1, uint64_t a2)
{
  _BOOL8 v4;
  int64_t size;
  char v6;
  std::string *p_p;
  char *v8;
  std::string *v9;
  char *v10;
  int64_t v14;
  void *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string *v18;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  std::string::size_type v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string v33;
  std::string v34;
  std::string v35;
  void *v36[2];
  std::string::size_type v37;
  std::string __p;
  char v39;

  v4 = 0;
  if (siri::dialogengine::HasCATExtension(a1, 0))
  {
    if (siri::dialogengine::FileExists((uint64_t *)a1))
    {
      siri::dialogengine::ReadFileToString((uint64_t)a1, &__p);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        p_p = &__p;
      }
      else
      {
        size = __p.__r_.__value_.__l.__size_;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (size >= 25)
      {
        v8 = (char *)p_p + size;
        v9 = p_p;
        do
        {
          v10 = (char *)memchr(v9, 117, size - 24);
          if (!v10)
            break;
          if (*(_QWORD *)v10 == 0x6C7070613A6E7275
            && *((_QWORD *)v10 + 1) == 0x3A73656D616E3A65
            && *((_QWORD *)v10 + 2) == 0x7461633A69726973
            && v10[24] == 58)
          {
            v4 = 0;
            if (v10 == v8)
              goto LABEL_34;
            v14 = v10 - (char *)p_p;
            if (v14 == -1)
              goto LABEL_34;
            std::string::basic_string[abi:ne180100]<0>(v36, "urn:apple:names:siri:cat:");
            if (SHIBYTE(v37) < 0)
            {
              v15 = v36[1];
              operator delete(v36[0]);
            }
            else
            {
              v15 = (void *)HIBYTE(v37);
            }
            v16 = (std::string::size_type)v15 + v14;
            v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = &__p;
            else
              v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v17 = __p.__r_.__value_.__l.__size_;
            if (v17 >= v16)
            {
              v20 = (char *)v18 + v16;
              v21 = (char *)v18 + v17;
              while (v21 - v20 >= 1)
              {
                v22 = memchr(v20, 34, v21 - v20);
                if (!v22)
                  break;
                if (*v22 == 34)
                {
                  v4 = 0;
                  if (v22 != v21)
                  {
                    v23 = v22 - (_BYTE *)v18;
                    if (v23 != -1)
                    {
                      std::string::basic_string(&v34, &__p, 0, v16, (std::allocator<char> *)&v33);
                      v24 = *(char *)(a2 + 23);
                      if (v24 >= 0)
                        v25 = (const std::string::value_type *)a2;
                      else
                        v25 = *(const std::string::value_type **)a2;
                      if (v24 >= 0)
                        v26 = *(unsigned __int8 *)(a2 + 23);
                      else
                        v26 = *(_QWORD *)(a2 + 8);
                      v27 = std::string::append(&v34, v25, v26);
                      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
                      v35.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v28;
                      v27->__r_.__value_.__l.__size_ = 0;
                      v27->__r_.__value_.__r.__words[2] = 0;
                      v27->__r_.__value_.__r.__words[0] = 0;
                      std::string::basic_string(&v33, &__p, v23, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v39);
                      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v29 = &v33;
                      else
                        v29 = (std::string *)v33.__r_.__value_.__r.__words[0];
                      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v30 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
                      else
                        v30 = v33.__r_.__value_.__l.__size_;
                      v31 = std::string::append(&v35, (const std::string::value_type *)v29, v30);
                      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
                      v37 = v31->__r_.__value_.__r.__words[2];
                      *(_OWORD *)v36 = v32;
                      v31->__r_.__value_.__l.__size_ = 0;
                      v31->__r_.__value_.__r.__words[2] = 0;
                      v31->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v33.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v35.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v34.__r_.__value_.__l.__data_);
                      v4 = siri::dialogengine::WriteFileFromString(a1, (uint64_t)v36);
                      if (SHIBYTE(v37) < 0)
                        operator delete(v36[0]);
                      v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    }
                  }
                  goto LABEL_34;
                }
                v20 = v22 + 1;
              }
            }
            break;
          }
          v9 = (std::string *)(v10 + 1);
          size = v8 - (char *)v9;
        }
        while (v8 - (char *)v9 >= 25);
      }
      v4 = 0;
LABEL_34:
      if (v6 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_1BFAB01A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UpgradeVersion(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::string __str;
  std::string v20;

  siri::dialogengine::GetValidVersion((uint64_t)a2, (uint64_t)&__str);
  v4 = *a1;
  if (*(char *)(*a1 + 175) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v4 + 152), *(_QWORD *)(v4 + 160));
  else
    v20 = *(std::string *)(v4 + 152);
  v5 = (siri::dialogengine::VersionLessThan((unsigned __int8 *)&__str, (unsigned __int8 *)&v20) & 1) != 0
    || siri::dialogengine::VersionEqual((unsigned __int8 *)&__str, (unsigned __int8 *)&v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if (v5)
      goto LABEL_9;
  }
  else if (v5)
  {
LABEL_9:
    v6 = 1;
    goto LABEL_34;
  }
  v8 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v17 = *a1;
  v18 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "2.4");
  if (*(char *)(v8 + 175) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v8 + 152), *(_QWORD *)(v8 + 160));
  else
    v20 = *(std::string *)(v8 + 152);
  if (siri::dialogengine::VersionLessThan((unsigned __int8 *)&v20, (unsigned __int8 *)__p))
  {
    if (siri::dialogengine::VersionEqual(a2, (unsigned __int8 *)__p))
      v11 = 1;
    else
      v11 = siri::dialogengine::VersionGreaterThan((uint64_t)a2, (uint64_t)__p);
  }
  else
  {
    v11 = 0;
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::string::operator=((std::string *)(*a1 + 152), &__str);
  if (v11)
    v6 = 3;
  else
    v6 = 2;
LABEL_34:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BFAB03F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

void siri::dialogengine::MorphunUpdater::~MorphunUpdater(siri::dialogengine::MorphunUpdater *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::MorphunUpdater::Download()
{
  return 0;
}

{
  return 0;
}

uint64_t siri::dialogengine::MorphunUpdater::Delete()
{
  return 0;
}

{
  return 0;
}

uint64_t siri::dialogengine::MorphunUpdater::DeleteAll(siri::dialogengine::MorphunUpdater *this)
{
  return 0;
}

_QWORD *siri::dialogengine::MorphunUpdater::GetPath@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void siri::dialogengine::MorphunUpdater::GetPaths(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t *YAML::detail::node_data::empty_scalar(YAML::detail::node_data *this)
{
  unsigned __int8 v1;

  {
    YAML::detail::node_data::empty_scalar(void)::svalue = 0;
    unk_1EF582830 = 0;
    qword_1EF582838 = 0;
    __cxa_atexit(MEMORY[0x1E0DE44D0], &YAML::detail::node_data::empty_scalar(void)::svalue, &dword_1BF794000);
  }
  return &YAML::detail::node_data::empty_scalar(void)::svalue;
}

double YAML::detail::node_data::node_data(YAML::detail::node_data *this)
{
  double result;

  *(_BYTE *)this = 0;
  *(_QWORD *)((char *)this + 4) = -1;
  *(_QWORD *)((char *)this + 12) = 0x1FFFFFFFFLL;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 12) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = (char *)this + 136;
  *((_QWORD *)this + 18) = (char *)this + 136;
  *((_QWORD *)this + 19) = 0;
  return result;
}

{
  double result;

  *(_BYTE *)this = 0;
  *(_QWORD *)((char *)this + 4) = -1;
  *(_QWORD *)((char *)this + 12) = 0x1FFFFFFFFLL;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 12) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = (char *)this + 136;
  *((_QWORD *)this + 18) = (char *)this + 136;
  *((_QWORD *)this + 19) = 0;
  return result;
}

uint64_t YAML::detail::node_data::mark_defined(uint64_t this)
{
  if (!*(_DWORD *)(this + 16))
    *(_DWORD *)(this + 16) = 1;
  *(_BYTE *)this = 1;
  return this;
}

uint64_t YAML::detail::node_data::set_mark(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 12) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(result + 4) = v2;
  return result;
}

_QWORD *YAML::detail::node_data::set_type(_QWORD *result, int a2)
{
  if (a2)
  {
    *(_BYTE *)result = 1;
    if (*((_DWORD *)result + 4) != a2)
    {
      *((_DWORD *)result + 4) = a2;
      switch(a2)
      {
        case 4:
          result[15] = result[14];
          return std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear(result + 17);
        case 3:
          result[11] = result[10];
          result[13] = 0;
          break;
        case 2:
          if (*((char *)result + 79) < 0)
          {
            *(_BYTE *)result[7] = 0;
            result[8] = 0;
          }
          else
          {
            *((_BYTE *)result + 56) = 0;
            *((_BYTE *)result + 79) = 0;
          }
          break;
      }
    }
  }
  else
  {
    *((_DWORD *)result + 4) = 0;
    *(_BYTE *)result = 0;
  }
  return result;
}

_QWORD *std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

_QWORD *YAML::detail::node_data::reset_sequence(_QWORD *this)
{
  this[11] = this[10];
  this[13] = 0;
  return this;
}

_QWORD *YAML::detail::node_data::reset_map(YAML::detail::node_data *this)
{
  *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
  return std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear((_QWORD *)this + 17);
}

std::string *YAML::detail::node_data::set_tag(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

uint64_t YAML::detail::node_data::set_style(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t YAML::detail::node_data::set_null(uint64_t this)
{
  *(_BYTE *)this = 1;
  *(_DWORD *)(this + 16) = 1;
  return this;
}

std::string *YAML::detail::node_data::set_scalar(uint64_t a1, const std::string *a2)
{
  *(_BYTE *)a1 = 1;
  *(_DWORD *)(a1 + 16) = 2;
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

uint64_t YAML::detail::node_data::size(YAML::detail::node_data *this)
{
  int v2;

  if (!*(_BYTE *)this)
    return 0;
  v2 = *((_DWORD *)this + 4);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      YAML::detail::node_data::compute_seq_size(this);
      return *((_QWORD *)this + 13);
    }
    return 0;
  }
  YAML::detail::node_data::compute_map_size(this);
  return ((uint64_t)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 4) - *((_QWORD *)this + 19);
}

_QWORD *YAML::detail::node_data::compute_seq_size(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = this[10];
  v2 = this[11] - v1;
  v3 = this[13];
  if (v3 < v2 >> 3)
  {
    v4 = v2 >> 3;
    do
    {
      if (!****(_BYTE ****)(v1 + 8 * v3))
        break;
      this[13] = ++v3;
    }
    while (v4 != v3);
  }
  return this;
}

void YAML::detail::node_data::compute_map_size(YAML::detail::node_data *this)
{
  char *v1;
  char *v2;
  uint64_t *v4;
  uint64_t v5;

  v1 = (char *)this + 136;
  v2 = (char *)*((_QWORD *)this + 18);
  if (v2 != (char *)this + 136)
  {
    do
    {
      v4 = (uint64_t *)v2;
      v2 = (char *)*((_QWORD *)v2 + 1);
      if (***(_BYTE ***)v4[2])
      {
        if (***(_BYTE ***)v4[3])
        {
          v5 = *v4;
          *(_QWORD *)(v5 + 8) = v2;
          *(_QWORD *)v4[1] = v5;
          --*((_QWORD *)this + 19);
          operator delete(v4);
        }
      }
    }
    while (v2 != v1);
  }
}

uint64_t YAML::detail::node_data::begin@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;

  if (!*(_BYTE *)this)
  {
LABEL_5:
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return this;
  }
  v2 = *(_DWORD *)(this + 16);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      v3 = *(_QWORD *)(this + 80);
      *(_DWORD *)a2 = 1;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = v3;
      return this;
    }
    goto LABEL_5;
  }
  return YAML::detail::node_iterator_base<YAML::detail::node const>::node_iterator_base(a2, *(_BYTE *****)(this + 112), *(_BYTE *****)(this + 120));
}

{
  int v2;
  uint64_t v3;

  if (!*(_BYTE *)this)
  {
LABEL_5:
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return this;
  }
  v2 = *(_DWORD *)(this + 16);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      v3 = *(_QWORD *)(this + 80);
      *(_DWORD *)a2 = 1;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = v3;
      return this;
    }
    goto LABEL_5;
  }
  return YAML::detail::node_iterator_base<YAML::detail::node const>::node_iterator_base(a2, *(_BYTE *****)(this + 112), *(_BYTE *****)(this + 120));
}

uint64_t YAML::detail::node_iterator_base<YAML::detail::node const>::node_iterator_base(uint64_t result, _BYTE ****a2, _BYTE ****a3)
{
  *(_DWORD *)result = 2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  if (a3 != a2)
  {
    while (!****a2 || !***a2[1])
    {
      a2 += 2;
      if (a2 == a3)
      {
        a2 = a3;
        break;
      }
    }
  }
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t YAML::detail::node_data::end@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;

  if (!*(_BYTE *)this)
  {
LABEL_5:
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return this;
  }
  v2 = *(_DWORD *)(this + 16);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      v3 = *(_QWORD *)(this + 88);
      *(_DWORD *)a2 = 1;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = v3;
      return this;
    }
    goto LABEL_5;
  }
  return YAML::detail::node_iterator_base<YAML::detail::node const>::node_iterator_base(a2, *(_BYTE *****)(this + 120), *(_BYTE *****)(this + 120));
}

{
  int v2;
  uint64_t v3;

  if (!*(_BYTE *)this)
  {
LABEL_5:
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return this;
  }
  v2 = *(_DWORD *)(this + 16);
  if (v2 != 4)
  {
    if (v2 == 3)
    {
      v3 = *(_QWORD *)(this + 88);
      *(_DWORD *)a2 = 1;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = v3;
      return this;
    }
    goto LABEL_5;
  }
  return YAML::detail::node_iterator_base<YAML::detail::node const>::node_iterator_base(a2, *(_BYTE *****)(this + 120), *(_BYTE *****)(this + 120));
}

void YAML::detail::node_data::push_back(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  YAML::BadPushback *exception;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4 > 1)
  {
    if (v4 != 3)
    {
      exception = (YAML::BadPushback *)__cxa_allocate_exception(0x38uLL);
      YAML::BadPushback::BadPushback(exception);
    }
    v5 = *(_QWORD **)(a1 + 88);
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 3;
    v5 = *(_QWORD **)(a1 + 80);
    *(_QWORD *)(a1 + 88) = v5;
    *(_QWORD *)(a1 + 104) = 0;
  }
  v6 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD *)(a1 + 80);
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    *v14 = a2;
    v7 = v14 + 1;
    v17 = *(char **)(a1 + 80);
    v16 = *(char **)(a1 + 88);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = *(char **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v7;
    *(_QWORD *)(a1 + 96) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(a1 + 88) = v7;
}

void sub_1BFAB0B40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

YAML::BadPushback *YAML::BadPushback::BadPushback(YAML::BadPushback *this)
{
  void *__p[2];
  char v4;
  uint64_t v5;
  int v6;

  v5 = -1;
  v6 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "appending to a non-sequence");
  YAML::Exception::Exception((uint64_t)this, &v5, (__int128 *)__p);
  *(_QWORD *)this = &off_1E7939180;
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = &off_1E7932FF8;
  return this;
}

void sub_1BFAB0BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::detail::node_data::insert(YAML::detail::node_data *a1, YAML::detail::node *a2, YAML::detail::node *a3, YAML::detail::memory ***a4)
{
  unsigned int v7;
  YAML::detail::memory **v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *exception;
  YAML::detail::memory **v15[2];

  v7 = *((_DWORD *)a1 + 4);
  if (v7 < 2 || v7 == 3)
  {
    v9 = a4[1];
    v15[0] = *a4;
    v15[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 1);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    YAML::detail::node_data::convert_to_map((uint64_t)a1, v15);
    if (v9)
    {
      v12 = (unint64_t *)(v9 + 1);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        (*((void (**)(YAML::detail::memory **))*v9 + 2))(v9);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
      }
    }
  }
  else if (v7 == 2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    YAML::BadSubscript::BadSubscript<YAML::detail::node>(exception);
  }
  YAML::detail::node_data::insert_map_pair(a1, a2, a3);
}

void sub_1BFAB0CD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void YAML::detail::node_data::convert_to_map(uint64_t a1, YAML::detail::memory ***a2)
{
  unsigned int v3;
  YAML::detail::memory **v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  YAML::detail::memory **v9[2];

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 2)
  {
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
    std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear((_QWORD *)(a1 + 136));
    *(_DWORD *)(a1 + 16) = 4;
  }
  else if (v3 == 3)
  {
    v4 = a2[1];
    v9[0] = *a2;
    v9[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    YAML::detail::node_data::convert_sequence_to_map(a1, v9);
    if (v4)
    {
      v7 = (unint64_t *)(v4 + 1);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*((void (**)(YAML::detail::memory **))*v4 + 2))(v4);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
      }
    }
  }
  else if (v3 == 2)
  {
    __assert_rtn("convert_to_map", "node_data.cpp", 294, "false");
  }
}

void sub_1BFAB0DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *YAML::BadSubscript::BadSubscript<YAML::detail::node>(_QWORD *a1)
{
  void *__p[2];
  char v4;
  uint64_t v5;
  int v6;

  v5 = -1;
  v6 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "operator[] call on a scalar");
  YAML::Exception::Exception((uint64_t)a1, &v5, (__int128 *)__p);
  *a1 = &off_1E7939180;
  if (v4 < 0)
    operator delete(__p[0]);
  *a1 = &off_1E79393C0;
  return a1;
}

void sub_1BFAB0E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::detail::node_data::insert_map_pair(YAML::detail::node_data *this, YAML::detail::node *a2, YAML::detail::node *a3)
{
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v7 = (char *)*((_QWORD *)this + 15);
  v6 = *((_QWORD *)this + 16);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (char *)*((_QWORD *)this + 14);
    v10 = (v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = (char *)operator new(16 * v13);
    v15 = &v14[16 * v10];
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = a3;
    v8 = v15 + 16;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v9);
      v7 = v9;
    }
    *((_QWORD *)this + 14) = v15;
    *((_QWORD *)this + 15) = v8;
    *((_QWORD *)this + 16) = &v14[16 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v7 = a2;
    *((_QWORD *)v7 + 1) = a3;
    v8 = v7 + 16;
  }
  *((_QWORD *)this + 15) = v8;
  if (!***(_BYTE ***)a2 || !***(_BYTE ***)a3)
  {
    v16 = operator new(0x20uLL);
    v16[2] = a2;
    v16[3] = a3;
    v18 = *((_QWORD *)this + 17);
    v17 = (_QWORD *)((char *)this + 136);
    *v16 = v18;
    v16[1] = v17;
    *(_QWORD *)(v18 + 8) = v16;
    *v17 = v16;
    ++v17[2];
  }
}

_QWORD *YAML::detail::node_data::convert_sequence_to_map(uint64_t a1, YAML::detail::memory ***a2)
{
  _QWORD *result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  YAML::detail::node *node;
  uint64_t v11;
  std::string __str;
  _QWORD v14[13];
  char v15;
  uint64_t v16;

  if (*(_DWORD *)(a1 + 16) != 3)
    __assert_rtn("convert_sequence_to_map", "node_data.cpp", 300, "m_type == NodeType::Sequence");
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
  result = std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear((_QWORD *)(a1 + 136));
  v4 = *(_QWORD *)(a1 + 88);
  if (v4 != *(_QWORD *)(a1 + 80))
  {
    v5 = 0;
    v6 = *MEMORY[0x1E0DE4F50];
    v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v9 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
      std::ostream::operator<<();
      node = (YAML::detail::node *)YAML::detail::memory::create_node(**a2);
      std::stringbuf::str();
      YAML::detail::node::mark_defined(node);
      v11 = **(_QWORD **)node;
      *(_BYTE *)v11 = 1;
      *(_DWORD *)(v11 + 16) = 2;
      std::string::operator=((std::string *)(v11 + 56), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      YAML::detail::node_data::insert_map_pair((YAML::detail::node_data *)a1, node, *(YAML::detail::node **)(*(_QWORD *)(a1 + 80) + 8 * v5));
      v14[0] = v6;
      *(_QWORD *)((char *)v14 + *(_QWORD *)(v6 - 24)) = v7;
      v14[2] = v8;
      v14[3] = v9;
      if (v15 < 0)
        operator delete((void *)v14[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      result = (_QWORD *)MEMORY[0x1C3B8D80C](&v16);
      ++v5;
      v4 = *(_QWORD *)(a1 + 80);
    }
    while (v5 < (*(_QWORD *)(a1 + 88) - v4) >> 3);
  }
  *(_QWORD *)(a1 + 88) = v4;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 16) = 4;
  return result;
}

void sub_1BFAB1178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t YAML::detail::node_data::get(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(a1 + 16) != 4)
    return 0;
  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  if (v2 == v3)
    return 0;
  while (**(_QWORD **)v2 != *a2)
  {
    v2 += 16;
    if (v2 == v3)
      return 0;
  }
  return *(_QWORD *)(v2 + 8);
}

YAML::detail::node *YAML::detail::node_data::get(uint64_t a1, YAML::detail::node *a2, YAML::detail::memory ***a3)
{
  unsigned int v6;
  YAML::detail::memory **v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  YAML::detail::node *node;
  _QWORD *exception;
  YAML::detail::memory **v18[2];

  v6 = *(_DWORD *)(a1 + 16);
  if (v6 < 2 || v6 == 3)
  {
    v8 = a3[1];
    v18[0] = *a3;
    v18[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 1);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    YAML::detail::node_data::convert_to_map(a1, v18);
    if (v8)
    {
      v11 = (unint64_t *)(v8 + 1);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        (*((void (**)(YAML::detail::memory **))*v8 + 2))(v8);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
      }
    }
  }
  else if (v6 == 2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    YAML::BadSubscript::BadSubscript<YAML::detail::node>(exception);
  }
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 120);
  if (v13 == v14)
  {
LABEL_18:
    node = (YAML::detail::node *)YAML::detail::memory::create_node(**a3);
    YAML::detail::node_data::insert_map_pair((YAML::detail::node_data *)a1, a2, node);
  }
  else
  {
    while (**(_QWORD **)v13 != *(_QWORD *)a2)
    {
      v13 += 16;
      if (v13 == v14)
        goto LABEL_18;
    }
    return *(YAML::detail::node **)(v13 + 8);
  }
  return node;
}

void sub_1BFAB1324(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t YAML::detail::node_data::remove(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  _QWORD *v11;
  uint64_t v12;

  if (*(_DWORD *)(a1 + 16) != 4)
    return 0;
  v4 = (uint64_t *)(a1 + 136);
  v5 = *(uint64_t **)(a1 + 144);
  if (v5 != v4)
  {
    do
    {
      v6 = (uint64_t *)v5[1];
      if (*(_QWORD *)v5[2] == *a2)
      {
        v7 = *v5;
        *(_QWORD *)(v7 + 8) = v6;
        *(_QWORD *)v5[1] = v7;
        --*(_QWORD *)(a1 + 152);
        operator delete(v5);
      }
      v5 = v6;
    }
    while (v6 != v4);
  }
  v9 = *(_QWORD ***)(a1 + 112);
  v8 = *(_QWORD ***)(a1 + 120);
  if (v9 == v8)
    return 0;
  while (**v9 != *a2)
  {
    v9 += 2;
    if (v9 == v8)
      return 0;
  }
  v11 = v9 + 2;
  if (v9 + 2 != v8)
  {
    do
    {
      v12 = v11[1];
      *(v11 - 2) = *v11;
      *(v11 - 1) = v12;
      v11 += 2;
    }
    while (v11 != v8);
    v9 = (_QWORD **)(v11 - 2);
  }
  *(_QWORD *)(a1 + 120) = v9;
  return 1;
}

void siri::dialogengine::DialogMetadataSemanticValue::ToString(siri::dialogengine::DialogMetadataSemanticValue *this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  std::string *v5;
  siri::dialogengine::DialogMetadataSemanticValue *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  __int128 *v14;
  __int128 *i;
  __int128 v16;
  size_t size;
  std::string *v18;
  std::string *v19;
  void **v20;
  std::string::size_type v21;
  _OWORD *v22;
  __int128 v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  void *__p[2];
  unsigned __int8 v33;
  std::string v34;
  std::string v35;
  _QWORD v36[3];
  std::string v37;

  if (*((char *)this + 23) >= 0)
    v4 = *((unsigned __int8 *)this + 23);
  else
    v4 = *((_QWORD *)this + 1);
  std::string::basic_string[abi:ne180100]((uint64_t)&v37, v4 + 1);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v37;
  else
    v5 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*((char *)this + 23) >= 0)
      v6 = this;
    else
      v6 = *(siri::dialogengine::DialogMetadataSemanticValue **)this;
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 35;
  v7 = *((char *)this + 47);
  if (v7 >= 0)
    v8 = (char *)this + 24;
  else
    v8 = (const std::string::value_type *)*((_QWORD *)this + 3);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)this + 47);
  else
    v9 = *((_QWORD *)this + 4);
  v10 = std::string::append(&v37, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v35, ": ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v27 = a2;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  memset(&v37, 0, sizeof(v37));
  v14 = (__int128 *)*((_QWORD *)this + 6);
  for (i = (__int128 *)*((_QWORD *)this + 7); v14 != i; v14 += 3)
  {
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v16 = *v14;
      v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v16;
    }
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v36, (const void ***)v14 + 3);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    else
      size = v35.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&v34, size + 1);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v34;
    else
      v18 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v35;
      else
        v19 = (std::string *)v35.__r_.__value_.__r.__words[0];
      memmove(v18, v19, size);
    }
    *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + size) = 32;
    std::string::basic_string[abi:ne180100]<0>(v30, "=");
    std::string::basic_string[abi:ne180100]<0>(v28, ", ");
    siri::dialogengine::StringJoinMap(v36, (const void **)v30, (uint64_t)v28, (uint64_t)__p);
    if ((v33 & 0x80u) == 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    if ((v33 & 0x80u) == 0)
      v21 = v33;
    else
      v21 = (std::string::size_type)__p[1];
    std::string::append(&v34, (const std::string::value_type *)v20, v21);
    if ((char)v33 < 0)
      operator delete(__p[0]);
    if (v29 < 0)
      operator delete(v28[0]);
    if (v31 < 0)
      operator delete(v30[0]);
    v22 = (_OWORD *)v37.__r_.__value_.__l.__size_;
    if (v37.__r_.__value_.__l.__size_ >= v37.__r_.__value_.__r.__words[2])
    {
      v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v37, (__int128 *)&v34);
    }
    else
    {
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v37.__r_.__value_.__l.__size_, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
      }
      else
      {
        v23 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
        *(_QWORD *)(v37.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v34.__r_.__value_.__l + 2);
        *v22 = v23;
      }
      v24 = (std::string::size_type)v22 + 24;
    }
    v37.__r_.__value_.__l.__size_ = v24;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v36[1]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v34, ", ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v35, (uint64_t)v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_, (uint64_t)&v34);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v35;
  else
    v25 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    v26 = v35.__r_.__value_.__l.__size_;
  std::string::append(v27, (const std::string::value_type *)v25, v26);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
}

void sub_1BFAB179C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a40 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  __p = (void *)(v40 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(a10 + 23) < 0)
    operator delete(*(void **)a10);
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogMetadataWriter *siri::dialogengine::DialogMetadataWriter::DialogMetadataWriter(siri::dialogengine::DialogMetadataWriter *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  v2[2] = 0;
  v2[1] = 0;
  *v2 = v2 + 1;
  siri::dialogengine::DialogMetadata::File::File((siri::dialogengine::DialogMetadata::File *)(v2 + 3));
  *(_QWORD *)this = v2;
  return this;
}

void sub_1BFAB1914(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  MEMORY[0x1C3B8D890](v1, 0x10A0C40E967F5FALL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogMetadataWriter::~DialogMetadataWriter(siri::dialogengine::DialogMetadataWriter *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(v1 + 24) = &off_1E792A850;
    google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 48));
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)(v1 + 32));
    std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
    MEMORY[0x1C3B8D890](v1, 0x10A0C40E967F5FALL);
  }
}

void siri::dialogengine::DialogMetadataWriter::AddSemanticValue(siri::dialogengine::DialogMetadataWriter *this, __int128 **a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  siri::dialogengine::DialogMetadata::SemanticValue *v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  const std::string *v13;
  std::string *v14;
  __int128 *v15;
  __int128 v16;
  int *v17;
  uint64_t v18;
  int v19;
  siri::dialogengine::DialogMetadata::DisplayValue *v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  __int128 *v24;
  int *v25;
  uint64_t v26;
  int v27;
  siri::dialogengine::DialogMetadata::Constraint *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  std::string *v32;
  std::string **v33;
  uint64_t *v34;
  __int128 *v35;
  __int128 *v36;
  BOOL v37;
  __int128 *v38;
  std::string __str;
  std::string v40;
  std::string __p;
  __int128 *v42;
  _QWORD *v43[2];
  std::string v44;

  siri::dialogengine::DialogMetadataSemanticValue::ToString((siri::dialogengine::DialogMetadataSemanticValue *)a2, &v44);
  v4 = std::__tree<std::string>::find<std::string>(*(_QWORD *)this, (const void **)&v44.__r_.__value_.__l.__data_);
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this + 8 == v4)
  {
    v6 = *(int **)(v5 + 64);
    if (v6)
    {
      v7 = *(int *)(v5 + 56);
      v8 = *v6;
      if ((int)v7 < *v6)
      {
        *(_DWORD *)(v5 + 56) = v7 + 1;
        v9 = *(siri::dialogengine::DialogMetadata::SemanticValue **)&v6[2 * v7 + 2];
        goto LABEL_11;
      }
      if (v8 != *(_DWORD *)(v5 + 60))
      {
LABEL_10:
        *v6 = v8 + 1;
        v9 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::DialogMetadata::SemanticValue>(*(google::protobuf::internal::ArenaImpl **)(v5 + 48));
        v10 = *(_QWORD *)(v5 + 64);
        v11 = *(int *)(v5 + 56);
        *(_DWORD *)(v5 + 56) = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11 + 8) = v9;
LABEL_11:
        v12 = (std::string *)*((_QWORD *)v9 + 6);
        *((_DWORD *)v9 + 4) |= 1u;
        if (v12 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v9 + 6, (uint64_t)a2);
        else
          std::string::operator=(v12, (const std::string *)a2);
        v13 = (const std::string *)(a2 + 3);
        v14 = (std::string *)*((_QWORD *)v9 + 7);
        *((_DWORD *)v9 + 4) |= 2u;
        if (v14 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v9 + 7, (uint64_t)v13);
        else
          std::string::operator=(v14, v13);
        v15 = a2[6];
        v38 = a2[7];
        if (v15 == v38)
        {
LABEL_58:
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(*(uint64_t ***)this, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&v44);
          goto LABEL_59;
        }
        while (1)
        {
          if (*((char *)v15 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
          }
          else
          {
            v16 = *v15;
            __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
          }
          std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v42, (const void ***)v15 + 3);
          v17 = (int *)*((_QWORD *)v9 + 5);
          if (!v17)
            break;
          v18 = *((int *)v9 + 8);
          v19 = *v17;
          if ((int)v18 >= *v17)
          {
            if (v19 == *((_DWORD *)v9 + 9))
            {
LABEL_26:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v9 + 6, v19 + 1);
              v17 = (int *)*((_QWORD *)v9 + 5);
              v19 = *v17;
            }
            *v17 = v19 + 1;
            v20 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::DialogMetadata::DisplayValue>(*((google::protobuf::internal::ArenaImpl **)v9 + 3));
            v21 = *((_QWORD *)v9 + 5);
            v22 = *((int *)v9 + 8);
            *((_DWORD *)v9 + 8) = v22 + 1;
            *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
            goto LABEL_28;
          }
          *((_DWORD *)v9 + 8) = v18 + 1;
          v20 = *(siri::dialogengine::DialogMetadata::DisplayValue **)&v17[2 * v18 + 2];
LABEL_28:
          v23 = (std::string *)*((_QWORD *)v20 + 6);
          *((_DWORD *)v20 + 4) |= 1u;
          if (v23 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v20 + 6, (uint64_t)&__p);
          else
            std::string::operator=(v23, &__p);
          v24 = v42;
          if (v42 != (__int128 *)v43)
          {
            while (1)
            {
              std::pair<std::string const,std::string>::pair[abi:ne180100](&__str, v24 + 2);
              v25 = (int *)*((_QWORD *)v20 + 5);
              if (!v25)
                break;
              v26 = *((int *)v20 + 8);
              v27 = *v25;
              if ((int)v26 >= *v25)
              {
                if (v27 == *((_DWORD *)v20 + 9))
                {
LABEL_37:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v20 + 6, v27 + 1);
                  v25 = (int *)*((_QWORD *)v20 + 5);
                  v27 = *v25;
                }
                *v25 = v27 + 1;
                v28 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::DialogMetadata::Constraint>(*((google::protobuf::internal::ArenaImpl **)v20 + 3));
                v29 = *((_QWORD *)v20 + 5);
                v30 = *((int *)v20 + 8);
                *((_DWORD *)v20 + 8) = v30 + 1;
                *(_QWORD *)(v29 + 8 * v30 + 8) = v28;
                goto LABEL_39;
              }
              *((_DWORD *)v20 + 8) = v26 + 1;
              v28 = *(siri::dialogengine::DialogMetadata::Constraint **)&v25[2 * v26 + 2];
LABEL_39:
              v31 = (std::string *)*((_QWORD *)v28 + 3);
              *((_DWORD *)v28 + 4) |= 1u;
              if (v31 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v28 + 3, (uint64_t)&__str);
              else
                std::string::operator=(v31, &__str);
              v34 = (uint64_t *)*((_QWORD *)v28 + 4);
              v33 = (std::string **)((char *)v28 + 32);
              v32 = (std::string *)v34;
              *((_DWORD *)v33 - 4) |= 2u;
              if (v34 == &google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v33, (uint64_t)&v40);
              else
                std::string::operator=(v32, &v40);
              if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v40.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v35 = (__int128 *)*((_QWORD *)v24 + 1);
              if (v35)
              {
                do
                {
                  v36 = v35;
                  v35 = *(__int128 **)v35;
                }
                while (v35);
              }
              else
              {
                do
                {
                  v36 = (__int128 *)*((_QWORD *)v24 + 2);
                  v37 = *(_QWORD *)v36 == (_QWORD)v24;
                  v24 = v36;
                }
                while (!v37);
              }
              v24 = v36;
              if (v36 == (__int128 *)v43)
                goto LABEL_55;
            }
            v27 = *((_DWORD *)v20 + 9);
            goto LABEL_37;
          }
LABEL_55:
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v43[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v15 += 3;
          if (v15 == v38)
            goto LABEL_58;
        }
        v19 = *((_DWORD *)v9 + 9);
        goto LABEL_26;
      }
    }
    else
    {
      v8 = *(_DWORD *)(v5 + 60);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v5 + 48), v8 + 1);
    v6 = *(int **)(v5 + 64);
    v8 = *v6;
    goto LABEL_10;
  }
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 1u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_59:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
}

void sub_1BFAB1E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  if (*(char *)(v24 - 89) < 0)
    operator delete(*(void **)(v24 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t *siri::dialogengine::DialogMetadataWriter::SetAllowUnbounded(uint64_t *this, char a2)
{
  uint64_t v2;

  v2 = *this;
  *(_DWORD *)(v2 + 40) = *(_DWORD *)(*this + 40) | 1;
  *(_BYTE *)(v2 + 72) = a2;
  return this;
}

void siri::dialogengine::DialogMetadataWriter::ToBytes(siri::dialogengine::DialogMetadataWriter *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  const char *v5;
  std::string __p;

  v4 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 56))
  {
    memset(&__p, 0, sizeof(__p));
    if (google::protobuf::MessageLite::SerializeToString((const char *)(v4 + 24), &__p))
    {
      *a3 = __p;
    }
    else
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error while serializing dialog metadata data", v5);
      std::string::basic_string[abi:ne180100]<0>(a3, "");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No dialog metadata", a2);
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

void sub_1BFAB1F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogMetadataWriter::Save(uint64_t *a1, std::string *a2)
{
  uint64_t v3;
  _BOOL8 v4;
  void *v6;
  char v7;
  std::string __p;

  v3 = *a1;
  if (*(_DWORD *)(*a1 + 56))
  {
    memset(&__p, 0, sizeof(__p));
    if (google::protobuf::MessageLite::SerializeToString((const char *)(v3 + 24), &__p))
    {
      v4 = siri::dialogengine::WriteGzippedFile(a2, (const void **)&__p.__r_.__value_.__l.__data_);
    }
    else
    {
      std::operator+<char>();
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v6, 3u);
      if (v7 < 0)
        operator delete(v6);
      v4 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 1u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 1;
  }
  return v4;
}

void sub_1BFAB202C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void InitDefaultsscc_info_Table_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table::Table((SnippetUI::Table *)&SnippetUI::_Table_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_default_instance_, v4);
  qword_1ED1D3B28 = (uint64_t)&SnippetUI::_Table_Header_default_instance_;
}

void InitDefaultsscc_info_Table_Row_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table_Row::Table_Row((SnippetUI::Table_Row *)&SnippetUI::_Table_Row_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_Row_default_instance_, v4);
  qword_1ED1D3C88 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

void InitDefaultsscc_info_Table_Content_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table_Content::Table_Content((SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_Content_default_instance_, v4);
  qword_1ED1D3EA8 = (uint64_t)&SnippetUI::_Table_EmptyCell_default_instance_;
  unk_1ED1D3EB0 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D3EB8 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D3E90 = (uint64_t)&SnippetUI::_OptionalInt_default_instance_;
}

void InitDefaultsscc_info_Table_EmptyCell_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::_Table_EmptyCell_default_instance_ = (uint64_t)&off_1E7933338;
  unk_1ED1D4100 = 0;
  dword_1ED1D4108 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_EmptyCell_default_instance_, v4);
}

void SnippetUI::Table_EmptyCell::~Table_EmptyCell(SnippetUI::Table_EmptyCell *this)
{
  *(_QWORD *)this = &off_1E7933338;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E7933338;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7933338;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::Table_EmptyCell::New(SnippetUI::Table_EmptyCell *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_EmptyCell>(0);
}

uint64_t SnippetUI::Table_EmptyCell::New(SnippetUI::Table_EmptyCell *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_EmptyCell>(a2);
}

void SnippetUI::Table_EmptyCell::Clear(SnippetUI::Table_EmptyCell *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v1;
  char v2;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::Table_EmptyCell *)((char *)this + 8);
  if ((v2 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
}

uint64_t SnippetUI::Table_EmptyCell::IsInitialized(SnippetUI::Table_EmptyCell *this)
{
  return 1;
}

char *SnippetUI::Table_EmptyCell::ByteSizeLong(SnippetUI::Table_EmptyCell *this)
{
  google::protobuf::UnknownFieldSet *v1;
  char v2;
  _DWORD *v3;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::Table_EmptyCell *)((char *)this + 8);
  v3 = (_DWORD *)((char *)v1 + 8);
  if ((v2 & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize(v1, 0, v3);
  *v3 = 0;
  return 0;
}

uint64_t SnippetUI::Table_EmptyCell::GetCachedSize(SnippetUI::Table_EmptyCell *this)
{
  return *((unsigned int *)this + 4);
}

google::protobuf::internal *SnippetUI::Table_EmptyCell::_InternalParse(SnippetUI::Table_EmptyCell *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v4;
  google::protobuf::internal::ParseContext *v5;
  google::protobuf::internal *TagFallback;
  char *v7;
  google::protobuf::internal *v10;

  v10 = a2;
  v4 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v10, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v10;
    TagFallback = (google::protobuf::internal *)((char *)v10 + 1);
    v7 = (char *)*(unsigned __int8 *)v10;
    if ((*(char *)v10 & 0x80000000) == 0)
      goto LABEL_6;
    v7 = (char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v10 + 2);
LABEL_6:
      v10 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v10, v7);
    v10 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      break;
    v10 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v7, v4, TagFallback, a3, v5);
    if (!v10)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v7 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_EmptyCell::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_EmptyCell *this, const google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v4 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::Table_EmptyCell::CopyFrom(SnippetUI::Table_EmptyCell *this, const google::protobuf::Message *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::Table_EmptyCell *)((char *)this + 8);
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::Table_EmptyCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_EmptyCell::MergeFrom(SnippetUI::Table_EmptyCell *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Table_EmptyCell *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 1533);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Table_EmptyCell::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAB2484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_EmptyCell::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t SnippetUI::Table_EmptyCell::GetMetadata(SnippetUI::Table_EmptyCell *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Table_2eproto);
  return qword_1EF582880;
}

void InitDefaultsscc_info_Table_SpacerColumnCell_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::_Table_SpacerColumnCell_default_instance_ = (uint64_t)&off_1E7933578;
  *(_QWORD *)algn_1ED1D4828 = 0;
  dword_1ED1D4830 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_SpacerColumnCell_default_instance_, v4);
}

void SnippetUI::Table_SpacerColumnCell::~Table_SpacerColumnCell(SnippetUI::Table_SpacerColumnCell *this)
{
  *(_QWORD *)this = &off_1E7933578;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E7933578;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7933578;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::Table_SpacerColumnCell::New(SnippetUI::Table_SpacerColumnCell *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_SpacerColumnCell>(0);
}

uint64_t SnippetUI::Table_SpacerColumnCell::New(SnippetUI::Table_SpacerColumnCell *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_SpacerColumnCell>(a2);
}

void SnippetUI::Table_SpacerColumnCell::Clear(SnippetUI::Table_SpacerColumnCell *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v1;
  char v2;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::Table_SpacerColumnCell *)((char *)this + 8);
  if ((v2 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
}

uint64_t SnippetUI::Table_SpacerColumnCell::IsInitialized(SnippetUI::Table_SpacerColumnCell *this)
{
  return 1;
}

char *SnippetUI::Table_SpacerColumnCell::ByteSizeLong(SnippetUI::Table_SpacerColumnCell *this)
{
  google::protobuf::UnknownFieldSet *v1;
  char v2;
  _DWORD *v3;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::Table_SpacerColumnCell *)((char *)this + 8);
  v3 = (_DWORD *)((char *)v1 + 8);
  if ((v2 & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize(v1, 0, v3);
  *v3 = 0;
  return 0;
}

uint64_t SnippetUI::Table_SpacerColumnCell::GetCachedSize(SnippetUI::Table_SpacerColumnCell *this)
{
  return *((unsigned int *)this + 4);
}

google::protobuf::internal *SnippetUI::Table_SpacerColumnCell::_InternalParse(SnippetUI::Table_SpacerColumnCell *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v4;
  google::protobuf::internal::ParseContext *v5;
  google::protobuf::internal *TagFallback;
  char *v7;
  google::protobuf::internal *v10;

  v10 = a2;
  v4 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v10, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v10;
    TagFallback = (google::protobuf::internal *)((char *)v10 + 1);
    v7 = (char *)*(unsigned __int8 *)v10;
    if ((*(char *)v10 & 0x80000000) == 0)
      goto LABEL_6;
    v7 = (char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v10 + 2);
LABEL_6:
      v10 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v10, v7);
    v10 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      break;
    v10 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v7, v4, TagFallback, a3, v5);
    if (!v10)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v7 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_SpacerColumnCell::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_SpacerColumnCell *this, const google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v4 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::Table_SpacerColumnCell::CopyFrom(SnippetUI::Table_SpacerColumnCell *this, const google::protobuf::Message *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::Table_SpacerColumnCell *)((char *)this + 8);
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::Table_SpacerColumnCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_SpacerColumnCell::MergeFrom(SnippetUI::Table_SpacerColumnCell *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Table_SpacerColumnCell *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2256);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Table_SpacerColumnCell::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAB27A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_SpacerColumnCell::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t SnippetUI::Table_SpacerColumnCell::GetMetadata(SnippetUI::Table_SpacerColumnCell *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Table_2eproto);
  return qword_1EF5828B0;
}

uint64_t *SnippetUI::Table_SpacerColumnCell::default_instance(SnippetUI::Table_SpacerColumnCell *this)
{
  if (atomic_load(scc_info_Table_SpacerColumnCell_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_SpacerColumnCell_Table_2eproto);
  return &SnippetUI::_Table_SpacerColumnCell_default_instance_;
}

void SnippetUI::Table_SpacerColumnCell::MergeFrom(SnippetUI::Table_SpacerColumnCell *this, const SnippetUI::Table_SpacerColumnCell *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2271);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_SpacerColumnCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

void sub_1BFAB28A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_SpacerColumnCell>(google::protobuf::internal::ArenaImpl *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_SpacerColumnCell>);
  }
  else
  {
    result = operator new();
  }
  *(_QWORD *)result = &off_1E7933578;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_SpacerColumnCell>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Table_HeaderCell_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table_HeaderCell::Table_HeaderCell((SnippetUI::Table_HeaderCell *)&SnippetUI::_Table_HeaderCell_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_HeaderCell_default_instance_, v4);
  qword_1ED1D4268 = (uint64_t)&SnippetUI::_Table_Content_default_instance_;
}

SnippetUI::Table_HeaderCell *SnippetUI::Table_HeaderCell::Table_HeaderCell(SnippetUI::Table_HeaderCell *this)
{
  *(_QWORD *)this = &off_1E79333F8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load(scc_info_Table_HeaderCell_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_HeaderCell_Table_2eproto);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1BFAB2A08(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_HeaderCell::~Table_HeaderCell(SnippetUI::Table_HeaderCell *this)
{
  SnippetUI::Table_HeaderCell::~Table_HeaderCell(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E79333F8;
  if (this != (SnippetUI::Table_HeaderCell *)&SnippetUI::_Table_HeaderCell_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Table_HeaderCell *SnippetUI::Table_HeaderCell::New(SnippetUI::Table_HeaderCell *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_HeaderCell>(0);
}

SnippetUI::Table_HeaderCell *SnippetUI::Table_HeaderCell::New(SnippetUI::Table_HeaderCell *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_HeaderCell>(a2);
}

void SnippetUI::Table_HeaderCell::Clear(SnippetUI::Table_HeaderCell *this)
{
  uint64_t v2;
  _QWORD *v3;
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  v3 = (_QWORD *)((char *)this + 16);
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v5 = *((_BYTE *)this + 8);
  v4 = (SnippetUI::Table_HeaderCell *)((char *)this + 8);
  *v3 = 0;
  v3[1] = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
}

uint64_t SnippetUI::Table_HeaderCell::IsInitialized(SnippetUI::Table_HeaderCell *this)
{
  return 1;
}

char *SnippetUI::Table_HeaderCell::ByteSizeLong(SnippetUI::Table_HeaderCell *this)
{
  SnippetUI::Table_Content *v2;
  char *v3;
  const google::protobuf::UnknownFieldSet *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  if (this == (SnippetUI::Table_HeaderCell *)&SnippetUI::_Table_HeaderCell_default_instance_
    || (v2 = (SnippetUI::Table_Content *)*((_QWORD *)this + 2)) == 0)
  {
    v4 = 0;
  }
  else
  {
    v3 = SnippetUI::Table_Content::ByteSizeLong(v2);
    v4 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
  }
  v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0)
      v6 = 11;
    else
      v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v6);
  }
  v7 = *((_DWORD *)this + 7);
  if (v7)
  {
    if (v7 < 0)
      v8 = 11;
    else
      v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v8);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_HeaderCell *)((char *)this + 8), v4, (_DWORD *)this + 8);
  *((_DWORD *)this + 8) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::Table_HeaderCell::GetCachedSize(SnippetUI::Table_HeaderCell *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::internal *SnippetUI::Table_HeaderCell::_InternalParse(SnippetUI::Table_HeaderCell *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  unsigned int v9;
  char *v12;
  google::protobuf::internal *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  google::protobuf::internal *v17;
  int v18;
  SnippetUI::Table_Content *v19;
  google::protobuf::internal *v20;
  int v21;
  google::protobuf::internal *v23;

  v23 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) != 0)return v23;
        TagFallback = (google::protobuf::internal *)((char *)v23 + 1);
        v8 = (char *)*(unsigned __int8 *)v23;
        if ((*(char *)v23 & 0x80000000) == 0)
          goto LABEL_6;
        v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
          v23 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v8);
        v23 = TagFallback;
        if (!TagFallback)
          return TagFallback;
LABEL_7:
        v9 = v8 >> 3;
        if (v8 >> 3 != 3)
          break;
        if (v8 != 24)
          goto LABEL_13;
        v13 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v14) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_22;
        v15 = *(char *)v13;
        v14 = v14 + (v15 << 7) - 128;
        if ((v15 & 0x80000000) == 0)
        {
          v13 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_22:
          v23 = v13;
          goto LABEL_23;
        }
        v23 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v14);
        if (!v23)
          return 0;
LABEL_23:
        *((_DWORD *)this + 7) = v14;
      }
      if (v9 != 2)
        break;
      if (v8 != 16)
        goto LABEL_13;
      v17 = (google::protobuf::internal *)((char *)TagFallback + 1);
      LODWORD(v16) = *(unsigned __int8 *)TagFallback;
      if ((v16 & 0x80) != 0)
      {
        v18 = *(char *)v17;
        v16 = v16 + (v18 << 7) - 128;
        if ((v18 & 0x80000000) == 0)
        {
          v17 = (google::protobuf::internal *)((char *)TagFallback + 2);
          goto LABEL_28;
        }
        v20 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v16);
        v23 = v20;
        *((_DWORD *)this + 6) = v21;
        if (!v20)
          return 0;
      }
      else
      {
LABEL_28:
        v23 = v17;
        *((_DWORD *)this + 6) = v16;
      }
    }
    if (v9 == 1 && v8 == 10)
    {
      v19 = (SnippetUI::Table_Content *)*((_QWORD *)this + 2);
      if (!v19)
      {
        v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(0);
        *((_QWORD *)this + 2) = v19;
        TagFallback = v23;
      }
      v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Table_Content>(a3, v19, TagFallback);
      goto LABEL_32;
    }
LABEL_13:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
LABEL_32:
    v23 = (google::protobuf::internal *)v12;
    if (!v12)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_HeaderCell::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_HeaderCell *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  SnippetUI::Table_Content *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  if (this != (SnippetUI::Table_HeaderCell *)&SnippetUI::_Table_HeaderCell_default_instance_)
  {
    v6 = (SnippetUI::Table_Content *)*((_QWORD *)this + 2);
    if (v6)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        v6 = (SnippetUI::Table_Content *)*((_QWORD *)this + 2);
      }
      *a2 = 10;
      v7 = *((_DWORD *)v6 + 8);
      if (v7 > 0x7F)
      {
        a2[1] = v7 | 0x80;
        v9 = v7 >> 7;
        if (v7 >> 14)
        {
          v10 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v11 = v10;
            *v10++ = v9 | 0x80;
            v12 = v9 >> 7;
            v13 = v9 >> 14;
            v9 >>= 7;
          }
          while (v13);
          v8 = v11 + 2;
          *v10 = v12;
        }
        else
        {
          a2[2] = v9;
          v8 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v7;
        v8 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)SnippetUI::Table_Content::InternalSerializeWithCachedSizesToArray(v6, (char *)v8, a3, a4);
    }
  }
  v14 = *((_DWORD *)this + 6);
  if (v14)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v14 = *((_DWORD *)this + 6);
    }
    *a2 = 16;
    if (v14 > 0x7F)
    {
      a2[1] = v14 | 0x80;
      v15 = (unint64_t)(int)v14 >> 7;
      if (v14 >> 14)
      {
        v16 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v17 = v16;
          *v16++ = v15 | 0x80;
          v18 = v15 >> 7;
          v19 = v15 >> 14;
          v15 >>= 7;
        }
        while (v19);
        a2 = (char *)(v17 + 2);
        *v16 = v18;
      }
      else
      {
        a2[2] = v15;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v14;
      a2 += 2;
    }
  }
  v20 = *((_DWORD *)this + 7);
  if (v20)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v20 = *((_DWORD *)this + 7);
    }
    *a2 = 24;
    if (v20 > 0x7F)
    {
      a2[1] = v20 | 0x80;
      v21 = (unint64_t)(int)v20 >> 7;
      if (v20 >> 14)
      {
        v22 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v23 = v22;
          *v22++ = v21 | 0x80;
          v24 = v21 >> 7;
          v25 = v21 >> 14;
          v21 >>= 7;
        }
        while (v25);
        a2 = (char *)(v23 + 2);
        *v22 = v24;
      }
      else
      {
        a2[2] = v21;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v20;
      a2 += 2;
    }
  }
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::Table_HeaderCell::CopyFrom(SnippetUI::Table_HeaderCell *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_HeaderCell::Clear(this);
    SnippetUI::Table_HeaderCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_HeaderCell::MergeFrom(SnippetUI::Table_HeaderCell *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Table_HeaderCell *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 1782);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Table_HeaderCell::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAB3058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_HeaderCell::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t SnippetUI::Table_HeaderCell::GetMetadata(SnippetUI::Table_HeaderCell *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Table_2eproto);
  return qword_1EF582890;
}

void *SnippetUI::Table_HeaderCell::default_instance(SnippetUI::Table_HeaderCell *this)
{
  if (atomic_load(scc_info_Table_HeaderCell_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_HeaderCell_Table_2eproto);
  return &SnippetUI::_Table_HeaderCell_default_instance_;
}

void SnippetUI::Table_HeaderCell::MergeFrom(SnippetUI::Table_HeaderCell *this, const SnippetUI::Table_HeaderCell *a2)
{
  std::string *v4;
  uint64_t v5;
  const SnippetUI::Table_Content *v6;
  SnippetUI::Table_Content *v7;
  const SnippetUI::Table_Content *v8;
  int v9;
  int v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 1797);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_HeaderCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 != (const SnippetUI::Table_HeaderCell *)&SnippetUI::_Table_HeaderCell_default_instance_)
  {
    v6 = (const SnippetUI::Table_Content *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (SnippetUI::Table_Content *)*((_QWORD *)this + 2);
      if (!v7)
      {
        v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(0);
        *((_QWORD *)this + 2) = v7;
        v6 = (const SnippetUI::Table_Content *)*((_QWORD *)a2 + 2);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_;
      SnippetUI::Table_Content::MergeFrom(v7, v8);
    }
  }
  v9 = *((_DWORD *)a2 + 6);
  if (v9)
    *((_DWORD *)this + 6) = v9;
  v10 = *((_DWORD *)a2 + 7);
  if (v10)
    *((_DWORD *)this + 7) = v10;
}

void sub_1BFAB31B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Table_Content *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Table_Content *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Table_Content *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Content>);
    SnippetUI::Table_Content::Table_Content(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Table_Content *)operator new();
    SnippetUI::Table_Content::Table_Content(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAB324C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Content::MergeFrom(SnippetUI::Table_Content *this, const SnippetUI::Table_Content *a2)
{
  std::string *v4;
  uint64_t v5;
  const SnippetUI::OptionalInt *v6;
  SnippetUI::OptionalInt *v7;
  const SnippetUI::OptionalInt *v8;
  int v9;
  SnippetUI::Table_EmptyCell *v10;
  int **v11;
  int **v12;
  const SnippetUI::Table_EmptyCell *v13;
  int **v14;
  int **v15;
  char v16;
  std::string v17[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 1367);
    v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_Content *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 != (const SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_)
  {
    v6 = (const SnippetUI::OptionalInt *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (SnippetUI::OptionalInt *)*((_QWORD *)this + 2);
      if (!v7)
      {
        v7 = (SnippetUI::OptionalInt *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalInt>(0);
        *((_QWORD *)this + 2) = v7;
        v6 = (const SnippetUI::OptionalInt *)*((_QWORD *)a2 + 2);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::OptionalInt *)&SnippetUI::_OptionalInt_default_instance_;
      SnippetUI::OptionalInt::MergeFrom(v7, v8);
    }
  }
  v9 = *((_DWORD *)a2 + 9);
  if (v9 == 3)
  {
    if (*((_DWORD *)this + 9) == 3)
    {
      v11 = (int **)*((_QWORD *)this + 3);
    }
    else
    {
      SnippetUI::Table_Content::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 3;
      v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
      *((_QWORD *)this + 3) = v11;
      if (*((_DWORD *)a2 + 9) != 3)
      {
        v14 = (int **)&SnippetUI::_VisualProperty_default_instance_;
        goto LABEL_31;
      }
    }
    v14 = (int **)*((_QWORD *)a2 + 3);
LABEL_31:
    SnippetUI::VisualProperty::MergeFrom(v11, v14);
    return;
  }
  if (v9 != 2)
  {
    if (v9 != 1)
      return;
    if (*((_DWORD *)this + 9) == 1)
    {
      v10 = (SnippetUI::Table_EmptyCell *)*((_QWORD *)this + 3);
    }
    else
    {
      SnippetUI::Table_Content::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      v10 = (SnippetUI::Table_EmptyCell *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_EmptyCell>(0);
      *((_QWORD *)this + 3) = v10;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        v13 = (const SnippetUI::Table_EmptyCell *)&SnippetUI::_Table_EmptyCell_default_instance_;
        goto LABEL_29;
      }
    }
    v13 = (const SnippetUI::Table_EmptyCell *)*((_QWORD *)a2 + 3);
LABEL_29:
    SnippetUI::Table_EmptyCell::MergeFrom(v10, v13);
    return;
  }
  if (*((_DWORD *)this + 9) == 2)
  {
    v12 = (int **)*((_QWORD *)this + 3);
  }
  else
  {
    SnippetUI::Table_Content::clear_value((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
    *((_QWORD *)this + 3) = v12;
    if (*((_DWORD *)a2 + 9) != 2)
    {
      v15 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      goto LABEL_33;
    }
  }
  v15 = (int **)*((_QWORD *)a2 + 3);
LABEL_33:
  SnippetUI::MultilineTextProperty::MergeFrom(v12, v15);
}

void sub_1BFAB3444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Content::clear_value(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 36);
  if (v2 == 3 || v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_EmptyCell>(google::protobuf::internal::ArenaImpl *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_EmptyCell>);
  }
  else
  {
    result = operator new();
  }
  *(_QWORD *)result = &off_1E7933338;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void SnippetUI::Table_EmptyCell::MergeFrom(SnippetUI::Table_EmptyCell *this, const SnippetUI::Table_EmptyCell *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 1548);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_EmptyCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

void sub_1BFAB35AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_EmptyCell>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::Table_Content *SnippetUI::Table_Content::Table_Content(SnippetUI::Table_Content *this)
{
  *(_QWORD *)this = &off_1E7933278;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load(scc_info_Table_Content_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Content_Table_2eproto);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1BFAB3630(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Content>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::Table_Content::~Table_Content(SnippetUI::Table_Content *this)
{
  SnippetUI::Table_Content::~Table_Content(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7933278;
  if (this != (SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*((_DWORD *)this + 9))
    SnippetUI::Table_Content::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Table_Content *SnippetUI::Table_Content::New(SnippetUI::Table_Content *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(0);
}

SnippetUI::Table_Content *SnippetUI::Table_Content::New(SnippetUI::Table_Content *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(a2);
}

void SnippetUI::Table_Content::Clear(SnippetUI::Table_Content *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  SnippetUI::Table_Content::clear_value((uint64_t)this);
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::Table_Content *)((char *)this + 8);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

uint64_t SnippetUI::Table_Content::IsInitialized(SnippetUI::Table_Content *this)
{
  return 1;
}

char *SnippetUI::Table_Content::ByteSizeLong(SnippetUI::Table_Content *this)
{
  SnippetUI::OptionalInt *v2;
  char *v3;
  const google::protobuf::UnknownFieldSet *v4;
  int v5;
  uint64_t v6;
  google::protobuf::UnknownFieldSet *v7;
  char v8;
  _DWORD *v9;
  char *v10;

  if (this == (SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_
    || (v2 = (SnippetUI::OptionalInt *)*((_QWORD *)this + 2)) == 0)
  {
    v4 = 0;
  }
  else
  {
    v3 = SnippetUI::OptionalInt::ByteSizeLong(v2);
    v4 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
  }
  v5 = *((_DWORD *)this + 9);
  switch(v5)
  {
    case 3:
      v10 = SnippetUI::VisualProperty::ByteSizeLong(*((SnippetUI::VisualProperty **)this + 3));
      break;
    case 2:
      v10 = SnippetUI::MultilineTextProperty::ByteSizeLong(*((SnippetUI::MultilineTextProperty **)this + 3));
      break;
    case 1:
      v6 = *((_QWORD *)this + 3);
      v8 = *(_BYTE *)(v6 + 8);
      v7 = (google::protobuf::UnknownFieldSet *)(v6 + 8);
      v9 = (_DWORD *)((char *)v7 + 8);
      if ((v8 & 1) != 0)
      {
        v10 = google::protobuf::internal::ComputeUnknownFieldsSize(v7, 0, v9);
      }
      else
      {
        v10 = 0;
        *v9 = 0;
      }
      break;
    default:
      goto LABEL_13;
  }
  v4 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v4
                                                     + 1
                                                     + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
LABEL_13:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_Content *)((char *)this + 8), v4, (_DWORD *)this + 8);
  *((_DWORD *)this + 8) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::Table_Content::GetCachedSize(SnippetUI::Table_Content *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::internal *SnippetUI::Table_Content::_InternalParse(SnippetUI::Table_Content *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  SnippetUI::Table_EmptyCell *v9;
  SnippetUI::MultilineTextProperty *v10;
  SnippetUI::VisualProperty *v11;
  SnippetUI::OptionalInt *v12;
  unsigned int v13;
  char *v14;
  BOOL v15;
  char *v16;
  unsigned int v17;
  char *v18;
  char *v19;
  unsigned int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  google::protobuf::internal *v25;
  char *SizeFallback;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  google::protobuf::internal *v32;

  v32 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v32, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v32;
    TagFallback = (google::protobuf::internal *)((char *)v32 + 1);
    v8 = (char *)*(unsigned __int8 *)v32;
    if ((*(char *)v32 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v32 + 2);
LABEL_6:
      v32 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v32, v8);
    v32 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10)
          goto LABEL_22;
        if (*((_DWORD *)this + 9) == 1)
        {
          v9 = (SnippetUI::Table_EmptyCell *)*((_QWORD *)this + 3);
        }
        else
        {
          SnippetUI::Table_Content::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 1;
          v9 = (SnippetUI::Table_EmptyCell *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_EmptyCell>(0);
          *((_QWORD *)this + 3) = v9;
          TagFallback = v32;
        }
        v17 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            goto LABEL_50;
          v18 = SizeFallback;
          v17 = v27;
        }
        else
        {
          v18 = (char *)TagFallback + 1;
        }
        v28 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v18, v17);
        v29 = *((_DWORD *)a3 + 22);
        v23 = __OFSUB__(v29--, 1);
        *((_DWORD *)a3 + 22) = v29;
        if (v29 < 0 != v23)
          goto LABEL_50;
        v24 = v28;
        v25 = SnippetUI::Table_EmptyCell::_InternalParse(v9, (google::protobuf::internal *)v18, a3);
        if (!v25)
          goto LABEL_50;
        goto LABEL_47;
      case 2u:
        if (v8 != 18)
          goto LABEL_22;
        if (*((_DWORD *)this + 9) == 2)
        {
          v10 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 3);
        }
        else
        {
          SnippetUI::Table_Content::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 2;
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
          *((_QWORD *)this + 3) = v10;
          TagFallback = v32;
        }
        v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v10, TagFallback);
        goto LABEL_36;
      case 3u:
        if (v8 != 26)
          goto LABEL_22;
        if (*((_DWORD *)this + 9) == 3)
        {
          v11 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
        }
        else
        {
          SnippetUI::Table_Content::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 3;
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 3) = v11;
          TagFallback = v32;
        }
        v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v11, TagFallback);
        goto LABEL_36;
      case 4u:
        if (v8 != 34)
          goto LABEL_22;
        v12 = (SnippetUI::OptionalInt *)*((_QWORD *)this + 2);
        if (!v12)
        {
          v12 = (SnippetUI::OptionalInt *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalInt>(0);
          *((_QWORD *)this + 2) = v12;
          TagFallback = v32;
        }
        v13 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v19 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v19)
            goto LABEL_50;
          v14 = v19;
          v13 = v20;
        }
        else
        {
          v14 = (char *)TagFallback + 1;
        }
        v21 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v14, v13);
        v22 = *((_DWORD *)a3 + 22);
        v23 = __OFSUB__(v22--, 1);
        *((_DWORD *)a3 + 22) = v22;
        if (v22 < 0 != v23)
          goto LABEL_50;
        v24 = v21;
        v25 = SnippetUI::OptionalInt::_InternalParse(v12, (google::protobuf::internal *)v14, a3);
        if (!v25)
          goto LABEL_50;
LABEL_47:
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          goto LABEL_50;
        v30 = *((_DWORD *)a3 + 7) + v24;
        *((_DWORD *)a3 + 7) = v30;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v30 & (v30 >> 31));
        v32 = v25;
        continue;
      default:
LABEL_22:
        if ((_DWORD)v8)
          v15 = (v8 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
          return TagFallback;
        }
        v16 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
LABEL_36:
        v32 = (google::protobuf::internal *)v16;
        if (v16)
          continue;
LABEL_50:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_Content::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_Content *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  SnippetUI::MultilineTextProperty *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  SnippetUI::VisualProperty *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  SnippetUI::OptionalInt *v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;

  v6 = *((_DWORD *)this + 9);
  if (v6 == 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = *((_QWORD *)this + 3);
    *a2 = 10;
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v10 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v11 = v10;
          *v10++ = v9 | 0x80;
          v12 = v9 >> 7;
          v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
        a2 = (char *)(v11 + 2);
        *v10 = v12;
      }
      else
      {
        a2[2] = v9;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v8;
      a2 += 2;
    }
    v14 = *(_QWORD *)(v7 + 8);
    if ((v14 & 1) != 0)
      a2 = (char *)google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v14 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
    v6 = *((_DWORD *)this + 9);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 3);
    *a2 = 18;
    v16 = *((_DWORD *)v15 + 15);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v20 = v19;
          *v19++ = v18 | 0x80;
          v21 = v18 >> 7;
          v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        v17 = v20 + 2;
        *v19 = v21;
      }
      else
      {
        a2[2] = v18;
        v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v15, (google::protobuf::UnknownFieldSet *)v17, a3, a4);
    v6 = *((_DWORD *)this + 9);
  }
  if (v6 == 3)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v23 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
    *a2 = 26;
    v24 = *((_DWORD *)v23 + 15);
    if (v24 > 0x7F)
    {
      a2[1] = v24 | 0x80;
      v26 = v24 >> 7;
      if (v24 >> 14)
      {
        v27 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v28 = v27;
          *v27++ = v26 | 0x80;
          v29 = v26 >> 7;
          v30 = v26 >> 14;
          v26 >>= 7;
        }
        while (v30);
        v25 = v28 + 2;
        *v27 = v29;
      }
      else
      {
        a2[2] = v26;
        v25 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v24;
      v25 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v23, (google::protobuf::UnknownFieldSet *)v25, a3, a4);
  }
  if (this != (SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_)
  {
    v31 = (SnippetUI::OptionalInt *)*((_QWORD *)this + 2);
    if (v31)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        v31 = (SnippetUI::OptionalInt *)*((_QWORD *)this + 2);
      }
      *a2 = 34;
      v32 = *((_DWORD *)v31 + 5);
      if (v32 > 0x7F)
      {
        a2[1] = v32 | 0x80;
        v34 = v32 >> 7;
        if (v32 >> 14)
        {
          v35 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v36 = v35;
            *v35++ = v34 | 0x80;
            v37 = v34 >> 7;
            v38 = v34 >> 14;
            v34 >>= 7;
          }
          while (v38);
          v33 = v36 + 2;
          *v35 = v37;
        }
        else
        {
          a2[2] = v34;
          v33 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v32;
        v33 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)SnippetUI::OptionalInt::InternalSerializeWithCachedSizesToArray(v31, (char *)v33, a3, a4);
    }
  }
  v39 = *((_QWORD *)this + 1);
  if ((v39 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v39 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::Table_Content::CopyFrom(SnippetUI::Table_Content *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Content::Clear(this);
    SnippetUI::Table_Content::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Content::MergeFrom(SnippetUI::Table_Content *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Table_Content *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 1352);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Table_Content::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAB3ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Content::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t SnippetUI::Table_Content::GetMetadata(SnippetUI::Table_Content *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Table_2eproto);
  return qword_1EF582870;
}

void *SnippetUI::Table_Content::default_instance(SnippetUI::Table_Content *this)
{
  if (atomic_load(scc_info_Table_Content_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Content_Table_2eproto);
  return &SnippetUI::_Table_Content_default_instance_;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Table_Content>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::Table_Content *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::Table_Content::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

SnippetUI::Table_HeaderCell *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_HeaderCell>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Table_HeaderCell *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Table_HeaderCell *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_HeaderCell>);
    SnippetUI::Table_HeaderCell::Table_HeaderCell(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Table_HeaderCell *)operator new();
    SnippetUI::Table_HeaderCell::Table_HeaderCell(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAB410C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_HeaderCell>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Table_FixedColumnSize_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  qword_1ED1D4720 = 0;
  unk_1ED1D4728 = 0;
  SnippetUI::_Table_FixedColumnSize_default_instance_ = (uint64_t)&off_1E79337B8;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_FixedColumnSize_default_instance_, v4);
}

void SnippetUI::Table_FixedColumnSize::~Table_FixedColumnSize(SnippetUI::Table_FixedColumnSize *this)
{
  *(_QWORD *)this = &off_1E79337B8;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E79337B8;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E79337B8;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *SnippetUI::Table_FixedColumnSize::New(SnippetUI::Table_FixedColumnSize *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_FixedColumnSize>(0);
}

_QWORD *SnippetUI::Table_FixedColumnSize::New(SnippetUI::Table_FixedColumnSize *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_FixedColumnSize>(a2);
}

void SnippetUI::Table_FixedColumnSize::Clear(SnippetUI::Table_FixedColumnSize *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v1;
  char v2;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::Table_FixedColumnSize *)((char *)this + 8);
  *((_DWORD *)v1 + 2) = 0;
  if ((v2 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
}

uint64_t SnippetUI::Table_FixedColumnSize::IsInitialized(SnippetUI::Table_FixedColumnSize *this)
{
  return 1;
}

char *SnippetUI::Table_FixedColumnSize::ByteSizeLong(SnippetUI::Table_FixedColumnSize *this)
{
  uint64_t v1;

  if (*((float *)this + 4) == 0.0)
    v1 = 0;
  else
    v1 = 5;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_FixedColumnSize *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v1, (_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v1;
  return (char *)v1;
}

uint64_t SnippetUI::Table_FixedColumnSize::GetCachedSize(SnippetUI::Table_FixedColumnSize *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *SnippetUI::Table_FixedColumnSize::_InternalParse(SnippetUI::Table_FixedColumnSize *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  char *TagFallback;
  char *v8;
  google::protobuf::internal *v11;

  v11 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v11, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v11;
      TagFallback = (char *)v11 + 1;
      v8 = (char *)*(unsigned __int8 *)v11;
      if ((*(char *)v11 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = (char *)(v8 + (*TagFallback << 7) - 128);
      if ((*TagFallback & 0x80000000) == 0)
      {
        TagFallback = (char *)v11 + 2;
LABEL_6:
        v11 = (google::protobuf::internal *)TagFallback;
        goto LABEL_7;
      }
      TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v11, v8);
      v11 = (google::protobuf::internal *)TagFallback;
      if (!TagFallback)
        return (google::protobuf::internal *)TagFallback;
LABEL_7:
      if ((_DWORD)v8 != 13)
        break;
      *((_DWORD *)this + 4) = *(_DWORD *)TagFallback;
      v11 = (google::protobuf::internal *)(TagFallback + 4);
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, (google::protobuf::internal::InternalMetadataWithArena *)TagFallback, a3, v6);
    if (!v11)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return (google::protobuf::internal *)TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_FixedColumnSize::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_FixedColumnSize *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  uint64_t v7;

  if (*((float *)this + 4) != 0.0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v6 = *((_DWORD *)this + 4);
    }
    else
    {
      v6 = *((_DWORD *)this + 4);
    }
    *a2 = 13;
    *(_DWORD *)(a2 + 1) = v6;
    a2 += 5;
  }
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v7 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::Table_FixedColumnSize::CopyFrom(SnippetUI::Table_FixedColumnSize *this, const google::protobuf::Message *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::Table_FixedColumnSize *)((char *)this + 8);
    *((_DWORD *)v4 + 2) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::Table_FixedColumnSize::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_FixedColumnSize::MergeFrom(SnippetUI::Table_FixedColumnSize *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Table_FixedColumnSize *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2926);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Table_FixedColumnSize::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAB4518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_FixedColumnSize::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

uint64_t SnippetUI::Table_FixedColumnSize::GetMetadata(SnippetUI::Table_FixedColumnSize *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Table_2eproto);
  return qword_1EF5828E0;
}

uint64_t *SnippetUI::Table_FixedColumnSize::default_instance(SnippetUI::Table_FixedColumnSize *this)
{
  if (atomic_load(scc_info_Table_FixedColumnSize_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_FixedColumnSize_Table_2eproto);
  return &SnippetUI::_Table_FixedColumnSize_default_instance_;
}

void SnippetUI::Table_FixedColumnSize::MergeFrom(SnippetUI::Table_FixedColumnSize *this, const SnippetUI::Table_FixedColumnSize *a2)
{
  std::string *v4;
  uint64_t v5;
  float v6;
  char v7;
  std::string v8[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2941);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_FixedColumnSize *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((float *)a2 + 4);
  if (v6 != 0.0)
    *((float *)this + 4) = v6;
}

void sub_1BFAB4628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_FixedColumnSize>(google::protobuf::internal::ArenaImpl *this)
{
  _QWORD *result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_FixedColumnSize>);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E79337B8;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_FixedColumnSize>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Table_ContentColumnCell_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table_ContentColumnCell::Table_ContentColumnCell((SnippetUI::Table_ContentColumnCell *)&SnippetUI::_Table_ContentColumnCell_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_ContentColumnCell_default_instance_, v4);
  qword_1ED1D48C8 = (uint64_t)&SnippetUI::_Table_AutoColumnSize_default_instance_;
  unk_1ED1D48D0 = &SnippetUI::_Table_FixedColumnSize_default_instance_;
}

SnippetUI::Table_ContentColumnCell *SnippetUI::Table_ContentColumnCell::Table_ContentColumnCell(SnippetUI::Table_ContentColumnCell *this)
{
  *(_QWORD *)this = &off_1E7933638;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load(scc_info_Table_ContentColumnCell_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_ContentColumnCell_Table_2eproto);
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1BFAB4794(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_ContentColumnCell::~Table_ContentColumnCell(SnippetUI::Table_ContentColumnCell *this)
{
  SnippetUI::Table_ContentColumnCell::~Table_ContentColumnCell(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7933638;
  if (*((_DWORD *)this + 9))
    SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Table_ContentColumnCell *SnippetUI::Table_ContentColumnCell::New(SnippetUI::Table_ContentColumnCell *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_ContentColumnCell>(0);
}

SnippetUI::Table_ContentColumnCell *SnippetUI::Table_ContentColumnCell::New(SnippetUI::Table_ContentColumnCell *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_ContentColumnCell>(a2);
}

void SnippetUI::Table_ContentColumnCell::Clear(SnippetUI::Table_ContentColumnCell *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  *((_DWORD *)this + 4) = 0;
  SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::Table_ContentColumnCell *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::Table_ContentColumnCell::IsInitialized(SnippetUI::Table_ContentColumnCell *this)
{
  return 1;
}

char *SnippetUI::Table_ContentColumnCell::ByteSizeLong(SnippetUI::Table_ContentColumnCell *this)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  char v7;
  _DWORD *v8;
  char *v9;

  v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    if (v2 < 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = *((_DWORD *)this + 9);
  if (v4 == 2)
  {
    v9 = SnippetUI::Table_FixedColumnSize::ByteSizeLong(*((SnippetUI::Table_FixedColumnSize **)this + 3));
  }
  else
  {
    if (v4 != 1)
      goto LABEL_12;
    v5 = *((_QWORD *)this + 3);
    v7 = *(_BYTE *)(v5 + 8);
    v6 = (google::protobuf::UnknownFieldSet *)(v5 + 8);
    v8 = (_DWORD *)((char *)v6 + 8);
    if ((v7 & 1) != 0)
    {
      v9 = google::protobuf::internal::ComputeUnknownFieldsSize(v6, 0, v8);
    }
    else
    {
      v9 = 0;
      *v8 = 0;
    }
  }
  v3 += (uint64_t)&v9[((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1];
LABEL_12:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_ContentColumnCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v3, (_DWORD *)this + 8);
  *((_DWORD *)this + 8) = v3;
  return (char *)v3;
}

uint64_t SnippetUI::Table_ContentColumnCell::GetCachedSize(SnippetUI::Table_ContentColumnCell *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::internal *SnippetUI::Table_ContentColumnCell::_InternalParse(SnippetUI::Table_ContentColumnCell *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  unsigned int v9;
  google::protobuf::internal *v12;
  unint64_t v13;
  int v14;
  SnippetUI::Table_FixedColumnSize *v15;
  SnippetUI::Table_AutoColumnSize *v16;
  unsigned int v17;
  char *v18;
  unsigned int v19;
  char *v20;
  char *SizeFallback;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  google::protobuf::internal *v27;
  char *v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  google::protobuf::internal *v34;

  v34 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v34, *((_DWORD *)a3 + 23)) & 1) != 0)return v34;
        TagFallback = (google::protobuf::internal *)((char *)v34 + 1);
        v8 = (char *)*(unsigned __int8 *)v34;
        if ((*(char *)v34 & 0x80000000) == 0)
          goto LABEL_6;
        v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v34 + 2);
LABEL_6:
          v34 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v34, v8);
        v34 = TagFallback;
        if (!TagFallback)
          return TagFallback;
LABEL_7:
        v9 = v8 >> 3;
        if (v8 >> 3 != 3)
          break;
        if (v8 != 24)
          goto LABEL_13;
        v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v13) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_23;
        v14 = *(char *)v12;
        v13 = v13 + (v14 << 7) - 128;
        if ((v14 & 0x80000000) == 0)
        {
          v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_23:
          v34 = v12;
          goto LABEL_24;
        }
        v34 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
        if (!v34)
          return 0;
LABEL_24:
        *((_DWORD *)this + 4) = v13;
      }
      if (v9 != 2)
        break;
      if (v8 != 18)
        goto LABEL_13;
      if (*((_DWORD *)this + 9) == 2)
      {
        v15 = (SnippetUI::Table_FixedColumnSize *)*((_QWORD *)this + 3);
      }
      else
      {
        SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
        v15 = (SnippetUI::Table_FixedColumnSize *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_FixedColumnSize>(0);
        *((_QWORD *)this + 3) = v15;
        TagFallback = v34;
      }
      v17 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback)
          return 0;
        v18 = SizeFallback;
        v17 = v22;
      }
      else
      {
        v18 = (char *)TagFallback + 1;
      }
      v23 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v18, v17);
      v24 = *((_DWORD *)a3 + 22);
      v25 = __OFSUB__(v24--, 1);
      *((_DWORD *)a3 + 22) = v24;
      if (v24 < 0 != v25)
        return 0;
      v26 = v23;
      v27 = SnippetUI::Table_FixedColumnSize::_InternalParse(v15, (google::protobuf::internal *)v18, a3);
      if (!v27)
        return 0;
LABEL_47:
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20))
        return 0;
      v32 = *((_DWORD *)a3 + 7) + v26;
      *((_DWORD *)a3 + 7) = v32;
      *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v32 & (v32 >> 31));
      v34 = v27;
    }
    if (v9 == 1 && v8 == 10)
    {
      if (*((_DWORD *)this + 9) == 1)
      {
        v16 = (SnippetUI::Table_AutoColumnSize *)*((_QWORD *)this + 3);
      }
      else
      {
        SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        v16 = (SnippetUI::Table_AutoColumnSize *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_AutoColumnSize>(0);
        *((_QWORD *)this + 3) = v16;
        TagFallback = v34;
      }
      v19 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        v28 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!v28)
          return 0;
        v20 = v28;
        v19 = v29;
      }
      else
      {
        v20 = (char *)TagFallback + 1;
      }
      v30 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v20, v19);
      v31 = *((_DWORD *)a3 + 22);
      v25 = __OFSUB__(v31--, 1);
      *((_DWORD *)a3 + 22) = v31;
      if (v31 < 0 != v25)
        return 0;
      v26 = v30;
      v27 = SnippetUI::Table_AutoColumnSize::_InternalParse(v16, (google::protobuf::internal *)v20, a3);
      if (!v27)
        return 0;
      goto LABEL_47;
    }
LABEL_13:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v34 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v34)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_ContentColumnCell::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_ContentColumnCell *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  SnippetUI::Table_FixedColumnSize *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v6 = *((_DWORD *)this + 9);
  if (v6 == 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = *((_QWORD *)this + 3);
    *a2 = 10;
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v10 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v11 = v10;
          *v10++ = v9 | 0x80;
          v12 = v9 >> 7;
          v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
        a2 = (char *)(v11 + 2);
        *v10 = v12;
      }
      else
      {
        a2[2] = v9;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v8;
      a2 += 2;
    }
    v14 = *(_QWORD *)(v7 + 8);
    if ((v14 & 1) != 0)
      a2 = (char *)google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v14 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
    v6 = *((_DWORD *)this + 9);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = (SnippetUI::Table_FixedColumnSize *)*((_QWORD *)this + 3);
    *a2 = 18;
    v16 = *((_DWORD *)v15 + 5);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v20 = v19;
          *v19++ = v18 | 0x80;
          v21 = v18 >> 7;
          v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        v17 = v20 + 2;
        *v19 = v21;
      }
      else
      {
        a2[2] = v18;
        v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::Table_FixedColumnSize::InternalSerializeWithCachedSizesToArray(v15, (char *)v17, a3, a4);
  }
  v23 = *((_DWORD *)this + 4);
  if (v23)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v23 = *((_DWORD *)this + 4);
    }
    *a2 = 24;
    if (v23 > 0x7F)
    {
      a2[1] = v23 | 0x80;
      v24 = (unint64_t)(int)v23 >> 7;
      if (v23 >> 14)
      {
        v25 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v26 = v25;
          *v25++ = v24 | 0x80;
          v27 = v24 >> 7;
          v28 = v24 >> 14;
          v24 >>= 7;
        }
        while (v28);
        a2 = (char *)(v26 + 2);
        *v25 = v27;
      }
      else
      {
        a2[2] = v24;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v23;
      a2 += 2;
    }
  }
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v29 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::Table_ContentColumnCell::CopyFrom(SnippetUI::Table_ContentColumnCell *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_ContentColumnCell::Clear(this);
    SnippetUI::Table_ContentColumnCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_ContentColumnCell::MergeFrom(SnippetUI::Table_ContentColumnCell *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Table_ContentColumnCell *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2569);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Table_ContentColumnCell::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAB4EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_ContentColumnCell::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t SnippetUI::Table_ContentColumnCell::GetMetadata(SnippetUI::Table_ContentColumnCell *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Table_2eproto);
  return qword_1EF5828C0;
}

void *SnippetUI::Table_ContentColumnCell::default_instance(SnippetUI::Table_ContentColumnCell *this)
{
  if (atomic_load(scc_info_Table_ContentColumnCell_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_ContentColumnCell_Table_2eproto);
  return &SnippetUI::_Table_ContentColumnCell_default_instance_;
}

void SnippetUI::Table_ContentColumnCell::MergeFrom(SnippetUI::Table_ContentColumnCell *this, const SnippetUI::Table_ContentColumnCell *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  int v7;
  SnippetUI::Table_AutoColumnSize *v8;
  SnippetUI::Table_FixedColumnSize *v9;
  const SnippetUI::Table_AutoColumnSize *v10;
  const SnippetUI::Table_FixedColumnSize *v11;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2584);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_ContentColumnCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_DWORD *)a2 + 4);
  if (v6)
    *((_DWORD *)this + 4) = v6;
  v7 = *((_DWORD *)a2 + 9);
  if (v7 != 2)
  {
    if (v7 != 1)
      return;
    if (*((_DWORD *)this + 9) == 1)
    {
      v8 = (SnippetUI::Table_AutoColumnSize *)*((_QWORD *)this + 3);
    }
    else
    {
      SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      v8 = (SnippetUI::Table_AutoColumnSize *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_AutoColumnSize>(0);
      *((_QWORD *)this + 3) = v8;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        v10 = (const SnippetUI::Table_AutoColumnSize *)&SnippetUI::_Table_AutoColumnSize_default_instance_;
        goto LABEL_18;
      }
    }
    v10 = (const SnippetUI::Table_AutoColumnSize *)*((_QWORD *)a2 + 3);
LABEL_18:
    SnippetUI::Table_AutoColumnSize::MergeFrom(v8, v10);
    return;
  }
  if (*((_DWORD *)this + 9) == 2)
  {
    v9 = (SnippetUI::Table_FixedColumnSize *)*((_QWORD *)this + 3);
  }
  else
  {
    SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    v9 = (SnippetUI::Table_FixedColumnSize *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_FixedColumnSize>(0);
    *((_QWORD *)this + 3) = v9;
    if (*((_DWORD *)a2 + 9) != 2)
    {
      v11 = (const SnippetUI::Table_FixedColumnSize *)&SnippetUI::_Table_FixedColumnSize_default_instance_;
      goto LABEL_20;
    }
  }
  v11 = (const SnippetUI::Table_FixedColumnSize *)*((_QWORD *)a2 + 3);
LABEL_20:
  SnippetUI::Table_FixedColumnSize::MergeFrom(v9, v11);
}

void sub_1BFAB50B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_ContentColumnCell::clear_size(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 36);
  if (v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_AutoColumnSize>(google::protobuf::internal::ArenaImpl *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_AutoColumnSize>);
  }
  else
  {
    result = operator new();
  }
  *(_QWORD *)result = &off_1E79336F8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void SnippetUI::Table_AutoColumnSize::MergeFrom(SnippetUI::Table_AutoColumnSize *this, const SnippetUI::Table_AutoColumnSize *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2761);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_AutoColumnSize *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

void sub_1BFAB5214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_AutoColumnSize>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::Table_AutoColumnSize::~Table_AutoColumnSize(SnippetUI::Table_AutoColumnSize *this)
{
  *(_QWORD *)this = &off_1E79336F8;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E79336F8;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E79336F8;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::Table_AutoColumnSize::New(SnippetUI::Table_AutoColumnSize *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_AutoColumnSize>(0);
}

uint64_t SnippetUI::Table_AutoColumnSize::New(SnippetUI::Table_AutoColumnSize *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_AutoColumnSize>(a2);
}

void SnippetUI::Table_AutoColumnSize::Clear(SnippetUI::Table_AutoColumnSize *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v1;
  char v2;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::Table_AutoColumnSize *)((char *)this + 8);
  if ((v2 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
}

uint64_t SnippetUI::Table_AutoColumnSize::IsInitialized(SnippetUI::Table_AutoColumnSize *this)
{
  return 1;
}

char *SnippetUI::Table_AutoColumnSize::ByteSizeLong(SnippetUI::Table_AutoColumnSize *this)
{
  google::protobuf::UnknownFieldSet *v1;
  char v2;
  _DWORD *v3;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::Table_AutoColumnSize *)((char *)this + 8);
  v3 = (_DWORD *)((char *)v1 + 8);
  if ((v2 & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize(v1, 0, v3);
  *v3 = 0;
  return 0;
}

uint64_t SnippetUI::Table_AutoColumnSize::GetCachedSize(SnippetUI::Table_AutoColumnSize *this)
{
  return *((unsigned int *)this + 4);
}

google::protobuf::internal *SnippetUI::Table_AutoColumnSize::_InternalParse(SnippetUI::Table_AutoColumnSize *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v4;
  google::protobuf::internal::ParseContext *v5;
  google::protobuf::internal *TagFallback;
  char *v7;
  google::protobuf::internal *v10;

  v10 = a2;
  v4 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v10, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v10;
    TagFallback = (google::protobuf::internal *)((char *)v10 + 1);
    v7 = (char *)*(unsigned __int8 *)v10;
    if ((*(char *)v10 & 0x80000000) == 0)
      goto LABEL_6;
    v7 = (char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v10 + 2);
LABEL_6:
      v10 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v10, v7);
    v10 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      break;
    v10 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v7, v4, TagFallback, a3, v5);
    if (!v10)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v7 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_AutoColumnSize::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_AutoColumnSize *this, const google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v4 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::Table_AutoColumnSize::CopyFrom(SnippetUI::Table_AutoColumnSize *this, const google::protobuf::Message *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::Table_AutoColumnSize *)((char *)this + 8);
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::Table_AutoColumnSize::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_AutoColumnSize::MergeFrom(SnippetUI::Table_AutoColumnSize *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Table_AutoColumnSize *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2746);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Table_AutoColumnSize::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAB54C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_AutoColumnSize::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t SnippetUI::Table_AutoColumnSize::GetMetadata(SnippetUI::Table_AutoColumnSize *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Table_2eproto);
  return qword_1EF5828D0;
}

uint64_t *SnippetUI::Table_AutoColumnSize::default_instance(SnippetUI::Table_AutoColumnSize *this)
{
  if (atomic_load(scc_info_Table_AutoColumnSize_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_AutoColumnSize_Table_2eproto);
  return &SnippetUI::_Table_AutoColumnSize_default_instance_;
}

SnippetUI::Table_ContentColumnCell *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_ContentColumnCell>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Table_ContentColumnCell *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Table_ContentColumnCell *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_ContentColumnCell>);
    SnippetUI::Table_ContentColumnCell::Table_ContentColumnCell(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Table_ContentColumnCell *)operator new();
    SnippetUI::Table_ContentColumnCell::Table_ContentColumnCell(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAB55CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40E7D3C9D8);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_ContentColumnCell>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Table_AutoColumnSize_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::_Table_AutoColumnSize_default_instance_ = (uint64_t)&off_1E79336F8;
  *(_QWORD *)algn_1ED1D46E8 = 0;
  dword_1ED1D46F0 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_AutoColumnSize_default_instance_, v4);
}

uint64_t *SnippetUI::Table_EmptyCell::default_instance(SnippetUI::Table_EmptyCell *this)
{
  if (atomic_load(scc_info_Table_EmptyCell_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_EmptyCell_Table_2eproto);
  return &SnippetUI::_Table_EmptyCell_default_instance_;
}

SnippetUI::Table_Row *SnippetUI::Table_Row::Table_Row(SnippetUI::Table_Row *this)
{
  *(_QWORD *)this = &off_1E79331B8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  if (atomic_load(scc_info_Table_Row_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Row_Table_2eproto);
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = 0;
  return this;
}

void sub_1BFAB5744(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 40));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Row::~Table_Row(SnippetUI::Table_Row *this)
{
  SnippetUI::Table_Row::~Table_Row(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E79331B8;
  v2 = *((_QWORD *)this + 8);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Table_Row *)&SnippetUI::_Table_Row_default_instance_)
  {
    v4 = *((_QWORD *)this + 9);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Table_Row *)((char *)this + 40));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Table_Row *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Table_Row *SnippetUI::Table_Row::New(SnippetUI::Table_Row *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Row>(0);
}

SnippetUI::Table_Row *SnippetUI::Table_Row::New(SnippetUI::Table_Row *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Row>(a2);
}

void SnippetUI::Table_Row::Clear(SnippetUI::Table_Row *this)
{
  uint64_t v2;
  SnippetUI::Table_Content **v3;
  SnippetUI::Table_Content *v4;
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::InternalMetadataWithArena *v8;
  char v9;
  char v10;
  std::string v11[2];

  v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (SnippetUI::Table_Content **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::Table_Content::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40);
  v6 = *((_QWORD *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v7 = *((_QWORD *)this + 9);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = *((_BYTE *)this + 8);
  v8 = (SnippetUI::Table_Row *)((char *)this + 8);
  *((_QWORD *)v8 + 8) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
}

void sub_1BFAB58AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Row::IsInitialized(SnippetUI::Table_Row *this)
{
  return 1;
}

char *SnippetUI::Table_Row::ByteSizeLong(SnippetUI::Table_Row *this)
{
  uint64_t v2;
  uint64_t v3;
  SnippetUI::Table_Content **v4;
  uint64_t v5;
  SnippetUI::Table_Content *v6;
  char *v7;
  uint64_t v8;
  const google::protobuf::UnknownFieldSet *v9;
  uint64_t v10;
  SnippetUI::BackgroundElement **v11;
  uint64_t v12;
  SnippetUI::BackgroundElement *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  SnippetUI::ActionProperty *v18;
  char *v19;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::Table_Content **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::Table_Content::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 12);
  v9 = (const google::protobuf::UnknownFieldSet *)(v2 + v8);
  v10 = *((_QWORD *)this + 7);
  if (v10)
    v11 = (SnippetUI::BackgroundElement **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = SnippetUI::BackgroundElement::ByteSizeLong(v13);
      v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9
                                                     + (_QWORD)v14
                                                     + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6));
      v12 -= 8;
    }
    while (v12);
  }
  v15 = *((_QWORD *)this + 8);
  v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      goto LABEL_20;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    goto LABEL_20;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if ((v16 & 0x80u) == 0)
    v17 = v16;
  v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_20:
  if (this != (SnippetUI::Table_Row *)&SnippetUI::_Table_Row_default_instance_)
  {
    v18 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 9);
    if (v18)
    {
      v19 = SnippetUI::ActionProperty::ByteSizeLong(v18);
      v9 = (const google::protobuf::UnknownFieldSet *)&v19[((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6)
                                                         + 1
                                                         + (_QWORD)v9];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_Row *)((char *)this + 8), v9, (_DWORD *)this + 20);
  *((_DWORD *)this + 20) = (_DWORD)v9;
  return (char *)v9;
}

uint64_t SnippetUI::Table_Row::GetCachedSize(SnippetUI::Table_Row *this)
{
  return *((unsigned int *)this + 20);
}

google::protobuf::internal *SnippetUI::Table_Row::_InternalParse(SnippetUI::Table_Row *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t *v8;
  google::protobuf::internal::ParseContext *v9;
  google::protobuf::internal *TagFallback;
  char *v11;
  char *v12;
  google::protobuf::internal *v13;
  int *v14;
  uint64_t v15;
  int v16;
  SnippetUI::Table_Content *v17;
  uint64_t v18;
  uint64_t v19;
  SnippetUI::ActionProperty *v20;
  char *v21;
  char *v22;
  google::protobuf::internal *v23;
  int *v24;
  uint64_t v25;
  int v26;
  SnippetUI::BackgroundElement *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  BOOL v31;
  google::protobuf::internal *v33;

  v33 = a2;
  v5 = (std::string **)((char *)this + 64);
  v6 = (unsigned int *)((char *)this + 40);
  v7 = (unsigned int *)((char *)this + 16);
  v8 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v33, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v33 + 1);
      v11 = (char *)*(unsigned __int8 *)v33;
      if (*(char *)v33 < 0)
      {
        v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v33, v11);
          v33 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10)
                goto LABEL_42;
              v12 = (char *)TagFallback - 1;
              while (1)
              {
                v13 = (google::protobuf::internal *)(v12 + 1);
                v33 = (google::protobuf::internal *)(v12 + 1);
                v14 = (int *)*((_QWORD *)this + 4);
                if (!v14)
                  break;
                v15 = *((int *)this + 6);
                v16 = *v14;
                if ((int)v15 >= *v14)
                {
                  if (v16 == *((_DWORD *)this + 7))
                  {
LABEL_15:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v16 + 1);
                    v14 = (int *)*((_QWORD *)this + 4);
                    v16 = *v14;
                  }
                  *v14 = v16 + 1;
                  v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                              + 2));
                  v18 = *((_QWORD *)this + 4);
                  v19 = *((int *)this + 6);
                  *((_DWORD *)this + 6) = v19 + 1;
                  *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
                  v13 = v33;
                  goto LABEL_17;
                }
                *((_DWORD *)this + 6) = v15 + 1;
                v17 = *(SnippetUI::Table_Content **)&v14[2 * v15 + 2];
LABEL_17:
                v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Table_Content>(a3, v17, v13);
                v33 = (google::protobuf::internal *)v12;
                if (!v12)
                  return 0;
                if (*(_QWORD *)a3 <= (unint64_t)v12 || *v12 != 10)
                  goto LABEL_2;
              }
              v16 = *((_DWORD *)this + 7);
              goto LABEL_15;
            case 2u:
              if (v11 != 18)
                goto LABEL_42;
              v20 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 9);
              if (!v20)
              {
                v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
                *((_QWORD *)this + 9) = v20;
                TagFallback = v33;
              }
              v21 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v20, TagFallback);
              goto LABEL_47;
            case 3u:
              if (v11 != 26)
                goto LABEL_42;
              v22 = (char *)TagFallback - 1;
              break;
            case 4u:
              if (v11 != 34)
                goto LABEL_42;
              v30 = *v5;
              if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v30 = *v5;
                TagFallback = v33;
              }
              v21 = google::protobuf::internal::InlineGreedyStringParserUTF8(v30, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Table.Row.component_name");
              goto LABEL_47;
            default:
LABEL_42:
              if ((_DWORD)v11)
                v31 = (v11 & 7) == 4;
              else
                v31 = 1;
              if (v31)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
                return TagFallback;
              }
              v21 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v8, TagFallback, a3, v9);
LABEL_47:
              v33 = (google::protobuf::internal *)v21;
              if (!v21)
                return 0;
              continue;
          }
          while (1)
          {
            v23 = (google::protobuf::internal *)(v22 + 1);
            v33 = (google::protobuf::internal *)(v22 + 1);
            v24 = (int *)*((_QWORD *)this + 7);
            if (!v24)
              break;
            v25 = *((int *)this + 12);
            v26 = *v24;
            if ((int)v25 >= *v24)
            {
              if (v26 == *((_DWORD *)this + 13))
              {
LABEL_32:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v26 + 1);
                v24 = (int *)*((_QWORD *)this + 7);
                v26 = *v24;
              }
              *v24 = v26 + 1;
              v27 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BackgroundElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                              + 5));
              v28 = *((_QWORD *)this + 7);
              v29 = *((int *)this + 12);
              *((_DWORD *)this + 12) = v29 + 1;
              *(_QWORD *)(v28 + 8 * v29 + 8) = v27;
              v23 = v33;
              goto LABEL_34;
            }
            *((_DWORD *)this + 12) = v25 + 1;
            v27 = *(SnippetUI::BackgroundElement **)&v24[2 * v25 + 2];
LABEL_34:
            v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::BackgroundElement>(a3, v27, v23);
            v33 = (google::protobuf::internal *)v22;
            if (!v22)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v22 || *v22 != 26)
              goto LABEL_2;
          }
          v26 = *((_DWORD *)this + 13);
          goto LABEL_32;
        }
        TagFallback = (google::protobuf::internal *)((char *)v33 + 2);
      }
      v33 = TagFallback;
      goto LABEL_7;
    }
    return v33;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_Row::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_Row *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  SnippetUI::Table_Content *v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  SnippetUI::ActionProperty *v19;
  unsigned int v20;
  google::protobuf::UnknownFieldSet *v21;
  unsigned int v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int i;
  SnippetUI::BackgroundElement *v29;
  google::protobuf::io::EpsCopyOutputStream *v30;
  unsigned int v31;
  google::protobuf::UnknownFieldSet *v32;
  unsigned int v33;
  _BYTE *v34;
  _BYTE *v35;
  unsigned int v36;
  unsigned int v37;
  google::protobuf::internal *v38;
  const char *v39;
  uint64_t v40;
  char v42;
  std::string v43[2];

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    v8 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v8 < 0)
        goto LABEL_5;
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v10 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
      }
      v11 = *(SnippetUI::Table_Content **)(*((_QWORD *)this + 4) + 8 * v8 + 8);
      *(_BYTE *)a2 = 10;
      v12 = *((_DWORD *)v11 + 8);
      if (v12 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = (char *)a2 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = v16 + 2;
          *v15 = v17;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v14;
          v13 = (char *)a2 + 3;
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v12;
        v13 = (char *)a2 + 2;
      }
      a2 = SnippetUI::Table_Content::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7)
        goto LABEL_19;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v9 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  if (this != (SnippetUI::Table_Row *)&SnippetUI::_Table_Row_default_instance_)
  {
    v19 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v19 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 9);
      }
      *(_BYTE *)a2 = 18;
      v20 = *((_DWORD *)v19 + 12);
      if (v20 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v20 | 0x80;
        v22 = v20 >> 7;
        if (v20 >> 14)
        {
          v23 = (char *)a2 + 2;
          do
          {
            v24 = v23;
            *v23++ = v22 | 0x80;
            v25 = v22 >> 7;
            v26 = v22 >> 14;
            v22 >>= 7;
          }
          while (v26);
          v21 = (google::protobuf::UnknownFieldSet *)(v24 + 2);
          *v23 = v25;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v22;
          v21 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v20;
        v21 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v19, v21, a3, a4);
    }
  }
  v27 = *((_DWORD *)this + 12);
  if (v27)
  {
    for (i = 0; i != v27; ++i)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v29 = (SnippetUI::BackgroundElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40, i);
      *(_BYTE *)a2 = 26;
      v31 = *((_DWORD *)v29 + 13);
      if (v31 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v31 | 0x80;
        v33 = v31 >> 7;
        if (v31 >> 14)
        {
          v34 = (char *)a2 + 2;
          do
          {
            v35 = v34;
            *v34++ = v33 | 0x80;
            v36 = v33 >> 7;
            v37 = v33 >> 14;
            v33 >>= 7;
          }
          while (v37);
          v32 = (google::protobuf::UnknownFieldSet *)(v35 + 2);
          *v34 = v36;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v33;
          v32 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v31;
        v32 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::BackgroundElement::InternalSerializeWithCachedSizesToArray(v29, v32, a3, v30);
    }
  }
  v38 = (google::protobuf::internal *)*((_QWORD *)this + 8);
  if (*((char *)v38 + 23) < 0)
  {
    v39 = (const char *)*((_QWORD *)v38 + 1);
    if (!v39)
      goto LABEL_49;
    v38 = *(google::protobuf::internal **)v38;
    goto LABEL_48;
  }
  v39 = (const char *)*((unsigned __int8 *)v38 + 23);
  if (*((_BYTE *)v38 + 23))
  {
LABEL_48:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v38, v39, 1, (google::protobuf::internal *)"SnippetUI.Table.Row.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 8), (char *)a2);
  }
LABEL_49:
  v40 = *((_QWORD *)this + 1);
  if ((v40 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v40 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void sub_1BFAB612C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Row::CopyFrom(SnippetUI::Table_Row *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Row::Clear(this);
    SnippetUI::Table_Row::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Row::MergeFrom(SnippetUI::Table_Row *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Table_Row *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 940);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Table_Row::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAB622C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Row::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

uint64_t SnippetUI::Table_Row::GetMetadata(SnippetUI::Table_Row *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Table_2eproto);
  return qword_1EF582860;
}

void *SnippetUI::Table_Row::default_instance(SnippetUI::Table_Row *this)
{
  if (atomic_load(scc_info_Table_Row_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Row_Table_2eproto);
  return &SnippetUI::_Table_Row_default_instance_;
}

void SnippetUI::Table_Row::MergeFrom(SnippetUI::Table_Row *this, const SnippetUI::Table_Row *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 955);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_Row *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Content>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((int **)this + 5, (uint64_t)a2 + 40);
  v6 = *((_QWORD *)a2 + 8);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 8);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, v6);
    else
      std::string::operator=(*((std::string **)this + 8), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Table_Row *)&SnippetUI::_Table_Row_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 9);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 9);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 9) = v9;
        v8 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v9, v10);
    }
  }
}

void sub_1BFAB63D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Content>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  SnippetUI::Table_Content **v13;
  SnippetUI::Table_Content **v14;
  SnippetUI::Table_Content *v15;
  SnippetUI::Table_Content *v16;
  SnippetUI::Table_Content *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::Table_Content **v21;
  SnippetUI::Table_Content **v22;
  SnippetUI::Table_Content *v23;
  SnippetUI::Table_Content *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (SnippetUI::Table_Content **)(v6 + 8);
      v14 = (SnippetUI::Table_Content **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Content>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::Table_Content **)((char *)v8 + v20);
      v22 = (SnippetUI::Table_Content **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Content>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Content>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFAB6540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Content>::Merge(SnippetUI::Table_Content *a1, SnippetUI::Table_Content *this)
{
  SnippetUI::Table_Content::MergeFrom(this, a1);
}

SnippetUI::Table_Row *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Row>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Table_Row *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Table_Row *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Row>);
    SnippetUI::Table_Row::Table_Row(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Table_Row *)operator new();
    SnippetUI::Table_Row::Table_Row(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAB65EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40B9C9D170);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Row>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Table_Header_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table_Header::Table_Header((SnippetUI::Table_Header *)&SnippetUI::_Table_Header_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_Header_default_instance_, v4);
}

SnippetUI::Table_Header *SnippetUI::Table_Header::Table_Header(SnippetUI::Table_Header *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E79330F8;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_Table_Header_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Header_Table_2eproto);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFAB6788(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Header::~Table_Header(SnippetUI::Table_Header *this)
{
  SnippetUI::Table_Header::~Table_Header(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E79330F8;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Table_Header *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Table_Header *SnippetUI::Table_Header::New(SnippetUI::Table_Header *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Header>(0);
}

SnippetUI::Table_Header *SnippetUI::Table_Header::New(SnippetUI::Table_Header *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Header>(a2);
}

void SnippetUI::Table_Header::Clear(SnippetUI::Table_Header *this)
{
  uint64_t v2;
  SnippetUI::Table_HeaderCell **v3;
  SnippetUI::Table_HeaderCell *v4;
  std::string *v5;
  uint64_t v6;
  google::protobuf::internal::InternalMetadataWithArena *v7;
  char v8;
  char v9;
  std::string v10[2];

  v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (SnippetUI::Table_HeaderCell **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::Table_HeaderCell::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v6 = *((_QWORD *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v8 = *((_BYTE *)this + 8);
  v7 = (SnippetUI::Table_Header *)((char *)this + 8);
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
}

void sub_1BFAB68C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Header::IsInitialized(SnippetUI::Table_Header *this)
{
  return 1;
}

char *SnippetUI::Table_Header::ByteSizeLong(SnippetUI::Table_Header *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::Table_HeaderCell **v4;
  uint64_t v5;
  SnippetUI::Table_HeaderCell *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::Table_HeaderCell **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::Table_HeaderCell::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 5);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_Header *)((char *)this + 8), v2, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::Table_Header::GetCachedSize(SnippetUI::Table_Header *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::Table_Header::_InternalParse(SnippetUI::Table_Header *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  unsigned int *v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  BOOL v12;
  char *v13;
  std::string *v14;
  google::protobuf::internal *v15;
  google::protobuf::internal *v16;
  int *v17;
  uint64_t v18;
  int v19;
  SnippetUI::Table_HeaderCell *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  char *SizeFallback;
  unsigned int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  unint64_t v32;
  google::protobuf::internal *v34;

  v34 = a2;
  v5 = (std::string **)((char *)this + 40);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  do
  {
LABEL_2:
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v34, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v34;
    TagFallback = (google::protobuf::internal *)((char *)v34 + 1);
    v10 = (char *)*(unsigned __int8 *)v34;
    if ((*(char *)v34 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v34 + 2);
LABEL_6:
      v34 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v34, v10);
    v34 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v10 >> 3 != 2)
    {
      if (v10 >> 3 != 1 || v10 != 10)
        goto LABEL_12;
      v15 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        v16 = (google::protobuf::internal *)((char *)v15 + 1);
        v34 = v16;
        v17 = (int *)*((_QWORD *)this + 4);
        if (!v17)
          break;
        v18 = *((int *)this + 6);
        v19 = *v17;
        if ((int)v18 < *v17)
        {
          *((_DWORD *)this + 6) = v18 + 1;
          v20 = *(SnippetUI::Table_HeaderCell **)&v17[2 * v18 + 2];
          goto LABEL_31;
        }
        if (v19 == *((_DWORD *)this + 7))
          goto LABEL_29;
LABEL_30:
        *v17 = v19 + 1;
        v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_HeaderCell>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                       + 2));
        v21 = *((_QWORD *)this + 4);
        v22 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v22 + 1;
        *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
        v16 = v34;
LABEL_31:
        v23 = *(unsigned __int8 *)v16;
        if (*(char *)v16 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v16, (const char *)*(unsigned __int8 *)v16);
          if (!SizeFallback)
            return 0;
          v24 = SizeFallback;
          v23 = v26;
        }
        else
        {
          v24 = (char *)v16 + 1;
        }
        v27 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v24, v23);
        v28 = *((_DWORD *)a3 + 22);
        v29 = __OFSUB__(v28--, 1);
        *((_DWORD *)a3 + 22) = v28;
        if (v28 < 0 != v29)
          return 0;
        v30 = v27;
        v15 = SnippetUI::Table_HeaderCell::_InternalParse(v20, (google::protobuf::internal *)v24, a3);
        if (!v15)
          return 0;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v31 = *((_DWORD *)a3 + 7) + v30;
        *((_DWORD *)a3 + 7) = v31;
        v32 = *((_QWORD *)a3 + 1) + (v31 & (v31 >> 31));
        *(_QWORD *)a3 = v32;
        v34 = v15;
        if (v32 <= (unint64_t)v15 || *(_BYTE *)v15 != 10)
          goto LABEL_2;
      }
      v19 = *((_DWORD *)this + 7);
LABEL_29:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v19 + 1);
      v17 = (int *)*((_QWORD *)this + 4);
      v19 = *v17;
      goto LABEL_30;
    }
    if (v10 == 18)
    {
      v14 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v14 = *v5;
        TagFallback = v34;
      }
      v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Table.Header.component_name");
      goto LABEL_21;
    }
LABEL_12:
    if ((_DWORD)v10)
      v12 = (v10 & 7) == 4;
    else
      v12 = 1;
    if (v12)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
      return TagFallback;
    }
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_21:
    v34 = (google::protobuf::internal *)v13;
  }
  while (v13);
  return 0;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_Header::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_Header *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  SnippetUI::Table_HeaderCell *v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  google::protobuf::internal *v19;
  const char *v20;
  uint64_t v21;
  char v23;
  std::string v24[2];

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    v8 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v8 < 0)
        goto LABEL_5;
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v10 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
      }
      v11 = *(SnippetUI::Table_HeaderCell **)(*((_QWORD *)this + 4) + 8 * v8 + 8);
      *(_BYTE *)a2 = 10;
      v12 = *((_DWORD *)v11 + 8);
      if (v12 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = (char *)a2 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = v16 + 2;
          *v15 = v17;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v14;
          v13 = (char *)a2 + 3;
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v12;
        v13 = (char *)a2 + 2;
      }
      a2 = SnippetUI::Table_HeaderCell::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7)
        goto LABEL_19;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v9 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  v19 = (google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v19 + 23) < 0)
  {
    v20 = (const char *)*((_QWORD *)v19 + 1);
    if (!v20)
      goto LABEL_25;
    v19 = *(google::protobuf::internal **)v19;
    goto LABEL_24;
  }
  v20 = (const char *)*((unsigned __int8 *)v19 + 23);
  if (*((_BYTE *)v19 + 23))
  {
LABEL_24:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v19, v20, 1, (google::protobuf::internal *)"SnippetUI.Table.Header.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 5), (char *)a2);
  }
LABEL_25:
  v21 = *((_QWORD *)this + 1);
  if ((v21 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v21 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void sub_1BFAB6EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Header::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Header::Clear((SnippetUI::Table_Header *)this);
    SnippetUI::Table_Header::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::Table_Header::Clear((SnippetUI::Table_Header *)this);
    SnippetUI::Table_Header::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Header::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 634);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Table_Header::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BFAB6FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Header::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::Table_Header::GetMetadata(SnippetUI::Table_Header *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Table_2eproto);
  return file_level_metadata_Table_2eproto;
}

void *SnippetUI::Table_Header::default_instance(SnippetUI::Table_Header *this)
{
  if (atomic_load(scc_info_Table_Header_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Header_Table_2eproto);
  return &SnippetUI::_Table_Header_default_instance_;
}

void SnippetUI::Table_Header::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string **v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 649);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_HeaderCell>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  v6 = (uint64_t)a2[5];
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      return;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    return;
  }
  v9 = (std::string *)this[5];
  v8 = (std::string **)(this + 5);
  v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, v6);
    else
      std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1BFAB7100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_HeaderCell>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  SnippetUI::Table_HeaderCell **v13;
  SnippetUI::Table_HeaderCell **v14;
  SnippetUI::Table_HeaderCell *v15;
  SnippetUI::Table_HeaderCell *v16;
  SnippetUI::Table_HeaderCell *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::Table_HeaderCell **v21;
  SnippetUI::Table_HeaderCell **v22;
  SnippetUI::Table_HeaderCell *v23;
  SnippetUI::Table_HeaderCell *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (SnippetUI::Table_HeaderCell **)(v6 + 8);
      v14 = (SnippetUI::Table_HeaderCell **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_HeaderCell>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::Table_HeaderCell **)((char *)v8 + v20);
      v22 = (SnippetUI::Table_HeaderCell **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_HeaderCell>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_HeaderCell>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFAB726C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_HeaderCell>::Merge(SnippetUI::Table_HeaderCell *a1, SnippetUI::Table_HeaderCell *this)
{
  SnippetUI::Table_HeaderCell::MergeFrom(this, a1);
}

SnippetUI::Table_Header *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Header>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Table_Header *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Table_Header *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Header>);
    SnippetUI::Table_Header::Table_Header(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Table_Header *)operator new();
    SnippetUI::Table_Header::Table_Header(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAB7318(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40B18DE219);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Header>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Table_Column_Table_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", a4);
  SnippetUI::Table_Column::Table_Column((SnippetUI::Table_Column *)&SnippetUI::_Table_Column_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Table_Column_default_instance_, v4);
  qword_1ED1D3DC0 = (uint64_t)&SnippetUI::_Table_ContentColumnCell_default_instance_;
  unk_1ED1D3DC8 = &SnippetUI::_Table_SpacerColumnCell_default_instance_;
}

SnippetUI::Table_Column *SnippetUI::Table_Column::Table_Column(SnippetUI::Table_Column *this)
{
  *(_QWORD *)this = &off_1E79334B8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load(scc_info_Table_Column_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Column_Table_2eproto);
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1BFAB7488(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Column::~Table_Column(SnippetUI::Table_Column *this)
{
  SnippetUI::Table_Column::~Table_Column(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E79334B8;
  if (*((_DWORD *)this + 7))
    SnippetUI::Table_Column::clear_cell((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Table_Column *SnippetUI::Table_Column::New(SnippetUI::Table_Column *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Column>(0);
}

SnippetUI::Table_Column *SnippetUI::Table_Column::New(SnippetUI::Table_Column *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Column>(a2);
}

void SnippetUI::Table_Column::Clear(SnippetUI::Table_Column *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  SnippetUI::Table_Column::clear_cell((uint64_t)this);
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::Table_Column *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::Table_Column::IsInitialized(SnippetUI::Table_Column *this)
{
  return 1;
}

char *SnippetUI::Table_Column::ByteSizeLong(SnippetUI::Table_Column *this)
{
  int v2;
  char *v3;
  uint64_t v4;
  google::protobuf::UnknownFieldSet *v5;
  char v6;
  _DWORD *v7;
  const google::protobuf::UnknownFieldSet *v8;

  v2 = *((_DWORD *)this + 7);
  if (v2 == 2)
  {
    v4 = *((_QWORD *)this + 2);
    v6 = *(_BYTE *)(v4 + 8);
    v5 = (google::protobuf::UnknownFieldSet *)(v4 + 8);
    v7 = (_DWORD *)((char *)v5 + 8);
    if ((v6 & 1) != 0)
    {
      v3 = google::protobuf::internal::ComputeUnknownFieldsSize(v5, 0, v7);
    }
    else
    {
      v3 = 0;
      *v7 = 0;
    }
    goto LABEL_6;
  }
  if (v2 == 1)
  {
    v3 = SnippetUI::Table_ContentColumnCell::ByteSizeLong(*((SnippetUI::Table_ContentColumnCell **)this + 2));
LABEL_6:
    v8 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
    goto LABEL_8;
  }
  v8 = 0;
LABEL_8:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table_Column *)((char *)this + 8), v8, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = (_DWORD)v8;
  return (char *)v8;
}

uint64_t SnippetUI::Table_Column::GetCachedSize(SnippetUI::Table_Column *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::Table_Column::_InternalParse(SnippetUI::Table_Column *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  SnippetUI::Table_SpacerColumnCell *v11;
  SnippetUI::Table_ContentColumnCell *v12;
  unsigned int v13;
  char *v14;
  unsigned int v15;
  char *v16;
  char *SizeFallback;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  google::protobuf::internal *v23;
  char *v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  google::protobuf::internal *v30;

  v30 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v30;
      TagFallback = (google::protobuf::internal *)((char *)v30 + 1);
      v8 = (char *)*(unsigned __int8 *)v30;
      if ((*(char *)v30 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallback = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
        v30 = TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v8);
      v30 = TagFallback;
      if (!TagFallback)
        return TagFallback;
LABEL_7:
      if (v8 >> 3 != 2)
        break;
      if (v8 != 18)
        goto LABEL_12;
      if (*((_DWORD *)this + 7) == 2)
      {
        v11 = (SnippetUI::Table_SpacerColumnCell *)*((_QWORD *)this + 2);
      }
      else
      {
        SnippetUI::Table_Column::clear_cell((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        v11 = (SnippetUI::Table_SpacerColumnCell *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_SpacerColumnCell>(0);
        *((_QWORD *)this + 2) = v11;
        TagFallback = v30;
      }
      v13 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback)
          return 0;
        v14 = SizeFallback;
        v13 = v18;
      }
      else
      {
        v14 = (char *)TagFallback + 1;
      }
      v19 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v14, v13);
      v20 = *((_DWORD *)a3 + 22);
      v21 = __OFSUB__(v20--, 1);
      *((_DWORD *)a3 + 22) = v20;
      if (v20 < 0 != v21)
        return 0;
      v22 = v19;
      v23 = SnippetUI::Table_SpacerColumnCell::_InternalParse(v11, (google::protobuf::internal *)v14, a3);
      if (!v23)
        return 0;
LABEL_40:
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20))
        return 0;
      v28 = *((_DWORD *)a3 + 7) + v22;
      *((_DWORD *)a3 + 7) = v28;
      *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v28 & (v28 >> 31));
      v30 = v23;
    }
    if (v8 >> 3 == 1 && v8 == 10)
    {
      if (*((_DWORD *)this + 7) == 1)
      {
        v12 = (SnippetUI::Table_ContentColumnCell *)*((_QWORD *)this + 2);
      }
      else
      {
        SnippetUI::Table_Column::clear_cell((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_ContentColumnCell>(0);
        *((_QWORD *)this + 2) = v12;
        TagFallback = v30;
      }
      v15 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        v24 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!v24)
          return 0;
        v16 = v24;
        v15 = v25;
      }
      else
      {
        v16 = (char *)TagFallback + 1;
      }
      v26 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v16, v15);
      v27 = *((_DWORD *)a3 + 22);
      v21 = __OFSUB__(v27--, 1);
      *((_DWORD *)a3 + 22) = v27;
      if (v27 < 0 != v21)
        return 0;
      v22 = v26;
      v23 = SnippetUI::Table_ContentColumnCell::_InternalParse(v12, (google::protobuf::internal *)v16, a3);
      if (!v23)
        return 0;
      goto LABEL_40;
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v30 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v30)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table_Column::InternalSerializeWithCachedSizesToArray(SnippetUI::Table_Column *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  SnippetUI::Table_ContentColumnCell *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *((_DWORD *)this + 7);
  if (v6 == 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = (SnippetUI::Table_ContentColumnCell *)*((_QWORD *)this + 2);
    *a2 = 10;
    v8 = *((_DWORD *)v7 + 8);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v12 = v11;
          *v11++ = v10 | 0x80;
          v13 = v10 >> 7;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        v9 = v12 + 2;
        *v11 = v13;
      }
      else
      {
        a2[2] = v10;
        v9 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v8;
      v9 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::Table_ContentColumnCell::InternalSerializeWithCachedSizesToArray(v7, (char *)v9, a3, a4);
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = *((_QWORD *)this + 2);
    *a2 = 18;
    v16 = *(_DWORD *)(v15 + 16);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v17 = v16 >> 7;
      if (v16 >> 14)
      {
        v18 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v19 = v18;
          *v18++ = v17 | 0x80;
          v20 = v17 >> 7;
          v21 = v17 >> 14;
          v17 >>= 7;
        }
        while (v21);
        a2 = (char *)(v19 + 2);
        *v18 = v20;
      }
      else
      {
        a2[2] = v17;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v16;
      a2 += 2;
    }
    v22 = *(_QWORD *)(v15 + 8);
    if ((v22 & 1) != 0)
      a2 = (char *)google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v22 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v23 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::Table_Column::CopyFrom(SnippetUI::Table_Column *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Column::Clear(this);
    SnippetUI::Table_Column::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Column::MergeFrom(SnippetUI::Table_Column *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Table_Column *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2083);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Table_Column::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAB7AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Column::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::Table_Column::GetMetadata(SnippetUI::Table_Column *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Table_2eproto);
  return qword_1EF5828A0;
}

void *SnippetUI::Table_Column::default_instance(SnippetUI::Table_Column *this)
{
  if (atomic_load(scc_info_Table_Column_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Column_Table_2eproto);
  return &SnippetUI::_Table_Column_default_instance_;
}

void SnippetUI::Table_Column::MergeFrom(SnippetUI::Table_Column *this, const SnippetUI::Table_Column *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  SnippetUI::Table_SpacerColumnCell *v7;
  SnippetUI::Table_ContentColumnCell *v8;
  const SnippetUI::Table_SpacerColumnCell *v9;
  const SnippetUI::Table_ContentColumnCell *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 2098);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_Column *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_DWORD *)a2 + 7);
  if (v6 != 1)
  {
    if (v6 != 2)
      return;
    if (*((_DWORD *)this + 7) == 2)
    {
      v7 = (SnippetUI::Table_SpacerColumnCell *)*((_QWORD *)this + 2);
    }
    else
    {
      SnippetUI::Table_Column::clear_cell((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v7 = (SnippetUI::Table_SpacerColumnCell *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_SpacerColumnCell>(0);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) != 2)
      {
        v9 = (const SnippetUI::Table_SpacerColumnCell *)&SnippetUI::_Table_SpacerColumnCell_default_instance_;
        goto LABEL_16;
      }
    }
    v9 = (const SnippetUI::Table_SpacerColumnCell *)*((_QWORD *)a2 + 2);
LABEL_16:
    SnippetUI::Table_SpacerColumnCell::MergeFrom(v7, v9);
    return;
  }
  if (*((_DWORD *)this + 7) == 1)
  {
    v8 = (SnippetUI::Table_ContentColumnCell *)*((_QWORD *)this + 2);
  }
  else
  {
    SnippetUI::Table_Column::clear_cell((uint64_t)this);
    *((_DWORD *)this + 7) = 1;
    v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_ContentColumnCell>(0);
    *((_QWORD *)this + 2) = v8;
    if (*((_DWORD *)a2 + 7) != 1)
    {
      v10 = (const SnippetUI::Table_ContentColumnCell *)&SnippetUI::_Table_ContentColumnCell_default_instance_;
      goto LABEL_18;
    }
  }
  v10 = (const SnippetUI::Table_ContentColumnCell *)*((_QWORD *)a2 + 2);
LABEL_18:
  SnippetUI::Table_ContentColumnCell::MergeFrom(v8, v10);
}

void sub_1BFAB7C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table_Column::clear_cell(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

SnippetUI::Table_Column *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Column>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Table_Column *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Table_Column *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Column>);
    SnippetUI::Table_Column::Table_Column(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Table_Column *)operator new();
    SnippetUI::Table_Column::Table_Column(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAB7D5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table_Column>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::Table *SnippetUI::Table::Table(SnippetUI::Table *this)
{
  *(_QWORD *)this = &off_1E7933878;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  if (atomic_load(scc_info_Table_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Table_2eproto);
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_1BFAB7E4C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 40));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table::~Table(SnippetUI::Table *this)
{
  SnippetUI::Table::~Table(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7933878;
  if (this != (SnippetUI::Table *)&SnippetUI::_Table_default_instance_)
  {
    v2 = *((_QWORD *)this + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Table *)((char *)this + 40));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Table *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Table *SnippetUI::Table::New(SnippetUI::Table *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table>(0);
}

SnippetUI::Table *SnippetUI::Table::New(SnippetUI::Table *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table>(a2);
}

void SnippetUI::Table::Clear(SnippetUI::Table *this)
{
  uint64_t v2;
  SnippetUI::Table_Column **v3;
  SnippetUI::Table_Column *v4;
  std::string *v5;
  uint64_t v6;
  SnippetUI::Table_Row **v7;
  SnippetUI::Table_Row *v8;
  std::string *v9;
  uint64_t v10;
  char *v11;
  char v12;
  char v13;
  std::string v14[2];

  v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (SnippetUI::Table_Column **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::Table_Column::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v6 = *((unsigned int *)this + 12);
  if ((v6 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v9 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v6)
  {
    v7 = (SnippetUI::Table_Row **)(*((_QWORD *)this + 7) + 8);
    do
    {
      v8 = *v7++;
      SnippetUI::Table_Row::Clear(v8);
      --v6;
    }
    while (v6);
    *((_DWORD *)this + 12) = 0;
  }
  v10 = *((_QWORD *)this + 8);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v12 = *((_BYTE *)this + 8);
  v11 = (char *)this + 8;
  *((_QWORD *)v11 + 7) = 0;
  v11[64] = 0;
  if ((v12 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v11);
}

void sub_1BFAB7FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table::IsInitialized(SnippetUI::Table *this)
{
  return 1;
}

char *SnippetUI::Table::ByteSizeLong(SnippetUI::Table *this)
{
  uint64_t v2;
  uint64_t v3;
  SnippetUI::Table_Column **v4;
  uint64_t v5;
  SnippetUI::Table_Column *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  SnippetUI::Table_Row **v11;
  uint64_t v12;
  SnippetUI::Table_Row *v13;
  char *v14;
  SnippetUI::Table_Header *v15;
  char *v16;
  const google::protobuf::UnknownFieldSet *v17;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::Table_Column **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::Table_Column::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 12);
  v9 = v2 + v8;
  v10 = *((_QWORD *)this + 7);
  if (v10)
    v11 = (SnippetUI::Table_Row **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = SnippetUI::Table_Row::ByteSizeLong(v13);
      v9 += (uint64_t)&v14[(9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6];
      v12 -= 8;
    }
    while (v12);
  }
  if (this != (SnippetUI::Table *)&SnippetUI::_Table_default_instance_)
  {
    v15 = (SnippetUI::Table_Header *)*((_QWORD *)this + 8);
    if (v15)
    {
      v16 = SnippetUI::Table_Header::ByteSizeLong(v15);
      v9 += (uint64_t)&v16[((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((_BYTE *)this + 72))
    v17 = (const google::protobuf::UnknownFieldSet *)(v9 + 2);
  else
    v17 = (const google::protobuf::UnknownFieldSet *)v9;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Table *)((char *)this + 8), v17, (_DWORD *)this + 19);
  *((_DWORD *)this + 19) = (_DWORD)v17;
  return (char *)v17;
}

uint64_t SnippetUI::Table::GetCachedSize(SnippetUI::Table *this)
{
  return *((unsigned int *)this + 19);
}

google::protobuf::internal *SnippetUI::Table::_InternalParse(SnippetUI::Table *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  google::protobuf::internal *v11;
  unint64_t v12;
  int v13;
  google::protobuf::internal *v14;
  google::protobuf::internal *v15;
  int *v16;
  uint64_t v17;
  int v18;
  SnippetUI::Table_Column *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  char *SizeFallback;
  unsigned int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  unint64_t v31;
  SnippetUI::Table_Header *v32;
  unsigned int v33;
  char *v34;
  google::protobuf::internal *v35;
  google::protobuf::internal *v36;
  int *v37;
  uint64_t v38;
  int v39;
  SnippetUI::Table_Row *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char *v44;
  char *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  BOOL v52;
  char *v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  google::protobuf::internal *v58;
  int v59;
  google::protobuf::internal *v60;
  uint64_t v61;
  google::protobuf::internal *v63;

  v63 = a2;
  v5 = (unsigned int *)((char *)this + 40);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v63, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v63;
    TagFallback = (google::protobuf::internal *)((char *)v63 + 1);
    v10 = (char *)*(unsigned __int8 *)v63;
    if ((*(char *)v63 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v63 + 2);
LABEL_6:
      v63 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v63, v10);
    v63 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 8)
          goto LABEL_56;
        v11 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v12 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_12;
        v13 = *(char *)v11;
        v12 = v12 + (v13 << 7) - 128;
        if ((v13 & 0x80000000) == 0)
        {
          v11 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_12:
          v63 = v11;
          *((_BYTE *)this + 72) = v12 != 0;
          continue;
        }
        v60 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v12);
        v63 = v60;
        *((_BYTE *)this + 72) = v61 != 0;
        if (v60)
          continue;
        goto LABEL_71;
      case 2u:
        if (v10 != 18)
          goto LABEL_56;
        v14 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_15:
        v15 = (google::protobuf::internal *)((char *)v14 + 1);
        v63 = v15;
        v16 = (int *)*((_QWORD *)this + 4);
        if (!v16)
        {
          v18 = *((_DWORD *)this + 7);
LABEL_20:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v18 + 1);
          v16 = (int *)*((_QWORD *)this + 4);
          v18 = *v16;
          goto LABEL_21;
        }
        v17 = *((int *)this + 6);
        v18 = *v16;
        if ((int)v17 < *v16)
        {
          *((_DWORD *)this + 6) = v17 + 1;
          v19 = *(SnippetUI::Table_Column **)&v16[2 * v17 + 2];
          goto LABEL_22;
        }
        if (v18 == *((_DWORD *)this + 7))
          goto LABEL_20;
LABEL_21:
        *v16 = v18 + 1;
        v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Column>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                   + 2));
        v20 = *((_QWORD *)this + 4);
        v21 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21 + 8) = v19;
        v15 = v63;
LABEL_22:
        v22 = *(unsigned __int8 *)v15;
        if (*(char *)v15 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v15, (const char *)*(unsigned __int8 *)v15);
          if (!SizeFallback)
            goto LABEL_71;
          v23 = SizeFallback;
          v22 = v25;
        }
        else
        {
          v23 = (char *)v15 + 1;
        }
        v26 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v23, v22);
        v27 = *((_DWORD *)a3 + 22);
        v28 = __OFSUB__(v27--, 1);
        *((_DWORD *)a3 + 22) = v27;
        if (v27 < 0 == v28)
        {
          v29 = v26;
          v14 = SnippetUI::Table_Column::_InternalParse(v19, (google::protobuf::internal *)v23, a3);
          if (v14)
          {
            ++*((_DWORD *)a3 + 22);
            if (!*((_DWORD *)a3 + 20))
            {
              v30 = *((_DWORD *)a3 + 7) + v29;
              *((_DWORD *)a3 + 7) = v30;
              v31 = *((_QWORD *)a3 + 1) + (v30 & (v30 >> 31));
              *(_QWORD *)a3 = v31;
              v63 = v14;
              if (v31 <= (unint64_t)v14 || *(_BYTE *)v14 != 18)
                continue;
              goto LABEL_15;
            }
          }
        }
        goto LABEL_71;
      case 3u:
        if (v10 != 26)
          goto LABEL_56;
        v32 = (SnippetUI::Table_Header *)*((_QWORD *)this + 8);
        if (!v32)
        {
          v32 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Header>(0);
          *((_QWORD *)this + 8) = v32;
          TagFallback = v63;
        }
        v33 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v53 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v53)
            goto LABEL_71;
          v34 = v53;
          v33 = v54;
        }
        else
        {
          v34 = (char *)TagFallback + 1;
        }
        v55 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v34, v33);
        v56 = *((_DWORD *)a3 + 22);
        v28 = __OFSUB__(v56--, 1);
        *((_DWORD *)a3 + 22) = v56;
        if (v56 < 0 != v28)
          goto LABEL_71;
        v57 = v55;
        v58 = SnippetUI::Table_Header::_InternalParse(v32, (google::protobuf::internal *)v34, a3);
        if (!v58)
          goto LABEL_71;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          goto LABEL_71;
        v59 = *((_DWORD *)a3 + 7) + v57;
        *((_DWORD *)a3 + 7) = v59;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v59 & (v59 >> 31));
        v63 = v58;
        continue;
      case 4u:
        if (v10 != 34)
          goto LABEL_56;
        v35 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_39:
        v36 = (google::protobuf::internal *)((char *)v35 + 1);
        v63 = v36;
        v37 = (int *)*((_QWORD *)this + 7);
        if (!v37)
        {
          v39 = *((_DWORD *)this + 13);
LABEL_44:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v39 + 1);
          v37 = (int *)*((_QWORD *)this + 7);
          v39 = *v37;
          goto LABEL_45;
        }
        v38 = *((int *)this + 12);
        v39 = *v37;
        if ((int)v38 < *v37)
        {
          *((_DWORD *)this + 12) = v38 + 1;
          v40 = *(SnippetUI::Table_Row **)&v37[2 * v38 + 2];
          goto LABEL_46;
        }
        if (v39 == *((_DWORD *)this + 13))
          goto LABEL_44;
LABEL_45:
        *v37 = v39 + 1;
        v40 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Row>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                + 5));
        v41 = *((_QWORD *)this + 7);
        v42 = *((int *)this + 12);
        *((_DWORD *)this + 12) = v42 + 1;
        *(_QWORD *)(v41 + 8 * v42 + 8) = v40;
        v36 = v63;
LABEL_46:
        v43 = *(unsigned __int8 *)v36;
        if (*(char *)v36 < 0)
        {
          v45 = google::protobuf::internal::ReadSizeFallback(v36, (const char *)*(unsigned __int8 *)v36);
          if (!v45)
            goto LABEL_71;
          v44 = v45;
          v43 = v46;
        }
        else
        {
          v44 = (char *)v36 + 1;
        }
        v47 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v44, v43);
        v48 = *((_DWORD *)a3 + 22);
        v28 = __OFSUB__(v48--, 1);
        *((_DWORD *)a3 + 22) = v48;
        if (v48 < 0 == v28)
        {
          v49 = v47;
          v35 = SnippetUI::Table_Row::_InternalParse(v40, (google::protobuf::internal *)v44, a3);
          if (v35)
          {
            ++*((_DWORD *)a3 + 22);
            if (!*((_DWORD *)a3 + 20))
            {
              v50 = *((_DWORD *)a3 + 7) + v49;
              *((_DWORD *)a3 + 7) = v50;
              v51 = *((_QWORD *)a3 + 1) + (v50 & (v50 >> 31));
              *(_QWORD *)a3 = v51;
              v63 = v35;
              if (v51 <= (unint64_t)v35 || *(_BYTE *)v35 != 34)
                continue;
              goto LABEL_39;
            }
          }
        }
LABEL_71:
        TagFallback = 0;
        break;
      default:
LABEL_56:
        if ((_DWORD)v10)
          v52 = (v10 & 7) == 4;
        else
          v52 = 1;
        if (v52)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v63 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
        if (!v63)
          goto LABEL_71;
        continue;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Table::InternalSerializeWithCachedSizesToArray(SnippetUI::Table *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  char v7;
  int v8;
  int v9;
  std::string *v10;
  std::string *v11;
  SnippetUI::Table_Column *v12;
  unsigned int v13;
  char *v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned int v19;
  SnippetUI::Table_Header *v20;
  unsigned int v21;
  google::protobuf::UnknownFieldSet *v22;
  unsigned int v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  std::string *v30;
  std::string *v31;
  SnippetUI::Table_Row *v32;
  unsigned int v33;
  google::protobuf::UnknownFieldSet *v34;
  unsigned int v35;
  _BYTE *v36;
  _BYTE *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  char v42;
  std::string v43[2];

  v5 = (char *)a2;
  if (*((_BYTE *)this + 72))
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = *((_BYTE *)this + 72);
    }
    else
    {
      v7 = 1;
    }
    *v5 = 8;
    v5[1] = v7;
    v5 += 2;
  }
  v8 = *((_DWORD *)this + 6);
  if (v8)
  {
    v9 = 0;
    while ((unint64_t)v5 < *(_QWORD *)a3)
    {
      if (v9 < 0)
        goto LABEL_9;
LABEL_10:
      if (*((_DWORD *)this + 6) <= v9)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v11 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
      }
      v12 = *(SnippetUI::Table_Column **)(*((_QWORD *)this + 4) + 8 * v9 + 8);
      *v5 = 18;
      v13 = *((_DWORD *)v12 + 6);
      if (v13 > 0x7F)
      {
        v5[1] = v13 | 0x80;
        v15 = v13 >> 7;
        if (v13 >> 14)
        {
          v16 = v5 + 2;
          do
          {
            v17 = v16;
            *v16++ = v15 | 0x80;
            v18 = v15 >> 7;
            v19 = v15 >> 14;
            v15 >>= 7;
          }
          while (v19);
          v14 = v17 + 2;
          *v16 = v18;
        }
        else
        {
          v5[2] = v15;
          v14 = v5 + 3;
        }
      }
      else
      {
        v5[1] = v13;
        v14 = v5 + 2;
      }
      v5 = (char *)SnippetUI::Table_Column::InternalSerializeWithCachedSizesToArray(v12, v14, a3, a4);
      if (++v9 == v8)
        goto LABEL_23;
    }
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    if ((v9 & 0x80000000) == 0)
      goto LABEL_10;
LABEL_9:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v10 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
    goto LABEL_10;
  }
LABEL_23:
  if (this != (SnippetUI::Table *)&SnippetUI::_Table_default_instance_)
  {
    v20 = (SnippetUI::Table_Header *)*((_QWORD *)this + 8);
    if (v20)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v20 = (SnippetUI::Table_Header *)*((_QWORD *)this + 8);
      }
      *v5 = 26;
      v21 = *((_DWORD *)v20 + 12);
      if (v21 > 0x7F)
      {
        v5[1] = v21 | 0x80;
        v23 = v21 >> 7;
        if (v21 >> 14)
        {
          v24 = v5 + 2;
          do
          {
            v25 = v24;
            *v24++ = v23 | 0x80;
            v26 = v23 >> 7;
            v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          v22 = (google::protobuf::UnknownFieldSet *)(v25 + 2);
          *v24 = v26;
        }
        else
        {
          v5[2] = v23;
          v22 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v21;
        v22 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::Table_Header::InternalSerializeWithCachedSizesToArray(v20, v22, a3, a4);
    }
  }
  v28 = *((_DWORD *)this + 12);
  if (v28)
  {
    v29 = 0;
    while ((unint64_t)v5 < *(_QWORD *)a3)
    {
      if (v29 < 0)
        goto LABEL_39;
LABEL_40:
      if (*((_DWORD *)this + 12) <= v29)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v31 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v31->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
      }
      v32 = *(SnippetUI::Table_Row **)(*((_QWORD *)this + 7) + 8 * v29 + 8);
      *v5 = 34;
      v33 = *((_DWORD *)v32 + 20);
      if (v33 > 0x7F)
      {
        v5[1] = v33 | 0x80;
        v35 = v33 >> 7;
        if (v33 >> 14)
        {
          v36 = v5 + 2;
          do
          {
            v37 = v36;
            *v36++ = v35 | 0x80;
            v38 = v35 >> 7;
            v39 = v35 >> 14;
            v35 >>= 7;
          }
          while (v39);
          v34 = (google::protobuf::UnknownFieldSet *)(v37 + 2);
          *v36 = v38;
        }
        else
        {
          v5[2] = v35;
          v34 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v33;
        v34 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::Table_Row::InternalSerializeWithCachedSizesToArray(v32, v34, a3, a4);
      if (++v29 == v28)
        goto LABEL_53;
    }
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    if ((v29 & 0x80000000) == 0)
      goto LABEL_40;
LABEL_39:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v30 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v30->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
    goto LABEL_40;
  }
LABEL_53:
  v40 = *((_QWORD *)this + 1);
  if ((v40 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v40 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1BFAB8A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Table::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::Table::Clear((SnippetUI::Table *)this);
    SnippetUI::Table::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::Table::Clear((SnippetUI::Table *)this);
    SnippetUI::Table::MergeFrom(this, a2);
  }
}

void SnippetUI::Table::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 3210);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Table::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BFAB8B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Table::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 76) = a2;
  return this;
}

uint64_t SnippetUI::Table::GetMetadata(SnippetUI::Table *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Table_2eproto);
  return qword_1EF5828F0;
}

void *SnippetUI::Table::default_instance(SnippetUI::Table *this)
{
  if (atomic_load(scc_info_Table_Table_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Table_Table_2eproto);
  return &SnippetUI::_Table_default_instance_;
}

void SnippetUI::Table::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  int **v6;
  int **v7;
  int **v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Table.pb.cc", 3225);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Column>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Row>::TypeHandler>(this + 5, (uint64_t)(a2 + 5));
  if (a2 != (int **)&SnippetUI::_Table_default_instance_)
  {
    v6 = (int **)a2[8];
    if (v6)
    {
      v7 = (int **)this[8];
      if (!v7)
      {
        v7 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Header>(0);
        this[8] = (int *)v7;
        v6 = (int **)a2[8];
      }
      if (v6)
        v8 = v6;
      else
        v8 = (int **)&SnippetUI::_Table_Header_default_instance_;
      SnippetUI::Table_Header::MergeFrom(v7, v8);
    }
  }
  if (*((_BYTE *)a2 + 72))
    *((_BYTE *)this + 72) = 1;
}

void sub_1BFAB8CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Column>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  SnippetUI::Table_Column **v13;
  SnippetUI::Table_Column **v14;
  SnippetUI::Table_Column *v15;
  SnippetUI::Table_Column *v16;
  SnippetUI::Table_Column *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::Table_Column **v21;
  SnippetUI::Table_Column **v22;
  SnippetUI::Table_Column *v23;
  SnippetUI::Table_Column *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (SnippetUI::Table_Column **)(v6 + 8);
      v14 = (SnippetUI::Table_Column **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Column>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::Table_Column **)((char *)v8 + v20);
      v22 = (SnippetUI::Table_Column **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Column>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Column>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFAB8E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Row>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  SnippetUI::Table_Row **v13;
  SnippetUI::Table_Row **v14;
  SnippetUI::Table_Row *v15;
  SnippetUI::Table_Row *v16;
  SnippetUI::Table_Row *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::Table_Row **v21;
  SnippetUI::Table_Row **v22;
  SnippetUI::Table_Row *v23;
  SnippetUI::Table_Row *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (SnippetUI::Table_Row **)(v6 + 8);
      v14 = (SnippetUI::Table_Row **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Row>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::Table_Row **)((char *)v8 + v20);
      v22 = (SnippetUI::Table_Row **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_Row>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Row>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFAB8F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Row>::Merge(SnippetUI::Table_Row *a1, SnippetUI::Table_Row *this)
{
  SnippetUI::Table_Row::MergeFrom(this, a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::Table_Column>::Merge(SnippetUI::Table_Column *a1, SnippetUI::Table_Column *this)
{
  SnippetUI::Table_Column::MergeFrom(this, a1);
}

SnippetUI::Table *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Table *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Table *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Table>);
    SnippetUI::Table::Table(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Table *)operator new();
    SnippetUI::Table::Table(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAB9048(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406BE5C661);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Table>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t SnippetUI::Table_ColumnAlignment_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Table_2eproto);
  return file_level_enum_descriptors_Table_2eproto;
}

BOOL SnippetUI::Table_ColumnAlignment_IsValid(SnippetUI *this)
{
  return this < 4;
}

SnippetUI::Table_Header *SnippetUI::Table_Header::Table_Header(SnippetUI::Table_Header *this, const SnippetUI::Table_Header *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E79330F8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::Table_Header *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_HeaderCell>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 12) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
  return this;
}

void sub_1BFAB91C0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

__n128 SnippetUI::Table_Header::InternalSwap(SnippetUI::Table_Header *this, SnippetUI::Table_Header *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  __n128 result;
  std::string **v8;
  std::string *v9;
  uint64_t *v10;
  std::string **v11;
  std::string *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::Table_Header *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Table_Header *)((char *)this + 16), (SnippetUI::Table_Header *)((char *)a2 + 16));
  v10 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = (std::string **)((char *)this + 40);
  v9 = (std::string *)v10;
  v11 = (std::string **)((char *)a2 + 40);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = *v11;
  }
  v13 = v9->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

void SnippetUI::Table_Row::InitAsDefaultInstance(SnippetUI::Table_Row *this)
{
  qword_1ED1D3C88 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Table_Row::_Internal::action(SnippetUI::Table_Row::_Internal *this, const SnippetUI::Table_Row *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::Table_Row::clear_action(SnippetUI::Table_Row *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

void SnippetUI::Table_Row::clear_backgrounds(SnippetUI::Table_Row *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 40);
}

SnippetUI::Table_Row *SnippetUI::Table_Row::Table_Row(SnippetUI::Table_Row *this, const SnippetUI::Table_Row *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  SnippetUI::ActionProperty *v8;

  *(_QWORD *)this = &off_1E79331B8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::Table_Row *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Content>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((int **)this + 5, (uint64_t)a2 + 40);
  *((_DWORD *)this + 20) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_QWORD *)a2 + 8);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, v6);
  v8 = 0;
  if (a2 != (const SnippetUI::Table_Row *)&SnippetUI::_Table_Row_default_instance_ && *((_QWORD *)a2 + 9))
  {
    v8 = (SnippetUI::ActionProperty *)operator new();
    SnippetUI::ActionProperty::ActionProperty(v8, *((const SnippetUI::ActionProperty **)a2 + 9));
  }
  *((_QWORD *)this + 9) = v8;
  return this;
}

void sub_1BFAB9484(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  google::protobuf::internal::RepeatedPtrFieldBase *v3;
  uint64_t v4;

  MEMORY[0x1C3B8D890](v4, 0x10A1C40B18DE219);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Row::CopyFrom(SnippetUI::Table_Row *this, const SnippetUI::Table_Row *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Row::Clear(this);
    SnippetUI::Table_Row::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Row::InternalSwap(SnippetUI::Table_Row *this, SnippetUI::Table_Row *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  google::protobuf::UnknownFieldSet *v14;

  v4 = (SnippetUI::Table_Row *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v14;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Table_Row *)((char *)this + 16), (SnippetUI::Table_Row *)((char *)a2 + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Table_Row *)((char *)this + 40), (SnippetUI::Table_Row *)((char *)a2 + 40));
  v7 = (uint64_t *)*((_QWORD *)this + 8);
  v8 = (uint64_t **)((char *)a2 + 64);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
}

void SnippetUI::Table_Content::InitAsDefaultInstance(SnippetUI::Table_Content *this)
{
  qword_1ED1D3EA8 = (uint64_t)&SnippetUI::_Table_EmptyCell_default_instance_;
  unk_1ED1D3EB0 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D3EB8 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D3E90 = (uint64_t)&SnippetUI::_OptionalInt_default_instance_;
}

uint64_t SnippetUI::Table_Content::_Internal::empty(SnippetUI::Table_Content::_Internal *this, const SnippetUI::Table_Content *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Table_Content::_Internal::text(SnippetUI::Table_Content::_Internal *this, const SnippetUI::Table_Content *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Table_Content::_Internal::visual(SnippetUI::Table_Content::_Internal *this, const SnippetUI::Table_Content *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Table_Content::_Internal::line_limit(SnippetUI::Table_Content::_Internal *this, const SnippetUI::Table_Content *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::Table_Content::set_allocated_empty(SnippetUI::Table_Content *this, SnippetUI::Table_EmptyCell *a2)
{
  uint64_t result;

  result = SnippetUI::Table_Content::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 1;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Table_Content::set_allocated_text(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = SnippetUI::Table_Content::clear_value(a1);
  if (a2)
  {
    *(_DWORD *)(a1 + 36) = 2;
    *(_QWORD *)(a1 + 24) = a2;
  }
  return result;
}

uint64_t SnippetUI::Table_Content::clear_text(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 2)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Table_Content::set_allocated_visual(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = SnippetUI::Table_Content::clear_value(a1);
  if (a2)
  {
    *(_DWORD *)(a1 + 36) = 3;
    *(_QWORD *)(a1 + 24) = a2;
  }
  return result;
}

uint64_t SnippetUI::Table_Content::clear_visual(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 36) == 3)
  {
    v1 = this;
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 36) = 0;
  }
  return this;
}

uint64_t SnippetUI::Table_Content::clear_line_limit(SnippetUI::Table_Content *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

SnippetUI::Table_Content *SnippetUI::Table_Content::Table_Content(SnippetUI::Table_Content *this, const SnippetUI::Table_Content *a2)
{
  uint64_t v4;
  SnippetUI::OptionalInt *v6;
  int v7;
  SnippetUI::Table_EmptyCell *v8;
  const SnippetUI::Table_EmptyCell *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;

  *(_QWORD *)this = &off_1E7933278;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_Content *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 == (const SnippetUI::Table_Content *)&SnippetUI::_Table_Content_default_instance_
    || *((_QWORD *)a2 + 2) == 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = (SnippetUI::OptionalInt *)operator new();
    SnippetUI::OptionalInt::OptionalInt(v6, *((const SnippetUI::OptionalInt **)a2 + 2));
  }
  *((_QWORD *)this + 2) = v6;
  *((_DWORD *)this + 9) = 0;
  v7 = *((_DWORD *)a2 + 9);
  switch(v7)
  {
    case 3:
      SnippetUI::Table_Content::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 3;
      v10 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
      *((_QWORD *)this + 3) = v10;
      if (*((_DWORD *)a2 + 9) == 3)
        v11 = (int **)*((_QWORD *)a2 + 3);
      else
        v11 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v10, v11);
      break;
    case 2:
      SnippetUI::Table_Content::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 2;
      v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
      *((_QWORD *)this + 3) = v12;
      if (*((_DWORD *)a2 + 9) == 2)
        v13 = (int **)*((_QWORD *)a2 + 3);
      else
        v13 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v12, v13);
      break;
    case 1:
      SnippetUI::Table_Content::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      v8 = (SnippetUI::Table_EmptyCell *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_EmptyCell>(0);
      *((_QWORD *)this + 3) = v8;
      if (*((_DWORD *)a2 + 9) == 1)
        v9 = (const SnippetUI::Table_EmptyCell *)*((_QWORD *)a2 + 3);
      else
        v9 = (const SnippetUI::Table_EmptyCell *)&SnippetUI::_Table_EmptyCell_default_instance_;
      SnippetUI::Table_EmptyCell::MergeFrom(v8, v9);
      break;
  }
  return this;
}

void sub_1BFAB995C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x1081C40CC6EE3FDLL);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Content::CopyFrom(SnippetUI::Table_Content *this, const SnippetUI::Table_Content *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Content::Clear(this);
    SnippetUI::Table_Content::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Content::InternalSwap(SnippetUI::Table_Content *this, SnippetUI::Table_Content *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;

  v4 = (SnippetUI::Table_Content *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
}

uint64_t SnippetUI::Table_EmptyCell::Table_EmptyCell(uint64_t this)
{
  *(_QWORD *)this = &off_1E7933338;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7933338;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

SnippetUI::Table_EmptyCell *SnippetUI::Table_EmptyCell::Table_EmptyCell(SnippetUI::Table_EmptyCell *this, const SnippetUI::Table_EmptyCell *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E7933338;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  v3 = *((_QWORD *)a2 + 1);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_EmptyCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v3 & 0xFFFFFFFFFFFFFFFELL));
  return this;
}

void sub_1BFAB9AD4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_EmptyCell::CopyFrom(SnippetUI::Table_EmptyCell *this, const SnippetUI::Table_EmptyCell *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::Table_EmptyCell *)((char *)this + 8);
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::Table_EmptyCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_EmptyCell::InternalSwap(SnippetUI::Table_EmptyCell *this, SnippetUI::Table_EmptyCell *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  google::protobuf::UnknownFieldSet *v7;

  v2 = (SnippetUI::Table_EmptyCell *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  v3 = (uint64_t *)((char *)a2 + 8);
  v4 = v5;
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v4 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow(v3);
      v6 = v7;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v2, v6);
    return;
  }
  if ((v4 & 1) != 0)
    goto LABEL_5;
}

void SnippetUI::Table_HeaderCell::InitAsDefaultInstance(SnippetUI::Table_HeaderCell *this)
{
  qword_1ED1D4268 = (uint64_t)&SnippetUI::_Table_Content_default_instance_;
}

uint64_t SnippetUI::Table_HeaderCell::_Internal::content(SnippetUI::Table_HeaderCell::_Internal *this, const SnippetUI::Table_HeaderCell *a2)
{
  return *((_QWORD *)this + 2);
}

SnippetUI::Table_HeaderCell *SnippetUI::Table_HeaderCell::Table_HeaderCell(SnippetUI::Table_HeaderCell *this, const SnippetUI::Table_HeaderCell *a2)
{
  uint64_t v4;
  SnippetUI::Table_Content *v6;

  *(_QWORD *)this = &off_1E79333F8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_HeaderCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 == (const SnippetUI::Table_HeaderCell *)&SnippetUI::_Table_HeaderCell_default_instance_
    || *((_QWORD *)a2 + 2) == 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = (SnippetUI::Table_Content *)operator new();
    SnippetUI::Table_Content::Table_Content(v6, *((const SnippetUI::Table_Content **)a2 + 2));
  }
  *((_QWORD *)this + 2) = v6;
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  return this;
}

void sub_1BFAB9C78(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40EE95837BLL);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_HeaderCell::CopyFrom(SnippetUI::Table_HeaderCell *this, const SnippetUI::Table_HeaderCell *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_HeaderCell::Clear(this);
    SnippetUI::Table_HeaderCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_HeaderCell::InternalSwap(SnippetUI::Table_HeaderCell *this, SnippetUI::Table_HeaderCell *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::Table_HeaderCell *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

void SnippetUI::Table_Column::InitAsDefaultInstance(SnippetUI::Table_Column *this)
{
  qword_1ED1D3DC0 = (uint64_t)&SnippetUI::_Table_ContentColumnCell_default_instance_;
  unk_1ED1D3DC8 = &SnippetUI::_Table_SpacerColumnCell_default_instance_;
}

uint64_t SnippetUI::Table_Column::_Internal::content(SnippetUI::Table_Column::_Internal *this, const SnippetUI::Table_Column *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::Table_Column::_Internal::spacer(SnippetUI::Table_Column::_Internal *this, const SnippetUI::Table_Column *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::Table_Column::set_allocated_content(SnippetUI::Table_Column *this, SnippetUI::Table_ContentColumnCell *a2)
{
  uint64_t result;

  result = SnippetUI::Table_Column::clear_cell((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 1;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::Table_Column::set_allocated_spacer(SnippetUI::Table_Column *this, SnippetUI::Table_SpacerColumnCell *a2)
{
  uint64_t result;

  result = SnippetUI::Table_Column::clear_cell((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 2;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

SnippetUI::Table_Column *SnippetUI::Table_Column::Table_Column(SnippetUI::Table_Column *this, const SnippetUI::Table_Column *a2)
{
  uint64_t v4;
  int v5;
  SnippetUI::Table_SpacerColumnCell *v6;
  const SnippetUI::Table_SpacerColumnCell *v7;
  SnippetUI::Table_ContentColumnCell *v8;
  const SnippetUI::Table_ContentColumnCell *v9;

  *(_QWORD *)this = &off_1E79334B8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_Column *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_DWORD *)this + 7) = 0;
  v5 = *((_DWORD *)a2 + 7);
  if (v5 == 1)
  {
    SnippetUI::Table_Column::clear_cell((uint64_t)this);
    *((_DWORD *)this + 7) = 1;
    v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_ContentColumnCell>(0);
    *((_QWORD *)this + 2) = v8;
    if (*((_DWORD *)a2 + 7) == 1)
      v9 = (const SnippetUI::Table_ContentColumnCell *)*((_QWORD *)a2 + 2);
    else
      v9 = (const SnippetUI::Table_ContentColumnCell *)&SnippetUI::_Table_ContentColumnCell_default_instance_;
    SnippetUI::Table_ContentColumnCell::MergeFrom(v8, v9);
  }
  else if (v5 == 2)
  {
    SnippetUI::Table_Column::clear_cell((uint64_t)this);
    *((_DWORD *)this + 7) = 2;
    v6 = (SnippetUI::Table_SpacerColumnCell *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_SpacerColumnCell>(0);
    *((_QWORD *)this + 2) = v6;
    if (*((_DWORD *)a2 + 7) == 2)
      v7 = (const SnippetUI::Table_SpacerColumnCell *)*((_QWORD *)a2 + 2);
    else
      v7 = (const SnippetUI::Table_SpacerColumnCell *)&SnippetUI::_Table_SpacerColumnCell_default_instance_;
    SnippetUI::Table_SpacerColumnCell::MergeFrom(v6, v7);
  }
  return this;
}

void sub_1BFAB9EF8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_Column::CopyFrom(SnippetUI::Table_Column *this, const SnippetUI::Table_Column *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_Column::Clear(this);
    SnippetUI::Table_Column::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_Column::InternalSwap(SnippetUI::Table_Column *this, SnippetUI::Table_Column *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::Table_Column *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

uint64_t SnippetUI::Table_SpacerColumnCell::Table_SpacerColumnCell(uint64_t this)
{
  *(_QWORD *)this = &off_1E7933578;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7933578;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

SnippetUI::Table_SpacerColumnCell *SnippetUI::Table_SpacerColumnCell::Table_SpacerColumnCell(SnippetUI::Table_SpacerColumnCell *this, const SnippetUI::Table_SpacerColumnCell *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E7933578;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  v3 = *((_QWORD *)a2 + 1);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_SpacerColumnCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v3 & 0xFFFFFFFFFFFFFFFELL));
  return this;
}

void sub_1BFABA040(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_SpacerColumnCell::CopyFrom(SnippetUI::Table_SpacerColumnCell *this, const SnippetUI::Table_SpacerColumnCell *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::Table_SpacerColumnCell *)((char *)this + 8);
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::Table_SpacerColumnCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_SpacerColumnCell::InternalSwap(SnippetUI::Table_SpacerColumnCell *this, SnippetUI::Table_SpacerColumnCell *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  google::protobuf::UnknownFieldSet *v7;

  v2 = (SnippetUI::Table_SpacerColumnCell *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  v3 = (uint64_t *)((char *)a2 + 8);
  v4 = v5;
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v4 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow(v3);
      v6 = v7;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v2, v6);
    return;
  }
  if ((v4 & 1) != 0)
    goto LABEL_5;
}

void SnippetUI::Table_ContentColumnCell::InitAsDefaultInstance(SnippetUI::Table_ContentColumnCell *this)
{
  qword_1ED1D48C8 = (uint64_t)&SnippetUI::_Table_AutoColumnSize_default_instance_;
  unk_1ED1D48D0 = &SnippetUI::_Table_FixedColumnSize_default_instance_;
}

uint64_t SnippetUI::Table_ContentColumnCell::_Internal::auto_(SnippetUI::Table_ContentColumnCell::_Internal *this, const SnippetUI::Table_ContentColumnCell *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Table_ContentColumnCell::_Internal::fixed(SnippetUI::Table_ContentColumnCell::_Internal *this, const SnippetUI::Table_ContentColumnCell *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Table_ContentColumnCell::set_allocated_auto_(SnippetUI::Table_ContentColumnCell *this, SnippetUI::Table_AutoColumnSize *a2)
{
  uint64_t result;

  result = SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 1;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Table_ContentColumnCell::set_allocated_fixed(SnippetUI::Table_ContentColumnCell *this, SnippetUI::Table_FixedColumnSize *a2)
{
  uint64_t result;

  result = SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 2;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

SnippetUI::Table_ContentColumnCell *SnippetUI::Table_ContentColumnCell::Table_ContentColumnCell(SnippetUI::Table_ContentColumnCell *this, const SnippetUI::Table_ContentColumnCell *a2)
{
  uint64_t v4;
  int v5;
  SnippetUI::Table_FixedColumnSize *v6;
  const SnippetUI::Table_FixedColumnSize *v7;
  SnippetUI::Table_AutoColumnSize *v8;
  const SnippetUI::Table_AutoColumnSize *v9;

  *(_QWORD *)this = &off_1E7933638;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_ContentColumnCell *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 9) = 0;
  v5 = *((_DWORD *)a2 + 9);
  if (v5 == 1)
  {
    SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
    *((_DWORD *)this + 9) = 1;
    v8 = (SnippetUI::Table_AutoColumnSize *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_AutoColumnSize>(0);
    *((_QWORD *)this + 3) = v8;
    if (*((_DWORD *)a2 + 9) == 1)
      v9 = (const SnippetUI::Table_AutoColumnSize *)*((_QWORD *)a2 + 3);
    else
      v9 = (const SnippetUI::Table_AutoColumnSize *)&SnippetUI::_Table_AutoColumnSize_default_instance_;
    SnippetUI::Table_AutoColumnSize::MergeFrom(v8, v9);
  }
  else if (v5 == 2)
  {
    SnippetUI::Table_ContentColumnCell::clear_size((uint64_t)this);
    *((_DWORD *)this + 9) = 2;
    v6 = (SnippetUI::Table_FixedColumnSize *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Table_FixedColumnSize>(0);
    *((_QWORD *)this + 3) = v6;
    if (*((_DWORD *)a2 + 9) == 2)
      v7 = (const SnippetUI::Table_FixedColumnSize *)*((_QWORD *)a2 + 3);
    else
      v7 = (const SnippetUI::Table_FixedColumnSize *)&SnippetUI::_Table_FixedColumnSize_default_instance_;
    SnippetUI::Table_FixedColumnSize::MergeFrom(v6, v7);
  }
  return this;
}

void sub_1BFABA2A4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_ContentColumnCell::CopyFrom(SnippetUI::Table_ContentColumnCell *this, const SnippetUI::Table_ContentColumnCell *a2)
{
  if (a2 != this)
  {
    SnippetUI::Table_ContentColumnCell::Clear(this);
    SnippetUI::Table_ContentColumnCell::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_ContentColumnCell::InternalSwap(SnippetUI::Table_ContentColumnCell *this, SnippetUI::Table_ContentColumnCell *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  int v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;

  v4 = (SnippetUI::Table_ContentColumnCell *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
}

uint64_t SnippetUI::Table_AutoColumnSize::Table_AutoColumnSize(uint64_t this)
{
  *(_QWORD *)this = &off_1E79336F8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E79336F8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

SnippetUI::Table_AutoColumnSize *SnippetUI::Table_AutoColumnSize::Table_AutoColumnSize(SnippetUI::Table_AutoColumnSize *this, const SnippetUI::Table_AutoColumnSize *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E79336F8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  v3 = *((_QWORD *)a2 + 1);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_AutoColumnSize *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v3 & 0xFFFFFFFFFFFFFFFELL));
  return this;
}

void sub_1BFABA3FC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_AutoColumnSize::CopyFrom(SnippetUI::Table_AutoColumnSize *this, const SnippetUI::Table_AutoColumnSize *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::Table_AutoColumnSize *)((char *)this + 8);
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::Table_AutoColumnSize::MergeFrom(this, a2);
  }
}

void SnippetUI::Table_AutoColumnSize::InternalSwap(SnippetUI::Table_AutoColumnSize *this, SnippetUI::Table_AutoColumnSize *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  google::protobuf::UnknownFieldSet *v7;

  v2 = (SnippetUI::Table_AutoColumnSize *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  v3 = (uint64_t *)((char *)a2 + 8);
  v4 = v5;
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v4 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow(v3);
      v6 = v7;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v2, v6);
    return;
  }
  if ((v4 & 1) != 0)
    goto LABEL_5;
}

_QWORD *SnippetUI::Table_FixedColumnSize::Table_FixedColumnSize(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E79337B8;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E79337B8;
  return this;
}

SnippetUI::Table_FixedColumnSize *SnippetUI::Table_FixedColumnSize::Table_FixedColumnSize(SnippetUI::Table_FixedColumnSize *this, const SnippetUI::Table_FixedColumnSize *a2)
{
  uint64_t v4;

  *(_QWORD *)this = &off_1E79337B8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Table_FixedColumnSize *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  return this;
}

void sub_1BFABA564(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table_FixedColumnSize::CopyFrom(SnippetUI::Table_FixedColumnSize *this, const SnippetUI::Table_FixedColumnSize *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::Table_FixedColumnSize *)((char *)this + 8);
    *((_DWORD *)v4 + 2) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::Table_FixedColumnSize::MergeFrom(this, a2);
  }
}

float SnippetUI::Table_FixedColumnSize::InternalSwap(SnippetUI::Table_FixedColumnSize *this, SnippetUI::Table_FixedColumnSize *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  float result;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::Table_FixedColumnSize *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

void SnippetUI::Table::InitAsDefaultInstance(SnippetUI::Table *this)
{
  qword_1ED1D3B28 = (uint64_t)&SnippetUI::_Table_Header_default_instance_;
}

uint64_t SnippetUI::Table::_Internal::header(SnippetUI::Table::_Internal *this, const SnippetUI::Table *a2)
{
  return *((_QWORD *)this + 8);
}

SnippetUI::Table *SnippetUI::Table::Table(SnippetUI::Table *this, const SnippetUI::Table *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::Table_Header *v6;

  *(_QWORD *)this = &off_1E7933878;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::Table *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Column>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Table_Row>::TypeHandler>((int **)this + 5, (uint64_t)a2 + 40);
  *((_DWORD *)this + 19) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = 0;
  if (a2 != (const SnippetUI::Table *)&SnippetUI::_Table_default_instance_ && *((_QWORD *)a2 + 8))
  {
    v6 = (SnippetUI::Table_Header *)operator new();
    SnippetUI::Table_Header::Table_Header(v6, *((const SnippetUI::Table_Header **)a2 + 8));
  }
  *((_QWORD *)this + 8) = v6;
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  return this;
}

void sub_1BFABA75C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  google::protobuf::internal::RepeatedPtrFieldBase *v3;
  uint64_t v4;

  MEMORY[0x1C3B8D890](v4, 0x10A1C40B18DE219);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Table::InternalSwap(SnippetUI::Table *this, SnippetUI::Table *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::Table *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Table *)((char *)this + 16), (SnippetUI::Table *)((char *)a2 + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Table *)((char *)this + 40), (SnippetUI::Table *)((char *)a2 + 40));
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 72);
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  *((_BYTE *)a2 + 72) = v7;
}

void siri::dialogengine::ExecuteDetailedResult::~ExecuteDetailedResult(siri::dialogengine::ExecuteDetailedResult *this)
{
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t *siri::dialogengine::ExecuteDetailedResult::Execute@<X0>(siri::dialogengine **this@<X0>, _QWORD *a2@<X8>)
{
  _BOOL4 BooleanParameter;
  double NumberParameter;
  _BOOL4 v6;
  uint64_t v7;
  siri::dialogengine::VariableObject *v8;
  _BOOL4 v9;
  int v10;
  void *__p[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "conclusionInSingleWindowResponse");
  BooleanParameter = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v13 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "windowSize");
  NumberParameter = siri::dialogengine::ExecutePatternBase::GetNumberParameter((uint64_t)this, (const void **)__p, 0.0);
  if (v13 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isFirstWindow");
  v6 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v13 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isLastWindow");
  v9 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v13 < 0)
    operator delete(__p[0]);
  if (siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup(this, v7, v8))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Sash");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  if (NumberParameter < 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "Detail");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "Visual");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "Attribution");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "Reference");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0)
    {
      operator delete(__p[0]);
      if (!BooleanParameter)
        goto LABEL_41;
    }
    else if (!BooleanParameter)
    {
LABEL_41:
      std::string::basic_string[abi:ne180100]<0>(__p, "Prompt");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
      goto LABEL_48;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Conclusion");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0)
      operator delete(__p[0]);
    goto LABEL_41;
  }
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  v10 = v6 && v9;
  if ((v10 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "WindowIntro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Detail");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Visual");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Attribution");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "Reference");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v9)
      goto LABEL_38;
  }
  else if (v9)
  {
LABEL_38:
    if ((v10 ^ 1 | BooleanParameter) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Conclusion");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_41;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WindowPrompt");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
LABEL_48:
  if (v13 < 0)
    operator delete(__p[0]);
  return siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
}

void sub_1BFABACF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ConceptCallbacks::HasCallback(uint64_t a1, std::string *a2)
{
  return siri::dialogengine::IsBuiltinType(a2) || *(_QWORD *)(a1 + 792) != 0;
}

void siri::dialogengine::ConceptCallbacks::InvokeCallback(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unsigned __int8 v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  size_t v16;
  std::string::size_type size;
  size_t v18;
  std::string *v19;
  std::string *v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  int v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  uint64_t v42;
  std::string *v43;
  __int128 v44;
  int v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  std::string v58;
  std::string v59;
  std::string v60;
  void *__p[2];
  std::string::size_type v62;
  std::string v63;
  _QWORD v64[7];
  uint64_t v65;
  _BYTE v66[7];

  if ((v11 & 1) == 0
  {
    v55 = (_QWORD *)operator new();
    *v55 = 0;
    siri::dialogengine::ConceptCallbacks::InvokeCallback(siri::dialogengine::Context *,std::string const&,std::string const&,siri::dialogengine::VariableObject const*,std::string const&)::flag = (uint64_t)v55;
  }
  v12 = atomic_load((unint64_t *)siri::dialogengine::ConceptCallbacks::InvokeCallback(siri::dialogengine::Context *,std::string const&,std::string const&,siri::dialogengine::VariableObject const*,std::string const&)::flag);
  if (v12 != -1)
  {
    v64[0] = siri::dialogengine::ConceptCallbacks::RegisterConcepts;
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::ConceptCallbacks::InvokeCallback(siri::dialogengine::Context *,std::string const&,std::string const&,siri::dialogengine::VariableObject const*,std::string const&)::flag, &v63, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  siri::dialogengine::VariableObject::VariableObject((siri::dialogengine::VariableObject *)v64);
  if (a4)
    v13 = (_QWORD *)a4;
  else
    v13 = v64;
  v56 = v13;
  if (a4)
    v14 = (uint64_t *)(a4 + 56);
  else
    v14 = &v65;
  if (a4)
    v15 = (unsigned __int8 *)(a4 + 65);
  else
    v15 = v66;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v63 = *(std::string *)a2;
  v16 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
  size = v63.__r_.__value_.__l.__size_;
  do
  {
    if ((v16 & 0x80u) == 0)
      v18 = v16;
    else
      v18 = size;
    std::string::basic_string[abi:ne180100]((uint64_t)&v60, v18 + 1);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v60;
    else
      v19 = (std::string *)v60.__r_.__value_.__r.__words[0];
    if (v18)
    {
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v63;
      else
        v20 = (std::string *)v63.__r_.__value_.__r.__words[0];
      memmove(v19, v20, v18);
    }
    *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 46;
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = (const std::string::value_type *)a3;
    else
      v22 = *(const std::string::value_type **)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
    v24 = std::string::append(&v60, v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v62 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    v27 = siri::dialogengine::ConceptCallbacks::mCallbacks + 8;
    v26 = *(_QWORD *)(siri::dialogengine::ConceptCallbacks::mCallbacks + 8);
    if (!v26)
      goto LABEL_43;
    v28 = siri::dialogengine::ConceptCallbacks::mCallbacks + 16;
    v29 = siri::dialogengine::ConceptCallbacks::mCallbacks + 8;
    do
    {
      v30 = std::less<std::string>::operator()[abi:ne180100](v28, (const void **)(v26 + 32), (const void **)__p);
      v31 = (uint64_t *)(v26 + 8);
      if (!v30)
      {
        v31 = (uint64_t *)v26;
        v29 = v26;
      }
      v26 = *v31;
    }
    while (*v31);
    if (v29 == v27
      || std::less<std::string>::operator()[abi:ne180100](v28, (const void **)__p, (const void **)(v29 + 32)))
    {
LABEL_43:
      v29 = v27;
    }
    if (siri::dialogengine::ConceptCallbacks::mCallbacks + 8 != v29)
    {
      v42 = (*(uint64_t (**)(uint64_t, _QWORD *))(v29 + 56))(a1, v56);
      std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::Variable,void>(a6, v42);
LABEL_98:
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
      goto LABEL_100;
    }
    if (a1)
    {
      v32 = *(_QWORD *)(a1 + 792);
      if (v32)
      {
        (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t))(v32 + 16))(v32, a5, &v63, a3);
        if (*a6)
        {
          LOBYTE(v50) = 1;
          v51 = *a6;
          do
          {
            v52 = *(unsigned __int8 *)(v51 + 65);
            v51 = *(_QWORD *)(v51 + 56);
            v50 = v50 & (v52 != 0);
          }
          while (v51);
          if (v50)
          {
            LOBYTE(v50) = 1;
            do
            {
              v53 = *v15;
              v54 = *v14;
              v14 = (uint64_t *)(*v14 + 56);
              v15 = (unsigned __int8 *)(v54 + 65);
              LOBYTE(v50) = v50 & (v53 != 0);
            }
            while (v54);
          }
          *(_BYTE *)(*a6 + 65) = v50;
          goto LABEL_98;
        }
      }
      else
      {
        *a6 = 0;
        a6[1] = 0;
      }
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)a6);
    }
    siri::dialogengine::ObjectRegistry::GetObject(a1, (const std::string::value_type **)&v63.__r_.__value_.__l.__data_, (uint64_t *)&v59);
    if (v59.__r_.__value_.__r.__words[0])
    {
      if (*(char *)(v59.__r_.__value_.__r.__words[0] + 95) < 0)
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(v59.__r_.__value_.__r.__words[0] + 72), *(_QWORD *)(v59.__r_.__value_.__r.__words[0] + 80));
      else
        v60 = *(std::string *)(v59.__r_.__value_.__r.__words[0] + 72);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v60, "");
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    v63 = v60;
    v33 = (std::__shared_weak_count *)v59.__r_.__value_.__l.__size_;
    if (v59.__r_.__value_.__l.__size_)
    {
      v34 = (unint64_t *)(v59.__r_.__value_.__l.__size_ + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (SHIBYTE(v62) < 0)
      operator delete(__p[0]);
    v16 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    size = v63.__r_.__value_.__l.__size_;
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    else
      v36 = v63.__r_.__value_.__l.__size_;
  }
  while (v36);
  if (a1 && *(_QWORD *)(a1 + 792))
  {
    std::operator+<char>();
    v37 = std::string::append(&v58, "' of type '");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = *(char *)(a2 + 23);
    if (v39 >= 0)
      v40 = (const std::string::value_type *)a2;
    else
      v40 = *(const std::string::value_type **)a2;
    if (v39 >= 0)
      v41 = *(unsigned __int8 *)(a2 + 23);
    else
      v41 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    std::operator+<char>();
    v43 = std::string::append(&v58, "' of type '");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = *(char *)(a2 + 23);
    if (v45 >= 0)
      v40 = (const std::string::value_type *)a2;
    else
      v40 = *(const std::string::value_type **)a2;
    if (v45 >= 0)
      v41 = *(unsigned __int8 *)(a2 + 23);
    else
      v41 = *(_QWORD *)(a2 + 8);
  }
  v46 = std::string::append(&v59, v40, v41);
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v48 = std::string::append(&v60, "'");
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v62 = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
  if (SHIBYTE(v62) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  *a6 = 0;
  a6[1] = 0;
LABEL_100:
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  siri::dialogengine::VariableObject::~VariableObject((siri::dialogengine::VariableObject *)v64);
}

void sub_1BFABB340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::ConceptCallbacks::RegisterConcepts(siri::dialogengine::ConceptCallbacks *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t **v4;
  const std::string::value_type **v5;
  uint64_t v6;
  uint64_t *v7;
  BOOL v8;
  _BOOL4 v9;
  uint64_t *v10;
  uint64_t **v11;
  const void **v12;
  uint64_t *v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  _QWORD v18[4];
  _QWORD v19[4];
  _QWORD v20[4];
  _QWORD v21[4];
  _QWORD v22[4];
  _QWORD v23[4];
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[4];
  _QWORD v29[4];
  _QWORD v30[4];
  _QWORD v31[4];
  _QWORD v32[4];
  _QWORD v33[4];
  _QWORD v34[4];
  _QWORD v35[4];
  _QWORD v36[4];
  _QWORD v37[4];
  _QWORD v38[4];
  _QWORD v39[4];
  _QWORD v40[4];
  _QWORD v41[4];
  _QWORD v42[4];
  _QWORD v43[4];
  _QWORD v44[4];
  _QWORD v45[4];
  _QWORD v46[4];
  _QWORD v47[4];
  _QWORD v48[4];
  _QWORD v49[4];
  _QWORD v50[4];
  _QWORD v51[4];
  _QWORD v52[4];
  _QWORD v53[4];
  _QWORD v54[4];
  _QWORD v55[4];
  _QWORD v56[4];
  _QWORD v57[4];
  _QWORD v58[4];
  _QWORD v59[4];
  _QWORD v60[4];
  _QWORD v61[4];
  _QWORD v62[4];
  _QWORD v63[4];
  _QWORD v64[4];
  _QWORD v65[4];
  _QWORD v66[4];
  _QWORD v67[4];
  _QWORD v68[4];
  _QWORD v69[4];
  _QWORD v70[4];
  _QWORD v71[4];
  _QWORD v72[4];
  _QWORD v73[4];
  _QWORD v74[4];
  _QWORD v75[4];
  _QWORD v76[4];
  _QWORD v77[4];
  _QWORD v78[4];
  _QWORD v79[4];
  _QWORD v80[4];
  _QWORD v81[4];
  _QWORD v82[4];
  _QWORD v83[4];
  _QWORD v84[4];
  _QWORD v85[4];
  _QWORD v86[4];
  _QWORD v87[4];
  _QWORD v88[4];
  _QWORD v89[4];
  _QWORD v90[4];
  _QWORD v91[4];
  _QWORD v92[4];
  _QWORD v93[4];
  _QWORD v94[4];
  _QWORD v95[4];
  _QWORD v96[4];
  _QWORD v97[4];
  _QWORD v98[4];
  _QWORD v99[4];
  _QWORD v100[4];
  _QWORD v101[4];
  _QWORD v102[4];
  _QWORD v103[4];
  _QWORD v104[4];
  _QWORD v105[4];
  _QWORD v106[4];
  _QWORD v107[4];
  _QWORD v108[4];
  _QWORD v109[4];
  _QWORD v110[4];
  _QWORD v111[4];
  _QWORD v112[4];
  _QWORD v113[4];
  _QWORD v114[4];
  _QWORD v115[4];
  _QWORD v116[4];
  _QWORD v117[4];
  _QWORD v118[4];
  _QWORD v119[4];
  _QWORD v120[4];
  _QWORD v121[4];
  _QWORD v122[4];
  _QWORD v123[4];
  _QWORD v124[4];
  _QWORD v125[4];
  _QWORD v126[4];
  _QWORD v127[4];
  _QWORD v128[4];
  _QWORD v129[4];
  _QWORD v130[4];
  _QWORD v131[4];
  _QWORD v132[4];
  _QWORD v133[4];
  _QWORD v134[4];
  _QWORD v135[4];
  _QWORD v136[4];
  _QWORD v137[4];
  _QWORD v138[4];
  _QWORD v139[4];
  _QWORD v140[4];
  _QWORD v141[4];
  _QWORD v142[4];
  _QWORD v143[4];
  _QWORD v144[4];
  _QWORD v145[4];
  _QWORD v146[4];
  _QWORD v147[4];
  _QWORD v148[4];
  _QWORD v149[4];
  _QWORD v150[4];
  _QWORD v151[4];
  _QWORD v152[4];
  _QWORD v153[4];
  _QWORD v154[4];
  _QWORD v155[4];
  _QWORD v156[4];
  _QWORD v157[4];
  _QWORD v158[4];
  _QWORD v159[4];
  _QWORD v160[4];
  _QWORD v161[4];
  _QWORD v162[4];
  _QWORD v163[4];
  _QWORD v164[4];
  _QWORD v165[4];
  _QWORD v166[4];
  _QWORD v167[4];
  _QWORD v168[4];
  _QWORD v169[4];
  _QWORD v170[4];
  _QWORD v171[4];
  _QWORD v172[4];
  _QWORD v173[4];
  _QWORD v174[4];
  _QWORD v175[4];
  _QWORD v176[4];
  _QWORD v177[4];
  _QWORD v178[4];
  _QWORD v179[4];
  _QWORD v180[4];
  _QWORD v181[4];
  _QWORD v182[4];
  _QWORD v183[4];
  _QWORD v184[4];
  _QWORD v185[4];
  _QWORD v186[4];
  _QWORD v187[4];
  _QWORD v188[4];
  _QWORD v189[4];
  _QWORD v190[4];
  _QWORD v191[4];
  _QWORD v192[4];
  _QWORD v193[4];
  _QWORD v194[4];
  _QWORD v195[4];
  _QWORD v196[4];
  _QWORD v197[4];
  _QWORD v198[4];
  _QWORD v199[4];
  _QWORD v200[4];
  _QWORD v201[4];
  _QWORD v202[4];
  _QWORD v203[4];
  _QWORD v204[4];
  _QWORD v205[4];
  _QWORD v206[4];
  _QWORD v207[4];
  _QWORD v208[4];
  _QWORD v209[4];
  _QWORD v210[4];
  _QWORD v211[4];
  _QWORD v212[4];
  _QWORD v213[4];
  _QWORD v214[4];
  _QWORD v215[4];
  _QWORD v216[4];
  _QWORD v217[4];
  _QWORD v218[4];
  _QWORD v219[4];
  _QWORD v220[4];
  _QWORD v221[4];
  _QWORD v222[4];
  _QWORD v223[4];
  _QWORD v224[4];
  _QWORD v225[4];
  _QWORD v226[4];
  _QWORD v227[4];
  _QWORD v228[4];
  _QWORD v229[4];
  _QWORD v230[4];
  _QWORD v231[4];
  _QWORD v232[4];
  _QWORD v233[4];
  _QWORD v234[4];
  _QWORD v235[4];
  _QWORD v236[4];
  _QWORD v237[4];
  _QWORD v238[4];
  _QWORD v239[4];
  _QWORD v240[4];
  _QWORD v241[4];
  _QWORD v242[4];
  _QWORD v243[4];
  _QWORD v244[4];
  _QWORD v245[4];
  _QWORD v246[4];
  _QWORD v247[4];
  _QWORD v248[4];
  _QWORD v249[4];
  _QWORD v250[4];
  _QWORD v251[4];
  _QWORD v252[4];
  _QWORD v253[4];
  _QWORD v254[4];
  _QWORD v255[4];
  _QWORD v256[4];
  _QWORD v257[4];
  _QWORD v258[4];
  _QWORD v259[4];
  _QWORD v260[4];
  _QWORD v261[4];
  _QWORD v262[4];
  _QWORD v263[4];
  _QWORD v264[4];
  _QWORD v265[4];
  _QWORD v266[4];
  _QWORD v267[4];
  _QWORD v268[4];
  _QWORD v269[4];
  _QWORD v270[4];
  _QWORD v271[4];
  _QWORD v272[4];
  _QWORD v273[4];
  _QWORD v274[4];
  _QWORD v275[4];
  _QWORD v276[4];
  _QWORD v277[4];
  _QWORD v278[4];
  _QWORD v279[4];
  _QWORD v280[4];
  _QWORD v281[4];
  _QWORD v282[4];
  _QWORD v283[4];
  _QWORD v284[4];
  _QWORD v285[4];
  _QWORD v286[4];
  _QWORD v287[4];
  _QWORD v288[4];
  _QWORD v289[4];
  _QWORD v290[4];
  _QWORD v291[4];
  _QWORD v292[4];
  _QWORD v293[4];
  _QWORD v294[4];
  _QWORD v295[4];
  _QWORD v296[5];

  MEMORY[0x1E0C80A78](this);
  v296[4] = *MEMORY[0x1E0C80C00];
  v1 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v17, "dialog.Area.toString");
  v17[3] = siri::dialogengine::DialogArea::toString;
  std::string::basic_string[abi:ne180100]<0>(v18, "dialog.Area.approximate");
  v18[3] = siri::dialogengine::DialogArea::approximate;
  std::string::basic_string[abi:ne180100]<0>(v19, "dialog.Area.compactDecimalLong");
  v19[3] = siri::dialogengine::DialogArea::compactDecimalLong;
  std::string::basic_string[abi:ne180100]<0>(v20, "dialog.Area.compactDecimalShort");
  v20[3] = siri::dialogengine::DialogArea::compactDecimalShort;
  std::string::basic_string[abi:ne180100]<0>(v21, "dialog.Area.units");
  v21[3] = siri::dialogengine::DialogArea::units;
  std::string::basic_string[abi:ne180100]<0>(v22, "dialog.Area.value");
  v22[3] = siri::dialogengine::DialogArea::value;
  std::string::basic_string[abi:ne180100]<0>(v23, "dialog.Density.toString");
  v23[3] = siri::dialogengine::DialogDensity::toString;
  std::string::basic_string[abi:ne180100]<0>(v24, "dialog.Density.approximate");
  v24[3] = siri::dialogengine::DialogDensity::approximate;
  std::string::basic_string[abi:ne180100]<0>(v25, "dialog.Density.compactDecimalLong");
  v25[3] = siri::dialogengine::DialogDensity::compactDecimalLong;
  std::string::basic_string[abi:ne180100]<0>(v26, "dialog.Density.compactDecimalShort");
  v26[3] = siri::dialogengine::DialogDensity::compactDecimalShort;
  std::string::basic_string[abi:ne180100]<0>(v27, "dialog.Density.units");
  v27[3] = siri::dialogengine::DialogDensity::units;
  std::string::basic_string[abi:ne180100]<0>(v28, "dialog.Density.value");
  v28[3] = siri::dialogengine::DialogDensity::value;
  std::string::basic_string[abi:ne180100]<0>(v29, "dialog.Length.toString");
  v29[3] = siri::dialogengine::DialogLength::toString;
  std::string::basic_string[abi:ne180100]<0>(v30, "dialog.Length.abbreviated");
  v30[3] = siri::dialogengine::DialogLength::abbreviated;
  std::string::basic_string[abi:ne180100]<0>(v31, "dialog.Length.approximate");
  v31[3] = siri::dialogengine::DialogLength::approximate;
  std::string::basic_string[abi:ne180100]<0>(v32, "dialog.Length.compactDecimalLong");
  v32[3] = siri::dialogengine::DialogLength::compactDecimalLong;
  std::string::basic_string[abi:ne180100]<0>(v33, "dialog.Length.compactDecimalShort");
  v33[3] = siri::dialogengine::DialogLength::compactDecimalShort;
  std::string::basic_string[abi:ne180100]<0>(v34, "dialog.Length.symbolic");
  v34[3] = siri::dialogengine::DialogLength::symbolic;
  std::string::basic_string[abi:ne180100]<0>(v35, "dialog.Length.units");
  v35[3] = siri::dialogengine::DialogLength::units;
  std::string::basic_string[abi:ne180100]<0>(v36, "dialog.Length.value");
  v36[3] = siri::dialogengine::DialogLength::value;
  std::string::basic_string[abi:ne180100]<0>(v37, "dialog.Person.toString");
  v37[3] = siri::dialogengine::DialogPerson::toString;
  std::string::basic_string[abi:ne180100]<0>(v38, "dialog.Person.givenName");
  v38[3] = siri::dialogengine::DialogPerson::givenName;
  std::string::basic_string[abi:ne180100]<0>(v39, "dialog.Person.middleName");
  v39[3] = siri::dialogengine::DialogPerson::middleName;
  std::string::basic_string[abi:ne180100]<0>(v40, "dialog.Person.familyName");
  v40[3] = siri::dialogengine::DialogPerson::familyName;
  std::string::basic_string[abi:ne180100]<0>(v41, "dialog.Person.nickname");
  v41[3] = siri::dialogengine::DialogPerson::nickname;
  std::string::basic_string[abi:ne180100]<0>(v42, "dialog.Person.simpleName");
  v42[3] = siri::dialogengine::DialogPerson::simpleName;
  std::string::basic_string[abi:ne180100]<0>(v43, "dialog.Person.fullName");
  v43[3] = siri::dialogengine::DialogPerson::fullName;
  std::string::basic_string[abi:ne180100]<0>(v44, "dialog.Person.pronoun");
  v44[3] = siri::dialogengine::DialogPerson::pronoun;
  std::string::basic_string[abi:ne180100]<0>(v45, "dialog.Person.formatWithHandle");
  v45[3] = siri::dialogengine::DialogPerson::formatWithHandle;
  std::string::basic_string[abi:ne180100]<0>(v46, "dialog.Person.conversationalName");
  v46[3] = siri::dialogengine::DialogPerson::conversationalName;
  std::string::basic_string[abi:ne180100]<0>(v47, "dialog.PersonHandle.toString");
  v47[3] = siri::dialogengine::DialogPersonHandle::formattedValue;
  std::string::basic_string[abi:ne180100]<0>(v48, "dialog.PersonHandle.formattedValue");
  v48[3] = siri::dialogengine::DialogPersonHandle::formattedValue;
  std::string::basic_string[abi:ne180100]<0>(v49, "dialog.PersonHandle.formattedLabel");
  v49[3] = siri::dialogengine::DialogPersonHandle::formattedLabel;
  std::string::basic_string[abi:ne180100]<0>(v50, "dialog.PersonHandle.formattedType");
  v50[3] = siri::dialogengine::DialogPersonHandle::formattedType;
  std::string::basic_string[abi:ne180100]<0>(v51, "dialog.PersonHandle.formattedLabelAndType");
  v51[3] = siri::dialogengine::DialogPersonHandle::formattedLabelAndType;
  std::string::basic_string[abi:ne180100]<0>(v52, "dialog.PersonHandle.phoneNumber");
  v52[3] = siri::dialogengine::DialogPersonHandle::phoneNumber;
  std::string::basic_string[abi:ne180100]<0>(v53, "dialog.PersonHandle.emailAddress");
  v53[3] = siri::dialogengine::DialogPersonHandle::emailAddress;
  std::string::basic_string[abi:ne180100]<0>(v54, "dialog.PersonHeight.toString");
  v54[3] = siri::dialogengine::DialogPersonHeight::toString;
  std::string::basic_string[abi:ne180100]<0>(v55, "dialog.PersonHeight.abbreviated");
  v55[3] = siri::dialogengine::DialogPersonHeight::abbreviated;
  std::string::basic_string[abi:ne180100]<0>(v56, "dialog.PersonHeight.symbolic");
  v56[3] = siri::dialogengine::DialogPersonHeight::symbolic;
  std::string::basic_string[abi:ne180100]<0>(v57, "dialog.PhoneNumber.toString");
  v57[3] = siri::dialogengine::DialogPhoneNumber::toString;
  std::string::basic_string[abi:ne180100]<0>(v58, "dialog.PhoneNumber.areaCode");
  v58[3] = siri::dialogengine::DialogPhoneNumber::areaCode;
  std::string::basic_string[abi:ne180100]<0>(v59, "dialog.Location.toString");
  v59[3] = siri::dialogengine::DialogLocation::shortLocation;
  std::string::basic_string[abi:ne180100]<0>(v60, "dialog.Location.name");
  v60[3] = siri::dialogengine::DialogLocation::name;
  std::string::basic_string[abi:ne180100]<0>(v61, "dialog.Location.shortLocation");
  v61[3] = siri::dialogengine::DialogLocation::shortLocation;
  std::string::basic_string[abi:ne180100]<0>(v62, "dialog.Location.longLocation");
  v62[3] = siri::dialogengine::DialogLocation::longLocation;
  std::string::basic_string[abi:ne180100]<0>(v63, "dialog.Location.preposition");
  v63[3] = siri::dialogengine::DialogLocation::preposition;
  std::string::basic_string[abi:ne180100]<0>(v64, "dialog.Location.postposition");
  v64[3] = siri::dialogengine::DialogLocation::postposition;
  std::string::basic_string[abi:ne180100]<0>(v65, "dialog.LocationAddress.countryFromCode");
  v65[3] = siri::dialogengine::DialogLocationAddress::countryFromCode;
  std::string::basic_string[abi:ne180100]<0>(v66, "dialog.PreciseTemperature.toString");
  v66[3] = siri::dialogengine::DialogPreciseTemperature::toString;
  std::string::basic_string[abi:ne180100]<0>(v67, "dialog.PreciseTemperature.shortSpoken");
  v67[3] = siri::dialogengine::DialogPreciseTemperature::shortSpoken;
  std::string::basic_string[abi:ne180100]<0>(v68, "dialog.PreciseTemperature.mediumSpoken");
  v68[3] = siri::dialogengine::DialogPreciseTemperature::mediumSpoken;
  std::string::basic_string[abi:ne180100]<0>(v69, "dialog.PreciseTemperature.longSpoken");
  v69[3] = siri::dialogengine::DialogPreciseTemperature::longSpoken;
  std::string::basic_string[abi:ne180100]<0>(v70, "dialog.PreciseTemperature.units");
  v70[3] = siri::dialogengine::DialogPreciseTemperature::units;
  std::string::basic_string[abi:ne180100]<0>(v71, "dialog.PreciseTemperature.value");
  v71[3] = siri::dialogengine::DialogPreciseTemperature::value;
  std::string::basic_string[abi:ne180100]<0>(v72, "dialog.PreciseTemperature.oneDigit");
  v72[3] = siri::dialogengine::DialogPreciseTemperature::oneDigit;
  std::string::basic_string[abi:ne180100]<0>(v73, "dialog.PreciseTemperature.shortSpokenOneDigit");
  v73[3] = siri::dialogengine::DialogPreciseTemperature::shortSpokenOneDigit;
  std::string::basic_string[abi:ne180100]<0>(v74, "dialog.PreciseTemperature.mediumSpokenOneDigit");
  v74[3] = siri::dialogengine::DialogPreciseTemperature::mediumSpokenOneDigit;
  std::string::basic_string[abi:ne180100]<0>(v75, "dialog.PreciseTemperature.longSpokenOneDigit");
  v75[3] = siri::dialogengine::DialogPreciseTemperature::longSpokenOneDigit;
  std::string::basic_string[abi:ne180100]<0>(v76, "dialog.PreciseTemperature.valueOneDigit");
  v76[3] = siri::dialogengine::DialogPreciseTemperature::valueOneDigit;
  std::string::basic_string[abi:ne180100]<0>(v77, "dialog.PreciseTemperature.twoDigits");
  v77[3] = siri::dialogengine::DialogPreciseTemperature::twoDigits;
  std::string::basic_string[abi:ne180100]<0>(v78, "dialog.PreciseTemperature.shortSpokenTwoDigits");
  v78[3] = siri::dialogengine::DialogPreciseTemperature::shortSpokenTwoDigits;
  std::string::basic_string[abi:ne180100]<0>(v79, "dialog.PreciseTemperature.mediumSpokenTwoDigits");
  v79[3] = siri::dialogengine::DialogPreciseTemperature::mediumSpokenTwoDigits;
  std::string::basic_string[abi:ne180100]<0>(v80, "dialog.PreciseTemperature.longSpokenTwoDigits");
  v80[3] = siri::dialogengine::DialogPreciseTemperature::longSpokenTwoDigits;
  std::string::basic_string[abi:ne180100]<0>(v81, "dialog.PreciseTemperature.valueTwoDigits");
  v81[3] = siri::dialogengine::DialogPreciseTemperature::valueTwoDigits;
  std::string::basic_string[abi:ne180100]<0>(v82, "dialog.PreciseTemperature.asTemperature");
  v82[3] = siri::dialogengine::DialogPreciseTemperature::asTemperature;
  std::string::basic_string[abi:ne180100]<0>(v83, "dialog.Pronoun.toString");
  v83[3] = siri::dialogengine::DialogPronoun::toString;
  std::string::basic_string[abi:ne180100]<0>(v84, "dialog.Pronoun.gender");
  v84[3] = siri::dialogengine::DialogPronoun::gender;
  std::string::basic_string[abi:ne180100]<0>(v85, "dialog.Temperature.toString");
  v85[3] = siri::dialogengine::DialogTemperature::toString;
  std::string::basic_string[abi:ne180100]<0>(v86, "dialog.Temperature.shortSpoken");
  v86[3] = siri::dialogengine::DialogTemperature::shortSpoken;
  std::string::basic_string[abi:ne180100]<0>(v87, "dialog.Temperature.mediumSpoken");
  v87[3] = siri::dialogengine::DialogTemperature::mediumSpoken;
  std::string::basic_string[abi:ne180100]<0>(v88, "dialog.Temperature.longSpoken");
  v88[3] = siri::dialogengine::DialogTemperature::longSpoken;
  std::string::basic_string[abi:ne180100]<0>(v89, "dialog.Temperature.units");
  v89[3] = siri::dialogengine::DialogTemperature::units;
  std::string::basic_string[abi:ne180100]<0>(v90, "dialog.Temperature.value");
  v90[3] = siri::dialogengine::DialogTemperature::value;
  std::string::basic_string[abi:ne180100]<0>(v91, "dialog.Temperature.asPreciseTemperature");
  v91[3] = siri::dialogengine::DialogTemperature::asPreciseTemperature;
  std::string::basic_string[abi:ne180100]<0>(v92, "dialog.Percent.toString");
  v92[3] = siri::dialogengine::DialogPercent::toString;
  std::string::basic_string[abi:ne180100]<0>(v93, "dialog.Percent.roundToHundredths");
  v93[3] = siri::dialogengine::DialogPercent::roundToHundredths;
  std::string::basic_string[abi:ne180100]<0>(v94, "dialog.Percent.roundToTenths");
  v94[3] = siri::dialogengine::DialogPercent::roundToTenths;
  std::string::basic_string[abi:ne180100]<0>(v95, "dialog.Speed.toString");
  v95[3] = siri::dialogengine::DialogSpeed::toString;
  std::string::basic_string[abi:ne180100]<0>(v96, "dialog.Speed.compactDecimalLong");
  v96[3] = siri::dialogengine::DialogSpeed::compactDecimalLong;
  std::string::basic_string[abi:ne180100]<0>(v97, "dialog.Speed.compactDecimalShort");
  v97[3] = siri::dialogengine::DialogSpeed::compactDecimalShort;
  std::string::basic_string[abi:ne180100]<0>(v98, "dialog.Speed.units");
  v98[3] = siri::dialogengine::DialogSpeed::units;
  std::string::basic_string[abi:ne180100]<0>(v99, "dialog.Speed.value");
  v99[3] = siri::dialogengine::DialogSpeed::value;
  std::string::basic_string[abi:ne180100]<0>(v100, "dialog.State.usageCount");
  v100[3] = siri::dialogengine::DialogState::usageCount;
  std::string::basic_string[abi:ne180100]<0>(v101, "dialog.State.minsSinceLastUse");
  v101[3] = siri::dialogengine::DialogState::minsSinceLastUse;
  std::string::basic_string[abi:ne180100]<0>(v102, "dialog.State.hoursSinceLastUse");
  v102[3] = siri::dialogengine::DialogState::hoursSinceLastUse;
  std::string::basic_string[abi:ne180100]<0>(v103, "dialog.State.daysSinceLastUse");
  v103[3] = siri::dialogengine::DialogState::daysSinceLastUse;
  std::string::basic_string[abi:ne180100]<0>(v104, "dialog.State.isFirstTime");
  v104[3] = siri::dialogengine::DialogState::isFirstTime;
  std::string::basic_string[abi:ne180100]<0>(v105, "dialog.State.isSecondTime");
  v105[3] = siri::dialogengine::DialogState::isSecondTime;
  std::string::basic_string[abi:ne180100]<0>(v106, "dialog.State.isFirstTimeToday");
  v106[3] = siri::dialogengine::DialogState::isFirstTimeToday;
  std::string::basic_string[abi:ne180100]<0>(v107, "dialog.State.isUnfamiliar");
  v107[3] = siri::dialogengine::DialogState::isUnfamiliar;
  std::string::basic_string[abi:ne180100]<0>(v108, "dialog.State.isFamiliar");
  v108[3] = siri::dialogengine::DialogState::isFamiliar;
  std::string::basic_string[abi:ne180100]<0>(v109, "dialog.State.isVeryFamiliar");
  v109[3] = siri::dialogengine::DialogState::isVeryFamiliar;
  std::string::basic_string[abi:ne180100]<0>(v110, "dialog.State.familyUsageCount");
  v110[3] = siri::dialogengine::DialogState::familyUsageCount;
  std::string::basic_string[abi:ne180100]<0>(v111, "dialog.State.familyMinsSinceLastUse");
  v111[3] = siri::dialogengine::DialogState::familyMinsSinceLastUse;
  std::string::basic_string[abi:ne180100]<0>(v112, "dialog.State.familyHoursSinceLastUse");
  v112[3] = siri::dialogengine::DialogState::familyHoursSinceLastUse;
  std::string::basic_string[abi:ne180100]<0>(v113, "dialog.State.familyDaysSinceLastUse");
  v113[3] = siri::dialogengine::DialogState::familyDaysSinceLastUse;
  std::string::basic_string[abi:ne180100]<0>(v114, "dialog.State.isUnfamiliarWithFamily");
  v114[3] = siri::dialogengine::DialogState::isUnfamiliarWithFamily;
  std::string::basic_string[abi:ne180100]<0>(v115, "dialog.State.isFamiliarWithFamily");
  v115[3] = siri::dialogengine::DialogState::isFamiliarWithFamily;
  std::string::basic_string[abi:ne180100]<0>(v116, "dialog.State.isVeryFamiliarWithFamily");
  v116[3] = siri::dialogengine::DialogState::isVeryFamiliarWithFamily;
  std::string::basic_string[abi:ne180100]<0>(v117, "dialog.User.toString");
  v117[3] = siri::dialogengine::DialogUser::toString;
  std::string::basic_string[abi:ne180100]<0>(v118, "dialog.User.givenName");
  v118[3] = siri::dialogengine::DialogUser::givenName;
  std::string::basic_string[abi:ne180100]<0>(v119, "dialog.User.middleName");
  v119[3] = siri::dialogengine::DialogUser::middleName;
  std::string::basic_string[abi:ne180100]<0>(v120, "dialog.User.familyName");
  v120[3] = siri::dialogengine::DialogUser::familyName;
  std::string::basic_string[abi:ne180100]<0>(v121, "dialog.User.nickname");
  v121[3] = siri::dialogengine::DialogUser::nickname;
  std::string::basic_string[abi:ne180100]<0>(v122, "dialog.User.pronoun");
  v122[3] = siri::dialogengine::DialogUser::pronoun;
  std::string::basic_string[abi:ne180100]<0>(v123, "dialog.User.simpleName");
  v123[3] = siri::dialogengine::DialogUser::simpleName;
  std::string::basic_string[abi:ne180100]<0>(v124, "dialog.User.groundingIfNeeded");
  v124[3] = siri::dialogengine::DialogUser::groundingIfNeeded;
  std::string::basic_string[abi:ne180100]<0>(v125, "dialog.User.groundingAlwaysIfMultiUser");
  v125[3] = siri::dialogengine::DialogUser::groundingAlwaysIfMultiUser;
  std::string::basic_string[abi:ne180100]<0>(v126, "dialog.User.formatWithHandle");
  v126[3] = siri::dialogengine::DialogUser::formatWithHandle;
  std::string::basic_string[abi:ne180100]<0>(v127, "dialog.User.conversationalName");
  v127[3] = siri::dialogengine::DialogUser::conversationalName;
  std::string::basic_string[abi:ne180100]<0>(v128, "dialog.User.isUsingNickname");
  v128[3] = siri::dialogengine::DialogUser::isUsingNickname;
  std::string::basic_string[abi:ne180100]<0>(v129, "dialog.User.isUsingFirstName");
  v129[3] = siri::dialogengine::DialogUser::isUsingFirstName;
  std::string::basic_string[abi:ne180100]<0>(v130, "dialog.Duration.toString");
  v130[3] = siri::dialogengine::DialogDuration::duration;
  std::string::basic_string[abi:ne180100]<0>(v131, "dialog.Duration.years");
  v131[3] = siri::dialogengine::DialogDuration::years;
  std::string::basic_string[abi:ne180100]<0>(v132, "dialog.Duration.months");
  v132[3] = siri::dialogengine::DialogDuration::months;
  std::string::basic_string[abi:ne180100]<0>(v133, "dialog.Duration.weeks");
  v133[3] = siri::dialogengine::DialogDuration::weeks;
  std::string::basic_string[abi:ne180100]<0>(v134, "dialog.Duration.days");
  v134[3] = siri::dialogengine::DialogDuration::days;
  std::string::basic_string[abi:ne180100]<0>(v135, "dialog.Duration.hours");
  v135[3] = siri::dialogengine::DialogDuration::hours;
  std::string::basic_string[abi:ne180100]<0>(v136, "dialog.Duration.minutes");
  v136[3] = siri::dialogengine::DialogDuration::minutes;
  std::string::basic_string[abi:ne180100]<0>(v137, "dialog.Duration.seconds");
  v137[3] = siri::dialogengine::DialogDuration::seconds;
  std::string::basic_string[abi:ne180100]<0>(v138, "dialog.Duration.valueInYears");
  v138[3] = siri::dialogengine::DialogDuration::valueInYears;
  std::string::basic_string[abi:ne180100]<0>(v139, "dialog.Duration.valueInMonths");
  v139[3] = siri::dialogengine::DialogDuration::valueInMonths;
  std::string::basic_string[abi:ne180100]<0>(v140, "dialog.Duration.valueInWeeks");
  v140[3] = siri::dialogengine::DialogDuration::valueInWeeks;
  std::string::basic_string[abi:ne180100]<0>(v141, "dialog.Duration.valueInDays");
  v141[3] = siri::dialogengine::DialogDuration::valueInDays;
  std::string::basic_string[abi:ne180100]<0>(v142, "dialog.Duration.valueInHours");
  v142[3] = siri::dialogengine::DialogDuration::valueInHours;
  std::string::basic_string[abi:ne180100]<0>(v143, "dialog.Duration.valueInMinutes");
  v143[3] = siri::dialogengine::DialogDuration::valueInMinutes;
  std::string::basic_string[abi:ne180100]<0>(v144, "dialog.Duration.valueInSeconds");
  v144[3] = siri::dialogengine::DialogDuration::valueInSeconds;
  std::string::basic_string[abi:ne180100]<0>(v145, "dialog.Duration.duration");
  v145[3] = siri::dialogengine::DialogDuration::duration;
  std::string::basic_string[abi:ne180100]<0>(v146, "dialog.Duration.adjectivePeriod");
  v146[3] = siri::dialogengine::DialogDuration::adjectivePeriod;
  std::string::basic_string[abi:ne180100]<0>(v147, "dialog.Duration.adjectivePeriodDigitsBasedDisplay");
  v147[3] = siri::dialogengine::DialogDuration::adjectivePeriodDigitsBasedDisplay;
  std::string::basic_string[abi:ne180100]<0>(v148, "dialog.Duration.descriptivePeriod");
  v148[3] = siri::dialogengine::DialogDuration::descriptivePeriod;
  std::string::basic_string[abi:ne180100]<0>(v149, "dialog.Duration.descriptiveApproximateMinutesPeriod");
  v149[3] = siri::dialogengine::DialogDuration::descriptiveApproximateMinutesPeriod;
  std::string::basic_string[abi:ne180100]<0>(v150, "dialog.Duration.descriptiveFractionalUnitsPeriod");
  v150[3] = siri::dialogengine::DialogDuration::descriptiveFractionalUnitsPeriod;
  std::string::basic_string[abi:ne180100]<0>(v151, "dialog.Duration.minutesSeconds");
  v151[3] = siri::dialogengine::DialogDuration::minutesSeconds;
  std::string::basic_string[abi:ne180100]<0>(v152, "dialog.Duration.minutesSecondsDigitsBasedDisplay");
  v152[3] = siri::dialogengine::DialogDuration::minutesSecondsDigitsBasedDisplay;
  std::string::basic_string[abi:ne180100]<0>(v153, "dialog.Duration.hoursMinutes");
  v153[3] = siri::dialogengine::DialogDuration::hoursMinutes;
  std::string::basic_string[abi:ne180100]<0>(v154, "dialog.Duration.hoursMinutesAbbreviated");
  v154[3] = siri::dialogengine::DialogDuration::hoursMinutesAbbreviated;
  std::string::basic_string[abi:ne180100]<0>(v155, "dialog.Calendar.isToday");
  v155[3] = siri::dialogengine::DialogCalendar::isToday;
  std::string::basic_string[abi:ne180100]<0>(v156, "dialog.Calendar.isTomorrow");
  v156[3] = siri::dialogengine::DialogCalendar::isTomorrow;
  std::string::basic_string[abi:ne180100]<0>(v157, "dialog.Calendar.isYesterday");
  v157[3] = siri::dialogengine::DialogCalendar::isYesterday;
  std::string::basic_string[abi:ne180100]<0>(v158, "dialog.Calendar.isThisWeek");
  v158[3] = siri::dialogengine::DialogCalendar::isThisWeek;
  std::string::basic_string[abi:ne180100]<0>(v159, "dialog.Calendar.isThisMonth");
  v159[3] = siri::dialogengine::DialogCalendar::isThisMonth;
  std::string::basic_string[abi:ne180100]<0>(v160, "dialog.Calendar.isThisYear");
  v160[3] = siri::dialogengine::DialogCalendar::isThisYear;
  std::string::basic_string[abi:ne180100]<0>(v161, "dialog.Calendar.isLastWeek");
  v161[3] = siri::dialogengine::DialogCalendar::isLastWeek;
  std::string::basic_string[abi:ne180100]<0>(v162, "dialog.Calendar.isLastMonth");
  v162[3] = siri::dialogengine::DialogCalendar::isLastMonth;
  std::string::basic_string[abi:ne180100]<0>(v163, "dialog.Calendar.isLastYear");
  v163[3] = siri::dialogengine::DialogCalendar::isLastYear;
  std::string::basic_string[abi:ne180100]<0>(v164, "dialog.Calendar.isNextWeek");
  v164[3] = siri::dialogengine::DialogCalendar::isNextWeek;
  std::string::basic_string[abi:ne180100]<0>(v165, "dialog.Calendar.isNextMonth");
  v165[3] = siri::dialogengine::DialogCalendar::isNextMonth;
  std::string::basic_string[abi:ne180100]<0>(v166, "dialog.Calendar.isNextYear");
  v166[3] = siri::dialogengine::DialogCalendar::isNextYear;
  std::string::basic_string[abi:ne180100]<0>(v167, "dialog.Calendar.isSameDateAsToday");
  v167[3] = siri::dialogengine::DialogCalendar::isSameDateAsToday;
  std::string::basic_string[abi:ne180100]<0>(v168, "dialog.Calendar.isSameDateAsTomorrow");
  v168[3] = siri::dialogengine::DialogCalendar::isSameDateAsTomorrow;
  std::string::basic_string[abi:ne180100]<0>(v169, "dialog.Calendar.isSameDateAsYesterday");
  v169[3] = siri::dialogengine::DialogCalendar::isSameDateAsYesterday;
  std::string::basic_string[abi:ne180100]<0>(v170, "dialog.Calendar.isFirstDayOfWeek");
  v170[3] = siri::dialogengine::DialogCalendar::isFirstDayOfWeek;
  std::string::basic_string[abi:ne180100]<0>(v171, "dialog.Calendar.isEarlyMorning");
  v171[3] = siri::dialogengine::DialogCalendar::isEarlyMorning;
  std::string::basic_string[abi:ne180100]<0>(v172, "dialog.Calendar.isMorning");
  v172[3] = siri::dialogengine::DialogCalendar::isMorning;
  std::string::basic_string[abi:ne180100]<0>(v173, "dialog.Calendar.isNoon");
  v173[3] = siri::dialogengine::DialogCalendar::isNoon;
  std::string::basic_string[abi:ne180100]<0>(v174, "dialog.Calendar.isEarlyAfternoon");
  v174[3] = siri::dialogengine::DialogCalendar::isEarlyAfternoon;
  std::string::basic_string[abi:ne180100]<0>(v175, "dialog.Calendar.isAfternoon");
  v175[3] = siri::dialogengine::DialogCalendar::isAfternoon;
  std::string::basic_string[abi:ne180100]<0>(v176, "dialog.Calendar.isEarlyEvening");
  v176[3] = siri::dialogengine::DialogCalendar::isEarlyEvening;
  std::string::basic_string[abi:ne180100]<0>(v177, "dialog.Calendar.isEvening");
  v177[3] = siri::dialogengine::DialogCalendar::isEvening;
  std::string::basic_string[abi:ne180100]<0>(v178, "dialog.Calendar.isNight");
  v178[3] = siri::dialogengine::DialogCalendar::isNight;
  std::string::basic_string[abi:ne180100]<0>(v179, "dialog.Calendar.isLateNight");
  v179[3] = siri::dialogengine::DialogCalendar::isLateNight;
  std::string::basic_string[abi:ne180100]<0>(v180, "dialog.Calendar.isBreakfast");
  v180[3] = siri::dialogengine::DialogCalendar::isBreakfast;
  std::string::basic_string[abi:ne180100]<0>(v181, "dialog.Calendar.isBrunch");
  v181[3] = siri::dialogengine::DialogCalendar::isBrunch;
  std::string::basic_string[abi:ne180100]<0>(v182, "dialog.Calendar.isLunch");
  v182[3] = siri::dialogengine::DialogCalendar::isLunch;
  std::string::basic_string[abi:ne180100]<0>(v183, "dialog.Calendar.isDinner");
  v183[3] = siri::dialogengine::DialogCalendar::isDinner;
  std::string::basic_string[abi:ne180100]<0>(v184, "dialog.Calendar.isDayTime");
  v184[3] = siri::dialogengine::DialogCalendar::isDayTime;
  std::string::basic_string[abi:ne180100]<0>(v185, "dialog.Calendar.isBedTime");
  v185[3] = siri::dialogengine::DialogCalendar::isBedTime;
  std::string::basic_string[abi:ne180100]<0>(v186, "dialog.Calendar.isHappyHour");
  v186[3] = siri::dialogengine::DialogCalendar::isHappyHour;
  std::string::basic_string[abi:ne180100]<0>(v187, "dialog.Calendar.daysFromToday");
  v187[3] = siri::dialogengine::DialogCalendar::daysFromToday;
  std::string::basic_string[abi:ne180100]<0>(v188, "dialog.Calendar.withinNextWeek");
  v188[3] = siri::dialogengine::DialogCalendar::withinNextWeek;
  std::string::basic_string[abi:ne180100]<0>(v189, "dialog.Calendar.withinPastWeek");
  v189[3] = siri::dialogengine::DialogCalendar::withinPastWeek;
  std::string::basic_string[abi:ne180100]<0>(v190, "dialog.Calendar.dateDescriptive");
  v190[3] = siri::dialogengine::DialogCalendar::dateDescriptive;
  std::string::basic_string[abi:ne180100]<0>(v191, "dialog.Calendar.dateDescriptiveAbsolute");
  v191[3] = siri::dialogengine::DialogCalendar::dateDescriptiveAbsolute;
  std::string::basic_string[abi:ne180100]<0>(v192, "dialog.Calendar.dateDescriptiveAbsoluteWithDayOfWeek");
  v192[3] = siri::dialogengine::DialogCalendar::dateDescriptiveAbsoluteWithDayOfWeek;
  std::string::basic_string[abi:ne180100]<0>(v193, "dialog.Calendar.dateDescriptiveOmitYear");
  v193[3] = siri::dialogengine::DialogCalendar::dateDescriptiveOmitYear;
  std::string::basic_string[abi:ne180100]<0>(v194, "dialog.Calendar.dateDescriptiveWithPrefixOnOmitYear");
  v194[3] = siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixOnOmitYear;
  std::string::basic_string[abi:ne180100]<0>(v195, "dialog.Calendar.dateDescriptiveWithPrefix");
  v195[3] = siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefix;
  std::string::basic_string[abi:ne180100]<0>(v196, "dialog.Calendar.dateDescriptiveWithPrefixFor");
  v196[3] = siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixFor;
  std::string::basic_string[abi:ne180100]<0>(v197, "dialog.Calendar.dateDescriptiveWithPrefixFrom");
  v197[3] = siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixFrom;
  std::string::basic_string[abi:ne180100]<0>(v198, "dialog.Calendar.dateDescriptiveWithPrefixOn");
  v198[3] = siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixOn;
  std::string::basic_string[abi:ne180100]<0>(v199, "dialog.Calendar.dateDescriptiveWithPrefixUntil");
  v199[3] = siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixUntil;
  std::string::basic_string[abi:ne180100]<0>(v200, "dialog.Calendar.timeDescriptive");
  v200[3] = siri::dialogengine::DialogCalendar::timeDescriptive;
  std::string::basic_string[abi:ne180100]<0>(v201, "dialog.Calendar.timeDescriptiveWithPrefix");
  v201[3] = siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefix;
  std::string::basic_string[abi:ne180100]<0>(v202, "dialog.Calendar.timeDescriptiveWithPrefixFor");
  v202[3] = siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixFor;
  std::string::basic_string[abi:ne180100]<0>(v203, "dialog.Calendar.timeDescriptiveWithPrefixFrom");
  v203[3] = siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixFrom;
  std::string::basic_string[abi:ne180100]<0>(v204, "dialog.Calendar.timeDescriptiveWithPrefixOn");
  v204[3] = siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixOn;
  std::string::basic_string[abi:ne180100]<0>(v205, "dialog.Calendar.timeDescriptiveWithPrefixUntil");
  v205[3] = siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixUntil;
  std::string::basic_string[abi:ne180100]<0>(v206, "dialog.Calendar.dateTimeDescriptive");
  v206[3] = siri::dialogengine::DialogCalendar::dateTimeDescriptive;
  std::string::basic_string[abi:ne180100]<0>(v207, "dialog.Calendar.dateTimeDescriptiveWithPrefix");
  v207[3] = siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefix;
  std::string::basic_string[abi:ne180100]<0>(v208, "dialog.Calendar.dateTimeDescriptiveWithPrefixFor");
  v208[3] = siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefixFor;
  std::string::basic_string[abi:ne180100]<0>(v209, "dialog.Calendar.dateTimeDescriptiveWithPrefixFrom");
  v209[3] = siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefixFrom;
  std::string::basic_string[abi:ne180100]<0>(v210, "dialog.Calendar.dateTimeDescriptiveWithPrefixOn");
  v210[3] = siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefixOn;
  std::string::basic_string[abi:ne180100]<0>(v211, "dialog.Calendar.dateTimeDescriptiveWithPrefixUntil");
  v211[3] = siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefixUntil;
  std::string::basic_string[abi:ne180100]<0>(v212, "dialog.Calendar.nonSpecificDateTimeDescriptive");
  v212[3] = siri::dialogengine::DialogCalendar::nonSpecificDateTimeDescriptive;
  std::string::basic_string[abi:ne180100]<0>(v213, "dialog.Calendar.nonSpecificDateTimeDescriptiveWithPrefix");
  v213[3] = siri::dialogengine::DialogCalendar::nonSpecificDateTimeDescriptiveWithPrefix;
  std::string::basic_string[abi:ne180100]<0>(v214, "dialog.Calendar.nonSpecificDateTimeDescriptiveWithPrefixOn");
  v214[3] = siri::dialogengine::DialogCalendar::nonSpecificDateTimeDescriptiveWithPrefixOn;
  std::string::basic_string[abi:ne180100]<0>(v215, "dialog.Calendar.minuteOfHour");
  v215[3] = siri::dialogengine::DialogCalendar::minuteOfHour;
  std::string::basic_string[abi:ne180100]<0>(v216, "dialog.Calendar.hourOfDay");
  v216[3] = siri::dialogengine::DialogCalendar::hourOfDay;
  std::string::basic_string[abi:ne180100]<0>(v217, "dialog.Calendar.month");
  v217[3] = siri::dialogengine::DialogCalendar::month;
  std::string::basic_string[abi:ne180100]<0>(v218, "dialog.Calendar.monthName");
  v218[3] = siri::dialogengine::DialogCalendar::monthName;
  std::string::basic_string[abi:ne180100]<0>(v219, "dialog.Calendar.dayOfMonth");
  v219[3] = siri::dialogengine::DialogCalendar::dayOfMonth;
  std::string::basic_string[abi:ne180100]<0>(v220, "dialog.Calendar.dayName");
  v220[3] = siri::dialogengine::DialogCalendar::dayName;
  std::string::basic_string[abi:ne180100]<0>(v221, "dialog.Calendar.year");
  v221[3] = siri::dialogengine::DialogCalendar::year;
  std::string::basic_string[abi:ne180100]<0>(v222, "dialog.Calendar.timeZone");
  v222[3] = siri::dialogengine::DialogCalendar::timeZone;
  std::string::basic_string[abi:ne180100]<0>(v223, "dialog.Calendar.isCurrentYear");
  v223[3] = siri::dialogengine::DialogCalendar::isCurrentYear;
  std::string::basic_string[abi:ne180100]<0>(v224, "dialog.Calendar.isPast");
  v224[3] = siri::dialogengine::DialogCalendar::isPast;
  std::string::basic_string[abi:ne180100]<0>(v225, "dialog.Calendar.isFuture");
  v225[3] = siri::dialogengine::DialogCalendar::isFuture;
  std::string::basic_string[abi:ne180100]<0>(v226, "dialog.Calendar.asDateTime");
  v226[3] = siri::dialogengine::DialogCalendar::asDateTime;
  std::string::basic_string[abi:ne180100]<0>(v227, "dialog.Calendar.timeDescriptiveAbsolute");
  v227[3] = siri::dialogengine::DialogCalendar::timeDescriptiveAbsolute;
  std::string::basic_string[abi:ne180100]<0>(v228, "dialog.Calendar.timeDescriptiveAbsoluteNoMeridiem");
  v228[3] = siri::dialogengine::DialogCalendar::timeDescriptiveAbsoluteNoMeridiem;
  std::string::basic_string[abi:ne180100]<0>(v229, "dialog.TimeZone.formatShort");
  v229[3] = siri::dialogengine::DialogTimeZone::formatShort;
  std::string::basic_string[abi:ne180100]<0>(v230, "dialog.TimeZone.formatLong");
  v230[3] = siri::dialogengine::DialogTimeZone::formatLong;
  std::string::basic_string[abi:ne180100]<0>(v231, "dialog.TimeZone.formatShortGeneric");
  v231[3] = siri::dialogengine::DialogTimeZone::formatShortGeneric;
  std::string::basic_string[abi:ne180100]<0>(v232, "dialog.TimeZone.formatLongGeneric");
  v232[3] = siri::dialogengine::DialogTimeZone::formatLongGeneric;
  std::string::basic_string[abi:ne180100]<0>(v233, "dialog.CalendarRange.dateTimeRangeShort");
  v233[3] = siri::dialogengine::DialogCalendarRange::dateTimeRangeShort;
  std::string::basic_string[abi:ne180100]<0>(v234, "dialog.CalendarRange.dateTimeRangeLong");
  v234[3] = siri::dialogengine::DialogCalendarRange::dateTimeRangeLong;
  std::string::basic_string[abi:ne180100]<0>(v235, "dialog.CalendarRange.dateRangeShort");
  v235[3] = siri::dialogengine::DialogCalendarRange::dateRangeShort;
  std::string::basic_string[abi:ne180100]<0>(v236, "dialog.CalendarRange.dateRangeLong");
  v236[3] = siri::dialogengine::DialogCalendarRange::dateRangeLong;
  std::string::basic_string[abi:ne180100]<0>(v237, "dialog.CalendarRange.timeRangeShort");
  v237[3] = siri::dialogengine::DialogCalendarRange::timeRangeShort;
  std::string::basic_string[abi:ne180100]<0>(v238, "dialog.CalendarRange.timeRangeLong");
  v238[3] = siri::dialogengine::DialogCalendarRange::timeRangeLong;
  std::string::basic_string[abi:ne180100]<0>(v239, "dialog.CalendarRange.dateTimeRangeFromTo");
  v239[3] = siri::dialogengine::DialogCalendarRange::dateTimeRangeFromTo;
  std::string::basic_string[abi:ne180100]<0>(v240, "dialog.CalendarRange.dateRangeFromTo");
  v240[3] = siri::dialogengine::DialogCalendarRange::dateRangeFromTo;
  std::string::basic_string[abi:ne180100]<0>(v241, "dialog.CalendarRange.timeRangeFromTo");
  v241[3] = siri::dialogengine::DialogCalendarRange::timeRangeFromTo;
  std::string::basic_string[abi:ne180100]<0>(v242, "dialog.CalendarRange.nonSpecificDateTimeRange");
  v242[3] = siri::dialogengine::DialogCalendarRange::nonSpecificDateTimeRange;
  std::string::basic_string[abi:ne180100]<0>(v243, "dialog.CalendarRange.start");
  v243[3] = siri::dialogengine::DialogCalendarRange::start;
  std::string::basic_string[abi:ne180100]<0>(v244, "dialog.CalendarRange.end");
  v244[3] = siri::dialogengine::DialogCalendarRange::end;
  std::string::basic_string[abi:ne180100]<0>(v245, "dialog.CalendarRange.isRangeSameDay");
  v245[3] = siri::dialogengine::DialogCalendarRange::isRangeSameDay;
  std::string::basic_string[abi:ne180100]<0>(v246, "dialog.CalendarRange.isRangeInThisYear");
  v246[3] = siri::dialogengine::DialogCalendarRange::isRangeInThisYear;
  std::string::basic_string[abi:ne180100]<0>(v247, "dialog.CalendarRange.isRangeWholeDay");
  v247[3] = siri::dialogengine::DialogCalendarRange::isRangeWholeDay;
  std::string::basic_string[abi:ne180100]<0>(v248, "dialog.CalendarRange.isStartFromBeginningOfDay");
  v248[3] = siri::dialogengine::DialogCalendarRange::isStartFromBeginningOfDay;
  std::string::basic_string[abi:ne180100]<0>(v249, "dialog.CalendarRange.isEndUntilEndOfDay");
  v249[3] = siri::dialogengine::DialogCalendarRange::isEndUntilEndOfDay;
  std::string::basic_string[abi:ne180100]<0>(v250, "dialog.CalendarRange.dateRangeAbbreviated");
  v250[3] = siri::dialogengine::DialogCalendarRange::dateRangeAbbreviated;
  std::string::basic_string[abi:ne180100]<0>(v251, "dialog.Currency.toString");
  v251[3] = siri::dialogengine::DialogCurrency::toString;
  std::string::basic_string[abi:ne180100]<0>(v252, "dialog.Currency.compactDecimalLong");
  v252[3] = siri::dialogengine::DialogCurrency::compactDecimalLong;
  std::string::basic_string[abi:ne180100]<0>(v253, "dialog.Currency.compactDecimalShort");
  v253[3] = siri::dialogengine::DialogCurrency::compactDecimalShort;
  std::string::basic_string[abi:ne180100]<0>(v254, "dialog.Currency.symbol");
  v254[3] = siri::dialogengine::DialogCurrency::symbol;
  std::string::basic_string[abi:ne180100]<0>(v255, "dialog.Currency.unitName");
  v255[3] = siri::dialogengine::DialogCurrency::unitName;
  std::string::basic_string[abi:ne180100]<0>(v256, "dialog.Currency.subunitName");
  v256[3] = siri::dialogengine::DialogCurrency::subunitName;
  std::string::basic_string[abi:ne180100]<0>(v257, "dialog.Currency.unitValue");
  v257[3] = siri::dialogengine::DialogCurrency::unitValue;
  std::string::basic_string[abi:ne180100]<0>(v258, "dialog.Currency.subunitValue");
  v258[3] = siri::dialogengine::DialogCurrency::subunitValue;
  std::string::basic_string[abi:ne180100]<0>(v259, "dialog.Holiday.name");
  v259[3] = siri::dialogengine::DialogHoliday::name;
  std::string::basic_string[abi:ne180100]<0>(v260, "dialog.Holiday.nameWithDefiniteArticle");
  v260[3] = siri::dialogengine::DialogHoliday::nameWithDefiniteArticle;
  std::string::basic_string[abi:ne180100]<0>(v261, "dialog.Holiday.nameWithPrefix");
  v261[3] = siri::dialogengine::DialogHoliday::nameWithPrefix;
  std::string::basic_string[abi:ne180100]<0>(v262, "dialog.Holiday.toString");
  v262[3] = siri::dialogengine::DialogHoliday::toString;
  std::string::basic_string[abi:ne180100]<0>(v263, "dialog.Holiday.date");
  v263[3] = siri::dialogengine::DialogHoliday::date;
  std::string::basic_string[abi:ne180100]<0>(v264, "dialog.Holiday.emotion");
  v264[3] = siri::dialogengine::DialogHoliday::emotion;
  std::string::basic_string[abi:ne180100]<0>(v265, "dialog.Weight.toString");
  v265[3] = siri::dialogengine::DialogWeight::toString;
  std::string::basic_string[abi:ne180100]<0>(v266, "dialog.Weight.abbreviated");
  v266[3] = siri::dialogengine::DialogWeight::abbreviated;
  std::string::basic_string[abi:ne180100]<0>(v267, "dialog.Weight.approximate");
  v267[3] = siri::dialogengine::DialogWeight::approximate;
  std::string::basic_string[abi:ne180100]<0>(v268, "dialog.Weight.compactDecimalLong");
  v268[3] = siri::dialogengine::DialogWeight::compactDecimalLong;
  std::string::basic_string[abi:ne180100]<0>(v269, "dialog.Weight.compactDecimalShort");
  v269[3] = siri::dialogengine::DialogWeight::compactDecimalShort;
  std::string::basic_string[abi:ne180100]<0>(v270, "dialog.Weight.units");
  v270[3] = siri::dialogengine::DialogWeight::units;
  std::string::basic_string[abi:ne180100]<0>(v271, "dialog.Weight.value");
  v271[3] = siri::dialogengine::DialogWeight::value;
  std::string::basic_string[abi:ne180100]<0>(v272, "dialog.DateTime.toString");
  v272[3] = siri::dialogengine::DialogDateTime::toString;
  std::string::basic_string[abi:ne180100]<0>(v273, "dialog.DateTime.year");
  v273[3] = siri::dialogengine::DialogDateTime::year;
  std::string::basic_string[abi:ne180100]<0>(v274, "dialog.DateTime.month");
  v274[3] = siri::dialogengine::DialogDateTime::month;
  std::string::basic_string[abi:ne180100]<0>(v275, "dialog.DateTime.day");
  v275[3] = siri::dialogengine::DialogDateTime::day;
  std::string::basic_string[abi:ne180100]<0>(v276, "dialog.DateTime.yearString");
  v276[3] = siri::dialogengine::DialogDateTime::yearString;
  std::string::basic_string[abi:ne180100]<0>(v277, "dialog.DateTime.monthName");
  v277[3] = siri::dialogengine::DialogDateTime::monthName;
  std::string::basic_string[abi:ne180100]<0>(v278, "dialog.DateTime.dayName");
  v278[3] = siri::dialogengine::DialogDateTime::dayName;
  std::string::basic_string[abi:ne180100]<0>(v279, "dialog.DateTime.asCalendar");
  v279[3] = siri::dialogengine::DialogDateTime::asCalendar;
  std::string::basic_string[abi:ne180100]<0>(v280, "dialog.DateTime.timeZone");
  v280[3] = siri::dialogengine::DialogDateTime::timeZone;
  std::string::basic_string[abi:ne180100]<0>(v281, "dialog.Pressure.toString");
  v281[3] = siri::dialogengine::DialogPressure::toString;
  std::string::basic_string[abi:ne180100]<0>(v282, "dialog.Pressure.approximate");
  v282[3] = siri::dialogengine::DialogPressure::approximate;
  std::string::basic_string[abi:ne180100]<0>(v283, "dialog.Pressure.compactDecimalLong");
  v283[3] = siri::dialogengine::DialogPressure::compactDecimalLong;
  std::string::basic_string[abi:ne180100]<0>(v284, "dialog.Pressure.compactDecimalShort");
  v284[3] = siri::dialogengine::DialogPressure::compactDecimalShort;
  std::string::basic_string[abi:ne180100]<0>(v285, "dialog.Pressure.units");
  v285[3] = siri::dialogengine::DialogPressure::units;
  std::string::basic_string[abi:ne180100]<0>(v286, "dialog.Pressure.value");
  v286[3] = siri::dialogengine::DialogPressure::value;
  std::string::basic_string[abi:ne180100]<0>(v287, "sirikit.App.toString");
  v287[3] = siri::dialogengine::SiriKitApp::toString;
  std::string::basic_string[abi:ne180100]<0>(v288, "sirikit.App.isDesignedByApple");
  v288[3] = siri::dialogengine::SiriKitApp::isDesignedByApple;
  std::string::basic_string[abi:ne180100]<0>(v289, "sirikit.DeviceState.isDialogDriven");
  v289[3] = siri::dialogengine::SiriKitDeviceState::isDialogDriven;
  std::string::basic_string[abi:ne180100]<0>(v290, "sirikit.DeviceState.isDisplayDriven");
  v290[3] = siri::dialogengine::SiriKitDeviceState::isDisplayDriven;
  std::string::basic_string[abi:ne180100]<0>(v291, "sirikit.DeviceState.isMultiUser");
  v291[3] = siri::dialogengine::SiriKitDeviceState::isMultiUser;
  std::string::basic_string[abi:ne180100]<0>(v292, "sirikit.DeviceState.isVoiceGenderMale");
  v292[3] = siri::dialogengine::SiriKitDeviceState::isVoiceGenderMale;
  std::string::basic_string[abi:ne180100]<0>(v293, "sirikit.DeviceState.isVoiceGenderFemale");
  v293[3] = siri::dialogengine::SiriKitDeviceState::isVoiceGenderFemale;
  std::string::basic_string[abi:ne180100]<0>(v294, "sirikit.DeviceState.isVoiceGenderNeutral");
  v294[3] = siri::dialogengine::SiriKitDeviceState::isVoiceGenderUnknown;
  std::string::basic_string[abi:ne180100]<0>(v295, "sirikit.DeviceState.isVoiceGenderUnknown");
  v295[3] = siri::dialogengine::SiriKitDeviceState::isVoiceGenderUnknown;
  std::string::basic_string[abi:ne180100]<0>(v296, "sirikit.DeviceState.pronoun");
  v2 = 0;
  v3 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  v4 = (uint64_t **)(v1 + 8);
  v296[3] = siri::dialogengine::SiriKitDeviceState::pronoun;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v1 + 8;
  while (1)
  {
    v5 = (const std::string::value_type **)&v17[4 * v3];
    if (*(uint64_t ***)v1 == v4)
    {
      v7 = (uint64_t *)(v1 + 8);
    }
    else
    {
      v6 = v1 + 8;
      if (v2)
      {
        do
        {
          v7 = v2;
          v2 = (uint64_t *)v2[1];
        }
        while (v2);
      }
      else
      {
        do
        {
          v7 = *(uint64_t **)(v6 + 16);
          v8 = *v7 == v6;
          v6 = (uint64_t)v7;
        }
        while (v8);
      }
      v9 = std::less<std::string>::operator()[abi:ne180100](v1 + 16, (const void **)v7 + 4, (const void **)&v17[4 * v3]);
      v2 = *v4;
      if (!v9)
      {
        v10 = (uint64_t *)(v1 + 8);
        v11 = (uint64_t **)(v1 + 8);
        if (v2)
        {
          v11 = (uint64_t **)(v1 + 8);
          while (1)
          {
            while (1)
            {
              v10 = v2;
              v12 = (const void **)(v2 + 4);
              if (!std::less<std::string>::operator()[abi:ne180100](v1 + 16, (const void **)&v17[4 * v3], (const void **)v2 + 4))break;
              v2 = (uint64_t *)*v10;
              v11 = (uint64_t **)v10;
              if (!*v10)
                goto LABEL_20;
            }
            if (!std::less<std::string>::operator()[abi:ne180100](v1 + 16, v12, (const void **)&v17[4 * v3]))
              break;
            v11 = (uint64_t **)(v10 + 1);
            v2 = (uint64_t *)v10[1];
            if (!v2)
              goto LABEL_20;
          }
LABEL_19:
          if (*v11)
            goto LABEL_26;
          goto LABEL_20;
        }
        goto LABEL_20;
      }
    }
    v10 = (uint64_t *)(v1 + 8);
    v11 = (uint64_t **)(v1 + 8);
    if (v2)
    {
      v11 = (uint64_t **)(v7 + 1);
      v10 = v7;
      goto LABEL_19;
    }
LABEL_20:
    v13 = (uint64_t *)operator new(0x40uLL);
    v14 = (std::string *)(v13 + 4);
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v5, (std::string::size_type)v5[1]);
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v13[6] = (uint64_t)v5[2];
    }
    v13[7] = v17[4 * v3 + 3];
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v10;
    *v11 = v13;
    v15 = **(_QWORD **)v1;
    if (v15)
    {
      *(_QWORD *)v1 = v15;
      v13 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v4, v13);
    ++*(_QWORD *)(v1 + 16);
LABEL_26:
    if (++v3 == 280)
      break;
    v2 = *v4;
  }
  v16 = 0;
  siri::dialogengine::ConceptCallbacks::mCallbacks = v1;
  do
  {
    if (SHIBYTE(v296[v16 + 2]) < 0)
      operator delete((void *)v296[v16]);
    v16 -= 4;
  }
  while (v16 != -1120);
}

void sub_1BFABDDFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ConceptCallbacks::InvokePrimitiveMethod(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int8 v10;
  unint64_t v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t *v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  _QWORD *v29;
  std::string v30;
  std::string v31;
  void *__p[2];
  std::string::size_type v33;

  if ((v10 & 1) == 0
  {
    v29 = (_QWORD *)operator new();
    *v29 = 0;
    siri::dialogengine::ConceptCallbacks::InvokePrimitiveMethod(siri::dialogengine::Context *,std::string const&,std::string const&,std::shared_ptr<siri::dialogengine::Variable>)::flag = (uint64_t)v29;
  }
  v11 = atomic_load((unint64_t *)siri::dialogengine::ConceptCallbacks::InvokePrimitiveMethod(siri::dialogengine::Context *,std::string const&,std::string const&,std::shared_ptr<siri::dialogengine::Variable>)::flag);
  if (v11 != -1)
  {
    __p[0] = siri::dialogengine::ConceptCallbacks::RegisterPrimitiveMethods;
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::ConceptCallbacks::InvokePrimitiveMethod(siri::dialogengine::Context *,std::string const&,std::string const&,std::shared_ptr<siri::dialogengine::Variable>)::flag, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  if (*((char *)a2 + 23) >= 0)
    v12 = *((unsigned __int8 *)a2 + 23);
  else
    v12 = (size_t)a2[1];
  v13 = &v31;
  std::string::basic_string[abi:ne180100]((uint64_t)&v31, v12 + 1);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if (v12)
  {
    if (*((char *)a2 + 23) >= 0)
      v14 = a2;
    else
      v14 = *a2;
    memmove(v13, v14, v12);
  }
  *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 46;
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a3;
  else
    v16 = *(const std::string::value_type **)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  v18 = std::string::append(&v31, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v33 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  v20 = siri::dialogengine::ConceptCallbacks::mPrimitiveMethods + 8;
  v21 = *(_QWORD *)(siri::dialogengine::ConceptCallbacks::mPrimitiveMethods + 8);
  if (!v21)
    goto LABEL_29;
  v22 = siri::dialogengine::ConceptCallbacks::mPrimitiveMethods + 16;
  v23 = siri::dialogengine::ConceptCallbacks::mPrimitiveMethods + 8;
  do
  {
    v24 = std::less<std::string>::operator()[abi:ne180100](v22, (const void **)(v21 + 32), (const void **)__p);
    v25 = (uint64_t *)(v21 + 8);
    if (!v24)
    {
      v25 = (uint64_t *)v21;
      v23 = v21;
    }
    v21 = *v25;
  }
  while (*v25);
  if (v23 == v20
    || std::less<std::string>::operator()[abi:ne180100](v22, (const void **)__p, (const void **)(v23 + 32)))
  {
LABEL_29:
    v23 = v20;
  }
  if (siri::dialogengine::ConceptCallbacks::mPrimitiveMethods + 8 == v23
    || (v26 = (*(uint64_t (**)(uint64_t, _QWORD))(v23 + 56))(a1, *a4)) == 0)
  {
    std::operator+<char>();
    v27 = std::string::append(&v30, "'");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v31, 3u);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    *a5 = 0;
    a5[1] = 0;
  }
  else
  {
    std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::Variable,void>(a5, v26);
  }
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
}

void sub_1BFABE128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::ConceptCallbacks::RegisterPrimitiveMethods(siri::dialogengine::ConceptCallbacks *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t **v4;
  const std::string::value_type **v5;
  uint64_t v6;
  uint64_t *v7;
  BOOL v8;
  _BOOL4 v9;
  uint64_t *v10;
  uint64_t **v11;
  const void **v12;
  uint64_t *v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  _QWORD v18[4];
  _QWORD v19[4];
  _QWORD v20[4];
  _QWORD v21[4];
  _QWORD v22[4];
  _QWORD v23[4];
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[4];
  _QWORD v29[4];
  _QWORD v30[4];
  _QWORD v31[4];
  _QWORD v32[4];
  _QWORD v33[4];
  _QWORD v34[4];
  _QWORD v35[4];
  _QWORD v36[4];
  _QWORD v37[4];
  _QWORD v38[4];
  _QWORD v39[4];
  _QWORD v40[4];
  _QWORD v41[4];
  _QWORD v42[4];
  _QWORD v43[4];
  _QWORD v44[4];
  _QWORD v45[4];
  _QWORD v46[4];
  _QWORD v47[4];
  _QWORD v48[4];
  _QWORD v49[4];
  _QWORD v50[4];
  _QWORD v51[4];
  _QWORD v52[5];

  v52[4] = *MEMORY[0x1E0C80C00];
  v1 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v17, "dialog.Array.gender");
  v17[3] = siri::dialogengine::DialogArray::gender;
  std::string::basic_string[abi:ne180100]<0>(v18, "dialog.Array.length");
  v18[3] = siri::dialogengine::DialogArray::length;
  std::string::basic_string[abi:ne180100]<0>(v19, "dialog.Number.absoluteValue");
  v19[3] = siri::dialogengine::DialogNumber::absoluteValue;
  std::string::basic_string[abi:ne180100]<0>(v20, "dialog.Number.asDigits");
  v20[3] = siri::dialogengine::DialogNumber::asDigits;
  std::string::basic_string[abi:ne180100]<0>(v21, "dialog.Number.asOrdinalDigits");
  v21[3] = siri::dialogengine::DialogNumber::asOrdinalDigits;
  std::string::basic_string[abi:ne180100]<0>(v22, "dialog.Number.asSpokenWords");
  v22[3] = siri::dialogengine::DialogNumber::asSpokenWords;
  std::string::basic_string[abi:ne180100]<0>(v23, "dialog.Number.asWords");
  v23[3] = siri::dialogengine::DialogNumber::asWords;
  std::string::basic_string[abi:ne180100]<0>(v24, "dialog.Number.compactDecimalLong");
  v24[3] = siri::dialogengine::DialogNumber::compactDecimalLong;
  std::string::basic_string[abi:ne180100]<0>(v25, "dialog.Number.compactDecimalShort");
  v25[3] = siri::dialogengine::DialogNumber::compactDecimalShort;
  std::string::basic_string[abi:ne180100]<0>(v26, "dialog.Number.hasFraction");
  v26[3] = siri::dialogengine::DialogNumber::hasFraction;
  std::string::basic_string[abi:ne180100]<0>(v27, "dialog.Number.round");
  v27[3] = siri::dialogengine::DialogNumber::round;
  std::string::basic_string[abi:ne180100]<0>(v28, "dialog.Number.roundDown");
  v28[3] = siri::dialogengine::DialogNumber::roundDown;
  std::string::basic_string[abi:ne180100]<0>(v29, "dialog.Number.roundToHundredths");
  v29[3] = siri::dialogengine::DialogNumber::roundToHundredths;
  std::string::basic_string[abi:ne180100]<0>(v30, "dialog.Number.roundToTenths");
  v30[3] = siri::dialogengine::DialogNumber::roundToTenths;
  std::string::basic_string[abi:ne180100]<0>(v31, "dialog.Number.roundUp");
  v31[3] = siri::dialogengine::DialogNumber::roundUp;
  std::string::basic_string[abi:ne180100]<0>(v32, "dialog.String.uppercase");
  v32[3] = siri::dialogengine::DialogString::uppercase;
  std::string::basic_string[abi:ne180100]<0>(v33, "dialog.String.lowercase");
  v33[3] = siri::dialogengine::DialogString::lowercase;
  std::string::basic_string[abi:ne180100]<0>(v34, "dialog.String.capitalize");
  v34[3] = siri::dialogengine::DialogString::capitalize;
  std::string::basic_string[abi:ne180100]<0>(v35, "dialog.String.upperFirst");
  v35[3] = siri::dialogengine::DialogString::upperFirst;
  std::string::basic_string[abi:ne180100]<0>(v36, "dialog.String.lowerFirst");
  v36[3] = siri::dialogengine::DialogString::lowerFirst;
  std::string::basic_string[abi:ne180100]<0>(v37, "dialog.String.capitalizeFirst");
  v37[3] = siri::dialogengine::DialogString::upperFirst;
  std::string::basic_string[abi:ne180100]<0>(v38, "dialog.String.startsWithCapital");
  v38[3] = siri::dialogengine::DialogString::startsWithCapital;
  std::string::basic_string[abi:ne180100]<0>(v39, "dialog.String.length");
  v39[3] = siri::dialogengine::DialogString::length;
  std::string::basic_string[abi:ne180100]<0>(v40, "dialog.String.unicodeLength");
  v40[3] = siri::dialogengine::DialogString::length;
  std::string::basic_string[abi:ne180100]<0>(v41, "dialog.String.byteLength");
  v41[3] = siri::dialogengine::DialogString::byteLength;
  std::string::basic_string[abi:ne180100]<0>(v42, "dialog.String.print");
  v42[3] = siri::dialogengine::DialogString::print;
  std::string::basic_string[abi:ne180100]<0>(v43, "dialog.String.speak");
  v43[3] = siri::dialogengine::DialogString::speak;
  std::string::basic_string[abi:ne180100]<0>(v44, "dialog.String.count");
  v44[3] = siri::dialogengine::DialogString::count;
  std::string::basic_string[abi:ne180100]<0>(v45, "dialog.String.number");
  v45[3] = siri::dialogengine::DialogString::count;
  std::string::basic_string[abi:ne180100]<0>(v46, "dialog.String.gender");
  v46[3] = siri::dialogengine::DialogString::gender;
  std::string::basic_string[abi:ne180100]<0>(v47, "dialog.String.animacy");
  v47[3] = siri::dialogengine::DialogString::animacy;
  std::string::basic_string[abi:ne180100]<0>(v48, "dialog.String.case");
  v48[3] = siri::dialogengine::DialogString::case_;
  std::string::basic_string[abi:ne180100]<0>(v49, "dialog.String.definiteness");
  v49[3] = siri::dialogengine::DialogString::definiteness;
  std::string::basic_string[abi:ne180100]<0>(v50, "dialog.String.pos");
  v50[3] = siri::dialogengine::DialogString::pos;
  std::string::basic_string[abi:ne180100]<0>(v51, "dialog.String.defArticle");
  v51[3] = siri::dialogengine::DialogString::defArticle;
  std::string::basic_string[abi:ne180100]<0>(v52, "dialog.String.indefArticle");
  v2 = 0;
  v3 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  v4 = (uint64_t **)(v1 + 8);
  v52[3] = siri::dialogengine::DialogString::indefArticle;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v1 + 8;
  while (1)
  {
    v5 = (const std::string::value_type **)&v17[4 * v3];
    if (*(uint64_t ***)v1 == v4)
    {
      v7 = (uint64_t *)(v1 + 8);
    }
    else
    {
      v6 = v1 + 8;
      if (v2)
      {
        do
        {
          v7 = v2;
          v2 = (uint64_t *)v2[1];
        }
        while (v2);
      }
      else
      {
        do
        {
          v7 = *(uint64_t **)(v6 + 16);
          v8 = *v7 == v6;
          v6 = (uint64_t)v7;
        }
        while (v8);
      }
      v9 = std::less<std::string>::operator()[abi:ne180100](v1 + 16, (const void **)v7 + 4, (const void **)&v17[4 * v3]);
      v2 = *v4;
      if (!v9)
      {
        v10 = (uint64_t *)(v1 + 8);
        v11 = (uint64_t **)(v1 + 8);
        if (v2)
        {
          v11 = (uint64_t **)(v1 + 8);
          while (1)
          {
            while (1)
            {
              v10 = v2;
              v12 = (const void **)(v2 + 4);
              if (!std::less<std::string>::operator()[abi:ne180100](v1 + 16, (const void **)&v17[4 * v3], (const void **)v2 + 4))break;
              v2 = (uint64_t *)*v10;
              v11 = (uint64_t **)v10;
              if (!*v10)
                goto LABEL_20;
            }
            if (!std::less<std::string>::operator()[abi:ne180100](v1 + 16, v12, (const void **)&v17[4 * v3]))
              break;
            v11 = (uint64_t **)(v10 + 1);
            v2 = (uint64_t *)v10[1];
            if (!v2)
              goto LABEL_20;
          }
LABEL_19:
          if (*v11)
            goto LABEL_26;
          goto LABEL_20;
        }
        goto LABEL_20;
      }
    }
    v10 = (uint64_t *)(v1 + 8);
    v11 = (uint64_t **)(v1 + 8);
    if (v2)
    {
      v11 = (uint64_t **)(v7 + 1);
      v10 = v7;
      goto LABEL_19;
    }
LABEL_20:
    v13 = (uint64_t *)operator new(0x40uLL);
    v14 = (std::string *)(v13 + 4);
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v5, (std::string::size_type)v5[1]);
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v13[6] = (uint64_t)v5[2];
    }
    v13[7] = v17[4 * v3 + 3];
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v10;
    *v11 = v13;
    v15 = **(_QWORD **)v1;
    if (v15)
    {
      *(_QWORD *)v1 = v15;
      v13 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v4, v13);
    ++*(_QWORD *)(v1 + 16);
LABEL_26:
    if (++v3 == 36)
      break;
    v2 = *v4;
  }
  siri::dialogengine::ConceptCallbacks::mPrimitiveMethods = v1;
  v16 = 144;
  do
  {
    if (*((char *)&v17[v16 - 1] - 1) < 0)
      operator delete((void *)v17[v16 - 4]);
    v16 -= 4;
  }
  while (v16 * 8);
}

void sub_1BFABE880(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::FormatLength(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  void *RequiredNumberParameter;
  void *v7;
  long double v8;
  char *OptionalStringParameter;
  char *v10;
  std::string *v11;
  void *v12;
  const char *v13;
  unsigned int data;
  siri::dialogengine *v15;
  double v16;
  double v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *size;
  int v25;
  std::string::size_type v26;
  std::string *p_p;
  std::string *v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  const void **v41[3];
  void *v42[2];
  char v43;
  std::string v44;
  char v45;
  double v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50[2];
  void *v51[2];
  __int128 v52;
  void *v53[2];
  void *v54[2];
  __int128 v55;
  std::string v56;
  std::string __p;
  std::string v58;
  void *v59;
  void *v60[2];
  uint64_t v61;
  char v62;
  std::string v63;
  std::string v64;
  std::string v65;
  __int128 v66;
  uint64_t v67[3];
  __int128 v68;
  uint64_t v69[3];
  __int128 v70;
  uint64_t v71[3];
  __int128 v72;
  uint64_t v73[3];
  __int128 v74;
  uint64_t v75[3];
  __int128 v76;
  uint64_t v77[3];
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  v7 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_3:
      v8 = *((double *)v7 + 9);
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      v10 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v10)
        {
LABEL_5:
          if (v10[95] < 0)
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
          else
            __p = *(std::string *)(v10 + 3);
LABEL_15:
          data = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Length>((uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v55 = 0u;
          memset(&v56, 0, sizeof(v56));
          *(_OWORD *)v53 = 0u;
          *(_OWORD *)v54 = 0u;
          *(_OWORD *)v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          *(_OWORD *)v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          if (data == -1)
          {
            if (v10)
            {
              if (*(char *)(a2 + 31) < 0)
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
              else
                __p = *(std::string *)(a2 + 8);
              v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              v26 = __p.__r_.__value_.__r.__words[0];
              if (v10[95] < 0)
                std::string::__init_copy_ctor_external(&v44, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
              else
                v44 = *(std::string *)(v10 + 3);
              p_p = &__p;
              if (v25 < 0)
                p_p = (std::string *)v26;
              v28 = &v44;
              if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v28 = (std::string *)v44.__r_.__value_.__r.__words[0];
              siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Unrecognized 'units' input for variable '%s' of type 'dialog.Length': %s", v13, p_p, v28);
              if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v44.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::to_string(&__p, v8);
            siri::dialogengine::SpeakableString::SetString((uint64_t)&v47, (uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              size = (void *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_73;
            }
          }
          else
          {
            siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Length>(v8, (uint64_t)a1, a2, (uint64_t)&v44);
            if (LODWORD(v44.__r_.__value_.__l.__data_) != -2)
            {
              v8 = v46;
              data = v44.__r_.__value_.__l.__data_;
            }
            if (v8 == 0.0)
              v15 = 0;
            else
              v15 = (siri::dialogengine *)(fmod(v8, 1000000.0) == 0.0);
            v16 = round(v8);
            v17 = fmod(v8, 1.0);
            if (fabs(v16) >= 1000.0)
              v18 = a3;
            else
              v18 = a3 & 0xFFFFFFF3;
            if (data > 0xA)
              v19 = "unit#unknownLengthValue";
            else
              v19 = off_1E7933A70[data];
            std::string::basic_string[abi:ne180100]<0>(v42, v19);
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v18 & 0x11) != 0), (uint64_t *)&v40);
            std::string::basic_string[abi:ne180100]<0>(&__p, "abbreviated");
            *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
            v40 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v18 >> 1) & 1), (uint64_t *)&v39);
            std::string::basic_string[abi:ne180100]<0>(&v58.__r_.__value_.__r.__words[2], "approximate");
            *(_OWORD *)v60 = v39;
            v39 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v18 >> 2) & 1), (uint64_t *)&v38);
            std::string::basic_string[abi:ne180100]<0>(&v61, "compactDecimalLong");
            *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = v38;
            v38 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v18 >> 3) & 1), (uint64_t *)&v37);
            std::string::basic_string[abi:ne180100]<0>(&v64, "compactDecimalShort");
            *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v37;
            v37 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal(v15, (uint64_t *)&v36);
            std::string::basic_string[abi:ne180100]<0>(&v65.__r_.__value_.__r.__words[2], "numberIsMultipleOfMillion");
            v66 = v36;
            v36 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v8, (uint64_t *)&v35);
            std::string::basic_string[abi:ne180100]<0>(v67, "number");
            v68 = v35;
            v35 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v16, (uint64_t *)&v34);
            std::string::basic_string[abi:ne180100]<0>(v69, "numberRounded");
            v70 = v34;
            v34 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v33);
            std::string::basic_string[abi:ne180100]<0>(v71, "primaryContent");
            v72 = v33;
            v33 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v17 * 100.0, (uint64_t *)&v32);
            std::string::basic_string[abi:ne180100]<0>(v73, "remainders");
            v74 = v32;
            v32 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v18 >> 4) & 1), (uint64_t *)&v31);
            std::string::basic_string[abi:ne180100]<0>(v75, "symbolic");
            v76 = v31;
            v31 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v8 - v17, (uint64_t *)&v30);
            std::string::basic_string[abi:ne180100]<0>(v77, "wholeUnits");
            v78 = v30;
            v30 = 0uLL;
            std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v41, (const void **)&__p.__r_.__value_.__l.__data_, 11);
            v20 = 55;
            do
            {
              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v56.__r_.__value_.__r.__words[v20 + 2]);
              if (SHIBYTE(v56.__r_.__value_.__r.__words[v20 + 1]) < 0)
                operator delete(*(void **)((char *)&v55 + v20 * 8 + 8));
              v20 -= 5;
            }
            while (v20 * 8);
            v21 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
            if (*((_QWORD *)&v40 + 1))
            {
              v22 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
            siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)v42, v41, (uint64_t)&__p);
            std::string::operator=((std::string *)&v47, &__p);
            std::string::operator=((std::string *)((char *)&v48 + 8), &v58);
            std::string::operator=((std::string *)v50, (const std::string *)&v59);
            std::string::operator=((std::string *)&v51[1], (const std::string *)&v60[1]);
            std::string::operator=((std::string *)v53, &v63);
            std::string::operator=((std::string *)&v54[1], &v64);
            std::string::operator=(&v56, &v65);
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v64.__r_.__value_.__l.__data_);
            if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v63.__r_.__value_.__l.__data_);
            if (v62 < 0)
              operator delete(v60[1]);
            if (SHIBYTE(v60[0]) < 0)
              operator delete(v59);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v58.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v41[1]);
            if (v43 < 0)
              operator delete(v42[0]);
            if (v45 < 0)
            {
              size = (void *)v44.__r_.__value_.__l.__size_;
LABEL_73:
              operator delete(size);
            }
          }
          v11 = (std::string *)operator new();
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::VariableString::VariableString(v11, &__p, (const siri::dialogengine::SpeakableString *)&v47);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v56.__r_.__value_.__l.__data_);
          if (SHIBYTE(v55) < 0)
            operator delete(v54[1]);
          if (SHIBYTE(v54[0]) < 0)
            operator delete(v53[0]);
          if (SHIBYTE(v52) < 0)
            operator delete(v51[1]);
          if (SHIBYTE(v51[0]) < 0)
            operator delete(v50[0]);
          if (SHIBYTE(v49) < 0)
            operator delete(*((void **)&v48 + 1));
          if (SBYTE7(v48) < 0)
          {
            v12 = (void *)v47;
            goto LABEL_90;
          }
          return v11;
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      goto LABEL_15;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v11 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v47, "");
  siri::dialogengine::VariableString::VariableString((uint64_t)v11, &__p, (uint64_t)&v47);
  if (SBYTE7(v48) < 0)
    operator delete((void *)v47);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_90:
    operator delete(v12);
  }
  return v11;
}

void sub_1BFABF0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a45);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogLength::toString(siri::dialogengine::DialogLength *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatLength(this, (uint64_t)a2, 0);
}

std::string *siri::dialogengine::DialogLength::abbreviated(siri::dialogengine::DialogLength *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatLength(this, (uint64_t)a2, 1u);
}

std::string *siri::dialogengine::DialogLength::approximate(siri::dialogengine::DialogLength *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatLength(this, (uint64_t)a2, 2u);
}

std::string *siri::dialogengine::DialogLength::compactDecimalLong(siri::dialogengine::DialogLength *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatLength(this, (uint64_t)a2, 4u);
}

std::string *siri::dialogengine::DialogLength::compactDecimalShort(siri::dialogengine::DialogLength *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatLength(this, (uint64_t)a2, 8u);
}

std::string *siri::dialogengine::DialogLength::symbolic(siri::dialogengine::DialogLength *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatLength(this, (uint64_t)a2, 0x10u);
}

uint64_t siri::dialogengine::DialogLength::units(siri::dialogengine::DialogLength *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  std::string __p;
  _BYTE v6[8];
  void *v7;
  char v8;

  siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Length>(0.0, (uint64_t)this, (uint64_t)a2, (uint64_t)v6);
  v3 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v3, &__p, (uint64_t)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 < 0)
    operator delete(v7);
  return v3;
}

void sub_1BFABF44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v21, 0x10B3C40D3060B95);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogLength::value(siri::dialogengine::DialogLength *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  double *RequiredNumberParameter;
  double *v6;
  uint64_t v7;
  void *size;
  std::string __p;
  std::string v11;
  char v12;
  double v13;

  std::string::basic_string[abi:ne180100]<0>(&v11, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&v11.__r_.__value_.__l.__data_, (uint64_t)a2);
  v6 = RequiredNumberParameter;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Length>(round(v6[9]), (uint64_t)this, (uint64_t)a2, (uint64_t)&v11);
      v7 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      siri::dialogengine::VariableNumber::VariableNumber(v7, &__p, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v12 < 0)
      {
        size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_10:
        operator delete(size);
        return v7;
      }
      return v7;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v7 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  siri::dialogengine::VariableNumber::VariableNumber(v7, &v11, 0.0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_10;
  }
  return v7;
}

void sub_1BFABF5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v24, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void sub_1BFABF6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;

  if (a30)
    siri::dialogengine::PropertyBase::~PropertyBase(&a10);

  _Unwind_Resume(a1);
}

void sub_1BFABF788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;

  if (a30)
    siri::dialogengine::PropertyBase::~PropertyBase(&a10);

  _Unwind_Resume(a1);
}

void sub_1BFABF940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  void *v40;
  void *v41;

  if (a39)
    siri::dialogengine::PropertyBase::~PropertyBase(&a19);

  _Unwind_Resume(a1);
}

void __assign_helper_atomic_property__23791(siri::dialogengine::PropertyBase *this, siri::dialogengine::PropertyBase *a2)
{
  __int16 v4;

  if (*((unsigned __int8 *)this + 160) == *((unsigned __int8 *)a2 + 160))
  {
    if (*((_BYTE *)this + 160))
    {
      std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
      std::string::operator=((std::string *)((char *)this + 32), (const std::string *)((char *)a2 + 32));
      std::string::operator=((std::string *)((char *)this + 56), (const std::string *)((char *)a2 + 56));
      std::string::operator=((std::string *)((char *)this + 80), (const std::string *)((char *)a2 + 80));
      std::string::operator=((std::string *)((char *)this + 104), (const std::string *)((char *)a2 + 104));
      std::string::operator=((std::string *)((char *)this + 128), (const std::string *)((char *)a2 + 128));
      v4 = *((_WORD *)a2 + 76);
      *((_BYTE *)this + 154) = *((_BYTE *)a2 + 154);
      *((_WORD *)this + 76) = v4;
      *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
    }
  }
  else if (*((_BYTE *)this + 160))
  {
    siri::dialogengine::PropertyBase::~PropertyBase((void **)this);
    *((_BYTE *)this + 160) = 0;
  }
  else
  {
    siri::dialogengine::PropertyBase::PropertyBase(this, a2);
    *(_QWORD *)this = &off_1E793ADA8;
    *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
    *((_BYTE *)this + 160) = 1;
  }
}

siri::dialogengine::PropertyBase *std::__optional_copy_base<siri::dialogengine::ObjectInput,false>::__optional_copy_base[abi:ne180100](siri::dialogengine::PropertyBase *this, uint64_t a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 160) = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    siri::dialogengine::PropertyBase::PropertyBase(this, (const siri::dialogengine::PropertyBase *)a2);
    *(_QWORD *)this = &off_1E793ADA8;
    *((_DWORD *)this + 39) = *(_DWORD *)(a2 + 156);
    *((_BYTE *)this + 160) = 1;
  }
  return this;
}

void sub_1BFABFB30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 160))
    siri::dialogengine::PropertyBase::~PropertyBase((void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1BFABFD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,__int16 a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v59;
  void *v60;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (a59)
    siri::dialogengine::PropertyBase::~PropertyBase(&a39);

  _Unwind_Resume(a1);
}

void sub_1BFABFFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v37 - 64);

  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseSpeakableString(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::string *v5;
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  const char *v20;
  int v21;
  xmlTextReader *v22;
  int data;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string::size_type v26;
  void **v27;
  std::string::size_type *p_size;
  uint64_t v29;
  _QWORD *size;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  const xmlChar *v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  void *v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type v59;
  char v60;
  std::string::value_type v61;
  _BOOL4 v62;
  _BOOL4 v63;
  std::string::size_type v64;
  std::string *v65;
  std::string *v66;
  std::string::size_type v67;
  char v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::string::size_type *v73;
  int v74;
  int v75;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  xmlTextReader *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  __int128 v86;
  __int128 v87;
  void *v88[2];
  char v89;
  void *v90[2];
  char v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  void *v95[2];
  char v96;
  void *__p[2];
  char v98;
  __int128 v99;
  std::string v100;
  uint64_t v101;
  __int128 v102;
  __int16 v103;
  std::string v104;
  uint64_t v105;
  __int128 v106;
  __int16 v107;
  std::string v108;
  xmlTextReaderPtr reader;
  std::string __str;
  __int128 v111;
  int64_t v112;
  std::string::value_type *v113;
  std::string::size_type v114;
  unsigned __int8 v115;
  __int128 v116;
  std::string v117;
  __int128 v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v113, "parse-speakable-string");
    std::operator+<char>();
    v5 = std::string::append(&__str, ">");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v117.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = *(char *)(a1 + 23);
    if (v7 >= 0)
      v8 = (const std::string::value_type *)a1;
    else
      v8 = *(const std::string::value_type **)a1;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 23);
    else
      v9 = *(_QWORD *)(a1 + 8);
    v10 = std::string::append(&v117, v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v108.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v108, "</");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v100.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((v115 & 0x80u) == 0)
      v14 = (const std::string::value_type *)&v113;
    else
      v14 = v113;
    if ((v115 & 0x80u) == 0)
      v15 = v115;
    else
      v15 = v114;
    v16 = std::string::append(&v100, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v104, ">");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v112 = v18->__r_.__value_.__r.__words[2];
    v111 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (v112 >= 0)
      v20 = (const char *)&v111;
    else
      v20 = (const char *)v111;
    if (v112 >= 0)
      v21 = HIBYTE(v112);
    else
      v21 = DWORD2(v111);
    v22 = xmlReaderForMemory(v20, v21, 0, 0, 0);
    reader = v22;
    if (v22)
    {
      siri::dialogengine::XmlErrorHandler::XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)&v108, 0);
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
      v105 = 0;
      siri::dialogengine::ReadNextNode(v22, (uint64_t)&v100);
      data = (int)v100.__r_.__value_.__l.__data_;
      LODWORD(v104.__r_.__value_.__l.__data_) = v100.__r_.__value_.__l.__data_;
      if (SHIBYTE(v105) < 0)
      {
        operator delete((void *)v104.__r_.__value_.__l.__size_);
        data = (int)v104.__r_.__value_.__l.__data_;
      }
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&v100.__r_.__value_.__r.__words[1];
      v105 = v101;
      v106 = v102;
      v107 = v103;
      if (data == 1)
      {
        v85 = 0;
        do
        {
          v24 = v104.__r_.__value_.__r.__words[2];
          if (v105 >= 0)
            v25 = HIBYTE(v105);
          else
            v25 = v104.__r_.__value_.__r.__words[2];
          v26 = v115;
          if ((v115 & 0x80u) != 0)
            v26 = v114;
          if (v25 != v26)
            goto LABEL_52;
          if ((v115 & 0x80u) == 0)
            v27 = (void **)&v113;
          else
            v27 = (void **)v113;
          if (v105 < 0)
          {
            if (memcmp((const void *)v104.__r_.__value_.__l.__size_, v27, v104.__r_.__value_.__r.__words[2]))
              goto LABEL_61;
          }
          else if (HIBYTE(v105))
          {
            p_size = &v104.__r_.__value_.__l.__size_;
            v29 = HIBYTE(v105);
            while (*(unsigned __int8 *)p_size == *(unsigned __int8 *)v27)
            {
              p_size = (std::string::size_type *)((char *)p_size + 1);
              v27 = (void **)((char *)v27 + 1);
              if (!--v29)
                goto LABEL_187;
            }
LABEL_52:
            if ((v105 & 0x8000000000000000) == 0)
            {
              size = &v104.__r_.__value_.__l.__size_;
              switch(HIBYTE(v105))
              {
                case 3:
                  if (LOWORD(v104.__r_.__value_.__r.__words[1]) != 24950 || v104.__r_.__value_.__s.__data_[10] != 114)
                    goto LABEL_135;
                  goto LABEL_67;
                case 5:
                  if (LODWORD(v104.__r_.__value_.__r.__words[1]) != 2019914787
                    || v104.__r_.__value_.__s.__data_[12] != 116)
                  {
                    goto LABEL_135;
                  }
                  goto LABEL_98;
                case 6:
                  if (LODWORD(v104.__r_.__value_.__r.__words[1]) != 1634887792
                    || WORD2(v104.__r_.__value_.__r.__words[1]) != 25971)
                  {
                    goto LABEL_135;
                  }
                  goto LABEL_110;
                case 8:
                  goto LABEL_134;
                default:
                  goto LABEL_135;
              }
            }
LABEL_61:
            switch(v24)
            {
              case 3uLL:
                if (*(_WORD *)v104.__r_.__value_.__l.__size_ != 24950
                  || *(_BYTE *)(v104.__r_.__value_.__l.__size_ + 2) != 114)
                {
                  goto LABEL_135;
                }
LABEL_67:
                siri::dialogengine::GetOuterXml(v22, &v100);
                std::string::basic_string[abi:ne180100]<0>(__p, "name");
                siri::dialogengine::GetXmlAttr(v22, (const xmlChar *)__p, &v117);
                if (v98 < 0)
                  operator delete(__p[0]);
                std::string::basic_string[abi:ne180100]<0>(v95, "id");
                siri::dialogengine::GetXmlAttr(v22, (const xmlChar *)v95, &__str);
                if (v96 < 0)
                  operator delete(v95[0]);
                v33 = (std::__shared_weak_count *)operator new(0x118uLL);
                v33->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v33->__shared_owners_;
                v33->__shared_weak_owners_ = 0;
                v33->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933E28;
                siri::dialogengine::ChunkText::ChunkText((uint64_t)&v33[1], (uint64_t)&v100);
                v33[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E7930388;
                *(_OWORD *)&v33[9].__shared_owners_ = 0u;
                v33[10].std::__shared_count = 0u;
                *(_OWORD *)&v33[10].__shared_weak_owners_ = 0u;
                LOBYTE(v33[11].__shared_owners_) = 0;
                v93 = v33 + 1;
                v94 = v33;
                siri::dialogengine::ChunkVariable::SetName((uint64_t)&v33[1], &v117);
                std::string::operator=((std::string *)&v33[10].__shared_owners_, &__str);
                siri::dialogengine::GetXmlAttrs(v22, (uint64_t)&v118);
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v33[8].__shared_owners_, (__int128 *)v118, (__int128 *)((char *)&v118 + 8));
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)&v118 + 1));
                LOBYTE(v33[11].__shared_owners_) = v85 > 0;
                *(_QWORD *)&v92 = v33 + 1;
                *((_QWORD *)&v92 + 1) = v33;
                do
                  v35 = __ldxr(p_shared_owners);
                while (__stxr(v35 + 1, p_shared_owners));
                siri::dialogengine::ChunkList::AddChunk(a2, &v92);
                do
                  v36 = __ldaxr(p_shared_owners);
                while (__stlxr(v36 - 1, p_shared_owners));
                if (!v36)
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
                siri::dialogengine::SkipNodeBranch(v22, (int *)&v104);
                v37 = v94;
                if (!v94)
                  goto LABEL_127;
                v38 = (unint64_t *)&v94->__shared_owners_;
                do
                  v39 = __ldaxr(v38);
                while (__stlxr(v39 - 1, v38));
                goto LABEL_125;
              case 5uLL:
                if (*(_DWORD *)v104.__r_.__value_.__l.__size_ != 2019914787
                  || *(_BYTE *)(v104.__r_.__value_.__l.__size_ + 4) != 116)
                {
                  goto LABEL_135;
                }
LABEL_98:
                v43 = xmlTextReaderConstValue(v22);
                if (v43)
                  v44 = (char *)v43;
                else
                  v44 = "";
                std::string::basic_string[abi:ne180100]<0>(&v100, v44);
                v45 = (std::__shared_weak_count *)operator new(0xE0uLL);
                v45->__shared_owners_ = 0;
                v46 = (unint64_t *)&v45->__shared_owners_;
                v45->__shared_weak_owners_ = 0;
                v45->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7939C98;
                *(_QWORD *)&v99 = siri::dialogengine::ChunkText::ChunkText((uint64_t)&v45[1], (uint64_t)&v100);
                *((_QWORD *)&v99 + 1) = v45;
                siri::dialogengine::ChunkList::AddChunk(a2, &v99);
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 - 1, v46));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
                goto LABEL_131;
              case 6uLL:
                if (*(_DWORD *)v104.__r_.__value_.__l.__size_ != 1634887792
                  || *(_WORD *)(v104.__r_.__value_.__l.__size_ + 4) != 25971)
                {
                  goto LABEL_135;
                }
LABEL_110:
                siri::dialogengine::GetOuterXml(v22, &v100);
                std::string::basic_string[abi:ne180100]<0>(v90, "name");
                siri::dialogengine::GetXmlAttr(v22, (const xmlChar *)v90, &v117);
                if (v91 < 0)
                  operator delete(v90[0]);
                std::string::basic_string[abi:ne180100]<0>(v88, "id");
                siri::dialogengine::GetXmlAttr(v22, (const xmlChar *)v88, &__str);
                if (v89 < 0)
                  operator delete(v88[0]);
                v49 = (std::__shared_weak_count *)operator new(0x118uLL);
                v49->__shared_owners_ = 0;
                v50 = (unint64_t *)&v49->__shared_owners_;
                v49->__shared_weak_owners_ = 0;
                v49->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933E78;
                siri::dialogengine::ChunkPhrase::ChunkPhrase((uint64_t)&v49[1], (uint64_t)&v100);
                v93 = v49 + 1;
                v94 = v49;
                siri::dialogengine::ChunkPhrase::SetName((uint64_t)&v49[1], &v117);
                std::string::operator=((std::string *)&v49[10].__shared_owners_, &__str);
                LOBYTE(v49[11].__shared_owners_) = v85 > 0;
                *(_QWORD *)&v87 = v49 + 1;
                *((_QWORD *)&v87 + 1) = v49;
                do
                  v51 = __ldxr(v50);
                while (__stxr(v51 + 1, v50));
                siri::dialogengine::ChunkList::AddChunk(a2, &v87);
                do
                  v52 = __ldaxr(v50);
                while (__stlxr(v52 - 1, v50));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
                v53 = v93;
                siri::dialogengine::GetXmlAttrs(v22, (uint64_t)&v118);
                if (&v53[7].__shared_owners_ != (uint64_t *)&v118)
                  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v53[7].__shared_owners_, (__int128 *)v118, (__int128 *)((char *)&v118 + 8));
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)&v118 + 1));
                siri::dialogengine::SkipNodeBranch(v22, (int *)&v104);
                v37 = v94;
                if (v94)
                {
                  v54 = (unint64_t *)&v94->__shared_owners_;
                  do
                    v39 = __ldaxr(v54);
                  while (__stlxr(v39 - 1, v54));
LABEL_125:
                  if (!v39)
                  {
                    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                    std::__shared_weak_count::__release_weak(v37);
                  }
                }
LABEL_127:
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v117.__r_.__value_.__l.__data_);
LABEL_131:
                if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  break;
                v55 = (void *)v100.__r_.__value_.__r.__words[0];
                goto LABEL_186;
              case 8uLL:
                size = (_QWORD *)v104.__r_.__value_.__l.__size_;
LABEL_134:
                if (*size != 0x746E656D6D6F6323)
                  goto LABEL_135;
                break;
              default:
LABEL_135:
                if (HIBYTE(v107) && !(_BYTE)v107)
                {
                  std::operator+<char>();
                  v56 = std::string::append(&v100, ">");
                  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
                  __str.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v57;
                  v56->__r_.__value_.__l.__size_ = 0;
                  v56->__r_.__value_.__r.__words[2] = 0;
                  v56->__r_.__value_.__r.__words[0] = 0;
                  if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_162;
                  goto LABEL_161;
                }
                siri::dialogengine::GetOuterXml(v22, &v100);
                memset(&__str, 0, sizeof(__str));
                if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v58 = &v100;
                else
                  v58 = (std::string *)v100.__r_.__value_.__r.__words[0];
                if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v59 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
                else
                  v59 = v100.__r_.__value_.__l.__size_;
                if (v59)
                {
                  v60 = 0;
                  do
                  {
                    v61 = v58->__r_.__value_.__s.__data_[0];
                    std::string::push_back(&__str, v58->__r_.__value_.__s.__data_[0]);
                    if (!((v61 != 62) | v60 & 1))
                      break;
                    v60 ^= v61 == 34;
                    v58 = (std::string *)((char *)v58 + 1);
                    --v59;
                  }
                  while (v59);
                }
                if (HIBYTE(v107))
                  goto LABEL_160;
                std::string::basic_string[abi:ne180100]<0>(&v117, "/>");
                v62 = siri::dialogengine::StringEndsWith(&__str, (unsigned __int8 *)&v117);
                v63 = v62;
                if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v117.__r_.__value_.__l.__data_);
                  if (!v63)
                    goto LABEL_160;
                }
                else if (!v62)
                {
                  goto LABEL_160;
                }
                v64 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v64 = __str.__r_.__value_.__l.__size_;
                v65 = std::string::basic_string(&v117, &__str, 0, v64 - 2, (std::allocator<char> *)&v93);
                v66 = std::string::append(v65, ">");
                v67 = v66->__r_.__value_.__r.__words[0];
                *(_QWORD *)&v118 = v66->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)&v118 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1]
                                                                           + 7);
                v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
                v66->__r_.__value_.__l.__size_ = 0;
                v66->__r_.__value_.__r.__words[2] = 0;
                v66->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                __str.__r_.__value_.__r.__words[0] = v67;
                __str.__r_.__value_.__l.__size_ = v118;
                *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v118 + 7);
                *((_BYTE *)&__str.__r_.__value_.__s + 23) = v68;
                if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v117.__r_.__value_.__l.__data_);
LABEL_160:
                if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_162;
LABEL_161:
                operator delete(v100.__r_.__value_.__l.__data_);
LABEL_162:
                v69 = (std::__shared_weak_count *)operator new(0x100uLL);
                v69->__shared_owners_ = 0;
                v70 = (unint64_t *)&v69->__shared_owners_;
                v69->__shared_weak_owners_ = 0;
                v69->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933EC8;
                siri::dialogengine::ChunkText::ChunkText((uint64_t)&v69[1], (uint64_t)&__str);
                v69[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E7930A18;
                v69[9].__shared_weak_owners_ = 0;
                v69[10].__vftable = 0;
                LOWORD(v69[10].__shared_owners_) = 0;
                v69[9].__shared_owners_ = 0;
                v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69[1];
                v117.__r_.__value_.__l.__size_ = (std::string::size_type)v69;
                std::string::operator=((std::string *)&v69[9].__shared_owners_, (const std::string *)&v104.__r_.__value_.__r.__words[1]);
                LOWORD(v69[10].__shared_owners_) = v107;
                siri::dialogengine::GetXmlAttrs(v22, (uint64_t)&v100);
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v69[8].__shared_owners_, (__int128 *)v100.__r_.__value_.__l.__data_, (__int128 *)&v100.__r_.__value_.__r.__words[1]);
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v100.__r_.__value_.__l.__size_);
                *(_QWORD *)&v86 = v69 + 1;
                *((_QWORD *)&v86 + 1) = v69;
                do
                  v71 = __ldxr(v70);
                while (__stxr(v71 + 1, v70));
                siri::dialogengine::ChunkList::AddChunk(a2, &v86);
                do
                  v72 = __ldaxr(v70);
                while (__stlxr(v72 - 1, v70));
                if (!v72)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
                if (SHIBYTE(v105) < 0)
                {
                  if (v104.__r_.__value_.__r.__words[2] != 3)
                    goto LABEL_179;
                  v73 = (std::string::size_type *)v104.__r_.__value_.__l.__size_;
                }
                else
                {
                  v73 = &v104.__r_.__value_.__l.__size_;
                  if (SHIBYTE(v105) != 3)
                    goto LABEL_179;
                }
                v74 = *(unsigned __int16 *)v73;
                v75 = *((unsigned __int8 *)v73 + 2);
                if (v74 == 28783 && v75 == 116)
                  v85 = v85 + v107 - SHIBYTE(v107);
LABEL_179:
                v77 = (std::__shared_weak_count *)v117.__r_.__value_.__l.__size_;
                if (v117.__r_.__value_.__l.__size_)
                {
                  v78 = (unint64_t *)(v117.__r_.__value_.__l.__size_ + 8);
                  do
                    v79 = __ldaxr(v78);
                  while (__stlxr(v79 - 1, v78));
                  if (!v79)
                  {
                    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                    std::__shared_weak_count::__release_weak(v77);
                  }
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                {
                  v55 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_186:
                  operator delete(v55);
                }
                break;
            }
          }
LABEL_187:
          siri::dialogengine::ReadNextNode(v22, (uint64_t)&v100);
          v80 = (int)v100.__r_.__value_.__l.__data_;
          LODWORD(v104.__r_.__value_.__l.__data_) = v100.__r_.__value_.__l.__data_;
          if (SHIBYTE(v105) < 0)
          {
            operator delete((void *)v104.__r_.__value_.__l.__size_);
            v80 = (int)v104.__r_.__value_.__l.__data_;
          }
          *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = *(_OWORD *)&v100.__r_.__value_.__r.__words[1];
          v105 = v101;
          v106 = v102;
          v107 = v103;
        }
        while (v80 == 1);
      }
      if (SHIBYTE(v105) < 0)
        operator delete((void *)v104.__r_.__value_.__l.__size_);
      siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)&v108);
      v81 = reader;
      reader = 0;
      if (v81)
        xmlFreeTextReader(v81);
    }
    if (SHIBYTE(v112) < 0)
      operator delete((void *)v111);
    if ((char)v115 < 0)
      operator delete(v113);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v82 = (std::__shared_weak_count *)operator new(0xE0uLL);
    *(_OWORD *)&v82->__shared_owners_ = 0u;
    v83 = (unint64_t *)&v82->__shared_owners_;
    v82[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937608;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7939C98;
    *(_OWORD *)&v82[1].__shared_owners_ = 0u;
    v82[2].std::__shared_count = 0u;
    *(_OWORD *)&v82[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v82[3].__shared_owners_ = 0u;
    v82[4].std::__shared_count = 0u;
    *(_OWORD *)&v82[4].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v82[5].__shared_owners_ = 0u;
    v82[6].std::__shared_count = 0u;
    *(_OWORD *)&v82[6].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v82[7].__shared_owners_ = 0u;
    *(_OWORD *)&v82[8].__shared_weak_owners_ = 0u;
    v82[8].__vftable = 0;
    v82[8].__shared_owners_ = (uint64_t)&v82[8].__shared_weak_owners_;
    *(_QWORD *)&v116 = v82 + 1;
    *((_QWORD *)&v116 + 1) = v82;
    siri::dialogengine::ChunkList::AddChunk(a2, &v116);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
}

void sub_1BFAC0D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,xmlTextReader *a62)
{
  uint64_t v62;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v62 - 120));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (*(char *)(v62 - 233) < 0)
    operator delete(*(void **)(v62 - 256));
  if (*(char *)(v62 - 137) < 0)
    operator delete(*(void **)(v62 - 160));
  if (a40 < 0)
    operator delete(__p);
  if (a52 < 0)
    operator delete(a47);
  siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)&a57);
  std::unique_ptr<_xmlTextReader,siri::dialogengine::xmlTextReaderDeleter>::reset[abi:ne180100](&a62);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  if (*(char *)(v62 - 201) < 0)
    operator delete(*(void **)(v62 - 224));
  if (*(char *)(v62 - 177) < 0)
    operator delete(*(void **)(v62 - 200));
  _Unwind_Resume(a1);
}

void siri::dialogengine::SkipNodeBranch(siri::dialogengine *this, int *a2)
{
  unsigned __int8 *v4;
  std::string *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  std::string *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int16 v18;
  std::string v19;

  v4 = (unsigned __int8 *)(a2 + 2);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    v19.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
  }
  if (*((_BYTE *)a2 + 49))
    goto LABEL_5;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v19.__r_.__value_.__l.__size_ == 8)
    {
      v5 = (std::string *)v19.__r_.__value_.__r.__words[0];
LABEL_13:
      if (v5->__r_.__value_.__r.__words[0] == 0x746E656D6D6F6323)
        goto LABEL_5;
    }
  }
  else if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) == 8)
  {
    v5 = &v19;
    goto LABEL_13;
  }
  siri::dialogengine::ReadNextNode(this, (uint64_t)&v14);
  v6 = v14;
  *a2 = v14;
  if (*((char *)a2 + 31) < 0)
  {
    operator delete(*((void **)a2 + 1));
    v6 = *a2;
  }
  *(_OWORD *)v4 = v15;
  *((_QWORD *)v4 + 2) = v16;
  *((_OWORD *)a2 + 2) = v17;
  *((_WORD *)a2 + 24) = v18;
  if (v6 == 1)
  {
    v7 = 1;
    do
    {
      v8 = *((unsigned __int8 *)a2 + 31);
      if ((v8 & 0x80u) == 0)
        v9 = *((unsigned __int8 *)a2 + 31);
      else
        v9 = *((_QWORD *)a2 + 2);
      size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v19.__r_.__value_.__l.__size_;
      if (v9 == size)
      {
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &v19;
        else
          v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v4, v11, *((_QWORD *)a2 + 2)))
          {
LABEL_34:
            v7 = v7 + *((unsigned __int8 *)a2 + 48) - *((char *)a2 + 49);
            if (v7 < 1)
              break;
          }
        }
        else
        {
          if (!*((_BYTE *)a2 + 31))
            goto LABEL_34;
          v12 = v4;
          while (*v12 == v11->__r_.__value_.__s.__data_[0])
          {
            ++v12;
            v11 = (std::string *)((char *)v11 + 1);
            if (!--v8)
              goto LABEL_34;
          }
        }
      }
      siri::dialogengine::ReadNextNode(this, (uint64_t)&v14);
      v13 = v14;
      *a2 = v14;
      if (*((char *)a2 + 31) < 0)
      {
        operator delete(*((void **)a2 + 1));
        v13 = *a2;
      }
      *(_OWORD *)v4 = v15;
      *((_QWORD *)v4 + 2) = v16;
      *((_OWORD *)a2 + 2) = v17;
      *((_WORD *)a2 + 24) = v18;
    }
    while (v13 == 1);
  }
LABEL_5:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1BFAC1284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<_xmlTextReader,siri::dialogengine::xmlTextReaderDeleter>::reset[abi:ne180100](xmlTextReader **a1)
{
  xmlTextReader *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    xmlFreeTextReader(v2);
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkTag>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkTag>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ChunkTag>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkPhrase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkPhrase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933E78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ChunkPhrase>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkVariable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933E28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkVariable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933E28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ChunkVariable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void siri::dialogengine::ParseXmlFile(Context *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  siri::dialogengine *v7;
  void *__p;
  char v9;

  if (*(char *)(a2 + 23) >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  v7 = xmlReaderForFile(v6, 0, 0);
  if (v7)
  {
    siri::dialogengine::ParseXmlInternal((__int128 *)a3, a1, v7, a2);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (v9 < 0)
      operator delete(__p);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_1BFAC1468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ParseXmlInternal(__int128 *a1, Context *a2, siri::dialogengine *a3, uint64_t a4)
{
  siri::dialogengine *v4;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  const char *v21;
  std::string *p_p;
  unsigned int data;
  char v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  std::string *v28;
  int data_low;
  int v30;
  std::string *v32;
  char v33;
  unint64_t *v34;
  unint64_t v35;
  const std::string::value_type **v36;
  __int128 v37;
  __int128 v38;
  std::string::__raw *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  int v43;
  std::string *v44;
  uint64_t v45;
  std::string *v46;
  std::string::size_type v48;
  int v49;
  int v51;
  std::string *v52;
  uint64_t v53;
  std::string::size_type v54;
  int v55;
  std::string *v57;
  int v60;
  int v61;
  uint64_t v63;
  char *v64;
  std::string::__raw *v65;
  int v66;
  uint64_t v69;
  const xmlChar *v70;
  char *v71;
  std::string *v72;
  __int128 v73;
  _OWORD *v79;
  std::string::size_type v80;
  uint64_t v82;
  const xmlChar *v83;
  char *v84;
  std::string *v85;
  __int128 v86;
  void *v87;
  _BOOL4 v89;
  uint64_t v90;
  std::string *v91;
  __int128 v92;
  _BOOL4 v94;
  std::string::size_type v95;
  std::string::size_type v96;
  std::string::size_type v97;
  _BOOL4 v99;
  char *v100;
  unsigned int v101;
  std::string *v102;
  __int128 v103;
  uint64_t v104;
  std::string::size_type v105;
  _BOOL4 v106;
  uint64_t v108;
  std::string *v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  std::string::size_type size;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  std::string::size_type v118;
  int v119;
  const std::string::value_type **v121;
  __int128 v122;
  std::string *v123;
  __int128 v124;
  int v125;
  const std::string::value_type *v126;
  std::string::size_type v127;
  std::string *v128;
  std::string::size_type v129;
  std::string::size_type v130;
  char v131;
  uint64_t v132;
  int v133;
  int v134;
  std::string::size_type p_size;
  std::string::size_type v136;
  std::string::size_type v137;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  BOOL v142;
  int v143;
  _QWORD *v144;
  char *v145;
  unint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  BOOL v157;
  BOOL v158;
  std::string::size_type *v159;
  int v161;
  uint64_t v162;
  char *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  char *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  BOOL v183;
  char *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  int v195;
  char *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  std::string::size_type v203;
  std::string *v204;
  std::string::size_type v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  BOOL v210;
  unint64_t *v212;
  unint64_t v213;
  std::string *v214;
  uint64_t v215;
  std::string::size_type v216;
  float v217;
  char *v218;
  char *v219;
  int64x2_t *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t *v232;
  std::string *v233;
  _QWORD *v234;
  __int128 v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::string *v240;
  char *v241;
  std::string *v242;
  std::string *v243;
  __int128 v244;
  std::string *v245;
  __int128 v246;
  void *v247;
  std::string *v248;
  __int128 v249;
  std::string *v250;
  std::string::size_type v251;
  std::string *v252;
  __int128 v253;
  BOOL v254;
  std::string *v255;
  int v256;
  int v257;
  std::string *v259;
  __int128 v260;
  std::string::__raw *v261;
  std::string *v263;
  __int128 v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::string *v272;
  __int128 v273;
  uint64_t v274;
  BOOL v275;
  BOOL v276;
  uint64_t v277;
  const char *v278;
  uint64_t v279;
  const std::string::value_type ***v280;
  google::protobuf::MessageLite **v281;
  char *v282;
  char v283;
  uint64_t v284;
  google::protobuf::MessageLite **v285;
  int v286;
  int v287;
  uint64_t v288;
  uint64_t FieldByName;
  uint64_t OneofByName;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  google::protobuf::MessageLite **v296;
  google::protobuf::MessageLite **v297;
  google::protobuf::MessageLite *v298;
  unsigned __int8 **v299;
  const char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned __int8 ***v305;
  unsigned __int8 **v306;
  uint64_t v307;
  std::string::size_type v308;
  unsigned __int8 *v309;
  int v310;
  std::string *v311;
  uint64_t *v312;
  uint64_t *OneofFieldDescriptor;
  std::string::size_type v314;
  int v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  const char *v327;
  const std::string::value_type ***v328;
  const std::string::value_type ***v329;
  std::string::size_type v330;
  const std::string *v331;
  const char *v332;
  double v333;
  siri::dialogengine::CatBinary::vcat_item_expression *v334;
  std::string *v335;
  uint64_t v336;
  const xmlChar *v337;
  char *v338;
  std::string *v339;
  __int128 v340;
  std::string *v341;
  std::string::size_type v342;
  std::string *v343;
  __int128 v344;
  std::string *v345;
  __int128 v346;
  uint64_t v347;
  int v348;
  const std::string::value_type *v349;
  std::string::size_type v350;
  std::string *v351;
  __int128 v352;
  std::string *v353;
  __int128 v354;
  uint64_t v355;
  const xmlChar *v356;
  char *v357;
  std::string *v358;
  __int128 v359;
  uint64_t v360;
  int v361;
  const std::string::value_type *v362;
  std::string::size_type v363;
  uint64_t v364;
  const xmlChar *v365;
  char *v366;
  std::string *v367;
  __int128 v368;
  std::string *v369;
  __int128 v370;
  std::string *v371;
  __int128 v372;
  const char *v373;
  const std::string::value_type ***v374;
  std::string *v375;
  __int128 v376;
  std::string *v377;
  std::string::size_type v378;
  std::string *v379;
  __int128 v380;
  std::string::size_type v381;
  const siri::dialogengine::CatBinary::vcat_item *v382;
  char v383;
  std::string::size_type v384;
  char v385;
  const siri::dialogengine::CatBinary::vcat_item *v386;
  std::string::size_type v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  std::string::size_type v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  const siri::dialogengine::CatBinary::vcat_item *v397;
  unint64_t *v398;
  unint64_t v399;
  uint64_t v400;
  const xmlChar *v401;
  char *v402;
  __int128 *v403;
  __int128 v404;
  std::string *v405;
  std::string **v406;
  uint64_t *v407;
  const siri::dialogengine::CatBinary::vcat_item *v408;
  std::string::size_type v409;
  std::string *v410;
  __int128 v411;
  std::string *v412;
  std::string::size_type v413;
  std::string *v414;
  __int128 v415;
  std::string *v416;
  __int128 v417;
  const std::string::value_type *v418;
  std::string::size_type v419;
  std::string *v420;
  __int128 v421;
  std::string *v422;
  __int128 v423;
  std::string *v424;
  std::string::size_type v425;
  std::string *v426;
  __int128 v427;
  std::string *v428;
  __int128 v429;
  int HasRequiredVariablesOrPhrases;
  int v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  char *v435;
  uint64_t *v436;
  char *v437;
  uint64_t v438;
  google::protobuf::MessageLite *v439;
  std::string *v440;
  __int128 v441;
  uint64_t v442;
  siri::dialogengine *v443;
  char *v444;
  size_t v445;
  std::string *v446;
  char *v447;
  std::string *v448;
  std::string::size_type v449;
  std::string *v450;
  __int128 v451;
  std::string::size_type v452;
  char v453;
  _BOOL4 v454;
  std::string::size_type v455;
  const char *v456;
  double v457;
  siri::dialogengine::CatBinary::vcat_item_expression *v458;
  std::string *v459;
  const siri::dialogengine::CatBinary::vcat_item *v460;
  std::string::size_type v461;
  uint64_t v462;
  const char *v463;
  const std::string::value_type ***v464;
  char v467;
  char v468;
  unint64_t *v469;
  unint64_t v470;
  std::string *v471;
  __int128 v472;
  int v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  int v480;
  std::string::__raw *v481;
  int v482;
  BOOL v483;
  int v484;
  uint64_t v485;
  int v486;
  BOOL v487;
  int v488;
  uint64_t v493;
  const xmlChar *v494;
  char *v495;
  std::string *v496;
  __int128 v497;
  std::string *v498;
  int v499;
  int v500;
  uint64_t v502;
  char *v503;
  std::string *v504;
  uint64_t v505;
  const xmlChar *v506;
  char *v507;
  std::string *v508;
  __int128 v509;
  uint64_t v510;
  _BOOL4 v512;
  uint64_t v513;
  uint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  unint64_t v518;
  std::__shared_weak_count *v519;
  uint64_t v520;
  unint64_t *v521;
  unint64_t v522;
  unint64_t v523;
  std::string *v524;
  __int128 v525;
  std::string *v526;
  __int128 v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  int64x2_t *v535;
  unint64_t v536;
  unint64_t v537;
  uint64_t v538;
  std::string::size_type v539;
  float v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  BOOL v549;
  unint64_t v550;
  std::__shared_weak_count *v551;
  uint64_t v552;
  unint64_t *v553;
  unint64_t v554;
  unint64_t v555;
  __int128 v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  std::string *v563;
  int v564;
  std::string::size_type v565;
  int v566;
  int v567;
  std::string *v569;
  __int128 v570;
  std::string *p_str;
  std::string::size_type v572;
  std::string *v573;
  __int128 v574;
  std::string *v575;
  __int128 v576;
  int v577;
  uint64_t v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  std::string *v583;
  __int128 v584;
  std::string *v585;
  __int128 v586;
  uint64_t v587;
  std::__shared_weak_count *v588;
  unint64_t *v589;
  unint64_t v590;
  unint64_t *v591;
  unint64_t v592;
  std::__shared_weak_count *v593;
  unint64_t *v594;
  unint64_t v595;
  uint64_t v596;
  std::__shared_weak_count *v597;
  unint64_t *v598;
  unint64_t v599;
  unint64_t v600;
  std::__shared_weak_count *v601;
  unint64_t *v602;
  unint64_t v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  unint64_t v606;
  uint64_t v607;
  __int128 *v608;
  int v609;
  const std::string::value_type ***v610;
  char *v611;
  char *v612;
  uint64_t v613;
  char v614;
  google::protobuf::MessageLite **v615;
  google::protobuf::MessageLite **v616;
  uint64_t v617;
  char *v618;
  int v619;
  google::protobuf::MessageLite *v620;
  Context *v621;
  siri::dialogengine *reader;
  uint64_t v623;
  __int128 v624;
  unsigned __int128 v625;
  uint64_t v626[2];
  _QWORD v627[2];
  void *v628[2];
  char v629;
  void *v630[2];
  char v631;
  void *v632[2];
  char v633;
  void *v634[2];
  char v635;
  void *v636[2];
  char v637;
  void *v638[2];
  char v639;
  void *v640[2];
  char v641;
  _QWORD v642[2];
  __int128 v643;
  void *v644[2];
  char v645;
  void *v646[2];
  char v647;
  void *v648[2];
  char v649;
  void *v650[2];
  char v651;
  void *v652[2];
  char v653;
  void *v654[2];
  char v655;
  void *v656[2];
  char v657;
  void *v658[2];
  char v659;
  void *v660[2];
  char v661;
  void *v662[2];
  char v663;
  std::string v664;
  void *v665[4];
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  char v672;
  __int16 v673;
  _BYTE v674[74];
  void *v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  uint64_t v679;
  void (**v680)(siri::dialogengine::ValidationBase *__hidden);
  _QWORD **v681;
  _QWORD *v682[2];
  void *v683[2];
  char v684;
  void *v685[2];
  char v686;
  void *v687[2];
  char v688;
  __int128 v689;
  char v690[8];
  uint64_t v691;
  uint64_t v692;
  char *v693;
  char *v694;
  uint64_t v695;
  std::string *v696;
  std::string *v697;
  unint64_t v698;
  unsigned int v699;
  __int128 __p;
  void *v701;
  __int128 v702;
  __int16 v703;
  __int128 v704;
  siri::dialogengine *v705;
  std::string __str;
  void *v707;
  __int128 v708;
  __int16 v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  std::string v718;
  std::string v719;
  std::string v720;
  std::string v721;
  std::string v722;
  std::string v723;
  std::string v724;
  std::string v725;
  std::string v726;
  std::string v727;
  std::string v728;
  std::string v729;

  v4 = a3;
  v705 = a3;
  if (!a2)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error: ParseXmlInternal passed a NULL context.", 0);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    goto LABEL_1656;
  }
  v8 = (_QWORD *)((char *)a2 + 504);
  v9 = *((_QWORD *)a2 + 63);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (v14)
    {
      if (!v9)
        goto LABEL_14;
LABEL_18:
      v18 = *((_QWORD *)a2 + 64);
      *(_QWORD *)&v704 = *((_QWORD *)a2 + 63);
      *((_QWORD *)&v704 + 1) = v18;
      if (v18)
      {
        v19 = (unint64_t *)(v18 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      goto LABEL_21;
    }
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v9)
      goto LABEL_18;
LABEL_14:
    v15 = (std::__shared_weak_count *)operator new(0x308uLL);
    v15->__shared_owners_ = 0;
    v16 = (unint64_t *)&v15->__shared_owners_;
    v15->__shared_weak_owners_ = 0;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7935938;
    bzero(&v15[1], 0x2F0uLL);
    siri::dialogengine::File::File((siri::dialogengine::File *)&v15[1]);
    std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v8, (uint64_t)&v15[1], (uint64_t)v15);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    goto LABEL_18;
  }
  if (!v9)
    goto LABEL_14;
  v704 = (unint64_t)*v8;
LABEL_21:
  __p = 0uLL;
  v701 = 0;
  v697 = 0;
  v696 = 0;
  v698 = 0;
  v694 = 0;
  v693 = 0;
  v695 = 0;
  v619 = *((_DWORD *)a2 + 2);
  siri::dialogengine::XmlErrorHandler::XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)v690, a2);
  v621 = a2;
  siri::dialogengine::ReadNextNode(v4, (uint64_t)&v664);
  p_p = (std::string *)&__p;
  data = v664.__r_.__value_.__l.__data_;
  v699 = v664.__r_.__value_.__l.__data_;
  if (SHIBYTE(v701) < 0)
  {
    operator delete((void *)__p);
    data = v699;
  }
  __p = *(_OWORD *)&v664.__r_.__value_.__r.__words[1];
  v701 = v665[0];
  v702 = *(_OWORD *)&v665[1];
  v703 = (__int16)v665[3];
  if (data != 1)
    goto LABEL_1643;
  v614 = 0;
  v24 = 1;
  while (2)
  {
    if ((v24 & 1) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v722, "cat");
      if (v619 == 1)
        MEMORY[0x1C3B8D53C](&v722, "visualcat");
      v25 = v704;
      v689 = v704;
      if (*((_QWORD *)&v704 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v704 + 1) + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      std::string::basic_string[abi:ne180100]<0>(&v720, "5.0");
      siri::dialogengine::GetMajorVersion(&v720, &v721);
      if (SHIBYTE(v701) < 0)
      {
        if (*((_QWORD *)&__p + 1) != 3)
        {
LABEL_40:
          siri::dialogengine::GetXmlLineString((uint64_t)&v699, &__str);
          v32 = std::string::insert(&__str, 0, "Root node in XML file is not <cat> ");
          v664 = *v32;
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          v32->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::File::AddValidationError(v25, (__int128 *)&v664, 0);
          if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v664.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v33 = 0;
          v699 = -1;
          goto LABEL_45;
        }
        v28 = (std::string *)__p;
      }
      else
      {
        v28 = p_p;
        if (SHIBYTE(v701) != 3)
          goto LABEL_40;
      }
      data_low = LOWORD(v28->__r_.__value_.__l.__data_);
      v30 = v28->__r_.__value_.__s.__data_[2];
      if (data_low != 24931 || v30 != 116)
        goto LABEL_40;
      std::string::basic_string[abi:ne180100]<0>(&v729, "xmlns");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v729, &__str);
      siri::dialogengine::StringTrim(" \t\n\r", &__str, &v664);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v729.__r_.__value_.__l.__data_);
      siri::dialogengine::StringSplit((unsigned __int8 *)&v664, ":", &__str);
      if (__str.__r_.__value_.__r.__words[0] == __str.__r_.__value_.__l.__size_)
      {
        siri::dialogengine::GetXmlLineString((uint64_t)&v699, &v727);
        v102 = std::string::insert(&v727, 0, "XML <cat> element does not specify an xmlns attribute ");
        v728 = *v102;
        v102->__r_.__value_.__l.__size_ = 0;
        v102->__r_.__value_.__r.__words[2] = 0;
        v102->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::File::AddValidationError(v25, (__int128 *)&v728, 0);
        if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v728.__r_.__value_.__l.__data_);
        if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v727.__r_.__value_.__l.__data_);
        v33 = 0;
        v699 = -1;
        goto LABEL_444;
      }
      if (*(char *)(__str.__r_.__value_.__l.__size_ - 25) < 0)
      {
        std::string::__init_copy_ctor_external(&v728, *(const std::string::value_type **)(__str.__r_.__value_.__l.__size_ - 48), *(_QWORD *)(__str.__r_.__value_.__l.__size_ - 40));
      }
      else
      {
        v38 = *(_OWORD *)(__str.__r_.__value_.__l.__size_ - 48);
        v728.__r_.__value_.__r.__words[2] = *(_QWORD *)(__str.__r_.__value_.__l.__size_ - 32);
        *(_OWORD *)&v728.__r_.__value_.__l.__data_ = v38;
      }
      if (!siri::dialogengine::StringsEqual((uint64_t)&v728, (uint64_t)&v722))
      {
        std::operator+<char>();
        v110 = std::string::append(&v724, "\" not \"");
        v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        v725.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v725.__r_.__value_.__l.__data_ = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        if ((v722.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v112 = &v722;
        else
          v112 = (std::string *)v722.__r_.__value_.__r.__words[0];
        if ((v722.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v722.__r_.__value_.__r.__words[2]);
        else
          size = v722.__r_.__value_.__l.__size_;
        v114 = std::string::append(&v725, (const std::string::value_type *)v112, size);
        v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
        v726.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v726.__r_.__value_.__l.__data_ = v115;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        v114->__r_.__value_.__r.__words[0] = 0;
        v116 = std::string::append(&v726, "\"");
        v727 = *v116;
        v116->__r_.__value_.__l.__size_ = 0;
        v116->__r_.__value_.__r.__words[2] = 0;
        v116->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::File::AddValidationError(v25, (__int128 *)&v727, 0);
        if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v727.__r_.__value_.__l.__data_);
        if (SHIBYTE(v726.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v726.__r_.__value_.__l.__data_);
        if (SHIBYTE(v725.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v725.__r_.__value_.__l.__data_);
        if (SHIBYTE(v724.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v724.__r_.__value_.__l.__data_);
        v33 = 0;
        v699 = -1;
        goto LABEL_442;
      }
      if (SHIBYTE(v722.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v722.__r_.__value_.__l.__size_ == 9)
        {
          v109 = (std::string *)v722.__r_.__value_.__r.__words[0];
LABEL_392:
          v118 = v109->__r_.__value_.__r.__words[0];
          v119 = v109->__r_.__value_.__s.__data_[8];
          if (v118 == 0x61636C6175736976 && v119 == 116)
            goto LABEL_421;
        }
      }
      else if (SHIBYTE(v722.__r_.__value_.__r.__words[2]) == 9)
      {
        v109 = &v722;
        goto LABEL_392;
      }
      v121 = (const std::string::value_type **)(__str.__r_.__value_.__l.__size_ - 24);
      if (*(char *)(__str.__r_.__value_.__l.__size_ - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v727, *v121, *(_QWORD *)(__str.__r_.__value_.__l.__size_ - 16));
      }
      else
      {
        v122 = *(_OWORD *)v121;
        v727.__r_.__value_.__r.__words[2] = *(_QWORD *)(__str.__r_.__value_.__l.__size_ - 8);
        *(_OWORD *)&v727.__r_.__value_.__l.__data_ = v122;
      }
      siri::dialogengine::GetMajorVersion(&v727, &v726);
      if (siri::dialogengine::VersionGreaterThan((uint64_t)&v726, (uint64_t)&v721))
      {
        std::operator+<char>();
        v123 = std::string::append(&v723, ") is too new: ");
        v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
        v724.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v724.__r_.__value_.__l.__data_ = v124;
        v123->__r_.__value_.__l.__size_ = 0;
        v123->__r_.__value_.__r.__words[2] = 0;
        v123->__r_.__value_.__r.__words[0] = 0;
        v125 = *(char *)(a4 + 23);
        if (v125 >= 0)
          v126 = (const std::string::value_type *)a4;
        else
          v126 = *(const std::string::value_type **)a4;
        if (v125 >= 0)
          v127 = *(unsigned __int8 *)(a4 + 23);
        else
          v127 = *(_QWORD *)(a4 + 8);
        v128 = std::string::append(&v724, v126, v127);
        v725 = *v128;
        v128->__r_.__value_.__l.__size_ = 0;
        v128->__r_.__value_.__r.__words[2] = 0;
        v128->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::File::AddValidationError(v25, (__int128 *)&v725, 0);
        if (SHIBYTE(v725.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v725.__r_.__value_.__l.__data_);
        if (SHIBYTE(v724.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v724.__r_.__value_.__l.__data_);
        if (SHIBYTE(v723.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v723.__r_.__value_.__l.__data_);
        v699 = -1;
        if (SHIBYTE(v726.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v726.__r_.__value_.__l.__data_);
        if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v727.__r_.__value_.__l.__data_);
        v33 = 0;
LABEL_442:
        if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v728.__r_.__value_.__l.__data_);
LABEL_444:
        v728.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v728);
        if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v664.__r_.__value_.__l.__data_);
LABEL_45:
        if (SHIBYTE(v721.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v721.__r_.__value_.__l.__data_);
        if (SHIBYTE(v720.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v720.__r_.__value_.__l.__data_);
          if (!*((_QWORD *)&v25 + 1))
            goto LABEL_54;
        }
        else if (!*((_QWORD *)&v25 + 1))
        {
          goto LABEL_54;
        }
        v34 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
          if ((v33 & 1) == 0)
            goto LABEL_79;
          goto LABEL_55;
        }
LABEL_54:
        if ((v33 & 1) == 0)
          goto LABEL_79;
LABEL_55:
        std::string::basic_string[abi:ne180100]<0>(v687, "xmlns");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v687, &__str);
        siri::dialogengine::StringSplit((unsigned __int8 *)&__str, ":", &v664);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v688 < 0)
          operator delete(v687[0]);
        if (v664.__r_.__value_.__l.__size_ != v664.__r_.__value_.__r.__words[0])
        {
          v36 = (const std::string::value_type **)(v664.__r_.__value_.__l.__size_ - 24);
          if (*(char *)(v664.__r_.__value_.__l.__size_ - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&__str, *v36, *(_QWORD *)(v664.__r_.__value_.__l.__size_ - 16));
          }
          else
          {
            v37 = *(_OWORD *)v36;
            __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v664.__r_.__value_.__l.__size_ - 8);
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v37;
          }
          if (siri::dialogengine::IsValidVersionNumber((char *)&__str))
          {
            std::string::operator=((std::string *)(v704 + 152), &__str);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v729, "CAT file does not define a valid version number in an xmlns attribute");
            siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&v729, 0);
            if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v729.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v664;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_79:
        if (SHIBYTE(v722.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v722.__r_.__value_.__l.__data_);
        if ((v33 & 1) == 0)
          goto LABEL_1642;
        goto LABEL_82;
      }
      if (SHIBYTE(v726.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v726.__r_.__value_.__l.__data_);
      if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v727.__r_.__value_.__l.__data_);
LABEL_421:
      std::string::basic_string[abi:ne180100]<0>(&v725, "id");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v725, &v726);
      siri::dialogengine::StringTrim(" \t\n\r", &v726, &v727);
      if (SHIBYTE(v726.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v726.__r_.__value_.__l.__data_);
      if (SHIBYTE(v725.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v725.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v723, "locale");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v723, &v724);
      siri::dialogengine::StringTrim(" \t\n\r", &v724, &v726);
      if (SHIBYTE(v724.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v724.__r_.__value_.__l.__data_);
      if (SHIBYTE(v723.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v723.__r_.__value_.__l.__data_);
      v129 = HIBYTE(v727.__r_.__value_.__r.__words[2]);
      if ((v727.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v129 = v727.__r_.__value_.__l.__size_;
      if (v129)
        std::string::operator=((std::string *)(v25 + 104), &v727);
      v130 = HIBYTE(v726.__r_.__value_.__r.__words[2]);
      v131 = HIBYTE(v726.__r_.__value_.__r.__words[2]);
      if ((v726.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v130 = v726.__r_.__value_.__l.__size_;
      if (v130)
      {
        siri::dialogengine::File::SetLocale(v25, &v726);
        v131 = HIBYTE(v726.__r_.__value_.__r.__words[2]);
      }
      if (v131 < 0)
        operator delete(v726.__r_.__value_.__l.__data_);
      if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v727.__r_.__value_.__l.__data_);
      v33 = 1;
      goto LABEL_442;
    }
LABEL_82:
    if (SHIBYTE(v701) < 0)
    {
      if (*((_QWORD *)&__p + 1) != 8)
        goto LABEL_90;
      v39 = (std::string::__raw *)__p;
    }
    else
    {
      v39 = (std::string::__raw *)p_p;
      if (SHIBYTE(v701) != 8)
        goto LABEL_90;
    }
    if (v39->__words[0] == 0x746E656D6D6F6323)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "XML comments are not supported in CAT files. Use a 'note' attribute or <meta/> element instead");
      siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v664, *((uint64_t *)&v702 + 1), (const std::string *)a4);
      siri::dialogengine::Context::AddValidationWarning((uint64_t)v621, (__int128 *)&__str, (uint64_t)&v664);
      siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v664.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_90:
    if (!(_BYTE)v703)
      goto LABEL_1333;
    v40 = v697;
    if ((unint64_t)v697 >= v698)
    {
      v42 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v696, (__int128 *)p_p);
    }
    else
    {
      if (SHIBYTE(v701) < 0)
      {
        std::string::__init_copy_ctor_external(v697, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v41 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
        v697->__r_.__value_.__r.__words[2] = p_p->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
      }
      v42 = v40 + 1;
    }
    v697 = v42;
    v43 = HIBYTE(v701);
    if ((HIBYTE(v701) & 0x80) != 0)
    {
      v45 = *((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1) != 4)
        goto LABEL_116;
      v44 = (std::string *)__p;
LABEL_102:
      if (LODWORD(v44->__r_.__value_.__l.__data_) != 1635018093)
      {
LABEL_103:
        if ((SHIBYTE(v701) & 0x80000000) == 0)
        {
          v43 = HIBYTE(v701);
          goto LABEL_105;
        }
        v45 = *((_QWORD *)&__p + 1);
LABEL_116:
        if (v45 != 9)
          goto LABEL_122;
        v46 = (std::string *)__p;
        goto LABEL_118;
      }
      siri::dialogengine::EnclosingElement(&v664, (uint64_t)v696, (uint64_t)v42);
      if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
      {
        v87 = (void *)v664.__r_.__value_.__r.__words[0];
        if (v664.__r_.__value_.__l.__size_ != 3)
        {
LABEL_451:
          operator delete(v87);
          goto LABEL_103;
        }
        v89 = *(_WORD *)v664.__r_.__value_.__l.__data_ != 24931
           || *(_BYTE *)(v664.__r_.__value_.__r.__words[0] + 2) != 116;
        operator delete(v664.__r_.__value_.__l.__data_);
        if (v89)
          goto LABEL_103;
      }
      else
      {
        if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) != 3)
          goto LABEL_103;
        if (LOWORD(v664.__r_.__value_.__l.__data_) != 24931 || v664.__r_.__value_.__s.__data_[2] != 116)
          goto LABEL_103;
      }
      std::string::basic_string[abi:ne180100]<0>(v685, "name");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v685, &v664);
      siri::dialogengine::StringToLower((uint64_t)&v664, (uint64_t)&__str);
      if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v664.__r_.__value_.__l.__data_);
      if (v686 < 0)
        operator delete(v685[0]);
      std::string::basic_string[abi:ne180100]<0>(v683, "value");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v683, &v729);
      if (v684 < 0)
        operator delete(v683[0]);
      v90 = v704;
      siri::dialogengine::File::GetMetadata(v704, (uint64_t)&__str, (uint64_t *)&v728);
      if (&v728.__r_.__value_.__r.__words[1] == (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&v728, (const void **)&v729.__r_.__value_.__l.__data_))
      {
        siri::dialogengine::File::AddMetadata(v90, (uint64_t)&__str, (const void **)&v729.__r_.__value_.__l.__data_);
      }
      else
      {
        siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v664, *((uint64_t *)&v702 + 1), (const std::string *)a4);
        std::operator+<char>();
        v91 = std::string::append(&v726, "'.");
        v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
        v727.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v727.__r_.__value_.__l.__data_ = v92;
        v91->__r_.__value_.__l.__size_ = 0;
        v91->__r_.__value_.__r.__words[2] = 0;
        v91->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationWarning((uint64_t)v621, (__int128 *)&v727, (uint64_t)&v664);
        if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v727.__r_.__value_.__l.__data_);
        if (SHIBYTE(v726.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v726.__r_.__value_.__l.__data_);
        siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v664.__r_.__value_.__l.__data_);
      }
      std::__tree<std::string>::destroy((uint64_t)&v728, (char *)v728.__r_.__value_.__l.__size_);
      if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v729.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_103;
      v87 = (void *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_451;
    }
    v44 = p_p;
    if (HIBYTE(v701) == 4)
      goto LABEL_102;
LABEL_105:
    v46 = p_p;
    if (v43 != 9)
      goto LABEL_122;
LABEL_118:
    v48 = v46->__r_.__value_.__r.__words[0];
    v49 = v46->__r_.__value_.__s.__data_[8];
    if (v48 != 0x6574656D61726170 || v49 != 114)
      goto LABEL_122;
    siri::dialogengine::EnclosingElement(&v664, (uint64_t)v696, (uint64_t)v697);
    if ((SHIBYTE(v664.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) != 10)
        goto LABEL_122;
      if (v664.__r_.__value_.__r.__words[0] != 0x6574656D61726170
        || LOWORD(v664.__r_.__value_.__r.__words[1]) != 29554)
      {
        goto LABEL_122;
      }
      goto LABEL_263;
    }
    if (v664.__r_.__value_.__l.__size_ != 10)
    {
      operator delete(v664.__r_.__value_.__l.__data_);
      goto LABEL_122;
    }
    v94 = *(_QWORD *)v664.__r_.__value_.__l.__data_ != 0x6574656D61726170
       || *(_WORD *)(v664.__r_.__value_.__r.__words[0] + 8) != 29554;
    operator delete(v664.__r_.__value_.__l.__data_);
    if (!v94)
    {
LABEL_263:
      v672 = 0;
      v670 = 0u;
      v671 = 0u;
      v668 = 0u;
      v669 = 0u;
      v666 = 0u;
      v667 = 0u;
      memset(v665, 0, sizeof(v665));
      *(_OWORD *)&v664.__r_.__value_.__r.__words[1] = 0u;
      v673 = 257;
      memset(v674, 0, sizeof(v674));
      v676 = 0u;
      v677 = 0u;
      v678 = 0u;
      v679 = 0;
      v682[0] = 0;
      v682[1] = 0;
      v664.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E793AE30;
      v675 = &unk_1E793AE60;
      v681 = v682;
      v680 = (void (**)(siri::dialogengine::ValidationBase *__hidden))&unk_1E793AE80;
      std::string::basic_string[abi:ne180100]<0>(v662, "name");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v662, &__str);
      std::string::operator=((std::string *)&v664.__r_.__value_.__r.__words[1], &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v663 < 0)
        operator delete(v662[0]);
      std::string::basic_string[abi:ne180100]<0>(v660, "type");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v660, &__str);
      std::string::operator=((std::string *)&v665[1], &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v661 < 0)
        operator delete(v660[0]);
      std::string::basic_string[abi:ne180100]<0>(v658, "description");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v658, &__str);
      std::string::operator=((std::string *)&v666, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v659 < 0)
        operator delete(v658[0]);
      std::string::basic_string[abi:ne180100]<0>(v656, "semanticConcept");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v656, &__str);
      std::string::operator=((std::string *)v674, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v657 < 0)
        operator delete(v656[0]);
      std::string::basic_string[abi:ne180100]<0>(v654, "sampleValue");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v654, &__str);
      std::string::operator=((std::string *)((char *)&v667 + 8), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v655 < 0)
        operator delete(v654[0]);
      std::string::basic_string[abi:ne180100]<0>(v652, "deprecated");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v652, &__str);
      std::string::operator=((std::string *)((char *)&v670 + 8), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v653 < 0)
        operator delete(v652[0]);
      std::string::basic_string[abi:ne180100]<0>(v650, "valueFromCat");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v650, &__str);
      std::string::operator=((std::string *)&v674[24], &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v651 < 0)
        operator delete(v650[0]);
      std::string::basic_string[abi:ne180100]<0>(v648, "profanityFilter");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v648, &__str);
      if (v649 < 0)
        operator delete(v648[0]);
      v95 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v95 = __str.__r_.__value_.__l.__size_;
      if (v95)
        v672 = siri::dialogengine::StringToBool(&__str);
      std::string::basic_string[abi:ne180100]<0>(v646, "optional");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v646, &v729);
      if (v647 < 0)
        operator delete(v646[0]);
      v96 = HIBYTE(v729.__r_.__value_.__r.__words[2]);
      if ((v729.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v96 = v729.__r_.__value_.__l.__size_;
      if (v96)
        LOBYTE(v673) = siri::dialogengine::StringToBool(&v729);
      std::string::basic_string[abi:ne180100]<0>(v644, "redacted");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v644, &v728);
      if (v645 < 0)
        operator delete(v644[0]);
      v97 = HIBYTE(v728.__r_.__value_.__r.__words[2]);
      if ((v728.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v97 = v728.__r_.__value_.__l.__size_;
      if (v97)
        HIBYTE(v673) = siri::dialogengine::StringToBool(&v728);
      *(_QWORD *)&v676 = *((_QWORD *)&v702 + 1);
      siri::dialogengine::LineNumberBase::SetFullPath((uint64_t)&v675, (const std::string *)a4);
      siri::dialogengine::File::AddParameter((siri::dialogengine::File *)v704, (const siri::dialogengine::Parameter *)&v664);
      if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v728.__r_.__value_.__l.__data_);
      if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v729.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v680 = off_1E793AED8;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v682[0]);
      siri::dialogengine::LineNumberBase::~LineNumberBase(&v675);
      siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&v664.__r_.__value_.__l.__data_);
    }
LABEL_122:
    v51 = HIBYTE(v701);
    if (SHIBYTE(v701) < 0)
    {
      v53 = *((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1) != 9)
        goto LABEL_152;
      v52 = (std::string *)__p;
    }
    else
    {
      v52 = p_p;
      if (HIBYTE(v701) != 9)
      {
LABEL_132:
        if (v51 != 7)
        {
          v715 = 0uLL;
          v714 = 0uLL;
LABEL_164:
          v66 = v51 - 3;
          v65 = (std::string::__raw *)p_p;
          switch(v66)
          {
            case 0:
              if ((unsigned __int16)__p == 27745 && BYTE2(__p) == 108)
                goto LABEL_179;
              goto LABEL_753;
            case 2:
              if ((_DWORD)__p == 1936877926 && BYTE4(__p) == 116)
                goto LABEL_218;
              goto LABEL_753;
            case 3:
              if ((_DWORD)__p == 1684955506 && WORD2(__p) == 28015)
                goto LABEL_212;
              if ((_DWORD)__p != 1953068915 || WORD2(__p) != 26723)
                goto LABEL_753;
              goto LABEL_211;
            case 5:
              goto LABEL_222;
            default:
              goto LABEL_753;
          }
        }
        v57 = p_p;
        goto LABEL_154;
      }
    }
    v54 = v52->__r_.__value_.__r.__words[0];
    v55 = v52->__r_.__value_.__s.__data_[8];
    if (v54 != 0x6F697469646E6F63 || v55 != 110)
      goto LABEL_131;
    siri::dialogengine::EnclosingElement(&v664, (uint64_t)v696, (uint64_t)v697);
    if ((SHIBYTE(v664.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) != 10)
        goto LABEL_131;
      if (v664.__r_.__value_.__r.__words[0] != 0x6F697469646E6F63
        || LOWORD(v664.__r_.__value_.__r.__words[1]) != 29550)
      {
        goto LABEL_131;
      }
LABEL_324:
      v100 = (char *)operator new(0xC0uLL);
      *(_OWORD *)(v100 + 8) = 0u;
      *(_QWORD *)v100 = &off_1E7934DC0;
      *((_QWORD *)v100 + 3) = off_1E7939B60;
      *((_OWORD *)v100 + 2) = 0u;
      *((_OWORD *)v100 + 3) = 0u;
      *((_OWORD *)v100 + 4) = 0u;
      *(_OWORD *)(v100 + 104) = 0u;
      *((_QWORD *)v100 + 12) = v100 + 104;
      *((_QWORD *)v100 + 10) = 0;
      *((_QWORD *)v100 + 11) = &unk_1E7939B88;
      *(_OWORD *)(v100 + 120) = 0u;
      *(_OWORD *)(v100 + 136) = 0u;
      *(_OWORD *)(v100 + 152) = 0u;
      *(_OWORD *)(v100 + 168) = 0u;
      *((_QWORD *)v100 + 23) = 0;
      v720.__r_.__value_.__r.__words[0] = (std::string::size_type)(v100 + 24);
      v720.__r_.__value_.__l.__size_ = (std::string::size_type)v100;
      std::string::basic_string[abi:ne180100]<0>(&v728, "name");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v728, &v729);
      if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v728.__r_.__value_.__l.__data_);
      std::string::operator=((std::string *)v100 + 5, &v729);
      std::string::basic_string[abi:ne180100]<0>(&v727, "note");
      siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v727, &v664);
      std::string::operator=((std::string *)v100 + 6, &v664);
      if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v664.__r_.__value_.__l.__data_);
      if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v727.__r_.__value_.__l.__data_);
      *((_QWORD *)v100 + 4) = *((_QWORD *)&v702 + 1);
      siri::dialogengine::LineNumberBase::SetFullPath((uint64_t)(v100 + 24), (const std::string *)a4);
      v101 = v699;
      LODWORD(v664.__r_.__value_.__l.__data_) = v699;
      if (SHIBYTE(v701) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v664.__r_.__value_.__r.__words[1], (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
        v101 = v664.__r_.__value_.__l.__data_;
      }
      else
      {
        *(_OWORD *)&v664.__r_.__value_.__r.__words[1] = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
        v665[0] = (void *)p_p->__r_.__value_.__r.__words[2];
      }
      *(_OWORD *)&v665[1] = v702;
      LOWORD(v665[3]) = v703;
      memset(&v726, 0, sizeof(v726));
      if (v101 == -1)
      {
LABEL_638:
        v699 = v101;
        std::string::operator=(p_p, (const std::string *)&v664.__r_.__value_.__r.__words[1]);
        v702 = *(_OWORD *)&v665[1];
        v703 = (__int16)v665[3];
        v643 = *(_OWORD *)&v720.__r_.__value_.__l.__data_;
        v204 = &v720;
        goto LABEL_1444;
      }
      v132 = 1;
      while (1)
      {
        v133 = BYTE1(v665[3]);
        if (BYTE1(v665[3]))
        {
          if ((HIBYTE(v665[0]) & 0x80) == 0)
          {
            v134 = 0;
            p_size = (std::string::size_type)&v664.__r_.__value_.__l.__size_;
            v136 = (std::string::size_type)&v664.__r_.__value_.__l.__size_;
            switch(HIBYTE(v665[0]))
            {
              case 2:
                goto LABEL_491;
              case 3:
                goto LABEL_481;
              case 9:
                goto LABEL_460;
              case 0xA:
                goto LABEL_474;
              default:
                goto LABEL_493;
            }
          }
          v137 = v664.__r_.__value_.__r.__words[2];
          if (v664.__r_.__value_.__r.__words[2] != 9)
            goto LABEL_470;
          v136 = v664.__r_.__value_.__l.__size_;
LABEL_460:
          if (*(_QWORD *)v136 == 0x6F697469646E6F63 && *(_BYTE *)(v136 + 8) == 110)
          {
LABEL_637:
            if ((v132 & 1) != 0)
              goto LABEL_638;
            std::operator+<char>();
            v526 = std::string::append(&v721, "'. Possibly old style?");
            v527 = *(_OWORD *)&v526->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v526->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v527;
            v526->__r_.__value_.__l.__size_ = 0;
            v526->__r_.__value_.__r.__words[2] = 0;
            v526->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&__str, (uint64_t)v720.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v721.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v721.__r_.__value_.__l.__data_);
            v204 = (std::string *)&v643;
LABEL_1444:
            v204->__r_.__value_.__r.__words[0] = 0;
            v204->__r_.__value_.__l.__size_ = 0;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v726;
            std::vector<std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            if (SHIBYTE(v665[0]) < 0)
              operator delete((void *)v664.__r_.__value_.__l.__size_);
            if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v729.__r_.__value_.__l.__data_);
            v528 = (std::__shared_weak_count *)v720.__r_.__value_.__l.__size_;
            if (v720.__r_.__value_.__l.__size_)
            {
              v529 = (unint64_t *)(v720.__r_.__value_.__l.__size_ + 8);
              do
                v530 = __ldaxr(v529);
              while (__stlxr(v530 - 1, v529));
              if (!v530)
              {
                ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
                std::__shared_weak_count::__release_weak(v528);
              }
            }
            v531 = v643;
            if ((_QWORD)v643)
            {
              v532 = v704;
              if (*(char *)(v643 + 119) < 0)
                std::string::__init_copy_ctor_external(&v664, *(const std::string::value_type **)(v643 + 96), *(_QWORD *)(v643 + 104));
              else
                v664 = *(std::string *)(v643 + 96);
              v544 = std::__tree<std::string>::find<std::string>(v532 + 272, (const void **)&v664.__r_.__value_.__l.__data_);
              if (v532 + 280 == v544)
              {
                v549 = 1;
              }
              else
              {
                v545 = *(_QWORD *)(v544 + 56);
                v546 = *(std::__shared_weak_count **)(v544 + 64);
                if (v546)
                {
                  v547 = (unint64_t *)&v546->__shared_owners_;
                  do
                    v548 = __ldxr(v547);
                  while (__stxr(v548 + 1, v547));
                  v549 = v545 == 0;
                  do
                    v550 = __ldaxr(v547);
                  while (__stlxr(v550 - 1, v547));
                  if (!v550)
                  {
                    ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
                    std::__shared_weak_count::__release_weak(v546);
                  }
                }
                else
                {
                  v549 = v545 == 0;
                }
              }
              if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v664.__r_.__value_.__l.__data_);
              v579 = v643;
              if (!v549)
              {
                if (*(char *)(v643 + 119) < 0)
                  std::string::__init_copy_ctor_external(&v729, *(const std::string::value_type **)(v643 + 96), *(_QWORD *)(v643 + 104));
                else
                  v729 = *(std::string *)(v643 + 96);
                v583 = std::string::insert(&v729, 0, "Duplicate condition name: '");
                v584 = *(_OWORD *)&v583->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v583->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v584;
                v583->__r_.__value_.__l.__size_ = 0;
                v583->__r_.__value_.__r.__words[2] = 0;
                v583->__r_.__value_.__r.__words[0] = 0;
                v585 = std::string::append(&__str, "'.");
                v586 = *(_OWORD *)&v585->__r_.__value_.__l.__data_;
                v664.__r_.__value_.__r.__words[2] = v585->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v664.__r_.__value_.__l.__data_ = v586;
                v585->__r_.__value_.__l.__size_ = 0;
                v585->__r_.__value_.__r.__words[2] = 0;
                v585->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&v664, v579);
                if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v664.__r_.__value_.__l.__data_);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v729.__r_.__value_.__l.__data_);
              }
              v587 = v704;
              v588 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
              v642[0] = v579;
              v642[1] = *((_QWORD *)&v643 + 1);
              if (*((_QWORD *)&v643 + 1))
              {
                v589 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
                do
                  v590 = __ldxr(v589);
                while (__stxr(v590 + 1, v589));
              }
              siri::dialogengine::File::AddCondition(v587, (uint64_t)v642);
              if (v588)
              {
                v591 = (unint64_t *)&v588->__shared_owners_;
                do
                  v592 = __ldaxr(v591);
                while (__stlxr(v592 - 1, v591));
                if (!v592)
                {
                  ((void (*)(std::__shared_weak_count *))v588->__on_zero_shared)(v588);
                  std::__shared_weak_count::__release_weak(v588);
                }
              }
            }
            else
            {
              v699 = -1;
            }
            v593 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
            if (*((_QWORD *)&v643 + 1))
            {
              v594 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
              do
                v595 = __ldaxr(v594);
              while (__stlxr(v595 - 1, v594));
              if (!v595)
              {
                ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
                std::__shared_weak_count::__release_weak(v593);
              }
            }
            if (!v531)
            {
LABEL_1642:
              data = v699;
              goto LABEL_1643;
            }
            goto LABEL_131;
          }
        }
        if ((HIBYTE(v665[0]) & 0x80) != 0)
          break;
        switch(HIBYTE(v665[0]))
        {
          case 2u:
LABEL_491:
            if (LOWORD(v664.__r_.__value_.__r.__words[1]) == 29295)
              goto LABEL_492;
            break;
          case 3u:
LABEL_481:
            v141 = LOWORD(v664.__r_.__value_.__r.__words[1]) == 28526 && v664.__r_.__value_.__s.__data_[10] == 116;
            if (v141
              || (LOWORD(v664.__r_.__value_.__r.__words[1]) == 28257
                ? (v142 = v664.__r_.__value_.__s.__data_[10] == 100)
                : (v142 = 0),
                  v142))
            {
LABEL_492:
              v143 = 0;
              goto LABEL_533;
            }
            break;
          case 0xAu:
            v134 = 0;
            p_size = (std::string::size_type)&v664.__r_.__value_.__l.__size_;
            goto LABEL_474;
          default:
LABEL_493:
            v139 = LOBYTE(v665[3]) == 0;
            if (HIBYTE(v665[0]) == 13)
            {
              v144 = &v664.__r_.__value_.__l.__size_;
LABEL_559:
              if (*v144 ^ 0x646E6F632D627573 | *(_QWORD *)((char *)v144 + 5) ^ 0x6E6F697469646E6FLL || v139)
                break;
              v172 = (char *)operator new(0xC8uLL);
              *(_OWORD *)(v172 + 8) = 0u;
              v173 = (unint64_t *)(v172 + 8);
              *(_QWORD *)v172 = &off_1E7933B28;
              *((_QWORD *)v172 + 3) = off_1E792ECF0;
              *(_OWORD *)(v172 + 40) = 0u;
              *((_QWORD *)v172 + 4) = v172 + 40;
              *((_OWORD *)v172 + 4) = 0u;
              *((_OWORD *)v172 + 5) = 0u;
              *((_OWORD *)v172 + 6) = 0u;
              *((_DWORD *)v172 + 14) = 4;
              *((_QWORD *)v172 + 14) = &unk_1E792ED30;
              *(_OWORD *)(v172 + 120) = 0u;
              *(_OWORD *)(v172 + 136) = 0u;
              *(_OWORD *)(v172 + 152) = 0u;
              *(_OWORD *)(v172 + 168) = 0u;
              *(_OWORD *)(v172 + 184) = 0u;
              v721.__r_.__value_.__r.__words[0] = (std::string::size_type)(v172 + 24);
              v721.__r_.__value_.__l.__size_ = (std::string::size_type)v172;
              std::string::basic_string[abi:ne180100]<0>(&v722, "name");
              siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v722, &__str);
              siri::dialogengine::ConditionSubCondition::SetName((uint64_t)(v172 + 24), &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v722.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v722.__r_.__value_.__l.__data_);
              *((void **)v172 + 15) = v665[2];
              siri::dialogengine::LineNumberBase::SetFullPath((uint64_t)(v172 + 112), (const std::string *)a4);
              if ((v132 & 1) != 0)
              {
                *(_QWORD *)&v711 = v172 + 24;
                *((_QWORD *)&v711 + 1) = v172;
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
                v175 = (std::__shared_weak_count *)v720.__r_.__value_.__l.__size_;
                v710 = *(_OWORD *)&v720.__r_.__value_.__l.__data_;
                if (v720.__r_.__value_.__l.__size_)
                {
                  v176 = (unint64_t *)(v720.__r_.__value_.__l.__size_ + 8);
                  do
                    v177 = __ldxr(v176);
                  while (__stxr(v177 + 1, v176));
                }
                v132 = siri::dialogengine::AddConditionEntry(&v711, v4, (uint64_t)&v726, (uint64_t *)&v710);
                if (v175)
                {
                  v178 = (unint64_t *)&v175->__shared_owners_;
                  do
                    v179 = __ldaxr(v178);
                  while (__stlxr(v179 - 1, v178));
                  if (!v179)
                  {
                    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                    std::__shared_weak_count::__release_weak(v175);
                  }
                }
                v180 = (std::__shared_weak_count *)*((_QWORD *)&v711 + 1);
                if (*((_QWORD *)&v711 + 1))
                {
                  v181 = (unint64_t *)(*((_QWORD *)&v711 + 1) + 8);
                  do
                    v182 = __ldaxr(v181);
                  while (__stlxr(v182 - 1, v181));
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                    std::__shared_weak_count::__release_weak(v180);
                  }
                }
              }
              else
              {
                v132 = 0;
              }
              v191 = (std::__shared_weak_count *)v721.__r_.__value_.__l.__size_;
              if (!v721.__r_.__value_.__l.__size_)
                break;
              v194 = (unint64_t *)(v721.__r_.__value_.__l.__size_ + 8);
              do
                v193 = __ldaxr(v194);
              while (__stlxr(v193 - 1, v194));
LABEL_611:
              if (!v193)
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
              }
            }
            break;
        }
LABEL_634:
        siri::dialogengine::ReadNextNode(v4, (uint64_t)&__str);
        v101 = __str.__r_.__value_.__l.__data_;
        LODWORD(v664.__r_.__value_.__l.__data_) = __str.__r_.__value_.__l.__data_;
        if (SHIBYTE(v665[0]) < 0)
        {
          operator delete((void *)v664.__r_.__value_.__l.__size_);
          v101 = v664.__r_.__value_.__l.__data_;
        }
        *(_OWORD *)&v664.__r_.__value_.__r.__words[1] = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
        v665[0] = v707;
        *(_OWORD *)&v665[1] = v708;
        LOWORD(v665[3]) = v709;
        if (v101 == -1)
          goto LABEL_637;
      }
      v137 = v664.__r_.__value_.__r.__words[2];
LABEL_470:
      switch(v137)
      {
        case 2uLL:
          if (*(_WORD *)v664.__r_.__value_.__l.__size_ == 29295)
            goto LABEL_532;
          break;
        case 3uLL:
          v157 = *(_WORD *)v664.__r_.__value_.__l.__size_ == 28526
              && *(_BYTE *)(v664.__r_.__value_.__l.__size_ + 2) == 116;
          if (v157
            || (*(_WORD *)v664.__r_.__value_.__l.__size_ == 28257
              ? (v158 = *(_BYTE *)(v664.__r_.__value_.__l.__size_ + 2) == 100)
              : (v158 = 0),
                v158))
          {
LABEL_532:
            v143 = 1;
LABEL_533:
            if (!LOBYTE(v665[3]))
              goto LABEL_632;
            if (v143)
            {
              if (v664.__r_.__value_.__r.__words[2] != 2)
              {
                if (v664.__r_.__value_.__r.__words[2] == 3)
                {
                  v159 = (std::string::size_type *)v664.__r_.__value_.__l.__size_;
                  if (*(_WORD *)v664.__r_.__value_.__l.__size_ != 28257
                    || *(_BYTE *)(v664.__r_.__value_.__l.__size_ + 2) != 100)
                  {
LABEL_541:
                    v161 = *(unsigned __int16 *)v159 ^ 0x6F6E | *((unsigned __int8 *)v159 + 2) ^ 0x74;
                    v162 = (v161 != 0) & v132;
                    if (!v161 && ((v132 ^ 1) & 1) == 0)
                    {
                      v163 = (char *)operator new(0x70uLL);
                      *(_OWORD *)(v163 + 8) = 0u;
                      *(_QWORD *)v163 = &off_1E7933AD8;
                      *(_OWORD *)(v163 + 40) = 0u;
                      *((_QWORD *)v163 + 4) = v163 + 40;
                      *((_QWORD *)v163 + 3) = &off_1E792B438;
                      *((_OWORD *)v163 + 4) = 0u;
                      *((_OWORD *)v163 + 5) = 0u;
                      *((_OWORD *)v163 + 6) = 0u;
                      *((_DWORD *)v163 + 14) = 2;
                      *(_QWORD *)&v715 = v163 + 24;
                      *((_QWORD *)&v715 + 1) = v163;
                      v164 = (std::__shared_weak_count *)v720.__r_.__value_.__l.__size_;
                      v714 = *(_OWORD *)&v720.__r_.__value_.__l.__data_;
                      if (v720.__r_.__value_.__l.__size_)
                      {
                        v165 = (unint64_t *)(v720.__r_.__value_.__l.__size_ + 8);
                        do
                          v166 = __ldxr(v165);
                        while (__stxr(v166 + 1, v165));
                      }
                      v162 = siri::dialogengine::AddConditionEntry(&v715, v4, (uint64_t)&v726, (uint64_t *)&v714);
                      if (v164)
                      {
                        v167 = (unint64_t *)&v164->__shared_owners_;
                        do
                          v168 = __ldaxr(v167);
                        while (__stlxr(v168 - 1, v167));
                        if (!v168)
                        {
                          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                          std::__shared_weak_count::__release_weak(v164);
                        }
                      }
                      v169 = (std::__shared_weak_count *)*((_QWORD *)&v715 + 1);
                      if (*((_QWORD *)&v715 + 1))
                      {
                        v170 = (unint64_t *)(*((_QWORD *)&v715 + 1) + 8);
                        do
                          v171 = __ldaxr(v170);
                        while (__stlxr(v171 - 1, v170));
LABEL_628:
                        if (!v171)
                        {
                          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                          std::__shared_weak_count::__release_weak(v169);
                        }
                      }
                    }
                    goto LABEL_631;
                  }
LABEL_588:
                  if ((v132 & 1) != 0)
                  {
                    v184 = (char *)operator new(0x70uLL);
                    *(_OWORD *)(v184 + 8) = 0u;
                    *(_QWORD *)v184 = &off_1E7933AD8;
                    *(_OWORD *)(v184 + 40) = 0u;
                    *((_QWORD *)v184 + 4) = v184 + 40;
                    *((_QWORD *)v184 + 3) = &off_1E792B438;
                    *((_OWORD *)v184 + 4) = 0u;
                    *((_OWORD *)v184 + 5) = 0u;
                    *((_OWORD *)v184 + 6) = 0u;
                    *((_DWORD *)v184 + 14) = 0;
                    v719.__r_.__value_.__r.__words[0] = (std::string::size_type)(v184 + 24);
                    v719.__r_.__value_.__l.__size_ = (std::string::size_type)v184;
                    v185 = (std::__shared_weak_count *)v720.__r_.__value_.__l.__size_;
                    *(_OWORD *)&v718.__r_.__value_.__l.__data_ = *(_OWORD *)&v720.__r_.__value_.__l.__data_;
                    if (v720.__r_.__value_.__l.__size_)
                    {
                      v186 = (unint64_t *)(v720.__r_.__value_.__l.__size_ + 8);
                      do
                        v187 = __ldxr(v186);
                      while (__stxr(v187 + 1, v186));
                    }
                    v162 = siri::dialogengine::AddConditionEntry((__int128 *)&v719, v4, (uint64_t)&v726, (uint64_t *)&v718);
                    if (v185)
                    {
                      v188 = (unint64_t *)&v185->__shared_owners_;
                      do
                        v189 = __ldaxr(v188);
                      while (__stlxr(v189 - 1, v188));
                      if (!v189)
                      {
                        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                        std::__shared_weak_count::__release_weak(v185);
                      }
                    }
                    v169 = (std::__shared_weak_count *)v719.__r_.__value_.__l.__size_;
                    if (v719.__r_.__value_.__l.__size_)
                    {
                      v190 = (unint64_t *)(v719.__r_.__value_.__l.__size_ + 8);
                      do
                        v171 = __ldaxr(v190);
                      while (__stlxr(v171 - 1, v190));
                      goto LABEL_628;
                    }
                  }
                  else
                  {
                    v162 = 0;
                  }
LABEL_631:
                  memset(&__str, 0, sizeof(__str));
                  std::vector<std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>>::push_back[abi:ne180100]((void ***)&v726, (uint64_t)&__str);
                  v721.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v721);
                  v133 = BYTE1(v665[3]);
                  v132 = v162;
LABEL_632:
                  if (v133)
                  {
                    v203 = v726.__r_.__value_.__l.__size_ - 24;
                    __str.__r_.__value_.__r.__words[0] = v726.__r_.__value_.__l.__size_ - 24;
                    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                    v726.__r_.__value_.__l.__size_ = v203;
                  }
                  goto LABEL_634;
                }
LABEL_606:
                v162 = v132;
                goto LABEL_631;
              }
              v195 = *(unsigned __int16 *)v664.__r_.__value_.__l.__size_;
            }
            else
            {
              if (HIBYTE(v665[0]) != 2)
              {
                if (HIBYTE(v665[0]) == 3)
                {
                  v183 = LOWORD(v664.__r_.__value_.__r.__words[1]) == 28257 && v664.__r_.__value_.__s.__data_[10] == 100;
                  v159 = &v664.__r_.__value_.__l.__size_;
                  if (!v183)
                    goto LABEL_541;
                  goto LABEL_588;
                }
                goto LABEL_606;
              }
              v195 = LOWORD(v664.__r_.__value_.__r.__words[1]);
            }
            v162 = (v195 != 29295) & v132;
            if (v195 == 29295 && ((v132 ^ 1) & 1) == 0)
            {
              v196 = (char *)operator new(0x70uLL);
              *(_OWORD *)(v196 + 8) = 0u;
              *(_QWORD *)v196 = &off_1E7933AD8;
              *(_OWORD *)(v196 + 40) = 0u;
              *((_QWORD *)v196 + 4) = v196 + 40;
              *((_QWORD *)v196 + 3) = &off_1E792B438;
              *((_OWORD *)v196 + 4) = 0u;
              *((_OWORD *)v196 + 5) = 0u;
              *((_OWORD *)v196 + 6) = 0u;
              *((_DWORD *)v196 + 14) = 1;
              *(_QWORD *)&v717 = v196 + 24;
              *((_QWORD *)&v717 + 1) = v196;
              v197 = (std::__shared_weak_count *)v720.__r_.__value_.__l.__size_;
              v716 = *(_OWORD *)&v720.__r_.__value_.__l.__data_;
              if (v720.__r_.__value_.__l.__size_)
              {
                v198 = (unint64_t *)(v720.__r_.__value_.__l.__size_ + 8);
                do
                  v199 = __ldxr(v198);
                while (__stxr(v199 + 1, v198));
              }
              v162 = siri::dialogengine::AddConditionEntry(&v717, v4, (uint64_t)&v726, (uint64_t *)&v716);
              if (v197)
              {
                v200 = (unint64_t *)&v197->__shared_owners_;
                do
                  v201 = __ldaxr(v200);
                while (__stlxr(v201 - 1, v200));
                if (!v201)
                {
                  ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                  std::__shared_weak_count::__release_weak(v197);
                }
              }
              v169 = (std::__shared_weak_count *)*((_QWORD *)&v717 + 1);
              if (*((_QWORD *)&v717 + 1))
              {
                v202 = (unint64_t *)(*((_QWORD *)&v717 + 1) + 8);
                do
                  v171 = __ldaxr(v202);
                while (__stlxr(v171 - 1, v202));
                goto LABEL_628;
              }
            }
            goto LABEL_631;
          }
          break;
        case 0xAuLL:
          v134 = 1;
          p_size = v664.__r_.__value_.__l.__size_;
LABEL_474:
          v139 = LOBYTE(v665[3]) == 0;
          if (*(_QWORD *)p_size ^ 0x6973736572707865 | *(unsigned __int16 *)(p_size + 8) ^ 0x6E6FLL)
            v140 = 1;
          else
            v140 = LOBYTE(v665[3]) == 0;
          if (!v140)
          {
            v145 = (char *)operator new(0xF8uLL);
            *(_OWORD *)(v145 + 8) = 0u;
            v146 = (unint64_t *)(v145 + 8);
            *(_QWORD *)v145 = &off_1E7934E10;
            *((_QWORD *)v145 + 3) = off_1E792BCD0;
            v147 = (uint64_t)(v145 + 24);
            *(_OWORD *)(v145 + 40) = 0u;
            *((_QWORD *)v145 + 4) = v145 + 40;
            *((_OWORD *)v145 + 4) = 0u;
            *((_OWORD *)v145 + 5) = 0u;
            *((_OWORD *)v145 + 6) = 0u;
            *((_DWORD *)v145 + 14) = 3;
            *((_QWORD *)v145 + 14) = &unk_1E792BD10;
            *(_OWORD *)(v145 + 120) = 0u;
            *(_OWORD *)(v145 + 136) = 0u;
            *(_OWORD *)(v145 + 152) = 0u;
            *((_QWORD *)v145 + 21) = 0;
            *((_OWORD *)v145 + 11) = 0u;
            *((_OWORD *)v145 + 12) = 0u;
            *((_OWORD *)v145 + 13) = 0u;
            *((_OWORD *)v145 + 14) = 0u;
            *((_QWORD *)v145 + 30) = 0;
            v721.__r_.__value_.__r.__words[0] = (std::string::size_type)(v145 + 24);
            v721.__r_.__value_.__l.__size_ = (std::string::size_type)v145;
            std::string::basic_string[abi:ne180100]<0>(&v725, "name");
            siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v725, &__str);
            siri::dialogengine::ConditionExpression::SetName((uint64_t)(v145 + 24), &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v725.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v725.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v724, "op");
            siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v724, &__str);
            siri::dialogengine::ConditionExpression::SetOperator(v147, (uint64_t)&__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v724.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v724.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v723, "value");
            siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v723, &__str);
            siri::dialogengine::ConditionExpression::SetValue(v147, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v723.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v723.__r_.__value_.__l.__data_);
            *((void **)v145 + 15) = v665[2];
            siri::dialogengine::LineNumberBase::SetFullPath((uint64_t)(v145 + 112), (const std::string *)a4);
            if ((v132 & 1) != 0)
            {
              *(_QWORD *)&v713 = v145 + 24;
              *((_QWORD *)&v713 + 1) = v145;
              do
                v148 = __ldxr(v146);
              while (__stxr(v148 + 1, v146));
              v149 = (std::__shared_weak_count *)v720.__r_.__value_.__l.__size_;
              v712 = *(_OWORD *)&v720.__r_.__value_.__l.__data_;
              if (v720.__r_.__value_.__l.__size_)
              {
                v150 = (unint64_t *)(v720.__r_.__value_.__l.__size_ + 8);
                do
                  v151 = __ldxr(v150);
                while (__stxr(v151 + 1, v150));
              }
              v132 = siri::dialogengine::AddConditionEntry(&v713, v4, (uint64_t)&v726, (uint64_t *)&v712);
              if (v149)
              {
                v152 = (unint64_t *)&v149->__shared_owners_;
                do
                  v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                  std::__shared_weak_count::__release_weak(v149);
                }
              }
              v154 = (std::__shared_weak_count *)*((_QWORD *)&v713 + 1);
              if (*((_QWORD *)&v713 + 1))
              {
                v155 = (unint64_t *)(*((_QWORD *)&v713 + 1) + 8);
                do
                  v156 = __ldaxr(v155);
                while (__stlxr(v156 - 1, v155));
                if (!v156)
                {
                  ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                  std::__shared_weak_count::__release_weak(v154);
                }
              }
            }
            else
            {
              v132 = 0;
            }
            v191 = (std::__shared_weak_count *)v721.__r_.__value_.__l.__size_;
            if (!v721.__r_.__value_.__l.__size_)
              goto LABEL_634;
            v192 = (unint64_t *)(v721.__r_.__value_.__l.__size_ + 8);
            do
              v193 = __ldaxr(v192);
            while (__stlxr(v193 - 1, v192));
            goto LABEL_611;
          }
          if (!v134)
            goto LABEL_634;
          v137 = v664.__r_.__value_.__r.__words[2];
LABEL_557:
          if (v137 == 13)
          {
            v144 = (_QWORD *)v664.__r_.__value_.__l.__size_;
            goto LABEL_559;
          }
          goto LABEL_634;
      }
      v139 = LOBYTE(v665[3]) == 0;
      goto LABEL_557;
    }
    if (v664.__r_.__value_.__l.__size_ != 10)
    {
      operator delete(v664.__r_.__value_.__l.__data_);
      goto LABEL_131;
    }
    v99 = *(_QWORD *)v664.__r_.__value_.__l.__data_ != 0x6F697469646E6F63
       || *(_WORD *)(v664.__r_.__value_.__r.__words[0] + 8) != 29550;
    operator delete(v664.__r_.__value_.__l.__data_);
    if (!v99)
      goto LABEL_324;
LABEL_131:
    v51 = HIBYTE(v701);
    if ((SHIBYTE(v701) & 0x80000000) == 0)
      goto LABEL_132;
    v53 = *((_QWORD *)&__p + 1);
LABEL_152:
    if (v53 == 7)
    {
      v57 = (std::string *)__p;
LABEL_154:
      v60 = (int)v57->__r_.__value_.__l.__data_;
      v61 = *(_DWORD *)((char *)v57->__r_.__value_.__r.__words + 3);
      if (v60 == 1634887792 && v61 == 1936028513)
      {
        v63 = (uint64_t)v694;
        v64 = v693;
        if (v694 != v693)
        {
          do
            v63 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v63 - 16);
          while ((char *)v63 != v64);
          v51 = HIBYTE(v701);
        }
        v694 = v64;
        v614 = 1;
      }
      v715 = 0uLL;
      v714 = 0uLL;
      if ((v51 & 0x80) == 0)
        goto LABEL_164;
      v53 = *((_QWORD *)&__p + 1);
      goto LABEL_173;
    }
    v715 = 0uLL;
    v714 = 0uLL;
LABEL_173:
    switch(v53)
    {
      case 3:
        if (*(_WORD *)__p == 27745 && *(_BYTE *)(__p + 2) == 108)
        {
LABEL_179:
          if ((v614 & 1) == 0)
          {
            v79 = operator new(0x118uLL);
            v614 = 0;
            *(_OWORD *)((char *)v79 + 8) = 0u;
            *(_QWORD *)v79 = &off_1E7933B78;
            v79[2] = 0u;
            v79[3] = 0u;
            v79[4] = 0u;
            *(_OWORD *)((char *)v79 + 104) = 0u;
            *((_QWORD *)v79 + 12) = (char *)v79 + 104;
            *(_OWORD *)((char *)v79 + 120) = 0u;
            *(_OWORD *)((char *)v79 + 136) = 0u;
            *(_OWORD *)((char *)v79 + 152) = 0u;
            *(_OWORD *)((char *)v79 + 168) = 0u;
            *(_OWORD *)((char *)v79 + 184) = 0u;
            *(_OWORD *)((char *)v79 + 200) = 0u;
            *((_DWORD *)v79 + 54) = 1065353216;
            *((_QWORD *)v79 + 34) = 0;
            v79[15] = 0u;
            v79[16] = 0u;
            v79[14] = 0u;
            *((_QWORD *)v79 + 10) = 0;
            *((_QWORD *)v79 + 11) = &unk_1E792B890;
            *((_QWORD *)v79 + 3) = &off_1E792B838;
            v80 = (std::string::size_type)v79 + 24;
            goto LABEL_338;
          }
          v69 = *((_QWORD *)&v702 + 1);
          v70 = xmlTextReaderConstBaseUri(v4);
          if (v70)
            v71 = (char *)v70;
          else
            v71 = "";
          std::string::basic_string[abi:ne180100]<0>(&__str, v71);
          siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v664, v69, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          siri::dialogengine::GetXmlLineString((uint64_t)&v699, &v729);
          v72 = std::string::insert(&v729, 0, "Cannot use the 'all' grouping element in a phrase ");
          v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&__str, (uint64_t)&v664);
          goto LABEL_230;
        }
        goto LABEL_753;
      case 5:
        if (*(_DWORD *)__p == 1936877926 && *(_BYTE *)(__p + 4) == 116)
        {
LABEL_218:
          _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine10GroupFirstENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v664);
          goto LABEL_219;
        }
        goto LABEL_753;
      case 6:
        if (*(_DWORD *)__p == 1684955506 && *(_WORD *)(__p + 4) == 28015)
        {
LABEL_212:
          _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine11GroupRandomENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v664);
LABEL_219:
          v715 = *(_OWORD *)&v664.__r_.__value_.__l.__data_;
          v80 = v664.__r_.__value_.__r.__words[0];
          if (!v664.__r_.__value_.__r.__words[0])
            goto LABEL_753;
        }
        else
        {
          if (*(_DWORD *)__p != 1953068915 || *(_WORD *)(__p + 4) != 26723)
            goto LABEL_753;
LABEL_211:
          v79 = operator new(0x130uLL);
          *(_OWORD *)((char *)v79 + 8) = 0u;
          *(_QWORD *)v79 = &off_1E7933C68;
          v79[2] = 0u;
          v79[3] = 0u;
          v79[4] = 0u;
          *(_OWORD *)((char *)v79 + 104) = 0u;
          *((_QWORD *)v79 + 12) = (char *)v79 + 104;
          *(_OWORD *)((char *)v79 + 120) = 0u;
          *(_OWORD *)((char *)v79 + 136) = 0u;
          *(_OWORD *)((char *)v79 + 152) = 0u;
          *(_OWORD *)((char *)v79 + 168) = 0u;
          *(_OWORD *)((char *)v79 + 184) = 0u;
          *(_OWORD *)((char *)v79 + 200) = 0u;
          *((_DWORD *)v79 + 54) = 1065353216;
          *((_QWORD *)v79 + 34) = 0;
          v79[15] = 0u;
          v79[16] = 0u;
          v79[14] = 0u;
          *((_QWORD *)v79 + 3) = off_1E7939488;
          v80 = (std::string::size_type)v79 + 24;
          *((_QWORD *)v79 + 10) = 0;
          *((_QWORD *)v79 + 11) = &unk_1E79394E0;
          *((_QWORD *)v79 + 37) = 0;
          *(_OWORD *)((char *)v79 + 280) = 0u;
LABEL_338:
          *(_QWORD *)&v103 = v80;
          *((_QWORD *)&v103 + 1) = v79;
          v715 = v103;
        }
        std::string::basic_string[abi:ne180100]<0>(v640, "phrase");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v640, &v664);
        if (v641 < 0)
          operator delete(v640[0]);
        std::string::operator=((std::string *)(v80 + 232), &v664);
        v104 = v715;
        *(_QWORD *)(v715 + 8) = *((_QWORD *)&v702 + 1);
        siri::dialogengine::LineNumberBase::SetFullPath(v104, (const std::string *)a4);
        if (*(char *)(v104 + 255) < 0)
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v104 + 232), *(_QWORD *)(v104 + 240));
        else
          __str = *(std::string *)(v104 + 232);
        v105 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v105 = __str.__r_.__value_.__l.__size_;
        if (v105)
        {
          v106 = 0;
          if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_348;
        }
        else
        {
          siri::dialogengine::EnclosingElement(&v729, (uint64_t)v696, (uint64_t)v697);
          if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
          {
            v106 = v729.__r_.__value_.__l.__size_ == 7
                && *(_DWORD *)v729.__r_.__value_.__l.__data_ == 1634887792
                && *(_DWORD *)(v729.__r_.__value_.__r.__words[0] + 3) == 1936028513;
            operator delete(v729.__r_.__value_.__l.__data_);
          }
          else
          {
            v106 = SHIBYTE(v729.__r_.__value_.__r.__words[2]) == 7
                && LODWORD(v729.__r_.__value_.__l.__data_) == 1634887792
                && *(_DWORD *)((char *)v729.__r_.__value_.__r.__words + 3) == 1936028513;
          }
          if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
          {
LABEL_348:
            if (!v106)
              goto LABEL_645;
            goto LABEL_643;
          }
        }
        operator delete(__str.__r_.__value_.__l.__data_);
        if (!v106)
          goto LABEL_645;
LABEL_643:
        std::string::basic_string[abi:ne180100]<0>(&__str, "Grouping elements under a phrases section must define a name attribute.");
        siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&__str, v104);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
LABEL_645:
        v205 = *(_QWORD *)(v704 + 224);
        v206 = *(std::__shared_weak_count **)(v704 + 232);
        v729.__r_.__value_.__r.__words[0] = v205;
        v729.__r_.__value_.__l.__size_ = (std::string::size_type)v206;
        if (v206)
        {
          v207 = (unint64_t *)&v206->__shared_owners_;
          do
            v208 = __ldxr(v207);
          while (__stxr(v208 + 1, v207));
        }
        if (!v205)
          goto LABEL_659;
        siri::dialogengine::EnclosingElement(&__str, (uint64_t)v696, (uint64_t)v697);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          v210 = __str.__r_.__value_.__l.__size_ == 3
              && *(_WORD *)__str.__r_.__value_.__l.__data_ == 24931
              && *(_BYTE *)(__str.__r_.__value_.__r.__words[0] + 2) == 116;
          operator delete(__str.__r_.__value_.__l.__data_);
          if (!v206)
          {
LABEL_673:
            if (!v210)
              goto LABEL_677;
            goto LABEL_674;
          }
        }
        else if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 3)
        {
          v210 = LOWORD(__str.__r_.__value_.__l.__data_) == 24931 && __str.__r_.__value_.__s.__data_[2] == 116;
          if (!v206)
            goto LABEL_673;
        }
        else
        {
LABEL_659:
          v210 = 0;
          if (!v206)
            goto LABEL_673;
        }
        v212 = (unint64_t *)&v206->__shared_owners_;
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (v213)
          goto LABEL_673;
        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
        std::__shared_weak_count::__release_weak(v206);
        if (!v210)
        {
LABEL_677:
          v214 = (std::string *)v715;
          goto LABEL_678;
        }
LABEL_674:
        std::string::basic_string[abi:ne180100]<0>(&__str, "Multiple root elements found. There can be only one.");
        v214 = (std::string *)v715;
        siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&__str, v715);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
LABEL_678:
        std::string::basic_string[abi:ne180100]<0>(v638, "id");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v638, &v729);
        siri::dialogengine::StringTrim(" \t\n\r", &v729, &__str);
        std::string::operator=(v214 + 4, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v729.__r_.__value_.__l.__data_);
        if (v639 < 0)
          operator delete(v638[0]);
        v215 = v715;
        std::string::basic_string[abi:ne180100]<0>(v636, "note");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v636, &v729);
        siri::dialogengine::StringTrim(" \t\n\r", &v729, &__str);
        std::string::operator=((std::string *)(v215 + 168), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v729.__r_.__value_.__l.__data_);
        if (v637 < 0)
          operator delete(v636[0]);
        std::string::basic_string[abi:ne180100]<0>(v634, "case");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v634, &__str);
        std::string::operator=((std::string *)(v215 + 144), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v635 < 0)
          operator delete(v634[0]);
        std::string::basic_string[abi:ne180100]<0>(v632, "condition");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v632, &__str);
        std::string::operator=((std::string *)(v215 + 120), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v633 < 0)
          operator delete(v632[0]);
        std::string::basic_string[abi:ne180100]<0>(v630, "weight");
        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v630, &__str);
        if (v631 < 0)
          operator delete(v630[0]);
        v216 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v216 = __str.__r_.__value_.__l.__size_;
        if (v216)
        {
          v217 = siri::dialogengine::StringToDouble(&__str, 0);
          *(float *)(v215 + 192) = fmaxf(v217, 0.0);
        }
        else if (!v215)
        {
          goto LABEL_710;
        }
        if (v218)
        {
          v219 = v218;
          std::string::basic_string[abi:ne180100]<0>(v628, "value");
          siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)v628, &v729);
          std::string::operator=((std::string *)(v219 + 256), &v729);
          if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v729.__r_.__value_.__l.__data_);
          if (v629 < 0)
            operator delete(v628[0]);
        }
LABEL_710:
        if (v693 == v694)
        {
          v226 = v704;
          if ((v614 & 1) == 0)
          {
            v221 = (std::__shared_weak_count *)*((_QWORD *)&v715 + 1);
            if (!*((_QWORD *)&v715 + 1))
            {
              std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(v704 + 224), v215, 0);
              goto LABEL_734;
            }
            v230 = (unint64_t *)(*((_QWORD *)&v715 + 1) + 8);
            do
              v231 = __ldxr(v230);
            while (__stxr(v231 + 1, v230));
            std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(v226 + 224), v215, (uint64_t)v221);
            v232 = (unint64_t *)&v221->__shared_owners_;
            do
              v225 = __ldaxr(v232);
            while (__stlxr(v225 - 1, v232));
            goto LABEL_731;
          }
          v221 = (std::__shared_weak_count *)*((_QWORD *)&v715 + 1);
          v627[0] = v215;
          v627[1] = *((_QWORD *)&v715 + 1);
          if (*((_QWORD *)&v715 + 1))
          {
            v227 = (unint64_t *)(*((_QWORD *)&v715 + 1) + 8);
            do
              v228 = __ldxr(v227);
            while (__stxr(v228 + 1, v227));
          }
          siri::dialogengine::File::AddPhrase(v226, v627);
          if (v221)
          {
            v229 = (unint64_t *)&v221->__shared_owners_;
            do
              v225 = __ldaxr(v229);
            while (__stlxr(v225 - 1, v229));
LABEL_731:
            if (!v225)
            {
              ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
              std::__shared_weak_count::__release_weak(v221);
            }
          }
        }
        else
        {
          v220 = (int64x2_t *)*((_QWORD *)v694 - 2);
          v221 = (std::__shared_weak_count *)*((_QWORD *)&v715 + 1);
          v729.__r_.__value_.__r.__words[0] = v215;
          v729.__r_.__value_.__l.__size_ = *((_QWORD *)&v715 + 1);
          if (*((_QWORD *)&v715 + 1))
          {
            v222 = (unint64_t *)(*((_QWORD *)&v715 + 1) + 8);
            do
              v223 = __ldxr(v222);
            while (__stxr(v223 + 1, v222));
          }
          siri::dialogengine::Group::AddNode(v220, &v729);
          if (v221)
          {
            v224 = (unint64_t *)&v221->__shared_owners_;
            do
              v225 = __ldaxr(v224);
            while (__stlxr(v225 - 1, v224));
            goto LABEL_731;
          }
        }
LABEL_734:
        v233 = (std::string *)v715;
        siri::dialogengine::GetXmlAttrs(v4, (uint64_t)&v729);
        if (&v233[3] != &v729)
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v233[3], (__int128 *)v729.__r_.__value_.__l.__data_, (__int128 *)&v729.__r_.__value_.__r.__words[1]);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v729.__r_.__value_.__l.__size_);
        std::vector<std::shared_ptr<siri::dialogengine::Group>>::push_back[abi:ne180100](&v693, &v715);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v664.__r_.__value_.__l.__data_);
        v108 = v714;
        if ((_QWORD)v714)
          goto LABEL_741;
LABEL_753:
        if (SHIBYTE(v701) < 0)
        {
          if (*((_QWORD *)&__p + 1) != 4)
            goto LABEL_788;
          v240 = (std::string *)__p;
        }
        else
        {
          v240 = p_p;
          if (HIBYTE(v701) != 4)
            goto LABEL_788;
        }
        if (LODWORD(v240->__r_.__value_.__l.__data_) != 1954047348)
          goto LABEL_788;
        v241 = v694;
        if (v693 == v694)
        {
          siri::dialogengine::GetXmlLineString((uint64_t)&v699, &__str);
          v243 = std::string::insert(&__str, 0, "Text elements must be contained within grouping elements like first or random ");
          v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
          v664.__r_.__value_.__r.__words[2] = v243->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v664.__r_.__value_.__l.__data_ = v244;
          v243->__r_.__value_.__l.__size_ = 0;
          v243->__r_.__value_.__r.__words[2] = 0;
          v243->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&v664, 0);
        }
        else
        {
          if ((v614 & 1) != 0)
          {
            if ((HIBYTE(v701) & 0x80) != 0)
            {
              if (*((_QWORD *)&__p + 1) != 4)
                goto LABEL_773;
              v242 = (std::string *)__p;
            }
            else
            {
              v242 = p_p;
              if (HIBYTE(v701) != 4)
              {
LABEL_773:
                std::operator+<char>();
                v248 = std::string::append(&v729, "\" node ");
                v249 = *(_OWORD *)&v248->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v248->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v249;
                v248->__r_.__value_.__l.__size_ = 0;
                v248->__r_.__value_.__r.__words[2] = 0;
                v248->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::GetXmlLineString((uint64_t)&v699, &v728);
                if ((v728.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v250 = &v728;
                else
                  v250 = (std::string *)v728.__r_.__value_.__r.__words[0];
                if ((v728.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v251 = HIBYTE(v728.__r_.__value_.__r.__words[2]);
                else
                  v251 = v728.__r_.__value_.__l.__size_;
                v252 = std::string::append(&__str, (const std::string::value_type *)v250, v251);
                v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
                v664.__r_.__value_.__r.__words[2] = v252->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v664.__r_.__value_.__l.__data_ = v253;
                v252->__r_.__value_.__l.__size_ = 0;
                v252->__r_.__value_.__r.__words[2] = 0;
                v252->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Log::LogWithLevel((uint64_t)&v664, 3u);
                if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v664.__r_.__value_.__l.__data_);
                if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v728.__r_.__value_.__l.__data_);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
                {
                  v247 = (void *)v729.__r_.__value_.__r.__words[0];
                  goto LABEL_787;
                }
                goto LABEL_788;
              }
            }
            if (LODWORD(v242->__r_.__value_.__l.__data_) == 1954047348)
            {
              v533 = (std::__shared_weak_count *)operator new(0x190uLL);
              *(_OWORD *)&v533->__shared_owners_ = 0u;
              v534 = (unint64_t *)&v533->__shared_owners_;
              v533->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933CB8;
              v533[9].std::__shared_count = 0u;
              *(_OWORD *)&v533[1].__shared_owners_ = 0u;
              v533[2].std::__shared_count = 0u;
              *(_OWORD *)&v533[2].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v533[4].__shared_owners_ = 0u;
              v533[4].__vftable = (std::__shared_weak_count_vtbl *)&v533[4].__shared_owners_;
              v533[5].std::__shared_count = 0u;
              *(_OWORD *)&v533[5].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v533[6].__shared_owners_ = 0u;
              v533[7].std::__shared_count = 0u;
              *(_OWORD *)&v533[7].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v533[8].__shared_owners_ = 0u;
              LODWORD(v533[9].__vftable) = 1065353216;
              v533[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E7933D08;
              v533[3].__shared_owners_ = 0;
              v533[3].__shared_weak_owners_ = (uint64_t)&unk_1E7933D60;
              v533[16].__shared_owners_ = 0;
              v533[15].std::__shared_count = 0u;
              *(_OWORD *)&v533[15].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v533[13].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v533[14].__shared_owners_ = 0u;
              *(_OWORD *)&v533[12].__shared_owners_ = 0u;
              v533[13].std::__shared_count = 0u;
              v533[11].std::__shared_count = 0u;
              *(_OWORD *)&v533[11].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v533[10].__shared_owners_ = 0u;
              *(_OWORD *)&v533[9].__shared_weak_owners_ = 0u;
              v723.__r_.__value_.__r.__words[0] = (std::string::size_type)&v533[1];
              v723.__r_.__value_.__l.__size_ = (std::string::size_type)v533;
              v535 = (int64x2_t *)*((_QWORD *)v241 - 2);
              v664.__r_.__value_.__r.__words[0] = (std::string::size_type)&v533[1];
              v664.__r_.__value_.__l.__size_ = (std::string::size_type)v533;
              do
                v536 = __ldxr(v534);
              while (__stxr(v536 + 1, v534));
              siri::dialogengine::Group::AddNode(v535, &v664);
              do
                v537 = __ldaxr(v534);
              while (__stlxr(v537 - 1, v534));
              if (!v537)
              {
                ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
                std::__shared_weak_count::__release_weak(v533);
              }
              v538 = v723.__r_.__value_.__r.__words[0];
              std::string::basic_string[abi:ne180100]<0>(&v729, "id");
              siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v729, &__str);
              siri::dialogengine::StringTrim(" \t\n\r", &__str, &v664);
              std::string::operator=((std::string *)(v538 + 96), &v664);
              if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v664.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v729.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v728, "note");
              siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v728, &__str);
              siri::dialogengine::StringTrim(" \t\n\r", &__str, &v664);
              std::string::operator=((std::string *)(v538 + 168), &v664);
              if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v664.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v728.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&__str, "condition");
              siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&__str, &v664);
              std::string::operator=((std::string *)(v538 + 120), &v664);
              if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v664.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v727, "case");
              siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v727, &v664);
              std::string::operator=((std::string *)(v538 + 144), &v664);
              if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v664.__r_.__value_.__l.__data_);
              if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v727.__r_.__value_.__l.__data_);
              *(_QWORD *)(v538 + 8) = *((_QWORD *)&v702 + 1);
              siri::dialogengine::LineNumberBase::SetFullPath(v538, (const std::string *)a4);
              std::string::basic_string[abi:ne180100]<0>(&v725, "weight");
              siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v725, &v726);
              if (SHIBYTE(v725.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v725.__r_.__value_.__l.__data_);
              v539 = HIBYTE(v726.__r_.__value_.__r.__words[2]);
              if ((v726.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v539 = v726.__r_.__value_.__l.__size_;
              if (v539)
              {
                v540 = siri::dialogengine::StringToDouble(&v726, 0);
                *(float *)(v538 + 192) = fmaxf(v540, 0.0);
              }
              std::string::basic_string[abi:ne180100]<0>(&v724, "text");
              siri::dialogengine::ParseFullSupportingOrTextNode((uint64_t)&v664, (uint64_t)v621, v4, (uint64_t)&v699, (unsigned __int8 *)&v724, v538);
              siri::dialogengine::Text::SetValue((siri::dialogengine::Text *)v538, &v664);
              if ((v674[7] & 0x80000000) != 0)
                operator delete(*((void **)&v671 + 1));
              if (SBYTE7(v671) < 0)
                operator delete((void *)v670);
              if (SHIBYTE(v669) < 0)
                operator delete(*((void **)&v668 + 1));
              if (SBYTE7(v668) < 0)
                operator delete((void *)v667);
              if (SHIBYTE(v666) < 0)
                operator delete(v665[3]);
              if (SHIBYTE(v665[2]) < 0)
                operator delete(v665[0]);
              if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v664.__r_.__value_.__l.__data_);
              if (SHIBYTE(v724.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v724.__r_.__value_.__l.__data_);
              siri::dialogengine::GetXmlAttrs(v4, (uint64_t)&v664);
              if ((std::string *)(v538 + 72) != &v664)
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v538 + 72, (__int128 *)v664.__r_.__value_.__l.__data_, (__int128 *)&v664.__r_.__value_.__r.__words[1]);
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v664.__r_.__value_.__l.__size_);
              if (SHIBYTE(v726.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v726.__r_.__value_.__l.__data_);
              v541 = (std::__shared_weak_count *)v723.__r_.__value_.__l.__size_;
              if (v723.__r_.__value_.__l.__size_)
              {
                v542 = (unint64_t *)(v723.__r_.__value_.__l.__size_ + 8);
                do
                  v543 = __ldaxr(v542);
                while (__stlxr(v543 - 1, v542));
                if (!v543)
                {
                  ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
                  std::__shared_weak_count::__release_weak(v541);
                }
              }
              goto LABEL_788;
            }
            goto LABEL_773;
          }
          siri::dialogengine::GetXmlLineString((uint64_t)&v699, &__str);
          v245 = std::string::insert(&__str, 0, "Cannot have text element outside of the phrases section ");
          v246 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
          v664.__r_.__value_.__r.__words[2] = v245->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v664.__r_.__value_.__l.__data_ = v246;
          v245->__r_.__value_.__l.__size_ = 0;
          v245->__r_.__value_.__r.__words[2] = 0;
          v245->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&v664, 0);
        }
        if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v664.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          v247 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_787:
          operator delete(v247);
        }
LABEL_788:
        if (v619 != 1)
        {
          if (v619)
            goto LABEL_1319;
          if (SHIBYTE(v701) < 0)
          {
            if (*((_QWORD *)&__p + 1) != 6)
              goto LABEL_1319;
            v255 = (std::string *)__p;
            if (*(_DWORD *)__p != 1818323300 || *(_WORD *)(__p + 4) != 26479)
            {
LABEL_796:
              v256 = (int)v255->__r_.__value_.__l.__data_;
              v257 = WORD2(v255->__r_.__value_.__r.__words[0]);
              if (v256 != 1970497910 || v257 != 27745)
                goto LABEL_1319;
              if ((v614 & 1) != 0)
              {
                siri::dialogengine::GetXmlLineString((uint64_t)&v699, &__str);
                v259 = std::string::insert(&__str, 0, "Cannot have a visual reference element in the phrases section ");
                v260 = *(_OWORD *)&v259->__r_.__value_.__l.__data_;
                v664.__r_.__value_.__r.__words[2] = v259->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v664.__r_.__value_.__l.__data_ = v260;
                v259->__r_.__value_.__l.__size_ = 0;
                v259->__r_.__value_.__r.__words[2] = 0;
                v259->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&v664, 0);
                goto LABEL_1314;
              }
              v520 = *(_QWORD *)(v704 + 240);
              v519 = *(std::__shared_weak_count **)(v704 + 248);
              if (v519)
              {
                v521 = (unint64_t *)&v519->__shared_owners_;
                do
                  v522 = __ldxr(v521);
                while (__stxr(v522 + 1, v521));
                do
                  v523 = __ldaxr(v521);
                while (__stlxr(v523 - 1, v521));
                if (!v523)
                {
                  ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
                  std::__shared_weak_count::__release_weak(v519);
                }
              }
              if (v520)
              {
                siri::dialogengine::GetXmlLineString((uint64_t)&v699, &__str);
                v524 = std::string::insert(&__str, 0, "Cannot have more than one visual reference element ");
                v525 = *(_OWORD *)&v524->__r_.__value_.__l.__data_;
                v664.__r_.__value_.__r.__words[2] = v524->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v664.__r_.__value_.__l.__data_ = v525;
                v524->__r_.__value_.__l.__size_ = 0;
                v524->__r_.__value_.__r.__words[2] = 0;
                v524->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&v664, 0);
LABEL_1314:
                if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v664.__r_.__value_.__l.__data_);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                goto LABEL_1319;
              }
              *(_OWORD *)&v722.__r_.__value_.__l.__data_ = 0uLL;
              v552 = *((_QWORD *)v621 + 63);
              v551 = (std::__shared_weak_count *)*((_QWORD *)v621 + 64);
              if (v551)
              {
                v553 = (unint64_t *)&v551->__shared_owners_;
                do
                  v554 = __ldxr(v553);
                while (__stxr(v554 + 1, v553));
                do
                  v555 = __ldaxr(v553);
                while (__stlxr(v555 - 1, v553));
                if (!v555)
                {
                  ((void (*)(std::__shared_weak_count *))v551->__on_zero_shared)(v551);
                  std::__shared_weak_count::__release_weak(v551);
                }
              }
              if (v552)
              {
                _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine9VisualRefENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v664);
                v556 = *(_OWORD *)&v664.__r_.__value_.__l.__data_;
                *(_OWORD *)&v664.__r_.__value_.__l.__data_ = 0uLL;
                v557 = (std::__shared_weak_count *)v722.__r_.__value_.__l.__size_;
                *(_OWORD *)&v722.__r_.__value_.__l.__data_ = v556;
                if (v557)
                {
                  v558 = (unint64_t *)&v557->__shared_owners_;
                  do
                    v559 = __ldaxr(v558);
                  while (__stlxr(v559 - 1, v558));
                  if (!v559)
                  {
                    ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
                    std::__shared_weak_count::__release_weak(v557);
                  }
                }
                v560 = (std::__shared_weak_count *)v664.__r_.__value_.__l.__size_;
                if (v664.__r_.__value_.__l.__size_)
                {
                  v561 = (unint64_t *)(v664.__r_.__value_.__l.__size_ + 8);
                  do
                    v562 = __ldaxr(v561);
                  while (__stlxr(v562 - 1, v561));
                  if (!v562)
                  {
                    ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
                    std::__shared_weak_count::__release_weak(v560);
                  }
                }
                v563 = (std::string *)v722.__r_.__value_.__r.__words[0];
                std::string::basic_string[abi:ne180100]<0>(&v729, "id");
                siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v729, &__str);
                siri::dialogengine::StringTrim(" \t\n\r", &__str, &v664);
                std::string::operator=(v563 + 4, &v664);
                if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v664.__r_.__value_.__l.__data_);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v729.__r_.__value_.__l.__data_);
                if (!HIBYTE(v703) && v699 != -1)
                {
                  v564 = 1;
                  while (1)
                  {
                    siri::dialogengine::ReadNextNode(v4, (uint64_t)&v664);
                    if (LOBYTE(v665[3]))
                      break;
LABEL_1585:
                    v577 = SBYTE1(v665[3]);
                    if (SHIBYTE(v665[0]) < 0)
                      operator delete((void *)v664.__r_.__value_.__l.__size_);
                    v564 -= v577;
                    if (v564 < 1 || v699 == -1)
                      goto LABEL_1629;
                  }
                  if (v564 == 1)
                  {
                    if ((SHIBYTE(v665[0]) & 0x80000000) == 0)
                    {
                      v565 = (std::string::size_type)&v664.__r_.__value_.__l.__size_;
                      if (SHIBYTE(v665[0]) != 5)
                        goto LABEL_1584;
LABEL_1557:
                      v566 = *(_DWORD *)v565;
                      v567 = *(unsigned __int8 *)(v565 + 4);
                      if (v566 == 1634886000 && v567 == 109)
                      {
                        siri::dialogengine::GetExpandedValue(&__str, v4);
                        std::string::basic_string[abi:ne180100]<0>(&v726, "name");
                        siri::dialogengine::GetXmlAttr(v4, (const xmlChar *)&v726, &v727);
                        siri::dialogengine::StringTrim(" \t\n\r", &v727, &v728);
                        if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v727.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v726.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v726.__r_.__value_.__l.__data_);
                        std::operator+<char>();
                        v569 = std::string::append(&v723, "\" content=\"");
                        v570 = *(_OWORD *)&v569->__r_.__value_.__l.__data_;
                        v724.__r_.__value_.__r.__words[2] = v569->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v724.__r_.__value_.__l.__data_ = v570;
                        v569->__r_.__value_.__l.__size_ = 0;
                        v569->__r_.__value_.__r.__words[2] = 0;
                        v569->__r_.__value_.__r.__words[0] = 0;
                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          p_str = &__str;
                        else
                          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v572 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                        else
                          v572 = __str.__r_.__value_.__l.__size_;
                        v573 = std::string::append(&v724, (const std::string::value_type *)p_str, v572);
                        v574 = *(_OWORD *)&v573->__r_.__value_.__l.__data_;
                        v725.__r_.__value_.__r.__words[2] = v573->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v725.__r_.__value_.__l.__data_ = v574;
                        v573->__r_.__value_.__l.__size_ = 0;
                        v573->__r_.__value_.__r.__words[2] = 0;
                        v573->__r_.__value_.__r.__words[0] = 0;
                        v575 = std::string::append(&v725, "\"");
                        v576 = *(_OWORD *)&v575->__r_.__value_.__l.__data_;
                        v727.__r_.__value_.__r.__words[2] = v575->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v727.__r_.__value_.__l.__data_ = v576;
                        v575->__r_.__value_.__l.__size_ = 0;
                        v575->__r_.__value_.__r.__words[2] = 0;
                        v575->__r_.__value_.__r.__words[0] = 0;
                        siri::dialogengine::Log::Debug((siri::dialogengine *)&v727);
                        if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v727.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v725.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v725.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v724.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v724.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v723.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v723.__r_.__value_.__l.__data_);
                        siri::dialogengine::VisualRef::SetParam((uint64_t)v563, (__int128 *)&v728, &__str);
                        if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v728.__r_.__value_.__l.__data_);
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      goto LABEL_1584;
                    }
                    if (v664.__r_.__value_.__r.__words[2] == 5)
                    {
                      v565 = v664.__r_.__value_.__l.__size_;
                      goto LABEL_1557;
                    }
                  }
LABEL_1584:
                  ++v564;
                  goto LABEL_1585;
                }
              }
              else
              {
                siri::dialogengine::Log::Error((siri::dialogengine::Log *)"ParseVisualRefNode received context with null file", v21);
                v563 = (std::string *)v722.__r_.__value_.__r.__words[0];
              }
LABEL_1629:
              v596 = v704;
              v597 = (std::__shared_weak_count *)v722.__r_.__value_.__l.__size_;
              v626[0] = (uint64_t)v563;
              v626[1] = v722.__r_.__value_.__l.__size_;
              if (v722.__r_.__value_.__l.__size_)
              {
                v598 = (unint64_t *)(v722.__r_.__value_.__l.__size_ + 8);
                do
                  v599 = __ldxr(v598);
                while (__stxr(v599 + 1, v598));
                siri::dialogengine::File::SetVisualRef(v596, v626);
                do
                  v600 = __ldaxr(v598);
                while (__stlxr(v600 - 1, v598));
                if (!v600)
                {
                  ((void (*)(std::__shared_weak_count *))v597->__on_zero_shared)(v597);
                  std::__shared_weak_count::__release_weak(v597);
                }
              }
              else
              {
                siri::dialogengine::File::SetVisualRef(v704, v626);
              }
              v601 = (std::__shared_weak_count *)v722.__r_.__value_.__l.__size_;
              if (v722.__r_.__value_.__l.__size_)
              {
                v602 = (unint64_t *)(v722.__r_.__value_.__l.__size_ + 8);
                do
                  v603 = __ldaxr(v602);
                while (__stlxr(v603 - 1, v602));
                if (!v603)
                {
                  ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
                  std::__shared_weak_count::__release_weak(v601);
                }
              }
              goto LABEL_1319;
            }
          }
          else
          {
            if (SHIBYTE(v701) != 6)
              goto LABEL_1319;
            v254 = (_DWORD)__p == 1818323300 && WORD2(__p) == 26479;
            v255 = p_p;
            if (!v254)
              goto LABEL_796;
          }
          if ((v614 & 1) != 0)
          {
            siri::dialogengine::GetXmlLineString((uint64_t)&v699, &__str);
            v263 = std::string::insert(&__str, 0, "Cannot have dialog element in the phrases section ");
            v264 = *(_OWORD *)&v263->__r_.__value_.__l.__data_;
            v664.__r_.__value_.__r.__words[2] = v263->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v664.__r_.__value_.__l.__data_ = v264;
            v263->__r_.__value_.__l.__size_ = 0;
            v263->__r_.__value_.__r.__words[2] = 0;
            v263->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&v664, 0);
            goto LABEL_1314;
          }
          if ((siri::dialogengine::ParseDialogNode((uint64_t)v621, v4, (uint64_t)v690, (const std::string *)a4, (uint64_t)&v699, (uint64_t *)&v693) & 1) != 0)goto LABEL_1319;
          v614 = 0;
          v473 = 2;
          goto LABEL_1320;
        }
        if (SHIBYTE(v701) < 0)
        {
          if (*((_QWORD *)&__p + 1) != 8)
            goto LABEL_817;
          v261 = (std::string::__raw *)__p;
        }
        else
        {
          v261 = (std::string::__raw *)p_p;
          if (SHIBYTE(v701) != 8)
            goto LABEL_817;
        }
        if (v261->__words[0] == 0x65736E6F70736572)
        {
          siri::dialogengine::EnclosingElement(&v664, (uint64_t)v696, (uint64_t)v697);
          if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v664.__r_.__value_.__l.__size_ == 3)
            {
              v512 = *(_WORD *)v664.__r_.__value_.__l.__data_ != 24931
                  || *(_BYTE *)(v664.__r_.__value_.__r.__words[0] + 2) != 116;
              operator delete(v664.__r_.__value_.__l.__data_);
              if (!v512)
              {
LABEL_1422:
                _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine14VisualResponseENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((siri::dialogengine::VisualResponse **)&v664);
                v513 = v664.__r_.__value_.__r.__words[0];
                *(_QWORD *)(v664.__r_.__value_.__r.__words[0] + 8) = *((_QWORD *)&v702 + 1);
                siri::dialogengine::LineNumberBase::SetFullPath(v513, (const std::string *)a4);
                v514 = v704;
                v515 = (std::__shared_weak_count *)v664.__r_.__value_.__l.__size_;
                v625 = __PAIR128__(v664.__r_.__value_.__l.__size_, v513);
                if (v664.__r_.__value_.__l.__size_)
                {
                  v516 = (unint64_t *)(v664.__r_.__value_.__l.__size_ + 8);
                  do
                    v517 = __ldxr(v516);
                  while (__stxr(v517 + 1, v516));
                  siri::dialogengine::File::SetVisualResponse(v514, (uint64_t *)&v625);
                  do
                    v518 = __ldaxr(v516);
                  while (__stlxr(v518 - 1, v516));
                  if (!v518)
                  {
                    ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
                    std::__shared_weak_count::__release_weak(v515);
                  }
                }
                else
                {
                  siri::dialogengine::File::SetVisualResponse(v704, (uint64_t *)&v625);
                }
                v580 = (std::__shared_weak_count *)v664.__r_.__value_.__l.__size_;
                if (v664.__r_.__value_.__l.__size_)
                {
                  v581 = (unint64_t *)(v664.__r_.__value_.__l.__size_ + 8);
                  do
                    v582 = __ldaxr(v581);
                  while (__stlxr(v582 - 1, v581));
                  if (!v582)
                  {
                    ((void (*)(std::__shared_weak_count *))v580->__on_zero_shared)(v580);
                    std::__shared_weak_count::__release_weak(v580);
                  }
                }
                v473 = 4;
                goto LABEL_1320;
              }
            }
            else
            {
              operator delete(v664.__r_.__value_.__l.__data_);
            }
          }
          else if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) == 3
                 && LOWORD(v664.__r_.__value_.__l.__data_) == 24931
                 && v664.__r_.__value_.__s.__data_[2] == 116)
          {
            goto LABEL_1422;
          }
        }
LABEL_817:
        v265 = *(std::__shared_weak_count **)(v704 + 264);
        v613 = *(_QWORD *)(v704 + 256);
        if (v265)
        {
          v266 = (unint64_t *)&v265->__shared_owners_;
          do
            v267 = __ldxr(v266);
          while (__stxr(v267 + 1, v266));
          do
            v268 = __ldaxr(v266);
          while (__stlxr(v268 - 1, v266));
          if (!v268)
          {
            ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
            std::__shared_weak_count::__release_weak(v265);
          }
        }
        if (!v613)
          goto LABEL_1319;
        v269 = (std::__shared_weak_count *)*((_QWORD *)&v704 + 1);
        v624 = v704;
        if (*((_QWORD *)&v704 + 1))
        {
          v270 = (unint64_t *)(*((_QWORD *)&v704 + 1) + 8);
          do
            v271 = __ldxr(v270);
          while (__stxr(v271 + 1, v270));
        }
        if (HIBYTE(v703))
        {
          std::operator+<char>();
          v272 = std::string::append(&__str, "'");
          v273 = *(_OWORD *)&v272->__r_.__value_.__l.__data_;
          v664.__r_.__value_.__r.__words[2] = v272->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v664.__r_.__value_.__l.__data_ = v273;
          v272->__r_.__value_.__l.__size_ = 0;
          v272->__r_.__value_.__r.__words[2] = 0;
          v272->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v664, 3u);
          if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v664.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
LABEL_1300:
          v467 = 0;
          v468 = 0;
          if (!v269)
            goto LABEL_1310;
LABEL_1301:
          v469 = (unint64_t *)&v269->__shared_owners_;
          do
            v470 = __ldaxr(v469);
          while (__stlxr(v470 - 1, v469));
          if (!v470)
          {
            ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
            std::__shared_weak_count::__release_weak(v269);
          }
          goto LABEL_1310;
        }
        v274 = v699;
        v275 = v699 == 1;
        if ((_BYTE)v703)
          v276 = 0;
        else
          v276 = v699 == 1;
        if (v276)
        {
          do
          {
            siri::dialogengine::ReadNextNode(v4, (uint64_t)&v664);
            v274 = LODWORD(v664.__r_.__value_.__l.__data_);
            v699 = v664.__r_.__value_.__l.__data_;
            if (SHIBYTE(v701) < 0)
            {
              operator delete((void *)__p);
              v274 = v699;
            }
            *(_OWORD *)&p_p->__r_.__value_.__l.__data_ = *(_OWORD *)&v664.__r_.__value_.__r.__words[1];
            p_p->__r_.__value_.__r.__words[2] = (std::string::size_type)v665[0];
            v703 = (__int16)v665[3];
            v702 = *(_OWORD *)&v665[1];
            v275 = (_DWORD)v274 == 1;
          }
          while (!LOBYTE(v665[3]) && (_DWORD)v274 == 1);
        }
        if (!v275)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Parsing a message field cannot beging when node.ret is %d", v21, v274);
          goto LABEL_1300;
        }
        v277 = v613 + 208;
        v279 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v613 + 208) + 168))(v613 + 208);
        if (!v279)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null descriptor", v278);
          v279 = 0;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v277 + 168))(v277);
        v610 = v280;
        if (!v280)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null Reflection", 0);
          v610 = 0;
        }
        v617 = v279;
        reader = v4;
        v623 = (uint64_t)p_p;
        v620 = (google::protobuf::MessageLite *)(v613 + 208);
        v607 = a4;
        v608 = a1;
        v281 = (google::protobuf::MessageLite **)operator new(8uLL);
        v282 = 0;
        v618 = 0;
        v609 = 0;
        v283 = 0;
        v284 = 0;
        *v281 = (google::protobuf::MessageLite *)v277;
        v285 = v281 + 1;
        v611 = 0;
        v612 = (char *)(v281 + 1);
        while (2)
        {
          if ((v283 & 1) != 0)
          {
            v286 = v703;
            v287 = SHIBYTE(v703);
            siri::dialogengine::ReadNextNode(reader, (uint64_t)&v664);
            v699 = v664.__r_.__value_.__l.__data_;
            if (SHIBYTE(v701) < 0)
              operator delete((void *)__p);
            v288 = (v284 + v286 - v287);
            *(_OWORD *)v623 = *(_OWORD *)&v664.__r_.__value_.__r.__words[1];
            *(void **)(v623 + 16) = v665[0];
            v702 = *(_OWORD *)&v665[1];
            v703 = (__int16)v665[3];
            v283 = 1;
            goto LABEL_1268;
          }
          siri::dialogengine::FieldNameFromElementName(v623, (uint64_t)&v725);
          FieldByName = google::protobuf::Descriptor::FindFieldByName(v617, (uint64_t)&v725);
          OneofByName = google::protobuf::Descriptor::FindOneofByName(v617, (uint64_t)&v725);
          if (!(_BYTE)v703)
          {
            v283 = 0;
            goto LABEL_1182;
          }
          v291 = OneofByName;
          if (v285 >= (google::protobuf::MessageLite **)v612)
          {
            v292 = v285 - v281;
            v293 = v292 + 1;
            if ((unint64_t)(v292 + 1) >> 61)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            if ((v612 - (char *)v281) >> 2 > v293)
              v293 = (v612 - (char *)v281) >> 2;
            if ((unint64_t)(v612 - (char *)v281) >= 0x7FFFFFFFFFFFFFF8)
              v294 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v294 = v293;
            if (v294)
            {
              if (v294 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v295 = (char *)operator new(8 * v294);
            }
            else
            {
              v295 = 0;
            }
            v296 = (google::protobuf::MessageLite **)&v295[8 * v292];
            *v296 = v620;
            v297 = v296 + 1;
            while (v285 != v281)
            {
              v298 = *--v285;
              *--v296 = v298;
            }
            v612 = &v295[8 * v294];
            if (v281)
              operator delete(v281);
            v281 = v296;
            v285 = v297;
          }
          else
          {
            *v285++ = v620;
          }
          v615 = v281;
          std::string::basic_string[abi:ne180100]<0>(&v723, "condition");
          siri::dialogengine::GetXmlAttr(reader, (const xmlChar *)&v723, &v664);
          siri::dialogengine::StringTrim(" \t\n\r", &v664, &v724);
          if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v664.__r_.__value_.__l.__data_);
          v301 = v291;
          if (SHIBYTE(v723.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v723.__r_.__value_.__l.__data_);
          if (v618 == v282 || (v302 = *((_QWORD *)v282 - 1)) == 0)
          {
            v283 = 0;
            v281 = v615;
            if (FieldByName)
              goto LABEL_908;
            goto LABEL_973;
          }
          v303 = *(unsigned int *)(v302 + 24);
          if ((int)v303 < 1)
            goto LABEL_943;
          v304 = 0;
          FieldByName = 0;
          v283 = 0;
          do
          {
            v305 = *(unsigned __int8 ****)(*(_QWORD *)(v302 + 32) + 8 * v304);
            if (v305)
            {
              v306 = *v305;
              v307 = HIBYTE(v725.__r_.__value_.__r.__words[2]);
              if ((v725.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v308 = HIBYTE(v725.__r_.__value_.__r.__words[2]);
              else
                v308 = v725.__r_.__value_.__l.__size_;
              v309 = (unsigned __int8 *)*((unsigned __int8 *)v306 + 23);
              v310 = (char)v309;
              if ((char)v309 < 0)
                v309 = v306[1];
              if ((unsigned __int8 *)v308 == v309)
              {
                if (v310 >= 0)
                  v299 = *v305;
                else
                  v299 = (unsigned __int8 **)*v306;
                if ((*((_BYTE *)&v725.__r_.__value_.__s + 23) & 0x80) != 0)
                {
                  if (memcmp(v725.__r_.__value_.__l.__data_, v299, v725.__r_.__value_.__l.__size_))
                    goto LABEL_900;
LABEL_899:
                  FieldByName = (uint64_t)v305;
                  goto LABEL_900;
                }
                if (!*((_BYTE *)&v725.__r_.__value_.__s + 23))
                  goto LABEL_899;
                v311 = &v725;
                while (v311->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v299)
                {
                  v311 = (std::string *)((char *)v311 + 1);
                  v299 = (unsigned __int8 **)((char *)v299 + 1);
                  if (!--v307)
                    goto LABEL_899;
                }
              }
            }
            else
            {
              v312 = *(uint64_t **)(v302 + 8);
              if (*((char *)v312 + 23) < 0)
                v312 = (uint64_t *)*v312;
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Oneof '%s' with %d fields did not return descriptor for index %d", (const char *)v299, v312, v303, v304);
              v303 = *(unsigned int *)(v302 + 24);
              v283 = 1;
            }
LABEL_900:
            ++v304;
          }
          while (v304 < (int)v303);
          if (FieldByName)
          {
            OneofFieldDescriptor = (uint64_t *)google::protobuf::Reflection::GetOneofFieldDescriptor((uint64_t)v610, (uint64_t)v620, v302);
            if (!OneofFieldDescriptor)
              goto LABEL_906;
            v314 = HIBYTE(v724.__r_.__value_.__r.__words[2]);
            if ((v724.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v314 = v724.__r_.__value_.__l.__size_;
            if (!v314)
            {
              v400 = *((_QWORD *)&v702 + 1);
              v401 = xmlTextReaderConstBaseUri(reader);
              if (v401)
                v402 = (char *)v401;
              else
                v402 = "";
              std::string::basic_string[abi:ne180100]<0>(&__str, v402);
              siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v664, v400, &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v403 = *(__int128 **)v302;
              if (*(char *)(*(_QWORD *)v302 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v729, *(const std::string::value_type **)v403, *((_QWORD *)v403 + 1));
              }
              else
              {
                v404 = *v403;
                v729.__r_.__value_.__r.__words[2] = *((_QWORD *)v403 + 2);
                *(_OWORD *)&v729.__r_.__value_.__l.__data_ = v404;
              }
              v291 = v301;
              siri::dialogengine::ElementNameFromFieldName((uint64_t)&v729, (uint64_t)&__str);
              v281 = v615;
              if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v729.__r_.__value_.__l.__data_);
              siri::dialogengine::ElementNameFromFieldName(*OneofFieldDescriptor, (uint64_t)&v729);
              std::operator+<char>();
              v410 = std::string::append(&v718, ">' is already set to '<");
              v411 = *(_OWORD *)&v410->__r_.__value_.__l.__data_;
              v719.__r_.__value_.__r.__words[2] = v410->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v719.__r_.__value_.__l.__data_ = v411;
              v410->__r_.__value_.__l.__size_ = 0;
              v410->__r_.__value_.__r.__words[2] = 0;
              v410->__r_.__value_.__r.__words[0] = 0;
              if ((v729.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v412 = &v729;
              else
                v412 = (std::string *)v729.__r_.__value_.__r.__words[0];
              if ((v729.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v413 = HIBYTE(v729.__r_.__value_.__r.__words[2]);
              else
                v413 = v729.__r_.__value_.__l.__size_;
              v414 = std::string::append(&v719, (const std::string::value_type *)v412, v413);
              v415 = *(_OWORD *)&v414->__r_.__value_.__l.__data_;
              v720.__r_.__value_.__r.__words[2] = v414->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v720.__r_.__value_.__l.__data_ = v415;
              v414->__r_.__value_.__l.__size_ = 0;
              v414->__r_.__value_.__r.__words[2] = 0;
              v414->__r_.__value_.__r.__words[0] = 0;
              v416 = std::string::append(&v720, ">'.  The sibling '<");
              v417 = *(_OWORD *)&v416->__r_.__value_.__l.__data_;
              v721.__r_.__value_.__r.__words[2] = v416->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v721.__r_.__value_.__l.__data_ = v417;
              v416->__r_.__value_.__l.__size_ = 0;
              v416->__r_.__value_.__r.__words[2] = 0;
              v416->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v701) >= 0)
                v418 = (const std::string::value_type *)v623;
              else
                v418 = (const std::string::value_type *)__p;
              if (SHIBYTE(v701) >= 0)
                v419 = HIBYTE(v701);
              else
                v419 = *((_QWORD *)&__p + 1);
              v420 = std::string::append(&v721, v418, v419);
              v421 = *(_OWORD *)&v420->__r_.__value_.__l.__data_;
              v722.__r_.__value_.__r.__words[2] = v420->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v722.__r_.__value_.__l.__data_ = v421;
              v420->__r_.__value_.__l.__size_ = 0;
              v420->__r_.__value_.__r.__words[2] = 0;
              v420->__r_.__value_.__r.__words[0] = 0;
              v422 = std::string::append(&v722, ">' will be ignored unless a condition removes '<");
              v423 = *(_OWORD *)&v422->__r_.__value_.__l.__data_;
              v726.__r_.__value_.__r.__words[2] = v422->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v726.__r_.__value_.__l.__data_ = v423;
              v422->__r_.__value_.__l.__size_ = 0;
              v422->__r_.__value_.__r.__words[2] = 0;
              v422->__r_.__value_.__r.__words[0] = 0;
              if ((v729.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v424 = &v729;
              else
                v424 = (std::string *)v729.__r_.__value_.__r.__words[0];
              if ((v729.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v425 = HIBYTE(v729.__r_.__value_.__r.__words[2]);
              else
                v425 = v729.__r_.__value_.__l.__size_;
              v426 = std::string::append(&v726, (const std::string::value_type *)v424, v425);
              v427 = *(_OWORD *)&v426->__r_.__value_.__l.__data_;
              v727.__r_.__value_.__r.__words[2] = v426->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v727.__r_.__value_.__l.__data_ = v427;
              v426->__r_.__value_.__l.__size_ = 0;
              v426->__r_.__value_.__r.__words[2] = 0;
              v426->__r_.__value_.__r.__words[0] = 0;
              v428 = std::string::append(&v727, ">'");
              v429 = *(_OWORD *)&v428->__r_.__value_.__l.__data_;
              v728.__r_.__value_.__r.__words[2] = v428->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v728.__r_.__value_.__l.__data_ = v429;
              v428->__r_.__value_.__l.__size_ = 0;
              v428->__r_.__value_.__r.__words[2] = 0;
              v428->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&v728, (uint64_t)&v664);
              if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v728.__r_.__value_.__l.__data_);
              if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v727.__r_.__value_.__l.__data_);
              if (SHIBYTE(v726.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v726.__r_.__value_.__l.__data_);
              if (SHIBYTE(v722.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v722.__r_.__value_.__l.__data_);
              if (SHIBYTE(v721.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v721.__r_.__value_.__l.__data_);
              if (SHIBYTE(v720.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v720.__r_.__value_.__l.__data_);
              if (SHIBYTE(v719.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v719.__r_.__value_.__l.__data_);
              if (SHIBYTE(v718.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v718.__r_.__value_.__l.__data_);
              if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v729.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v664.__r_.__value_.__l.__data_);
            }
            else
            {
LABEL_906:
              v291 = v301;
              v281 = v615;
            }
LABEL_908:
            v315 = *(_DWORD *)(FieldByName + 60);
            v316 = *(unint64_t **)(FieldByName + 48);
            if (v316)
            {
              v729.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
              v728.__r_.__value_.__r.__words[0] = FieldByName;
              v317 = atomic_load(v316);
              if (v317 != -1)
              {
                v664.__r_.__value_.__r.__words[0] = (std::string::size_type)&v729;
                v664.__r_.__value_.__l.__size_ = (std::string::size_type)&v728;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v664;
                std::__call_once(v316, &__str, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
              }
            }
            if (google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(FieldByName + 56)] == 10)
            {
              if (v315 == 3)
              {
                v620 = (google::protobuf::MessageLite *)google::protobuf::Reflection::AddMessage(v610, v620, (const std::string::value_type **)FieldByName, 0, v300);
                v717 = v624;
                if (*((_QWORD *)&v624 + 1))
                {
                  v318 = (unint64_t *)(*((_QWORD *)&v624 + 1) + 8);
                  do
                    v319 = __ldxr(v318);
                  while (__stxr(v319 + 1, v318));
                }
                std::string::basic_string[abi:ne180100]<0>(&v664, "");
                siri::dialogengine::ParseListAndIterator((uint64_t)v621, (uint64_t *)&v717, (uint64_t)&v699, reader, v620, (uint64_t)&v664);
                if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v664.__r_.__value_.__l.__data_);
                if (*((_QWORD *)&v624 + 1))
                {
                  v320 = (unint64_t *)(*((_QWORD *)&v624 + 1) + 8);
                  do
                    v321 = __ldaxr(v320);
                  while (__stlxr(v321 - 1, v320));
                  if (!v321)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v624 + 1) + 16))(*((_QWORD *)&v624 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v624 + 1));
                  }
                }
              }
              else
              {
                v620 = (google::protobuf::MessageLite *)google::protobuf::Reflection::MutableMessage(v610, v620, (const std::string::value_type **)FieldByName, 0, v300);
              }
              if (v620)
              {
                v617 = (*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)v620 + 168))(v620);
                if (!v617)
                {
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null descriptor", v373);
                  v617 = 0;
                }
                (*(void (**)(google::protobuf::MessageLite *))(*(_QWORD *)v620 + 168))(v620);
                v610 = v374;
                if (!v374)
                {
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null Reflection", 0);
                  v610 = 0;
                }
              }
              else
              {
                std::operator+<char>();
                v375 = std::string::append(&v729, "' returned null ");
                v376 = *(_OWORD *)&v375->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v375->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v376;
                v375->__r_.__value_.__l.__size_ = 0;
                v375->__r_.__value_.__r.__words[2] = 0;
                v375->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::GetXmlLineString((uint64_t)&v699, &v728);
                if ((v728.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v377 = &v728;
                else
                  v377 = (std::string *)v728.__r_.__value_.__r.__words[0];
                if ((v728.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v378 = HIBYTE(v728.__r_.__value_.__r.__words[2]);
                else
                  v378 = v728.__r_.__value_.__l.__size_;
                v379 = std::string::append(&__str, (const std::string::value_type *)v377, v378);
                v380 = *(_OWORD *)&v379->__r_.__value_.__l.__data_;
                v664.__r_.__value_.__r.__words[2] = v379->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v664.__r_.__value_.__l.__data_ = v380;
                v379->__r_.__value_.__l.__size_ = 0;
                v379->__r_.__value_.__r.__words[2] = 0;
                v379->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Log::LogWithLevel((uint64_t)&v664, 3u);
                if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v664.__r_.__value_.__l.__data_);
                if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v728.__r_.__value_.__l.__data_);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v729.__r_.__value_.__l.__data_);
                v617 = 0;
                v610 = 0;
                v283 = 1;
              }
              v381 = HIBYTE(v724.__r_.__value_.__r.__words[2]);
              if ((v724.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v381 = v724.__r_.__value_.__l.__size_;
              if (v381)
              {
                siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v664);
                LODWORD(v664.__r_.__value_.__r.__words[2]) |= 1u;
                std::string::basic_string[abi:ne180100]<0>(&__str, "VCPB");
                google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v665, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                LODWORD(v664.__r_.__value_.__r.__words[2]) |= 2u;
                if (v665[1] == &google::protobuf::internal::fixed_address_empty_string)
                  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)&v665[1], (uint64_t)&v724);
                else
                  std::string::operator=((std::string *)v665[1], &v724);
                siri::dialogengine::StoreVisualCatItem(v620, (google::protobuf::Message *)&v664, v382);
                siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v664);
              }
              std::string::basic_string[abi:ne180100]<0>(&v728, "id");
              siri::dialogengine::GetXmlAttr(reader, (const xmlChar *)&v728, &v664);
              siri::dialogengine::StringTrim(" \t\n\r", &v664, &v729);
              if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v664.__r_.__value_.__l.__data_);
              if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v728.__r_.__value_.__l.__data_);
              v384 = HIBYTE(v729.__r_.__value_.__r.__words[2]);
              v385 = HIBYTE(v729.__r_.__value_.__r.__words[2]);
              if ((v729.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v384 = v729.__r_.__value_.__l.__size_;
              if (v384)
              {
                siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v664);
                LODWORD(v664.__r_.__value_.__r.__words[2]) |= 1u;
                std::string::basic_string[abi:ne180100]<0>(&__str, "VCPB");
                google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v665, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if (LODWORD(v665[3]) == 5)
                {
                  if (v665[2] != &google::protobuf::internal::fixed_address_empty_string)
                  {
                    std::string::operator=((std::string *)v665[2], &v729);
                    goto LABEL_1053;
                  }
                }
                else
                {
                  siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)&v664);
                  LODWORD(v665[3]) = 5;
                  v665[2] = &google::protobuf::internal::fixed_address_empty_string;
                }
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)&v665[2], (uint64_t)&v729);
LABEL_1053:
                siri::dialogengine::StoreVisualCatItem(v620, (google::protobuf::Message *)&v664, v386);
                siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v664);
                v387 = *((_QWORD *)v621 + 63);
                v388 = (std::__shared_weak_count *)*((_QWORD *)v621 + 64);
                v664.__r_.__value_.__r.__words[0] = v387;
                v664.__r_.__value_.__l.__size_ = (std::string::size_type)v388;
                if (v388)
                {
                  v389 = (unint64_t *)&v388->__shared_owners_;
                  do
                    v390 = __ldxr(v389);
                  while (__stxr(v390 + 1, v389));
                }
                if (*(char *)(v387 + 127) < 0)
                  std::string::__init_copy_ctor_external(&v727, *(const std::string::value_type **)(v387 + 104), *(_QWORD *)(v387 + 112));
                else
                  v727 = *(std::string *)(v387 + 104);
                if (v388)
                {
                  v391 = (unint64_t *)&v388->__shared_owners_;
                  do
                    v392 = __ldaxr(v391);
                  while (__stlxr(v392 - 1, v391));
                  if (!v392)
                  {
                    ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
                    std::__shared_weak_count::__release_weak(v388);
                  }
                }
                v393 = *((_QWORD *)v621 + 63);
                v394 = (std::__shared_weak_count *)*((_QWORD *)v621 + 64);
                v722.__r_.__value_.__r.__words[0] = v393;
                v722.__r_.__value_.__l.__size_ = (std::string::size_type)v394;
                if (v394)
                {
                  v395 = (unint64_t *)&v394->__shared_owners_;
                  do
                    v396 = __ldxr(v395);
                  while (__stxr(v396 + 1, v395));
                }
                if (*(char *)(v393 + 127) < 0)
                  std::string::__init_copy_ctor_external(&v726, *(const std::string::value_type **)(v393 + 104), *(_QWORD *)(v393 + 112));
                else
                  v726 = *(std::string *)(v393 + 104);
                siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v664);
                LODWORD(v664.__r_.__value_.__r.__words[2]) |= 1u;
                std::string::basic_string[abi:ne180100]<0>(&__str, "VCPB");
                google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v665, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if (LODWORD(v665[3]) == 6)
                {
                  if (v665[2] != &google::protobuf::internal::fixed_address_empty_string)
                  {
                    std::string::operator=((std::string *)v665[2], &v726);
                    goto LABEL_1077;
                  }
                }
                else
                {
                  siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)&v664);
                  LODWORD(v665[3]) = 6;
                  v665[2] = &google::protobuf::internal::fixed_address_empty_string;
                }
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)&v665[2], (uint64_t)&v726);
LABEL_1077:
                siri::dialogengine::StoreVisualCatItem(v620, (google::protobuf::Message *)&v664, v397);
                siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v664);
                if (SHIBYTE(v726.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v726.__r_.__value_.__l.__data_);
                if (v394)
                {
                  v398 = (unint64_t *)&v394->__shared_owners_;
                  do
                    v399 = __ldaxr(v398);
                  while (__stlxr(v399 - 1, v398));
                  if (!v399)
                  {
                    ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
                    std::__shared_weak_count::__release_weak(v394);
                  }
                }
                if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v727.__r_.__value_.__l.__data_);
                v385 = HIBYTE(v729.__r_.__value_.__r.__words[2]);
              }
              if (v385 < 0)
                operator delete(v729.__r_.__value_.__l.__data_);
              goto LABEL_1161;
            }
            v716 = v624;
            if (*((_QWORD *)&v624 + 1))
            {
              v322 = (unint64_t *)(*((_QWORD *)&v624 + 1) + 8);
              do
                v323 = __ldxr(v322);
              while (__stxr(v323 + 1, v322));
            }
            siri::dialogengine::ParseListAndIterator((uint64_t)v621, (uint64_t *)&v716, (uint64_t)&v699, reader, v620, v623);
            v324 = (std::__shared_weak_count *)*((_QWORD *)&v716 + 1);
            if (*((_QWORD *)&v716 + 1))
            {
              v325 = (unint64_t *)(*((_QWORD *)&v716 + 1) + 8);
              do
                v326 = __ldaxr(v325);
              while (__stlxr(v326 - 1, v325));
              if (!v326)
              {
                ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                std::__shared_weak_count::__release_weak(v324);
              }
            }
            siri::dialogengine::GetExpandedValue(&v727, reader);
            if (v620)
            {
              (*(void (**)(google::protobuf::MessageLite *))(*(_QWORD *)v620 + 168))(v620);
              v329 = v328;
              if (v328)
              {
                siri::dialogengine::StringTrim(" \t\n\r", &v727, &v729);
                siri::dialogengine::ParseSpeakableString((uint64_t)&v729, &v728);
                if (siri::dialogengine::ChunkList::HasChildren((siri::dialogengine::ChunkList *)&v728))
                  goto LABEL_937;
                v330 = HIBYTE(v724.__r_.__value_.__r.__words[2]);
                if ((v724.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v330 = v724.__r_.__value_.__l.__size_;
                if (v330)
                {
LABEL_937:
                  v331 = *(const std::string **)FieldByName;
                  siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v664);
                  LODWORD(v664.__r_.__value_.__r.__words[2]) |= 1u;
                  std::string::basic_string[abi:ne180100]<0>(&__str, "VCPB");
                  *(_QWORD *)&v333 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v665, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str).n128_u64[0];
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  if (LODWORD(v665[3]) == 2)
                  {
                    v334 = (siri::dialogengine::CatBinary::vcat_item_expression *)v665[2];
                    if (v665[2])
                      goto LABEL_941;
LABEL_1090:
                    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get mutable item expression", v332, v333);
                    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v664);
                  }
                  else
                  {
                    siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)&v664);
                    LODWORD(v665[3]) = 2;
                    v334 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_expression>(0);
                    v665[2] = v334;
                    if (!v334)
                      goto LABEL_1090;
LABEL_941:
                    v335 = (std::string *)*((_QWORD *)v334 + 3);
                    *((_DWORD *)v334 + 4) |= 1u;
                    if (v335 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v334 + 3, (uint64_t)v331);
                    else
                      std::string::operator=(v335, v331);
                    v407 = (uint64_t *)*((_QWORD *)v334 + 4);
                    v406 = (std::string **)((char *)v334 + 32);
                    v405 = (std::string *)v407;
                    *((_DWORD *)v406 - 4) |= 2u;
                    if (v407 == &google::protobuf::internal::fixed_address_empty_string)
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v406, (uint64_t)&v729);
                    else
                      std::string::operator=(v405, &v729);
                    v409 = HIBYTE(v724.__r_.__value_.__r.__words[2]);
                    if ((v724.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v409 = v724.__r_.__value_.__l.__size_;
                    if (v409)
                    {
                      LODWORD(v664.__r_.__value_.__r.__words[2]) |= 2u;
                      if (v665[1] == &google::protobuf::internal::fixed_address_empty_string)
                        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)&v665[1], (uint64_t)&v724);
                      else
                        std::string::operator=((std::string *)v665[1], &v724);
                    }
                    siri::dialogengine::StoreVisualCatItem(v620, (google::protobuf::Message *)&v664, v408);
                    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v664);
                    HasRequiredVariablesOrPhrases = siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)&v728);
                    v431 = v609;
                    if (HasRequiredVariablesOrPhrases)
                      v431 = 1;
                    v609 = v431;
                  }
                }
                else
                {
                  siri::dialogengine::ExpandToText((uint64_t)&v664, (uint64_t *)v728.__r_.__value_.__l.__data_, (uint64_t *)v728.__r_.__value_.__l.__size_);
                  if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&__str, v664.__r_.__value_.__l.__data_, v664.__r_.__value_.__l.__size_);
                  else
                    __str = v664;
                  siri::dialogengine::SetField((uint64_t)v621, v620, v329, (google::protobuf::FieldDescriptor *)FieldByName, &__str);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  if ((v674[7] & 0x80000000) != 0)
                    operator delete(*((void **)&v671 + 1));
                  if (SBYTE7(v671) < 0)
                    operator delete((void *)v670);
                  if (SHIBYTE(v669) < 0)
                    operator delete(*((void **)&v668 + 1));
                  if (SBYTE7(v668) < 0)
                    operator delete((void *)v667);
                  if (SHIBYTE(v666) < 0)
                    operator delete(v665[3]);
                  if (SHIBYTE(v665[2]) < 0)
                    operator delete(v665[0]);
                  if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v664.__r_.__value_.__l.__data_);
                }
                v664.__r_.__value_.__r.__words[0] = (std::string::size_type)&v728;
                std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v664);
                if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v729.__r_.__value_.__l.__data_);
                v383 = 0;
LABEL_1158:
                siri::dialogengine::SkipNodeBranch(reader, (int *)&v699);
                if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v727.__r_.__value_.__l.__data_);
                v283 |= v383;
                goto LABEL_1161;
              }
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null Reflection", 0);
            }
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get message reflection", v327);
            v383 = 1;
            goto LABEL_1158;
          }
LABEL_943:
          v336 = *((_QWORD *)&v702 + 1);
          v337 = xmlTextReaderConstBaseUri(reader);
          if (v337)
            v338 = (char *)v337;
          else
            v338 = "";
          std::string::basic_string[abi:ne180100]<0>(&__str, v338);
          siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v664, v336, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          std::operator+<char>();
          v339 = std::string::append(&v722, "' field name '");
          v340 = *(_OWORD *)&v339->__r_.__value_.__l.__data_;
          v726.__r_.__value_.__r.__words[2] = v339->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v726.__r_.__value_.__l.__data_ = v340;
          v339->__r_.__value_.__l.__size_ = 0;
          v339->__r_.__value_.__r.__words[2] = 0;
          v339->__r_.__value_.__r.__words[0] = 0;
          if ((v725.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v341 = &v725;
          else
            v341 = (std::string *)v725.__r_.__value_.__r.__words[0];
          if ((v725.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v342 = HIBYTE(v725.__r_.__value_.__r.__words[2]);
          else
            v342 = v725.__r_.__value_.__l.__size_;
          v343 = std::string::append(&v726, (const std::string::value_type *)v341, v342);
          v344 = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
          v727.__r_.__value_.__r.__words[2] = v343->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v727.__r_.__value_.__l.__data_ = v344;
          v343->__r_.__value_.__l.__size_ = 0;
          v343->__r_.__value_.__r.__words[2] = 0;
          v343->__r_.__value_.__r.__words[0] = 0;
          v345 = std::string::append(&v727, "' does not match any field of the oneof '");
          v346 = *(_OWORD *)&v345->__r_.__value_.__l.__data_;
          v728.__r_.__value_.__r.__words[2] = v345->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v728.__r_.__value_.__l.__data_ = v346;
          v345->__r_.__value_.__l.__size_ = 0;
          v345->__r_.__value_.__r.__words[2] = 0;
          v345->__r_.__value_.__r.__words[0] = 0;
          v347 = *(_QWORD *)(v302 + 8);
          v348 = *(char *)(v347 + 23);
          if (v348 >= 0)
            v349 = *(const std::string::value_type **)(v302 + 8);
          else
            v349 = *(const std::string::value_type **)v347;
          if (v348 >= 0)
            v350 = *(unsigned __int8 *)(v347 + 23);
          else
            v350 = *(_QWORD *)(v347 + 8);
          v351 = std::string::append(&v728, v349, v350);
          v352 = *(_OWORD *)&v351->__r_.__value_.__l.__data_;
          v729.__r_.__value_.__r.__words[2] = v351->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v729.__r_.__value_.__l.__data_ = v352;
          v351->__r_.__value_.__l.__size_ = 0;
          v351->__r_.__value_.__r.__words[2] = 0;
          v351->__r_.__value_.__r.__words[0] = 0;
          v353 = std::string::append(&v729, "' ");
          v291 = v301;
          v354 = *(_OWORD *)&v353->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v353->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v354;
          v353->__r_.__value_.__l.__size_ = 0;
          v353->__r_.__value_.__r.__words[2] = 0;
          v353->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&__str, (uint64_t)&v664);
          v281 = v615;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v729.__r_.__value_.__l.__data_);
          if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v728.__r_.__value_.__l.__data_);
          if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v727.__r_.__value_.__l.__data_);
          if (SHIBYTE(v726.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v726.__r_.__value_.__l.__data_);
          if (SHIBYTE(v722.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v722.__r_.__value_.__l.__data_);
          siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v664.__r_.__value_.__l.__data_);
          v283 = 1;
LABEL_973:
          if (v291)
          {
            if (v618 == v282 || !*((_QWORD *)v282 - 1))
              goto LABEL_1161;
            v355 = *((_QWORD *)&v702 + 1);
            v356 = xmlTextReaderConstBaseUri(reader);
            if (v356)
              v357 = (char *)v356;
            else
              v357 = "";
            std::string::basic_string[abi:ne180100]<0>(&__str, v357);
            siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v664, v355, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            std::operator+<char>();
            v358 = std::string::append(&v727, "' may not be a child of '");
            v359 = *(_OWORD *)&v358->__r_.__value_.__l.__data_;
            v728.__r_.__value_.__r.__words[2] = v358->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v728.__r_.__value_.__l.__data_ = v359;
            v358->__r_.__value_.__l.__size_ = 0;
            v358->__r_.__value_.__r.__words[2] = 0;
            v358->__r_.__value_.__r.__words[0] = 0;
            v360 = *(_QWORD *)(*((_QWORD *)v282 - 1) + 8);
            v361 = *(char *)(v360 + 23);
            if (v361 >= 0)
              v362 = *(const std::string::value_type **)(*((_QWORD *)v282 - 1) + 8);
            else
              v362 = *(const std::string::value_type **)v360;
            if (v361 >= 0)
              v363 = *(unsigned __int8 *)(v360 + 23);
            else
              v363 = *(_QWORD *)(v360 + 8);
          }
          else
          {
            v364 = *((_QWORD *)&v702 + 1);
            v365 = xmlTextReaderConstBaseUri(reader);
            if (v365)
              v366 = (char *)v365;
            else
              v366 = "";
            std::string::basic_string[abi:ne180100]<0>(&__str, v366);
            siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v664, v364, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            std::operator+<char>();
            v367 = std::string::append(&v727, "' does not allow child element '");
            v368 = *(_OWORD *)&v367->__r_.__value_.__l.__data_;
            v728.__r_.__value_.__r.__words[2] = v367->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v728.__r_.__value_.__l.__data_ = v368;
            v367->__r_.__value_.__l.__size_ = 0;
            v367->__r_.__value_.__r.__words[2] = 0;
            v367->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v701) >= 0)
              v362 = (const std::string::value_type *)v623;
            else
              v362 = (const std::string::value_type *)__p;
            if (SHIBYTE(v701) >= 0)
              v363 = HIBYTE(v701);
            else
              v363 = *((_QWORD *)&__p + 1);
          }
          v369 = std::string::append(&v728, v362, v363);
          v370 = *(_OWORD *)&v369->__r_.__value_.__l.__data_;
          v729.__r_.__value_.__r.__words[2] = v369->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v729.__r_.__value_.__l.__data_ = v370;
          v369->__r_.__value_.__l.__size_ = 0;
          v369->__r_.__value_.__r.__words[2] = 0;
          v369->__r_.__value_.__r.__words[0] = 0;
          v371 = std::string::append(&v729, "' ");
          v372 = *(_OWORD *)&v371->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v371->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v372;
          v371->__r_.__value_.__l.__size_ = 0;
          v371->__r_.__value_.__r.__words[2] = 0;
          v371->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&__str, (uint64_t)&v664);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v729.__r_.__value_.__l.__data_);
          if (SHIBYTE(v728.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v728.__r_.__value_.__l.__data_);
          if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v727.__r_.__value_.__l.__data_);
          siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v664.__r_.__value_.__l.__data_);
          v283 = 1;
LABEL_1161:
          if (v282 >= v611)
          {
            v432 = (v282 - v618) >> 3;
            v433 = v432 + 1;
            if ((unint64_t)(v432 + 1) >> 61)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            if ((v611 - v618) >> 2 > v433)
              v433 = (v611 - v618) >> 2;
            if ((unint64_t)(v611 - v618) >= 0x7FFFFFFFFFFFFFF8)
              v434 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v434 = v433;
            if (v434)
            {
              if (v434 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v435 = (char *)operator new(8 * v434);
            }
            else
            {
              v435 = 0;
            }
            v436 = (uint64_t *)&v435[8 * v432];
            *v436 = v291;
            v437 = (char *)(v436 + 1);
            if (v618 != v282)
            {
              do
              {
                v438 = *((_QWORD *)v282 - 1);
                v282 -= 8;
                *--v436 = v438;
              }
              while (v282 != v618);
              v282 = v618;
            }
            v618 = (char *)v436;
            v611 = &v435[8 * v434];
            if (v282)
              operator delete(v282);
            v282 = v437;
          }
          else
          {
            *(_QWORD *)v282 = v291;
            v282 += 8;
          }
          if (SHIBYTE(v724.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v724.__r_.__value_.__l.__data_);
          v284 = (v284 + 1);
LABEL_1182:
          if (HIBYTE(v703))
          {
            if (v281 == v285)
            {
              v439 = 0;
            }
            else
            {
              v439 = *(v285 - 1);
              if (v618 != v282)
              {
                v282 -= 8;
                --v285;
                goto LABEL_1191;
              }
            }
            std::operator+<char>();
            v440 = std::string::append(&__str, "'");
            v441 = *(_OWORD *)&v440->__r_.__value_.__l.__data_;
            v664.__r_.__value_.__r.__words[2] = v440->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v664.__r_.__value_.__l.__data_ = v441;
            v440->__r_.__value_.__l.__size_ = 0;
            v440->__r_.__value_.__r.__words[2] = 0;
            v440->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::LogWithLevel((uint64_t)&v664, 3u);
            if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v664.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
LABEL_1191:
            if (v618 != v282)
            {
              v442 = *((_QWORD *)v282 - 1);
              if (v442)
              {
                v616 = v281;
                if (v281 == v285)
                  v443 = 0;
                else
                  v443 = *(v285 - 1);
                v444 = *(char **)v442;
                if (*(char *)(*(_QWORD *)v442 + 23) >= 0)
                  v445 = *(unsigned __int8 *)(*(_QWORD *)v442 + 23);
                else
                  v445 = *(_QWORD *)(*(_QWORD *)v442 + 8);
                std::string::basic_string[abi:ne180100]((uint64_t)&v727, v445 + 1);
                if ((v727.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v446 = &v727;
                else
                  v446 = (std::string *)v727.__r_.__value_.__r.__words[0];
                if (v445)
                {
                  if (v444[23] >= 0)
                    v447 = v444;
                  else
                    v447 = *(char **)v444;
                  memmove(v446, v447, v445);
                }
                *(_WORD *)((char *)&v446->__r_.__value_.__l.__data_ + v445) = 32;
                if ((v725.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v448 = &v725;
                else
                  v448 = (std::string *)v725.__r_.__value_.__r.__words[0];
                if ((v725.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v449 = HIBYTE(v725.__r_.__value_.__r.__words[2]);
                else
                  v449 = v725.__r_.__value_.__l.__size_;
                v450 = std::string::append(&v727, (const std::string::value_type *)v448, v449);
                v451 = *(_OWORD *)&v450->__r_.__value_.__l.__data_;
                v728.__r_.__value_.__r.__words[2] = v450->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v728.__r_.__value_.__l.__data_ = v451;
                v450->__r_.__value_.__l.__size_ = 0;
                v450->__r_.__value_.__r.__words[2] = 0;
                v450->__r_.__value_.__r.__words[0] = 0;
                v452 = HIBYTE(v728.__r_.__value_.__r.__words[2]);
                v453 = HIBYTE(v728.__r_.__value_.__r.__words[2]);
                v281 = v616;
                v454 = 0;
                if (v443)
                {
                  if ((v728.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v452 = v728.__r_.__value_.__l.__size_;
                  if (v620 && v452)
                  {
                    siri::dialogengine::GetMessageCondition(&v729, v620);
                    v455 = HIBYTE(v729.__r_.__value_.__r.__words[2]);
                    if ((v729.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v455 = v729.__r_.__value_.__l.__size_;
                    if (v455)
                    {
                      siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v664);
                      LODWORD(v664.__r_.__value_.__r.__words[2]) |= 1u;
                      std::string::basic_string[abi:ne180100]<0>(&__str, "VCPB");
                      *(_QWORD *)&v457 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v665, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str).n128_u64[0];
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__str.__r_.__value_.__l.__data_);
                      if (LODWORD(v665[3]) == 2)
                      {
                        v458 = (siri::dialogengine::CatBinary::vcat_item_expression *)v665[2];
                      }
                      else
                      {
                        siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)&v664);
                        LODWORD(v665[3]) = 2;
                        v458 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_expression>(0);
                        v665[2] = v458;
                      }
                      v454 = v458 != 0;
                      if (v458)
                      {
                        v459 = (std::string *)*((_QWORD *)v458 + 3);
                        *((_DWORD *)v458 + 4) |= 1u;
                        if (v459 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v458 + 3, (uint64_t)&v728);
                        else
                          std::string::operator=(v459, &v728);
                        google::protobuf::MessageLite::SerializeAsString(v620, (uint64_t)&__str);
                        *((_DWORD *)v458 + 4) |= 2u;
                        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v458 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__str.__r_.__value_.__l.__data_);
                        *((_DWORD *)v458 + 4) |= 4u;
                        std::string::basic_string[abi:ne180100]<0>(&__str, "oneof_msg");
                        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v458 + 5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__str.__r_.__value_.__l.__data_);
                        v461 = HIBYTE(v729.__r_.__value_.__r.__words[2]);
                        if ((v729.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v461 = v729.__r_.__value_.__l.__size_;
                        if (v461)
                        {
                          LODWORD(v664.__r_.__value_.__r.__words[2]) |= 2u;
                          if (v665[1] == &google::protobuf::internal::fixed_address_empty_string)
                            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)&v665[1], (uint64_t)&v729);
                          else
                            std::string::operator=((std::string *)v665[1], &v729);
                        }
                        siri::dialogengine::StoreVisualCatItem(v443, (google::protobuf::Message *)&v664, v460);
                      }
                      else
                      {
                        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get mutable item expression", v456, v457);
                      }
                      siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v664);
                      if ((*((_BYTE *)&v729.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_1245:
                        operator delete(v729.__r_.__value_.__l.__data_);
                    }
                    else
                    {
                      v454 = 0;
                      if ((*((_BYTE *)&v729.__r_.__value_.__s + 23) & 0x80) != 0)
                        goto LABEL_1245;
                    }
                    v453 = HIBYTE(v728.__r_.__value_.__r.__words[2]);
                  }
                }
                if (v453 < 0)
                  operator delete(v728.__r_.__value_.__l.__data_);
                if (SHIBYTE(v727.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v727.__r_.__value_.__l.__data_);
                  if (!v454)
                    goto LABEL_1254;
                }
                else if (!v454)
                {
                  goto LABEL_1254;
                }
                (*(void (**)(siri::dialogengine *))(*(_QWORD *)v443 + 168))(v443);
                google::protobuf::Reflection::ClearOneof(v462, v443, v442);
              }
            }
LABEL_1254:
            if (v439 != v620)
            {
              if (v439)
              {
                v617 = (*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)v439 + 168))(v439);
                if (!v617)
                {
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null descriptor", v463);
                  v617 = 0;
                }
                (*(void (**)(google::protobuf::MessageLite *))(*(_QWORD *)v439 + 168))(v439);
                v610 = v464;
                if (!v464)
                {
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null Reflection", 0);
                  v610 = 0;
                }
                v620 = v439;
              }
              else
              {
                v620 = 0;
                v617 = 0;
                v610 = 0;
              }
            }
            v284 = (v284 - 1);
          }
          siri::dialogengine::ReadNextNode(reader, (uint64_t)&v664);
          v699 = v664.__r_.__value_.__l.__data_;
          if (SHIBYTE(v701) < 0)
            operator delete((void *)__p);
          *(_OWORD *)v623 = *(_OWORD *)&v664.__r_.__value_.__r.__words[1];
          *(void **)(v623 + 16) = v665[0];
          v702 = *(_OWORD *)&v665[1];
          v703 = (__int16)v665[3];
          if (SHIBYTE(v725.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v725.__r_.__value_.__l.__data_);
          v288 = v284;
LABEL_1268:
          v284 = v288;
          if ((int)v288 >= 1 && v699 != -1)
            continue;
          break;
        }
        a4 = v607;
        a1 = v608;
        if (v618)
          operator delete(v618);
        v4 = reader;
        p_p = (std::string *)v623;
        if (v281)
          operator delete(v281);
        v468 = 1;
        v269 = (std::__shared_weak_count *)*((_QWORD *)&v624 + 1);
        v467 = v609;
        if (*((_QWORD *)&v624 + 1))
          goto LABEL_1301;
LABEL_1310:
        if (v467)
          *(_BYTE *)(v613 + 352) = 1;
        if ((v468 & 1) == 0)
        {
          std::operator+<char>();
          v471 = std::string::append(&__str, "' is not an allowed child of 'response'");
          v472 = *(_OWORD *)&v471->__r_.__value_.__l.__data_;
          v664.__r_.__value_.__r.__words[2] = v471->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v664.__r_.__value_.__l.__data_ = v472;
          v471->__r_.__value_.__l.__size_ = 0;
          v471->__r_.__value_.__r.__words[2] = 0;
          v471->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&v664, v613);
          goto LABEL_1314;
        }
LABEL_1319:
        v473 = 0;
LABEL_1320:
        v474 = (std::__shared_weak_count *)*((_QWORD *)&v714 + 1);
        if (*((_QWORD *)&v714 + 1))
        {
          v475 = (unint64_t *)(*((_QWORD *)&v714 + 1) + 8);
          do
            v476 = __ldaxr(v475);
          while (__stlxr(v476 - 1, v475));
          if (!v476)
          {
            ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
            std::__shared_weak_count::__release_weak(v474);
          }
        }
        v477 = (std::__shared_weak_count *)*((_QWORD *)&v715 + 1);
        if (*((_QWORD *)&v715 + 1))
        {
          v478 = (unint64_t *)(*((_QWORD *)&v715 + 1) + 8);
          do
            v479 = __ldaxr(v478);
          while (__stlxr(v479 - 1, v478));
          if (!v479)
          {
            ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
            std::__shared_weak_count::__release_weak(v477);
            if (!v473)
              goto LABEL_1333;
LABEL_1330:
            if (v473 == 4)
              goto LABEL_1410;
            goto LABEL_1642;
          }
        }
        if (v473)
          goto LABEL_1330;
LABEL_1333:
        if (HIBYTE(v703))
        {
          if ((SHIBYTE(v701) & 0x80000000) == 0)
          {
            v480 = HIBYTE(v701);
            v481 = (std::string::__raw *)p_p;
            switch(HIBYTE(v701))
            {
              case 3:
                v482 = BYTE2(__p);
                v483 = (unsigned __int16)__p == 27745;
                v484 = 108;
                break;
              case 5:
                v482 = BYTE4(__p);
                v483 = (_DWORD)__p == 1936877926;
                v484 = 116;
                break;
              case 6:
                if ((_DWORD)__p == 1684955506 && WORD2(__p) == 28015)
                  goto LABEL_1365;
                v482 = WORD2(__p);
                v483 = (_DWORD)__p == 1953068915;
                v484 = 26723;
                break;
              case 8:
                goto LABEL_1364;
              default:
                goto LABEL_1379;
            }
            if (!v483 || v482 != v484)
              goto LABEL_1377;
LABEL_1365:
            if (v693 == v694)
            {
              v493 = *((_QWORD *)&v702 + 1);
              v494 = xmlTextReaderConstBaseUri(v4);
              if (v494)
                v495 = (char *)v494;
              else
                v495 = "";
              std::string::basic_string[abi:ne180100]<0>(&__str, v495);
              siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v664, v493, &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              std::operator+<char>();
              v496 = std::string::append(&v729, "'");
              v497 = *(_OWORD *)&v496->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v496->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v497;
              v496->__r_.__value_.__l.__size_ = 0;
              v496->__r_.__value_.__r.__words[2] = 0;
              v496->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&__str, (uint64_t)&v664);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v729.__r_.__value_.__l.__data_);
              siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v664.__r_.__value_.__l.__data_);
            }
            else
            {
              v694 = (char *)std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(v694 - 16));
            }
            goto LABEL_1377;
          }
          v485 = *((_QWORD *)&__p + 1);
          switch(*((_QWORD *)&__p + 1))
          {
            case 3:
              v486 = *(unsigned __int8 *)(__p + 2);
              v487 = *(unsigned __int16 *)__p == 27745;
              v488 = 108;
              break;
            case 5:
              v486 = *(unsigned __int8 *)(__p + 4);
              v487 = *(_DWORD *)__p == 1936877926;
              v488 = 116;
              break;
            case 6:
              if (*(_DWORD *)__p == 1684955506 && *(_WORD *)(__p + 4) == 28015)
                goto LABEL_1365;
              v486 = *(unsigned __int16 *)(__p + 4);
              v487 = *(_DWORD *)__p == 1953068915;
              v488 = 26723;
              break;
            case 8:
              v481 = (std::string::__raw *)__p;
LABEL_1364:
              if (v481->__words[0] == 0x6B6361626C6C6166)
                goto LABEL_1365;
              goto LABEL_1377;
            default:
              goto LABEL_1382;
          }
          if (v487 && v486 == v488)
            goto LABEL_1365;
LABEL_1377:
          if ((SHIBYTE(v701) & 0x80000000) == 0)
          {
            v480 = HIBYTE(v701);
LABEL_1379:
            v498 = p_p;
            if (v480 != 7)
              goto LABEL_1393;
LABEL_1384:
            v499 = (int)v498->__r_.__value_.__l.__data_;
            v500 = *(_DWORD *)((char *)v498->__r_.__value_.__r.__words + 3);
            if (v499 == 1634887792 && v500 == 1936028513)
            {
              v502 = (uint64_t)v694;
              v503 = v693;
              while ((char *)v502 != v503)
                v502 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v502 - 16);
              v614 = 0;
              v694 = v503;
            }
            goto LABEL_1393;
          }
          v485 = *((_QWORD *)&__p + 1);
LABEL_1382:
          if (v485 == 7)
          {
            v498 = (std::string *)__p;
            goto LABEL_1384;
          }
LABEL_1393:
          if (v696 == v697)
          {
            v505 = *((_QWORD *)&v702 + 1);
            v506 = xmlTextReaderConstBaseUri(v4);
            if (v506)
              v507 = (char *)v506;
            else
              v507 = "";
            std::string::basic_string[abi:ne180100]<0>(&__str, v507);
            siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v664, v505, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            std::operator+<char>();
            v508 = std::string::append(&v729, "'");
            v509 = *(_OWORD *)&v508->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v508->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v509;
            v508->__r_.__value_.__l.__size_ = 0;
            v508->__r_.__value_.__r.__words[2] = 0;
            v508->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&__str, (uint64_t)&v664);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v729.__r_.__value_.__l.__data_);
            siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v664.__r_.__value_.__l.__data_);
          }
          else
          {
            v504 = v697 - 1;
            if (SHIBYTE(v697[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v504->__r_.__value_.__l.__data_);
            v697 = v504;
          }
          v510 = *((_QWORD *)&v702 + 1);
          if (*(_QWORD *)(v704 + 640) > *((_QWORD *)&v702 + 1))
            v510 = *(_QWORD *)(v704 + 640);
          *(_QWORD *)(v704 + 640) = v510;
        }
LABEL_1410:
        siri::dialogengine::ReadNextNode(v4, (uint64_t)&v664);
        data = v664.__r_.__value_.__l.__data_;
        v699 = v664.__r_.__value_.__l.__data_;
        if (SHIBYTE(v701) < 0)
        {
          operator delete((void *)__p);
          data = v699;
        }
        v24 = 0;
        *(_OWORD *)&p_p->__r_.__value_.__l.__data_ = *(_OWORD *)&v664.__r_.__value_.__r.__words[1];
        p_p->__r_.__value_.__r.__words[2] = (std::string::size_type)v665[0];
        v702 = *(_OWORD *)&v665[1];
        v703 = (__int16)v665[3];
        if (data == 1)
          continue;
LABEL_1643:
        if (!data && v691 == v692)
        {
          *a1 = v704;
          a1 = &v704;
        }
        else
        {
          std::operator+<char>();
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v664, 3u);
          if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v664.__r_.__value_.__l.__data_);
        }
        *(_QWORD *)a1 = 0;
        *((_QWORD *)a1 + 1) = 0;
        siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)v690);
        v664.__r_.__value_.__r.__words[0] = (std::string::size_type)&v693;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v664);
        v664.__r_.__value_.__r.__words[0] = (std::string::size_type)&v696;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v664);
        if (SHIBYTE(v701) < 0)
          operator delete((void *)__p);
        v604 = (std::__shared_weak_count *)*((_QWORD *)&v704 + 1);
        if (*((_QWORD *)&v704 + 1))
        {
          v605 = (unint64_t *)(*((_QWORD *)&v704 + 1) + 8);
          do
            v606 = __ldaxr(v605);
          while (__stlxr(v606 - 1, v605));
          if (!v606)
          {
            ((void (*)(std::__shared_weak_count *))v604->__on_zero_shared)(v604);
            std::__shared_weak_count::__release_weak(v604);
          }
        }
        v4 = v705;
LABEL_1656:
        v705 = 0;
        if (v4)
          xmlFreeTextReader(v4);
        return;
      case 8:
        v65 = (std::string::__raw *)__p;
LABEL_222:
        if (v65->__words[0] == 0x6B6361626C6C6166)
        {
          if ((v614 & 1) != 0)
          {
            v82 = *((_QWORD *)&v702 + 1);
            v83 = xmlTextReaderConstBaseUri(v4);
            if (v83)
              v84 = (char *)v83;
            else
              v84 = "";
            std::string::basic_string[abi:ne180100]<0>(&__str, v84);
            siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v664, v82, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            siri::dialogengine::GetXmlLineString((uint64_t)&v699, &v729);
            v85 = std::string::insert(&v729, 0, "Cannot use a 'fallback' element within the phrases section ");
            v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v86;
            v85->__r_.__value_.__l.__size_ = 0;
            v85->__r_.__value_.__r.__words[2] = 0;
            v85->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError((uint64_t)v621, (__int128 *)&__str, (uint64_t)&v664);
LABEL_230:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v729.__r_.__value_.__l.__data_);
            siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v664.__r_.__value_.__l.__data_);
            v614 = 1;
          }
          else
          {
            _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine11GroupRandomENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v664);
            v614 = 0;
            v714 = *(_OWORD *)&v664.__r_.__value_.__l.__data_;
            v108 = v664.__r_.__value_.__r.__words[0];
            if (v664.__r_.__value_.__r.__words[0])
            {
LABEL_741:
              *(_QWORD *)(v108 + 8) = *((_QWORD *)&v702 + 1);
              siri::dialogengine::LineNumberBase::SetFullPath(v108, (const std::string *)a4);
              if (*(_QWORD *)(v704 + 296))
              {
                std::string::basic_string[abi:ne180100]<0>(&v664, "Multiple fallback elements found in XML file");
                siri::dialogengine::Context::AddValidationWarning((uint64_t)v621, (__int128 *)&v664, v714);
                if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v664.__r_.__value_.__l.__data_);
              }
              else
              {
                v234 = (_QWORD *)(v704 + 296);
                v235 = v714;
                if (*((_QWORD *)&v714 + 1))
                {
                  v236 = (unint64_t *)(*((_QWORD *)&v714 + 1) + 8);
                  do
                    v237 = __ldxr(v236);
                  while (__stxr(v237 + 1, v236));
                  std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v234, v235, *((uint64_t *)&v235 + 1));
                  v238 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
                  do
                    v239 = __ldaxr(v238);
                  while (__stlxr(v239 - 1, v238));
                  if (!v239)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v235 + 1) + 16))(*((_QWORD *)&v235 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v235 + 1));
                  }
                }
                else
                {
                  std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v234, v714, 0);
                }
              }
              std::vector<std::shared_ptr<siri::dialogengine::Group>>::push_back[abi:ne180100](&v693, &v714);
            }
          }
        }
        goto LABEL_753;
      default:
        goto LABEL_753;
    }
  }
}

void sub_1BFAC7438(_Unwind_Exception *a1)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x6B0]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x5F0]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x600]);
  siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)&STACK[0x4C8]);
  STACK[0x4C8] = (unint64_t)&STACK[0x4E8];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4C8]);
  STACK[0x4C8] = (unint64_t)&STACK[0x500];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4C8]);
  if (SLOBYTE(STACK[0x537]) < 0)
    operator delete((void *)STACK[0x520]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x550]);
  std::unique_ptr<_xmlTextReader,siri::dialogengine::xmlTextReaderDeleter>::reset[abi:ne180100]((xmlTextReader **)&STACK[0x568]);
  _Unwind_Resume(a1);
}

void siri::dialogengine::EnclosingElement(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3) < 2)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
  else
  {
    v3 = a2 + 8 * ((a3 - a2) >> 3);
    if (*(char *)(v3 - 25) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(v3 - 48), *(_QWORD *)(v3 - 40));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)(v3 - 48);
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 - 32);
    }
  }
}

uint64_t siri::dialogengine::AddConditionEntry(__int128 *a1, xmlTextReader *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  const char *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v36;
  __int128 v37;
  void *__p[2];
  char v39;
  std::string __str;
  std::string *p_str;
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "note");
  siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)__p, &__str);
  std::string::operator=((std::string *)(v8 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v39 < 0)
    operator delete(__p[0]);
  v10 = *(void ***)a3;
  v11 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v11)
  {
    v19 = *a4;
    v20 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v37 = *(_QWORD *)a1;
    *((_QWORD *)&v37 + 1) = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v19 + 144), &v37);
    if (v20)
    {
      v23 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v26 = *(_QWORD *)a1;
    v25 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v43 = *(_QWORD *)a1;
    v44 = v25;
    if (v25)
    {
      v27 = (unint64_t *)&v25->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    memset(&__str, 0, sizeof(__str));
    p_str = &__str;
    v42 = 0;
    v29 = operator new(0x10uLL);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v29 + 2);
    *v29 = v26;
    v29[1] = v25;
    if (v25)
    {
      v30 = (unint64_t *)&v25->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)(v29 + 2);
    std::vector<std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>>::push_back[abi:ne180100]((void ***)a3, (uint64_t)&__str);
    p_str = &__str;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
    if (v25)
    {
      v32 = (unint64_t *)&v25->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  else
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v10) >> 3);
    if (v12 < 2)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid condition content in XML file!", v9);
      return 0;
    }
    v13 = *((_QWORD *)v10[3 * v12 - 5] - 2);
    v14 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    *(_QWORD *)&v36 = *(_QWORD *)a1;
    *((_QWORD *)&v36 + 1) = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v13 + 64), &v36);
    if (v14)
    {
      v17 = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(*(_QWORD *)(a3 + 8) - 24), a1);
  }
  v34 = *(_QWORD *)a1;
  siri::dialogengine::GetXmlAttrs(a2, (uint64_t)&__str);
  if ((std::string *)(v34 + 8) != &__str)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v34 + 8, (__int128 *)__str.__r_.__value_.__l.__data_, (__int128 *)&__str.__r_.__value_.__r.__words[1]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)__str.__r_.__value_.__l.__size_);
  return 1;
}

void sub_1BFAC8D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>>::push_back[abi:ne180100](void ***a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  void **v15;
  __int128 v16;
  void **v17;
  void **v18;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a1);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = 3 * v8;
    v11 = (char *)operator new(24 * v8);
    v12 = &v11[24 * v7];
    v13 = (void **)&v11[8 * v10];
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = (void **)(v12 + 24);
    v14 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      do
      {
        *((_QWORD *)v12 - 3) = 0;
        *((_QWORD *)v12 - 2) = 0;
        v12 -= 24;
        *((_QWORD *)v12 + 2) = 0;
        v16 = *(_OWORD *)(v15 - 3);
        v15 -= 3;
        *(_OWORD *)v12 = v16;
        *((_QWORD *)v12 + 2) = v15[2];
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
      }
      while (v15 != v14);
      v15 = *a1;
      v17 = a1[1];
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v13;
      while (v17 != v15)
      {
        v17 -= 3;
        v18 = v17;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v18);
      }
    }
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *(_OWORD *)v4 = *(_OWORD *)a2;
    v4[2] = *(void **)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = v4 + 3;
  }
  a1[1] = v6;
}

char *_ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine11GroupRandomENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  _OWORD *v2;
  char *result;

  v2 = operator new(0x118uLL);
  *(_OWORD *)((char *)v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1E7933BC8;
  v2[2] = 0u;
  v2[3] = 0u;
  *(_OWORD *)((char *)v2 + 104) = 0u;
  v2[4] = 0u;
  *((_QWORD *)v2 + 12) = (char *)v2 + 104;
  *(_OWORD *)((char *)v2 + 120) = 0u;
  *(_OWORD *)((char *)v2 + 136) = 0u;
  *(_OWORD *)((char *)v2 + 152) = 0u;
  *(_OWORD *)((char *)v2 + 168) = 0u;
  *(_OWORD *)((char *)v2 + 184) = 0u;
  *(_OWORD *)((char *)v2 + 200) = 0u;
  *((_DWORD *)v2 + 54) = 1065353216;
  *((_QWORD *)v2 + 34) = 0;
  v2[15] = 0u;
  v2[16] = 0u;
  v2[14] = 0u;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 11) = &unk_1E793A5F0;
  a1[1] = v2;
  *((_QWORD *)v2 + 3) = &off_1E793A598;
  result = (char *)v2 + 24;
  *a1 = result;
  return result;
}

char *_ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine10GroupFirstENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  _OWORD *v2;
  char *result;

  v2 = operator new(0x118uLL);
  *(_OWORD *)((char *)v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1E7933C18;
  v2[2] = 0u;
  v2[3] = 0u;
  *(_OWORD *)((char *)v2 + 104) = 0u;
  v2[4] = 0u;
  *((_QWORD *)v2 + 12) = (char *)v2 + 104;
  *(_OWORD *)((char *)v2 + 120) = 0u;
  *(_OWORD *)((char *)v2 + 136) = 0u;
  *(_OWORD *)((char *)v2 + 152) = 0u;
  *(_OWORD *)((char *)v2 + 168) = 0u;
  *(_OWORD *)((char *)v2 + 184) = 0u;
  *(_OWORD *)((char *)v2 + 200) = 0u;
  *((_DWORD *)v2 + 54) = 1065353216;
  *((_QWORD *)v2 + 34) = 0;
  v2[15] = 0u;
  v2[16] = 0u;
  v2[14] = 0u;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 11) = &unk_1E7936690;
  a1[1] = v2;
  *((_QWORD *)v2 + 3) = &off_1E7936638;
  result = (char *)v2 + 24;
  *a1 = result;
  return result;
}

void siri::dialogengine::ParseFullSupportingOrTextNode(uint64_t a1, uint64_t a2, xmlTextReaderPtr reader, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  void **v10;
  int v11;
  int v12;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  size_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  std::string *v26;
  __int128 v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  _QWORD *v36;
  std::string *v39;
  __int128 v40;
  char v41;
  const xmlChar *v42;
  char *v43;
  _BOOL4 v44;
  std::string *v45;
  __int128 v46;
  uint64_t v47;
  std::string *v48;
  char v49;
  int v50;
  uint64_t v51;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string __p;
  uint64_t v58;
  __int128 v59;
  __int16 v60;
  std::string v61;
  std::string v62[2];

  siri::dialogengine::GetExpandedValue(&__p, reader);
  v48 = (std::string *)a1;
  siri::dialogengine::SpeakableString::SpeakableString(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(v62, 0, 24);
  memset(&v61, 0, sizeof(v61));
  LOBYTE(v51) = 0;
  if (*(_BYTE *)(a4 + 49))
  {
    BYTE4(v51) = 0;
  }
  else
  {
    BYTE4(v51) = 0;
    if (*(_DWORD *)a4 != -1)
    {
      v49 = 0;
      v47 = 0;
      v50 = 0;
      v51 = 0;
      v10 = (void **)(a4 + 8);
      v11 = 1;
      while (1)
      {
        siri::dialogengine::ReadNextNode(reader, (uint64_t)&__p);
        *(_DWORD *)a4 = __p.__r_.__value_.__l.__data_;
        if (*(char *)(a4 + 31) < 0)
          operator delete(*v10);
        *(_OWORD *)v10 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
        *(_QWORD *)(a4 + 24) = v58;
        *(_OWORD *)(a4 + 32) = v59;
        *(_WORD *)(a4 + 48) = v60;
        v12 = *(unsigned __int8 *)(a4 + 31);
        if ((*(char *)(a4 + 31) & 0x80000000) == 0)
          break;
        v19 = *(_QWORD *)(a4 + 16);
        if (v19 == 5)
        {
          v15 = (unsigned __int8 *)*v10;
          if (*(_DWORD *)*v10 != 2019914787 || *((_BYTE *)*v10 + 4) != 116)
          {
            if (*(_DWORD *)v15 == 1852404336 && v15[4] == 116)
            {
LABEL_72:
              if (*(_BYTE *)(a4 + 48))
              {
                if ((v51 & 1) != 0)
                {
                  std::operator+<char>();
                  v39 = std::string::append(&v56, "> element");
                  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
                  v39->__r_.__value_.__l.__size_ = 0;
                  v39->__r_.__value_.__r.__words[2] = 0;
                  v39->__r_.__value_.__r.__words[0] = 0;
                  siri::dialogengine::Context::AddValidationError(a2, (__int128 *)&__p, a6);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v56.__r_.__value_.__l.__data_);
                }
                siri::dialogengine::GetExpandedValue(&__p, reader);
                if (SHIBYTE(v62[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v62[0].__r_.__value_.__l.__data_);
                v62[0] = __p;
                LOBYTE(v51) = 1;
                BYTE4(v47) = 1;
              }
              if (v11 < 1)
                goto LABEL_116;
              BYTE4(v47) &= *(_BYTE *)(a4 + 49) == 0;
              v41 = BYTE4(v47) | v47;
              goto LABEL_108;
            }
            goto LABEL_18;
          }
LABEL_91:
          if ((v49 & 1) == 0)
          {
            v42 = xmlTextReaderConstValue(reader);
            if (v42)
              v43 = (char *)v42;
            else
              v43 = "";
            std::string::basic_string[abi:ne180100]<0>(&__p, v43);
            siri::dialogengine::StringTrim(" \t\n\r", &__p, &v56);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            {
              v44 = v56.__r_.__value_.__l.__size_ == 0;
              operator delete(v56.__r_.__value_.__l.__data_);
            }
            else
            {
              v44 = SHIBYTE(v56.__r_.__value_.__r.__words[2]) == 0;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v50 |= !v44;
          }
LABEL_113:
          if (v11 < 1)
            goto LABEL_116;
LABEL_87:
          if (*(_DWORD *)a4 == -1)
            goto LABEL_116;
        }
        else
        {
LABEL_23:
          v20 = *(unsigned __int8 *)(a4 + 31);
          if ((v12 & 0x80u) == 0)
            v21 = *(unsigned __int8 *)(a4 + 31);
          else
            v21 = v19;
          v22 = a5[23];
          v23 = (char)v22;
          if ((v22 & 0x80u) != 0)
            v22 = *((_QWORD *)a5 + 1);
          if (v21 != v22)
            goto LABEL_59;
          if (v23 >= 0)
            v24 = a5;
          else
            v24 = *(unsigned __int8 **)a5;
          if ((v12 & 0x80) != 0)
          {
            if (memcmp(*v10, v24, v19))
              goto LABEL_84;
          }
          else if (*(_BYTE *)(a4 + 31))
          {
            v25 = (unsigned __int8 *)(a4 + 8);
            while (*v25 == *v24)
            {
              ++v25;
              ++v24;
              if (!--v20)
                goto LABEL_37;
            }
LABEL_59:
            if ((v12 & 0x80) != 0)
            {
LABEL_84:
              if (v19 != 8)
                goto LABEL_89;
              v36 = *v10;
            }
            else
            {
              v36 = (_QWORD *)(a4 + 8);
              if (v12 != 8)
              {
LABEL_89:
                if ((v49 & 1) == 0)
                  siri::dialogengine::SkipNodeBranch(reader, (int *)a4);
                goto LABEL_113;
              }
            }
            if (*v36 == 0x746E656D6D6F6323)
              goto LABEL_87;
            goto LABEL_89;
          }
LABEL_37:
          if (*(_BYTE *)(a4 + 48))
          {
            std::operator+<char>();
            v26 = std::string::append(&v54, "> element inside another <");
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v55.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            v28 = (char)a5[23];
            if (v28 >= 0)
              v29 = (const std::string::value_type *)a5;
            else
              v29 = *(const std::string::value_type **)a5;
            if (v28 >= 0)
              v30 = a5[23];
            else
              v30 = *((_QWORD *)a5 + 1);
            v31 = std::string::append(&v55, v29, v30);
            v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
            v56.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v32;
            v31->__r_.__value_.__l.__size_ = 0;
            v31->__r_.__value_.__r.__words[2] = 0;
            v31->__r_.__value_.__r.__words[0] = 0;
            v33 = std::string::append(&v56, "> element");
            v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v34;
            v33->__r_.__value_.__l.__size_ = 0;
            v33->__r_.__value_.__r.__words[2] = 0;
            v33->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError(a2, (__int128 *)&__p, a6);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v56.__r_.__value_.__l.__data_);
            if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v55.__r_.__value_.__l.__data_);
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v54.__r_.__value_.__l.__data_);
            ++v11;
          }
          v11 -= *(char *)(a4 + 49);
          if (v11 < 1 || *(_DWORD *)a4 == -1)
            goto LABEL_116;
        }
      }
      if (v12 != 5)
        goto LABEL_22;
      if (*(_DWORD *)v10 != 2019914787 || *(_BYTE *)(a4 + 12) != 116)
      {
        v14 = *(_DWORD *)v10 == 1852404336 && *(_BYTE *)(a4 + 12) == 116;
        v15 = (unsigned __int8 *)(a4 + 8);
        if (v14)
          goto LABEL_72;
LABEL_18:
        v16 = *(_DWORD *)v15;
        v17 = v15[4];
        if (v16 == 1634037875 && v17 == 107)
        {
          if (*(_BYTE *)(a4 + 48))
          {
            if ((v51 & 0x100000000) != 0)
            {
              std::operator+<char>();
              v45 = std::string::append(&v56, "> element");
              v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              siri::dialogengine::Context::AddValidationError(a2, (__int128 *)&__p, a6);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v56.__r_.__value_.__l.__data_);
            }
            siri::dialogengine::GetExpandedValue(&__p, reader);
            if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v61.__r_.__value_.__l.__data_);
            v61 = __p;
            BYTE4(v51) = 1;
            LOBYTE(v47) = 1;
          }
          if (v11 < 1)
            goto LABEL_116;
          LOBYTE(v47) = (*(_BYTE *)(a4 + 49) == 0) & v47;
          v41 = BYTE4(v47) | v47;
LABEL_108:
          v49 = v41;
          goto LABEL_87;
        }
LABEL_22:
        v19 = *(_QWORD *)(a4 + 16);
        goto LABEL_23;
      }
      goto LABEL_91;
    }
  }
LABEL_116:
  if ((v51 & 0x100000000) != 0 || (v51 & 1) != 0)
    siri::dialogengine::SpeakableString::SetString(v48, v62, &v61);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62[0].__r_.__value_.__l.__data_);
}

void sub_1BFAC9784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (a41 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v41 - 137) < 0)
    operator delete(*(void **)(v41 - 160));
  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));
  siri::dialogengine::SpeakableString::~SpeakableString(a10);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ParseDialogNode(uint64_t a1, siri::dialogengine *a2, uint64_t a3, const std::string *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void **v15;
  int v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  std::string::size_type v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *size;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  BOOL v55;
  std::string::size_type v56;
  float v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  _BOOL4 v64;
  _QWORD *v65;
  int v66;
  int v67;
  uint64_t v68;
  int v74;
  BOOL v75;
  int v76;
  unsigned __int8 *v78;
  int v81;
  int v82;
  const xmlChar *v88;
  char *v89;
  BOOL v90;
  int v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v103;
  std::string v104;
  std::string v105;
  std::string __p;
  void *v107;
  __int128 v108;
  void *v109;
  char v110;
  void *v111;
  char v112;
  void *v113;
  char v114;
  void *v115;
  char v116;
  void *v117;
  char v118;
  std::string v119;
  std::string v120;
  std::string v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  __int128 v144;
  std::string v145;
  std::string v146;
  uint64_t v147;
  std::__shared_weak_count *v148;

  v11 = *(_QWORD *)(a1 + 504);
  v12 = *(std::__shared_weak_count **)(a1 + 512);
  v147 = v11;
  v148 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (void **)(a5 + 8);
  v16 = *(char *)(a5 + 31);
  if ((v16 & 0x80000000) == 0)
  {
    v17 = (unsigned __int16 *)(a5 + 8);
    if (v16 != 6)
      goto LABEL_13;
LABEL_9:
    v18 = *(_DWORD *)v17;
    v19 = v17[2];
    if (v18 != 1818323300 || v19 != 26479)
      goto LABEL_13;
    v33 = *a6;
    v32 = a6[1];
    if (*a6 == v32)
    {
      v42 = *(_QWORD *)(v11 + 224);
      v43 = *(std::__shared_weak_count **)(v11 + 232);
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        v46 = (unint64_t *)&v43->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v42)
      {
        siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&__p, *(_QWORD *)(a5 + 40), a4);
        std::string::basic_string[abi:ne180100]<0>(&v119, "Multiple root elements found. There can be only one.");
        siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&v119, (uint64_t)&__p);
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v119.__r_.__value_.__l.__data_);
        siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&__p.__r_.__value_.__l.__data_);
        goto LABEL_358;
      }
      v33 = *a6;
      v32 = a6[1];
    }
    if (v33 == v32)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine10GroupFirstENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v119);
      v48 = v119.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v119.__r_.__value_.__r.__words[0] + 8) = *(_QWORD *)(a5 + 40);
      siri::dialogengine::LineNumberBase::SetFullPath(v48, a4);
      v49 = v147;
      size = (std::__shared_weak_count *)v119.__r_.__value_.__l.__size_;
      if (v119.__r_.__value_.__l.__size_)
      {
        v51 = (unint64_t *)(v119.__r_.__value_.__l.__size_ + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(v49 + 224), v48, (uint64_t)size);
        v53 = (unint64_t *)&size->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      else
      {
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(v147 + 224), v48, 0);
      }
      v34 = v119.__r_.__value_.__r.__words[0];
      siri::dialogengine::GetXmlAttrs(a2, (uint64_t)&__p);
      if ((std::string *)(v34 + 72) != &__p)
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v34 + 72, (__int128 *)__p.__r_.__value_.__l.__data_, (__int128 *)&__p.__r_.__value_.__r.__words[1]);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
      v92 = (std::__shared_weak_count *)v119.__r_.__value_.__l.__size_;
      if (v119.__r_.__value_.__l.__size_)
      {
        v93 = (unint64_t *)(v119.__r_.__value_.__l.__size_ + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
    }
    else
    {
      v34 = *(_QWORD *)(v32 - 16);
    }
    _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine6DialogENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v144);
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v144;
    if (*((_QWORD *)&v144 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    siri::dialogengine::Group::AddNode((int64x2_t *)v34, &__p);
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v40 = v144;
    std::string::basic_string[abi:ne180100]<0>(v142, "id");
    siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v142, &v119);
    siri::dialogengine::StringTrim(" \t\n\r", &v119, &__p);
    std::string::operator=((std::string *)(v40 + 96), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    if (v143 < 0)
      operator delete(v142[0]);
    std::string::basic_string[abi:ne180100]<0>(v140, "note");
    siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v140, &v119);
    siri::dialogengine::StringTrim(" \t\n\r", &v119, &__p);
    std::string::operator=((std::string *)(v40 + 168), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    if (v141 < 0)
      operator delete(v140[0]);
    std::string::basic_string[abi:ne180100]<0>(v138, "condition");
    siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v138, &__p);
    std::string::operator=((std::string *)(v40 + 120), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v139 < 0)
      operator delete(v138[0]);
    std::string::basic_string[abi:ne180100]<0>(v136, "printOnly");
    siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v136, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v41 = __p.__r_.__value_.__l.__size_ == 0;
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v41 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
    }
    if (v137 < 0)
    {
      operator delete(v136[0]);
      if (v41)
        goto LABEL_90;
    }
    else if (v41)
    {
      goto LABEL_90;
    }
    std::string::basic_string[abi:ne180100]<0>(v134, "printOnly");
    siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v134, &__p);
    *(_WORD *)(v40 + 544) = siri::dialogengine::StringToBool(&__p) | 0x100;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v135 < 0)
      operator delete(v134[0]);
LABEL_90:
    std::string::basic_string[abi:ne180100]<0>(v132, "spokenOnly");
    siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v132, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v55 = __p.__r_.__value_.__l.__size_ == 0;
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v55 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
    }
    if (v133 < 0)
    {
      operator delete(v132[0]);
      if (v55)
        goto LABEL_101;
    }
    else if (v55)
    {
      goto LABEL_101;
    }
    std::string::basic_string[abi:ne180100]<0>(v130, "spokenOnly");
    siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v130, &__p);
    *(_WORD *)(v40 + 546) = siri::dialogengine::StringToBool(&__p) | 0x100;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v131 < 0)
      operator delete(v130[0]);
LABEL_101:
    std::string::basic_string[abi:ne180100]<0>(v128, "case");
    siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v128, &__p);
    std::string::operator=((std::string *)(v40 + 144), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v129 < 0)
      operator delete(v128[0]);
    std::string::basic_string[abi:ne180100]<0>(v126, "type");
    siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v126, &__p);
    std::string::operator=((std::string *)(v40 + 552), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v127 < 0)
      operator delete(v126[0]);
    std::string::basic_string[abi:ne180100]<0>(v124, "keywords");
    siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v124, &__p);
    std::string::operator=((std::string *)(v40 + 576), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v125 < 0)
      operator delete(v124[0]);
    *(_QWORD *)(v40 + 8) = *(_QWORD *)(a5 + 40);
    siri::dialogengine::LineNumberBase::SetFullPath(v40, a4);
    std::string::basic_string[abi:ne180100]<0>(v122, "weight");
    siri::dialogengine::GetXmlAttr(a2, (const xmlChar *)v122, &v146);
    if (v123 < 0)
      operator delete(v122[0]);
    v56 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v56 = v146.__r_.__value_.__l.__size_;
    if (v56)
    {
      v57 = siri::dialogengine::StringToDouble(&v146, 0);
      *(float *)(v40 + 192) = fmaxf(v57, 0.0);
    }
    siri::dialogengine::GetExpandedValue(&v145, a2);
    if (*(_QWORD *)(a3 + 8) != *(_QWORD *)(a3 + 16))
    {
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v145.__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      v58 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
      if (*((_QWORD *)&v144 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      goto LABEL_27;
    }
    memset(&v121, 0, sizeof(v121));
    memset(&v120, 0, sizeof(v120));
    LODWORD(v101) = 0;
    if (*(_BYTE *)(a5 + 49))
    {
      v100 = 0;
      v99 = 0;
      BYTE4(v101) = 0;
    }
    else
    {
      v100 = 0;
      v99 = 0;
      BYTE4(v101) = 0;
      if (*(_DWORD *)a5 != -1)
      {
        v61 = 0;
        v62 = 0;
        v100 = 0;
        v101 = 0;
        v99 = 0;
        v103 = 1;
        while (2)
        {
          siri::dialogengine::ReadNextNode(a2, (uint64_t)&__p);
          *(_DWORD *)a5 = __p.__r_.__value_.__l.__data_;
          if (*(char *)(a5 + 31) < 0)
            operator delete(*v15);
          *(_OWORD *)v15 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
          *(_QWORD *)(a5 + 24) = v107;
          *(_OWORD *)(a5 + 32) = v108;
          *(_WORD *)(a5 + 48) = (_WORD)v109;
          v63 = *(unsigned __int8 *)(a5 + 31);
          if ((*(char *)(a5 + 31) & 0x80000000) == 0)
          {
            v64 = 0;
            v66 = v63 - 4;
            v65 = (_QWORD *)(a5 + 8);
            switch(v66)
            {
              case 0:
                v67 = *(_DWORD *)v15;
                goto LABEL_139;
              case 1:
                if (*(_DWORD *)v15 == 2019914787 && *(_BYTE *)(a5 + 12) == 116)
                  goto LABEL_231;
                if (*(_DWORD *)v15 == 1852404336 && *(_BYTE *)(a5 + 12) == 116)
                  goto LABEL_241;
                if (*(_DWORD *)v15 != 1634037875 || *(_BYTE *)(a5 + 12) != 107)
                  goto LABEL_222;
                goto LABEL_186;
              case 2:
                if (*(_DWORD *)v15 != 1818323300 || *(_WORD *)(a5 + 12) != 26479)
                  goto LABEL_222;
                goto LABEL_237;
              case 3:
                if (*(_DWORD *)v15 == 1953394531 && *(_DWORD *)(a5 + 11) == 1953391988)
                  goto LABEL_212;
                v74 = *(_DWORD *)(a5 + 11);
                v75 = *(_DWORD *)v15 == 1953522019;
                v76 = 1852795252;
                goto LABEL_167;
              case 4:
                goto LABEL_211;
              case 6:
                v74 = *(unsigned __int16 *)(a5 + 16);
                v75 = *v15 == (void *)0x6974726F70707573;
                v76 = 26478;
LABEL_167:
                if (!v75 || v74 != v76)
                  goto LABEL_222;
                goto LABEL_225;
              default:
                goto LABEL_223;
            }
          }
          v68 = *(_QWORD *)(a5 + 16);
          switch(v68)
          {
            case 4:
              v67 = *(_DWORD *)*v15;
LABEL_139:
              if (v67 != 1819047270)
                goto LABEL_222;
              goto LABEL_212;
            case 5:
              v78 = (unsigned __int8 *)*v15;
              if (*(_DWORD *)*v15 == 2019914787 && *((_BYTE *)*v15 + 4) == 116)
              {
LABEL_231:
                if (((v62 | v61) & 1) == 0)
                {
                  v88 = xmlTextReaderConstValue(a2);
                  if (v88)
                    v89 = (char *)v88;
                  else
                    v89 = "";
                  std::string::basic_string[abi:ne180100]<0>(&__p, v89);
                  siri::dialogengine::StringTrim(" \t\n\r", &__p, &v119);
                  v98 = v40;
                  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v90 = v119.__r_.__value_.__l.__size_ == 0;
                    operator delete(v119.__r_.__value_.__l.__data_);
                  }
                  else
                  {
                    v90 = SHIBYTE(v119.__r_.__value_.__r.__words[2]) == 0;
                  }
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  v62 = 0;
                  v61 = 0;
                  BYTE4(v99) |= !v90;
                  v40 = v98;
                }
              }
              else if (*(_DWORD *)v78 == 1852404336 && v78[4] == 116)
              {
LABEL_241:
                if (*(_BYTE *)(a5 + 48))
                {
                  if ((v100 & 1) != 0)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot have multiple <print> elements in one <dialog> element");
                    siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, v40);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  siri::dialogengine::GetExpandedValue(&__p, a2);
                  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v121.__r_.__value_.__l.__data_);
                  v121 = __p;
                  LODWORD(v100) = 1;
                  LOBYTE(v62) = 1;
                }
                v62 = (*(_BYTE *)(a5 + 49) == 0) & v62;
              }
              else
              {
                v81 = *(_DWORD *)v78;
                v82 = v78[4];
                if (v81 != 1634037875 || v82 != 107)
                  goto LABEL_208;
LABEL_186:
                if (*(_BYTE *)(a5 + 48))
                {
                  if ((v99 & 1) != 0)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot have multiple <speak> elements in one <dialog> element");
                    siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, v40);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  siri::dialogengine::GetExpandedValue(&__p, a2);
                  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v120.__r_.__value_.__l.__data_);
                  v120 = __p;
                  LODWORD(v99) = 1;
                  LOBYTE(v61) = 1;
                }
                v61 = (*(_BYTE *)(a5 + 49) == 0) & v61;
              }
              goto LABEL_291;
            case 6:
              if (*(_DWORD *)*v15 == 1818323300 && *((_WORD *)*v15 + 2) == 26479)
              {
LABEL_237:
                if (*(_BYTE *)(a5 + 48))
                {
                  std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot nest a <dialog> element inside another <dialog> element");
                  siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, v40);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  v91 = v103 + 1;
                }
                else
                {
                  v91 = v103;
                }
                v103 = v91 - *(char *)(a5 + 49);
                goto LABEL_291;
              }
              if ((v63 & 0x80) == 0)
                goto LABEL_222;
              goto LABEL_208;
            case 7:
              if (*(_DWORD *)*v15 == 1953394531 && *(_DWORD *)((char *)*v15 + 3) == 1953391988)
              {
LABEL_212:
                if (*(_BYTE *)(a5 + 48))
                {
                  if ((v101 & 1) != 0)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot have multiple <full> or <content> elements in one <dialog> element");
                    siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, v40);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v119, *(_QWORD *)(a5 + 40), a4);
                  if (*(char *)(a5 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
                  }
                  else
                  {
                    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)v15;
                    v105.__r_.__value_.__r.__words[2] = *(_QWORD *)(a5 + 24);
                  }
                  siri::dialogengine::ParseFullSupportingOrTextNode((uint64_t)&__p, a1, a2, a5, (unsigned __int8 *)&v105, (uint64_t)&v119);
                  siri::dialogengine::Dialog::SetFull((siri::dialogengine::Dialog *)v40, &__p);
                  if (v118 < 0)
                    operator delete(v117);
                  if (v116 < 0)
                    operator delete(v115);
                  if (v114 < 0)
                    operator delete(v113);
                  if (v112 < 0)
                    operator delete(v111);
                  if (v110 < 0)
                    operator delete(v109);
                  if (SHIBYTE(v108) < 0)
                    operator delete(v107);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v105.__r_.__value_.__l.__data_);
                  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v119.__r_.__value_.__l.__data_);
                  LODWORD(v101) = 1;
                }
              }
              else if (*(_DWORD *)*v15 == 1953522019 && *(_DWORD *)((char *)*v15 + 3) == 1852795252)
              {
LABEL_225:
                if (*(_BYTE *)(a5 + 48))
                {
                  if ((v100 & 0x100000000) != 0)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot have multiple <supporting> or <caption> elements in one <dialog> element");
                    siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, v40);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&v119, *(_QWORD *)(a5 + 40), a4);
                  if (*(char *)(a5 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
                  }
                  else
                  {
                    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)v15;
                    v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(a5 + 24);
                  }
                  siri::dialogengine::ParseFullSupportingOrTextNode((uint64_t)&__p, a1, a2, a5, (unsigned __int8 *)&v104, (uint64_t)&v119);
                  siri::dialogengine::Dialog::SetSupporting((siri::dialogengine::Dialog *)v40, &__p);
                  if (v118 < 0)
                    operator delete(v117);
                  if (v116 < 0)
                    operator delete(v115);
                  if (v114 < 0)
                    operator delete(v113);
                  if (v112 < 0)
                    operator delete(v111);
                  if (v110 < 0)
                    operator delete(v109);
                  if (SHIBYTE(v108) < 0)
                    operator delete(v107);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v104.__r_.__value_.__l.__data_);
                  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v119.__r_.__value_.__l.__data_);
                  HIDWORD(v100) = 1;
                }
              }
              else
              {
LABEL_208:
                v68 = *(_QWORD *)(a5 + 16);
LABEL_209:
                if (v68 == 8)
                {
                  v65 = *v15;
LABEL_211:
                  v64 = *v65 == 0x746E656D6D6F6323;
                }
                else
                {
LABEL_222:
                  v64 = 0;
                }
LABEL_223:
                if (((v64 | v62 | v61) & 1) == 0)
                {
                  siri::dialogengine::SkipNodeBranch(a2, (int *)a5);
                  v62 = 0;
                  v61 = 0;
                  BYTE4(v101) = 1;
                }
              }
LABEL_291:
              if (v103 < 1 || *(_DWORD *)a5 == -1)
                break;
              continue;
            case 10:
              if (*(_QWORD *)*v15 != 0x6974726F70707573 || *((_WORD *)*v15 + 4) != 26478)
                goto LABEL_222;
              goto LABEL_225;
            default:
              goto LABEL_209;
          }
          break;
        }
      }
    }
    if (((v101 | HIDWORD(v100)) & 1) != 0)
    {
      if ((v99 & 0x100000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "A <dialog> element cannot have extra text outside its valid child elements");
        siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, v40);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((v101 & 0x100000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "A <dialog> element cannot have extra elements outside its valid child elements");
        siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, v40);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (((v101 | HIDWORD(v100)) & (v100 | v99) & 1) == 0)
        goto LABEL_343;
      std::string::basic_string[abi:ne180100]<0>(&__p, "A <dialog> element cannot have both <full>/<supporting> elements and <print>/<speak> elements");
      siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, v40);
    }
    else
    {
      if (((v100 | v99) & 1) != 0)
        siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, &v121, &v120);
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)&v145);
      siri::dialogengine::Dialog::SetFull((siri::dialogengine::Dialog *)v40, &__p);
      if (v118 < 0)
        operator delete(v117);
      if (v116 < 0)
        operator delete(v115);
      if (v114 < 0)
        operator delete(v113);
      if (v112 < 0)
        operator delete(v111);
      if (v110 < 0)
        operator delete(v109);
      if (SHIBYTE(v108) < 0)
        operator delete(v107);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)&v145);
      siri::dialogengine::Dialog::SetSupporting((siri::dialogengine::Dialog *)v40, &__p);
      if (v118 < 0)
        operator delete(v117);
      if (v116 < 0)
        operator delete(v115);
      if (v114 < 0)
        operator delete(v113);
      if (v112 < 0)
        operator delete(v111);
      if (v110 < 0)
        operator delete(v109);
      if (SHIBYTE(v108) < 0)
        operator delete(v107);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_343:
    siri::dialogengine::GetXmlAttrs(a2, (uint64_t)&__p);
    if ((std::string *)(v40 + 72) != &__p)
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v40 + 72, (__int128 *)__p.__r_.__value_.__l.__data_, (__int128 *)&__p.__r_.__value_.__r.__words[1]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v120.__r_.__value_.__l.__data_);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v145.__r_.__value_.__l.__data_);
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v146.__r_.__value_.__l.__data_);
    v95 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
    if (*((_QWORD *)&v144 + 1))
    {
      v96 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
LABEL_358:
    v27 = 1;
    goto LABEL_28;
  }
  if (*(_QWORD *)(a5 + 16) == 6)
  {
    v17 = (unsigned __int16 *)*v15;
    goto LABEL_9;
  }
LABEL_13:
  std::operator+<char>();
  v21 = std::string::append(&v146, "\" node ");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v119.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::GetXmlLineString(a5, &v145);
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v145;
  else
    v23 = (std::string *)v145.__r_.__value_.__r.__words[0];
  if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
  else
    v24 = v145.__r_.__value_.__l.__size_;
  v25 = std::string::append(&v119, (const std::string::value_type *)v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
LABEL_27:
  v27 = 0;
LABEL_28:
  v28 = v148;
  if (v148)
  {
    v29 = (unint64_t *)&v148->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return v27;
}

void sub_1BFACACB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  char a68;
  uint64_t v68;

  if (a28 < 0)
    operator delete(__p);
  if (a61 < 0)
    operator delete(a56);
  if (a68 < 0)
    operator delete(a63);
  if (*(char *)(v68 - 129) < 0)
    operator delete(*(void **)(v68 - 152));
  if (*(char *)(v68 - 105) < 0)
    operator delete(*(void **)(v68 - 128));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v68 - 168);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v68 - 104);
  _Unwind_Resume(a1);
}

char *_ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine9VisualRefENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  _OWORD *v2;
  char *result;

  v2 = operator new(0x100uLL);
  *(_OWORD *)((char *)v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1E7933D88;
  *(_OWORD *)((char *)v2 + 216) = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *(_OWORD *)((char *)v2 + 104) = 0u;
  v2[4] = 0u;
  *((_QWORD *)v2 + 12) = (char *)v2 + 104;
  *(_OWORD *)((char *)v2 + 120) = 0u;
  *(_OWORD *)((char *)v2 + 136) = 0u;
  *(_OWORD *)((char *)v2 + 152) = 0u;
  *(_OWORD *)((char *)v2 + 168) = 0u;
  *(_OWORD *)((char *)v2 + 184) = 0u;
  *(_OWORD *)((char *)v2 + 200) = 0u;
  *((_DWORD *)v2 + 54) = 1065353216;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 11) = &unk_1E792BED8;
  v2[15] = 0u;
  *((_QWORD *)v2 + 29) = v2 + 15;
  a1[1] = v2;
  *((_QWORD *)v2 + 3) = &off_1E792BE70;
  result = (char *)v2 + 24;
  *a1 = result;
  return result;
}

void siri::dialogengine::GetExpandedValue(std::string *this, xmlTextReaderPtr reader)
{
  xmlChar *InnerXml;
  xmlChar *v5;
  char *v6;
  xmlChar *v7;
  xmlChar *v8;
  char *v9;
  std::string *v10;
  void *__p[2];
  char v12;
  std::string v13;
  std::string v14;
  void *v15;
  char v16;
  void *v17[2];
  char v18;

  InnerXml = xmlTextReaderReadInnerXml(reader);
  v5 = InnerXml;
  if (InnerXml)
    v6 = (char *)InnerXml;
  else
    v6 = "";
  std::string::basic_string[abi:ne180100]<0>(v17, v6);
  v7 = xmlTextReaderLookupNamespace(reader, 0);
  v8 = v7;
  if (v7)
    v9 = (char *)v7;
  else
    v9 = "";
  std::string::basic_string[abi:ne180100]<0>(&v15, v9);
  std::operator+<char>();
  v10 = std::string::append(&v13, "\"");
  v14 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)v17, (char *)&v14, (uint64_t)__p, 0, this);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (v16 < 0)
  {
    operator delete(v15);
    if (!v8)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v8)
LABEL_17:
    ((void (*)(xmlChar *))*MEMORY[0x1E0DE8D30])(v8);
LABEL_18:
  if (v18 < 0)
  {
    operator delete(v17[0]);
    if (!v5)
      return;
    goto LABEL_22;
  }
  if (v5)
LABEL_22:
    ((void (*)(xmlChar *))*MEMORY[0x1E0DE8D30])(v5);
}

void sub_1BFACB304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (a33 < 0)
    operator delete(a28);
  if (v34)
    ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(v34);
  if (*(char *)(v35 - 33) < 0)
    operator delete(*(void **)(v35 - 56));
  if (v33)
    ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(v33);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ParseListAndIterator(uint64_t a1, uint64_t *a2, uint64_t a3, xmlTextReader *a4, siri::dialogengine *a5, uint64_t a6)
{
  std::string::size_type size;
  std::string::size_type v13;
  char v14;
  uint64_t v15;
  const xmlChar *v16;
  char *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  double v29;
  siri::dialogengine::CatBinary::vcat_item_repetition *v30;
  std::string *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  int v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  void *v53;
  std::string *v54;
  const siri::dialogengine::CatBinary::vcat_item *v55;
  std::string::size_type v56;
  std::string *v57;
  std::string **v58;
  uint64_t *v59;
  const char *v60;
  uint64_t Parameter;
  std::string::size_type v62;
  std::string::size_type v63;
  std::string *v64;
  uint64_t v65;
  std::string *p_p;
  int v67;
  int v68;
  int v69;
  int v70;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string v80;
  std::string v81;
  std::string __p;
  uint64_t v83;
  siri::dialogengine::CatBinary::vcat_item_repetition *v84;
  int v85;
  char v86;
  uint64_t v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  void *v93[8];
  void *v94[2];
  char v95;
  std::string v96;
  void *v97[2];
  char v98;
  std::string __str;
  std::string v100;

  std::string::basic_string[abi:ne180100]<0>(v97, "list");
  siri::dialogengine::GetXmlAttr(a4, (const xmlChar *)v97, &__p);
  siri::dialogengine::StringTrim(" \t\n\r", &__p, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v98 < 0)
    operator delete(v97[0]);
  std::string::basic_string[abi:ne180100]<0>(v94, "iterator");
  siri::dialogengine::GetXmlAttr(a4, (const xmlChar *)v94, &__p);
  siri::dialogengine::StringTrim(" \t\n\r", &__p, &v96);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v95 < 0)
    operator delete(v94[0]);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_15;
  v13 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  v14 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = v96.__r_.__value_.__l.__size_;
  if (v13)
  {
LABEL_15:
    v15 = *(_QWORD *)(a3 + 40);
    v16 = xmlTextReaderConstBaseUri(a4);
    if (v16)
      v17 = (char *)v16;
    else
      v17 = "";
    std::string::basic_string[abi:ne180100]<0>(&__p, v17);
    siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)v93, v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = __str.__r_.__value_.__l.__size_;
    if (!v18)
    {
      std::operator+<char>();
      v20 = std::string::append(&v100, "' has no sibling list declaration");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, (uint64_t)v93);
LABEL_31:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_152;
      v24 = (void *)v100.__r_.__value_.__r.__words[0];
      goto LABEL_151;
    }
    if (!siri::dialogengine::IsValidCompoundVariableName((uint64_t)&__str))
      goto LABEL_30;
    if (!siri::dialogengine::IsValidVariableName((uint64_t)&v96))
    {
      v19 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = v96.__r_.__value_.__l.__size_;
      if (v19)
      {
LABEL_30:
        std::operator+<char>();
        v22 = std::string::append(&v100, "' is not a valid variable name (Name must match regex \"[a-zA-Z_][a-zA-Z0-9_\\-]*\")");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, (uint64_t)v93);
        goto LABEL_31;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v92, "");
    v25 = *(unsigned __int8 *)(a6 + 23);
    if ((v25 & 0x80u) != 0)
      v25 = *(_QWORD *)(a6 + 8);
    if (v25)
    {
      v27 = (*(uint64_t (**)(siri::dialogengine *))(*(_QWORD *)a5 + 168))(a5);
      if (!v27)
      {
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get message reflection descriptor", v26);
        goto LABEL_149;
      }
      siri::dialogengine::FieldNameFromElementName(a6, (uint64_t)&__p);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      v92 = __p;
      if (!google::protobuf::Descriptor::FindFieldByName(v27, (uint64_t)&v92))
      {
        std::operator+<char>();
        v36 = std::string::append(&v88, "' from element '");
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = *(char *)(a6 + 23);
        if (v38 >= 0)
          v39 = (const std::string::value_type *)a6;
        else
          v39 = *(const std::string::value_type **)a6;
        if (v38 >= 0)
          v40 = *(unsigned __int8 *)(a6 + 23);
        else
          v40 = *(_QWORD *)(a6 + 8);
        v41 = std::string::append(&v89, v39, v40);
        v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        v43 = std::string::append(&v90, "' on message '");
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        v45 = *(_QWORD *)(v27 + 8);
        v46 = *(char *)(v45 + 23);
        if (v46 >= 0)
          v47 = *(const std::string::value_type **)(v27 + 8);
        else
          v47 = *(const std::string::value_type **)v45;
        if (v46 >= 0)
          v48 = *(unsigned __int8 *)(v45 + 23);
        else
          v48 = *(_QWORD *)(v45 + 8);
        v49 = std::string::append(&v91, v47, v48);
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        v51 = std::string::append(&v100, "'");
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_149;
        v53 = (void *)v88.__r_.__value_.__r.__words[0];
        goto LABEL_148;
      }
    }
    siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&__p);
    LODWORD(__p.__r_.__value_.__r.__words[2]) |= 1u;
    std::string::basic_string[abi:ne180100]<0>(&v100, "VCPB");
    *(_QWORD *)&v29 = google::protobuf::internal::ArenaStringPtr::SetNoArena(&v83, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v100).n128_u64[0];
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (v85 == 3)
    {
      v30 = v84;
      if (v84)
        goto LABEL_46;
    }
    else
    {
      siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)&__p);
      v85 = 3;
      v30 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_repetition>(0);
      v84 = v30;
      if (v30)
      {
LABEL_46:
        v31 = (std::string *)*((_QWORD *)v30 + 3);
        *((_DWORD *)v30 + 4) |= 1u;
        if (v31 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v30 + 3, (uint64_t)&__str);
        else
          std::string::operator=(v31, &__str);
        v54 = (std::string *)*((_QWORD *)v30 + 4);
        *((_DWORD *)v30 + 4) |= 2u;
        if (v54 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v30 + 4, (uint64_t)&v96);
        else
          std::string::operator=(v54, &v96);
        v56 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
        if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v56 = v92.__r_.__value_.__l.__size_;
        if (v56)
        {
          v59 = (uint64_t *)*((_QWORD *)v30 + 5);
          v58 = (std::string **)((char *)v30 + 40);
          v57 = (std::string *)v59;
          *((_DWORD *)v58 - 6) |= 4u;
          if (v59 == &google::protobuf::internal::fixed_address_empty_string)
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v58, (uint64_t)&v92);
          else
            std::string::operator=(v57, &v92);
        }
        siri::dialogengine::StoreVisualCatItem(a5, (google::protobuf::Message *)&__p, v55);
        siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&__p);
        if (!*a2)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not create parameter for iterator", v60);
          goto LABEL_149;
        }
        siri::dialogengine::ResolveType(0, a1, (uint64_t)&__str, 1, (uint64_t)&__p);
        siri::dialogengine::GetArrayElementType((uint64_t)&__p, &v100);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        Parameter = siri::dialogengine::File::GetParameter(*a2, (unsigned __int8 **)&v96);
        if (!Parameter)
        {
          std::string::basic_string[abi:ne180100]<0>(&v91, "Iterator parameter inserted at runtime");
          std::string::basic_string[abi:ne180100]<0>(&v90, "");
          std::string::basic_string[abi:ne180100]<0>(&v89, "");
          std::string::basic_string[abi:ne180100]<0>(&v88, "");
          std::string::basic_string[abi:ne180100]<0>(&v81, "");
          std::string::basic_string[abi:ne180100]<0>(&v80, "");
          siri::dialogengine::Parameter::Parameter((uint64_t)&__p, &v96, &v100, &v91, &v90, &v89, &v88, &v81, &v80, 1, 0, 0, 1);
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v80.__r_.__value_.__l.__data_);
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v81.__r_.__value_.__l.__data_);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v88.__r_.__value_.__l.__data_);
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v90.__r_.__value_.__l.__data_);
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v91.__r_.__value_.__l.__data_);
          v87 = 0;
          v86 = 1;
          siri::dialogengine::File::AddParameter((siri::dialogengine::File *)*a2, (const siri::dialogengine::Parameter *)&__p);
          siri::dialogengine::Parameter::~Parameter((siri::dialogengine::Parameter *)&__p);
LABEL_146:
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          {
            v53 = (void *)v100.__r_.__value_.__r.__words[0];
LABEL_148:
            operator delete(v53);
          }
LABEL_149:
          if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_152:
            siri::dialogengine::LineNumberBase::~LineNumberBase(v93);
            v14 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
            goto LABEL_153;
          }
          v24 = (void *)v92.__r_.__value_.__r.__words[0];
LABEL_151:
          operator delete(v24);
          goto LABEL_152;
        }
        if (*(char *)(Parameter + 55) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(Parameter + 32), *(_QWORD *)(Parameter + 40));
        else
          __p = *(std::string *)(Parameter + 32);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v62 = __p.__r_.__value_.__l.__size_;
        v63 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v63 = v100.__r_.__value_.__l.__size_;
        if (v62 == v63)
        {
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v64 = &v100;
          else
            v64 = (std::string *)v100.__r_.__value_.__r.__words[0];
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v70 = memcmp(__p.__r_.__value_.__l.__data_, v64, __p.__r_.__value_.__l.__size_);
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_131;
          }
          if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
            goto LABEL_146;
          v65 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
          p_p = &__p;
          do
          {
            v68 = p_p->__r_.__value_.__s.__data_[0];
            p_p = (std::string *)((char *)p_p + 1);
            v67 = v68;
            v69 = v64->__r_.__value_.__s.__data_[0];
            v64 = (std::string *)((char *)v64 + 1);
            v70 = v67 != v69;
          }
          while (v67 == v69 && v65-- != 0);
        }
        else
        {
          v70 = 1;
        }
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v70 & 1) == 0)
            goto LABEL_146;
          goto LABEL_132;
        }
LABEL_131:
        if (!v70)
          goto LABEL_146;
LABEL_132:
        std::operator+<char>();
        v72 = std::string::append(&v89, "' already exists and is not of type '");
        v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v74 = &v100;
        else
          v74 = (std::string *)v100.__r_.__value_.__r.__words[0];
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
        else
          v75 = v100.__r_.__value_.__l.__size_;
        v76 = std::string::append(&v90, (const std::string::value_type *)v74, v75);
        v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        v78 = std::string::append(&v91, "'.  Please choose a different name for your iterator");
        v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v79;
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        goto LABEL_146;
      }
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get mutable repetition message", v28, v29);
    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&__p);
    v35 = *(_QWORD *)(a3 + 8);
    v34 = a3 + 8;
    v33 = v35;
    if (*(char *)(v34 + 23) >= 0)
      v33 = v34;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to store list repetition for '%s'", v32, v33);
    goto LABEL_149;
  }
LABEL_153:
  if (v14 < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFACBD84(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 73) < 0)
    operator delete(*(void **)(v1 - 96));
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)(v1 - 256));
  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::VisualRef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::VisualRef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::VisualRef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine6DialogENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  char *v2;
  double result;

  v2 = (char *)operator new(0x270uLL);
  result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1E7934A90;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *((_QWORD *)v2 + 71) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  *(_OWORD *)(v2 + 552) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *((_QWORD *)v2 + 12) = v2 + 104;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *((_DWORD *)v2 + 54) = 1065353216;
  *((_QWORD *)v2 + 3) = &off_1E7934AE0;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 11) = &unk_1E7934B38;
  *((_OWORD *)v2 + 36) = 0u;
  *((_OWORD *)v2 + 37) = 0u;
  *((_OWORD *)v2 + 38) = 0u;
  *((_DWORD *)v2 + 142) = 0;
  *(_OWORD *)(v2 + 536) = 0u;
  *(_OWORD *)(v2 + 552) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void std::__shared_ptr_emplace<siri::dialogengine::Dialog>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7934A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::Dialog>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7934A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::Dialog>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::Text>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::Text>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::Text>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupSwitch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933C68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupSwitch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933C68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::GroupSwitch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupFirst>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupFirst>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933C18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::GroupFirst>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupRandom>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933BC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupRandom>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933BC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::GroupRandom>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupAll>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::GroupAll>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::GroupAll>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::ConditionSubCondition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ConditionSubCondition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933B28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ConditionSubCondition>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::ConditionExpression>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7934E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ConditionExpression>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7934E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ConditionExpression>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::ConditionEntry>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ConditionEntry>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7933AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ConditionEntry>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::Condition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7934DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::Condition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7934DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::Condition>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void siri::dialogengine::ParseXmlString(Context *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  const char *v8;
  int v9;
  siri::dialogengine *v10;
  const char *v11;

  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (const char *)a2;
  else
    v8 = *(const char **)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_DWORD *)(a2 + 8);
  v10 = xmlReaderForMemory(v8, v9, 0, 0, 0);
  if (v10)
  {
    siri::dialogengine::ParseXmlInternal((__int128 *)a4, a1, v10, a3);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot parse CAT XML string", v11);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
}

uint64_t siri::dialogengine::ArrayValue::ArrayValue(uint64_t a1, _QWORD **a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(_QWORD *)a1 = &off_1E7933F18;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)(a1 + 16), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = 7;
  *(_QWORD *)a1 = &off_1E7933F18;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)(a1 + 16), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

void siri::dialogengine::ArrayValue::~ArrayValue(siri::dialogengine::ArrayValue *this)
{
  void **v1;

  *(_QWORD *)this = &off_1E7933F18;
  v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_1E7933F18;
  v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::JSONValue::JSONValue(uint64_t result, int a2)
{
  *(_QWORD *)result = &off_1E7934018;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

{
  *(_QWORD *)result = &off_1E7934018;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void siri::dialogengine::JSONValue::~JSONValue(siri::dialogengine::JSONValue *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::ObjectValue::ObjectValue(uint64_t this)
{
  *(_DWORD *)(this + 8) = 6;
  *(_QWORD *)this = &off_1E7933F38;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = this + 24;
  return this;
}

{
  *(_DWORD *)(this + 8) = 6;
  *(_QWORD *)this = &off_1E7933F38;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = this + 24;
  return this;
}

void siri::dialogengine::ObjectValue::~ObjectValue(siri::dialogengine::ObjectValue *this)
{
  *(_QWORD *)this = &off_1E7933F38;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)this + 3));
}

{
  *(_QWORD *)this = &off_1E7933F38;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)this + 3));
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::ObjectValue::ObjectValue(uint64_t a1, const void ***a2)
{
  *(_DWORD *)(a1 + 8) = 6;
  *(_QWORD *)a1 = &off_1E7933F38;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100](a1 + 16, a2);
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = 6;
  *(_QWORD *)a1 = &off_1E7933F38;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100](a1 + 16, a2);
  return a1;
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  uint64_t v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>> const&>((uint64_t **)a1, v3, v5 + 4, (__int128 *)v5 + 2);
      v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v5[2];
          v8 = *v7 == v5;
          v5 = (const void **)v7;
        }
        while (!v8);
      }
      v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1BFACC88C(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::IntValue::IntValue(uint64_t this, int a2)
{
  *(_QWORD *)this = &off_1E7933F58;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a2;
  return this;
}

{
  *(_QWORD *)this = &off_1E7933F58;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a2;
  return this;
}

void siri::dialogengine::IntValue::~IntValue(siri::dialogengine::IntValue *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::UintValue::UintValue(uint64_t this, int a2)
{
  *(_QWORD *)this = &off_1E7933F78;
  *(_DWORD *)(this + 8) = 1;
  *(_DWORD *)(this + 12) = a2;
  return this;
}

{
  *(_QWORD *)this = &off_1E7933F78;
  *(_DWORD *)(this + 8) = 1;
  *(_DWORD *)(this + 12) = a2;
  return this;
}

void siri::dialogengine::UintValue::~UintValue(siri::dialogengine::UintValue *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::Int64Value::Int64Value(uint64_t this, uint64_t a2)
{
  *(_DWORD *)(this + 8) = 2;
  *(_QWORD *)this = &off_1E7933F98;
  *(_QWORD *)(this + 16) = a2;
  return this;
}

{
  *(_DWORD *)(this + 8) = 2;
  *(_QWORD *)this = &off_1E7933F98;
  *(_QWORD *)(this + 16) = a2;
  return this;
}

void siri::dialogengine::Int64Value::~Int64Value(siri::dialogengine::Int64Value *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::BoolValue::BoolValue(uint64_t this, char a2)
{
  *(_DWORD *)(this + 8) = 3;
  *(_QWORD *)this = &off_1E7933FB8;
  *(_BYTE *)(this + 12) = a2;
  return this;
}

{
  *(_DWORD *)(this + 8) = 3;
  *(_QWORD *)this = &off_1E7933FB8;
  *(_BYTE *)(this + 12) = a2;
  return this;
}

void siri::dialogengine::BoolValue::~BoolValue(siri::dialogengine::BoolValue *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::StringValue::StringValue(uint64_t a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *(_DWORD *)(a1 + 8) = 4;
  *(_QWORD *)a1 = off_1E7933FD8;
  v3 = (std::string *)(a1 + 16);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

{
  std::string *v3;
  __int128 v4;

  *(_DWORD *)(a1 + 8) = 4;
  *(_QWORD *)a1 = off_1E7933FD8;
  v3 = (std::string *)(a1 + 16);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void siri::dialogengine::StringValue::~StringValue(void **this)
{
  *this = off_1E7933FD8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E7933FD8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::DoubleValue::DoubleValue(uint64_t this, double a2)
{
  *(_DWORD *)(this + 8) = 5;
  *(_QWORD *)this = &off_1E7933FF8;
  *(double *)(this + 16) = a2;
  return this;
}

{
  *(_DWORD *)(this + 8) = 5;
  *(_QWORD *)this = &off_1E7933FF8;
  *(double *)(this + 16) = a2;
  return this;
}

void siri::dialogengine::DoubleValue::~DoubleValue(siri::dialogengine::DoubleValue *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::JSONValue::GetValueType(siri::dialogengine::JSONValue *this)
{
  return *((unsigned int *)this + 2);
}

char *siri::dialogengine::ArrayValue::GetVal@<X0>(siri::dialogengine::ArrayValue *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)a2, *((_QWORD **)this + 2), *((_QWORD **)this + 3), (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 4);
}

uint64_t siri::dialogengine::ObjectValue::GetVal@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100](a2, this + 2);
}

void siri::dialogengine::ObjectValue::SetVal(uint64_t a1, _QWORD *a2)
{
  uint64_t **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t **v19;
  _QWORD *v20;
  _QWORD *v21;

  v2 = (uint64_t **)(a1 + 16);
  if ((_QWORD *)(a1 + 16) != a2)
  {
    v3 = a2 + 1;
    v4 = (_QWORD *)*a2;
    if (*(_QWORD *)(a1 + 32))
    {
      v6 = *(_QWORD *)(a1 + 24);
      v5 = (_QWORD *)(a1 + 24);
      v7 = (_QWORD *)*(v5 - 1);
      *(v5 - 1) = v5;
      *(_QWORD *)(v6 + 16) = 0;
      *v5 = 0;
      v5[1] = 0;
      if (v7[1])
        v8 = (_QWORD *)v7[1];
      else
        v8 = v7;
      v19 = v2;
      v20 = v8;
      v21 = v8;
      if (!v8 || (v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8), v4 == v3))
      {
        v12 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v8 + 7, v4[7], v4[8]);
          v9 = v21;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v18, (const void **)v21 + 4);
          std::__tree<std::string>::__insert_node_at(v2, v18, leaf_high, v9);
          v8 = v20;
          v21 = v20;
          if (v20)
            v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          v11 = (_QWORD *)v4[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v4[2];
              v13 = *v12 == (_QWORD)v4;
              v4 = v12;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v4 = v12;
        }
        while (v12 != v3);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
      v4 = v12;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>> const&>((uint64_t)&v19, (uint64_t)v2, (__int128 *)v4 + 2);
        v14 = (uint64_t *)v19;
        v15 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v18, (const void **)v19 + 4);
        std::__tree<std::string>::__insert_node_at(v2, v18, v15, v14);
        v19 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19);
        v16 = (_QWORD *)v4[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v4[2];
            v13 = *v17 == (_QWORD)v4;
            v4 = v17;
          }
          while (!v13);
        }
        v4 = v17;
      }
      while (v17 != v3);
    }
  }
}

void sub_1BFACCD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectValue::InsertVal(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::string __p;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = (uint64_t **)(a1 + 16);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v5 = (std::__shared_weak_count *)a3[1];
  v12 = *a3;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BFACCE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::IntValue::GetVal(siri::dialogengine::IntValue *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t siri::dialogengine::UintValue::GetVal(siri::dialogengine::UintValue *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t siri::dialogengine::Int64Value::GetVal(siri::dialogengine::Int64Value *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t siri::dialogengine::BoolValue::GetVal(siri::dialogengine::BoolValue *this)
{
  return *((unsigned __int8 *)this + 12);
}

void siri::dialogengine::StringValue::GetVal(siri::dialogengine::StringValue *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 4);
  }
}

double siri::dialogengine::DoubleValue::GetVal(siri::dialogengine::DoubleValue *this)
{
  return *((double *)this + 2);
}

void siri::dialogengine::PropertyBase::GetName(siri::dialogengine::PropertyBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

std::string *siri::dialogengine::PropertyBase::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void siri::dialogengine::PropertyBase::GetType(siri::dialogengine::PropertyBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

std::string *siri::dialogengine::PropertyBase::SetType(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

void siri::dialogengine::PropertyBase::GetDescription(siri::dialogengine::PropertyBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
}

std::string *siri::dialogengine::PropertyBase::SetDescription(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

void siri::dialogengine::PropertyBase::GetSampleValue(siri::dialogengine::PropertyBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 5);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
  }
}

void siri::dialogengine::PropertyBase::GetSampleValueAsArray(siri::dialogengine::PropertyBase *this@<X0>, uint64_t *a2@<X8>)
{
  std::string *v4;
  BOOL v5;
  BOOL v6;
  std::string *v7;
  std::string __p;
  std::string v9;
  __int128 v10;

  *(_QWORD *)&v10 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v9, "[");
  v4 = (std::string *)((char *)this + 80);
  v5 = siri::dialogengine::StringStartsWith(v4, (unsigned __int8 *)&v9);
  v6 = v5;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if (v6)
      goto LABEL_3;
LABEL_7:
    siri::dialogengine::StringTrim("\"", v4, &v9);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    __p.__r_.__value_.__s.__data_[8] = 0;
    v7 = (std::string *)operator new(0x18uLL);
    *a2 = (uint64_t)v7;
    a2[1] = (uint64_t)v7;
    a2[2] = (uint64_t)&v7[1];
    a2[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a2 + 2), (__int128 *)&v9, &v10, v7);
    goto LABEL_8;
  }
  if (!v5)
    goto LABEL_7;
LABEL_3:
  siri::dialogengine::StringTrimLeft("[", v4, &__p);
  siri::dialogengine::StringTrimRight("]", &__p, &v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  siri::dialogengine::ParseStringList((uint64_t *)&v9, 1, a2);
LABEL_8:
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1BFACD0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = v22;
  *(_QWORD *)(v21 + 8) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::PropertyBase::SetSampleValue(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 80), a2);
}

void siri::dialogengine::PropertyBase::GetVersionAdded(siri::dialogengine::PropertyBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 127) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 15);
  }
}

std::string *siri::dialogengine::PropertyBase::SetVersionAdded(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 104), a2);
}

void siri::dialogengine::PropertyBase::GetDeprecated(siri::dialogengine::PropertyBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 16), *((_QWORD *)this + 17));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 18);
  }
}

std::string *siri::dialogengine::PropertyBase::SetDeprecated(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 128), a2);
}

uint64_t siri::dialogengine::PropertyBase::IsProfanityFilter(siri::dialogengine::PropertyBase *this)
{
  return *((unsigned __int8 *)this + 152);
}

uint64_t siri::dialogengine::PropertyBase::SetProfanityFilter(uint64_t this, char a2)
{
  *(_BYTE *)(this + 152) = a2;
  return this;
}

uint64_t siri::dialogengine::PropertyBase::IsOptional(siri::dialogengine::PropertyBase *this)
{
  return *((unsigned __int8 *)this + 153);
}

uint64_t siri::dialogengine::PropertyBase::SetOptional(uint64_t this, char a2)
{
  *(_BYTE *)(this + 153) = a2;
  return this;
}

uint64_t siri::dialogengine::PropertyBase::IsRedacted(siri::dialogengine::PropertyBase *this)
{
  return *((unsigned __int8 *)this + 154);
}

uint64_t siri::dialogengine::PropertyBase::SetRedacted(uint64_t this, char a2)
{
  *(_BYTE *)(this + 154) = a2;
  return this;
}

BOOL siri::dialogengine::PropertyBase::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const void **v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const void **v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  const void **v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  const void **v38;
  unsigned __int8 *v39;

  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 0;
  v8 = (const void **)(a1 + 8);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 16)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v10 = *(unsigned __int8 *)(a1 + 55);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 55);
  else
    v11 = *(_QWORD *)(a1 + 40);
  v12 = *(unsigned __int8 *)(a2 + 55);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 40);
  if (v11 != v12)
    return 0;
  v14 = (const void **)(a1 + 32);
  if (v13 >= 0)
    v15 = (unsigned __int8 *)(a2 + 32);
  else
    v15 = *(unsigned __int8 **)(a2 + 32);
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, *(_QWORD *)(a1 + 40)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 55))
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10)
        goto LABEL_31;
    }
    return 0;
  }
LABEL_31:
  v16 = *(unsigned __int8 *)(a1 + 79);
  if ((v16 & 0x80u) == 0)
    v17 = *(unsigned __int8 *)(a1 + 79);
  else
    v17 = *(_QWORD *)(a1 + 64);
  v18 = *(unsigned __int8 *)(a2 + 79);
  v19 = (char)v18;
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a2 + 64);
  if (v17 != v18)
    return 0;
  v20 = (const void **)(a1 + 56);
  if (v19 >= 0)
    v21 = (unsigned __int8 *)(a2 + 56);
  else
    v21 = *(unsigned __int8 **)(a2 + 56);
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(*v20, v21, *(_QWORD *)(a1 + 64)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 79))
  {
    while (*(unsigned __int8 *)v20 == *v21)
    {
      v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v16)
        goto LABEL_46;
    }
    return 0;
  }
LABEL_46:
  v22 = *(unsigned __int8 *)(a1 + 103);
  if ((v22 & 0x80u) == 0)
    v23 = *(unsigned __int8 *)(a1 + 103);
  else
    v23 = *(_QWORD *)(a1 + 88);
  v24 = *(unsigned __int8 *)(a2 + 103);
  v25 = (char)v24;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 88);
  if (v23 != v24)
    return 0;
  v26 = (const void **)(a1 + 80);
  if (v25 >= 0)
    v27 = (unsigned __int8 *)(a2 + 80);
  else
    v27 = *(unsigned __int8 **)(a2 + 80);
  if ((v22 & 0x80) != 0)
  {
    if (memcmp(*v26, v27, *(_QWORD *)(a1 + 88)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 103))
  {
    while (*(unsigned __int8 *)v26 == *v27)
    {
      v26 = (const void **)((char *)v26 + 1);
      ++v27;
      if (!--v22)
        goto LABEL_61;
    }
    return 0;
  }
LABEL_61:
  v28 = *(unsigned __int8 *)(a1 + 127);
  if ((v28 & 0x80u) == 0)
    v29 = *(unsigned __int8 *)(a1 + 127);
  else
    v29 = *(_QWORD *)(a1 + 112);
  v30 = *(unsigned __int8 *)(a2 + 127);
  v31 = (char)v30;
  if ((v30 & 0x80u) != 0)
    v30 = *(_QWORD *)(a2 + 112);
  if (v29 != v30)
    return 0;
  v32 = (const void **)(a1 + 104);
  if (v31 >= 0)
    v33 = (unsigned __int8 *)(a2 + 104);
  else
    v33 = *(unsigned __int8 **)(a2 + 104);
  if ((v28 & 0x80) != 0)
  {
    if (memcmp(*v32, v33, *(_QWORD *)(a1 + 112)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 127))
  {
    while (*(unsigned __int8 *)v32 == *v33)
    {
      v32 = (const void **)((char *)v32 + 1);
      ++v33;
      if (!--v28)
        goto LABEL_76;
    }
    return 0;
  }
LABEL_76:
  v34 = *(unsigned __int8 *)(a1 + 151);
  if ((v34 & 0x80u) == 0)
    v35 = *(unsigned __int8 *)(a1 + 151);
  else
    v35 = *(_QWORD *)(a1 + 136);
  v36 = *(unsigned __int8 *)(a2 + 151);
  v37 = (char)v36;
  if ((v36 & 0x80u) != 0)
    v36 = *(_QWORD *)(a2 + 136);
  if (v35 != v36)
    return 0;
  v38 = (const void **)(a1 + 128);
  if (v37 >= 0)
    v39 = (unsigned __int8 *)(a2 + 128);
  else
    v39 = *(unsigned __int8 **)(a2 + 128);
  if ((v34 & 0x80) != 0)
  {
    if (memcmp(*v38, v39, *(_QWORD *)(a1 + 136)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 151))
  {
    while (*(unsigned __int8 *)v38 == *v39)
    {
      v38 = (const void **)((char *)v38 + 1);
      ++v39;
      if (!--v34)
        goto LABEL_91;
    }
    return 0;
  }
LABEL_91:
  if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152)
    && *(unsigned __int8 *)(a1 + 153) == *(unsigned __int8 *)(a2 + 153))
  {
    return *(unsigned __int8 *)(a1 + 154) == *(unsigned __int8 *)(a2 + 154);
  }
  return 0;
}

uint64_t siri::dialogengine::PropertyBase::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) ^ 1;
}

void InitDefaultsscc_info_CoreChartElement_CoreChartElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CoreChartElement.pb.cc", a4);
  SnippetUI::CoreChartElement::CoreChartElement((SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_CoreChartElement_default_instance_, v4);
  qword_1ED1D4188 = (uint64_t)&SnippetUI::_CoreChart_default_instance_;
}

SnippetUI::CoreChartElement *SnippetUI::CoreChartElement::CoreChartElement(SnippetUI::CoreChartElement *this)
{
  *(_QWORD *)this = &off_1E7934128;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (atomic_load(scc_info_CoreChartElement_CoreChartElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_CoreChartElement_CoreChartElement_2eproto);
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BFACD610(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedField<int>::~RepeatedField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::CoreChartElement::~CoreChartElement(SnippetUI::CoreChartElement *this)
{
  SnippetUI::CoreChartElement::~CoreChartElement(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7934128;
  if (this != (SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::CoreChartElement *SnippetUI::CoreChartElement::New(SnippetUI::CoreChartElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChartElement>(0);
}

SnippetUI::CoreChartElement *SnippetUI::CoreChartElement::New(SnippetUI::CoreChartElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChartElement>(a2);
}

void SnippetUI::CoreChartElement::Clear(SnippetUI::CoreChartElement *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  *((_DWORD *)this + 4) = 0;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::CoreChartElement *)((char *)this + 8);
  *((_QWORD *)v3 + 4) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

uint64_t SnippetUI::CoreChartElement::IsInitialized(SnippetUI::CoreChartElement *this)
{
  return 1;
}

char *SnippetUI::CoreChartElement::ByteSizeLong(SnippetUI::CoreChartElement *this)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const google::protobuf::UnknownFieldSet *v10;
  SnippetUI::CoreChart *v11;
  char *v12;

  v2 = (_DWORD *)((char *)this + 16);
  v3 = *((_DWORD *)this + 4);
  if (!v3)
  {
    v5 = 0;
LABEL_11:
    v9 = 0;
    v8 = 0;
    goto LABEL_14;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v2, v4);
    if (v6 < 0)
      v7 = 10;
    else
      v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    v5 += v7;
    ++v4;
  }
  while (v3 != v4);
  if (!v5)
    goto LABEL_11;
  if ((v5 & 0x80000000) != 0)
    v8 = 11;
  else
    v8 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v9 = v5;
LABEL_14:
  *((_DWORD *)this + 8) = v9;
  v10 = (const google::protobuf::UnknownFieldSet *)(v8 + v5);
  if (this != (SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_)
  {
    v11 = (SnippetUI::CoreChart *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::CoreChart::ByteSizeLong(v11);
      v10 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v10
                                                          + 1
                                                          + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::CoreChartElement *)((char *)this + 8), v10, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v10;
  return (char *)v10;
}

uint64_t SnippetUI::CoreChartElement::GetCachedSize(SnippetUI::CoreChartElement *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::CoreChartElement::_InternalParse(SnippetUI::CoreChartElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  google::protobuf::internal *v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  char *v13;
  SnippetUI::CoreChart *v14;
  unsigned int v15;
  char *v16;
  char *SizeFallback;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  google::protobuf::internal *v23;
  int v24;
  int v25;
  google::protobuf::internal *v27;

  v27 = a2;
  v5 = (SnippetUI::CoreChartElement *)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v27, *((_DWORD *)a3 + 23)) & 1) != 0)return v27;
        TagFallback = (google::protobuf::internal *)((char *)v27 + 1);
        v10 = (char *)*(unsigned __int8 *)v27;
        if ((*(char *)v27 & 0x80000000) == 0)
          goto LABEL_6;
        v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v27 + 2);
LABEL_6:
          v27 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v27, v10);
        v27 = TagFallback;
        if (!TagFallback)
          return TagFallback;
LABEL_7:
        if (v10 >> 3 == 2)
          break;
        if (v10 >> 3 != 1 || v10 != 10)
          goto LABEL_12;
        v14 = (SnippetUI::CoreChart *)*((_QWORD *)this + 5);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChart>(0);
          *((_QWORD *)this + 5) = v14;
          TagFallback = v27;
        }
        v15 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            return 0;
          v16 = SizeFallback;
          v15 = v18;
        }
        else
        {
          v16 = (char *)TagFallback + 1;
        }
        v19 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v16, v15);
        v20 = *((_DWORD *)a3 + 22);
        v21 = __OFSUB__(v20--, 1);
        *((_DWORD *)a3 + 22) = v20;
        if (v20 < 0 != v21)
          return 0;
        v22 = v19;
        v23 = SnippetUI::CoreChart::_InternalParse(v14, (google::protobuf::internal *)v16, a3);
        if (!v23)
          return 0;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v24 = *((_DWORD *)a3 + 7) + v22;
        *((_DWORD *)a3 + 7) = v24;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v24 & (v24 >> 31));
        v27 = v23;
      }
      if (v10 == 18)
      {
        v13 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v7);
        goto LABEL_19;
      }
      if (v10 != 16)
        break;
      v25 = google::protobuf::internal::ReadVarint(&v27, (const char **)v10);
      if (!v27)
        return 0;
      SnippetUI::ColorElement::_internal_add_idioms((uint64_t)this, v25);
    }
LABEL_12:
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      break;
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v6, TagFallback, a3, v8);
LABEL_19:
    v27 = (google::protobuf::internal *)v13;
    if (!v13)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::CoreChartElement::InternalSerializeWithCachedSizesToArray(SnippetUI::CoreChartElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::CoreChart *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  std::string *v17;
  _BYTE *v18;
  int *v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v30;
  char v31;
  std::string v32[2];

  v5 = (char *)a2;
  if (this != (SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_)
  {
    v7 = (SnippetUI::CoreChart *)*((_QWORD *)this + 5);
    if (v7)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v7 = (SnippetUI::CoreChart *)*((_QWORD *)this + 5);
      }
      *v5 = 10;
      v8 = *((_DWORD *)v7 + 6);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = v5 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = v12 + 2;
          *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          v9 = v5 + 3;
        }
      }
      else
      {
        v5[1] = v8;
        v9 = v5 + 2;
      }
      v5 = (char *)SnippetUI::CoreChart::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
    }
  }
  v15 = *((_DWORD *)this + 8);
  if ((int)v15 >= 1)
  {
    v16 = *(_QWORD *)a3;
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = *(_QWORD *)a3;
    }
    if (v16 <= (unint64_t)v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      v17 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
    }
    *v5 = 18;
    v18 = v5 + 1;
    if (v15 >= 0x80)
    {
      do
      {
        *v18++ = v15 | 0x80;
        v30 = v15 >> 14;
        v15 >>= 7;
      }
      while (v30);
      v5 = v18 - 1;
    }
    v5 += 2;
    *v18 = v15;
    v19 = (int *)*((_QWORD *)this + 3);
    v20 = &v19[*((int *)this + 4)];
    do
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v22 = *v19++;
      v21 = v22;
      if (v22 > 0x7F)
      {
        *v5 = v21 | 0x80;
        v23 = v21 >> 7;
        if (v21 >> 14)
        {
          v24 = v5 + 1;
          do
          {
            v25 = v24;
            *v24++ = v23 | 0x80;
            v26 = v23 >> 7;
            v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          v5 = v25 + 2;
          *v24 = v26;
        }
        else
        {
          v5[1] = v23;
          v5 += 2;
        }
      }
      else
      {
        *v5++ = v21;
      }
    }
    while (v19 < v20);
  }
  v28 = *((_QWORD *)this + 1);
  if ((v28 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v28 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1BFACDC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::CoreChartElement::CopyFrom(SnippetUI::CoreChartElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::CoreChartElement::Clear(this);
    SnippetUI::CoreChartElement::MergeFrom(this, a2);
  }
}

void SnippetUI::CoreChartElement::MergeFrom(SnippetUI::CoreChartElement *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::CoreChartElement *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CoreChartElement.pb.cc", 283);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::CoreChartElement::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFACDD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::CoreChartElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::CoreChartElement::GetMetadata(SnippetUI::CoreChartElement *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_CoreChartElement_2eproto);
  return file_level_metadata_CoreChartElement_2eproto;
}

void *SnippetUI::CoreChartElement::default_instance(SnippetUI::CoreChartElement *this)
{
  if (atomic_load(scc_info_CoreChartElement_CoreChartElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_CoreChartElement_CoreChartElement_2eproto);
  return &SnippetUI::_CoreChartElement_default_instance_;
}

void SnippetUI::CoreChartElement::MergeFrom(SnippetUI::CoreChartElement *this, const SnippetUI::CoreChartElement *a2)
{
  std::string *v4;
  uint64_t v5;
  const SnippetUI::CoreChart *v6;
  SnippetUI::CoreChart *v7;
  const SnippetUI::CoreChart *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CoreChartElement.pb.cc", 298);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::CoreChartElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 4, (int *)a2 + 4);
  if (a2 != (const SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_)
  {
    v6 = (const SnippetUI::CoreChart *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = (SnippetUI::CoreChart *)*((_QWORD *)this + 5);
      if (!v7)
      {
        v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChart>(0);
        *((_QWORD *)this + 5) = v7;
        v6 = (const SnippetUI::CoreChart *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::CoreChart *)&SnippetUI::_CoreChart_default_instance_;
      SnippetUI::CoreChart::MergeFrom(v7, v8);
    }
  }
}

void sub_1BFACDEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::CoreChartElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChartElement>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::CoreChartElement *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::CoreChartElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::CoreChartElement>);
    SnippetUI::CoreChartElement::CoreChartElement(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::CoreChartElement *)operator new();
    SnippetUI::CoreChartElement::CoreChartElement(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFACDF3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C407499B434);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::CoreChartElement>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::CoreChartElement::InitAsDefaultInstance(SnippetUI::CoreChartElement *this)
{
  qword_1ED1D4188 = (uint64_t)&SnippetUI::_CoreChart_default_instance_;
}

uint64_t SnippetUI::CoreChartElement::_Internal::chart(SnippetUI::CoreChartElement::_Internal *this, const SnippetUI::CoreChartElement *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::CoreChartElement::clear_chart(SnippetUI::CoreChartElement *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::CoreChartElement *SnippetUI::CoreChartElement::CoreChartElement(SnippetUI::CoreChartElement *this, const SnippetUI::CoreChartElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::CoreChart *v6;

  *(_QWORD *)this = &off_1E7934128;
  *((_QWORD *)this + 1) = 0;
  v4 = (SnippetUI::CoreChartElement *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 16, (int *)a2 + 4);
  *((_DWORD *)this + 12) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = 0;
  if (a2 != (const SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_ && *((_QWORD *)a2 + 5))
  {
    v6 = (SnippetUI::CoreChart *)operator new();
    SnippetUI::CoreChart::CoreChart(v6, *((const SnippetUI::CoreChart **)a2 + 5));
  }
  *((_QWORD *)this + 5) = v6;
  return this;
}

void sub_1BFACE0D4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C4084265165);
  google::protobuf::RepeatedField<int>::~RepeatedField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::CoreChartElement::CopyFrom(SnippetUI::CoreChartElement *this, const SnippetUI::CoreChartElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::CoreChartElement::Clear(this);
    SnippetUI::CoreChartElement::MergeFrom(this, a2);
  }
}

void SnippetUI::CoreChartElement::InternalSwap(SnippetUI::CoreChartElement *this, SnippetUI::CoreChartElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::CoreChartElement *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 16, (uint64_t)a2 + 16);
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
}

uint64_t siri::dialogengine::IsValidVersionNumber(char *a1)
{
  int v1;
  char *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  _BOOL4 v10;
  int v11;

  v1 = a1[23];
  if (v1 >= 0)
    v2 = a1;
  else
    v2 = *(char **)a1;
  if (v1 >= 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  if (v3)
  {
    v4 = 1;
    v5 = MEMORY[0x1E0C80978];
    v6 = 1;
    while (1)
    {
      v7 = *v2;
      if ((v7 & 0x80000000) == 0)
        break;
      if (!__maskrune(v7, 0x4000uLL))
      {
        v9 = 0;
LABEL_18:
        v8 = v9 == 0;
        v10 = v9 != 0;
        v11 = v8;
        v6 &= v11;
        v4 &= v10;
      }
LABEL_22:
      ++v2;
      if (!--v3)
        return v4 & ~v6 & 1;
    }
    v8 = v7 != 46 && (*(_DWORD *)(v5 + 4 * v7 + 60) & 0x4000) == 0;
    if (!v8)
      goto LABEL_22;
    v9 = (*(_DWORD *)(v5 + 4 * v7 + 60) >> 10) & 1;
    goto LABEL_18;
  }
  v6 = 1;
  v4 = 1;
  return v4 & ~v6 & 1;
}

void siri::dialogengine::GetMajorVersion(std::string *a1@<X0>, std::string *a2@<X8>)
{
  _BOOL4 v4;
  void *__p[2];
  char v6;
  std::string __str;
  const std::string *v8[3];

  siri::dialogengine::StringSplit((unsigned __int8 *)a1, ".", v8);
  if (v8[0] == v8[1])
    goto LABEL_6;
  siri::dialogengine::StringTrim(" \t\n\r", a1, &__str);
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  v4 = siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v4)
      goto LABEL_6;
LABEL_8:
    siri::dialogengine::StringTrim(" \t\n\r", v8[0], a2);
    goto LABEL_9;
  }
  if (!v4)
    goto LABEL_8;
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(a2, "0");
LABEL_9:
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
}

void sub_1BFACE368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  a16 = (void *)(v21 - 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetMinorVersion(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  _QWORD v3[3];
  void **v4;

  siri::dialogengine::StringSplit(a1, ".", v3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - v3[0]) >> 3) < 2)
    goto LABEL_6;
  if (*(char *)(v3[0] + 47) < 0)
  {
    if (*(_QWORD *)(v3[0] + 32))
      goto LABEL_4;
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(a2, "0");
    goto LABEL_7;
  }
  if (!*(_BYTE *)(v3[0] + 47))
    goto LABEL_6;
LABEL_4:
  siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)(v3[0] + 24), a2);
LABEL_7:
  v4 = (void **)v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_1BFACE45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VersionGreaterThan(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t i;
  int v11;
  int v12;
  uint64_t v13;
  void **v15[3];
  uint64_t v16;
  uint64_t v17;
  void ***v18;

  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return 0;
  siri::dialogengine::StringSplit((unsigned __int8 *)a1, ".", &v16);
  siri::dialogengine::StringSplit((unsigned __int8 *)a2, ".", v15);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3);
  v6 = v15[1] - v15[0];
  v7 = 0xAAAAAAAAAAAAAAABLL * v6;
  if (v5 <= 0xAAAAAAAAAAAAAAABLL * v6)
    v8 = 0xAAAAAAAAAAAAAAABLL * v6;
  else
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3);
  if (v8)
  {
    v9 = 0;
    for (i = 0; v8 != i; ++i)
    {
      v11 = v5 <= i ? 0 : siri::dialogengine::StringToInt((const std::string *)(v16 + v9 * 8), 0, 0);
      v12 = v7 <= i ? 0 : siri::dialogengine::StringToInt((const std::string *)&v15[0][v9], 0, 0);
      if (v11 < v12)
        break;
      if (v11 > v12)
      {
        v13 = 1;
        goto LABEL_24;
      }
      v9 += 3;
    }
  }
  v13 = 0;
LABEL_24:
  v18 = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  v15[0] = (void **)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v15);
  return v13;
}

void sub_1BFACE5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VersionEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  void **v23[3];
  uint64_t v24;
  uint64_t v25;
  void ***v26;

  v2 = a2;
  v3 = a1[23];
  if ((v3 & 0x80u) == 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  v5 = a2[23];
  if (v4)
  {
    v6 = *((_QWORD *)a2 + 1);
    if ((v5 & 0x80u) == 0)
      v7 = a2[23];
    else
      v7 = *((_QWORD *)a2 + 1);
    if (v7)
    {
      siri::dialogengine::StringSplit(a1, ".", &v24);
      siri::dialogengine::StringSplit(v2, ".", v23);
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3);
      if (v8 == 0xAAAAAAAAAAAAAAABLL * (v23[1] - v23[0]))
      {
        if (v25 == v24)
        {
          v10 = 1;
        }
        else
        {
          v9 = 0;
          v10 = 0;
          v11 = 0;
          if (v8 <= 1)
            v12 = 1;
          else
            v12 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3);
          do
          {
            v13 = siri::dialogengine::StringToInt((const std::string *)(v24 + v9 * 8), 0, 0);
            if (v13 != siri::dialogengine::StringToInt((const std::string *)&v23[0][v9], 0, 0))
              break;
            v10 = ++v11 >= v8;
            v9 += 3;
          }
          while (v12 != v11);
        }
      }
      else
      {
        v10 = 0;
      }
      v26 = v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
      v23[0] = (void **)&v24;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
      return v10;
    }
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
  }
  v14 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = v6;
  if (v4 == v5)
  {
    if (v14 < 0)
      a2 = *(unsigned __int8 **)a2;
    if ((v3 & 0x80) != 0)
    {
      return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
    }
    else if (a1[23])
    {
      v15 = v3 - 1;
      do
      {
        v17 = *a1++;
        v16 = v17;
        v19 = *a2++;
        v18 = v19;
        v21 = v15-- != 0;
        v10 = v16 == v18;
      }
      while (v16 == v18 && v21);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v10;
}

void sub_1BFACE7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::VersionNotEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return !siri::dialogengine::VersionEqual(a1, a2);
}

uint64_t siri::dialogengine::VersionGreaterThanOrEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (siri::dialogengine::VersionEqual(a1, a2))
    return 1;
  else
    return siri::dialogengine::VersionGreaterThan((uint64_t)a1, (uint64_t)a2);
}

uint64_t siri::dialogengine::VersionLessThan(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (siri::dialogengine::VersionEqual(a1, a2))
    return 0;
  else
    return siri::dialogengine::VersionGreaterThan((uint64_t)a1, (uint64_t)a2) ^ 1;
}

BOOL siri::dialogengine::VersionLessThanOrEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (siri::dialogengine::VersionLessThan(a1, a2) & 1) != 0 || siri::dialogengine::VersionEqual(a1, a2);
}

void InitDefaultsscc_info_MultilineTextProperty_TextProperty_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", a4);
  SnippetUI::MultilineTextProperty::MultilineTextProperty((SnippetUI::MultilineTextProperty *)&SnippetUI::_MultilineTextProperty_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_MultilineTextProperty_default_instance_, v4);
  qword_1ED1D55B0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D55B8 = &SnippetUI::_ActionProperty_default_instance_;
}

void InitDefaultsscc_info_MultilineTextProperty_Line_TextProperty_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", a4);
  SnippetUI::MultilineTextProperty_Line::MultilineTextProperty_Line((SnippetUI::MultilineTextProperty_Line *)&SnippetUI::_MultilineTextProperty_Line_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_MultilineTextProperty_Line_default_instance_, v4);
}

SnippetUI::MultilineTextProperty_Line *SnippetUI::MultilineTextProperty_Line::MultilineTextProperty_Line(SnippetUI::MultilineTextProperty_Line *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7934300;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_MultilineTextProperty_Line_TextProperty_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_MultilineTextProperty_Line_TextProperty_2eproto);
  return this;
}

void sub_1BFACEA08(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::MultilineTextProperty_Line::~MultilineTextProperty_Line(SnippetUI::MultilineTextProperty_Line *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E7934300;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::MultilineTextProperty_Line *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E7934300;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::MultilineTextProperty_Line *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E7934300;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::MultilineTextProperty_Line *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

SnippetUI::MultilineTextProperty_Line *SnippetUI::MultilineTextProperty_Line::New(SnippetUI::MultilineTextProperty_Line *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty_Line>(0);
}

SnippetUI::MultilineTextProperty_Line *SnippetUI::MultilineTextProperty_Line::New(SnippetUI::MultilineTextProperty_Line *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty_Line>(a2);
}

void SnippetUI::MultilineTextProperty_Line::Clear(SnippetUI::MultilineTextProperty_Line *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16);
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::MultilineTextProperty_Line *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::MultilineTextProperty_Line::IsInitialized(SnippetUI::MultilineTextProperty_Line *this)
{
  return 1;
}

char *SnippetUI::MultilineTextProperty_Line::ByteSizeLong(SnippetUI::MultilineTextProperty_Line *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::TextElement **v4;
  uint64_t v5;
  SnippetUI::TextElement *v6;
  char *v7;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::TextElement **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::TextElement::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::MultilineTextProperty_Line *)((char *)this + 8), v2, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::MultilineTextProperty_Line::GetCachedSize(SnippetUI::MultilineTextProperty_Line *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::MultilineTextProperty_Line::_InternalParse(SnippetUI::MultilineTextProperty_Line *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  unsigned int *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  BOOL v10;
  char *v11;
  google::protobuf::internal *v12;
  int *v13;
  uint64_t v14;
  int v15;
  SnippetUI::TextElement *v16;
  uint64_t v17;
  uint64_t v18;
  google::protobuf::internal *v20;

  v20 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 16);
LABEL_2:
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v20, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v20 + 1);
    v9 = (char *)*(unsigned __int8 *)v20;
    if ((*(char *)v20 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v20 + 2);
LABEL_6:
      v20 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v20, v9);
    v20 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v9 == 10)
    {
      v11 = (char *)TagFallback - 1;
      while (1)
      {
        v12 = (google::protobuf::internal *)(v11 + 1);
        v20 = (google::protobuf::internal *)(v11 + 1);
        v13 = (int *)*((_QWORD *)this + 4);
        if (!v13)
          break;
        v14 = *((int *)this + 6);
        v15 = *v13;
        if ((int)v14 >= *v13)
        {
          if (v15 == *((_DWORD *)this + 7))
          {
LABEL_20:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v15 + 1);
            v13 = (int *)*((_QWORD *)this + 4);
            v15 = *v13;
          }
          *v13 = v15 + 1;
          v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                    + 2));
          v17 = *((_QWORD *)this + 4);
          v18 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v18 + 1;
          *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
          v12 = v20;
          goto LABEL_22;
        }
        *((_DWORD *)this + 6) = v14 + 1;
        v16 = *(SnippetUI::TextElement **)&v13[2 * v14 + 2];
LABEL_22:
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextElement>(a3, v16, v12);
        v20 = (google::protobuf::internal *)v11;
        if (!v11)
          return 0;
        if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
          goto LABEL_2;
      }
      v15 = *((_DWORD *)this + 7);
      goto LABEL_20;
    }
    if ((_DWORD)v9)
      v10 = (v9 & 7) == 4;
    else
      v10 = 1;
    if (v10)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
      return TagFallback;
    }
    v20 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v5, TagFallback, a3, v7);
    if (!v20)
      return 0;
  }
  return v20;
}

const google::protobuf::UnknownFieldSet *SnippetUI::MultilineTextProperty_Line::InternalSerializeWithCachedSizesToArray(SnippetUI::MultilineTextProperty_Line *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int i;
  SnippetUI::TextElement *v9;
  google::protobuf::io::EpsCopyOutputStream *v10;
  unsigned int v11;
  google::protobuf::UnknownFieldSet *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v9 = (SnippetUI::TextElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16, i);
      *(_BYTE *)a2 = 10;
      v11 = *((_DWORD *)v9 + 24);
      if (v11 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v11 | 0x80;
        v13 = v11 >> 7;
        if (v11 >> 14)
        {
          v14 = (char *)a2 + 2;
          do
          {
            v15 = v14;
            *v14++ = v13 | 0x80;
            v16 = v13 >> 7;
            v17 = v13 >> 14;
            v13 >>= 7;
          }
          while (v17);
          v12 = (google::protobuf::UnknownFieldSet *)(v15 + 2);
          *v14 = v16;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v13;
          v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v11;
        v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::TextElement::InternalSerializeWithCachedSizesToArray(v9, v12, a3, v10);
    }
  }
  v18 = *((_QWORD *)this + 1);
  if ((v18 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v18 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::MultilineTextProperty_Line::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::MultilineTextProperty_Line::Clear((SnippetUI::MultilineTextProperty_Line *)this);
    SnippetUI::MultilineTextProperty_Line::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::MultilineTextProperty_Line::Clear((SnippetUI::MultilineTextProperty_Line *)this);
    SnippetUI::MultilineTextProperty_Line::MergeFrom(this, a2);
  }
}

void SnippetUI::MultilineTextProperty_Line::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", 651);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::MultilineTextProperty_Line::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BFACEF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::MultilineTextProperty_Line::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::MultilineTextProperty_Line::GetMetadata(SnippetUI::MultilineTextProperty_Line *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TextProperty_2eproto);
  return qword_1EF582948;
}

void InitDefaultsscc_info_TextProperty_TextProperty_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", a4);
  SnippetUI::TextProperty::TextProperty((SnippetUI::TextProperty *)&SnippetUI::_TextProperty_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TextProperty_default_instance_, v4);
  qword_1ED1D4998 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D49A0 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::TextProperty *SnippetUI::TextProperty::TextProperty(SnippetUI::TextProperty *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7934240;
  *((_DWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_TextProperty_TextProperty_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TextProperty_TextProperty_2eproto);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  return this;
}

void sub_1BFACF07C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::TextProperty::~TextProperty(SnippetUI::TextProperty *this)
{
  SnippetUI::TextProperty::~TextProperty(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7934240;
  if (this != (SnippetUI::TextProperty *)&SnippetUI::_TextProperty_default_instance_)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 6);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::TextProperty *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::TextProperty *SnippetUI::TextProperty::New(SnippetUI::TextProperty *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
}

SnippetUI::TextProperty *SnippetUI::TextProperty::New(SnippetUI::TextProperty *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(a2);
}

void SnippetUI::TextProperty::Clear(SnippetUI::TextProperty *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 5) = 0;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = *((_BYTE *)this + 8);
  v4 = (char *)this + 8;
  *((_QWORD *)v4 + 5) = 0;
  *((_WORD *)v4 + 24) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v4);
}

uint64_t SnippetUI::TextProperty::IsInitialized(SnippetUI::TextProperty *this)
{
  return 1;
}

char *SnippetUI::TextProperty::ByteSizeLong(SnippetUI::TextProperty *this)
{
  uint64_t v2;
  uint64_t v3;
  SnippetUI::TextElement **v4;
  uint64_t v5;
  SnippetUI::TextElement *v6;
  char *v7;
  SnippetUI::ActionProperty *v8;
  char *v9;
  SnippetUI::ActionProperty *v10;
  char *v11;
  uint64_t v12;
  const google::protobuf::UnknownFieldSet *v13;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::TextElement **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::TextElement::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  if (this != (SnippetUI::TextProperty *)&SnippetUI::_TextProperty_default_instance_)
  {
    v8 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v8)
    {
      v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v2 += (uint64_t)&v9[((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    v10 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
    if (v10)
    {
      v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v2 += (uint64_t)&v11[((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((_BYTE *)this + 56))
    v12 = v2 + 2;
  else
    v12 = v2;
  if (*((_BYTE *)this + 57))
    v13 = (const google::protobuf::UnknownFieldSet *)(v12 + 2);
  else
    v13 = (const google::protobuf::UnknownFieldSet *)v12;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TextProperty *)((char *)this + 8), v13, (_DWORD *)this + 15);
  *((_DWORD *)this + 15) = (_DWORD)v13;
  return (char *)v13;
}

uint64_t SnippetUI::TextProperty::GetCachedSize(SnippetUI::TextProperty *this)
{
  return *((unsigned int *)this + 15);
}

google::protobuf::internal *SnippetUI::TextProperty::_InternalParse(SnippetUI::TextProperty *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  char *v10;
  google::protobuf::internal *v11;
  int *v12;
  uint64_t v13;
  int v14;
  SnippetUI::TextElement *v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::internal *v18;
  unint64_t v19;
  int v20;
  SnippetUI::ActionProperty *v21;
  char *v22;
  google::protobuf::internal *v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  google::protobuf::internal *v27;
  uint64_t v28;
  google::protobuf::internal *v29;
  uint64_t v30;
  google::protobuf::internal *v32;

  v32 = a2;
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v32, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v32 + 1);
      v9 = (char *)*(unsigned __int8 *)v32;
      if (*(char *)v32 < 0)
      {
        v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v32, v9);
          v32 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 10)
                goto LABEL_39;
              v10 = (char *)TagFallback - 1;
              break;
            case 2u:
              if (v9 != 16)
                goto LABEL_39;
              v18 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v19 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_25;
              v20 = *(char *)v18;
              v19 = v19 + (v20 << 7) - 128;
              if (v20 < 0)
              {
                v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v19);
                v32 = v27;
                *((_BYTE *)this + 56) = v28 != 0;
                if (!v27)
                  return 0;
              }
              else
              {
                v18 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_25:
                v32 = v18;
                *((_BYTE *)this + 56) = v19 != 0;
              }
              continue;
            case 3u:
              if (v9 != 26)
                goto LABEL_39;
              v21 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
              if (v21)
                goto LABEL_33;
              v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
              *((_QWORD *)this + 5) = v21;
              goto LABEL_32;
            case 4u:
              if (v9 != 34)
                goto LABEL_39;
              v21 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
              if (v21)
                goto LABEL_33;
              v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
              *((_QWORD *)this + 6) = v21;
LABEL_32:
              TagFallback = v32;
LABEL_33:
              v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v21, TagFallback);
              goto LABEL_44;
            case 5u:
              if (v9 != 40)
                goto LABEL_39;
              v23 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v24 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_38;
              v25 = *(char *)v23;
              v24 = v24 + (v25 << 7) - 128;
              if (v25 < 0)
              {
                v29 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v24);
                v32 = v29;
                *((_BYTE *)this + 57) = v30 != 0;
                if (!v29)
                  return 0;
              }
              else
              {
                v23 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_38:
                v32 = v23;
                *((_BYTE *)this + 57) = v24 != 0;
              }
              continue;
            default:
LABEL_39:
              if ((_DWORD)v9)
                v26 = (v9 & 7) == 4;
              else
                v26 = 1;
              if (v26)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
                return TagFallback;
              }
              v22 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_44:
              v32 = (google::protobuf::internal *)v22;
              if (v22)
                continue;
              return 0;
          }
          while (1)
          {
            v11 = (google::protobuf::internal *)(v10 + 1);
            v32 = (google::protobuf::internal *)(v10 + 1);
            v12 = (int *)*((_QWORD *)this + 4);
            if (!v12)
              break;
            v13 = *((int *)this + 6);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *((_DWORD *)this + 7))
              {
LABEL_15:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v14 + 1);
                v12 = (int *)*((_QWORD *)this + 4);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                        + 2));
              v16 = *((_QWORD *)this + 4);
              v17 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              v11 = v32;
              goto LABEL_17;
            }
            *((_DWORD *)this + 6) = v13 + 1;
            v15 = *(SnippetUI::TextElement **)&v12[2 * v13 + 2];
LABEL_17:
            v10 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextElement>(a3, v15, v11);
            v32 = (google::protobuf::internal *)v10;
            if (!v10)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v10 || *v10 != 10)
              goto LABEL_2;
          }
          v14 = *((_DWORD *)this + 7);
          goto LABEL_15;
        }
        TagFallback = (google::protobuf::internal *)((char *)v32 + 2);
      }
      v32 = TagFallback;
      goto LABEL_7;
    }
    return v32;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(SnippetUI::TextProperty *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int i;
  SnippetUI::TextElement *v9;
  google::protobuf::io::EpsCopyOutputStream *v10;
  unsigned int v11;
  google::protobuf::UnknownFieldSet *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  SnippetUI::ActionProperty *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  google::protobuf::UnknownFieldSet *v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  SnippetUI::ActionProperty *v28;
  unsigned int v29;
  google::protobuf::UnknownFieldSet *v30;
  unsigned int v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  uint64_t v37;

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v9 = (SnippetUI::TextElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16, i);
      *(_BYTE *)a2 = 10;
      v11 = *((_DWORD *)v9 + 24);
      if (v11 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v11 | 0x80;
        v13 = v11 >> 7;
        if (v11 >> 14)
        {
          v14 = (char *)a2 + 2;
          do
          {
            v15 = v14;
            *v14++ = v13 | 0x80;
            v16 = v13 >> 7;
            v17 = v13 >> 14;
            v13 >>= 7;
          }
          while (v17);
          v12 = (google::protobuf::UnknownFieldSet *)(v15 + 2);
          *v14 = v16;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v13;
          v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v11;
        v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::TextElement::InternalSerializeWithCachedSizesToArray(v9, v12, a3, v10);
    }
  }
  if (*((_BYTE *)this + 56))
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v18 = *((_BYTE *)this + 56);
    }
    else
    {
      v18 = 1;
    }
    *(_BYTE *)a2 = 16;
    *((_BYTE *)a2 + 1) = v18;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  if (this != (SnippetUI::TextProperty *)&SnippetUI::_TextProperty_default_instance_)
  {
    v19 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (!v19)
      goto LABEL_30;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v19 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *(_BYTE *)a2 = 26;
    v20 = *((_DWORD *)v19 + 12);
    if (v20 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v20 | 0x80;
      v22 = v20 >> 7;
      if (v20 >> 14)
      {
        v24 = (char *)a2 + 2;
        do
        {
          v25 = v24;
          *v24++ = v22 | 0x80;
          v26 = v22 >> 7;
          v27 = v22 >> 14;
          v22 >>= 7;
        }
        while (v27);
        v23 = (google::protobuf::UnknownFieldSet *)(v25 + 2);
        *v24 = v26;
        goto LABEL_29;
      }
      *((_BYTE *)a2 + 2) = v22;
      v21 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v20;
      v21 = 2;
    }
    v23 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v21);
LABEL_29:
    a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v19, v23, a3, a4);
LABEL_30:
    v28 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
    if (v28)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v28 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
      }
      *(_BYTE *)a2 = 34;
      v29 = *((_DWORD *)v28 + 12);
      if (v29 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v29 | 0x80;
        v31 = v29 >> 7;
        if (v29 >> 14)
        {
          v32 = (char *)a2 + 2;
          do
          {
            v33 = v32;
            *v32++ = v31 | 0x80;
            v34 = v31 >> 7;
            v35 = v31 >> 14;
            v31 >>= 7;
          }
          while (v35);
          v30 = (google::protobuf::UnknownFieldSet *)(v33 + 2);
          *v32 = v34;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v31;
          v30 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v29;
        v30 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v28, v30, a3, a4);
    }
  }
  if (*((_BYTE *)this + 57))
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v36 = *((_BYTE *)this + 57);
    }
    else
    {
      v36 = 1;
    }
    *(_BYTE *)a2 = 40;
    *((_BYTE *)a2 + 1) = v36;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  v37 = *((_QWORD *)this + 1);
  if ((v37 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v37 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::TextProperty::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::TextProperty::Clear((SnippetUI::TextProperty *)this);
    SnippetUI::TextProperty::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::TextProperty::Clear((SnippetUI::TextProperty *)this);
    SnippetUI::TextProperty::MergeFrom(this, a2);
  }
}

void SnippetUI::TextProperty::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", 441);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::TextProperty::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BFACF960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TextProperty::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

uint64_t SnippetUI::TextProperty::GetMetadata(SnippetUI::TextProperty *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TextProperty_2eproto);
  return file_level_metadata_TextProperty_2eproto;
}

void *SnippetUI::TextProperty::default_instance(SnippetUI::TextProperty *this)
{
  if (atomic_load(scc_info_TextProperty_TextProperty_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TextProperty_TextProperty_2eproto);
  return &SnippetUI::_TextProperty_default_instance_;
}

void SnippetUI::TextProperty::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  int **v6;
  int **v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", 456);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  if (a2 != (int **)&SnippetUI::_TextProperty_default_instance_)
  {
    v6 = (int **)a2[5];
    if (v6)
    {
      v7 = (int **)this[5];
      if (!v7)
      {
        v7 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        this[5] = (int *)v7;
        v6 = (int **)a2[5];
      }
      if (v6)
        v8 = v6;
      else
        v8 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v7, v8);
    }
    v9 = (int **)a2[6];
    if (v9)
    {
      v10 = (int **)this[6];
      if (!v10)
      {
        v10 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        this[6] = (int *)v10;
        v9 = (int **)a2[6];
      }
      if (v9)
        v11 = v9;
      else
        v11 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v10, v11);
    }
  }
  if (*((_BYTE *)a2 + 56))
    *((_BYTE *)this + 56) = 1;
  if (*((_BYTE *)a2 + 57))
    *((_BYTE *)this + 57) = 1;
}

void sub_1BFACFAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::TextProperty *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::TextProperty *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::TextProperty *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TextProperty>);
    SnippetUI::TextProperty::TextProperty(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::TextProperty *)operator new();
    SnippetUI::TextProperty::TextProperty(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFACFB98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40BEC01B52);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TextProperty>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::MultilineTextProperty_Line::default_instance(SnippetUI::MultilineTextProperty_Line *this)
{
  if (atomic_load(scc_info_MultilineTextProperty_Line_TextProperty_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_MultilineTextProperty_Line_TextProperty_2eproto);
  return &SnippetUI::_MultilineTextProperty_Line_default_instance_;
}

void SnippetUI::MultilineTextProperty_Line::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", 666);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
}

void sub_1BFACFD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::MultilineTextProperty_Line *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty_Line>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::MultilineTextProperty_Line *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::MultilineTextProperty_Line *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::MultilineTextProperty_Line>);
    SnippetUI::MultilineTextProperty_Line::MultilineTextProperty_Line(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::MultilineTextProperty_Line *)operator new();
    SnippetUI::MultilineTextProperty_Line::MultilineTextProperty_Line(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFACFD9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::MultilineTextProperty_Line>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::MultilineTextProperty *SnippetUI::MultilineTextProperty::MultilineTextProperty(SnippetUI::MultilineTextProperty *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E79343C0;
  *((_DWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_MultilineTextProperty_TextProperty_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_MultilineTextProperty_TextProperty_2eproto);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  return this;
}

void sub_1BFACFE3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::MultilineTextProperty::~MultilineTextProperty(SnippetUI::MultilineTextProperty *this)
{
  SnippetUI::MultilineTextProperty::~MultilineTextProperty(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E79343C0;
  if (this != (SnippetUI::MultilineTextProperty *)&SnippetUI::_MultilineTextProperty_default_instance_)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 6);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::MultilineTextProperty *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::MultilineTextProperty *SnippetUI::MultilineTextProperty::New(SnippetUI::MultilineTextProperty *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
}

SnippetUI::MultilineTextProperty *SnippetUI::MultilineTextProperty::New(SnippetUI::MultilineTextProperty *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(a2);
}

void SnippetUI::MultilineTextProperty::Clear(SnippetUI::MultilineTextProperty *this)
{
  uint64_t v2;
  SnippetUI::MultilineTextProperty_Line **v3;
  SnippetUI::MultilineTextProperty_Line *v4;
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  std::string v11[2];

  v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (SnippetUI::MultilineTextProperty_Line **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::MultilineTextProperty_Line::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v6 = *((_QWORD *)this + 5);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 5) = 0;
  v7 = *((_QWORD *)this + 6);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = *((_BYTE *)this + 8);
  v8 = (char *)this + 8;
  *((_QWORD *)v8 + 5) = 0;
  *((_WORD *)v8 + 24) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v8);
}

void sub_1BFACFF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::MultilineTextProperty::IsInitialized(SnippetUI::MultilineTextProperty *this)
{
  return 1;
}

char *SnippetUI::MultilineTextProperty::ByteSizeLong(SnippetUI::MultilineTextProperty *this)
{
  uint64_t v2;
  uint64_t v3;
  SnippetUI::MultilineTextProperty_Line **v4;
  uint64_t v5;
  SnippetUI::MultilineTextProperty_Line *v6;
  char *v7;
  SnippetUI::ActionProperty *v8;
  char *v9;
  SnippetUI::ActionProperty *v10;
  char *v11;
  uint64_t v12;
  const google::protobuf::UnknownFieldSet *v13;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::MultilineTextProperty_Line **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::MultilineTextProperty_Line::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  if (this != (SnippetUI::MultilineTextProperty *)&SnippetUI::_MultilineTextProperty_default_instance_)
  {
    v8 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v8)
    {
      v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v2 += (uint64_t)&v9[((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    v10 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
    if (v10)
    {
      v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v2 += (uint64_t)&v11[((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((_BYTE *)this + 56))
    v12 = v2 + 2;
  else
    v12 = v2;
  if (*((_BYTE *)this + 57))
    v13 = (const google::protobuf::UnknownFieldSet *)(v12 + 2);
  else
    v13 = (const google::protobuf::UnknownFieldSet *)v12;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::MultilineTextProperty *)((char *)this + 8), v13, (_DWORD *)this + 15);
  *((_DWORD *)this + 15) = (_DWORD)v13;
  return (char *)v13;
}

uint64_t SnippetUI::MultilineTextProperty::GetCachedSize(SnippetUI::MultilineTextProperty *this)
{
  return *((unsigned int *)this + 15);
}

google::protobuf::internal *SnippetUI::MultilineTextProperty::_InternalParse(SnippetUI::MultilineTextProperty *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  google::protobuf::internal *v10;
  google::protobuf::internal *v11;
  int *v12;
  uint64_t v13;
  int v14;
  SnippetUI::MultilineTextProperty_Line *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  char *SizeFallback;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  unint64_t v27;
  google::protobuf::internal *v28;
  unint64_t v29;
  int v30;
  SnippetUI::ActionProperty *v31;
  char *v32;
  google::protobuf::internal *v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  google::protobuf::internal *v37;
  uint64_t v38;
  google::protobuf::internal *v39;
  uint64_t v40;
  google::protobuf::internal *v42;

  v42 = a2;
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v42, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v42 + 1);
      v9 = (char *)*(unsigned __int8 *)v42;
      if (*(char *)v42 < 0)
      {
        v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v42, v9);
          v42 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 10)
                goto LABEL_45;
              v10 = (google::protobuf::internal *)((char *)TagFallback - 1);
              break;
            case 2u:
              if (v9 != 16)
                goto LABEL_45;
              v28 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v29 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_31;
              v30 = *(char *)v28;
              v29 = v29 + (v30 << 7) - 128;
              if (v30 < 0)
              {
                v37 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v29);
                v42 = v37;
                *((_BYTE *)this + 56) = v38 != 0;
                if (!v37)
                  return 0;
              }
              else
              {
                v28 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_31:
                v42 = v28;
                *((_BYTE *)this + 56) = v29 != 0;
              }
              continue;
            case 3u:
              if (v9 != 26)
                goto LABEL_45;
              v31 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
              if (v31)
                goto LABEL_39;
              v31 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
              *((_QWORD *)this + 5) = v31;
              goto LABEL_38;
            case 4u:
              if (v9 != 34)
                goto LABEL_45;
              v31 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
              if (v31)
                goto LABEL_39;
              v31 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
              *((_QWORD *)this + 6) = v31;
LABEL_38:
              TagFallback = v42;
LABEL_39:
              v32 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v31, TagFallback);
              goto LABEL_50;
            case 5u:
              if (v9 != 40)
                goto LABEL_45;
              v33 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v34 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_44;
              v35 = *(char *)v33;
              v34 = v34 + (v35 << 7) - 128;
              if (v35 < 0)
              {
                v39 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v34);
                v42 = v39;
                *((_BYTE *)this + 57) = v40 != 0;
                if (!v39)
                  return 0;
              }
              else
              {
                v33 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_44:
                v42 = v33;
                *((_BYTE *)this + 57) = v34 != 0;
              }
              continue;
            default:
LABEL_45:
              if ((_DWORD)v9)
                v36 = (v9 & 7) == 4;
              else
                v36 = 1;
              if (v36)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
                return TagFallback;
              }
              v32 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_50:
              v42 = (google::protobuf::internal *)v32;
              if (v32)
                continue;
              return 0;
          }
          while (1)
          {
            v11 = (google::protobuf::internal *)((char *)v10 + 1);
            v42 = v11;
            v12 = (int *)*((_QWORD *)this + 4);
            if (!v12)
              break;
            v13 = *((int *)this + 6);
            v14 = *v12;
            if ((int)v13 < *v12)
            {
              *((_DWORD *)this + 6) = v13 + 1;
              v15 = *(SnippetUI::MultilineTextProperty_Line **)&v12[2 * v13 + 2];
              goto LABEL_17;
            }
            if (v14 == *((_DWORD *)this + 7))
              goto LABEL_15;
LABEL_16:
            *v12 = v14 + 1;
            v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty_Line>(*((google::protobuf::internal::ArenaImpl **)this + 2));
            v16 = *((_QWORD *)this + 4);
            v17 = *((int *)this + 6);
            *((_DWORD *)this + 6) = v17 + 1;
            *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
            v11 = v42;
LABEL_17:
            v18 = *(unsigned __int8 *)v11;
            if (*(char *)v11 < 0)
            {
              SizeFallback = google::protobuf::internal::ReadSizeFallback(v11, (const char *)*(unsigned __int8 *)v11);
              if (!SizeFallback)
                return 0;
              v19 = SizeFallback;
              v18 = v21;
            }
            else
            {
              v19 = (char *)v11 + 1;
            }
            v22 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v19, v18);
            v23 = *((_DWORD *)a3 + 22);
            v24 = __OFSUB__(v23--, 1);
            *((_DWORD *)a3 + 22) = v23;
            if (v23 < 0 != v24)
              return 0;
            v25 = v22;
            v10 = SnippetUI::MultilineTextProperty_Line::_InternalParse(v15, (google::protobuf::internal *)v19, a3);
            if (!v10)
              return 0;
            ++*((_DWORD *)a3 + 22);
            if (*((_DWORD *)a3 + 20))
              return 0;
            v26 = *((_DWORD *)a3 + 7) + v25;
            *((_DWORD *)a3 + 7) = v26;
            v27 = *((_QWORD *)a3 + 1) + (v26 & (v26 >> 31));
            *(_QWORD *)a3 = v27;
            v42 = v10;
            if (v27 <= (unint64_t)v10 || *(_BYTE *)v10 != 10)
              goto LABEL_2;
          }
          v14 = *((_DWORD *)this + 7);
LABEL_15:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v14 + 1);
          v12 = (int *)*((_QWORD *)this + 4);
          v14 = *v12;
          goto LABEL_16;
        }
        TagFallback = (google::protobuf::internal *)((char *)v42 + 2);
      }
      v42 = TagFallback;
      goto LABEL_7;
    }
    return v42;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(SnippetUI::MultilineTextProperty *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  SnippetUI::MultilineTextProperty_Line *v11;
  unsigned int v12;
  google::protobuf::UnknownFieldSet *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  SnippetUI::ActionProperty *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  google::protobuf::UnknownFieldSet *v24;
  _BYTE *v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  SnippetUI::ActionProperty *v29;
  unsigned int v30;
  google::protobuf::UnknownFieldSet *v31;
  unsigned int v32;
  _BYTE *v33;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  char v40;
  std::string v41[2];

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    v8 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v8 < 0)
        goto LABEL_5;
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v10 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
      }
      v11 = *(SnippetUI::MultilineTextProperty_Line **)(*((_QWORD *)this + 4) + 8 * v8 + 8);
      *(_BYTE *)a2 = 10;
      v12 = *((_DWORD *)v11 + 10);
      if (v12 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = (char *)a2 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = (google::protobuf::UnknownFieldSet *)(v16 + 2);
          *v15 = v17;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v14;
          v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v12;
        v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::MultilineTextProperty_Line::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7)
        goto LABEL_19;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v9 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  if (*((_BYTE *)this + 56))
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v19 = *((_BYTE *)this + 56);
    }
    else
    {
      v19 = 1;
    }
    *(_BYTE *)a2 = 16;
    *((_BYTE *)a2 + 1) = v19;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  if (this != (SnippetUI::MultilineTextProperty *)&SnippetUI::_MultilineTextProperty_default_instance_)
  {
    v20 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (!v20)
      goto LABEL_36;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v20 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *(_BYTE *)a2 = 26;
    v21 = *((_DWORD *)v20 + 12);
    if (v21 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v21 | 0x80;
      v23 = v21 >> 7;
      if (v21 >> 14)
      {
        v25 = (char *)a2 + 2;
        do
        {
          v26 = v25;
          *v25++ = v23 | 0x80;
          v27 = v23 >> 7;
          v28 = v23 >> 14;
          v23 >>= 7;
        }
        while (v28);
        v24 = (google::protobuf::UnknownFieldSet *)(v26 + 2);
        *v25 = v27;
        goto LABEL_35;
      }
      *((_BYTE *)a2 + 2) = v23;
      v22 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v21;
      v22 = 2;
    }
    v24 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v22);
LABEL_35:
    a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v20, v24, a3, a4);
LABEL_36:
    v29 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
    if (v29)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v29 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
      }
      *(_BYTE *)a2 = 34;
      v30 = *((_DWORD *)v29 + 12);
      if (v30 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v30 | 0x80;
        v32 = v30 >> 7;
        if (v30 >> 14)
        {
          v33 = (char *)a2 + 2;
          do
          {
            v34 = v33;
            *v33++ = v32 | 0x80;
            v35 = v32 >> 7;
            v36 = v32 >> 14;
            v32 >>= 7;
          }
          while (v36);
          v31 = (google::protobuf::UnknownFieldSet *)(v34 + 2);
          *v33 = v35;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v32;
          v31 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v30;
        v31 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v29, v31, a3, a4);
    }
  }
  if (*((_BYTE *)this + 57))
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v37 = *((_BYTE *)this + 57);
    }
    else
    {
      v37 = 1;
    }
    *(_BYTE *)a2 = 40;
    *((_BYTE *)a2 + 1) = v37;
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
  }
  v38 = *((_QWORD *)this + 1);
  if ((v38 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v38 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void sub_1BFAD07FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::MultilineTextProperty::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::MultilineTextProperty::Clear((SnippetUI::MultilineTextProperty *)this);
    SnippetUI::MultilineTextProperty::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::MultilineTextProperty::Clear((SnippetUI::MultilineTextProperty *)this);
    SnippetUI::MultilineTextProperty::MergeFrom(this, a2);
  }
}

void SnippetUI::MultilineTextProperty::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", 977);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::MultilineTextProperty::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BFAD08FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::MultilineTextProperty::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

uint64_t SnippetUI::MultilineTextProperty::GetMetadata(SnippetUI::MultilineTextProperty *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TextProperty_2eproto);
  return qword_1EF582958;
}

void *SnippetUI::MultilineTextProperty::default_instance(SnippetUI::MultilineTextProperty *this)
{
  if (atomic_load(scc_info_MultilineTextProperty_TextProperty_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_MultilineTextProperty_TextProperty_2eproto);
  return &SnippetUI::_MultilineTextProperty_default_instance_;
}

void SnippetUI::MultilineTextProperty::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  int **v6;
  int **v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextProperty.pb.cc", 992);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::MultilineTextProperty_Line>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  if (a2 != (int **)&SnippetUI::_MultilineTextProperty_default_instance_)
  {
    v6 = (int **)a2[5];
    if (v6)
    {
      v7 = (int **)this[5];
      if (!v7)
      {
        v7 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        this[5] = (int *)v7;
        v6 = (int **)a2[5];
      }
      if (v6)
        v8 = v6;
      else
        v8 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v7, v8);
    }
    v9 = (int **)a2[6];
    if (v9)
    {
      v10 = (int **)this[6];
      if (!v10)
      {
        v10 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        this[6] = (int *)v10;
        v9 = (int **)a2[6];
      }
      if (v9)
        v11 = v9;
      else
        v11 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v10, v11);
    }
  }
  if (*((_BYTE *)a2 + 56))
    *((_BYTE *)this + 56) = 1;
  if (*((_BYTE *)a2 + 57))
    *((_BYTE *)this + 57) = 1;
}

void sub_1BFAD0A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::MultilineTextProperty_Line>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int ***v13;
  int ***v14;
  int **v15;
  int **v16;
  int **v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  int ***v21;
  int ***v22;
  int **v23;
  int **v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (int ***)(v6 + 8);
      v14 = (int ***)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::MultilineTextProperty_Line>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (int ***)((char *)v8 + v20);
      v22 = (int ***)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty_Line>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::MultilineTextProperty_Line>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFAD0C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::MultilineTextProperty_Line>::Merge(int **a1, int **this)
{
  SnippetUI::MultilineTextProperty_Line::MergeFrom(this, a1);
}

SnippetUI::MultilineTextProperty *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::MultilineTextProperty *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::MultilineTextProperty *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::MultilineTextProperty>);
    SnippetUI::MultilineTextProperty::MultilineTextProperty(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::MultilineTextProperty *)operator new();
    SnippetUI::MultilineTextProperty::MultilineTextProperty(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAD0CB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40BEC01B52);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::MultilineTextProperty>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::TextProperty::InitAsDefaultInstance(SnippetUI::TextProperty *this)
{
  qword_1ED1D4998 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D49A0 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::TextProperty::_Internal::focus_action(SnippetUI::TextProperty::_Internal *this, const SnippetUI::TextProperty *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::TextProperty::_Internal::selected_action(SnippetUI::TextProperty::_Internal *this, const SnippetUI::TextProperty *a2)
{
  return *((_QWORD *)this + 6);
}

void SnippetUI::TextProperty::clear_text_elements(SnippetUI::TextProperty *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16);
}

uint64_t SnippetUI::TextProperty::clear_focus_action(SnippetUI::TextProperty *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::TextProperty::clear_selected_action(SnippetUI::TextProperty *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

SnippetUI::TextProperty *SnippetUI::TextProperty::TextProperty(SnippetUI::TextProperty *this, const SnippetUI::TextProperty *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::ActionProperty *v6;
  SnippetUI::ActionProperty *v7;

  *(_QWORD *)this = &off_1E7934240;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::TextProperty *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 15) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 == (const SnippetUI::TextProperty *)&SnippetUI::_TextProperty_default_instance_)
  {
    v7 = 0;
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 5))
    {
      v6 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v6, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v6 = 0;
    }
    *((_QWORD *)this + 5) = v6;
    if (*((_QWORD *)a2 + 6))
    {
      v7 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v7, *((const SnippetUI::ActionProperty **)a2 + 6));
    }
    else
    {
      v7 = 0;
    }
  }
  *((_QWORD *)this + 6) = v7;
  *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
  return this;
}

void sub_1BFAD0EFC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C40B18DE219);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::TextProperty::InternalSwap(SnippetUI::TextProperty *this, SnippetUI::TextProperty *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;

  v4 = (SnippetUI::TextProperty *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::TextProperty *)((char *)this + 16), (SnippetUI::TextProperty *)((char *)a2 + 16));
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 57);
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a2 + 57) = v8;
}

void SnippetUI::MultilineTextProperty_Line::clear_text_elements(SnippetUI::MultilineTextProperty_Line *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16);
}

SnippetUI::MultilineTextProperty_Line *SnippetUI::MultilineTextProperty_Line::MultilineTextProperty_Line(SnippetUI::MultilineTextProperty_Line *this, const SnippetUI::MultilineTextProperty_Line *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7934300;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::MultilineTextProperty_Line *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 10) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  return this;
}

void sub_1BFAD10B4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::MultilineTextProperty_Line::InternalSwap(SnippetUI::MultilineTextProperty_Line *this, SnippetUI::MultilineTextProperty_Line *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  google::protobuf::UnknownFieldSet *v7;

  v4 = (SnippetUI::MultilineTextProperty_Line *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v7;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::MultilineTextProperty_Line *)((char *)this + 16), (SnippetUI::MultilineTextProperty_Line *)((char *)a2 + 16));
}

void SnippetUI::MultilineTextProperty::InitAsDefaultInstance(SnippetUI::MultilineTextProperty *this)
{
  qword_1ED1D55B0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D55B8 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::MultilineTextProperty::_Internal::focus_action(SnippetUI::MultilineTextProperty::_Internal *this, const SnippetUI::MultilineTextProperty *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::MultilineTextProperty::_Internal::selected_action(SnippetUI::MultilineTextProperty::_Internal *this, const SnippetUI::MultilineTextProperty *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::MultilineTextProperty::clear_focus_action(SnippetUI::MultilineTextProperty *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::MultilineTextProperty::clear_selected_action(SnippetUI::MultilineTextProperty *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

SnippetUI::MultilineTextProperty *SnippetUI::MultilineTextProperty::MultilineTextProperty(SnippetUI::MultilineTextProperty *this, const SnippetUI::MultilineTextProperty *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::ActionProperty *v6;
  SnippetUI::ActionProperty *v7;

  *(_QWORD *)this = &off_1E79343C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::MultilineTextProperty *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::MultilineTextProperty_Line>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 15) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 == (const SnippetUI::MultilineTextProperty *)&SnippetUI::_MultilineTextProperty_default_instance_)
  {
    v7 = 0;
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 5))
    {
      v6 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v6, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v6 = 0;
    }
    *((_QWORD *)this + 5) = v6;
    if (*((_QWORD *)a2 + 6))
    {
      v7 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v7, *((const SnippetUI::ActionProperty **)a2 + 6));
    }
    else
    {
      v7 = 0;
    }
  }
  *((_QWORD *)this + 6) = v7;
  *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
  return this;
}

void sub_1BFAD1364(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C40B18DE219);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::MultilineTextProperty::InternalSwap(SnippetUI::MultilineTextProperty *this, SnippetUI::MultilineTextProperty *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;

  v4 = (SnippetUI::MultilineTextProperty *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::MultilineTextProperty *)((char *)this + 16), (SnippetUI::MultilineTextProperty *)((char *)a2 + 16));
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 57);
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a2 + 57) = v8;
}

void siri::dialogengine::ExecuteMultiLevelResultSet::~ExecuteMultiLevelResultSet(siri::dialogengine::ExecuteMultiLevelResultSet *this)
{
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
  JUMPOUT(0x1C3B8D890);
}

void siri::dialogengine::ExecuteMultiLevelResultSet::Execute(siri::dialogengine **this@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  siri::dialogengine::VariableObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD **v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _BOOL4 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  double NumberParameter;
  _BOOL4 BooleanParameter;
  _BOOL4 v50;
  _BOOL4 v51;
  int v52;
  int v53;
  uint64_t v54;
  siri::dialogengine::VariableObject *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  BOOL v66;
  int v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  const void **v120;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145[2];
  uint64_t v146[2];
  uint64_t v147[2];
  uint64_t v148[2];
  uint64_t v149[2];
  uint64_t v150[2];
  uint64_t v151[2];
  uint64_t v152[2];
  uint64_t v153[2];
  uint64_t v154[2];
  uint64_t v155[2];
  uint64_t v156[2];
  uint64_t v157[2];
  uint64_t v158[2];
  void *__p[2];
  char v160;
  void *v161[2];
  char v162;
  std::string v163;
  void *v164;
  std::__shared_weak_count *v165;
  uint64_t v166[2];
  _QWORD **v167;
  _QWORD *v168;
  char v169;
  siri::dialogengine::VariableObject *v170;
  uint64_t v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  char **v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  std::__shared_weak_count *v178;

  std::string::basic_string[abi:ne180100]<0>(&v174, "multiLevelResultSetData");
  siri::dialogengine::ExecutePatternBase::GetArrayParameter((uint64_t)this, (const void **)&v174, &v177);
  if (SHIBYTE(v176) < 0)
    operator delete(v174);
  if (v177)
  {
    v142 = a2;
    v5 = *(_QWORD *)(v177 + 80) - *(_QWORD *)(v177 + 72);
    if (v5)
    {
      v6 = 0;
      v7 = v5 >> 4;
      v143 = (v5 >> 4) - 1;
      while (1)
      {
        v8 = *(_QWORD *)(v177 + 72);
        if (v6 >= (*(_QWORD *)(v177 + 80) - v8) >> 4)
          break;
        v9 = *(_OWORD *)(v8 + 16 * v6);
        v10 = *(std::__shared_weak_count **)(v8 + 16 * v6 + 8);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        if (!(_QWORD)v9)
          goto LABEL_17;
        v144 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
        if (!v13)
        {
          *((_QWORD *)&v9 + 1) = v144;
LABEL_17:
          v172 = 0;
          v173 = 0;
          v10 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
          if (!*((_QWORD *)&v9 + 1))
            goto LABEL_47;
          goto LABEL_18;
        }
        v14 = (uint64_t)v13;
        v172 = (uint64_t)v13;
        v173 = v144;
        if (!v10)
          goto LABEL_23;
        v15 = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
LABEL_18:
        v17 = (unint64_t *)&v10->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        v14 = v172;
        if (v172)
        {
LABEL_23:
          _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine14VariableObjectENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v170);
          v175 = 0;
          v176 = 0;
          v174 = &v175;
          std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v167, (const void ***)(v14 + 72));
          v19 = v167;
          if (v167 != &v168)
          {
            do
            {
              v20 = v170;
              v21 = (std::__shared_weak_count *)v19[8];
              v166[0] = v19[7];
              v166[1] = (uint64_t)v21;
              if (v21)
              {
                v22 = (unint64_t *)&v21->__shared_owners_;
                do
                  v23 = __ldxr(v22);
                while (__stxr(v23 + 1, v22));
              }
              siri::dialogengine::VariableObject::AddProperty((uint64_t)v20, v166);
              if (v21)
              {
                v24 = (unint64_t *)&v21->__shared_owners_;
                do
                  v25 = __ldaxr(v24);
                while (__stlxr(v25 - 1, v24));
                if (!v25)
                {
                  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                  std::__shared_weak_count::__release_weak(v21);
                }
              }
              v26 = (_QWORD *)v19[1];
              if (v26)
              {
                do
                {
                  v27 = (_QWORD **)v26;
                  v26 = (_QWORD *)*v26;
                }
                while (v26);
              }
              else
              {
                do
                {
                  v27 = (_QWORD **)v19[2];
                  v114 = *v27 == v19;
                  v19 = v27;
                }
                while (!v114);
              }
              v19 = v27;
            }
            while (v27 != &v168);
            v14 = v172;
          }
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v168);
          std::string::basic_string[abi:ne180100]<0>(&v167, "items");
          v28 = std::__tree<std::string>::find<std::string>(v14 + 72, (const void **)&v167);
          if (v14 + 80 == v28)
          {
            v33 = 1;
          }
          else
          {
            v29 = *(_QWORD *)(v28 + 56);
            v30 = *(std::__shared_weak_count **)(v28 + 64);
            if (v30)
            {
              v31 = (unint64_t *)&v30->__shared_owners_;
              do
                v32 = __ldxr(v31);
              while (__stxr(v32 + 1, v31));
              v33 = v29 == 0;
              do
                v34 = __ldaxr(v31);
              while (__stlxr(v34 - 1, v31));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            else
            {
              v33 = v29 == 0;
            }
          }
          if (v169 < 0)
          {
            operator delete(v167);
            if (!v33)
              goto LABEL_56;
          }
          else if (!v33)
          {
            goto LABEL_56;
          }
          std::string::basic_string[abi:ne180100]<0>(&v167, "items");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v174, &v167, (uint64_t)&v167);
          if (v169 < 0)
            operator delete(v167);
LABEL_56:
          std::string::basic_string[abi:ne180100]<0>(&v167, "multiLevelResultSetData");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v174, &v167, (uint64_t)&v167);
          if (v169 < 0)
            operator delete(v167);
          std::string::basic_string[abi:ne180100]<0>(&v167, "items");
          v35 = v172;
          if (!v172
            || (v36 = std::__tree<std::string>::find<std::string>(v172 + 72, (const void **)&v167), v35 + 80 == v36))
          {
            v164 = 0;
            v165 = 0;
          }
          else
          {
            v37 = v36;
            v38 = *(const void **)(v36 + 56);
            v39 = *(std::__shared_weak_count **)(v37 + 64);
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            if (v38
            {
              v164 = v42;
              v165 = v39;
              if (v39)
              {
                v43 = (unint64_t *)&v39->__shared_owners_;
                do
                  v44 = __ldxr(v43);
                while (__stxr(v44 + 1, v43));
                goto LABEL_71;
              }
            }
            else
            {
              v164 = 0;
              v165 = 0;
              if (v39)
              {
LABEL_71:
                v45 = (unint64_t *)&v39->__shared_owners_;
                do
                  v46 = __ldaxr(v45);
                while (__stlxr(v46 - 1, v45));
                if (!v46)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
            }
          }
          if (v169 < 0)
            operator delete(v167);
          std::string::basic_string[abi:ne180100]<0>(&v167, "windowSize");
          v47 = v172;
          NumberParameter = GetNumberParameter(v172, (const void **)&v167);
          if (v169 < 0)
            operator delete(v167);
          std::string::basic_string[abi:ne180100]<0>(&v167, "isFirstWindow");
          BooleanParameter = GetBooleanParameter(v47, (const void **)&v167);
          if (v169 < 0)
            operator delete(v167);
          std::string::basic_string[abi:ne180100]<0>(&v167, "isLastWindow");
          v50 = GetBooleanParameter(v47, (const void **)&v167);
          if (v169 < 0)
            operator delete(v167);
          std::string::basic_string[abi:ne180100]<0>(&v167, "isConclusion");
          v51 = GetBooleanParameter(v47, (const void **)&v167);
          if (v169 < 0)
            operator delete(v167);
          std::string::basic_string[abi:ne180100]<0>(&v167, "level");
          v52 = (int)GetNumberParameter(v47, (const void **)&v167);
          if (v52 <= 1)
            v53 = 1;
          else
            v53 = v52;
          if (v169 < 0)
            operator delete(v167);
          std::string::basic_string[abi:ne180100]<0>(v161, "promptType");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          siri::dialogengine::ExecutePatternBase::GetStringParameter((uint64_t)this, (const void **)v161, (char *)__p, &v163);
          siri::dialogengine::StringToUpper((uint64_t)&v163, (uint64_t)&v167);
          if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v163.__r_.__value_.__l.__data_);
          if (v160 < 0)
            operator delete(__p[0]);
          if ((v162 & 0x80000000) == 0)
          {
            if (!v6)
              goto LABEL_98;
            goto LABEL_100;
          }
          operator delete(v161[0]);
          if (v6)
            goto LABEL_100;
LABEL_98:
          if (siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup(this, v54, v55)
            && (std::string::basic_string[abi:ne180100]<0>(&v163, "Sash"),
                siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163),
                SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0))
          {
            operator delete(v163.__r_.__value_.__l.__data_);
            if (!v51)
              goto LABEL_121;
LABEL_101:
            std::string::basic_string[abi:ne180100]<0>(&v163, "Conclusion");
            v56 = (std::__shared_weak_count *)v171;
            v158[0] = (uint64_t)v170;
            v158[1] = v171;
            if (v171)
            {
              v57 = (unint64_t *)(v171 + 8);
              do
                v58 = __ldxr(v57);
              while (__stxr(v58 + 1, v57));
            }
            siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v158, &v174);
            if (v56)
            {
              v59 = (unint64_t *)&v56->__shared_owners_;
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v163.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v163, "Prompt");
            v61 = (std::__shared_weak_count *)v171;
            v157[0] = (uint64_t)v170;
            v157[1] = v171;
            if (v171)
            {
              v62 = (unint64_t *)(v171 + 8);
              do
                v63 = __ldxr(v62);
              while (__stxr(v63 + 1, v62));
            }
            siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v157, &v174);
            if (v61)
            {
              v64 = (unint64_t *)&v61->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
LABEL_117:
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
LABEL_285:
            if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v163.__r_.__value_.__l.__data_);
LABEL_287:
            if ((v169 & 0x80000000) == 0)
              goto LABEL_290;
            v120 = (const void **)v167;
          }
          else
          {
LABEL_100:
            if (v51)
              goto LABEL_101;
LABEL_121:
            if (v6)
              v66 = 0;
            else
              v66 = v52 <= 1;
            v67 = !v66;
            if (NumberParameter < 1.0)
            {
              if ((v67 & 1) == 0)
              {
                std::string::basic_string[abi:ne180100]<0>(&v163, "Intro");
                v68 = (std::__shared_weak_count *)v171;
                v156[0] = (uint64_t)v170;
                v156[1] = v171;
                if (v171)
                {
                  v69 = (unint64_t *)(v171 + 8);
                  do
                    v70 = __ldxr(v69);
                  while (__stxr(v70 + 1, v69));
                }
                siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v156, &v174);
                if (v68)
                {
                  v71 = (unint64_t *)&v68->__shared_owners_;
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                    std::__shared_weak_count::__release_weak(v68);
                  }
                }
                if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v163.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(v161, "Item");
              BuildGroupName(&v163, (uint64_t)v161, v53);
              v73 = (std::__shared_weak_count *)v171;
              v155[0] = (uint64_t)v170;
              v155[1] = v171;
              if (v171)
              {
                v74 = (unint64_t *)(v171 + 8);
                do
                  v75 = __ldxr(v74);
                while (__stxr(v75 + 1, v74));
              }
              siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v155, &v174);
              if (v73)
              {
                v76 = (unint64_t *)&v73->__shared_owners_;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
              }
              if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v163.__r_.__value_.__l.__data_);
              if (v162 < 0)
                operator delete(v161[0]);
              std::string::basic_string[abi:ne180100]<0>(v161, "Reference");
              BuildGroupName(&v163, (uint64_t)v161, v53);
              v78 = (std::__shared_weak_count *)v171;
              v154[0] = (uint64_t)v170;
              v154[1] = v171;
              if (v171)
              {
                v79 = (unint64_t *)(v171 + 8);
                do
                  v80 = __ldxr(v79);
                while (__stxr(v80 + 1, v79));
              }
              siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v154, &v174);
              if (v78)
              {
                v81 = (unint64_t *)&v78->__shared_owners_;
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 - 1, v81));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v163.__r_.__value_.__l.__data_);
              if (v162 < 0)
                operator delete(v161[0]);
              if (v52 <= 1 && v6 == v143)
              {
                std::string::basic_string[abi:ne180100]<0>(&v163, "Conclusion");
                v83 = (std::__shared_weak_count *)v171;
                v153[0] = (uint64_t)v170;
                v153[1] = v171;
                if (v171)
                {
                  v84 = (unint64_t *)(v171 + 8);
                  do
                    v85 = __ldxr(v84);
                  while (__stxr(v85 + 1, v84));
                }
                siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v153, &v174);
                if (v83)
                {
                  v86 = (unint64_t *)&v83->__shared_owners_;
                  do
                    v87 = __ldaxr(v86);
                  while (__stlxr(v87 - 1, v86));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                    std::__shared_weak_count::__release_weak(v83);
                  }
                }
                if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v163.__r_.__value_.__l.__data_);
                std::string::basic_string[abi:ne180100]<0>(&v163, "Prompt");
                v61 = (std::__shared_weak_count *)v171;
                v152[0] = (uint64_t)v170;
                v152[1] = v171;
                if (v171)
                {
                  v88 = (unint64_t *)(v171 + 8);
                  do
                    v89 = __ldxr(v88);
                  while (__stxr(v89 + 1, v88));
                }
                siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v152, &v174);
                if (v61)
                {
                  v90 = (unint64_t *)&v61->__shared_owners_;
                  do
                    v65 = __ldaxr(v90);
                  while (__stlxr(v65 - 1, v90));
                  goto LABEL_117;
                }
                goto LABEL_285;
              }
              goto LABEL_287;
            }
            if (((v67 | !BooleanParameter) & 1) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&v163, "Intro");
              v91 = (std::__shared_weak_count *)v171;
              v151[0] = (uint64_t)v170;
              v151[1] = v171;
              if (v171)
              {
                v92 = (unint64_t *)(v171 + 8);
                do
                  v93 = __ldxr(v92);
                while (__stxr(v93 + 1, v92));
              }
              siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v151, &v174);
              if (v91)
              {
                v94 = (unint64_t *)&v91->__shared_owners_;
                do
                  v95 = __ldaxr(v94);
                while (__stlxr(v95 - 1, v94));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                  std::__shared_weak_count::__release_weak(v91);
                }
              }
              if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v163.__r_.__value_.__l.__data_);
            }
            if (!v164 || ((*(uint64_t (**)(void *))(*(_QWORD *)v164 + 32))(v164) & 1) != 0)
              goto LABEL_231;
            if (!BooleanParameter || !v50)
            {
              std::string::basic_string[abi:ne180100]<0>(v161, "WindowIntro");
              BuildGroupName(&v163, (uint64_t)v161, v53);
              v96 = (std::__shared_weak_count *)v171;
              v150[0] = (uint64_t)v170;
              v150[1] = v171;
              if (v171)
              {
                v97 = (unint64_t *)(v171 + 8);
                do
                  v98 = __ldxr(v97);
                while (__stxr(v98 + 1, v97));
              }
              siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v150, &v174);
              if (v96)
              {
                v99 = (unint64_t *)&v96->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                  std::__shared_weak_count::__release_weak(v96);
                }
              }
              if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v163.__r_.__value_.__l.__data_);
              if (v162 < 0)
                operator delete(v161[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(v161, "Item");
            BuildGroupName(&v163, (uint64_t)v161, v53);
            v101 = (std::__shared_weak_count *)v171;
            v149[0] = (uint64_t)v170;
            v149[1] = v171;
            if (v171)
            {
              v102 = (unint64_t *)(v171 + 8);
              do
                v103 = __ldxr(v102);
              while (__stxr(v103 + 1, v102));
            }
            siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v149, &v174);
            if (v101)
            {
              v104 = (unint64_t *)&v101->__shared_owners_;
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                std::__shared_weak_count::__release_weak(v101);
              }
            }
            if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v163.__r_.__value_.__l.__data_);
            if (v162 < 0)
              operator delete(v161[0]);
            std::string::basic_string[abi:ne180100]<0>(v161, "Reference");
            BuildGroupName(&v163, (uint64_t)v161, v53);
            v106 = (std::__shared_weak_count *)v171;
            v148[0] = (uint64_t)v170;
            v148[1] = v171;
            if (v171)
            {
              v107 = (unint64_t *)(v171 + 8);
              do
                v108 = __ldxr(v107);
              while (__stxr(v108 + 1, v107));
            }
            siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v148, &v174);
            if (v106)
            {
              v109 = (unint64_t *)&v106->__shared_owners_;
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v163.__r_.__value_.__l.__data_);
            if ((v162 & 0x80000000) == 0)
            {
LABEL_231:
              if (v50)
                goto LABEL_232;
              goto LABEL_244;
            }
            operator delete(v161[0]);
            if (!v50)
              goto LABEL_244;
LABEL_232:
            if (v169 < 0)
            {
              if (v168 != (_QWORD *)12)
                goto LABEL_244;
              v111 = (uint64_t *)v167;
            }
            else
            {
              if (v169 != 12)
                goto LABEL_244;
              v111 = (uint64_t *)&v167;
            }
            v112 = *v111;
            v113 = *((unsigned int *)v111 + 2);
            v114 = v112 == 0x41554E49544E4F43 && v113 == 1313818964;
            if (!v114)
            {
LABEL_244:
              std::string::basic_string[abi:ne180100]<0>(v161, "WindowPrompt");
              BuildGroupName(&v163, (uint64_t)v161, v53);
              v115 = (std::__shared_weak_count *)v171;
              v147[0] = (uint64_t)v170;
              v147[1] = v171;
              if (v171)
              {
                v116 = (unint64_t *)(v171 + 8);
                do
                  v117 = __ldxr(v116);
                while (__stxr(v117 + 1, v116));
              }
              siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v147, &v174);
              if (v115)
              {
                v118 = (unint64_t *)&v115->__shared_owners_;
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 - 1, v118));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
              }
              if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v163.__r_.__value_.__l.__data_);
              if (v162 < 0)
                operator delete(v161[0]);
            }
            if (v52 > 1 || v6 != v143 || !v50)
              goto LABEL_287;
            if ((v169 & 0x80000000) == 0)
            {
              if (v169 == 12)
              {
                v120 = (const void **)&v167;
                goto LABEL_263;
              }
LABEL_290:
              v130 = v165;
              if (v165)
              {
                v131 = (unint64_t *)&v165->__shared_owners_;
                do
                  v132 = __ldaxr(v131);
                while (__stlxr(v132 - 1, v131));
                if (!v132)
                {
                  ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                  std::__shared_weak_count::__release_weak(v130);
                }
              }
              std::__tree<std::string>::destroy(v175);
              v133 = (std::__shared_weak_count *)v171;
              if (v171)
              {
                v134 = (unint64_t *)(v171 + 8);
                do
                  v135 = __ldaxr(v134);
                while (__stlxr(v135 - 1, v134));
                if (!v135)
                {
                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                  std::__shared_weak_count::__release_weak(v133);
                }
              }
              goto LABEL_300;
            }
            v120 = (const void **)v167;
            if (v168 == (_QWORD *)12)
            {
LABEL_263:
              if (*v120 == (const void *)0x41554E49544E4F43 && *((_DWORD *)v120 + 2) == 1313818964)
              {
                std::string::basic_string[abi:ne180100]<0>(&v163, "Conclusion");
                v122 = (std::__shared_weak_count *)v171;
                v146[0] = (uint64_t)v170;
                v146[1] = v171;
                if (v171)
                {
                  v123 = (unint64_t *)(v171 + 8);
                  do
                    v124 = __ldxr(v123);
                  while (__stxr(v124 + 1, v123));
                }
                siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v146, &v174);
                if (v122)
                {
                  v125 = (unint64_t *)&v122->__shared_owners_;
                  do
                    v126 = __ldaxr(v125);
                  while (__stlxr(v126 - 1, v125));
                  if (!v126)
                  {
                    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                    std::__shared_weak_count::__release_weak(v122);
                  }
                }
                if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v163.__r_.__value_.__l.__data_);
                std::string::basic_string[abi:ne180100]<0>(&v163, "Prompt");
                v61 = (std::__shared_weak_count *)v171;
                v145[0] = (uint64_t)v170;
                v145[1] = v171;
                if (v171)
                {
                  v127 = (unint64_t *)(v171 + 8);
                  do
                    v128 = __ldxr(v127);
                  while (__stxr(v128 + 1, v127));
                }
                siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v163, v145, &v174);
                if (v61)
                {
                  v129 = (unint64_t *)&v61->__shared_owners_;
                  do
                    v65 = __ldaxr(v129);
                  while (__stlxr(v65 - 1, v129));
                  goto LABEL_117;
                }
                goto LABEL_285;
              }
              goto LABEL_287;
            }
          }
          operator delete(v120);
          goto LABEL_290;
        }
LABEL_47:
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Element %zul of the multiLevelResultSetData array is not a VariableObject", v4, v6, v142);
LABEL_300:
        v136 = v173;
        if (v173)
        {
          v137 = (unint64_t *)&v173->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        if (++v6 == v7)
          goto LABEL_306;
      }
      *((_QWORD *)&v9 + 1) = 0;
      goto LABEL_17;
    }
LABEL_306:
    siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, v142);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Parameter 'multiLevelResultSetData' either does not exist or is not an array", v4);
    siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
  }
  v139 = v178;
  if (v178)
  {
    v140 = (unint64_t *)&v178->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
}

void sub_1BFAD2524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (*(char *)(v54 - 233) < 0)
    operator delete(*(void **)(v54 - 256));
  if (*(char *)(v54 - 177) < 0)
    operator delete(*(void **)(v54 - 200));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v54 - 232);
  std::__tree<std::string>::destroy(*(char **)(v54 - 136));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v54 - 176);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v54 - 160);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v54 - 120);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t v8;

  result = std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    v6 = (uint64_t **)result;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a3;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return std::__tree<std::string>::__insert_node_at(a1, v8, v6, (uint64_t *)v7);
  }
  return result;
}

double GetNumberParameter(uint64_t a1, const void **a2)
{
  double v2;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double *v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = 0.0;
  if (!a1)
    return v2;
  v4 = std::__tree<std::string>::find<std::string>(a1 + 72, a2);
  if (a1 + 80 == v4)
    return v2;
  v5 = v4;
  v6 = *(const void **)(v4 + 56);
  v7 = *(std::__shared_weak_count **)(v5 + 64);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
  {
    v10 = 0;
    if (!v7)
      goto LABEL_14;
LABEL_10:
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    goto LABEL_14;
  }
  if (v7)
    goto LABEL_10;
LABEL_14:
  if (v10)
    return v10[9];
  return v2;
}

BOOL GetBooleanParameter(_BOOL8 result, const void **a2)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BYTE *v9;
  unint64_t *v10;
  unint64_t v11;

  if (result)
  {
    v2 = result;
    v3 = std::__tree<std::string>::find<std::string>(result + 72, a2);
    if (v2 + 80 != v3)
    {
      v4 = v3;
      v5 = *(const void **)(v3 + 56);
      v6 = *(std::__shared_weak_count **)(v4 + 64);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      if (v5)
      {
        if (!v6)
          goto LABEL_13;
      }
      else
      {
        v9 = 0;
        if (!v6)
          goto LABEL_13;
      }
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (v11)
      {
LABEL_13:
        if (v9)
          return v9[66] != 0;
        return 0;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v9)
        return v9[66] != 0;
    }
    return 0;
  }
  return result;
}

void BuildGroupName(std::string *a1, uint64_t a2, int __val)
{
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string v9;

  std::to_string(&v9, __val);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = (const std::string::value_type *)a2;
  else
    v6 = *(const std::string::value_type **)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::string::insert(&v9, 0, v6, v7);
  *a1 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1BFAD2A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::MeCard::Preload(siri::dialogengine::MeCard *this)
{
  _BYTE v1[8];
  void *v2;
  char v3;
  void *v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *__p;
  char v57;

  if (!siri::dialogengine::MeCard::Impl::sContactFetchedOnce)
  {
    siri::dialogengine::MeCard::Impl::sContactFetchedOnce = 1;
    bzero(v1, 0x2A8uLL);
    siri::dialogengine::MeCard::Impl::GetContact((siri::dialogengine::MeCard::Impl *)v1);
    if (v57 < 0)
      operator delete(__p);
    if (v55 < 0)
      operator delete(v54);
    if (v53 < 0)
      operator delete(v52);
    if (v51 < 0)
      operator delete(v50);
    if (v49 < 0)
      operator delete(v48);
    if (v47 < 0)
      operator delete(v46);
    if (v45 < 0)
      operator delete(v44);
    if (v43 < 0)
      operator delete(v42);
    if (v41 < 0)
      operator delete(v40);
    if (v39 < 0)
      operator delete(v38);
    if (v37 < 0)
      operator delete(v36);
    if (v35 < 0)
      operator delete(v34);
    if (v33 < 0)
      operator delete(v32);
    if (v31 < 0)
      operator delete(v30);
    if (v29 < 0)
      operator delete(v28);
    if (v27 < 0)
      operator delete(v26);
    if (v25 < 0)
      operator delete(v24);
    if (v23 < 0)
      operator delete(v22);
    if (v21 < 0)
      operator delete(v20);
    if (v19 < 0)
      operator delete(v18);
    if (v17 < 0)
      operator delete(v16);
    if (v15 < 0)
      operator delete(v14);
    if (v13 < 0)
      operator delete(v12);
    if (v11 < 0)
      operator delete(v10);
    if (v9 < 0)
      operator delete(v8);
    if (v7 < 0)
      operator delete(v6);
    if (v5 < 0)
      operator delete(v4);
    if (v3 < 0)
      operator delete(v2);
  }
}

void sub_1BFAD2C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  siri::dialogengine::MeCard::Impl::~Impl((void **)va);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::MeCard::Impl::GetContact(siri::dialogengine::MeCard::Impl *this)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v17;
  void *v18;
  void *v19[2];
  char v20;
  std::string __str;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string __p;
  id v28;
  _QWORD v29[9];

  v29[7] = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned __int8 *)this;
  if (!*(_BYTE *)this)
  {
    v3 = *MEMORY[0x1E0C96780];
    v29[0] = *MEMORY[0x1E0C966D0];
    v29[1] = v3;
    v4 = *MEMORY[0x1E0C967A0];
    v29[2] = *MEMORY[0x1E0C966C0];
    v29[3] = v4;
    v5 = *MEMORY[0x1E0C967E0];
    v29[4] = *MEMORY[0x1E0C967D8];
    v29[5] = v5;
    v29[6] = *MEMORY[0x1E0C967D0];
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 7);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_opt_new();
    v28 = 0;
    objc_msgSend(v6, "_crossPlatformUnifiedMeContactWithKeysToFetch:error:", v18, &v28);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v28;
    v17 = v8;
    if (!v7 || v8)
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 8), &__str);
      std::string::operator=((std::string *)((char *)this + 32), &v22);
      std::string::operator=((std::string *)((char *)this + 56), &v23);
      std::string::operator=((std::string *)((char *)this + 80), &v24);
      std::string::operator=((std::string *)((char *)this + 104), &v25);
      std::string::operator=((std::string *)((char *)this + 128), &v26);
      std::string::operator=((std::string *)((char *)this + 152), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 176), &__str);
      std::string::operator=((std::string *)((char *)this + 200), &v22);
      std::string::operator=((std::string *)((char *)this + 224), &v23);
      std::string::operator=((std::string *)((char *)this + 248), &v24);
      std::string::operator=((std::string *)((char *)this + 272), &v25);
      std::string::operator=((std::string *)((char *)this + 296), &v26);
      std::string::operator=((std::string *)((char *)this + 320), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 344), &__str);
      std::string::operator=((std::string *)((char *)this + 368), &v22);
      std::string::operator=((std::string *)((char *)this + 392), &v23);
      std::string::operator=((std::string *)((char *)this + 416), &v24);
      std::string::operator=((std::string *)((char *)this + 440), &v25);
      std::string::operator=((std::string *)((char *)this + 464), &v26);
      std::string::operator=((std::string *)((char *)this + 488), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 512), &__str);
      std::string::operator=((std::string *)((char *)this + 536), &v22);
      std::string::operator=((std::string *)((char *)this + 560), &v23);
      std::string::operator=((std::string *)((char *)this + 584), &v24);
      std::string::operator=((std::string *)((char *)this + 608), &v25);
      std::string::operator=((std::string *)((char *)this + 632), &v26);
      std::string::operator=((std::string *)((char *)this + 656), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);
      *(_BYTE *)this = 1;
    }
    else
    {
      objc_msgSend(v7, "givenName", 0);
      v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(v19, (char *)objc_msgSend(v9, "UTF8String"));
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 8), &__str);
      std::string::operator=((std::string *)((char *)this + 32), &v22);
      std::string::operator=((std::string *)((char *)this + 56), &v23);
      std::string::operator=((std::string *)((char *)this + 80), &v24);
      std::string::operator=((std::string *)((char *)this + 104), &v25);
      std::string::operator=((std::string *)((char *)this + 128), &v26);
      std::string::operator=((std::string *)((char *)this + 152), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);

      objc_msgSend(v7, "middleName");
      v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(v19, (char *)objc_msgSend(v10, "UTF8String"));
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 176), &__str);
      std::string::operator=((std::string *)((char *)this + 200), &v22);
      std::string::operator=((std::string *)((char *)this + 224), &v23);
      std::string::operator=((std::string *)((char *)this + 248), &v24);
      std::string::operator=((std::string *)((char *)this + 272), &v25);
      std::string::operator=((std::string *)((char *)this + 296), &v26);
      std::string::operator=((std::string *)((char *)this + 320), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);

      objc_msgSend(v7, "familyName");
      v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(v19, (char *)objc_msgSend(v11, "UTF8String"));
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 344), &__str);
      std::string::operator=((std::string *)((char *)this + 368), &v22);
      std::string::operator=((std::string *)((char *)this + 392), &v23);
      std::string::operator=((std::string *)((char *)this + 416), &v24);
      std::string::operator=((std::string *)((char *)this + 440), &v25);
      std::string::operator=((std::string *)((char *)this + 464), &v26);
      std::string::operator=((std::string *)((char *)this + 488), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);

      objc_msgSend(v7, "nickname");
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(v19, (char *)objc_msgSend(v12, "UTF8String"));
      siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__str, (uint64_t)v19);
      std::string::operator=((std::string *)((char *)this + 512), &__str);
      std::string::operator=((std::string *)((char *)this + 536), &v22);
      std::string::operator=((std::string *)((char *)this + 560), &v23);
      std::string::operator=((std::string *)((char *)this + 584), &v24);
      std::string::operator=((std::string *)((char *)this + 608), &v25);
      std::string::operator=((std::string *)((char *)this + 632), &v26);
      std::string::operator=((std::string *)((char *)this + 656), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);

      objc_msgSend(v7, "phoneticGivenName");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "phoneticMiddleName");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "phoneticFamilyName");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v13, "length"))
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(objc_retainAutorelease(v13), "UTF8String"));
        std::string::operator=((std::string *)((char *)this + 32), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (objc_msgSend(v14, "length"))
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(objc_retainAutorelease(v14), "UTF8String"));
        std::string::operator=((std::string *)((char *)this + 200), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (objc_msgSend(v15, "length"))
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(objc_retainAutorelease(v15), "UTF8String"));
        std::string::operator=((std::string *)((char *)this + 368), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      *(_BYTE *)this = 1;

    }
  }
  return v1 != 0;
}

void sub_1BFAD374C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void siri::dialogengine::MeCard::Impl::~Impl(void **this)
{
  siri::dialogengine::SpeakableString::~SpeakableString(this + 64);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 43);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 22);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
}

void siri::dialogengine::MeCard::FormatFullName(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  void *v8;
  void *v9;
  std::string *p_str;
  void *v11;
  void *v12;
  std::string *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t *v17;
  void *v18;
  void *v19;
  id v20;
  std::string::size_type size;
  _OWORD *v22;
  _OWORD *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  int v27;
  char *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  _BOOL4 v32;
  void *v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string v46;
  std::string v47;
  void *v48;
  std::string::size_type v49;
  unsigned __int8 v50;
  std::string __p;
  std::string __str;

  *(_QWORD *)(a4 + 160) = 0;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  v8 = (void *)objc_opt_new();
  v9 = (void *)MEMORY[0x1E0CB3940];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __str = *(std::string *)a1;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  objc_msgSend(v9, "stringWithUTF8String:", p_str);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setGivenName:", v11);

  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v12 = (void *)MEMORY[0x1E0CB3940];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __str = *(std::string *)a2;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &__str;
  else
    v13 = (std::string *)__str.__r_.__value_.__r.__words[0];
  objc_msgSend(v12, "stringWithUTF8String:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setFamilyName:", v14);

  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v15 = (void *)objc_opt_new();
  v16 = objc_alloc(MEMORY[0x1E0C99DC8]);
  if (*((char *)a3 + 23) >= 0)
    v17 = a3;
  else
    v17 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)objc_msgSend(v16, "initWithLocaleIdentifier:", v18);
  objc_msgSend(v15, "setLocale:", v19);

  objc_msgSend(v15, "setStyle:", 0);
  objc_msgSend(v15, "stringFromPersonNameComponents:", v8);
  v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v20, "UTF8String"));
  std::string::operator=((std::string *)a4, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __str = *(std::string *)a4;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!size)
      goto LABEL_139;
  }
  else if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
  {
    goto LABEL_139;
  }
  v22 = (_OWORD *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v22;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v24 = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v24)
      goto LABEL_34;
LABEL_37:
    if (*(char *)(a2 + 47) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
    else
      __str = *(std::string *)(a2 + 24);
    goto LABEL_92;
  }
  if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
    goto LABEL_37;
LABEL_34:
  v23 = (_OWORD *)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v23;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v26 = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v26)
    {
LABEL_42:
      siri::dialogengine::GetLocaleLanguage(&__p);
      siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__str.__r_.__value_.__l.__size_ != 2)
          goto LABEL_53;
        v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 2)
          goto LABEL_53;
        v25 = &__str;
      }
      if (LOWORD(v25->__r_.__value_.__l.__data_) == 26740)
      {
        v27 = 1;
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_55:
          if (v27)
            v28 = " ";
          else
            v28 = "";
          std::string::basic_string[abi:ne180100]<0>(&v48, v28);
          if (*(char *)(a4 + 23) < 0)
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
          else
            __str = *(std::string *)a4;
          if (*(char *)(a1 + 23) < 0)
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
          else
            __p = *(std::string *)a1;
          if (*(char *)(a2 + 23) < 0)
            std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
          else
            v47 = *(std::string *)a2;
          v29 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v29 = __str.__r_.__value_.__l.__size_;
          if (!v29)
            goto LABEL_78;
          v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v30 = __p.__r_.__value_.__l.__size_;
          if (!v30)
            goto LABEL_78;
          v31 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
          if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v31 = v47.__r_.__value_.__l.__size_;
          if (v31 && siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)&v47))
            v32 = siri::dialogengine::StringEndsWith(&__str, (unsigned __int8 *)&__p);
          else
LABEL_78:
            v32 = 0;
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v47.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__str.__r_.__value_.__l.__data_);
            if (v32)
              goto LABEL_85;
          }
          else if (v32)
          {
LABEL_85:
            if (*(char *)(a2 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
            }
            else
            {
              *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *v23;
              v47.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
            }
            if ((v50 & 0x80u) == 0)
              v34 = (const std::string::value_type *)&v48;
            else
              v34 = (const std::string::value_type *)v48;
            if ((v50 & 0x80u) == 0)
              v35 = v50;
            else
              v35 = v49;
            v36 = std::string::append(&v47, v34, v35);
            v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
            v36->__r_.__value_.__l.__size_ = 0;
            v36->__r_.__value_.__r.__words[2] = 0;
            v36->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(a1 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
            }
            else
            {
              *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *v22;
              v46.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
            }
            if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = &v46;
            else
              v42 = (std::string *)v46.__r_.__value_.__r.__words[0];
            if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
            else
              v43 = v46.__r_.__value_.__l.__size_;
            goto LABEL_128;
          }
          if (*(char *)(a1 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
          }
          else
          {
            *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *v22;
            v47.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
          }
          if ((v50 & 0x80u) == 0)
            v38 = (const std::string::value_type *)&v48;
          else
            v38 = (const std::string::value_type *)v48;
          if ((v50 & 0x80u) == 0)
            v39 = v50;
          else
            v39 = v49;
          v40 = std::string::append(&v47, v38, v39);
          v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(a2 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
          }
          else
          {
            *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *v23;
            v46.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
          }
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v42 = &v46;
          else
            v42 = (std::string *)v46.__r_.__value_.__r.__words[0];
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
          else
            v43 = v46.__r_.__value_.__l.__size_;
LABEL_128:
          v44 = std::string::append(&__p, (const std::string::value_type *)v42, v43);
          v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          std::string::operator=((std::string *)(a4 + 24), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v47.__r_.__value_.__l.__data_);
          if ((char)v50 < 0)
          {
            v33 = v48;
            goto LABEL_138;
          }
          goto LABEL_139;
        }
LABEL_54:
        operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_55;
      }
LABEL_53:
      v27 = siri::dialogengine::IsNonWhitespaceLocale() ^ 1;
      if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_55;
      goto LABEL_54;
    }
  }
  else if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
  {
    goto LABEL_42;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v22;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
  }
LABEL_92:
  std::string::operator=((std::string *)(a4 + 24), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v33 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_138:
    operator delete(v33);
  }
LABEL_139:

}

void sub_1BFAD4078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  void **v41;
  void *v42;
  void *v43;

  if (a33 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);

  siri::dialogengine::SpeakableString::~SpeakableString(v41);
  _Unwind_Resume(a1);
}

siri::dialogengine::MeCard *siri::dialogengine::MeCard::MeCard(siri::dialogengine::MeCard *this)
{
  void *v2;

  v2 = (void *)operator new();
  bzero(v2, 0x2A8uLL);
  *(_QWORD *)this = v2;
  return this;
}

{
  void *v2;

  v2 = (void *)operator new();
  bzero(v2, 0x2A8uLL);
  *(_QWORD *)this = v2;
  return this;
}

void siri::dialogengine::MeCard::~MeCard(void ***this)
{
  void **v1;

  v1 = *this;
  if (*this)
  {
    siri::dialogengine::SpeakableString::~SpeakableString(v1 + 64);
    siri::dialogengine::SpeakableString::~SpeakableString(v1 + 43);
    siri::dialogengine::SpeakableString::~SpeakableString(v1 + 22);
    siri::dialogengine::SpeakableString::~SpeakableString(v1 + 1);
    MEMORY[0x1C3B8D890](v1, 0x1012C409FA91174);
  }
}

std::string *siri::dialogengine::MeCard::GetGivenName@<X0>(siri::dialogengine::MeCard::Impl **this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::MeCard::Impl::GetContact(*this);
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::MeCard::Impl *)((char *)*this + 8));
}

std::string *siri::dialogengine::MeCard::GetMiddleName@<X0>(siri::dialogengine::MeCard::Impl **this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::MeCard::Impl::GetContact(*this);
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::MeCard::Impl *)((char *)*this + 176));
}

std::string *siri::dialogengine::MeCard::GetFamilyName@<X0>(siri::dialogengine::MeCard::Impl **this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::MeCard::Impl::GetContact(*this);
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::MeCard::Impl *)((char *)*this + 344));
}

std::string *siri::dialogengine::MeCard::GetNickname@<X0>(siri::dialogengine::MeCard::Impl **this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine::MeCard::Impl::GetContact(*this);
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::MeCard::Impl *)((char *)*this + 512));
}

void siri::dialogengine::MeCard::GetGender(_QWORD *a1@<X8>)
{
  void *v3;
  unint64_t v4;
  char *v5;
  id v6;

  objc_msgSend(MEMORY[0x1E0CB3B68], "_currentGlobalUserInflection");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v6 = v3;
    v4 = objc_msgSend(v3, "gender") - 1;
    if (v4 >= 4)
      v5 = "";
    else
      v5 = off_1E7934570[v4];
    std::string::basic_string[abi:ne180100]<0>(a1, v5);

  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
}

void sub_1BFAD4468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void siri::dialogengine::GetDialogMetadata(uint64_t a1@<X0>, const std::string *a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  std::string *v4;
  _QWORD *v5;
  _BOOL4 v6;
  int v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  uint64_t v11;
  std::string *p_s1;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  __int128 v29;
  int64x2_t v30;
  char *v31;
  const std::string *NextSemanticValue;
  uint64_t v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::string *p_str;
  std::string *v37;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  char *v48;
  __int128 v49;
  int64x2_t v50;
  char *v51;
  uint64_t k;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string::size_type v61;
  uint64_t data;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;
  char *v82;
  __int128 v83;
  int64x2_t v84;
  _OWORD *v85;
  char *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t m;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  _QWORD *v106;
  char *v107;
  __int128 v108;
  int64x2_t v109;
  char *v110;
  uint64_t j;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t n;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  siri::dialogengine::DialogMetadata::File *v125;
  _QWORD *v126;
  std::string *i;
  std::string *v130;
  int64x2_t v132;
  _OWORD v133[2];
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  uint64_t v137;
  int64x2_t v138;
  char *v139;
  std::string __str;
  std::string v141;
  std::string __p;
  std::string v143;
  void *v144[2];
  char v145;
  siri::dialogengine::DialogMetadata::File *v146;
  std::string *v147;
  std::string *v148;
  std::string __s1;
  std::string v150;
  int64x2_t v151;
  char *v152;
  int64x2_t v153;
  char *v154;
  int64x2_t v155;
  char *v156;
  std::string v157;
  char *v158;
  char **v159;
  std::string v160;
  int64x2_t v161;
  _QWORD v162[3];
  int64x2_t v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  v155 = 0uLL;
  v156 = 0;
  v153 = 0uLL;
  v154 = 0;
  v151 = 0uLL;
  v152 = 0;
  memset(&v150, 0, sizeof(v150));
  siri::dialogengine::GetCanonicalLocale(a2, 0, &__s1);
  std::string::basic_string[abi:ne180100]<0>(&v157, "metadata");
  siri::dialogengine::JoinPath(a1, (uint64_t)&v157, (uint64_t)&v160);
  siri::dialogengine::ListDirRecursively((const char *)&v160, (uint64_t)&v147);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  siri::dialogengine::DialogMetadataReader::DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)&v146);
  v4 = v147;
  v130 = v148;
  if (v147 != v148)
  {
    v126 = a4 + 1;
    while (1)
    {
      v5 = std::string::basic_string[abi:ne180100]<0>(&v157, "metadata");
      siri::dialogengine::JoinPath((uint64_t)v5, (uint64_t)v4, (uint64_t)&v160);
      siri::dialogengine::JoinPath(a1, (uint64_t)&v160, (uint64_t)v144);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v160.__r_.__value_.__l.__data_);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v157.__r_.__value_.__l.__data_);
      if (siri::dialogengine::DirExists((uint64_t *)v144))
      {
        siri::dialogengine::GetExtension(v4, &v160);
        std::string::basic_string[abi:ne180100]<0>(&v157, "dtag");
        v6 = siri::dialogengine::StringsEqual((uint64_t)&v160, (uint64_t)&v157);
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v157.__r_.__value_.__l.__data_);
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v160.__r_.__value_.__l.__data_);
          if (!v6)
          {
LABEL_220:
            v7 = 0;
            goto LABEL_221;
          }
        }
        else if (!v6)
        {
          goto LABEL_220;
        }
        siri::dialogengine::RemoveExtension((uint64_t)v4, &v160);
        if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v150.__r_.__value_.__l.__data_);
        v150 = v160;
        siri::dialogengine::CreateJSONStringVal((uint64_t)&v150, (uint64_t *)&v157);
        v18 = v153.i64[1];
        if (v153.i64[1] >= (unint64_t)v154)
        {
          v20 = (v153.i64[1] - v153.i64[0]) >> 4;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v21 = (uint64_t)&v154[-v153.i64[0]] >> 3;
          if (v21 <= v20 + 1)
            v21 = v20 + 1;
          if ((unint64_t)&v154[-v153.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
            v22 = 0xFFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          v161.i64[1] = (uint64_t)&v154;
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v22);
          v25 = &v23[16 * v20];
          *(_OWORD *)v25 = *(_OWORD *)&v157.__r_.__value_.__l.__data_;
          *(_OWORD *)&v157.__r_.__value_.__l.__data_ = 0uLL;
          v26 = (_QWORD *)v153.i64[1];
          v27 = (_QWORD *)v153.i64[0];
          if (v153.i64[1] == v153.i64[0])
          {
            v30 = vdupq_n_s64(v153.u64[1]);
            v28 = &v23[16 * v20];
          }
          else
          {
            v28 = &v23[16 * v20];
            do
            {
              v29 = *((_OWORD *)v26 - 1);
              v26 -= 2;
              *((_OWORD *)v28 - 1) = v29;
              v28 -= 16;
              *v26 = 0;
              v26[1] = 0;
            }
            while (v26 != v27);
            v30 = v153;
          }
          v19 = v25 + 16;
          v153.i64[0] = (uint64_t)v28;
          v153.i64[1] = (uint64_t)(v25 + 16);
          *(int64x2_t *)&v160.__r_.__value_.__r.__words[1] = v30;
          v31 = v154;
          v154 = &v23[16 * v24];
          v161.i64[0] = (uint64_t)v31;
          v160.__r_.__value_.__r.__words[0] = v30.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v160);
        }
        else
        {
          *(_OWORD *)v153.i64[1] = *(_OWORD *)&v157.__r_.__value_.__l.__data_;
          v19 = (_OWORD *)(v18 + 16);
        }
        v153.i64[1] = (uint64_t)v19;
        goto LABEL_220;
      }
      if ((a3 & 1) != 0)
      {
        v7 = 3;
        goto LABEL_221;
      }
      siri::dialogengine::BaseName((uint64_t)v4, &__p);
      siri::dialogengine::RemoveExtension((uint64_t)&__p, &v157);
      siri::dialogengine::RemoveExtension((uint64_t)&v157, &v160);
      siri::dialogengine::GetCanonicalLocale(&v160, 0, &v143);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v160.__r_.__value_.__l.__data_);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v157.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v160, "dtag.bin");
      if (!siri::dialogengine::StringEndsWith(v4, (unsigned __int8 *)&v160))
      {
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v160.__r_.__value_.__l.__data_);
LABEL_69:
        v7 = 3;
        goto LABEL_218;
      }
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        size = __s1.__r_.__value_.__l.__size_;
      v9 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = v143.__r_.__value_.__l.__size_;
      if (size == v9)
      {
        v10 = (v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v143
            : (std::string *)v143.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v16 = memcmp(__s1.__r_.__value_.__l.__data_, v10, __s1.__r_.__value_.__l.__size_) != 0;
        }
        else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v11 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
          p_s1 = &__s1;
          do
          {
            v14 = p_s1->__r_.__value_.__s.__data_[0];
            p_s1 = (std::string *)((char *)p_s1 + 1);
            v13 = v14;
            v15 = v10->__r_.__value_.__s.__data_[0];
            v10 = (std::string *)((char *)v10 + 1);
            v16 = v13 != v15;
            v17 = v13 != v15 || v11-- == 0;
          }
          while (!v17);
        }
        else
        {
          v16 = 0;
        }
      }
      else
      {
        v16 = 1;
      }
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v160.__r_.__value_.__l.__data_);
        if (v16)
          goto LABEL_69;
      }
      else if (v16)
      {
        goto LABEL_69;
      }
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      if (siri::dialogengine::DialogMetadataReader::Load(&v146, &v150, (uint64_t)v144))
        break;
      std::operator+<char>();
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v160, 3u);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v160.__r_.__value_.__l.__data_);
      *v126 = 0;
      a4[2] = 0;
      v7 = 1;
      *a4 = v126;
LABEL_217:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
LABEL_218:
      if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (v7)
          goto LABEL_221;
        goto LABEL_220;
      }
      operator delete(v143.__r_.__value_.__l.__data_);
      if (!v7)
        goto LABEL_220;
LABEL_221:
      if (v145 < 0)
        operator delete(v144[0]);
      if (v7 != 3 && v7)
        goto LABEL_243;
      if (++v4 == v130)
        goto LABEL_229;
    }
    memset(&v141, 0, sizeof(v141));
    memset(&__str, 0, sizeof(__str));
    v138 = 0uLL;
    v139 = 0;
    NextSemanticValue = (const std::string *)siri::dialogengine::DialogMetadataReader::GetNextSemanticValue((siri::dialogengine::DialogMetadataReader *)&v146);
    for (i = v4; ; v4 = i)
    {
      if (!NextSemanticValue)
      {
        v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v141.__r_.__value_.__l.__data_);
        siri::dialogengine::CreateJSONStringVal((uint64_t)&v150, v138.i64);
        std::string::basic_string[abi:ne180100]<0>(&v160, "categoryName");
        v161 = v138;
        v138 = 0uLL;
        siri::dialogengine::CreateJSONArrayVal(&v151, &v136);
        std::string::basic_string[abi:ne180100]<0>(v162, "categoryData");
        v163 = v136;
        v136 = 0uLL;
        std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v141, (const void **)&v160.__r_.__value_.__l.__data_, 2);
        siri::dialogengine::CreateJSONObjectVal((const void ***)&v141, (uint64_t *)&__str);
        v97 = v155.i64[1];
        if (v155.i64[1] >= (unint64_t)v156)
        {
          v99 = (v155.i64[1] - v155.i64[0]) >> 4;
          if ((unint64_t)(v99 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v100 = (uint64_t)&v156[-v155.i64[0]] >> 3;
          if (v100 <= v99 + 1)
            v100 = v99 + 1;
          if ((unint64_t)&v156[-v155.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
            v101 = 0xFFFFFFFFFFFFFFFLL;
          else
            v101 = v100;
          v159 = &v156;
          v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v101);
          v104 = &v102[16 * v99];
          *(_OWORD *)v104 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
          v105 = (_QWORD *)v155.i64[1];
          v106 = (_QWORD *)v155.i64[0];
          if (v155.i64[1] == v155.i64[0])
          {
            v109 = vdupq_n_s64(v155.u64[1]);
            v107 = &v102[16 * v99];
          }
          else
          {
            v107 = &v102[16 * v99];
            do
            {
              v108 = *((_OWORD *)v105 - 1);
              v105 -= 2;
              *((_OWORD *)v107 - 1) = v108;
              v107 -= 16;
              *v105 = 0;
              v105[1] = 0;
            }
            while (v105 != v106);
            v109 = v155;
          }
          v98 = v104 + 16;
          v155.i64[0] = (uint64_t)v107;
          v155.i64[1] = (uint64_t)(v104 + 16);
          *(int64x2_t *)&v157.__r_.__value_.__r.__words[1] = v109;
          v110 = v156;
          v156 = &v102[16 * v103];
          v158 = v110;
          v157.__r_.__value_.__r.__words[0] = v109.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v157);
        }
        else
        {
          *(_OWORD *)v155.i64[1] = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v98 = (_OWORD *)(v97 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
        }
        v155.i64[1] = (uint64_t)v98;
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v141.__r_.__value_.__l.__size_);
        for (j = 0; j != -10; j -= 5)
        {
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v163.i64[j]);
          if (SHIBYTE(v162[j + 2]) < 0)
            operator delete((void *)v162[j]);
        }
        v112 = (std::__shared_weak_count *)v136.i64[1];
        if (v136.i64[1])
        {
          v113 = (unint64_t *)(v136.i64[1] + 8);
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        v115 = (std::__shared_weak_count *)v138.i64[1];
        if (v138.i64[1])
        {
          v116 = (unint64_t *)(v138.i64[1] + 8);
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
        v7 = 0;
        goto LABEL_217;
      }
      std::string::operator=(&v141, &__str);
      std::string::operator=(&__str, NextSemanticValue + 1);
      if (v138.i64[0] != v138.i64[1])
      {
        v33 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
        else
          v34 = v141.__r_.__value_.__l.__size_;
        v35 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v35 = __str.__r_.__value_.__l.__size_;
        if (v34 == v35)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((*((_BYTE *)&v141.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (!memcmp(v141.__r_.__value_.__l.__data_, p_str, v141.__r_.__value_.__l.__size_))
              goto LABEL_123;
          }
          else
          {
            if (!*((_BYTE *)&v141.__r_.__value_.__s + 23))
              goto LABEL_123;
            v37 = &v141;
            while (v37->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
            {
              v37 = (std::string *)((char *)v37 + 1);
              p_str = (std::string *)((char *)p_str + 1);
              if (!--v33)
                goto LABEL_123;
            }
          }
        }
        siri::dialogengine::CreateJSONStringVal((uint64_t)&v141, v135.i64);
        std::string::basic_string[abi:ne180100]<0>(&v160, "featureValue");
        v161 = v135;
        v135 = 0uLL;
        siri::dialogengine::CreateJSONArrayVal(&v138, &v134);
        std::string::basic_string[abi:ne180100]<0>(v162, "displayValues");
        v163 = v134;
        v134 = 0uLL;
        std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v136, (const void **)&v160.__r_.__value_.__l.__data_, 2);
        siri::dialogengine::CreateJSONObjectVal((const void ***)&v136, (uint64_t *)v133);
        v38 = v151.i64[1];
        if (v151.i64[1] >= (unint64_t)v152)
        {
          v40 = (v151.i64[1] - v151.i64[0]) >> 4;
          if ((unint64_t)(v40 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v41 = (uint64_t)&v152[-v151.i64[0]] >> 3;
          if (v41 <= v40 + 1)
            v41 = v40 + 1;
          if ((unint64_t)&v152[-v151.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
            v42 = 0xFFFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          v159 = &v152;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v42);
          v45 = &v43[16 * v40];
          *(_OWORD *)v45 = v133[0];
          v133[0] = 0uLL;
          v46 = (_QWORD *)v151.i64[1];
          v47 = (_QWORD *)v151.i64[0];
          if (v151.i64[1] == v151.i64[0])
          {
            v50 = vdupq_n_s64(v151.u64[1]);
            v48 = &v43[16 * v40];
          }
          else
          {
            v48 = &v43[16 * v40];
            do
            {
              v49 = *((_OWORD *)v46 - 1);
              v46 -= 2;
              *((_OWORD *)v48 - 1) = v49;
              v48 -= 16;
              *v46 = 0;
              v46[1] = 0;
            }
            while (v46 != v47);
            v50 = v151;
          }
          v39 = v45 + 16;
          v151.i64[0] = (uint64_t)v48;
          v151.i64[1] = (uint64_t)(v45 + 16);
          *(int64x2_t *)&v157.__r_.__value_.__r.__words[1] = v50;
          v51 = v152;
          v152 = &v43[16 * v44];
          v158 = v51;
          v157.__r_.__value_.__r.__words[0] = v50.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v157);
        }
        else
        {
          *(_OWORD *)v151.i64[1] = v133[0];
          v39 = (_OWORD *)(v38 + 16);
          v133[0] = 0uLL;
        }
        v151.i64[1] = (uint64_t)v39;
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v136.i64[1]);
        for (k = 0; k != -10; k -= 5)
        {
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v163.i64[k]);
          if (SHIBYTE(v162[k + 2]) < 0)
            operator delete((void *)v162[k]);
        }
        v53 = (std::__shared_weak_count *)v134.i64[1];
        if (v134.i64[1])
        {
          v54 = (unint64_t *)(v134.i64[1] + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = (std::__shared_weak_count *)v135.i64[1];
        if (v135.i64[1])
        {
          v57 = (unint64_t *)(v135.i64[1] + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = v138.i64[1];
        v60 = v138.i64[0];
        while (v59 != v60)
          v59 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v59 - 16);
        v138.i64[1] = v60;
      }
LABEL_123:
      data = (uint64_t)NextSemanticValue[2].__r_.__value_.__l.__data_;
      v61 = NextSemanticValue[2].__r_.__value_.__l.__size_;
      while (data != v61)
      {
        v136.i64[1] = 0;
        v137 = 0;
        v136.i64[0] = (uint64_t)&v136.i64[1];
        v63 = *(_QWORD **)(data + 24);
        if (v63 != (_QWORD *)(data + 32))
        {
          do
          {
            siri::dialogengine::CreateJSONStringVal((uint64_t)(v63 + 7), (uint64_t *)&v157);
            if (*((char *)v63 + 55) < 0)
              std::string::__init_copy_ctor_external(&v160, (const std::string::value_type *)v63[4], v63[5]);
            else
              v160 = *(std::string *)(v63 + 4);
            v161 = *(int64x2_t *)&v157.__r_.__value_.__l.__data_;
            *(_OWORD *)&v157.__r_.__value_.__l.__data_ = 0uLL;
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>> const&>((uint64_t **)&v136, (uint64_t)&v136.i64[1], (const void **)&v160.__r_.__value_.__l.__data_, (__int128 *)&v160);
            v64 = (std::__shared_weak_count *)v161.i64[1];
            if (v161.i64[1])
            {
              v65 = (unint64_t *)(v161.i64[1] + 8);
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v160.__r_.__value_.__l.__data_);
            v67 = (std::__shared_weak_count *)v157.__r_.__value_.__l.__size_;
            if (v157.__r_.__value_.__l.__size_)
            {
              v68 = (unint64_t *)(v157.__r_.__value_.__l.__size_ + 8);
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            v70 = (_QWORD *)v63[1];
            if (v70)
            {
              do
              {
                v71 = v70;
                v70 = (_QWORD *)*v70;
              }
              while (v70);
            }
            else
            {
              do
              {
                v71 = (_QWORD *)v63[2];
                v17 = *v71 == (_QWORD)v63;
                v63 = v71;
              }
              while (!v17);
            }
            v63 = v71;
          }
          while (v71 != (_QWORD *)(data + 32));
        }
        siri::dialogengine::CreateJSONObjectVal((const void ***)&v136, v134.i64);
        std::string::basic_string[abi:ne180100]<0>(&v160, "metadata");
        v161 = v134;
        v134 = 0uLL;
        siri::dialogengine::CreateJSONStringVal(data, v132.i64);
        std::string::basic_string[abi:ne180100]<0>(v162, "displayValue");
        v163 = v132;
        v132 = 0uLL;
        std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v133, (const void **)&v160.__r_.__value_.__l.__data_, 2);
        siri::dialogengine::CreateJSONObjectVal((const void ***)v133, v135.i64);
        v72 = v138.i64[1];
        if (v138.i64[1] >= (unint64_t)v139)
        {
          v73 = (v138.i64[1] - v138.i64[0]) >> 4;
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v75 = (uint64_t)&v139[-v138.i64[0]];
          if ((uint64_t)&v139[-v138.i64[0]] >> 3 > v74)
            v74 = v75 >> 3;
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0)
            v76 = 0xFFFFFFFFFFFFFFFLL;
          else
            v76 = v74;
          v159 = &v139;
          v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v76);
          v79 = &v77[16 * v73];
          *(int64x2_t *)v79 = v135;
          v135 = 0uLL;
          v80 = (_QWORD *)v138.i64[1];
          v81 = (_QWORD *)v138.i64[0];
          if (v138.i64[1] == v138.i64[0])
          {
            v84 = vdupq_n_s64(v138.u64[1]);
            v82 = &v77[16 * v73];
          }
          else
          {
            v82 = &v77[16 * v73];
            do
            {
              v83 = *((_OWORD *)v80 - 1);
              v80 -= 2;
              *((_OWORD *)v82 - 1) = v83;
              v82 -= 16;
              *v80 = 0;
              v80[1] = 0;
            }
            while (v80 != v81);
            v84 = v138;
          }
          v85 = v79 + 16;
          v138.i64[0] = (uint64_t)v82;
          v138.i64[1] = (uint64_t)(v79 + 16);
          *(int64x2_t *)&v157.__r_.__value_.__r.__words[1] = v84;
          v86 = v139;
          v139 = &v77[16 * v78];
          v158 = v86;
          v157.__r_.__value_.__r.__words[0] = v84.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v157);
          v87 = (std::__shared_weak_count *)v135.i64[1];
          v138.i64[1] = (uint64_t)v85;
          if (v135.i64[1])
          {
            v88 = (unint64_t *)(v135.i64[1] + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
        }
        else
        {
          *(int64x2_t *)v138.i64[1] = v135;
          v135 = 0uLL;
          v138.i64[1] = v72 + 16;
        }
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)&v133[0] + 1));
        for (m = 0; m != -10; m -= 5)
        {
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v163.i64[m]);
          if (SHIBYTE(v162[m + 2]) < 0)
            operator delete((void *)v162[m]);
        }
        v91 = (std::__shared_weak_count *)v132.i64[1];
        if (v132.i64[1])
        {
          v92 = (unint64_t *)(v132.i64[1] + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v94 = (std::__shared_weak_count *)v134.i64[1];
        if (v134.i64[1])
        {
          v95 = (unint64_t *)(v134.i64[1] + 8);
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v136.i64[1]);
        data += 48;
      }
      NextSemanticValue = (const std::string *)siri::dialogengine::DialogMetadataReader::GetNextSemanticValue((siri::dialogengine::DialogMetadataReader *)&v146);
    }
  }
LABEL_229:
  siri::dialogengine::CreateJSONArrayVal(&v155, &v157);
  std::string::basic_string[abi:ne180100]<0>(&v160, "categories");
  v161 = *(int64x2_t *)&v157.__r_.__value_.__l.__data_;
  *(_OWORD *)&v157.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::CreateJSONArrayVal(&v153, v144);
  std::string::basic_string[abi:ne180100]<0>(v162, "categoryNames");
  v163 = *(int64x2_t *)v144;
  v144[0] = 0;
  v144[1] = 0;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)a4, (const void **)&v160.__r_.__value_.__l.__data_, 2);
  for (n = 0; n != -10; n -= 5)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v163.i64[n]);
    if (SHIBYTE(v162[n + 2]) < 0)
      operator delete((void *)v162[n]);
  }
  v119 = (std::__shared_weak_count *)v144[1];
  if (v144[1])
  {
    v120 = (unint64_t *)((char *)v144[1] + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = (std::__shared_weak_count *)v157.__r_.__value_.__l.__size_;
  if (v157.__r_.__value_.__l.__size_)
  {
    v123 = (unint64_t *)(v157.__r_.__value_.__l.__size_ + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
LABEL_243:
  v125 = v146;
  v146 = 0;
  if (v125)
    std::default_delete<siri::dialogengine::DialogMetadataReader::Impl>::operator()[abi:ne180100]((uint64_t)v125);
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v147;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v150.__r_.__value_.__l.__data_);
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
}

void sub_1BFAD53A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a70;
  char a72;
  uint64_t a73;
  uint64_t a74;
  uint64_t v74;
  uint64_t i;
  uint64_t v77;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)a43);
  for (i = 40; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v74 - 192 + i);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)a46);
  if (a53 < 0)
    operator delete(__p);
  if (a59 < 0)
    operator delete(a54);
  v77 = a60;
  a60 = 0;
  if (v77)
    std::default_delete<siri::dialogengine::DialogMetadataReader::Impl>::operator()[abi:ne180100](v77);
  a54 = &a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  if (a69 < 0)
    operator delete(a64);
  if (a72 < 0)
    operator delete(a70);
  a70 = &a73;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  a73 = (uint64_t)&a74;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a73);
  a74 = (uint64_t)&STACK[0x200];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a74);
  _Unwind_Resume(a1);
}

void sub_1BFAD5928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFAD59FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFAD5AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BFAD5BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_1BFAD5CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BFAD5DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_1BFAD5EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BFAD5F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_1BFAD60A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BFAD6204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BFAD62E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property__24258(_QWORD *a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](a1, *a2, a2[1]);
}

_QWORD *__copy_helper_atomic_property__24259(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void InitDefaultsscc_info_Reference_Button_Reference_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", a4);
  SnippetUI::Reference_Button::Reference_Button((SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Reference_Button_default_instance_, v4);
  qword_1ED1D41B0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D41B8 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Reference_Button *SnippetUI::Reference_Button::Reference_Button(SnippetUI::Reference_Button *this)
{
  *(_QWORD *)this = &off_1E7934898;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 11) = 0;
  if (atomic_load(scc_info_Reference_Button_Reference_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Button_Reference_2eproto);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1BFAD645C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Button::~Reference_Button(SnippetUI::Reference_Button *this)
{
  SnippetUI::Reference_Button::~Reference_Button(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7934898;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Reference_Button *SnippetUI::Reference_Button::New(SnippetUI::Reference_Button *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Button>(0);
}

SnippetUI::Reference_Button *SnippetUI::Reference_Button::New(SnippetUI::Reference_Button *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Button>(a2);
}

void SnippetUI::Reference_Button::Clear(SnippetUI::Reference_Button *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = *((_BYTE *)this + 8);
  v5 = (char *)this + 8;
  *((_QWORD *)v5 + 3) = 0;
  *((_DWORD *)v5 + 8) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v5);
}

uint64_t SnippetUI::Reference_Button::IsInitialized(SnippetUI::Reference_Button *this)
{
  return 1;
}

char *SnippetUI::Reference_Button::ByteSizeLong(SnippetUI::Reference_Button *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::ActionProperty *v8;
  char *v9;
  int v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  v10 = *((_DWORD *)this + 10);
  if (v10)
  {
    if (v10 < 0)
      v11 = 11;
    else
      v11 = ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v11);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Reference_Button *)((char *)this + 8), v5, (_DWORD *)this + 11);
  *((_DWORD *)this + 11) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::Reference_Button::GetCachedSize(SnippetUI::Reference_Button *this)
{
  return *((unsigned int *)this + 11);
}

google::protobuf::internal *SnippetUI::Reference_Button::_InternalParse(SnippetUI::Reference_Button *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  SnippetUI::ActionProperty *v12;
  std::string *v13;
  google::protobuf::internal *v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  google::protobuf::internal *v19;

  v19 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v19, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v19;
    TagFallback = (google::protobuf::internal *)((char *)v19 + 1);
    v9 = (char *)*(unsigned __int8 *)v19;
    if ((*(char *)v19 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v19 + 2);
LABEL_6:
      v19 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v19, v9);
    v19 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_26;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 3) = v10;
          TagFallback = v19;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_31;
      case 2u:
        if (v9 != 18)
          goto LABEL_26;
        v12 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
        if (!v12)
        {
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 4) = v12;
          TagFallback = v19;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v12, TagFallback);
        goto LABEL_31;
      case 3u:
        if (v9 != 26)
          goto LABEL_26;
        v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v5;
          TagFallback = v19;
        }
        v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Reference_Button.component_name");
        goto LABEL_31;
      case 4u:
        if (v9 != 32)
          goto LABEL_26;
        v14 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v15) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_24;
        v16 = *(char *)v14;
        v15 = v15 + (v16 << 7) - 128;
        if (v16 < 0)
        {
          v19 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v15);
          if (!v19)
            goto LABEL_36;
        }
        else
        {
          v14 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_24:
          v19 = v14;
        }
        *((_DWORD *)this + 10) = v15;
        continue;
      default:
LABEL_26:
        if ((_DWORD)v9)
          v17 = (v9 & 7) == 4;
        else
          v17 = 1;
        if (v17)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_31:
        v19 = (google::protobuf::internal *)v11;
        if (v11)
          continue;
LABEL_36:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Reference_Button::InternalSerializeWithCachedSizesToArray(SnippetUI::Reference_Button *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::ActionProperty *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  google::protobuf::internal *v24;
  const char *v25;
  unsigned int v26;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v5 = (char *)a2;
  if (this == (SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_)
    goto LABEL_25;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((_QWORD *)v24 + 1);
    if (!v25)
      goto LABEL_31;
    v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((_BYTE *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.Reference_Button.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 2), v5);
  }
LABEL_31:
  v26 = *((_DWORD *)this + 10);
  if (v26)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v26 = *((_DWORD *)this + 10);
    }
    *v5 = 32;
    if (v26 > 0x7F)
    {
      v5[1] = v26 | 0x80;
      v27 = (unint64_t)(int)v26 >> 7;
      if (v26 >> 14)
      {
        v28 = v5 + 2;
        do
        {
          v29 = v28;
          *v28++ = v27 | 0x80;
          v30 = v27 >> 7;
          v31 = v27 >> 14;
          v27 >>= 7;
        }
        while (v31);
        v5 = v29 + 2;
        *v28 = v30;
      }
      else
      {
        v5[2] = v27;
        v5 += 3;
      }
    }
    else
    {
      v5[1] = v26;
      v5 += 2;
    }
  }
  v32 = *((_QWORD *)this + 1);
  if ((v32 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v32 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Reference_Button::CopyFrom(SnippetUI::Reference_Button *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Button::Clear(this);
    SnippetUI::Reference_Button::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Button::MergeFrom(SnippetUI::Reference_Button *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Reference_Button *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 1518);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Reference_Button::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAD6C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Reference_Button::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44) = a2;
  return this;
}

uint64_t SnippetUI::Reference_Button::GetMetadata(SnippetUI::Reference_Button *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Reference_2eproto);
  return qword_1EF5829A0;
}

void InitDefaultsscc_info_Reference_Standard_Reference_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", a4);
  SnippetUI::Reference_Standard::Reference_Standard((SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Reference_Standard_default_instance_, v4);
  qword_1ED1D4478 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4480 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Reference_Standard *SnippetUI::Reference_Standard::Reference_Standard(SnippetUI::Reference_Standard *this)
{
  *(_QWORD *)this = &off_1E7934658;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_Reference_Standard_Reference_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Standard_Reference_2eproto);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFAD6D34(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Standard::~Reference_Standard(SnippetUI::Reference_Standard *this)
{
  SnippetUI::Reference_Standard::~Reference_Standard(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7934658;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Reference_Standard *SnippetUI::Reference_Standard::New(SnippetUI::Reference_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Standard>(0);
}

SnippetUI::Reference_Standard *SnippetUI::Reference_Standard::New(SnippetUI::Reference_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Standard>(a2);
}

void SnippetUI::Reference_Standard::Clear(SnippetUI::Reference_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArena *v5;
  char v6;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = *((_BYTE *)this + 8);
  v5 = (SnippetUI::Reference_Standard *)((char *)this + 8);
  *((_QWORD *)v5 + 3) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
}

uint64_t SnippetUI::Reference_Standard::IsInitialized(SnippetUI::Reference_Standard *this)
{
  return 1;
}

char *SnippetUI::Reference_Standard::ByteSizeLong(SnippetUI::Reference_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::ActionProperty *v8;
  char *v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Reference_Standard *)((char *)this + 8), v5, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::Reference_Standard::GetCachedSize(SnippetUI::Reference_Standard *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::Reference_Standard::_InternalParse(SnippetUI::Reference_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  unsigned int v10;
  char *v13;
  std::string *v14;
  SnippetUI::ActionProperty *v15;
  SnippetUI::TextProperty *v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v18;
    TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
    v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    v18 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Reference_Standard.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 4) = v15;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
      if (!v16)
      {
        v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v16;
        TagFallback = v18;
      }
      v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v16, TagFallback);
      goto LABEL_29;
    }
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      break;
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    v18 = (google::protobuf::internal *)v13;
    if (!v13)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Reference_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::Reference_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::ActionProperty *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  google::protobuf::internal *v24;
  const char *v25;
  uint64_t v26;

  v5 = (char *)a2;
  if (this == (SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_)
    goto LABEL_25;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((_QWORD *)v24 + 1);
    if (!v25)
      goto LABEL_31;
    v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((_BYTE *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.Reference_Standard.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 2), v5);
  }
LABEL_31:
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Reference_Standard::CopyFrom(SnippetUI::Reference_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Standard::Clear(this);
    SnippetUI::Reference_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Standard::MergeFrom(SnippetUI::Reference_Standard *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Reference_Standard *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 503);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Reference_Standard::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAD73C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Reference_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::Reference_Standard::GetMetadata(SnippetUI::Reference_Standard *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Reference_2eproto);
  return file_level_metadata_Reference_2eproto;
}

void *SnippetUI::Reference_Standard::default_instance(SnippetUI::Reference_Standard *this)
{
  if (atomic_load(scc_info_Reference_Standard_Reference_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Standard_Reference_2eproto);
  return &SnippetUI::_Reference_Standard_default_instance_;
}

void SnippetUI::Reference_Standard::MergeFrom(SnippetUI::Reference_Standard *this, const SnippetUI::Reference_Standard *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 518);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1BFAD7580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Reference_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Reference_Standard *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Reference_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Standard>);
    SnippetUI::Reference_Standard::Reference_Standard(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Reference_Standard *)operator new();
    SnippetUI::Reference_Standard::Reference_Standard(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAD761C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Standard>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Reference_Rich_Reference_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", a4);
  SnippetUI::Reference_Rich::Reference_Rich((SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Reference_Rich_default_instance_, v4);
  qword_1ED1D3FA8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D3FB0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D3FB8 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D3FC0 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Reference_Rich *SnippetUI::Reference_Rich::Reference_Rich(SnippetUI::Reference_Rich *this)
{
  *(_QWORD *)this = &off_1E79347D8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  if (atomic_load(scc_info_Reference_Rich_Reference_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Rich_Reference_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return this;
}

void sub_1BFAD77DC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Rich::~Reference_Rich(SnippetUI::Reference_Rich *this)
{
  SnippetUI::Reference_Rich::~Reference_Rich(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E79347D8;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 6);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Reference_Rich *SnippetUI::Reference_Rich::New(SnippetUI::Reference_Rich *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Rich>(0);
}

SnippetUI::Reference_Rich *SnippetUI::Reference_Rich::New(SnippetUI::Reference_Rich *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Rich>(a2);
}

void SnippetUI::Reference_Rich::Clear(SnippetUI::Reference_Rich *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  google::protobuf::internal::InternalMetadataWithArena *v7;
  char v8;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v8 = *((_BYTE *)this + 8);
  v7 = (SnippetUI::Reference_Rich *)((char *)this + 8);
  *((_QWORD *)v7 + 5) = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
}

uint64_t SnippetUI::Reference_Rich::IsInitialized(SnippetUI::Reference_Rich *this)
{
  return 1;
}

char *SnippetUI::Reference_Rich::ByteSizeLong(SnippetUI::Reference_Rich *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::TextProperty *v8;
  char *v9;
  SnippetUI::VisualProperty *v10;
  char *v11;
  SnippetUI::ActionProperty *v12;
  char *v13;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::VisualProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v12 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
    if (v12)
    {
      v13 = SnippetUI::ActionProperty::ByteSizeLong(v12);
      v5 = (const google::protobuf::UnknownFieldSet *)&v13[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Reference_Rich *)((char *)this + 8), v5, (_DWORD *)this + 14);
  *((_DWORD *)this + 14) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::Reference_Rich::GetCachedSize(SnippetUI::Reference_Rich *this)
{
  return *((unsigned int *)this + 14);
}

google::protobuf::internal *SnippetUI::Reference_Rich::_InternalParse(SnippetUI::Reference_Rich *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  SnippetUI::VisualProperty *v12;
  SnippetUI::ActionProperty *v13;
  std::string *v14;
  BOOL v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_28;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
        if (v10)
          goto LABEL_15;
        v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v10;
        goto LABEL_14;
      case 2u:
        if (v9 != 18)
          goto LABEL_28;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 4) = v10;
LABEL_14:
          TagFallback = v17;
        }
LABEL_15:
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_33;
      case 3u:
        if (v9 != 26)
          goto LABEL_28;
        v12 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 5);
        if (!v12)
        {
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 5) = v12;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v12, TagFallback);
        goto LABEL_33;
      case 4u:
        if (v9 != 34)
          goto LABEL_28;
        v13 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
        if (!v13)
        {
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 6) = v13;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v13, TagFallback);
        goto LABEL_33;
      case 5u:
        if (v9 != 42)
          goto LABEL_28;
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Reference_Rich.component_name");
        goto LABEL_33;
      default:
LABEL_28:
        if ((_DWORD)v9)
          v15 = (v9 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_33:
        v17 = (google::protobuf::internal *)v11;
        if (v11)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Reference_Rich::InternalSerializeWithCachedSizesToArray(SnippetUI::Reference_Rich *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::VisualProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::ActionProperty *v34;
  unsigned int v35;
  google::protobuf::UnknownFieldSet *v36;
  unsigned int v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  google::protobuf::internal *v42;
  const char *v43;
  uint64_t v44;

  v5 = (char *)a2;
  if (this == (SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_)
    goto LABEL_49;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 5);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
  if (v34)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
    }
    *v5 = 34;
    v35 = *((_DWORD *)v34 + 12);
    if (v35 > 0x7F)
    {
      v5[1] = v35 | 0x80;
      v37 = v35 >> 7;
      if (v35 >> 14)
      {
        v38 = v5 + 2;
        do
        {
          v39 = v38;
          *v38++ = v37 | 0x80;
          v40 = v37 >> 7;
          v41 = v37 >> 14;
          v37 >>= 7;
        }
        while (v41);
        v36 = (google::protobuf::UnknownFieldSet *)(v39 + 2);
        *v38 = v40;
      }
      else
      {
        v5[2] = v37;
        v36 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v35;
      v36 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v34, v36, a3, a4);
  }
LABEL_49:
  v42 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v42 + 23) < 0)
  {
    v43 = (const char *)*((_QWORD *)v42 + 1);
    if (!v43)
      goto LABEL_55;
    v42 = *(google::protobuf::internal **)v42;
    goto LABEL_54;
  }
  v43 = (const char *)*((unsigned __int8 *)v42 + 23);
  if (*((_BYTE *)v42 + 23))
  {
LABEL_54:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 1, (google::protobuf::internal *)"SnippetUI.Reference_Rich.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 2), v5);
  }
LABEL_55:
  v44 = *((_QWORD *)this + 1);
  if ((v44 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v44 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Reference_Rich::CopyFrom(SnippetUI::Reference_Rich *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Rich::Clear(this);
    SnippetUI::Reference_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Rich::MergeFrom(SnippetUI::Reference_Rich *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Reference_Rich *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 1189);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Reference_Rich::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAD80B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Reference_Rich::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

uint64_t SnippetUI::Reference_Rich::GetMetadata(SnippetUI::Reference_Rich *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Reference_2eproto);
  return qword_1EF582990;
}

void *SnippetUI::Reference_Rich::default_instance(SnippetUI::Reference_Rich *this)
{
  if (atomic_load(scc_info_Reference_Rich_Reference_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Rich_Reference_2eproto);
  return &SnippetUI::_Reference_Rich_default_instance_;
}

void SnippetUI::Reference_Rich::MergeFrom(SnippetUI::Reference_Rich *this, const SnippetUI::Reference_Rich *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 1204);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v15, v16);
    }
    v17 = (int **)*((_QWORD *)a2 + 6);
    if (v17)
    {
      v18 = (int **)*((_QWORD *)this + 6);
      if (!v18)
      {
        v18 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 6) = v18;
        v17 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v17)
        v19 = v17;
      else
        v19 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v18, v19);
    }
  }
}

void sub_1BFAD82D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Reference_Rich *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Rich>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Reference_Rich *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Reference_Rich *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Rich>);
    SnippetUI::Reference_Rich::Reference_Rich(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Reference_Rich *)operator new();
    SnippetUI::Reference_Rich::Reference_Rich(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAD8370(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406AB77EA5);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Rich>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Reference_Logo_Reference_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", a4);
  SnippetUI::Reference_Logo::Reference_Logo((SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Reference_Logo_default_instance_, v4);
  qword_1ED1D3F78 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D3F80 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Reference_Logo *SnippetUI::Reference_Logo::Reference_Logo(SnippetUI::Reference_Logo *this)
{
  *(_QWORD *)this = &off_1E7934718;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_Reference_Logo_Reference_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Logo_Reference_2eproto);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFAD8544(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Logo::~Reference_Logo(SnippetUI::Reference_Logo *this)
{
  SnippetUI::Reference_Logo::~Reference_Logo(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7934718;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Reference_Logo *SnippetUI::Reference_Logo::New(SnippetUI::Reference_Logo *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Logo>(0);
}

SnippetUI::Reference_Logo *SnippetUI::Reference_Logo::New(SnippetUI::Reference_Logo *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Logo>(a2);
}

void SnippetUI::Reference_Logo::Clear(SnippetUI::Reference_Logo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArena *v5;
  char v6;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = *((_BYTE *)this + 8);
  v5 = (SnippetUI::Reference_Logo *)((char *)this + 8);
  *((_QWORD *)v5 + 3) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
}

uint64_t SnippetUI::Reference_Logo::IsInitialized(SnippetUI::Reference_Logo *this)
{
  return 1;
}

char *SnippetUI::Reference_Logo::ByteSizeLong(SnippetUI::Reference_Logo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::VisualProperty *v6;
  char *v7;
  SnippetUI::ActionProperty *v8;
  char *v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_)
  {
    v6 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::VisualProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Reference_Logo *)((char *)this + 8), v5, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::Reference_Logo::GetCachedSize(SnippetUI::Reference_Logo *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::Reference_Logo::_InternalParse(SnippetUI::Reference_Logo *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  unsigned int v10;
  char *v13;
  std::string *v14;
  SnippetUI::ActionProperty *v15;
  SnippetUI::VisualProperty *v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v18;
    TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
    v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    v18 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Reference_Logo.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 4) = v15;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      v16 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
      if (!v16)
      {
        v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 3) = v16;
        TagFallback = v18;
      }
      v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v16, TagFallback);
      goto LABEL_29;
    }
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      break;
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    v18 = (google::protobuf::internal *)v13;
    if (!v13)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Reference_Logo::InternalSerializeWithCachedSizesToArray(SnippetUI::Reference_Logo *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::VisualProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::ActionProperty *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  google::protobuf::internal *v24;
  const char *v25;
  uint64_t v26;

  v5 = (char *)a2;
  if (this == (SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_)
    goto LABEL_25;
  v7 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((_QWORD *)v24 + 1);
    if (!v25)
      goto LABEL_31;
    v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((_BYTE *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.Reference_Logo.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 2), v5);
  }
LABEL_31:
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Reference_Logo::CopyFrom(SnippetUI::Reference_Logo *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Logo::Clear(this);
    SnippetUI::Reference_Logo::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Logo::MergeFrom(SnippetUI::Reference_Logo *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Reference_Logo *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 801);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Reference_Logo::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAD8BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Reference_Logo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::Reference_Logo::GetMetadata(SnippetUI::Reference_Logo *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Reference_2eproto);
  return qword_1EF582980;
}

void *SnippetUI::Reference_Logo::default_instance(SnippetUI::Reference_Logo *this)
{
  if (atomic_load(scc_info_Reference_Logo_Reference_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Logo_Reference_2eproto);
  return &SnippetUI::_Reference_Logo_default_instance_;
}

void SnippetUI::Reference_Logo::MergeFrom(SnippetUI::Reference_Logo *this, const SnippetUI::Reference_Logo *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 816);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Logo *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1BFAD8D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Reference_Logo *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Logo>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Reference_Logo *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Reference_Logo *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Logo>);
    SnippetUI::Reference_Logo::Reference_Logo(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Reference_Logo *)operator new();
    SnippetUI::Reference_Logo::Reference_Logo(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAD8E2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Logo>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Reference_Footnote_Reference_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", a4);
  SnippetUI::Reference_Footnote::Reference_Footnote((SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Reference_Footnote_default_instance_, v4);
  qword_1ED1D4430 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4438 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4448 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4450 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4440 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Reference_Footnote *SnippetUI::Reference_Footnote::Reference_Footnote(SnippetUI::Reference_Footnote *this)
{
  *(_QWORD *)this = &off_1E7934958;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  if (atomic_load(scc_info_Reference_Footnote_Reference_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Footnote_Reference_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return this;
}

void sub_1BFAD8FEC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Footnote::~Reference_Footnote(SnippetUI::Reference_Footnote *this)
{
  SnippetUI::Reference_Footnote::~Reference_Footnote(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E7934958;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 6);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 7);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Reference_Footnote *SnippetUI::Reference_Footnote::New(SnippetUI::Reference_Footnote *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Footnote>(0);
}

SnippetUI::Reference_Footnote *SnippetUI::Reference_Footnote::New(SnippetUI::Reference_Footnote *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Footnote>(a2);
}

void SnippetUI::Reference_Footnote::Clear(SnippetUI::Reference_Footnote *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::InternalMetadataWithArena *v8;
  char v9;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = *((_BYTE *)this + 8);
  v8 = (SnippetUI::Reference_Footnote *)((char *)this + 8);
  *((_QWORD *)v8 + 6) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
}

uint64_t SnippetUI::Reference_Footnote::IsInitialized(SnippetUI::Reference_Footnote *this)
{
  return 1;
}

char *SnippetUI::Reference_Footnote::ByteSizeLong(SnippetUI::Reference_Footnote *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::TextProperty *v8;
  char *v9;
  SnippetUI::ActionProperty *v10;
  char *v11;
  SnippetUI::TextProperty *v12;
  char *v13;
  SnippetUI::TextProperty *v14;
  char *v15;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v12 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v12)
    {
      v13 = SnippetUI::TextProperty::ByteSizeLong(v12);
      v5 = (const google::protobuf::UnknownFieldSet *)&v13[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v14 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (v14)
    {
      v15 = SnippetUI::TextProperty::ByteSizeLong(v14);
      v5 = (const google::protobuf::UnknownFieldSet *)&v15[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Reference_Footnote *)((char *)this + 8), v5, (_DWORD *)this + 16);
  *((_DWORD *)this + 16) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::Reference_Footnote::GetCachedSize(SnippetUI::Reference_Footnote *this)
{
  return *((unsigned int *)this + 16);
}

google::protobuf::internal *SnippetUI::Reference_Footnote::_InternalParse(SnippetUI::Reference_Footnote *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::ActionProperty *v11;
  char *v12;
  std::string *v13;
  BOOL v14;
  google::protobuf::internal *v16;

  v16 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v16, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v16;
    TagFallback = (google::protobuf::internal *)((char *)v16 + 1);
    v9 = (char *)*(unsigned __int8 *)v16;
    if ((*(char *)v16 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v16 + 2);
LABEL_6:
      v16 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v16, v9);
    v16 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_32;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
        if (v10)
          goto LABEL_29;
        v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v10;
        goto LABEL_28;
      case 2u:
        if (v9 != 18)
          goto LABEL_32;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v10)
          goto LABEL_29;
        v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v10;
        goto LABEL_28;
      case 3u:
        if (v9 != 26)
          goto LABEL_32;
        v11 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 5) = v11;
          TagFallback = v16;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v11, TagFallback);
        goto LABEL_30;
      case 4u:
        if (v9 != 34)
          goto LABEL_32;
        v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v5;
          TagFallback = v16;
        }
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Reference_Footnote.component_name");
        goto LABEL_30;
      case 5u:
        if (v9 != 42)
          goto LABEL_32;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (v10)
          goto LABEL_29;
        v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v10;
        goto LABEL_28;
      case 6u:
        if (v9 != 50)
          goto LABEL_32;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
        if (v10)
          goto LABEL_29;
        v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v10;
LABEL_28:
        TagFallback = v16;
LABEL_29:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_30;
      default:
LABEL_32:
        if ((_DWORD)v9)
          v14 = (v9 & 7) == 4;
        else
          v14 = 1;
        if (v14)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_30:
        v16 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Reference_Footnote::InternalSerializeWithCachedSizesToArray(SnippetUI::Reference_Footnote *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::ActionProperty *v25;
  unsigned int v26;
  google::protobuf::UnknownFieldSet *v27;
  unsigned int v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  unsigned int v32;
  google::protobuf::internal *v33;
  const char *v34;
  SnippetUI::TextProperty *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  google::protobuf::UnknownFieldSet *v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  unsigned int v43;
  SnippetUI::TextProperty *v44;
  unsigned int v45;
  google::protobuf::UnknownFieldSet *v46;
  unsigned int v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;

  v5 = (char *)a2;
  if (this == (SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_)
    goto LABEL_37;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
  if (v25)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v25 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *v5 = 26;
    v26 = *((_DWORD *)v25 + 12);
    if (v26 > 0x7F)
    {
      v5[1] = v26 | 0x80;
      v28 = v26 >> 7;
      if (v26 >> 14)
      {
        v29 = v5 + 2;
        do
        {
          v30 = v29;
          *v29++ = v28 | 0x80;
          v31 = v28 >> 7;
          v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        v27 = (google::protobuf::UnknownFieldSet *)(v30 + 2);
        *v29 = v31;
      }
      else
      {
        v5[2] = v28;
        v27 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v26;
      v27 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v25, v27, a3, a4);
  }
LABEL_37:
  v33 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v33 + 23) < 0)
  {
    v34 = (const char *)*((_QWORD *)v33 + 1);
    if (!v34)
      goto LABEL_43;
    v33 = *(google::protobuf::internal **)v33;
    goto LABEL_42;
  }
  v34 = (const char *)*((unsigned __int8 *)v33 + 23);
  if (*((_BYTE *)v33 + 23))
  {
LABEL_42:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v33, v34, 1, (google::protobuf::internal *)"SnippetUI.Reference_Footnote.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 2), v5);
  }
LABEL_43:
  if (this == (SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_)
    goto LABEL_67;
  v35 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (v35)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v35 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    }
    *v5 = 42;
    v36 = *((_DWORD *)v35 + 15);
    if (v36 > 0x7F)
    {
      v5[1] = v36 | 0x80;
      v38 = v36 >> 7;
      if (v36 >> 14)
      {
        v40 = v5 + 2;
        do
        {
          v41 = v40;
          *v40++ = v38 | 0x80;
          v42 = v38 >> 7;
          v43 = v38 >> 14;
          v38 >>= 7;
        }
        while (v43);
        v39 = (google::protobuf::UnknownFieldSet *)(v41 + 2);
        *v40 = v42;
        goto LABEL_55;
      }
      v5[2] = v38;
      v37 = 3;
    }
    else
    {
      v5[1] = v36;
      v37 = 2;
    }
    v39 = (google::protobuf::UnknownFieldSet *)&v5[v37];
LABEL_55:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v35, v39, a3, a4);
  }
  v44 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  if (v44)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v44 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    }
    *v5 = 50;
    v45 = *((_DWORD *)v44 + 15);
    if (v45 > 0x7F)
    {
      v5[1] = v45 | 0x80;
      v47 = v45 >> 7;
      if (v45 >> 14)
      {
        v48 = v5 + 2;
        do
        {
          v49 = v48;
          *v48++ = v47 | 0x80;
          v50 = v47 >> 7;
          v51 = v47 >> 14;
          v47 >>= 7;
        }
        while (v51);
        v46 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
        *v48 = v50;
      }
      else
      {
        v5[2] = v47;
        v46 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v45;
      v46 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v44, v46, a3, a4);
  }
LABEL_67:
  v52 = *((_QWORD *)this + 1);
  if ((v52 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v52 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Reference_Footnote::CopyFrom(SnippetUI::Reference_Footnote *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Footnote::Clear(this);
    SnippetUI::Reference_Footnote::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Footnote::MergeFrom(SnippetUI::Reference_Footnote *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Reference_Footnote *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 1955);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Reference_Footnote::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAD99D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Reference_Footnote::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

uint64_t SnippetUI::Reference_Footnote::GetMetadata(SnippetUI::Reference_Footnote *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Reference_2eproto);
  return qword_1EF5829B0;
}

void *SnippetUI::Reference_Footnote::default_instance(SnippetUI::Reference_Footnote *this)
{
  if (atomic_load(scc_info_Reference_Footnote_Reference_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Footnote_Reference_2eproto);
  return &SnippetUI::_Reference_Footnote_default_instance_;
}

void SnippetUI::Reference_Footnote::MergeFrom(SnippetUI::Reference_Footnote *this, const SnippetUI::Reference_Footnote *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  char v23;
  std::string v24[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 1970);
    v4 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Footnote *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v15, v16);
    }
    v17 = (int **)*((_QWORD *)a2 + 6);
    if (v17)
    {
      v18 = (int **)*((_QWORD *)this + 6);
      if (!v18)
      {
        v18 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v18;
        v17 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v17)
        v19 = v17;
      else
        v19 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v18, v19);
    }
    v20 = (int **)*((_QWORD *)a2 + 7);
    if (v20)
    {
      v21 = (int **)*((_QWORD *)this + 7);
      if (!v21)
      {
        v21 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v21;
        v20 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v20)
        v22 = v20;
      else
        v22 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v21, v22);
    }
  }
}

void sub_1BFAD9C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Reference_Footnote *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Footnote>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Reference_Footnote *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Reference_Footnote *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Footnote>);
    SnippetUI::Reference_Footnote::Reference_Footnote(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Reference_Footnote *)operator new();
    SnippetUI::Reference_Footnote::Reference_Footnote(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAD9CAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4025EBE0BELL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Footnote>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::Reference_Button::default_instance(SnippetUI::Reference_Button *this)
{
  if (atomic_load(scc_info_Reference_Button_Reference_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Reference_Button_Reference_2eproto);
  return &SnippetUI::_Reference_Button_default_instance_;
}

void SnippetUI::Reference_Button::MergeFrom(SnippetUI::Reference_Button *this, const SnippetUI::Reference_Button *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Reference.pb.cc", 1533);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
  v14 = *((_DWORD *)a2 + 10);
  if (v14)
    *((_DWORD *)this + 10) = v14;
}

void sub_1BFAD9F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Reference_Button *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Reference_Button>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Reference_Button *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Reference_Button *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Button>);
    SnippetUI::Reference_Button::Reference_Button(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Reference_Button *)operator new();
    SnippetUI::Reference_Button::Reference_Button(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAD9FE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Reference_Button>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t SnippetUI::Reference_Button_ButtonRole_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Reference_2eproto);
  return file_level_enum_descriptors_Reference_2eproto;
}

BOOL SnippetUI::Reference_Button_ButtonRole_IsValid(SnippetUI *this)
{
  return this < 3;
}

void SnippetUI::Reference_Standard::InitAsDefaultInstance(SnippetUI::Reference_Standard *this)
{
  qword_1ED1D4478 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4480 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Reference_Standard::_Internal::text_1(SnippetUI::Reference_Standard::_Internal *this, const SnippetUI::Reference_Standard *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Reference_Standard::_Internal::action(SnippetUI::Reference_Standard::_Internal *this, const SnippetUI::Reference_Standard *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Reference_Standard::clear_text_1(SnippetUI::Reference_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Standard::clear_action(SnippetUI::Reference_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

SnippetUI::Reference_Standard *SnippetUI::Reference_Standard::Reference_Standard(SnippetUI::Reference_Standard *this, const SnippetUI::Reference_Standard *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;

  *(_QWORD *)this = &off_1E7934658;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::Reference_Standard *)&SnippetUI::_Reference_Standard_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 4));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 4) = v9;
  return this;
}

void sub_1BFADA2A8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Standard::CopyFrom(SnippetUI::Reference_Standard *this, const SnippetUI::Reference_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Standard::Clear(this);
    SnippetUI::Reference_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Standard::InternalSwap(SnippetUI::Reference_Standard *this, SnippetUI::Reference_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::Reference_Standard *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
}

void SnippetUI::Reference_Logo::InitAsDefaultInstance(SnippetUI::Reference_Logo *this)
{
  qword_1ED1D3F78 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D3F80 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Reference_Logo::_Internal::thumbnail(SnippetUI::Reference_Logo::_Internal *this, const SnippetUI::Reference_Logo *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Reference_Logo::_Internal::action(SnippetUI::Reference_Logo::_Internal *this, const SnippetUI::Reference_Logo *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Reference_Logo::clear_thumbnail(SnippetUI::Reference_Logo *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Logo::clear_action(SnippetUI::Reference_Logo *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

SnippetUI::Reference_Logo *SnippetUI::Reference_Logo::Reference_Logo(SnippetUI::Reference_Logo *this, const SnippetUI::Reference_Logo *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::VisualProperty *v8;
  SnippetUI::ActionProperty *v9;

  *(_QWORD *)this = &off_1E7934718;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Logo *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::Reference_Logo *)&SnippetUI::_Reference_Logo_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v8, *((const SnippetUI::VisualProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 4));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 4) = v9;
  return this;
}

void sub_1BFADA5F8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Logo::CopyFrom(SnippetUI::Reference_Logo *this, const SnippetUI::Reference_Logo *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Logo::Clear(this);
    SnippetUI::Reference_Logo::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Logo::InternalSwap(SnippetUI::Reference_Logo *this, SnippetUI::Reference_Logo *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::Reference_Logo *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
}

void SnippetUI::Reference_Rich::InitAsDefaultInstance(SnippetUI::Reference_Rich *this)
{
  qword_1ED1D3FA8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D3FB0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D3FB8 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D3FC0 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Reference_Rich::_Internal::text_1(SnippetUI::Reference_Rich::_Internal *this, const SnippetUI::Reference_Rich *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Reference_Rich::_Internal::text_2(SnippetUI::Reference_Rich::_Internal *this, const SnippetUI::Reference_Rich *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Reference_Rich::_Internal::thumbnail(SnippetUI::Reference_Rich::_Internal *this, const SnippetUI::Reference_Rich *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::Reference_Rich::_Internal::action(SnippetUI::Reference_Rich::_Internal *this, const SnippetUI::Reference_Rich *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::Reference_Rich::clear_text_1(SnippetUI::Reference_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Rich::clear_text_2(SnippetUI::Reference_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Rich::clear_thumbnail(SnippetUI::Reference_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Rich::clear_action(SnippetUI::Reference_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

SnippetUI::Reference_Rich *SnippetUI::Reference_Rich::Reference_Rich(SnippetUI::Reference_Rich *this, const SnippetUI::Reference_Rich *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::VisualProperty *v11;

  *(_QWORD *)this = &off_1E79347D8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::Reference_Rich *)&SnippetUI::_Reference_Rich_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v11, *((const SnippetUI::VisualProperty **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 5) = v11;
    if (*((_QWORD *)a2 + 6))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 6));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 6) = v9;
  return this;
}

void sub_1BFADAA40(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Rich::CopyFrom(SnippetUI::Reference_Rich *this, const SnippetUI::Reference_Rich *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Rich::Clear(this);
    SnippetUI::Reference_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Rich::InternalSwap(SnippetUI::Reference_Rich *this, SnippetUI::Reference_Rich *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  google::protobuf::UnknownFieldSet *v17;

  v4 = (SnippetUI::Reference_Rich *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v17;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
}

void SnippetUI::Reference_Button::InitAsDefaultInstance(SnippetUI::Reference_Button *this)
{
  qword_1ED1D41B0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D41B8 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Reference_Button::_Internal::label(SnippetUI::Reference_Button::_Internal *this, const SnippetUI::Reference_Button *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Reference_Button::_Internal::action(SnippetUI::Reference_Button::_Internal *this, const SnippetUI::Reference_Button *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Reference_Button::clear_label(SnippetUI::Reference_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Button::clear_action(SnippetUI::Reference_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

SnippetUI::Reference_Button *SnippetUI::Reference_Button::Reference_Button(SnippetUI::Reference_Button *this, const SnippetUI::Reference_Button *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;

  *(_QWORD *)this = &off_1E7934898;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 11) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::Reference_Button *)&SnippetUI::_Reference_Button_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 4));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 4) = v9;
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  return this;
}

void sub_1BFADADC0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Button::CopyFrom(SnippetUI::Reference_Button *this, const SnippetUI::Reference_Button *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Button::Clear(this);
    SnippetUI::Reference_Button::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Button::InternalSwap(SnippetUI::Reference_Button *this, SnippetUI::Reference_Button *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::Reference_Button *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  LODWORD(v14) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v14;
}

void SnippetUI::Reference_Footnote::InitAsDefaultInstance(SnippetUI::Reference_Footnote *this)
{
  qword_1ED1D4430 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4438 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4448 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4450 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4440 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Reference_Footnote::_Internal::text_1(SnippetUI::Reference_Footnote::_Internal *this, const SnippetUI::Reference_Footnote *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Reference_Footnote::_Internal::text_2(SnippetUI::Reference_Footnote::_Internal *this, const SnippetUI::Reference_Footnote *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Reference_Footnote::_Internal::text_3(SnippetUI::Reference_Footnote::_Internal *this, const SnippetUI::Reference_Footnote *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::Reference_Footnote::_Internal::text_4(SnippetUI::Reference_Footnote::_Internal *this, const SnippetUI::Reference_Footnote *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::Reference_Footnote::_Internal::action(SnippetUI::Reference_Footnote::_Internal *this, const SnippetUI::Reference_Footnote *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::Reference_Footnote::clear_text_1(SnippetUI::Reference_Footnote *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Footnote::clear_text_2(SnippetUI::Reference_Footnote *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Footnote::clear_text_3(SnippetUI::Reference_Footnote *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Footnote::clear_text_4(SnippetUI::Reference_Footnote *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::Reference_Footnote::clear_action(SnippetUI::Reference_Footnote *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::Reference_Footnote *SnippetUI::Reference_Footnote::Reference_Footnote(SnippetUI::Reference_Footnote *this, const SnippetUI::Reference_Footnote *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::TextProperty *v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::ActionProperty *v11;
  SnippetUI::TextProperty *v12;

  *(_QWORD *)this = &off_1E7934958;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Reference_Footnote *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::Reference_Footnote *)&SnippetUI::_Reference_Footnote_default_instance_)
  {
    v9 = 0;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 5) = v11;
    if (*((_QWORD *)a2 + 6))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 6) = v12;
    if (*((_QWORD *)a2 + 7))
    {
      v9 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v9, *((const SnippetUI::TextProperty **)a2 + 7));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 7) = v9;
  return this;
}

void sub_1BFADB28C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Reference_Footnote::CopyFrom(SnippetUI::Reference_Footnote *this, const SnippetUI::Reference_Footnote *a2)
{
  if (a2 != this)
  {
    SnippetUI::Reference_Footnote::Clear(this);
    SnippetUI::Reference_Footnote::MergeFrom(this, a2);
  }
}

void SnippetUI::Reference_Footnote::InternalSwap(SnippetUI::Reference_Footnote *this, SnippetUI::Reference_Footnote *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::UnknownFieldSet *v18;

  v4 = (SnippetUI::Reference_Footnote *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v18;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
  v17 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v17;
}

void siri::dialogengine::PatternSchemaComponent::GetName(siri::dialogengine::PatternSchemaComponent *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void siri::dialogengine::PatternSchemaComponent::GetNameWithVariant(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  size_t v7;
  std::string *p_p;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string __p;

  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    if (*(char *)(a1 + 23) >= 0)
      v7 = *(unsigned __int8 *)(a1 + 23);
    else
      v7 = *(_QWORD *)(a1 + 8);
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v7)
    {
      if (*(char *)(a1 + 23) >= 0)
        v9 = (const std::string::value_type *)a1;
      else
        v9 = *(const std::string::value_type **)a1;
      memmove(p_p, v9, v7);
    }
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v7) = 95;
    v10 = *(char *)(a2 + 23);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)a2;
    else
      v11 = *(const std::string::value_type **)a2;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a2 + 23);
    else
      v12 = *(_QWORD *)(a2 + 8);
    v13 = std::string::append(&__p, v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void sub_1BFADB5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *siri::dialogengine::PatternSchemaComponent::GetUsage@<X0>(siri::dialogengine::PatternSchemaComponent *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)a2, *((_QWORD **)this + 3), *((_QWORD **)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 4);
}

uint64_t **siri::dialogengine::PatternSchemaComponent::SetUsage(uint64_t a1, uint64_t **a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 24);
  if (result != a2)
    return (uint64_t **)std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

void siri::dialogengine::PatternSchemaComponent::GetDefaultComponent(siri::dialogengine::PatternSchemaComponent *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 127) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 15);
  }
}

std::string *siri::dialogengine::PatternSchemaComponent::SetDefaultComponent(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 104), a2);
}

void siri::dialogengine::PatternSchemaComponent::GetDefaultVariant(siri::dialogengine::PatternSchemaComponent *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 16), *((_QWORD *)this + 17));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 18);
  }
}

std::string *siri::dialogengine::PatternSchemaComponent::SetDefaultVariant(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 128), a2);
}

std::string *siri::dialogengine::PatternSchemaComponent::GetAllowedVariants@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[19], this[20], 0xAAAAAAAAAAAAAAABLL * (((char *)this[20] - (char *)this[19]) >> 3));
}

void siri::dialogengine::PatternSchemaComponent::SetAllowedVariants(uint64_t a1, uint64_t a2)
{
  std::vector<std::string> *v2;

  v2 = (std::vector<std::string> *)(a1 + 152);
  if (v2 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

char *siri::dialogengine::PatternSchemaComponent::GetFullUsage@<X0>(siri::dialogengine::PatternSchemaComponent *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 48;
  v3 = 48;
  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 7))
  {
    v3 = 24;
    v2 = (char *)this + 24;
  }
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)a2, *(_QWORD **)((char *)this + v3), *((_QWORD **)v2 + 1), (uint64_t)(*((_QWORD *)v2 + 1) - *(_QWORD *)((char *)this + v3)) >> 4);
}

uint64_t **siri::dialogengine::PatternSchemaComponent::SetFullUsage(uint64_t a1, uint64_t **a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 48);
  if (result != a2)
    return (uint64_t **)std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

char *siri::dialogengine::PatternSchemaComponent::GetSupportingUsage@<X0>(siri::dialogengine::PatternSchemaComponent *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 72;
  v3 = 72;
  if (*((_QWORD *)this + 9) == *((_QWORD *)this + 10))
  {
    v3 = 24;
    v2 = (char *)this + 24;
  }
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)a2, *(_QWORD **)((char *)this + v3), *((_QWORD **)v2 + 1), (uint64_t)(*((_QWORD *)v2 + 1) - *(_QWORD *)((char *)this + v3)) >> 4);
}

uint64_t **siri::dialogengine::PatternSchemaComponent::SetSupportingUsage(uint64_t a1, uint64_t **a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 72);
  if (result != a2)
    return (uint64_t **)std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

uint64_t siri::dialogengine::PatternSchemaComponent::GetAllowMultiple(siri::dialogengine::PatternSchemaComponent *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t siri::dialogengine::PatternSchemaComponent::SetAllowMultiple(uint64_t this, char a2)
{
  *(_BYTE *)(this + 96) = a2;
  return this;
}

char *siri::dialogengine::PatternSchemaComponent::GetFullOverrides@<X0>(siri::dialogengine::PatternSchemaComponent *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>((char *)a2, *((_QWORD **)this + 22), *((_QWORD **)this + 23), (uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 4);
}

char *std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BFADB868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **siri::dialogengine::PatternSchemaComponent::SetFullOverrides(uint64_t a1, uint64_t **a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 176);
  if (result != a2)
    return (uint64_t **)std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

char *siri::dialogengine::PatternSchemaComponent::GetSupportingOverrides@<X0>(siri::dialogengine::PatternSchemaComponent *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*,std::shared_ptr<siri::dialogengine::PatternSchemaOverride>*>((char *)a2, *((_QWORD **)this + 25), *((_QWORD **)this + 26), (uint64_t)(*((_QWORD *)this + 26) - *((_QWORD *)this + 25)) >> 4);
}

uint64_t **siri::dialogengine::PatternSchemaComponent::SetSupportingOverrides(uint64_t a1, uint64_t **a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 200);
  if (result != a2)
    return (uint64_t **)std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

std::string *siri::dialogengine::PatternSchemaComponent::GetFullExamples@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[28], this[29], 0xAAAAAAAAAAAAAAABLL * (((char *)this[29] - (char *)this[28]) >> 3));
}

void siri::dialogengine::PatternSchemaComponent::SetFullExamples(uint64_t a1, uint64_t a2)
{
  std::vector<std::string> *v2;

  v2 = (std::vector<std::string> *)(a1 + 224);
  if (v2 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

std::string *siri::dialogengine::PatternSchemaComponent::GetSupportingExamples@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[31], this[32], 0xAAAAAAAAAAAAAAABLL * (((char *)this[32] - (char *)this[31]) >> 3));
}

void siri::dialogengine::PatternSchemaComponent::SetSupportingExamples(uint64_t a1, uint64_t a2)
{
  std::vector<std::string> *v2;

  v2 = (std::vector<std::string> *)(a1 + 248);
  if (v2 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

std::string *siri::dialogengine::PatternSchemaComponent::GetDupes@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[34], this[35], 0xAAAAAAAAAAAAAAABLL * (((char *)this[35] - (char *)this[34]) >> 3));
}

void siri::dialogengine::PatternSchemaComponent::SetDupes(uint64_t a1, uint64_t a2)
{
  std::vector<std::string> *v2;

  v2 = (std::vector<std::string> *)(a1 + 272);
  if (v2 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

BOOL siri::dialogengine::WriteCATSchemaYAML(uint64_t *a1, std::string *a2)
{
  std::string *v4;
  std::string::size_type size;
  std::string::value_type *v6;
  int v7;
  _BOOL8 v8;
  uint64_t v9;
  __int128 v10;
  std::string *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  uint64_t v15;
  int v16;
  char *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  _OWORD *v20;
  char *v21;
  std::string::size_type v22;
  char *v23;
  char *v24;
  std::string *v25;
  std::string *v26;
  BOOL v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  char *v32;
  std::string::size_type v33;
  std::string::size_type v34;
  char *v35;
  std::string *v36;
  std::string *v37;
  char *v38;
  std::string *v39;
  __int128 v40;
  void *v41;
  std::string *v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  _DWORD v49[2];
  _BYTE *v50;
  char *__s;
  uint64_t v52;
  uint64_t v53;
  std::string v54;

  if (*a1)
  {
    YAML::Emitter::Emitter((YAML::Emitter *)&v50);
    std::string::basic_string[abi:ne180100]<0>(&v48, "1.0");
    v43 = a2;
    v4 = std::string::insert(&v48, 0, "CAT-SCHEMA ");
    v6 = (std::string::value_type *)v4->__r_.__value_.__r.__words[0];
    size = v4->__r_.__value_.__l.__size_;
    v49[0] = v4->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v49 + 3) = *(_DWORD *)((char *)&v4->__r_.__value_.__r.__words[2] + 3);
    v7 = SHIBYTE(v4->__r_.__value_.__r.__words[2]);
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (v7 < 0)
    {
      std::string::__init_copy_ctor_external(&v54, v6, size);
    }
    else
    {
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      v54.__r_.__value_.__l.__size_ = size;
      LODWORD(v54.__r_.__value_.__r.__words[2]) = v49[0];
      *(_DWORD *)((char *)&v54.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v49 + 3);
      *((_BYTE *)&v54.__r_.__value_.__s + 23) = v7;
    }
    YAML::Emitter::Write((uint64_t *)&v50, (unsigned __int8 *)&v54);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v54.__r_.__value_.__l.__data_);
      if ((v7 & 0x80000000) == 0)
        goto LABEL_8;
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v6);
LABEL_8:
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (*v50)
    {
      YAML::Emitter::EmitNewline((YAML::Emitter *)&v50);
      if (*v50)
        YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v50);
    }
    std::string::basic_string[abi:ne180100]<0>(&v54, "name");
    YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    v9 = *a1;
    if (*(char *)(*a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
    }
    else
    {
      v10 = *(_OWORD *)v9;
      v54.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v10;
    }
    YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v54, "description");
    YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    v11 = (std::string *)*a1;
    if (*(char *)(*a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v54, v11[2].__r_.__value_.__l.__data_, v11[2].__r_.__value_.__l.__size_);
    else
      v54 = v11[2];
    YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (*v50)
      YAML::Emitter::EmitNewline((YAML::Emitter *)&v50);
    v12 = (std::string *)*a1;
    if (*(char *)(*a1 + 95) < 0)
      std::string::__init_copy_ctor_external(&v54, v12[3].__r_.__value_.__l.__data_, v12[3].__r_.__value_.__l.__size_);
    else
      v54 = v12[3];
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      v13 = v54.__r_.__value_.__l.__size_;
      operator delete(v54.__r_.__value_.__l.__data_);
      if (!v13)
        goto LABEL_45;
    }
    else if (!*((_BYTE *)&v54.__r_.__value_.__s + 23))
    {
      goto LABEL_45;
    }
    std::string::basic_string[abi:ne180100]<0>(&v54, "extends");
    YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    v14 = (std::string *)*a1;
    if (*(char *)(*a1 + 95) < 0)
      std::string::__init_copy_ctor_external(&v54, v14[3].__r_.__value_.__l.__data_, v14[3].__r_.__value_.__l.__size_);
    else
      v54 = v14[3];
    YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
LABEL_45:
    v15 = *a1;
    if (*(_DWORD *)(*a1 + 120) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v54, "type");
      YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v54, "enum");
      YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      v15 = *a1;
    }
    v16 = *(_DWORD *)(v15 + 124);
    if (v16 != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v54, "value-type");
      YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (v16 == 3)
        v17 = "string";
      else
        v17 = "int";
      std::string::basic_string[abi:ne180100]<0>(&v54, v17);
      YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (*v50)
      YAML::Emitter::EmitNewline((YAML::Emitter *)&v50);
    siri::dialogengine::ObjectSchema::GetInputs(*a1, 0, 0, (uint64_t **)&v54);
    v18 = v54.__r_.__value_.__r.__words[2];
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy((_QWORD *)v54.__r_.__value_.__l.__size_);
    if (v18)
    {
      std::string::basic_string[abi:ne180100]<0>(&v54, "inputs");
      YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (*v50)
        YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v50);
      siri::dialogengine::ObjectSchema::GetInputs(*a1, 0, 0, (uint64_t **)&v48);
      v19 = v48.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v48.__r_.__value_.__l.__data_ != &v48.__r_.__value_.__r.__words[1])
      {
        do
        {
          YAML::Emitter::Write((uint64_t)&v50, (char *)(v19 + 32));
          if (*v50)
            YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v50);
          std::string::basic_string[abi:ne180100]<0>(&v54, "type");
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          v20 = (_OWORD *)(v19 + 88);
          if (*(char *)(v19 + 111) < 0)
          {
            std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v19 + 88), *(_QWORD *)(v19 + 96));
          }
          else
          {
            *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *v20;
            v54.__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 104);
          }
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v54, "description");
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*(char *)(v19 + 135) < 0)
            std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v19 + 112), *(_QWORD *)(v19 + 120));
          else
            v54 = *(std::string *)(v19 + 112);
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v54, "access_mode");
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*(_DWORD *)(v19 + 212) == 1)
            v21 = "public";
          else
            v21 = "private";
          std::string::basic_string[abi:ne180100]<0>(&v54, v21);
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*(char *)(v19 + 159) < 0)
            std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v19 + 136), *(_QWORD *)(v19 + 144));
          else
            v54 = *(std::string *)(v19 + 136);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          {
            v22 = v54.__r_.__value_.__l.__size_;
            operator delete(v54.__r_.__value_.__l.__data_);
            if (v22)
            {
LABEL_97:
              std::string::basic_string[abi:ne180100]<0>(&v54, "sample_value");
              YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
              if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v54.__r_.__value_.__l.__data_);
              if (*(char *)(v19 + 111) < 0)
              {
                std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v19 + 88), *(_QWORD *)(v19 + 96));
              }
              else
              {
                *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *v20;
                v54.__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 104);
              }
              YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
              if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v54.__r_.__value_.__l.__data_);
            }
          }
          else if (*((_BYTE *)&v54.__r_.__value_.__s + 23))
          {
            goto LABEL_97;
          }
          std::string::basic_string[abi:ne180100]<0>(&v54, "optional");
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*(_BYTE *)(v19 + 209))
            v23 = "yes";
          else
            v23 = "no";
          std::string::basic_string[abi:ne180100]<0>(&v54, v23);
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v54, "redacted");
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*(_BYTE *)(v19 + 210))
            v24 = "yes";
          else
            v24 = "no";
          std::string::basic_string[abi:ne180100]<0>(&v54, v24);
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*v50)
            YAML::Emitter::EmitEndMap((YAML::Emitter *)&v50);
          v25 = *(std::string **)(v19 + 8);
          if (v25)
          {
            do
            {
              v26 = v25;
              v25 = (std::string *)v25->__r_.__value_.__r.__words[0];
            }
            while (v25);
          }
          else
          {
            do
            {
              v26 = *(std::string **)(v19 + 16);
              v27 = v26->__r_.__value_.__r.__words[0] == v19;
              v19 = (std::string::size_type)v26;
            }
            while (!v27);
          }
          v19 = (std::string::size_type)v26;
        }
        while (v26 != (std::string *)&v48.__r_.__value_.__r.__words[1]);
      }
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy((_QWORD *)v48.__r_.__value_.__l.__size_);
      if (*v50)
        YAML::Emitter::EmitEndMap((YAML::Emitter *)&v50);
    }
    siri::dialogengine::ObjectSchema::GetProperties(*a1, 0, 0, &v54);
    v28 = v54.__r_.__value_.__r.__words[2];
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy((_QWORD *)v54.__r_.__value_.__l.__size_);
    if (v28)
    {
      std::string::basic_string[abi:ne180100]<0>(&v54, "properties");
      YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (*v50)
        YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v50);
      siri::dialogengine::ObjectSchema::GetProperties(*a1, 0, 0, &v48);
      v29 = v48.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v48.__r_.__value_.__l.__data_ != &v48.__r_.__value_.__r.__words[1])
      {
        do
        {
          YAML::Emitter::Write((uint64_t)&v50, (char *)(v29 + 32));
          if (*v50)
            YAML::Emitter::EmitBeginMap((YAML::Emitter *)&v50);
          std::string::basic_string[abi:ne180100]<0>(&v54, "type");
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*(char *)(v29 + 111) < 0)
            std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v29 + 88), *(_QWORD *)(v29 + 96));
          else
            v54 = *(std::string *)(v29 + 88);
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v54, "description");
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*(char *)(v29 + 135) < 0)
            std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v29 + 112), *(_QWORD *)(v29 + 120));
          else
            v54 = *(std::string *)(v29 + 112);
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*(char *)(v29 + 183) < 0)
            std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(v29 + 160), *(_QWORD *)(v29 + 168));
          else
            v47 = *(std::string *)(v29 + 160);
          v30 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
          if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v30 = v47.__r_.__value_.__l.__size_;
          if (v30)
          {
            std::string::basic_string[abi:ne180100]<0>(&v54, "version_added");
            YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v54.__r_.__value_.__l.__data_);
            YAML::Emitter::Write((uint64_t)&v50, (char *)&v47);
          }
          if (*(char *)(v29 + 159) < 0)
            std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v29 + 136), *(_QWORD *)(v29 + 144));
          else
            v46 = *(std::string *)(v29 + 136);
          v31 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v31 = v46.__r_.__value_.__l.__size_;
          if (v31)
          {
            std::string::basic_string[abi:ne180100]<0>(&v54, "sample_value");
            YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v54.__r_.__value_.__l.__data_);
            YAML::Emitter::Write((uint64_t)&v50, (char *)&v46);
          }
          std::string::basic_string[abi:ne180100]<0>(&v54, "optional");
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*(_BYTE *)(v29 + 209))
            v32 = "yes";
          else
            v32 = "no";
          std::string::basic_string[abi:ne180100]<0>(&v54, v32);
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*(char *)(v29 + 239) < 0)
            std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)(v29 + 216), *(_QWORD *)(v29 + 224));
          else
            v45 = *(std::string *)(v29 + 216);
          v33 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v33 = v45.__r_.__value_.__l.__size_;
          if (v33)
          {
            std::string::basic_string[abi:ne180100]<0>(&v54, "semantic_concept");
            YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v54.__r_.__value_.__l.__data_);
            YAML::Emitter::Write((uint64_t)&v50, (char *)&v45);
          }
          if (*(char *)(v29 + 207) < 0)
            std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)(v29 + 184), *(_QWORD *)(v29 + 192));
          else
            v44 = *(std::string *)(v29 + 184);
          v34 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v34 = v44.__r_.__value_.__l.__size_;
          if (v34)
          {
            std::string::basic_string[abi:ne180100]<0>(&v54, "deprecated");
            YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v54.__r_.__value_.__l.__data_);
            YAML::Emitter::Write((uint64_t)&v50, (char *)&v44);
          }
          std::string::basic_string[abi:ne180100]<0>(&v54, "redacted");
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*(_BYTE *)(v29 + 210))
            v35 = "yes";
          else
            v35 = "no";
          std::string::basic_string[abi:ne180100]<0>(&v54, v35);
          YAML::Emitter::Write((uint64_t)&v50, (char *)&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (*v50)
            YAML::Emitter::EmitEndMap((YAML::Emitter *)&v50);
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v45.__r_.__value_.__l.__data_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v47.__r_.__value_.__l.__data_);
          v36 = *(std::string **)(v29 + 8);
          if (v36)
          {
            do
            {
              v37 = v36;
              v36 = (std::string *)v36->__r_.__value_.__r.__words[0];
            }
            while (v36);
          }
          else
          {
            do
            {
              v37 = *(std::string **)(v29 + 16);
              v27 = v37->__r_.__value_.__r.__words[0] == v29;
              v29 = (std::string::size_type)v37;
            }
            while (!v27);
          }
          v29 = (std::string::size_type)v37;
        }
        while (v37 != (std::string *)&v48.__r_.__value_.__r.__words[1]);
      }
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy((_QWORD *)v48.__r_.__value_.__l.__size_);
      if (!*v50)
        goto LABEL_222;
      YAML::Emitter::EmitEndMap((YAML::Emitter *)&v50);
    }
    if (*v50)
    {
      YAML::Emitter::EmitEndMap((YAML::Emitter *)&v50);
      v8 = *v50 != 0;
      if (*v50)
      {
        if (v52)
        {
          v38 = 0;
        }
        else
        {
          __s[v53] = 0;
          v38 = __s;
        }
        std::string::basic_string[abi:ne180100]<0>(&v54, v38);
        siri::dialogengine::WriteFileFromString(v43, (uint64_t)&v54);
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_231;
        v41 = (void *)v54.__r_.__value_.__r.__words[0];
LABEL_230:
        operator delete(v41);
LABEL_231:
        YAML::Emitter::~Emitter((YAML::Emitter *)&v50);
        return v8;
      }
LABEL_223:
      std::operator+<char>();
      v39 = std::string::append(&v48, " to YAML...");
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v54, 3u);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_231;
      v41 = (void *)v48.__r_.__value_.__r.__words[0];
      goto LABEL_230;
    }
LABEL_222:
    v8 = 0;
    goto LABEL_223;
  }
  return 0;
}

void sub_1BFADC7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45)
{
  YAML::Emitter::~Emitter((YAML::Emitter *)&a45);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectInput>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectProperty>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectProperty>,0>(uint64_t a1)
{
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectInput>,0>(uint64_t a1)
{
  siri::dialogengine::PropertyBase::~PropertyBase((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

BOOL siri::dialogengine::WriteCATSchemaBinary(uint64_t *a1, std::string *a2, char a3)
{
  uint64_t v6;
  __int128 v7;
  _BOOL8 v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  std::string::size_type v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  siri::dialogengine::SchemaBinary::Input *v22;
  uint64_t v23;
  const std::string *v24;
  std::string *v25;
  _BOOL4 v26;
  char *v27;
  char v28;
  std::string *v29;
  std::string *v30;
  BOOL v31;
  std::string::size_type v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  siri::dialogengine::SchemaBinary::Property *v36;
  uint64_t v37;
  const std::string *v38;
  std::string *v39;
  char *v40;
  char v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  __int128 v45;
  std::string v47;
  std::string v48;
  char v49[16];
  int v50;
  google::protobuf::internal::ArenaImpl *v51;
  int v52;
  int v53;
  _DWORD *v54;
  google::protobuf::internal::ArenaImpl *v55;
  int v56;
  int v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL4 v65;
  int v66;
  std::string v67;

  if (!*a1)
    return 0;
  siri::dialogengine::SchemaBinary::Schema::Schema((siri::dialogengine::SchemaBinary::Schema *)v49);
  v50 |= 1u;
  std::string::basic_string[abi:ne180100]<0>(&v67, "SCHEMAPB");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v59, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  v50 |= 4u;
  std::string::basic_string[abi:ne180100]<0>(&v67, "1.0");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v61, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  v6 = *a1;
  if (*(char *)(*a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v67.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v7;
  }
  v50 |= 2u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v60, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v67);
  if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_19;
LABEL_14:
    v9 = (std::string *)*a1;
    if (*(char *)(*a1 + 71) < 0)
      std::string::__init_copy_ctor_external(&v67, v9[2].__r_.__value_.__l.__data_, v9[2].__r_.__value_.__l.__size_);
    else
      v67 = v9[2];
    v50 |= 8u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena(&v62, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v67);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    goto LABEL_19;
  }
  operator delete(v67.__r_.__value_.__l.__data_);
  if ((a3 & 1) == 0)
    goto LABEL_14;
LABEL_19:
  v10 = (std::string *)*a1;
  if (*(char *)(*a1 + 95) < 0)
    std::string::__init_copy_ctor_external(&v67, v10[3].__r_.__value_.__l.__data_, v10[3].__r_.__value_.__l.__size_);
  else
    v67 = v10[3];
  v50 |= 0x10u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v63, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  v11 = *a1;
  v12 = *(_DWORD *)(*a1 + 120) == 1;
  v13 = v50 | 0x40;
  v50 |= 0x40u;
  v65 = v12;
  if (*(char *)(v11 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v11 + 96), *(_QWORD *)(v11 + 104));
    v13 = v50;
  }
  else
  {
    v67 = *(std::string *)(v11 + 96);
  }
  v50 = v13 | 0x20;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v64, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 124);
  if (v15 == 2)
    v16 = 1;
  else
    v16 = 2;
  if (v15 == 3)
    v17 = 0;
  else
    v17 = v16;
  v50 |= 0x80u;
  v66 = v17;
  siri::dialogengine::ObjectSchema::GetInputs(v14, 0, 0, (uint64_t **)&v67);
  v18 = v67.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v67.__r_.__value_.__l.__data_ != &v67.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      v19 = v54;
      if (!v54)
        break;
      v20 = v52;
      v21 = *v54;
      if (v52 >= *v54)
      {
        if (v21 == v53)
        {
LABEL_41:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v51, v21 + 1);
          v19 = v54;
          v21 = *v54;
        }
        *v19 = v21 + 1;
        v22 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::SchemaBinary::Input>(v51);
        v23 = v52++;
        *(_QWORD *)&v54[2 * v23 + 2] = v22;
        goto LABEL_43;
      }
      ++v52;
      v22 = *(siri::dialogengine::SchemaBinary::Input **)&v54[2 * v20 + 2];
LABEL_43:
      v24 = (const std::string *)(v18 + 32);
      v25 = (std::string *)*((_QWORD *)v22 + 3);
      *((_DWORD *)v22 + 4) |= 1u;
      if (v25 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v22 + 3, (uint64_t)v24);
      else
        std::string::operator=(v25, v24);
      if (*(char *)(v18 + 111) < 0)
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v18 + 88), *(_QWORD *)(v18 + 96));
      else
        v48 = *(std::string *)(v18 + 88);
      *((_DWORD *)v22 + 4) |= 2u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v22 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      v26 = *(_DWORD *)(v18 + 212) == 1;
      *((_DWORD *)v22 + 4) |= 0x20u;
      *((_DWORD *)v22 + 16) = v26;
      if ((a3 & 1) == 0)
      {
        if (*(char *)(v18 + 135) < 0)
          std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v18 + 112), *(_QWORD *)(v18 + 120));
        else
          v48 = *(std::string *)(v18 + 112);
        *((_DWORD *)v22 + 4) |= 8u;
        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v22 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (*(char *)(v18 + 159) < 0)
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v18 + 136), *(_QWORD *)(v18 + 144));
      else
        v48 = *(std::string *)(v18 + 136);
      *((_DWORD *)v22 + 4) |= 0x10u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v22 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(v18 + 209))
        v27 = "yes";
      else
        v27 = "no";
      std::string::basic_string[abi:ne180100]<0>(&v48, v27);
      *((_DWORD *)v22 + 4) |= 4u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v22 + 5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      v28 = *(_BYTE *)(v18 + 210);
      *((_DWORD *)v22 + 4) |= 0x40u;
      *((_BYTE *)v22 + 68) = v28;
      v29 = *(std::string **)(v18 + 8);
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (std::string *)v29->__r_.__value_.__r.__words[0];
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = *(std::string **)(v18 + 16);
          v31 = v30->__r_.__value_.__r.__words[0] == v18;
          v18 = (std::string::size_type)v30;
        }
        while (!v31);
      }
      v18 = (std::string::size_type)v30;
      if (v30 == (std::string *)&v67.__r_.__value_.__r.__words[1])
        goto LABEL_73;
    }
    v21 = v53;
    goto LABEL_41;
  }
LABEL_73:
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy((_QWORD *)v67.__r_.__value_.__l.__size_);
  siri::dialogengine::ObjectSchema::GetProperties(*a1, 0, 0, &v67);
  v32 = v67.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v67.__r_.__value_.__l.__data_ != &v67.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      v33 = v58;
      if (!v58)
        break;
      v34 = v56;
      v35 = *v58;
      if (v56 < *v58)
      {
        ++v56;
        v36 = *(siri::dialogengine::SchemaBinary::Property **)&v58[2 * v34 + 2];
        goto LABEL_81;
      }
      if (v35 == v57)
        goto LABEL_79;
LABEL_80:
      *v33 = v35 + 1;
      v36 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::SchemaBinary::Property>(v55);
      v37 = v56++;
      *(_QWORD *)&v58[2 * v37 + 2] = v36;
LABEL_81:
      v38 = (const std::string *)(v32 + 32);
      v39 = (std::string *)*((_QWORD *)v36 + 3);
      *((_DWORD *)v36 + 4) |= 1u;
      if (v39 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v36 + 3, (uint64_t)v38);
      else
        std::string::operator=(v39, v38);
      if (*(char *)(v32 + 111) < 0)
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 88), *(_QWORD *)(v32 + 96));
      else
        v48 = *(std::string *)(v32 + 88);
      *((_DWORD *)v36 + 4) |= 2u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v48.__r_.__value_.__l.__data_);
        if ((a3 & 1) == 0)
        {
LABEL_91:
          if (*(char *)(v32 + 135) < 0)
            std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 112), *(_QWORD *)(v32 + 120));
          else
            v48 = *(std::string *)(v32 + 112);
          *((_DWORD *)v36 + 4) |= 4u;
          google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);
        }
      }
      else if ((a3 & 1) == 0)
      {
        goto LABEL_91;
      }
      if (*(char *)(v32 + 239) < 0)
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 216), *(_QWORD *)(v32 + 224));
      else
        v48 = *(std::string *)(v32 + 216);
      *((_DWORD *)v36 + 4) |= 8u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (*(char *)(v32 + 183) < 0)
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 160), *(_QWORD *)(v32 + 168));
      else
        v48 = *(std::string *)(v32 + 160);
      *((_DWORD *)v36 + 4) |= 0x10u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(v32 + 209))
        v40 = "yes";
      else
        v40 = "no";
      std::string::basic_string[abi:ne180100]<0>(&v48, v40);
      *((_DWORD *)v36 + 4) |= 0x40u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (*(char *)(v32 + 207) < 0)
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 184), *(_QWORD *)(v32 + 192));
      else
        v48 = *(std::string *)(v32 + 184);
      *((_DWORD *)v36 + 4) |= 0x20u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (*(char *)(v32 + 159) < 0)
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 136), *(_QWORD *)(v32 + 144));
      else
        v48 = *(std::string *)(v32 + 136);
      *((_DWORD *)v36 + 4) |= 0x80u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v36 + 10, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      v41 = *(_BYTE *)(v32 + 210);
      *((_DWORD *)v36 + 4) |= 0x100u;
      *((_BYTE *)v36 + 88) = v41;
      v42 = *(std::string **)(v32 + 8);
      if (v42)
      {
        do
        {
          v43 = v42;
          v42 = (std::string *)v42->__r_.__value_.__r.__words[0];
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = *(std::string **)(v32 + 16);
          v31 = v43->__r_.__value_.__r.__words[0] == v32;
          v32 = (std::string::size_type)v43;
        }
        while (!v31);
      }
      v32 = (std::string::size_type)v43;
      if (v43 == (std::string *)&v67.__r_.__value_.__r.__words[1])
        goto LABEL_127;
    }
    v35 = v57;
LABEL_79:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v55, v35 + 1);
    v33 = v58;
    v35 = *v58;
    goto LABEL_80;
  }
LABEL_127:
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy((_QWORD *)v67.__r_.__value_.__l.__size_);
  memset(&v67, 0, sizeof(v67));
  if (google::protobuf::MessageLite::SerializeToString(v49, &v67))
  {
    v8 = siri::dialogengine::WriteGzippedFile(a2, (const void **)&v67.__r_.__value_.__l.__data_);
  }
  else
  {
    std::operator+<char>();
    v44 = std::string::append(&v47, " to protobuf...testxml");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v48, 3u);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    v8 = 0;
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  siri::dialogengine::SchemaBinary::Schema::~Schema((siri::dialogengine::SchemaBinary::Schema *)v49);
  return v8;
}

void sub_1BFADD4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  siri::dialogengine::SchemaBinary::Schema::~Schema((siri::dialogengine::SchemaBinary::Schema *)&a22);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::ValidationBase::ValidationBase(_QWORD *this)
{
  this[2] = 0;
  this[3] = 0;
  *this = off_1E793AED8;
  this[1] = this + 2;
  return this;
}

void siri::dialogengine::ValidationBase::~ValidationBase(siri::dialogengine::ValidationBase *this)
{
  *(_QWORD *)this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 2));
}

uint64_t siri::dialogengine::ValidationBase::GetAttributes@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 1);
}

void siri::dialogengine::ValidationBase::GetAttribute(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *__p[2];
  char v9;

  v5 = a1 + 8;
  siri::dialogengine::StringToLower(a2, (uint64_t)__p);
  v6 = std::__tree<std::string>::find<std::string>(v5, (const void **)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (a1 + 16 == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v6 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v6 + 56), *(_QWORD *)(v6 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 56);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
}

void siri::dialogengine::ValidationBase::SetAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1 + 8;
  if (v2 != a2)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(__int128 **)a2, (__int128 *)(a2 + 8));
}

void sub_1BFADD7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFADD898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFADD97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BFADDA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_1BFADDC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a22);
  _Unwind_Resume(a1);
}

void sub_1BFADDCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1BFADDCD0);
}

void sub_1BFADDEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  void *v22;
  void *v23;

  if (a21 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a22);

  _Unwind_Resume(a1);
}

void sub_1BFADE0E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va1);
  if (*(char *)(v3 - 57) < 0)
    operator delete(*(void **)(v3 - 80));
  if (*(char *)(v3 - 33) < 0)
    operator delete(*(void **)(v3 - 56));

  _Unwind_Resume(a1);
}

void sub_1BFADE338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a22);
  _Unwind_Resume(a1);
}

void sub_1BFADE398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1BFADE390);
}

void sub_1BFADE5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  void *v22;
  void *v23;

  if (a21 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a22);

  _Unwind_Resume(a1);
}

void sub_1BFADE7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va1);
  if (*(char *)(v3 - 57) < 0)
    operator delete(*(void **)(v3 - 80));
  if (*(char *)(v3 - 33) < 0)
    operator delete(*(void **)(v3 - 56));

  _Unwind_Resume(a1);
}

void sub_1BFADE8BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFADE980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFADEA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void __assign_helper_atomic_property__24390(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

_QWORD *__copy_helper_atomic_property__24391(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

std::string *siri::dialogengine::DialogPressure::toString(siri::dialogengine::DialogPressure *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatPressure(this, (uint64_t)a2, 0);
}

std::string *siri::dialogengine::FormatPressure(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  double *RequiredNumberParameter;
  double *v7;
  double v8;
  char *OptionalStringParameter;
  char *v10;
  std::string *v11;
  void *v12;
  const char *v13;
  unsigned int v14;
  long double v15;
  unsigned int data;
  siri::dialogengine *v17;
  double v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *size;
  int v26;
  std::string::size_type v27;
  std::string *p_p;
  std::string *v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  const void **v38[3];
  void *v39[2];
  char v40;
  std::string v41;
  char v42;
  double v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47[2];
  void *v48[2];
  __int128 v49;
  void *v50[2];
  void *v51[2];
  __int128 v52;
  std::string v53;
  std::string __p;
  std::string v55;
  void *v56;
  void *v57[2];
  uint64_t v58;
  char v59;
  std::string v60;
  std::string v61;
  std::string v62;
  __int128 v63;
  uint64_t v64[3];
  __int128 v65;
  uint64_t v66[3];
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  v7 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_3:
      v8 = v7[9];
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      v10 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v10)
        {
LABEL_5:
          if (v10[95] < 0)
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
          else
            __p = *(std::string *)(v10 + 3);
LABEL_15:
          v14 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Pressure>((uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v52 = 0u;
          memset(&v53, 0, sizeof(v53));
          *(_OWORD *)v50 = 0u;
          *(_OWORD *)v51 = 0u;
          *(_OWORD *)v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          *(_OWORD *)v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          if (v14 == -1)
          {
            if (v10)
            {
              if (*(char *)(a2 + 31) < 0)
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
              else
                __p = *(std::string *)(a2 + 8);
              v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              v27 = __p.__r_.__value_.__r.__words[0];
              if (v10[95] < 0)
                std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
              else
                v41 = *(std::string *)(v10 + 3);
              p_p = &__p;
              if (v26 < 0)
                p_p = (std::string *)v27;
              v29 = &v41;
              if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v29 = (std::string *)v41.__r_.__value_.__r.__words[0];
              siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Unrecognized 'units' input for variable '%s' of type 'dialog.Pressure': %s", v13, p_p, v29);
              if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v41.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::to_string(&__p, v8);
            siri::dialogengine::SpeakableString::SetString((uint64_t)&v44, (uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              size = (void *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_77;
            }
          }
          else
          {
            siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Pressure>(v8, (uint64_t)a1, a2, (uint64_t)&v41);
            if (LODWORD(v41.__r_.__value_.__l.__data_) == -2)
              v15 = v8;
            else
              v15 = v43;
            if (LODWORD(v41.__r_.__value_.__l.__data_) == -2)
              data = v14;
            else
              data = v41.__r_.__value_.__l.__data_;
            if (v15 == 0.0)
              v17 = 0;
            else
              v17 = (siri::dialogengine *)(fmod(v15, 1000000.0) == 0.0);
            v18 = round(v15);
            if (fabs(v18) >= 1000.0)
              v19 = a3;
            else
              v19 = a3 & 0xFFFFFFF9;
            if (data > 4)
              v20 = "unit#unknownPressureValue";
            else
              v20 = off_1E7934B50[data];
            std::string::basic_string[abi:ne180100]<0>(v39, v20);
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v19 & 1), (uint64_t *)&v37);
            std::string::basic_string[abi:ne180100]<0>(&__p, "approximate");
            *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v37;
            v37 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v19 >> 1) & 1), (uint64_t *)&v36);
            std::string::basic_string[abi:ne180100]<0>(&v55.__r_.__value_.__r.__words[2], "compactDecimalLong");
            *(_OWORD *)v57 = v36;
            v36 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v19 >> 2) & 1), (uint64_t *)&v35);
            std::string::basic_string[abi:ne180100]<0>(&v58, "compactDecimalShort");
            *(_OWORD *)&v60.__r_.__value_.__r.__words[1] = v35;
            v35 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal(v17, (uint64_t *)&v34);
            std::string::basic_string[abi:ne180100]<0>(&v61, "numberIsMultipleOfMillion");
            *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v34;
            v34 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v15, (uint64_t *)&v33);
            std::string::basic_string[abi:ne180100]<0>(&v62.__r_.__value_.__r.__words[2], "number");
            v63 = v33;
            v33 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v18, (uint64_t *)&v32);
            std::string::basic_string[abi:ne180100]<0>(v64, "numberRounded");
            v65 = v32;
            v32 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v31);
            std::string::basic_string[abi:ne180100]<0>(v66, "primaryContent");
            v67 = v31;
            v31 = 0uLL;
            std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v38, (const void **)&__p.__r_.__value_.__l.__data_, 7);
            v21 = 35;
            do
            {
              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v53.__r_.__value_.__r.__words[v21 + 2]);
              if (SHIBYTE(v53.__r_.__value_.__r.__words[v21 + 1]) < 0)
                operator delete(*(void **)((char *)&v52 + v21 * 8 + 8));
              v21 -= 5;
            }
            while (v21 * 8);
            v22 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
            if (*((_QWORD *)&v37 + 1))
            {
              v23 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)v39, v38, (uint64_t)&__p);
            std::string::operator=((std::string *)&v44, &__p);
            std::string::operator=((std::string *)((char *)&v45 + 8), &v55);
            std::string::operator=((std::string *)v47, (const std::string *)&v56);
            std::string::operator=((std::string *)&v48[1], (const std::string *)&v57[1]);
            std::string::operator=((std::string *)v50, &v60);
            std::string::operator=((std::string *)&v51[1], &v61);
            std::string::operator=(&v53, &v62);
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v62.__r_.__value_.__l.__data_);
            if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v61.__r_.__value_.__l.__data_);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v60.__r_.__value_.__l.__data_);
            if (v59 < 0)
              operator delete(v57[1]);
            if (SHIBYTE(v57[0]) < 0)
              operator delete(v56);
            if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v55.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v38[1]);
            if (v40 < 0)
              operator delete(v39[0]);
            if (v42 < 0)
            {
              size = (void *)v41.__r_.__value_.__l.__size_;
LABEL_77:
              operator delete(size);
            }
          }
          v11 = (std::string *)operator new();
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::VariableString::VariableString(v11, &__p, (const siri::dialogengine::SpeakableString *)&v44);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
          if (SHIBYTE(v52) < 0)
            operator delete(v51[1]);
          if (SHIBYTE(v51[0]) < 0)
            operator delete(v50[0]);
          if (SHIBYTE(v49) < 0)
            operator delete(v48[1]);
          if (SHIBYTE(v48[0]) < 0)
            operator delete(v47[0]);
          if (SHIBYTE(v46) < 0)
            operator delete(*((void **)&v45 + 1));
          if (SBYTE7(v45) < 0)
          {
            v12 = (void *)v44;
            goto LABEL_94;
          }
          return v11;
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      goto LABEL_15;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v11 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v44, "");
  siri::dialogengine::VariableString::VariableString((uint64_t)v11, &__p, (uint64_t)&v44);
  if (SBYTE7(v45) < 0)
    operator delete((void *)v44);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_94:
    operator delete(v12);
  }
  return v11;
}

void sub_1BFADF27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a64 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a37);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogPressure::approximate(siri::dialogengine::DialogPressure *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatPressure(this, (uint64_t)a2, 1u);
}

std::string *siri::dialogengine::DialogPressure::compactDecimalLong(siri::dialogengine::DialogPressure *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatPressure(this, (uint64_t)a2, 2u);
}

std::string *siri::dialogengine::DialogPressure::compactDecimalShort(siri::dialogengine::DialogPressure *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatPressure(this, (uint64_t)a2, 4u);
}

uint64_t siri::dialogengine::DialogPressure::units(siri::dialogengine::DialogPressure *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  std::string __p;
  _BYTE v6[8];
  void *v7;
  char v8;

  siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Pressure>(0.0, (uint64_t)this, (uint64_t)a2, (uint64_t)v6);
  v3 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v3, &__p, (uint64_t)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 < 0)
    operator delete(v7);
  return v3;
}

void sub_1BFADF574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v21, 0x10B3C40D3060B95);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogPressure::value(siri::dialogengine::DialogPressure *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  double *RequiredNumberParameter;
  double *v6;
  uint64_t v7;
  void *size;
  std::string __p;
  std::string v11;
  char v12;
  double v13;

  std::string::basic_string[abi:ne180100]<0>(&v11, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&v11.__r_.__value_.__l.__data_, (uint64_t)a2);
  v6 = RequiredNumberParameter;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Pressure>(round(v6[9]), (uint64_t)this, (uint64_t)a2, (uint64_t)&v11);
      v7 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      siri::dialogengine::VariableNumber::VariableNumber(v7, &__p, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v12 < 0)
      {
        size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_10:
        operator delete(size);
        return v7;
      }
      return v7;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v7 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  siri::dialogengine::VariableNumber::VariableNumber(v7, &v11, 0.0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_10;
  }
  return v7;
}

void sub_1BFADF6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v24, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

double siri::dialogengine::ObjectSchema::ObjectSchema(siri::dialogengine::ObjectSchema *this)
{
  double result;

  *((_QWORD *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_QWORD *)&result = 0x100000001;
  *((_QWORD *)this + 15) = 0x100000001;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 16) = (char *)this + 136;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = (char *)this + 160;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  return result;
}

{
  double result;

  *((_QWORD *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_QWORD *)&result = 0x100000001;
  *((_QWORD *)this + 15) = 0x100000001;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 16) = (char *)this + 136;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = (char *)this + 160;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  return result;
}

void siri::dialogengine::ObjectSchema::GetName(siri::dialogengine::ObjectSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void siri::dialogengine::ObjectSchema::GetFilename(siri::dialogengine::ObjectSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

std::string *siri::dialogengine::ObjectSchema::SetFilename(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

void siri::dialogengine::ObjectSchema::GetDescription(siri::dialogengine::ObjectSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

std::string *siri::dialogengine::ObjectSchema::SetDescription(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

void siri::dialogengine::ObjectSchema::GetBaseObject(siri::dialogengine::ObjectSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

std::string *siri::dialogengine::ObjectSchema::SetBaseObject(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 3, a2);
}

void siri::dialogengine::ObjectSchema::GetVersionAdded(siri::dialogengine::ObjectSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 14);
  }
}

std::string *siri::dialogengine::ObjectSchema::SetVersionAdded(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 4, a2);
}

uint64_t siri::dialogengine::ObjectSchema::GetType(siri::dialogengine::ObjectSchema *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t siri::dialogengine::ObjectSchema::SetType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 120) = a2;
  return result;
}

uint64_t siri::dialogengine::ObjectSchema::SetType(uint64_t a1, const char *a2)
{
  int v2;
  uint64_t v3;
  const char *v4;
  uint64_t v6;

  if ((a2[23] & 0x80000000) == 0)
  {
    v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 4)
    {
      if (v2 != 6)
        goto LABEL_14;
      goto LABEL_7;
    }
LABEL_13:
    if (*(_DWORD *)a2 == 1836412517)
    {
      *(_DWORD *)(a1 + 120) = 2;
      return 1;
    }
    goto LABEL_14;
  }
  v4 = a2;
  a2 = *(const char **)a2;
  v3 = *((_QWORD *)v4 + 1);
  if (v3 == 4)
    goto LABEL_13;
  if (v3 != 6)
  {
LABEL_14:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized string for schema type: \"%s\"", a2, a2);
    return 0;
  }
LABEL_7:
  if (*(_DWORD *)a2 != 1701470831 || *((_WORD *)a2 + 2) != 29795)
    goto LABEL_14;
  v6 = 1;
  *(_DWORD *)(a1 + 120) = 1;
  return v6;
}

uint64_t siri::dialogengine::ObjectSchema::GetEnumValueType(siri::dialogengine::ObjectSchema *this)
{
  return *((unsigned int *)this + 31);
}

uint64_t siri::dialogengine::ObjectSchema::SetEnumValueType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 124) = a2;
  return result;
}

uint64_t siri::dialogengine::ObjectSchema::SetEnumValueType(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  int v8;

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    v3 = *((unsigned __int8 *)a2 + 23);
    if (v3 != 3)
    {
      if (v3 != 6)
        goto LABEL_17;
      goto LABEL_7;
    }
LABEL_13:
    if (*(_WORD *)a2 == 28265 && *((_BYTE *)a2 + 2) == 116)
    {
      result = 1;
      v8 = 2;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v5 = a2;
  a2 = (uint64_t *)*a2;
  v4 = v5[1];
  if (v4 == 3)
    goto LABEL_13;
  if (v4 != 6)
  {
LABEL_17:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized string for enum value type: \"%s\"", (const char *)a2, a2);
    result = 0;
    v8 = 1;
    goto LABEL_18;
  }
LABEL_7:
  if (*(_DWORD *)a2 != 1769108595 || *((_WORD *)a2 + 2) != 26478)
    goto LABEL_17;
  result = 1;
  v8 = 3;
LABEL_18:
  *(_DWORD *)(a1 + 124) = v8;
  return result;
}

void siri::dialogengine::ObjectSchema::GetEnumerantNames(siri::dialogengine::ObjectSchema *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  int v3;
  char *v5;
  char *v6;
  unint64_t end;
  __int128 *v8;
  char *v9;
  char *v10;
  BOOL v11;

  v3 = *((_DWORD *)this + 30);
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  a2->__begin_ = 0;
  if (v3 != 1)
  {
    std::vector<std::string>::reserve(a2, *((_QWORD *)this + 24));
    v5 = (char *)*((_QWORD *)this + 22);
    v6 = (char *)this + 184;
    if (v5 != (char *)this + 184)
    {
      end = (unint64_t)a2->__end_;
      do
      {
        v8 = (__int128 *)(v5 + 32);
        if ((std::string *)end >= a2->__end_cap_.__value_)
        {
          end = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, v8);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v8);
          end += 24;
        }
        a2->__end_ = (std::vector<std::string>::pointer)end;
        v9 = (char *)*((_QWORD *)v5 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = *(char **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (char *)*((_QWORD *)v5 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v5;
            v5 = v10;
          }
          while (!v11);
        }
        v5 = v10;
      }
      while (v10 != v6);
    }
  }
}

void sub_1BFADFB90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_1BFADFC48(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectSchema::GetEnumerant(uint64_t a1@<X0>, char *a2@<X1>, siri::dialogengine::ObjectEnumerant *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t *v10;
  char v11;

  if (*(_DWORD *)(a1 + 120) != 2)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"GetEnumerant() is not valid for schema type %d", a2, *(unsigned int *)(a1 + 120));
LABEL_11:
    v11 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_12;
  }
  v4 = a1 + 184;
  v5 = *(_QWORD *)(a1 + 184);
  if (!v5)
    goto LABEL_11;
  v7 = a1 + 192;
  v8 = a1 + 184;
  do
  {
    v9 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), (const void **)a2);
    v10 = (uint64_t *)(v5 + 8);
    if (!v9)
    {
      v10 = (uint64_t *)v5;
      v8 = v5;
    }
    v5 = *v10;
  }
  while (*v10);
  if (v8 == v4 || std::less<std::string>::operator()[abi:ne180100](v7, (const void **)a2, (const void **)(v8 + 32)))
    goto LABEL_11;
  siri::dialogengine::ObjectEnumerant::ObjectEnumerant(a3, (const siri::dialogengine::ObjectEnumerant *)(v8 + 56));
  v11 = 1;
LABEL_12:
  *((_BYTE *)a3 + 96) = v11;
}

siri::dialogengine::ObjectEnumerant *siri::dialogengine::ObjectEnumerant::ObjectEnumerant(siri::dialogengine::ObjectEnumerant *this, const siri::dialogengine::ObjectEnumerant *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_QWORD *)this = &off_1E7939438;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  }
  else
  {
    v4 = *((_OWORD *)a2 + 1);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *((_OWORD *)this + 1) = v4;
  }
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 3);
    *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)this + 3) = v5;
  }
  v6 = (std::string *)((char *)this + 72);
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1BFADFDFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ObjectSchema::AddEnumerant(siri::dialogengine::ObjectSchema *this, const std::string *a2)
{
  const std::string *v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  const char *v8;
  int v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  void *v21;
  void **v22;
  char *v23;
  uint64_t **v24;
  std::string::size_type v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  unsigned __int8 v31;
  std::string v32;

  if (*((_DWORD *)this + 30) != 2)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot add enum value.  Object is not an enum", (const char *)a2);
    return;
  }
  v4 = (const std::string *)&a2->__r_.__value_.__r.__words[2];
  if (a2[1].__r_.__value_.__s.__data_[15] < 0)
  {
    std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)a2->__r_.__value_.__r.__words[2], a2[1].__r_.__value_.__r.__words[0]);
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = a2[1].__r_.__value_.__l.__size_;
  }
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v30.__r_.__value_.__s + 23))
      goto LABEL_8;
LABEL_11:
    std::operator+<char>();
    v6 = std::string::append(&v32, "'");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v30, 3u);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
LABEL_46:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v21 = (void *)v32.__r_.__value_.__r.__words[0];
    goto LABEL_48;
  }
  size = v30.__r_.__value_.__l.__size_;
  operator delete(v30.__r_.__value_.__l.__data_);
  if (!size)
    goto LABEL_11;
LABEL_8:
  if (a2[1].__r_.__value_.__s.__data_[15] < 0)
    std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)a2->__r_.__value_.__r.__words[2], a2[1].__r_.__value_.__r.__words[0]);
  else
    v29 = *v4;
  siri::dialogengine::ObjectSchema::GetEnumerant((uint64_t)this, (char *)&v29, (siri::dialogengine::ObjectEnumerant *)&v30);
  v9 = v31;
  if (v31)
    siri::dialogengine::ObjectEnumerant::~ObjectEnumerant((void **)&v30.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9)
      goto LABEL_18;
    goto LABEL_21;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (!v9)
  {
LABEL_21:
    if (LODWORD(a2->__r_.__value_.__r.__words[1]) != *((_DWORD *)this + 31))
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot add enumerant of type that is different from schema enum value type", v8);
      return;
    }
    if (a2[1].__r_.__value_.__s.__data_[15] < 0)
      std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)a2->__r_.__value_.__r.__words[2], a2[1].__r_.__value_.__r.__words[0]);
    else
      v32 = *v4;
    v22 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)this + 176, &v28, (const void **)&v32.__r_.__value_.__l.__data_);
    v23 = (char *)*v22;
    if (!*v22)
    {
      v24 = (uint64_t **)v22;
      v23 = (char *)operator new(0x98uLL);
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)this + 184;
      *((_OWORD *)v23 + 2) = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
      v25 = v32.__r_.__value_.__r.__words[2];
      memset(&v32, 0, sizeof(v32));
      *((_QWORD *)v23 + 6) = v25;
      *((_QWORD *)v23 + 7) = &off_1E7939438;
      *((_DWORD *)v23 + 16) = 1;
      *((_QWORD *)v23 + 10) = 0;
      *((_QWORD *)v23 + 11) = 0;
      *((_QWORD *)v23 + 9) = 0;
      *((_DWORD *)v23 + 24) = 0;
      *(_OWORD *)(v23 + 104) = 0u;
      *(_OWORD *)(v23 + 120) = 0u;
      *(_OWORD *)(v23 + 136) = 0u;
      v30.__r_.__value_.__s.__data_[16] = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)this + 22, (uint64_t)v28.__r_.__value_.__l.__data_, v24, (uint64_t *)v23);
      v30.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,void *>>>>::reset[abi:ne180100]((uint64_t)&v30);
    }
    *((_DWORD *)v23 + 16) = a2->__r_.__value_.__r.__words[1];
    std::string::operator=((std::string *)v23 + 3, v4);
    *((_DWORD *)v23 + 24) = a2[1].__r_.__value_.__r.__words[2];
    std::string::operator=((std::string *)(v23 + 104), a2 + 2);
    std::string::operator=((std::string *)(v23 + 128), a2 + 3);
    goto LABEL_46;
  }
LABEL_18:
  if (a2[1].__r_.__value_.__s.__data_[15] < 0)
    std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)a2->__r_.__value_.__r.__words[2], a2[1].__r_.__value_.__r.__words[0]);
  else
    v26 = *v4;
  v10 = std::string::insert(&v26, 0, "Attempting to add duplicate enumerant name '");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v27, "' to object '");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = *((char *)this + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)this;
  else
    v15 = *(const std::string::value_type **)this;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)this + 23);
  else
    v16 = *((_QWORD *)this + 1);
  v17 = std::string::append(&v28, v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v32, "'");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v30, 3u);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    v21 = (void *)v26.__r_.__value_.__r.__words[0];
LABEL_48:
    operator delete(v21);
  }
}

void sub_1BFAE0200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectEnumerant>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectEnumerant>,0>(uint64_t a1)
{
  siri::dialogengine::ObjectEnumerant::~ObjectEnumerant((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void siri::dialogengine::ObjectSchema::GetProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  const void ***v8;
  const char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  const void **v13;
  const void **v14;
  const void ***v15;
  BOOL v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  const void **v20;
  _QWORD *v21[2];
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;

  v8 = (const void ***)(a1 + 128);
  std::map<std::string,siri::dialogengine::ObjectProperty>::map[abi:ne180100]((uint64_t)&v24, (const void ***)(a1 + 128));
  if (a3)
    goto LABEL_2;
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_2;
  }
  else if (!*(_BYTE *)(a1 + 95))
  {
    goto LABEL_2;
  }
  if (!a2)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot find inherited object methods when context is NULL", v9);
    std::map<std::string,siri::dialogengine::ObjectProperty>::map[abi:ne180100]((uint64_t)a4, v8);
    v10 = v25;
    goto LABEL_25;
  }
  siri::dialogengine::ObjectRegistry::GetObject(a2, (const std::string::value_type **)(a1 + 72), &v22);
  if (v22)
  {
    siri::dialogengine::ObjectSchema::GetProperties(&v20, v22, a2, 0);
    v13 = v20;
    if (v20 != (const void **)v21)
    {
      do
      {
        std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,siri::dialogengine::ObjectProperty> const&>(&v24, (uint64_t)&v25, v13 + 4, (__int128 *)v13 + 2);
        v14 = (const void **)v13[1];
        if (v14)
        {
          do
          {
            v15 = (const void ***)v14;
            v14 = (const void **)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (const void ***)v13[2];
            v16 = *v15 == v13;
            v13 = (const void **)v15;
          }
          while (!v16);
        }
        v13 = (const void **)v15;
      }
      while (v15 != v21);
    }
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(v21[0]);
  }
  v17 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_2:
  v10 = v25;
  *a4 = v24;
  a4[1] = v10;
  v11 = a4 + 1;
  v12 = v26;
  a4[2] = v26;
  if (v12)
  {
    v10[2] = v11;
    v24 = (uint64_t *)&v25;
    v25 = 0;
    v26 = 0;
    v10 = 0;
  }
  else
  {
    *a4 = v11;
  }
LABEL_25:
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(v10);
}

void sub_1BFAE04E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(a15);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,siri::dialogengine::ObjectProperty>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  uint64_t v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,siri::dialogengine::ObjectProperty> const&>((uint64_t **)a1, v3, v5 + 4, (__int128 *)v5 + 2);
      v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v5[2];
          v8 = *v7 == v5;
          v5 = (const void **)v7;
        }
        while (!v8);
      }
      v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1BFAE05B4(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,siri::dialogengine::ObjectProperty> const&>(uint64_t **a1, uint64_t a2, const void **a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  const void **v13;
  const void **v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18[3];
  uint64_t v19;
  uint64_t v20;

  v6 = a2;
  v8 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2
    && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a3, (const void **)(a2 + 32)))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v6 + 32), a3))
    {
      v19 = v6;
      v20 = v6;
      v12 = (uint64_t **)&v19;
      if (v6)
        return;
LABEL_31:
      v6 = v20;
      goto LABEL_32;
    }
    v12 = (uint64_t **)(v6 + 8);
    v11 = *(uint64_t **)(v6 + 8);
    if (v11)
    {
      v13 = *(const void ***)(v6 + 8);
      do
      {
        v14 = v13;
        v13 = (const void **)*v13;
      }
      while (v13);
    }
    else
    {
      v17 = v6;
      do
      {
        v14 = *(const void ***)(v17 + 16);
        v16 = *v14 == (const void *)v17;
        v17 = (uint64_t)v14;
      }
      while (!v16);
    }
    if (v14 != (const void **)v8)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a3, v14 + 4))
      {
LABEL_29:
        v12 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v20, a3);
        goto LABEL_30;
      }
      v11 = *v12;
    }
    if (v11)
    {
      v20 = (uint64_t)v14;
      v12 = (uint64_t **)v14;
    }
    else
    {
      v20 = v6;
    }
LABEL_30:
    if (*v12)
      return;
    goto LABEL_31;
  }
  if (*a1 == (uint64_t *)v6)
  {
    v10 = v6;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
  {
    do
    {
      v10 = v9;
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9);
  }
  else
  {
    v15 = v6;
    do
    {
      v10 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)v10 == v15;
      v15 = v10;
    }
    while (v16);
  }
  if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v10 + 32), a3))
    goto LABEL_29;
LABEL_16:
  if (*(_QWORD *)v6)
  {
    v20 = v10;
    v12 = (uint64_t **)(v10 + 8);
    goto LABEL_30;
  }
  v20 = v6;
  v12 = (uint64_t **)v6;
LABEL_32:
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::__construct_node<std::pair<std::string const,siri::dialogengine::ObjectProperty> const&>((uint64_t)v18, (uint64_t)a1, a4);
  std::__tree<std::string>::__insert_node_at(a1, v6, v12, v18[0]);
  v18[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
}

std::string *std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::__construct_node<std::pair<std::string const,siri::dialogengine::ObjectProperty> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x128uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  result = std::pair<std::string const,siri::dialogengine::ObjectProperty>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1BFAE07E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectProperty>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,siri::dialogengine::ObjectProperty>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  siri::dialogengine::ObjectProperty::ObjectProperty((siri::dialogengine::ObjectProperty *)&this[1], (const siri::dialogengine::ObjectProperty *)((char *)a2 + 24));
  return this;
}

void sub_1BFAE0894(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ObjectSchema::GetPropertyNames(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::vector<std::string> *a4@<X8>)
{
  _QWORD **v5;
  unint64_t end;
  __int128 *v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  _QWORD **v11;
  _QWORD *v12[3];

  siri::dialogengine::ObjectSchema::GetProperties(a1, a2, a3, &v11);
  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a4, (std::vector<std::string>::size_type)v12[1]);
  v5 = v11;
  if (v11 != v12)
  {
    end = (unint64_t)a4->__end_;
    do
    {
      v7 = (__int128 *)(v5 + 4);
      if ((std::string *)end >= a4->__end_cap_.__value_)
      {
        end = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, v7);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v7);
        end += 24;
      }
      a4->__end_ = (std::vector<std::string>::pointer)end;
      v8 = v5[1];
      if (v8)
      {
        do
        {
          v9 = (_QWORD **)v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD **)v5[2];
          v10 = *v9 == v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != v12);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(v12[0]);
}

void sub_1BFAE0980(_Unwind_Exception *a1, uint64_t a2, _QWORD *a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(a3);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectSchema::GetProperty(uint64_t a1@<X0>, const char *a2@<X1>, const void **a3@<X2>, int a4@<W3>, siri::dialogengine::ObjectProperty *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t *v14;
  uint64_t v15[2];

  if (*(_DWORD *)(a1 + 120) != 1)
    goto LABEL_10;
  v10 = a1 + 136;
  v11 = *(_QWORD *)(a1 + 136);
  if (v11)
  {
    v12 = a1 + 136;
    do
    {
      v13 = std::less<std::string>::operator()[abi:ne180100](a1 + 144, (const void **)(v11 + 32), a3);
      v14 = (uint64_t *)(v11 + 8);
      if (!v13)
      {
        v14 = (uint64_t *)v11;
        v12 = v11;
      }
      v11 = *v14;
    }
    while (*v14);
    if (v12 != v10 && !std::less<std::string>::operator()[abi:ne180100](a1 + 144, a3, (const void **)(v12 + 32)))
    {
      siri::dialogengine::ObjectProperty::ObjectProperty(a5, (const siri::dialogengine::ObjectProperty *)(v12 + 56));
      *((_BYTE *)a5 + 240) = 1;
      return;
    }
  }
  if (a4)
    goto LABEL_10;
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_10;
  }
  else if (!*(_BYTE *)(a1 + 95))
  {
    goto LABEL_10;
  }
  if (a2)
  {
    siri::dialogengine::ObjectRegistry::GetObject((uint64_t)a2, (const std::string::value_type **)(a1 + 72), v15);
    if (v15[0])
    {
      siri::dialogengine::ObjectSchema::GetProperty(a5, v15[0], a2, a3, 0);
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v15);
      return;
    }
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v15);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot find inherited object methods when context is NULL", a2);
  }
LABEL_10:
  *(_BYTE *)a5 = 0;
  *((_BYTE *)a5 + 240) = 0;
}

void sub_1BFAE0AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectSchema::SetProperties(uint64_t a1, const char *a2)
{
  uint64_t **v2;
  const char *v3;
  const char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __int16 v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  const char *v12;
  const char *v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t **v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t **v20;
  _QWORD *v21;
  _QWORD *v22;

  if (*(_DWORD *)(a1 + 120) == 1)
  {
    v2 = (uint64_t **)(a1 + 128);
    if ((const char *)(a1 + 128) != a2)
    {
      v3 = a2 + 8;
      v4 = *(const char **)a2;
      if (*(_QWORD *)(a1 + 144))
      {
        v6 = *(_QWORD *)(a1 + 136);
        v5 = (_QWORD *)(a1 + 136);
        v7 = (_QWORD *)*(v5 - 1);
        *(v5 - 1) = v5;
        *(_QWORD *)(v6 + 16) = 0;
        *v5 = 0;
        v5[1] = 0;
        if (v7[1])
          v8 = (_QWORD *)v7[1];
        else
          v8 = v7;
        v20 = v2;
        v21 = v8;
        v22 = v8;
        if (!v8 || (v21 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8), v4 == v3))
        {
          v13 = v4;
        }
        else
        {
          do
          {
            std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 32));
            std::string::operator=((std::string *)(v8 + 8), (const std::string *)(v4 + 64));
            std::string::operator=((std::string *)(v8 + 11), (const std::string *)(v4 + 88));
            std::string::operator=((std::string *)(v8 + 14), (const std::string *)(v4 + 112));
            std::string::operator=((std::string *)(v8 + 17), (const std::string *)(v4 + 136));
            std::string::operator=((std::string *)(v8 + 20), (const std::string *)(v4 + 160));
            std::string::operator=((std::string *)(v8 + 23), (const std::string *)(v4 + 184));
            v9 = *((_WORD *)v4 + 104);
            *((_BYTE *)v8 + 210) = v4[210];
            *((_WORD *)v8 + 104) = v9;
            std::string::operator=((std::string *)v8 + 9, (const std::string *)v4 + 9);
            std::string::operator=((std::string *)v8 + 10, (const std::string *)v4 + 10);
            std::string::operator=((std::string *)v8 + 11, (const std::string *)v4 + 11);
            *((_WORD *)v8 + 144) = *((_WORD *)v4 + 144);
            v10 = v22;
            leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v19, (const void **)v22 + 4);
            std::__tree<std::string>::__insert_node_at(v2, v19, leaf_high, v10);
            v8 = v21;
            v22 = v21;
            if (v21)
              v21 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v21);
            v12 = (const char *)*((_QWORD *)v4 + 1);
            if (v12)
            {
              do
              {
                v13 = v12;
                v12 = *(const char **)v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                v13 = (const char *)*((_QWORD *)v4 + 2);
                v14 = *(_QWORD *)v13 == (_QWORD)v4;
                v4 = v13;
              }
              while (!v14);
            }
            if (!v8)
              break;
            v4 = v13;
          }
          while (v13 != v3);
        }
        std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v20);
        v4 = v13;
      }
      if (v4 != v3)
      {
        do
        {
          std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::__construct_node<std::pair<std::string const,siri::dialogengine::ObjectProperty> const&>((uint64_t)&v20, (uint64_t)v2, (__int128 *)v4 + 2);
          v15 = (uint64_t *)v20;
          v16 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v19, (const void **)v20 + 4);
          std::__tree<std::string>::__insert_node_at(v2, v19, v16, v15);
          v20 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>>>>::reset[abi:ne180100]((uint64_t)&v20);
          v17 = (const char *)*((_QWORD *)v4 + 1);
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = *(const char **)v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (const char *)*((_QWORD *)v4 + 2);
              v14 = *(_QWORD *)v18 == (_QWORD)v4;
              v4 = v18;
            }
            while (!v14);
          }
          v4 = v18;
        }
        while (v18 != v3);
      }
    }
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Schema is of a type which cannot hold properties", a2);
  }
}

void sub_1BFAE0D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(v2);
  }
  return a1;
}

uint64_t siri::dialogengine::ObjectSchema::SetPropertyRedacted(uint64_t result, const void **a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = result + 136;
  v4 = *(_QWORD *)(result + 136);
  if (v4)
  {
    v7 = result + 144;
    v8 = result + 136;
    do
    {
      result = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v4 + 32), a2);
      v9 = (uint64_t *)(v4 + 8);
      if (!(_DWORD)result)
      {
        v9 = (uint64_t *)v4;
        v8 = v4;
      }
      v4 = *v9;
    }
    while (*v9);
    if (v8 != v3)
    {
      result = std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)(v8 + 32));
      if ((result & 1) == 0)
        *(_BYTE *)(v8 + 210) = a3;
    }
  }
  return result;
}

void siri::dialogengine::ObjectSchema::AddProperty(uint64_t **this, const siri::dialogengine::ObjectProperty *a2)
{
  const std::string *v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  void **v8;
  char *v9;
  uint64_t **v10;
  std::string::size_type v11;
  __int16 v12;
  std::string __p;
  std::string v14;
  uint64_t v15;

  v4 = (const std::string *)((char *)a2 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v14.__r_.__value_.__l.__size_;
    operator delete(v14.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_6;
  }
  else if (*((_BYTE *)&v14.__r_.__value_.__s + 23))
  {
LABEL_6:
    if (*((char *)a2 + 31) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    else
      __p = *v4;
    v8 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)(this + 16), &v15, (const void **)&__p.__r_.__value_.__l.__data_);
    v9 = (char *)*v8;
    if (!*v8)
    {
      v10 = (uint64_t **)v8;
      v9 = (char *)operator new(0x128uLL);
      v14.__r_.__value_.__l.__size_ = (std::string::size_type)(this + 17);
      *((_OWORD *)v9 + 2) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v11 = __p.__r_.__value_.__r.__words[2];
      memset(&__p, 0, sizeof(__p));
      *((_OWORD *)v9 + 4) = 0u;
      *((_OWORD *)v9 + 5) = 0u;
      *((_OWORD *)v9 + 6) = 0u;
      *((_OWORD *)v9 + 7) = 0u;
      *((_OWORD *)v9 + 8) = 0u;
      *((_OWORD *)v9 + 9) = 0u;
      *((_OWORD *)v9 + 10) = 0u;
      *((_OWORD *)v9 + 11) = 0u;
      *((_OWORD *)v9 + 12) = 0u;
      *((_OWORD *)v9 + 13) = 0u;
      *((_OWORD *)v9 + 14) = 0u;
      *((_OWORD *)v9 + 15) = 0u;
      *((_OWORD *)v9 + 16) = 0u;
      *((_OWORD *)v9 + 17) = 0u;
      *((_QWORD *)v9 + 36) = 0;
      *(_WORD *)(v9 + 209) = 257;
      *((_QWORD *)v9 + 6) = v11;
      *((_QWORD *)v9 + 7) = &off_1E793AE08;
      *(_OWORD *)(v9 + 216) = 0u;
      *(_OWORD *)(v9 + 232) = 0u;
      *(_OWORD *)(v9 + 248) = 0u;
      *(_OWORD *)(v9 + 264) = 0u;
      *(_OWORD *)(v9 + 274) = 0u;
      v14.__r_.__value_.__s.__data_[16] = 1;
      std::__tree<std::string>::__insert_node_at(this + 16, v15, v10, (uint64_t *)v9);
      v14.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,void *>>>>::reset[abi:ne180100]((uint64_t)&v14);
    }
    std::string::operator=((std::string *)(v9 + 64), v4);
    std::string::operator=((std::string *)(v9 + 88), (const std::string *)((char *)a2 + 32));
    std::string::operator=((std::string *)(v9 + 112), (const std::string *)((char *)a2 + 56));
    std::string::operator=((std::string *)(v9 + 136), (const std::string *)((char *)a2 + 80));
    std::string::operator=((std::string *)(v9 + 160), (const std::string *)((char *)a2 + 104));
    std::string::operator=((std::string *)(v9 + 184), (const std::string *)((char *)a2 + 128));
    v12 = *((_WORD *)a2 + 76);
    v9[210] = *((_BYTE *)a2 + 154);
    *((_WORD *)v9 + 104) = v12;
    std::string::operator=((std::string *)v9 + 9, (const std::string *)((char *)a2 + 160));
    std::string::operator=((std::string *)v9 + 10, (const std::string *)((char *)a2 + 184));
    std::string::operator=((std::string *)v9 + 11, (const std::string *)((char *)a2 + 208));
    *((_WORD *)v9 + 144) = *((_WORD *)a2 + 116);
    goto LABEL_15;
  }
  std::operator+<char>();
  v6 = std::string::append(&__p, "'");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v14, 3u);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BFAE10A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ObjectSchema::GetInputs(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t **a4@<X8>)
{
  const char *v8;
  const void **v9;
  const void **v10;
  const void ***v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void **v16;
  _QWORD *v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;

  std::map<std::string,siri::dialogengine::ObjectInput>::map[abi:ne180100]((uint64_t)a4, (const void ***)(a1 + 152));
  if (!a3)
  {
    if (*(char *)(a1 + 95) < 0)
    {
      if (!*(_QWORD *)(a1 + 80))
        return;
    }
    else if (!*(_BYTE *)(a1 + 95))
    {
      return;
    }
    if (a2)
    {
      siri::dialogengine::ObjectRegistry::GetObject(a2, (const std::string::value_type **)(a1 + 72), &v18);
      if (v18)
      {
        siri::dialogengine::ObjectSchema::GetInputs(&v16, v18, a2, 0);
        v9 = v16;
        if (v16 != (const void **)v17)
        {
          do
          {
            std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,siri::dialogengine::ObjectInput> const&>(a4, (uint64_t)(a4 + 1), v9 + 4, (__int128 *)v9 + 2);
            v10 = (const void **)v9[1];
            if (v10)
            {
              do
              {
                v11 = (const void ***)v10;
                v10 = (const void **)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v11 = (const void ***)v9[2];
                v12 = *v11 == v9;
                v9 = (const void **)v11;
              }
              while (!v12);
            }
            v9 = (const void **)v11;
          }
          while (v11 != v17);
        }
        std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(v17[0]);
      }
      v13 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    else
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot find inherited object methods when context is NULL", v8);
    }
  }
}

void sub_1BFAE1224(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(*(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,siri::dialogengine::ObjectInput>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  uint64_t v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,siri::dialogengine::ObjectInput> const&>((uint64_t **)a1, v3, v5 + 4, (__int128 *)v5 + 2);
      v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v5[2];
          v8 = *v7 == v5;
          v5 = (const void **)v7;
        }
        while (!v8);
      }
      v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1BFAE12F0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,siri::dialogengine::ObjectInput> const&>(uint64_t **a1, uint64_t a2, const void **a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  const void **v13;
  const void **v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18[3];
  uint64_t v19;
  uint64_t v20;

  v6 = a2;
  v8 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2
    && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a3, (const void **)(a2 + 32)))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v6 + 32), a3))
    {
      v19 = v6;
      v20 = v6;
      v12 = (uint64_t **)&v19;
      if (v6)
        return;
LABEL_31:
      v6 = v20;
      goto LABEL_32;
    }
    v12 = (uint64_t **)(v6 + 8);
    v11 = *(uint64_t **)(v6 + 8);
    if (v11)
    {
      v13 = *(const void ***)(v6 + 8);
      do
      {
        v14 = v13;
        v13 = (const void **)*v13;
      }
      while (v13);
    }
    else
    {
      v17 = v6;
      do
      {
        v14 = *(const void ***)(v17 + 16);
        v16 = *v14 == (const void *)v17;
        v17 = (uint64_t)v14;
      }
      while (!v16);
    }
    if (v14 != (const void **)v8)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a3, v14 + 4))
      {
LABEL_29:
        v12 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v20, a3);
        goto LABEL_30;
      }
      v11 = *v12;
    }
    if (v11)
    {
      v20 = (uint64_t)v14;
      v12 = (uint64_t **)v14;
    }
    else
    {
      v20 = v6;
    }
LABEL_30:
    if (*v12)
      return;
    goto LABEL_31;
  }
  if (*a1 == (uint64_t *)v6)
  {
    v10 = v6;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
  {
    do
    {
      v10 = v9;
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9);
  }
  else
  {
    v15 = v6;
    do
    {
      v10 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)v10 == v15;
      v15 = v10;
    }
    while (v16);
  }
  if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v10 + 32), a3))
    goto LABEL_29;
LABEL_16:
  if (*(_QWORD *)v6)
  {
    v20 = v10;
    v12 = (uint64_t **)(v10 + 8);
    goto LABEL_30;
  }
  v20 = v6;
  v12 = (uint64_t **)v6;
LABEL_32:
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::__construct_node<std::pair<std::string const,siri::dialogengine::ObjectInput> const&>((uint64_t)v18, (uint64_t)a1, a4);
  std::__tree<std::string>::__insert_node_at(a1, v6, v12, v18[0]);
  v18[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
}

std::string *std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::__construct_node<std::pair<std::string const,siri::dialogengine::ObjectInput> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0xD8uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  result = std::pair<std::string const,siri::dialogengine::ObjectInput>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1BFAE1520(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectInput>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,siri::dialogengine::ObjectInput>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  siri::dialogengine::PropertyBase::PropertyBase((siri::dialogengine::PropertyBase *)&this[1], (const siri::dialogengine::PropertyBase *)((char *)a2 + 24));
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E793ADA8;
  HIDWORD(this[7].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 45);
  return this;
}

void sub_1BFAE15E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ObjectSchema::GetInputNames(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::vector<std::string> *a4@<X8>)
{
  uint64_t *v5;
  unint64_t end;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  _QWORD *v12[3];

  siri::dialogengine::ObjectSchema::GetInputs(a1, a2, a3, &v11);
  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a4, (std::vector<std::string>::size_type)v12[1]);
  v5 = v11;
  if (v11 != (uint64_t *)v12)
  {
    end = (unint64_t)a4->__end_;
    do
    {
      v7 = (__int128 *)(v5 + 4);
      if ((std::string *)end >= a4->__end_cap_.__value_)
      {
        end = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, v7);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v7);
        end += 24;
      }
      a4->__end_ = (std::vector<std::string>::pointer)end;
      v8 = (uint64_t *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != (uint64_t *)v12);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(v12[0]);
}

void sub_1BFAE16D0(_Unwind_Exception *a1, uint64_t a2, _QWORD *a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(a3);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectSchema::GetInput(uint64_t a1@<X0>, const char *a2@<X1>, const void **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v10 = a1 + 160;
  v11 = *(_QWORD *)(a1 + 160);
  if (!v11)
    goto LABEL_8;
  v12 = a1 + 160;
  do
  {
    v13 = std::less<std::string>::operator()[abi:ne180100](a1 + 168, (const void **)(v11 + 32), a3);
    v14 = (uint64_t *)(v11 + 8);
    if (!v13)
    {
      v14 = (uint64_t *)v11;
      v12 = v11;
    }
    v11 = *v14;
  }
  while (*v14);
  if (v12 == v10 || std::less<std::string>::operator()[abi:ne180100](a1 + 168, a3, (const void **)(v12 + 32)))
  {
LABEL_8:
    if (a4)
    {
LABEL_9:
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 160) = 0;
      return;
    }
    if (*(char *)(a1 + 95) < 0)
    {
      if (!*(_QWORD *)(a1 + 80))
        goto LABEL_9;
    }
    else if (!*(_BYTE *)(a1 + 95))
    {
      goto LABEL_9;
    }
    if (!a2)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Cannot find inherited object methods when context is NULL", a2);
      goto LABEL_9;
    }
    siri::dialogengine::ObjectRegistry::GetObject(&v21, a2, a1 + 72);
    if (!v21)
    {
      v18 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      goto LABEL_9;
    }
    siri::dialogengine::ObjectSchema::GetInput(v21, a2, a3, 0);
    v15 = v22;
    if (v22)
    {
      v16 = (unint64_t *)&v22->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    siri::dialogengine::PropertyBase::PropertyBase((siri::dialogengine::PropertyBase *)a5, (const siri::dialogengine::PropertyBase *)(v12 + 56));
    *(_QWORD *)a5 = &off_1E793ADA8;
    *(_DWORD *)(a5 + 156) = *(_DWORD *)(v12 + 212);
    *(_BYTE *)(a5 + 160) = 1;
  }
}

void sub_1BFAE18AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectSchema::ResolveInput(uint64_t a1@<X0>, const char *a2@<X1>, const void **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  std::string *v10;
  std::string::size_type size;
  std::string::size_type v12;
  BOOL v13;
  char v14;
  std::string __p;
  void *v16[4];
  std::string v17;
  std::string v18;
  char v19;
  char v20;
  void *v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  __int16 v28;
  char v29;
  int v30;
  char v31;

  *(_OWORD *)(a5 + 8) = 0u;
  v10 = (std::string *)(a5 + 8);
  *(_OWORD *)(a5 + 136) = 0u;
  *(_OWORD *)(a5 + 120) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_WORD *)(a5 + 152) = 256;
  *(_BYTE *)(a5 + 154) = 1;
  *(_QWORD *)a5 = &off_1E793ADA8;
  *(_DWORD *)(a5 + 156) = 0;
  siri::dialogengine::ObjectSchema::GetInput(a1, a2, a3, a4, (uint64_t)&v21);
  if (v31)
  {
    std::string::operator=(v10, &v22);
    std::string::operator=((std::string *)(a5 + 32), &v23);
    std::string::operator=((std::string *)(a5 + 56), &v24);
    std::string::operator=((std::string *)(a5 + 80), &v25);
    std::string::operator=((std::string *)(a5 + 104), &v26);
    std::string::operator=((std::string *)(a5 + 128), &v27);
    *(_WORD *)(a5 + 152) = v28;
    *(_BYTE *)(a5 + 154) = v29;
    *(_DWORD *)(a5 + 156) = v30;
    siri::dialogengine::ObjectSchema::GetProperty(a1, a2, a3, a4, (siri::dialogengine::ObjectProperty *)v16);
    if (!v20)
    {
LABEL_35:
      if (v31)
        siri::dialogengine::PropertyBase::~PropertyBase(&v21);
      return;
    }
    if (*(char *)(a5 + 55) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a5 + 32), *(_QWORD *)(a5 + 40));
    else
      __p = *(std::string *)(a5 + 32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      size = __p.__r_.__value_.__l.__size_;
      operator delete(__p.__r_.__value_.__l.__data_);
      if (size)
        goto LABEL_15;
    }
    else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      goto LABEL_15;
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    else
      __p = v17;
    std::string::operator=((std::string *)(a5 + 32), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_15:
    if (*(char *)(a5 + 79) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a5 + 56), *(_QWORD *)(a5 + 64));
    else
      __p = *(std::string *)(a5 + 56);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = __p.__r_.__value_.__l.__size_;
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v12)
        goto LABEL_22;
    }
    else if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
LABEL_22:
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      else
        __p = v18;
      std::string::operator=((std::string *)(a5 + 56), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v29)
      v13 = v19 == 0;
    else
      v13 = 1;
    v14 = !v13;
    *(_BYTE *)(a5 + 154) = v14;
    if (v20)
      siri::dialogengine::ObjectProperty::~ObjectProperty(v16);
    goto LABEL_35;
  }
}

void sub_1BFAE1B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  void **v46;
  uint64_t v47;

  if (a46)
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a16);
  if (*(_BYTE *)(v47 - 88))
    siri::dialogengine::PropertyBase::~PropertyBase((void **)(v47 - 248));
  siri::dialogengine::PropertyBase::~PropertyBase(v46);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectSchema::SetInputs(uint64_t a1, _QWORD *a2)
{
  uint64_t **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __int16 v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t **v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t **v20;
  _QWORD *v21;
  _QWORD *v22;

  v2 = (uint64_t **)(a1 + 152);
  if ((_QWORD *)(a1 + 152) != a2)
  {
    v3 = a2 + 1;
    v4 = (_QWORD *)*a2;
    if (*(_QWORD *)(a1 + 168))
    {
      v6 = *(_QWORD *)(a1 + 160);
      v5 = (_QWORD *)(a1 + 160);
      v7 = (_QWORD *)*(v5 - 1);
      *(v5 - 1) = v5;
      *(_QWORD *)(v6 + 16) = 0;
      *v5 = 0;
      v5[1] = 0;
      if (v7[1])
        v8 = (_QWORD *)v7[1];
      else
        v8 = v7;
      v20 = v2;
      v21 = v8;
      v22 = v8;
      if (!v8 || (v21 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8), v4 == v3))
      {
        v13 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          std::string::operator=((std::string *)(v8 + 8), (const std::string *)(v4 + 8));
          std::string::operator=((std::string *)(v8 + 11), (const std::string *)(v4 + 11));
          std::string::operator=((std::string *)(v8 + 14), (const std::string *)(v4 + 14));
          std::string::operator=((std::string *)(v8 + 17), (const std::string *)(v4 + 17));
          std::string::operator=((std::string *)(v8 + 20), (const std::string *)(v4 + 20));
          std::string::operator=((std::string *)(v8 + 23), (const std::string *)(v4 + 23));
          v9 = *((_WORD *)v4 + 104);
          *((_BYTE *)v8 + 210) = *((_BYTE *)v4 + 210);
          *((_WORD *)v8 + 104) = v9;
          *((_DWORD *)v8 + 53) = *((_DWORD *)v4 + 53);
          v10 = v22;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v19, (const void **)v22 + 4);
          std::__tree<std::string>::__insert_node_at(v2, v19, leaf_high, v10);
          v8 = v21;
          v22 = v21;
          if (v21)
            v21 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v21);
          v12 = (_QWORD *)v4[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v4[2];
              v14 = *v13 == (_QWORD)v4;
              v4 = v13;
            }
            while (!v14);
          }
          if (!v8)
            break;
          v4 = v13;
        }
        while (v13 != v3);
      }
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v20);
      v4 = v13;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::__construct_node<std::pair<std::string const,siri::dialogengine::ObjectInput> const&>((uint64_t)&v20, (uint64_t)v2, (__int128 *)v4 + 2);
        v15 = (uint64_t *)v20;
        v16 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v19, (const void **)v20 + 4);
        std::__tree<std::string>::__insert_node_at(v2, v19, v16, v15);
        v20 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>>>>::reset[abi:ne180100]((uint64_t)&v20);
        v17 = (_QWORD *)v4[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v4[2];
            v14 = *v18 == (_QWORD)v4;
            v4 = v18;
          }
          while (!v14);
        }
        v4 = v18;
      }
      while (v18 != v3);
    }
  }
}

void sub_1BFAE1DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(v2);
  }
  return a1;
}

void siri::dialogengine::ObjectSchema::AddInput(uint64_t **this, const siri::dialogengine::ObjectInput *a2)
{
  const std::string *v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  void **v8;
  char *v9;
  uint64_t **v10;
  std::string::size_type v11;
  __int16 v12;
  std::string __p;
  std::string v14;
  uint64_t v15;

  v4 = (const std::string *)((char *)a2 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v14.__r_.__value_.__l.__size_;
    operator delete(v14.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_6;
  }
  else if (*((_BYTE *)&v14.__r_.__value_.__s + 23))
  {
LABEL_6:
    if (*((char *)a2 + 31) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    else
      __p = *v4;
    v8 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)(this + 19), &v15, (const void **)&__p.__r_.__value_.__l.__data_);
    v9 = (char *)*v8;
    if (!*v8)
    {
      v10 = (uint64_t **)v8;
      v9 = (char *)operator new(0xD8uLL);
      v14.__r_.__value_.__l.__size_ = (std::string::size_type)(this + 20);
      *((_OWORD *)v9 + 2) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v11 = __p.__r_.__value_.__r.__words[2];
      memset(&__p, 0, sizeof(__p));
      *((_QWORD *)v9 + 26) = 0;
      *((_OWORD *)v9 + 4) = 0u;
      *((_OWORD *)v9 + 5) = 0u;
      *((_OWORD *)v9 + 6) = 0u;
      *((_OWORD *)v9 + 7) = 0u;
      *((_OWORD *)v9 + 8) = 0u;
      *((_OWORD *)v9 + 9) = 0u;
      *((_OWORD *)v9 + 10) = 0u;
      *((_OWORD *)v9 + 11) = 0u;
      *(_WORD *)(v9 + 209) = 257;
      *((_OWORD *)v9 + 12) = 0u;
      *((_QWORD *)v9 + 6) = v11;
      *((_QWORD *)v9 + 7) = &off_1E793ADA8;
      v14.__r_.__value_.__s.__data_[16] = 1;
      std::__tree<std::string>::__insert_node_at(this + 19, v15, v10, (uint64_t *)v9);
      v14.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectInput>,void *>>>>::reset[abi:ne180100]((uint64_t)&v14);
    }
    std::string::operator=((std::string *)(v9 + 64), v4);
    std::string::operator=((std::string *)(v9 + 88), (const std::string *)((char *)a2 + 32));
    std::string::operator=((std::string *)(v9 + 112), (const std::string *)((char *)a2 + 56));
    std::string::operator=((std::string *)(v9 + 136), (const std::string *)((char *)a2 + 80));
    std::string::operator=((std::string *)(v9 + 160), (const std::string *)((char *)a2 + 104));
    std::string::operator=((std::string *)(v9 + 184), (const std::string *)((char *)a2 + 128));
    v12 = *((_WORD *)a2 + 76);
    v9[210] = *((_BYTE *)a2 + 154);
    *((_WORD *)v9 + 104) = v12;
    *((_DWORD *)v9 + 53) = *((_DWORD *)a2 + 39);
    goto LABEL_15;
  }
  std::operator+<char>();
  v6 = std::string::append(&__p, "'");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v14, 3u);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BFAE2038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ObjectSchema::Validate(std::string *this, siri::dialogengine::Context *a2)
{
  std::string::size_type v4;
  char v5;
  const void **i;
  std::string *v7;
  __int128 v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  void *v20;
  int v21;
  std::string *v22;
  __int128 v23;
  int v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *v34;
  __int128 v35;
  int v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string::size_type v43;
  char *v44;
  std::string::size_type v45;
  uint64_t IsValidVariableName;
  std::string *v47;
  __int128 v48;
  int v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  void *v56;
  std::string::size_type v57;
  BOOL IsValidSemanticConceptType;
  BOOL v59;
  std::string *v60;
  __int128 v61;
  int v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  int v69;
  std::string *v70;
  std::string::size_type v71;
  std::string::size_type v72;
  uint64_t v73;
  BOOL v74;
  BOOL IsValidSemanticConcept;
  BOOL v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  int v88;
  std::string *v89;
  std::string::size_type v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  void *v95;
  std::string *v96;
  char v97;
  std::string::size_type v98;
  std::string::size_type v99;
  int v100;
  std::string *v101;
  uint64_t v102;
  std::string *v103;
  int v104;
  int v105;
  int v106;
  _BOOL4 v107;
  std::string *v109;
  __int128 v110;
  size_t v111;
  void *v112;
  int v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  __int128 v119;
  int v120;
  std::string *v121;
  std::string::size_type v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  __int128 v126;
  BOOL v127;
  _BOOL4 v131;
  _BOOL4 v132;
  _BOOL4 v133;
  std::string *v134;
  __int128 v135;
  __int128 *v136;
  std::string::size_type v137;
  std::string::size_type v138;
  int v139;
  std::string *v140;
  uint64_t v141;
  std::string *v142;
  int v143;
  int v144;
  int v145;
  int v146;
  BOOL v148;
  _BOOL4 v149;
  _BOOL4 v150;
  std::string *v151;
  __int128 v152;
  char *v153;
  char *v154;
  siri::dialogengine::ObjectSchema *v155;
  siri::dialogengine::ObjectSchema *v156;
  std::string::size_type v157;
  std::string::size_type v158;
  int v159;
  std::string::size_type v160;
  std::string *v161;
  std::string::size_type v162;
  std::string *v163;
  int v164;
  std::string::size_type *v165;
  std::string *v166;
  __int128 v167;
  siri::dialogengine::ObjectSchema *v168;
  siri::dialogengine::ObjectSchema *v169;
  _QWORD *v170;
  std::__shared_weak_count *v171;
  unint64_t *p_shared_owners;
  unint64_t v173;
  std::string v175;
  std::string __s1;
  void *v177;
  std::string v178;
  int v179;
  char v180;
  std::string v181;
  std::string v182;
  std::string v183;
  std::string __p;
  void *v185;
  int v186;
  std::string v187;
  int v188;
  std::string __s;
  uint64_t v190;
  std::__shared_weak_count *v191;
  std::string v192;
  std::string v193;
  std::string v194;
  std::string v195;
  uint64_t v196;
  const void **v197;
  _BYTE v198[16];

  if (!a2)
  {
    v5 = 0;
    return v5 & 1;
  }
  siri::dialogengine::ObjectSchema::GetProperties((uint64_t)this, (uint64_t)a2, 0, &v196);
  siri::dialogengine::ObjectSchema::GetInputs((uint64_t)this, (uint64_t)a2, 0, (uint64_t **)&__s1);
  v4 = __s1.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)__s1.__r_.__value_.__l.__data_ != &__s1.__r_.__value_.__r.__words[1])
  {
    v5 = 1;
    while (1)
    {
      std::pair<std::string const,siri::dialogengine::ObjectInput>::pair[abi:ne180100](&__p, (__int128 *)(v4 + 32));
      if (v188 == 1)
        break;
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v195, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      else
        v195 = v187;
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
      {
        size = v195.__r_.__value_.__l.__size_;
        operator delete(v195.__r_.__value_.__l.__data_);
        if (!size)
        {
LABEL_19:
          std::operator+<char>();
          v10 = std::string::append(&v193, "' has no type definition in file: ");
          v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v194.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v192, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
          else
            v192 = *this;
          if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12 = &v192;
          else
            v12 = (std::string *)v192.__r_.__value_.__r.__words[0];
          if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v13 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
          else
            v13 = v192.__r_.__value_.__l.__size_;
LABEL_35:
          v14 = std::string::append(&v194, (const std::string::value_type *)v12, v13);
          v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v195.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v195);
          if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v195.__r_.__value_.__l.__data_);
          if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v192.__r_.__value_.__l.__data_);
          if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v194.__r_.__value_.__l.__data_);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193.__r_.__value_.__l.__data_);
          v5 = 0;
        }
      }
      else if (!*((_BYTE *)&v195.__r_.__value_.__s + 23))
      {
        goto LABEL_19;
      }
LABEL_44:
      siri::dialogengine::PropertyBase::~PropertyBase(&v185);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v16 = *(std::string **)(v4 + 8);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = *(std::string **)(v4 + 16);
          v74 = v17->__r_.__value_.__r.__words[0] == v4;
          v4 = (std::string::size_type)v17;
        }
        while (!v74);
      }
      v4 = (std::string::size_type)v17;
      if (v17 == (std::string *)&__s1.__r_.__value_.__r.__words[1])
        goto LABEL_55;
    }
    for (i = v197; i; i = (const void **)*i)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v198, (const void **)&__p.__r_.__value_.__l.__data_, i + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v198, i + 4, (const void **)&__p.__r_.__value_.__l.__data_))goto LABEL_44;
        ++i;
      }
    }
    std::operator+<char>();
    v7 = std::string::append(&v193, "' not present in declared properties in file: ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v194.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v192, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
    else
      v192 = *this;
    if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v192;
    else
      v12 = (std::string *)v192.__r_.__value_.__r.__words[0];
    if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
    else
      v13 = v192.__r_.__value_.__l.__size_;
    goto LABEL_35;
  }
  v5 = 1;
LABEL_55:
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy((_QWORD *)__s1.__r_.__value_.__l.__size_);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_)
    {
LABEL_57:
      if (siri::dialogengine::IsValidTypeName((uint64_t)this))
        goto LABEL_67;
      std::operator+<char>();
      v18 = std::string::append(&__s1, "'");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_65:
        operator delete(v20);
        goto LABEL_66;
      }
      goto LABEL_66;
    }
  }
  else if (*((_BYTE *)&this->__r_.__value_.__s + 23))
  {
    goto LABEL_57;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Type name is empty in schema file ('name:' field)");
  siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v20 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_65;
  }
LABEL_66:
  v5 = 0;
LABEL_67:
  v21 = SHIBYTE(this[3].__r_.__value_.__r.__words[2]);
  if (v21 < 0)
  {
    if (!this[3].__r_.__value_.__l.__size_)
      goto LABEL_87;
  }
  else if (!*((_BYTE *)&this[3].__r_.__value_.__s + 23))
  {
    goto LABEL_87;
  }
  if (!siri::dialogengine::IsValidTypeName((uint64_t)&this[3]))
  {
    std::operator+<char>();
    v22 = std::string::append(&v194, "' in '");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v195.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v24 >= 0)
      v25 = this;
    else
      v25 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v24 >= 0)
      v26 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      v26 = this->__r_.__value_.__l.__size_;
    v27 = std::string::append(&v195, (const std::string::value_type *)v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __s1.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&__s1, "'");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v195.__r_.__value_.__l.__data_);
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v194.__r_.__value_.__l.__data_);
    v5 = 0;
    LOBYTE(v21) = *((_BYTE *)&this[3].__r_.__value_.__s + 23);
  }
LABEL_87:
  v190 = 0;
  v191 = 0;
  if ((v21 & 0x80) == 0)
  {
    if (!(_BYTE)v21)
      goto LABEL_116;
LABEL_91:
    if (LODWORD(this[5].__r_.__value_.__l.__data_) == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Enum schema must not specify a base class");
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v5 = 0;
    }
    siri::dialogengine::ObjectRegistry::GetObject((uint64_t)a2, (const std::string::value_type **)&this[3].__r_.__value_.__l.__data_, (uint64_t *)&__p);
    std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](&v190, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v31 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (!v190)
    {
      std::operator+<char>();
      v34 = std::string::append(&v194, "' does not exist in '");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v195.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      v36 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v36 >= 0)
        v37 = this;
      else
        v37 = (std::string *)this->__r_.__value_.__r.__words[0];
      if (v36 >= 0)
        v38 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      else
        v38 = this->__r_.__value_.__l.__size_;
      v39 = std::string::append(&v195, (const std::string::value_type *)v37, v38);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = std::string::append(&__s1, "'");
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v195.__r_.__value_.__l.__data_);
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v194.__r_.__value_.__l.__data_);
      v5 = 0;
    }
    goto LABEL_116;
  }
  if (this[3].__r_.__value_.__l.__size_)
    goto LABEL_91;
LABEL_116:
  v43 = this[5].__r_.__value_.__l.__size_;
  if ((std::string::size_type *)v43 != &this[5].__r_.__value_.__r.__words[2])
  {
    v44 = &this[6].__r_.__value_.__s.__data_[16];
    do
    {
      std::pair<std::string const,siri::dialogengine::ObjectProperty>::pair[abi:ne180100](&__p, (__int128 *)(v43 + 32));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v195, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v195 = __p;
      v45 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v45 = v195.__r_.__value_.__l.__size_;
      if (v45)
      {
        IsValidVariableName = siri::dialogengine::IsValidVariableName((uint64_t)&v195);
        if ((IsValidVariableName & 1) != 0)
          goto LABEL_143;
        std::operator+<char>();
        v47 = std::string::append(&v192, "' in '");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v193.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v49 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
        if (v49 >= 0)
          v50 = this;
        else
          v50 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v49 >= 0)
          v51 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        else
          v51 = this->__r_.__value_.__l.__size_;
        v52 = std::string::append(&v193, (const std::string::value_type *)v50, v51);
        v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v194.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v54 = std::string::append(&v194, "' (Name must match regex \"[a-zA-Z_][a-zA-Z0-9_\\-]*\")");
        v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        __s1.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        IsValidVariableName = siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__s1);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v194.__r_.__value_.__l.__data_);
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v193.__r_.__value_.__l.__data_);
        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
        {
          v56 = (void *)v192.__r_.__value_.__r.__words[0];
LABEL_141:
          operator delete(v56);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__s1, "Property name is empty in schema file");
        IsValidVariableName = siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__s1);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
          v56 = (void *)__s1.__r_.__value_.__r.__words[0];
          goto LABEL_141;
        }
      }
      v5 = 0;
LABEL_143:
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__s1, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        __s1 = __s;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        v57 = __s1.__r_.__value_.__l.__size_;
        operator delete(__s1.__r_.__value_.__l.__data_);
        if (!v57)
          goto LABEL_224;
      }
      else if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      {
        goto LABEL_224;
      }
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__s1, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      else
        __s1 = v187;
      IsValidSemanticConceptType = siri::dialogengine::IsValidSemanticConceptType(IsValidVariableName, (uint64_t)&__s1);
      v59 = IsValidSemanticConceptType;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__s1.__r_.__value_.__l.__data_);
        if (v59)
          goto LABEL_172;
      }
      else if (IsValidSemanticConceptType)
      {
        goto LABEL_172;
      }
      std::operator+<char>();
      v60 = std::string::append(&v192, "' in '");
      v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v193.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      v62 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v62 >= 0)
        v63 = this;
      else
        v63 = (std::string *)this->__r_.__value_.__r.__words[0];
      if (v62 >= 0)
        v64 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      else
        v64 = this->__r_.__value_.__l.__size_;
      v65 = std::string::append(&v193, (const std::string::value_type *)v63, v64);
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v194.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      v67 = std::string::append(&v194, "' is defined as a semantic concept but is not a string (or string array) type");
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__s1);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v194.__r_.__value_.__l.__data_);
      if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v193.__r_.__value_.__l.__data_);
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v192.__r_.__value_.__l.__data_);
      v5 = 0;
LABEL_172:
      v69 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v69 < 0)
      {
        if (this->__r_.__value_.__l.__size_ != 19)
          goto LABEL_184;
        v70 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      else
      {
        v70 = this;
        if (v69 != 19)
          goto LABEL_184;
      }
      v71 = v70->__r_.__value_.__r.__words[0];
      v72 = v70->__r_.__value_.__l.__size_;
      v73 = *(std::string::size_type *)((char *)&v70->__r_.__value_.__r.__words[1] + 3);
      v74 = v71 == 0x502E676F6C616964 && v72 == 0x6E61486E6F737265;
      if (!v74 || v73 != 0x656C646E61486E6FLL)
        goto LABEL_184;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__s1, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        __s1 = __s;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__s1.__r_.__value_.__l.__size_ != 19)
        {
          operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_184:
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__s1, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            __s1 = __s;
          IsValidSemanticConcept = siri::dialogengine::IsValidSemanticConcept((uint64_t)a2, (const void **)&__s1.__r_.__value_.__l.__data_);
          v77 = IsValidSemanticConcept;
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__s1.__r_.__value_.__l.__data_);
            if (v77)
              goto LABEL_224;
LABEL_191:
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v181, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              v181 = __s;
            v78 = std::string::insert(&v181, 0, "Invalid semantic concept category '");
            v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
            v182.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v182.__r_.__value_.__l.__data_ = v79;
            v78->__r_.__value_.__l.__size_ = 0;
            v78->__r_.__value_.__r.__words[2] = 0;
            v78->__r_.__value_.__r.__words[0] = 0;
            v80 = std::string::append(&v182, "'. No dialog metadata found for property '");
            v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
            v183.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v183.__r_.__value_.__l.__data_ = v81;
            v80->__r_.__value_.__l.__size_ = 0;
            v80->__r_.__value_.__r.__words[2] = 0;
            v80->__r_.__value_.__r.__words[0] = 0;
            if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v82 = &v195;
            else
              v82 = (std::string *)v195.__r_.__value_.__r.__words[0];
            if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v83 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
            else
              v83 = v195.__r_.__value_.__l.__size_;
            v84 = std::string::append(&v183, (const std::string::value_type *)v82, v83);
            v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
            v192.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v85;
            v84->__r_.__value_.__l.__size_ = 0;
            v84->__r_.__value_.__r.__words[2] = 0;
            v84->__r_.__value_.__r.__words[0] = 0;
            v86 = std::string::append(&v192, "' in '");
            v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
            v193.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v87;
            v86->__r_.__value_.__l.__size_ = 0;
            v86->__r_.__value_.__r.__words[2] = 0;
            v86->__r_.__value_.__r.__words[0] = 0;
            v88 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
            if (v88 >= 0)
              v89 = this;
            else
              v89 = (std::string *)this->__r_.__value_.__r.__words[0];
            if (v88 >= 0)
              v90 = HIBYTE(this->__r_.__value_.__r.__words[2]);
            else
              v90 = this->__r_.__value_.__l.__size_;
            v91 = std::string::append(&v193, (const std::string::value_type *)v89, v90);
            v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
            v194.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v92;
            v91->__r_.__value_.__l.__size_ = 0;
            v91->__r_.__value_.__r.__words[2] = 0;
            v91->__r_.__value_.__r.__words[0] = 0;
            v93 = std::string::append(&v194, "'");
            v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
            __s1.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v94;
            v93->__r_.__value_.__l.__size_ = 0;
            v93->__r_.__value_.__r.__words[2] = 0;
            v93->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__s1);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v194.__r_.__value_.__l.__data_);
            if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v193.__r_.__value_.__l.__data_);
            if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v192.__r_.__value_.__l.__data_);
            if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v183.__r_.__value_.__l.__data_);
            if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v182.__r_.__value_.__l.__data_);
            if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
            {
              v95 = (void *)v181.__r_.__value_.__r.__words[0];
              goto LABEL_222;
            }
            goto LABEL_223;
          }
          if (!IsValidSemanticConcept)
            goto LABEL_191;
          goto LABEL_224;
        }
        v131 = *(_QWORD *)__s1.__r_.__value_.__l.__data_ != 0x7079546C69616D65
            || *(_QWORD *)(__s1.__r_.__value_.__r.__words[0] + 8) != 0x54656E6F68707C65
            || *(_QWORD *)(__s1.__r_.__value_.__r.__words[0] + 11) != 0x65707954656E6F68;
        operator delete(__s1.__r_.__value_.__l.__data_);
        if (v131)
          goto LABEL_184;
      }
      else
      {
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) != 19)
          goto LABEL_184;
        v127 = __s1.__r_.__value_.__r.__words[0] == 0x7079546C69616D65
            && __s1.__r_.__value_.__l.__size_ == 0x54656E6F68707C65;
        if (!v127
          || *(std::string::size_type *)((char *)&__s1.__r_.__value_.__r.__words[1] + 3) != 0x65707954656E6F68)
        {
          goto LABEL_184;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&__s1, "emailType");
      v132 = siri::dialogengine::IsValidSemanticConcept((uint64_t)a2, (const void **)&__s1.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__s1, "phoneType");
      v133 = siri::dialogengine::IsValidSemanticConcept((uint64_t)a2, (const void **)&__s1.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if (!v132 && !v133)
      {
        std::string::basic_string[abi:ne180100]<0>(&__s1, "Invalid semantic concept category for special case of 'dialog.PersonHandle'");
        siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__s1);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
          v95 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_222:
          operator delete(v95);
        }
LABEL_223:
        v5 = 0;
      }
LABEL_224:
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v195.__r_.__value_.__l.__size_ != 8)
          goto LABEL_230;
        v96 = (std::string *)v195.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) != 8)
          goto LABEL_230;
        v96 = &v195;
      }
      if (v96->__r_.__value_.__r.__words[0] == 0x676E697274536F74)
      {
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__s1, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
        else
          __s1 = v187;
        v111 = strlen(siri::dialogengine::TYPE_STRING[0]);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v111 != __s1.__r_.__value_.__l.__size_)
          {
            operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_340:
            std::operator+<char>();
            v134 = std::string::append(&v194, "'");
            v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
            __s1.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v135;
            v134->__r_.__value_.__l.__size_ = 0;
            v134->__r_.__value_.__r.__words[2] = 0;
            v134->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__s1);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v194.__r_.__value_.__l.__data_);
            v5 = 0;
            goto LABEL_345;
          }
          if (v111 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v112 = (void *)__s1.__r_.__value_.__r.__words[0];
          v113 = memcmp(__s1.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_STRING[0], v111);
          operator delete(v112);
          if (v113)
            goto LABEL_340;
        }
        else if (v111 != HIBYTE(__s1.__r_.__value_.__r.__words[2])
               || memcmp(&__s1, siri::dialogengine::TYPE_STRING[0], v111))
        {
          goto LABEL_340;
        }
      }
LABEL_230:
      if (v190)
      {
        siri::dialogengine::ObjectSchema::GetProperty(v190, (const char *)a2, (const void **)&v195.__r_.__value_.__l.__data_, 0, (siri::dialogengine::ObjectProperty *)&__s1);
        if (v180)
        {
          if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v194, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
          else
            v194 = v178;
          if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v193, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
          else
            v193 = v187;
          v97 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v98 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
          else
            v98 = v194.__r_.__value_.__l.__size_;
          v99 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
          v100 = SHIBYTE(v193.__r_.__value_.__r.__words[2]);
          if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v99 = v193.__r_.__value_.__l.__size_;
          if (v98 == v99)
          {
            if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v101 = &v193;
            else
              v101 = (std::string *)v193.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
            {
              v107 = memcmp(v194.__r_.__value_.__l.__data_, v101, v194.__r_.__value_.__l.__size_) != 0;
              if ((v100 & 0x80000000) == 0)
                goto LABEL_258;
            }
            else if (*((_BYTE *)&v194.__r_.__value_.__s + 23))
            {
              v102 = HIBYTE(v194.__r_.__value_.__r.__words[2]) - 1;
              v103 = &v194;
              do
              {
                v105 = v103->__r_.__value_.__s.__data_[0];
                v103 = (std::string *)((char *)v103 + 1);
                v104 = v105;
                v106 = v101->__r_.__value_.__s.__data_[0];
                v101 = (std::string *)((char *)v101 + 1);
                v107 = v104 != v106;
              }
              while (v104 == v106 && v102-- != 0);
              if ((SHIBYTE(v193.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_258:
                if ((v97 & 0x80) == 0)
                  goto LABEL_259;
LABEL_263:
                operator delete(v194.__r_.__value_.__l.__data_);
                if (v107)
                  goto LABEL_264;
                goto LABEL_305;
              }
            }
            else
            {
              v107 = 0;
              if ((SHIBYTE(v193.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_258;
            }
          }
          else
          {
            v107 = 1;
            if ((SHIBYTE(v193.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_258;
          }
          operator delete(v193.__r_.__value_.__l.__data_);
          if ((*((_BYTE *)&v194.__r_.__value_.__s + 23) & 0x80) != 0)
            goto LABEL_263;
LABEL_259:
          if (v107)
          {
LABEL_264:
            std::operator+<char>();
            v109 = std::string::append(&v181, "' has type '");
            v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
            v182.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v182.__r_.__value_.__l.__data_ = v110;
            v109->__r_.__value_.__l.__size_ = 0;
            v109->__r_.__value_.__r.__words[2] = 0;
            v109->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v175, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
            else
              v175 = v187;
            if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v114 = &v175;
            else
              v114 = (std::string *)v175.__r_.__value_.__r.__words[0];
            if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v115 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
            else
              v115 = v175.__r_.__value_.__l.__size_;
            v116 = std::string::append(&v182, (const std::string::value_type *)v114, v115);
            v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
            v183.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v183.__r_.__value_.__l.__data_ = v117;
            v116->__r_.__value_.__l.__size_ = 0;
            v116->__r_.__value_.__r.__words[2] = 0;
            v116->__r_.__value_.__r.__words[0] = 0;
            v118 = std::string::append(&v183, "' that differs from the same property in the base type for '");
            v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
            v192.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v119;
            v118->__r_.__value_.__l.__size_ = 0;
            v118->__r_.__value_.__r.__words[2] = 0;
            v118->__r_.__value_.__r.__words[0] = 0;
            v120 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
            if (v120 >= 0)
              v121 = this;
            else
              v121 = (std::string *)this->__r_.__value_.__r.__words[0];
            if (v120 >= 0)
              v122 = HIBYTE(this->__r_.__value_.__r.__words[2]);
            else
              v122 = this->__r_.__value_.__l.__size_;
            v123 = std::string::append(&v192, (const std::string::value_type *)v121, v122);
            v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
            v193.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v124;
            v123->__r_.__value_.__l.__size_ = 0;
            v123->__r_.__value_.__r.__words[2] = 0;
            v123->__r_.__value_.__r.__words[0] = 0;
            v125 = std::string::append(&v193, "'");
            v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
            v194.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v126;
            v125->__r_.__value_.__l.__size_ = 0;
            v125->__r_.__value_.__r.__words[2] = 0;
            v125->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v194);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v194.__r_.__value_.__l.__data_);
            if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v193.__r_.__value_.__l.__data_);
            if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v192.__r_.__value_.__l.__data_);
            if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v183.__r_.__value_.__l.__data_);
            if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v175.__r_.__value_.__l.__data_);
            if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v182.__r_.__value_.__l.__data_);
            if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v181.__r_.__value_.__l.__data_);
            v5 = 0;
          }
LABEL_305:
          if (v180)
            siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__s1.__r_.__value_.__l.__data_);
        }
      }
LABEL_345:
      v136 = (__int128 *)this[6].__r_.__value_.__l.__size_;
      if (v136 != (__int128 *)v44)
      {
        while (1)
        {
          std::pair<std::string const,siri::dialogengine::ObjectInput>::pair[abi:ne180100](&__s1, v136 + 2);
          if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v194, v178.__r_.__value_.__l.__data_, v178.__r_.__value_.__l.__size_);
          else
            v194 = v178;
          if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v137 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
          else
            v137 = v195.__r_.__value_.__l.__size_;
          v138 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
          v139 = SHIBYTE(v194.__r_.__value_.__r.__words[2]);
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v138 = v194.__r_.__value_.__l.__size_;
          if (v137 == v138)
            break;
          v149 = 0;
          if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_386;
LABEL_367:
          if (v179)
            v150 = 0;
          else
            v150 = v149;
          if (v150)
          {
            std::operator+<char>();
            v151 = std::string::append(&v193, "', but you have not defined an access_mode to specify the intended behavior");
            v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
            v194.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v152;
            v151->__r_.__value_.__l.__size_ = 0;
            v151->__r_.__value_.__r.__words[2] = 0;
            v151->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v194);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v194.__r_.__value_.__l.__data_);
            if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v193.__r_.__value_.__l.__data_);
            v5 = 0;
          }
          siri::dialogengine::PropertyBase::~PropertyBase(&v177);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
          v153 = (char *)*((_QWORD *)v136 + 1);
          if (v153)
          {
            do
            {
              v154 = v153;
              v153 = *(char **)v153;
            }
            while (v153);
          }
          else
          {
            do
            {
              v154 = (char *)*((_QWORD *)v136 + 2);
              v74 = *(_QWORD *)v154 == (_QWORD)v136;
              v136 = (__int128 *)v154;
            }
            while (!v74);
          }
          v136 = (__int128 *)v154;
          if (v154 == v44)
            goto LABEL_391;
        }
        if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v140 = &v194;
        else
          v140 = (std::string *)v194.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v195.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v149 = memcmp(v195.__r_.__value_.__l.__data_, v140, v195.__r_.__value_.__l.__size_) == 0;
          if ((v139 & 0x80000000) == 0)
            goto LABEL_367;
        }
        else if (*((_BYTE *)&v195.__r_.__value_.__s + 23))
        {
          v141 = HIBYTE(v195.__r_.__value_.__r.__words[2]) - 1;
          v142 = &v195;
          do
          {
            v144 = v142->__r_.__value_.__s.__data_[0];
            v142 = (std::string *)((char *)v142 + 1);
            v143 = v144;
            v146 = v140->__r_.__value_.__s.__data_[0];
            v140 = (std::string *)((char *)v140 + 1);
            v145 = v146;
            v148 = v141-- != 0;
            v149 = v143 == v145;
          }
          while (v143 == v145 && v148);
          if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_367;
        }
        else
        {
          v149 = 1;
          if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_367;
        }
LABEL_386:
        operator delete(v194.__r_.__value_.__l.__data_);
        goto LABEL_367;
      }
LABEL_391:
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v195.__r_.__value_.__l.__data_);
      siri::dialogengine::ObjectProperty::~ObjectProperty(&v185);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v155 = *(siri::dialogengine::ObjectSchema **)(v43 + 8);
      if (v155)
      {
        do
        {
          v156 = v155;
          v155 = *(siri::dialogengine::ObjectSchema **)v155;
        }
        while (v155);
      }
      else
      {
        do
        {
          v156 = *(siri::dialogengine::ObjectSchema **)(v43 + 16);
          v74 = *(_QWORD *)v156 == v43;
          v43 = (std::string::size_type)v156;
        }
        while (!v74);
      }
      v43 = (std::string::size_type)v156;
    }
    while (v156 != (siri::dialogengine::ObjectSchema *)&this[5].__r_.__value_.__r.__words[2]);
  }
  if (LODWORD(this[5].__r_.__value_.__l.__data_) == 2)
  {
    if (this[6].__r_.__value_.__r.__words[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Enum schema may not hold properites");
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v5 = 0;
    }
    if (this[7].__r_.__value_.__r.__words[0])
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Enum schema may not hold Inputs");
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v5 = 0;
    }
    *(_OWORD *)&__s1.__r_.__value_.__r.__words[1] = 0uLL;
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1.__r_.__value_.__l.__size_;
    v157 = this[7].__r_.__value_.__l.__size_;
    if ((std::string::size_type *)v157 == &this[7].__r_.__value_.__r.__words[2])
    {
      v170 = 0;
    }
    else
    {
      do
      {
        std::pair<std::string const,siri::dialogengine::ObjectEnumerant>::pair[abi:ne180100](&__p, (__int128 *)(v157 + 32));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v195, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v195 = __p;
        v158 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
        if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v158 = v195.__r_.__value_.__l.__size_;
        if (!v158)
        {
          std::string::basic_string[abi:ne180100]<0>(&v194, "Enumerant name is empty in schema file");
          siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v194);
          if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v194.__r_.__value_.__l.__data_);
          v5 = 0;
        }
        if (HIDWORD(this[5].__r_.__value_.__r.__words[0]) == 2)
        {
          if (v186 == 2)
            v159 = v187.__r_.__value_.__r.__words[1];
          else
            v159 = 0;
          LODWORD(v192.__r_.__value_.__l.__data_) = v159;
          v160 = __s1.__r_.__value_.__l.__size_;
          if (__s1.__r_.__value_.__l.__size_)
          {
            v161 = (std::string *)&__s1.__r_.__value_.__r.__words[1];
            do
            {
              v162 = v160;
              v163 = v161;
              v164 = *(_DWORD *)(v160 + 28);
              v165 = (std::string::size_type *)(v160 + 8);
              if (v164 >= v159)
              {
                v165 = (std::string::size_type *)v162;
                v161 = (std::string *)v162;
              }
              v160 = *v165;
            }
            while (v160);
            if (v161 != (std::string *)&__s1.__r_.__value_.__r.__words[1])
            {
              if (v164 < v159)
                v162 = (std::string::size_type)v163;
              if (v159 >= *(_DWORD *)(v162 + 28))
              {
                std::to_string(&v193, v159);
                v166 = std::string::insert(&v193, 0, "Non-unique integer enum value: ");
                v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
                v194.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v167;
                v166->__r_.__value_.__l.__size_ = 0;
                v166->__r_.__value_.__r.__words[2] = 0;
                v166->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v194);
                if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v194.__r_.__value_.__l.__data_);
                if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v193.__r_.__value_.__l.__data_);
                v5 = 0;
              }
            }
          }
          std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)&__s1, (int *)&v192, &v192);
        }
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v195.__r_.__value_.__l.__data_);
        siri::dialogengine::ObjectEnumerant::~ObjectEnumerant(&v185);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v168 = *(siri::dialogengine::ObjectSchema **)(v157 + 8);
        if (v168)
        {
          do
          {
            v169 = v168;
            v168 = *(siri::dialogengine::ObjectSchema **)v168;
          }
          while (v168);
        }
        else
        {
          do
          {
            v169 = *(siri::dialogengine::ObjectSchema **)(v157 + 16);
            v74 = *(_QWORD *)v169 == v157;
            v157 = (std::string::size_type)v169;
          }
          while (!v74);
        }
        v157 = (std::string::size_type)v169;
      }
      while (v169 != (siri::dialogengine::ObjectSchema *)&this[7].__r_.__value_.__r.__words[2]);
      v170 = (_QWORD *)__s1.__r_.__value_.__l.__size_;
    }
    std::__tree<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::__map_value_compare<google::protobuf::StringPiece,std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::less<google::protobuf::StringPiece>,true>,std::allocator<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>>>::destroy((uint64_t)&__s1, v170);
  }
  else if (this[8].__r_.__value_.__r.__words[0])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Enum values may be held only by schema of type enum");
    siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = 0;
  }
  v171 = v191;
  if (v191)
  {
    p_shared_owners = (unint64_t *)&v191->__shared_owners_;
    do
      v173 = __ldaxr(p_shared_owners);
    while (__stlxr(v173 - 1, p_shared_owners));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(v197);
  return v5 & 1;
}

void sub_1BFAE37F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t v64;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v64 - 121) < 0)
    operator delete(*(void **)(v64 - 144));
  std::pair<std::string const,siri::dialogengine::ObjectProperty>::~pair((uint64_t)&a64);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v64 - 256);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(*(_QWORD **)(v64 - 104));
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,siri::dialogengine::ObjectInput>::~pair(uint64_t a1)
{
  siri::dialogengine::PropertyBase::~PropertyBase((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::pair<std::string const,siri::dialogengine::ObjectProperty>::~pair(uint64_t a1)
{
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::pair<std::string const,siri::dialogengine::ObjectEnumerant>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  siri::dialogengine::ObjectEnumerant::ObjectEnumerant((siri::dialogengine::ObjectEnumerant *)&this[1], (const siri::dialogengine::ObjectEnumerant *)((char *)a2 + 24));
  return this;
}

void sub_1BFAE3E34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,siri::dialogengine::ObjectEnumerant>::~pair(uint64_t a1)
{
  siri::dialogengine::ObjectEnumerant::~ObjectEnumerant((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void siri::dialogengine::ObjectRegistry::RegisterObject(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  siri::dialogengine *v6;
  siri::dialogengine *v7;
  uint64_t *v8;
  uint64_t *v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::string *v15;
  __int128 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  siri::dialogengine *v19;
  std::string *v20;
  __int128 v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  const void **v33;
  std::__shared_weak_count *size;
  _QWORD *v35;
  std::string *v36;
  uint64_t *v37;
  std::string *v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  __int128 v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string __p;
  void *v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  if (a1)
  {
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v51, (const siri::dialogengine::RequestInfo *)(a1 + 8));
    v53 = 0;
    v54 = 0;
    v55 = 0;
    std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v53, (uint64_t)v51[1], v52, 0xAAAAAAAAAAAAAAABLL * ((int64_t)(v52 - (unint64_t)v51[1]) >> 5));
    siri::dialogengine::RequestInfo::~RequestInfo(v51);
    if (v54 != v53)
      goto LABEL_7;
  }
  else
  {
    v53 = 0;
    v54 = 0;
    v55 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::GetTemplateDirs((uint64_t)&__p, 1, (uint64_t)v51);
  std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)&v53, (std::string *)v51[0], (std::string *)v51[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v51[1] - (char *)v51[0]) >> 5));
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
  siri::dialogengine::GetRegistryObjects(v6);
  siri::dialogengine::GetObjectsMutexRef(v7);
  std::mutex::lock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
  v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>>>::find<std::string>((const void **)a2);
  if (v8 != &qword_1EF580D88)
  {
    v9 = v8;
    std::operator+<char>();
    v10 = std::string::append(&__p, "\"");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v52 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)v51 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)v51);
    if (SHIBYTE(v52) < 0)
      operator delete(v51[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v12 = v9[8];
    *a3 = v9[7];
    a3[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    std::mutex::unlock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
    goto LABEL_78;
  }
  std::operator+<char>();
  v15 = std::string::append(&__p, "\"");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v52 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)v51 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)v51);
  if (SHIBYTE(v52) < 0)
    operator delete(v51[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::mutex::unlock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
  siri::dialogengine::FindSchemaFile(&v53, a2, (uint64_t)&__p);
  if (!siri::dialogengine::FileExists((uint64_t *)&__p))
  {
    std::operator+<char>();
    v20 = std::string::append(&v47, "' for type: '");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = *(char *)(a2 + 23);
    if (v22 >= 0)
      v23 = (const std::string::value_type *)a2;
    else
      v23 = *(const std::string::value_type **)a2;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(a2 + 23);
    else
      v24 = *(_QWORD *)(a2 + 8);
    v25 = std::string::append(&v48, v23, v24);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v49, "'");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v52 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)v51 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)v51, 3u);
    if (SHIBYTE(v52) < 0)
      operator delete(v51[0]);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_76;
  }
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v51, "catschema.bin");
  v17 = siri::dialogengine::StringEndsWith(&__p, (unsigned __int8 *)v51);
  v18 = v17;
  if (SHIBYTE(v52) < 0)
  {
    operator delete(v51[0]);
    if (v18)
      goto LABEL_23;
  }
  else if (v17)
  {
LABEL_23:
    std::string::basic_string[abi:ne180100]<0>(v51, "");
    siri::dialogengine::ParseCATSchemaBinary(a1, (uint64_t)&__p, (unsigned __int8 *)a2, (uint64_t *)&v49);
    goto LABEL_41;
  }
  std::string::basic_string[abi:ne180100]<0>(v51, "");
  siri::dialogengine::ParseCATSchemaYAML((std::string *)a2, (uint64_t *)a1, (uint64_t)&__p, (std::string **)&v49);
LABEL_41:
  v29 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v29;
  if (SHIBYTE(v52) < 0)
  {
    v46 = v29;
    operator delete(v51[0]);
    v29 = v46;
  }
  if ((_QWORD)v29)
  {
    siri::dialogengine::GetObjectsMutexRef(v19);
    std::mutex::lock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
    v30 = qword_1EF580D88;
    if (qword_1EF580D88)
    {
      v31 = &qword_1EF580D88;
      while (1)
      {
        while (1)
        {
          v32 = (uint64_t *)v30;
          v33 = (const void **)(v30 + 32);
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF580D90, (const void **)a2, (const void **)(v30 + 32)))break;
          v30 = *v32;
          v31 = v32;
          if (!*v32)
            goto LABEL_55;
        }
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF580D90, v33, (const void **)a2))
          break;
        v31 = v32 + 1;
        v30 = v32[1];
        if (!v30)
          goto LABEL_55;
      }
      v35 = (_QWORD *)*v31;
      if (*v31)
      {
LABEL_61:
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v35 + 7, (uint64_t)v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
        std::operator+<char>();
        v38 = std::string::append(&v49, "\"");
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v52 = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)v51 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::Debug((siri::dialogengine *)v51);
        if (SHIBYTE(v52) < 0)
          operator delete(v51[0]);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        v40 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>>>::find<std::string>((const void **)a2);
        if (v40 == &qword_1EF580D88)
        {
          *a3 = 0;
          a3[1] = 0;
        }
        else
        {
          v41 = v40[8];
          *a3 = v40[7];
          a3[1] = v41;
          if (v41)
          {
            v42 = (unint64_t *)(v41 + 8);
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
        }
        std::mutex::unlock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
        size = (std::__shared_weak_count *)v48.__r_.__value_.__l.__size_;
        if (!v48.__r_.__value_.__l.__size_)
          goto LABEL_76;
        goto LABEL_72;
      }
    }
    else
    {
      v31 = &qword_1EF580D88;
      v32 = &qword_1EF580D88;
    }
LABEL_55:
    v35 = operator new(0x48uLL);
    v51[0] = v35;
    v51[1] = &qword_1EF580D88;
    LOBYTE(v52) = 0;
    v36 = (std::string *)(v35 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v35[6] = *(_QWORD *)(a2 + 16);
    }
    v35[7] = 0;
    v35[8] = 0;
    LOBYTE(v52) = 1;
    *v35 = 0;
    v35[1] = 0;
    v35[2] = v32;
    *v31 = (uint64_t)v35;
    v37 = v35;
    if (*(_QWORD *)siri::dialogengine::GetRegistryObjects(void)::objectRegistry)
    {
      siri::dialogengine::GetRegistryObjects(void)::objectRegistry = *(_QWORD *)siri::dialogengine::GetRegistryObjects(void)::objectRegistry;
      v37 = (uint64_t *)*v31;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EF580D88, v37);
    ++qword_1EF580D90;
    v51[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v51);
    goto LABEL_61;
  }
  size = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  *a3 = 0;
  a3[1] = 0;
  if (*((_QWORD *)&v29 + 1))
  {
LABEL_72:
    p_shared_owners = (unint64_t *)&size->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_76:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_78:
  v51[0] = &v53;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
}

void sub_1BFAE44B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a37);
  std::mutex::unlock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a36 < 0)
    operator delete(__p);
  __p = (void *)(v42 - 88);
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetRegistryObjects(siri::dialogengine *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      qword_1EF580D90 = 0;
      qword_1EF580D88 = 0;
      siri::dialogengine::GetRegistryObjects(void)::objectRegistry = (uint64_t)&qword_1EF580D88;
      __cxa_atexit((void (*)(void *))std::map<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>::~map[abi:ne180100], &siri::dialogengine::GetRegistryObjects(void)::objectRegistry, &dword_1BF794000);
    }
  }
}

void siri::dialogengine::GetObjectsMutexRef(siri::dialogengine *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex, &dword_1BF794000);
    }
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>>>::find<std::string>(const void **a1)
{
  uint64_t v1;
  uint64_t *v3;
  _BOOL4 v4;
  uint64_t *v5;

  v1 = qword_1EF580D88;
  if (!qword_1EF580D88)
    return &qword_1EF580D88;
  v3 = &qword_1EF580D88;
  do
  {
    v4 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF580D90, (const void **)(v1 + 32), a1);
    v5 = (uint64_t *)(v1 + 8);
    if (!v4)
    {
      v5 = (uint64_t *)v1;
      v3 = (uint64_t *)v1;
    }
    v1 = *v5;
  }
  while (*v5);
  if (v3 == &qword_1EF580D88
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF580D90, a1, (const void **)v3 + 4))
  {
    return &qword_1EF580D88;
  }
  return v3;
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::ObjectSchema>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void siri::dialogengine::ObjectRegistry::GetObject(uint64_t a1@<X0>, const std::string::value_type **a2@<X1>, uint64_t *a3@<X8>)
{
  const char *v6;
  uint64_t *v7;
  std::string *v8;
  std::string::size_type size;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v17;
  std::string v18;

  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *a2, (std::string::size_type)a2[1]);
  else
    v18 = *(std::string *)a2;
  if (siri::dialogengine::IsArrayType(&v18))
  {
    siri::dialogengine::GetArrayElementType((uint64_t)&v18, &v17);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v18 = v17;
    if (*((char *)a2 + 23) >= 0)
      v7 = (uint64_t *)a2;
    else
      v7 = (uint64_t *)*a2;
    v8 = &v18;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Looking up a schema file for an array type (%s). Assuming %s instead.", v6, v7, v8);
  }
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size)
  {
    siri::dialogengine::ObjectRegistry::RegisterObject((char *)a1, (uint64_t)&v18, a3);
    if (a1)
    {
      v10 = *a3;
      if (*a3)
      {
        v11 = *(_QWORD *)(a1 + 3448);
        v12 = *(std::__shared_weak_count **)(a1 + 3456);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        if (*(char *)(v10 + 47) < 0)
          std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v10 + 24), *(_QWORD *)(v10 + 32));
        else
          v17 = *(std::string *)(v10 + 24);
        siri::dialogengine::TraceWriter::CopySchemaFile(v11, (const void **)&v17.__r_.__value_.__l.__data_);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        if (v12)
        {
          v15 = (unint64_t *)&v12->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_1BFAE49A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v25);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectRegistry::Preload(siri::dialogengine::ObjectRegistry *this, const siri::dialogengine::UpdatableDir *a2)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  __int128 v5;
  _BOOL4 HasExtension;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::string v12;
  std::string v13;
  std::string __p;
  std::vector<std::string> v15;
  _BYTE v16[3512];

  siri::dialogengine::Context::Context((siri::dialogengine::Context *)v16);
  std::string::basic_string[abi:ne180100]<0>(&__p, "schema");
  siri::dialogengine::UpdatableDir::ListDir((uint64_t)this, (uint64_t)&__p, &v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  begin = v15.__begin_;
  end = v15.__end_;
  while (begin != end)
  {
    if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    std::string::basic_string[abi:ne180100]<0>(&v13, "catschema");
    if (siri::dialogengine::HasExtension((uint64_t)&__p, (uint64_t)&v13))
    {
      HasExtension = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v12, "catschema.bin");
      HasExtension = siri::dialogengine::HasExtension((uint64_t)&__p, (uint64_t)&v12);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v13.__r_.__value_.__l.__data_);
      if (HasExtension)
      {
LABEL_15:
        siri::dialogengine::BaseName((uint64_t)&__p, &v12);
        siri::dialogengine::RemoveExtension((uint64_t)&v12, &v13);
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12.__r_.__value_.__l.__data_);
        siri::dialogengine::ObjectRegistry::GetObject((uint64_t)v16, (const std::string::value_type **)&v13.__r_.__value_.__l.__data_, &v10);
        v7 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        std::operator+<char>();
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v12);
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12.__r_.__value_.__l.__data_);
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v13.__r_.__value_.__l.__data_);
      }
    }
    else if (HasExtension)
    {
      goto LABEL_15;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ++begin;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v16);
}

void sub_1BFAE4BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a28 < 0)
    operator delete(__p);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a33);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ObjectRegistry::Clear(siri::dialogengine::ObjectRegistry *this)
{
  siri::dialogengine *v1;
  siri::dialogengine *v2;

  siri::dialogengine::GetObjectsMutexRef(this);
  std::mutex::lock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
  siri::dialogengine::GetRegistryObjects(v1);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)qword_1EF580D88);
  siri::dialogengine::GetRegistryObjects(void)::objectRegistry = (uint64_t)&qword_1EF580D88;
  qword_1EF580D90 = 0;
  qword_1EF580D88 = 0;
  std::mutex::unlock(&siri::dialogengine::GetObjectsMutexRef(void)::objectsMutex);
  siri::dialogengine::ClearSearchPathCaches(v2);
}

void YAML::NodeBuilder::~NodeBuilder(YAML::NodeBuilder *this)
{
  YAML::NodeBuilder::~NodeBuilder(this);
  JUMPOUT(0x1C3B8D890);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E7934B88;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void YAML::NodeBuilder::OnNull(YAML::detail::memory ***a1, uint64_t *a2, uint64_t a3)
{
  YAML::detail::node *v4;
  uint64_t v5;

  v4 = YAML::NodeBuilder::Push(a1, a2, a3);
  YAML::detail::node::mark_defined(v4);
  v5 = **(_QWORD **)v4;
  *(_BYTE *)v5 = 1;
  *(_DWORD *)(v5 + 16) = 1;
  YAML::NodeBuilder::Pop((YAML::NodeBuilder *)a1);
}

void YAML::NodeBuilder::OnAlias(YAML::NodeBuilder *a1, uint64_t a2, uint64_t a3)
{
  YAML::NodeBuilder::Push(a1, *(YAML::detail::node **)(*((_QWORD *)a1 + 7) + 8 * a3));
  YAML::NodeBuilder::Pop(a1);
}

void YAML::NodeBuilder::OnScalar(YAML::detail::memory ***a1, uint64_t *a2, const std::string *a3, uint64_t a4, const std::string *a5)
{
  YAML::detail::node *v8;
  uint64_t v9;

  v8 = YAML::NodeBuilder::Push(a1, a2, a4);
  YAML::detail::node::mark_defined(v8);
  v9 = **(_QWORD **)v8;
  *(_BYTE *)v9 = 1;
  *(_DWORD *)(v9 + 16) = 2;
  std::string::operator=((std::string *)(v9 + 56), a5);
  YAML::detail::node::mark_defined(v8);
  std::string::operator=((std::string *)(**(_QWORD **)v8 + 24), a3);
  YAML::NodeBuilder::Pop((YAML::NodeBuilder *)a1);
}

void YAML::NodeBuilder::OnSequenceStart(YAML::detail::memory ***a1, uint64_t *a2, const std::string *a3, uint64_t a4, int a5)
{
  YAML::detail::node *v7;
  uint64_t v8;

  v7 = YAML::NodeBuilder::Push(a1, a2, a4);
  YAML::detail::node::mark_defined(v7);
  std::string::operator=((std::string *)(**(_QWORD **)v7 + 24), a3);
  YAML::detail::node::mark_defined(v7);
  v8 = **(_QWORD **)v7;
  *(_BYTE *)v8 = 1;
  if (*(_DWORD *)(v8 + 16) != 3)
  {
    *(_DWORD *)(v8 + 16) = 3;
    *(_QWORD *)(v8 + 88) = *(_QWORD *)(v8 + 80);
    *(_QWORD *)(v8 + 104) = 0;
  }
  YAML::detail::node::mark_defined(v7);
  *(_DWORD *)(**(_QWORD **)v7 + 48) = a5;
}

void YAML::NodeBuilder::OnMapStart(uint64_t a1, uint64_t *a2, const std::string *a3, uint64_t a4, int a5)
{
  YAML::detail::node *v8;
  uint64_t v9;

  v8 = YAML::NodeBuilder::Push((YAML::detail::memory ***)a1, a2, a4);
  YAML::detail::node::mark_defined(v8);
  v9 = **(_QWORD **)v8;
  *(_BYTE *)v9 = 1;
  if (*(_DWORD *)(v9 + 16) != 4)
  {
    *(_DWORD *)(v9 + 16) = 4;
    *(_QWORD *)(v9 + 120) = *(_QWORD *)(v9 + 112);
    std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear((_QWORD *)(v9 + 136));
  }
  YAML::detail::node::mark_defined(v8);
  std::string::operator=((std::string *)(**(_QWORD **)v8 + 24), a3);
  YAML::detail::node::mark_defined(v8);
  *(_DWORD *)(**(_QWORD **)v8 + 48) = a5;
  ++*(_QWORD *)(a1 + 104);
}

void YAML::NodeBuilder::OnMapEnd(YAML::NodeBuilder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    __assert_rtn("OnMapEnd", "nodebuilder.cpp", 76, "m_mapDepth > 0");
  *((_QWORD *)this + 13) = v1 - 1;
  YAML::NodeBuilder::Pop(this);
}

void YAML::NodeBuilder::Pop(YAML::NodeBuilder *this)
{
  char *v1;
  char *v2;
  char *v4;
  YAML::detail::node *v5;
  YAML::detail::node *v6;
  YAML::detail::node *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  YAML::detail::memory **v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  YAML::detail::node *v22;
  YAML::detail::memory **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  YAML::detail::node_data **v27;
  unint64_t *v28;
  unint64_t v29;
  YAML::detail::node_data *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  YAML::detail::memory **v47;
  std::__shared_weak_count *v48;

  v2 = (char *)*((_QWORD *)this + 4);
  v1 = (char *)*((_QWORD *)this + 5);
  if (v2 == v1)
    __assert_rtn("Pop", "nodebuilder.cpp", 100, "!m_stack.empty()");
  if (v1 - v2 == 8)
  {
    *((_QWORD *)this + 3) = *(_QWORD *)v2;
    *((_QWORD *)this + 5) = v1 - 8;
    return;
  }
  v6 = (YAML::detail::node *)*((_QWORD *)v1 - 1);
  v4 = v1 - 8;
  v5 = v6;
  *((_QWORD *)this + 5) = v4;
  v7 = (YAML::detail::node *)*((_QWORD *)v4 - 1);
  v8 = *(uint64_t **)v7;
  v9 = **(_QWORD **)v7;
  if (!*(_BYTE *)v9)
    goto LABEL_62;
  v10 = *(_DWORD *)(v9 + 16);
  if (v10 != 4)
  {
    if (v10 == 3)
    {
      v11 = (YAML::detail::memory **)*((_QWORD *)this + 1);
      v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        v15 = *(uint64_t **)v7;
        v16 = (unint64_t *)&v12->__shared_owners_;
        v45 = v12;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        v18 = *v15;
        v19 = (unint64_t *)&v12->__shared_owners_;
        v47 = v11;
        v48 = v12;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      else
      {
        v45 = 0;
        v18 = *v8;
        v47 = v11;
        v48 = 0;
      }
      YAML::detail::node_data::push_back(v18, (uint64_t)v5);
      if (v12)
      {
        v33 = (unint64_t *)&v12->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (v45)
      {
        v35 = (unint64_t *)&v45->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      YAML::detail::node::add_dependency(v5, v7);
      if (v12)
      {
        v37 = (unint64_t *)&v12->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      return;
    }
LABEL_62:
    __assert_rtn("Pop", "nodebuilder.cpp", 124, "false");
  }
  v21 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 10) == v21)
    __assert_rtn("Pop", "nodebuilder.cpp", 115, "!m_keys.empty()");
  if (*(_BYTE *)(v21 - 8))
  {
    v22 = *(YAML::detail::node **)(v21 - 16);
    v23 = (YAML::detail::memory **)*((_QWORD *)this + 1);
    v24 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      v27 = *(YAML::detail::node_data ***)v7;
      v28 = (unint64_t *)&v24->__shared_owners_;
      v46 = v24;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = *v27;
      v31 = (unint64_t *)&v24->__shared_owners_;
      v47 = v23;
      v48 = v24;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    else
    {
      v46 = 0;
      v30 = (YAML::detail::node_data *)*v8;
      v47 = v23;
      v48 = 0;
    }
    YAML::detail::node_data::insert(v30, v22, v5, &v47);
    if (v24)
    {
      v39 = (unint64_t *)&v24->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v46)
    {
      v41 = (unint64_t *)&v46->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    YAML::detail::node::add_dependency(v22, v7);
    YAML::detail::node::add_dependency(v5, v7);
    if (v24)
    {
      v43 = (unint64_t *)&v24->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    *((_QWORD *)this + 11) -= 16;
  }
  else
  {
    *(_BYTE *)(v21 - 8) = 1;
  }
}

void sub_1BFAE5338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

YAML::detail::node *YAML::NodeBuilder::Push(YAML::detail::memory ***a1, uint64_t *a2, uint64_t a3)
{
  YAML::detail::node *node;
  uint64_t v7;
  uint64_t v8;

  node = (YAML::detail::node *)YAML::detail::memory::create_node(*a1[1]);
  v7 = **(_QWORD **)node;
  v8 = *a2;
  *(_DWORD *)(v7 + 12) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(v7 + 4) = v8;
  YAML::NodeBuilder::RegisterAnchor((YAML::NodeBuilder *)a1, a3, node);
  YAML::NodeBuilder::Push((YAML::NodeBuilder *)a1, node);
  return node;
}

void YAML::NodeBuilder::RegisterAnchor(YAML::NodeBuilder *this, uint64_t a2, YAML::detail::node *a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  if (a2)
  {
    v5 = *((_QWORD *)this + 7);
    v6 = (_QWORD *)*((_QWORD *)this + 8);
    if (a2 != ((uint64_t)v6 - v5) >> 3)
      __assert_rtn("RegisterAnchor", "nodebuilder.cpp", 131, "anchor == m_anchors.size()");
    v8 = *((_QWORD *)this + 9);
    if ((unint64_t)v6 >= v8)
    {
      if ((unint64_t)(a2 + 1) >> 61)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v10 = v8 - v5;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(a2 + 1))
        v11 = a2 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v12);
      else
        v13 = 0;
      v14 = (_QWORD *)(v12 + 8 * a2);
      v15 = v12 + 8 * v13;
      *v14 = a3;
      v9 = v14 + 1;
      v17 = (char *)*((_QWORD *)this + 7);
      v16 = (char *)*((_QWORD *)this + 8);
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *--v14 = v18;
        }
        while (v16 != v17);
        v16 = (char *)*((_QWORD *)this + 7);
      }
      *((_QWORD *)this + 7) = v14;
      *((_QWORD *)this + 8) = v9;
      *((_QWORD *)this + 9) = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v6 = a3;
      v9 = v6 + 1;
    }
    *((_QWORD *)this + 8) = v9;
  }
}

void YAML::NodeBuilder::Push(YAML::NodeBuilder *this, YAML::detail::node *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;

  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v5 = (_QWORD *)*((_QWORD *)this + 5);
  if (v4 == v5 || (v6 = **(_QWORD **)*(v5 - 1), !*(_BYTE *)v6) || *(_DWORD *)(v6 + 16) != 4)
  {
    v12 = *((_QWORD *)this + 6);
    if ((unint64_t)v5 >= v12)
    {
      v14 = v5 - v4;
      if ((unint64_t)(v14 + 1) >> 61)
        goto LABEL_57;
      v15 = v12 - (_QWORD)v4;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v17);
      else
        v18 = 0;
      v19 = (_QWORD *)(v17 + 8 * v14);
      v20 = v17 + 8 * v18;
      *v19 = a2;
      v13 = v19 + 1;
      v22 = (char *)*((_QWORD *)this + 4);
      v21 = (char *)*((_QWORD *)this + 5);
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v19 = v23;
        }
        while (v21 != v22);
        v21 = (char *)*((_QWORD *)this + 4);
      }
      *((_QWORD *)this + 4) = v19;
      *((_QWORD *)this + 5) = v13;
      *((_QWORD *)this + 6) = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v5 = a2;
      v13 = v5 + 1;
    }
    *((_QWORD *)this + 5) = v13;
    return;
  }
  v8 = *((_QWORD *)this + 10);
  v7 = *((_QWORD *)this + 11);
  v9 = *((_QWORD *)this + 13);
  v10 = *((_QWORD *)this + 6);
  if ((unint64_t)v5 >= v10)
  {
    v24 = v5 - v4;
    if (!((unint64_t)(v24 + 1) >> 61))
    {
      v25 = v10 - (_QWORD)v4;
      v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1))
        v26 = v24 + 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
        v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v27);
      else
        v28 = 0;
      v29 = (_QWORD *)(v27 + 8 * v24);
      v30 = v27 + 8 * v28;
      *v29 = a2;
      v11 = v29 + 1;
      v32 = (char *)*((_QWORD *)this + 4);
      v31 = (char *)*((_QWORD *)this + 5);
      if (v31 != v32)
      {
        do
        {
          v33 = *((_QWORD *)v31 - 1);
          v31 -= 8;
          *--v29 = v33;
        }
        while (v31 != v32);
        v31 = (char *)*((_QWORD *)this + 4);
      }
      *((_QWORD *)this + 4) = v29;
      *((_QWORD *)this + 5) = v11;
      *((_QWORD *)this + 6) = v30;
      if (v31)
        operator delete(v31);
      goto LABEL_38;
    }
LABEL_57:
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  *v5 = a2;
  v11 = v5 + 1;
LABEL_38:
  *((_QWORD *)this + 5) = v11;
  if ((v7 - v8) >> 4 < v9)
  {
    v35 = (_BYTE *)*((_QWORD *)this + 11);
    v34 = *((_QWORD *)this + 12);
    if ((unint64_t)v35 >= v34)
    {
      v37 = (_BYTE *)*((_QWORD *)this + 10);
      v38 = (v35 - v37) >> 4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v40 = v34 - (_QWORD)v37;
      if (v40 >> 3 > v39)
        v39 = v40 >> 3;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        if (v41 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v42 = (char *)operator new(16 * v41);
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[16 * v38];
      *(_QWORD *)v43 = a2;
      v43[8] = 0;
      v36 = v43 + 16;
      if (v35 != v37)
      {
        do
        {
          *((_OWORD *)v43 - 1) = *((_OWORD *)v35 - 1);
          v43 -= 16;
          v35 -= 16;
        }
        while (v35 != v37);
        v35 = (_BYTE *)*((_QWORD *)this + 10);
      }
      *((_QWORD *)this + 10) = v43;
      *((_QWORD *)this + 11) = v36;
      *((_QWORD *)this + 12) = &v42[16 * v41];
      if (v35)
        operator delete(v35);
    }
    else
    {
      *(_QWORD *)v35 = a2;
      v35[8] = 0;
      v36 = v35 + 16;
    }
    *((_QWORD *)this + 11) = v36;
  }
}

YAML::NodeBuilder *YAML::NodeBuilder::NodeBuilder(YAML::NodeBuilder *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)this = &off_1E7934B88;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = (_QWORD *)operator new();
  v4 = (_QWORD *)operator new();
  v4[2] = 0;
  v4[1] = 0;
  *v4 = v4 + 1;
  std::shared_ptr<YAML::detail::memory>::shared_ptr[abi:ne180100]<YAML::detail::memory,void>(v3, (uint64_t)v4);
  std::shared_ptr<YAML::detail::memory_holder>::shared_ptr[abi:ne180100]<YAML::detail::memory_holder,void>(v2, (uint64_t)v3);
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = operator new(8uLL);
  *v5 = 0;
  *((_QWORD *)this + 7) = v5;
  *((_QWORD *)this + 8) = v5 + 1;
  *((_QWORD *)this + 9) = v5 + 1;
  return this;
}

void sub_1BFAE58A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void YAML::NodeBuilder::Root(YAML::NodeBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = v3;
      *(_QWORD *)(a2 + 40) = v4;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      *(_QWORD *)(a2 + 48) = v2;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = v3;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = v2;
    }
  }
  else
  {
    *(_BYTE *)a2 = 1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
  }
}

_QWORD *siri::dialogengine::CountAndTimestamp::CountAndTimestamp(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t siri::dialogengine::CountAndTimestamp::CountAndTimestamp(uint64_t this, uint64_t a2, double a3)
{
  *(_QWORD *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

_QWORD *siri::dialogengine::CountAndTimestamp::SetCount(_QWORD *this, uint64_t a2)
{
  *this = a2;
  return this;
}

uint64_t siri::dialogengine::CountAndTimestamp::GetCount(siri::dialogengine::CountAndTimestamp *this)
{
  return *(_QWORD *)this;
}

uint64_t siri::dialogengine::CountAndTimestamp::SetTimestamp(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

double siri::dialogengine::CountAndTimestamp::GetTimestamp(siri::dialogengine::CountAndTimestamp *this)
{
  return *((double *)this + 1);
}

double siri::dialogengine::GroundingInfo::GroundingInfo(siri::dialogengine::GroundingInfo *this)
{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

_QWORD *siri::dialogengine::GroundingInfo::GroundingInfo(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  std::string *v6;
  __int128 v7;

  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a1 + 1, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v6 = (std::string *)(a1 + 4);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v7 = *a4;
    a1[6] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1BFAE5A88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *siri::dialogengine::GroundingInfo::SetCount(_QWORD *this, uint64_t a2)
{
  *this = a2;
  return this;
}

uint64_t siri::dialogengine::GroundingInfo::GetCount(siri::dialogengine::GroundingInfo *this)
{
  return *(_QWORD *)this;
}

void siri::dialogengine::GroundingInfo::AddTimestamp(siri::dialogengine::GroundingInfo *this, double a2)
{
  unint64_t v4;
  double *v5;
  double *v6;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  unint64_t v15;
  uint64_t v16;

  v5 = (double *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (double *)*((_QWORD *)this + 1);
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v9;
    if (v12)
    {
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v12);
      v7 = (double *)*((_QWORD *)this + 1);
      v5 = (double *)*((_QWORD *)this + 2);
    }
    else
    {
      v13 = 0;
    }
    v14 = (double *)(v12 + 8 * v8);
    v15 = v12 + 8 * v13;
    *v14 = a2;
    v6 = v14 + 1;
    while (v5 != v7)
    {
      v16 = *((_QWORD *)v5-- - 1);
      *((_QWORD *)v14-- - 1) = v16;
    }
    *((_QWORD *)this + 1) = v14;
    *((_QWORD *)this + 2) = v6;
    *((_QWORD *)this + 3) = v15;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 2) = v6;
}

_QWORD *siri::dialogengine::GroundingInfo::GetTimestamps@<X0>(siri::dialogengine::GroundingInfo *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a2, *((const void **)this + 1), *((_QWORD *)this + 2), (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
}

std::string *siri::dialogengine::GroundingInfo::SetText(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

void siri::dialogengine::GroundingInfo::GetText(siri::dialogengine::GroundingInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

uint64_t siri::dialogengine::GroundingInfo::GetCountInTimeRange(siri::dialogengine::GroundingInfo *this, double a2, double a3)
{
  double *v3;
  double *v4;
  uint64_t result;
  double v6;
  uint64_t v7;

  v3 = (double *)*((_QWORD *)this + 1);
  v4 = (double *)*((_QWORD *)this + 2);
  if (v3 == v4)
    return 0;
  result = 0;
  do
  {
    v6 = *v3++;
    LODWORD(v7) = v6 >= a2;
    if (v6 <= a3)
      v7 = v7;
    else
      v7 = 0;
    result += v7;
  }
  while (v3 != v4);
  return result;
}

uint64_t siri::dialogengine::GroundingInfo::RemoveTimestampsOlderThan(uint64_t this, double a2)
{
  double *v2;
  double *v3;
  double *i;

  v3 = *(double **)(this + 8);
  v2 = *(double **)(this + 16);
  if (v3 != v2)
  {
    while (*v3 >= a2)
    {
      if (++v3 == v2)
        return this;
    }
    if (v3 != v2)
    {
      for (i = v3 + 1; i != v2; ++i)
      {
        if (*i >= a2)
          *v3++ = *i;
      }
    }
    if (v3 != v2)
      *(_QWORD *)(this + 16) = v3;
  }
  return this;
}

uint64_t siri::dialogengine::GroundingInfo::Clear(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 16) = *(_QWORD *)(this + 8);
  if (*(char *)(this + 55) < 0)
  {
    **(_BYTE **)(this + 32) = 0;
    *(_QWORD *)(this + 40) = 0;
  }
  else
  {
    *(_BYTE *)(this + 32) = 0;
    *(_BYTE *)(this + 55) = 0;
  }
  return this;
}

_QWORD *siri::dialogengine::DialogStateUseCase::DialogStateUseCase(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[3] = 0;
  this[2] = this + 3;
  this[6] = 0;
  this[4] = 0;
  this[5] = this + 6;
  this[10] = 0;
  this[9] = 0;
  this[7] = 0;
  this[8] = this + 9;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[3] = 0;
  this[2] = this + 3;
  this[6] = 0;
  this[4] = 0;
  this[5] = this + 6;
  this[10] = 0;
  this[9] = 0;
  this[7] = 0;
  this[8] = this + 9;
  return this;
}

uint64_t siri::dialogengine::DialogStateUseCase::DialogStateUseCase(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4, const void ***a5, double a6)
{
  *(_QWORD *)a1 = a2;
  *(double *)(a1 + 8) = a6;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 16), a4);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 40), a3);
  std::map<std::string,siri::dialogengine::GroundingInfo>::map[abi:ne180100](a1 + 64, a5);
  return a1;
}

void sub_1BFAE5DB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::string>::destroy(v3, *(char **)(v1 + 48));
  std::__tree<std::string>::destroy(v2, *(char **)(v1 + 24));
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::DialogStateUseCase::SetUseCaseUsageCount(_QWORD *this, uint64_t a2)
{
  *this = a2;
  return this;
}

uint64_t siri::dialogengine::DialogStateUseCase::GetUseCaseUsageCount(siri::dialogengine::DialogStateUseCase *this)
{
  return *(_QWORD *)this;
}

uint64_t siri::dialogengine::DialogStateUseCase::SetUseCaseLastTimestamp(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

double siri::dialogengine::DialogStateUseCase::GetUseCaseLastTimestamp(siri::dialogengine::DialogStateUseCase *this)
{
  return *((double *)this + 1);
}

uint64_t *siri::dialogengine::DialogStateUseCase::AddAllRandomId(uint64_t a1, const void **a2)
{
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 40), a2, (uint64_t)a2);
}

uint64_t *siri::dialogengine::DialogStateUseCase::GetAllRandomIds@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::set<std::string>::set[abi:ne180100](a2, this + 5);
}

BOOL siri::dialogengine::DialogStateUseCase::HasAllRandomId(uint64_t a1, const void **a2)
{
  return a1 + 48 != std::__tree<std::string>::find<std::string>(a1 + 40, a2);
}

uint64_t *siri::dialogengine::DialogStateUseCase::AddLastRandomId(uint64_t a1, const void **a2)
{
  return std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 16), a2, (uint64_t)a2);
}

uint64_t *siri::dialogengine::DialogStateUseCase::GetLastRandomIds@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::set<std::string>::set[abi:ne180100](a2, this + 2);
}

BOOL siri::dialogengine::DialogStateUseCase::HasLastRandomId(uint64_t a1, const void **a2)
{
  return a1 + 24 != std::__tree<std::string>::find<std::string>(a1 + 16, a2);
}

void siri::dialogengine::DialogStateUseCase::ClearLastRandomIds(char **this)
{
  _QWORD *v1;

  v1 = this + 3;
  std::__tree<std::string>::destroy((uint64_t)(this + 2), this[3]);
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

std::string *siri::dialogengine::DialogStateUseCase::SetGroundingUsage(uint64_t a1, __int128 *a2, uint64_t a3)
{
  char *v4;
  char *v5;
  __int128 *v7;

  v7 = a2;
  v4 = std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 64), (const void **)a2, &v7);
  v5 = v4;
  *((_QWORD *)v4 + 7) = *(_QWORD *)a3;
  if (v4 + 56 != (char *)a3)
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v4 + 64, *(char **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3);
  return std::string::operator=((std::string *)(v5 + 88), (const std::string *)(a3 + 32));
}

void siri::dialogengine::DialogStateUseCase::GetGroundingUsage(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t *v10;
  std::string *v11;
  __int128 v12;

  v4 = a1 + 72;
  v5 = *(_QWORD *)(a1 + 72);
  if (!v5)
    goto LABEL_8;
  v7 = a1 + 80;
  v8 = a1 + 72;
  do
  {
    v9 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), a2);
    v10 = (uint64_t *)(v5 + 8);
    if (!v9)
    {
      v10 = (uint64_t *)v5;
      v8 = v5;
    }
    v5 = *v10;
  }
  while (*v10);
  if (v8 == v4 || std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)(v8 + 32)))
  {
LABEL_8:
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  else
  {
    *(_QWORD *)a3 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)(a3 + 8), *(const void **)(v8 + 64), *(_QWORD *)(v8 + 72), (uint64_t)(*(_QWORD *)(v8 + 72) - *(_QWORD *)(v8 + 64)) >> 3);
    v11 = (std::string *)(a3 + 32);
    if (*(char *)(v8 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v8 + 88), *(_QWORD *)(v8 + 96));
    }
    else
    {
      v12 = *(_OWORD *)(v8 + 88);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(v8 + 104);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
  }
}

void sub_1BFAE601C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogStateUseCase::GetAllGroundings@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,siri::dialogengine::GroundingInfo>::map[abi:ne180100](a2, this + 8);
}

_QWORD *siri::dialogengine::DialogStateFamily::DialogStateFamily(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t siri::dialogengine::DialogStateFamily::DialogStateFamily(uint64_t this, uint64_t a2, double a3)
{
  *(_QWORD *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

_QWORD *siri::dialogengine::DialogStateFamily::SetFamilyUsageCount(_QWORD *this, uint64_t a2)
{
  *this = a2;
  return this;
}

uint64_t siri::dialogengine::DialogStateFamily::GetFamilyUsageCount(siri::dialogengine::DialogStateFamily *this)
{
  return *(_QWORD *)this;
}

uint64_t siri::dialogengine::DialogStateFamily::SetFamilyLastTimestamp(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

double siri::dialogengine::DialogStateFamily::GetFamilyLastTimestamp(siri::dialogengine::DialogStateFamily *this)
{
  return *((double *)this + 1);
}

_QWORD *siri::dialogengine::DialogStatePattern::DialogStatePattern(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t siri::dialogengine::DialogStatePattern::DialogStatePattern(uint64_t this, uint64_t a2, double a3)
{
  *(_QWORD *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(double *)(this + 8) = a3;
  return this;
}

_QWORD *siri::dialogengine::DialogStatePattern::SetPatternUsageCount(_QWORD *this, uint64_t a2)
{
  *this = a2;
  return this;
}

uint64_t siri::dialogengine::DialogStatePattern::GetPatternUsageCount(siri::dialogengine::DialogStatePattern *this)
{
  return *(_QWORD *)this;
}

uint64_t siri::dialogengine::DialogStatePattern::SetPatternLastTimestamp(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

double siri::dialogengine::DialogStatePattern::GetPatternLastTimestamp(siri::dialogengine::DialogStatePattern *this)
{
  return *((double *)this + 1);
}

void siri::dialogengine::GetFamilyIdFromCatId(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  void **v15;

  siri::dialogengine::StringSplit(a1, "#", &v14);
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v14) >> 3) < 2)
    goto LABEL_23;
  v4 = v15 - 3;
  if (*((char *)v15 - 1) < 0)
    operator delete(*v4);
  v15 = v4;
  std::string::basic_string[abi:ne180100]<0>(__p, "#");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>(a2, v14, (uint64_t)v15, (uint64_t)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = a1[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a1 + 1);
  if (v6 != v7)
    goto LABEL_24;
  if (v8 >= 0)
    v9 = a1;
  else
    v9 = *(unsigned __int8 **)a1;
  if ((v5 & 0x80) != 0)
  {
    v11 = *(void **)a2;
    if (memcmp(*(const void **)a2, v9, *(_QWORD *)(a2 + 8)))
      goto LABEL_24;
    operator delete(v11);
LABEL_23:
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, "");
    goto LABEL_24;
  }
  if (!*(_BYTE *)(a2 + 23))
    goto LABEL_23;
  v10 = (unsigned __int8 *)a2;
  while (*v10 == *v9)
  {
    ++v10;
    ++v9;
    if (!--v5)
      goto LABEL_23;
  }
LABEL_24:
  __p[0] = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1BFAE6220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1BFAE6524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1BFAE6770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,_QWORD *a24)
{
  void *v24;
  void *v25;
  void *v26;

  if (a20 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a24);

  _Unwind_Resume(a1);
}

void sub_1BFAE6B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,_QWORD *a24)
{
  void *v24;
  void *v25;
  void *v26;

  if (a20 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a24);

  _Unwind_Resume(a1);
}

void sub_1BFAE6FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BFAE723C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id DictionaryToValidationResult(NSArray *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSArray *v12;
  NSArray *obj;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v1 = (void *)objc_opt_new();
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  obj = v12;
  v2 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v14, v18, 16, v12);
  if (v2)
  {
    v3 = *(_QWORD *)v15;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v15 != v3)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v4);
        v6 = (void *)objc_opt_new();
        objc_msgSend(v5, "objectForKey:", CFSTR("text"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setText:", v7);

        objc_msgSend(v5, "objectForKey:", CFSTR("textWithLineNumber"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setTextWithLineNumber:", v8);

        objc_msgSend(v5, "objectForKey:", CFSTR("lineNumber"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setLineNumber:", v9);

        objc_msgSend(v5, "objectForKey:", CFSTR("filename"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setFilename:", v10);

        objc_msgSend(v1, "addObject:", v6);
        ++v4;
      }
      while (v2 != v4);
      v2 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v2);
  }

  return v1;
}

void sub_1BFAE7488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BFAE7774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a30 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a18 < 0)
    operator delete(a13);

  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v39 - 89) < 0)
    operator delete(*(void **)(v39 - 112));
  if (*(char *)(v39 - 57) < 0)
    operator delete(*(void **)(v39 - 80));
  if (*(char *)(v39 - 25) < 0)
    operator delete(*(void **)(v39 - 48));
  _Unwind_Resume(a1);
}

void sub_1BFAE7918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFAE7FB4(_Unwind_Exception *a1, std::string *a2, void *__p)
{
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BFAE9ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v36 - 104);
  _Unwind_Resume(a1);
}

void sub_1BFAEA120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BFAEA410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BFAEA704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  _Unwind_Resume(exception_object);
}

void sub_1BFAEA830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFAEAD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char **a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52)
{
  char v52;
  uint64_t v53;

  a30 = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a37 = &a43;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  if (v52 < 0)
    operator delete(__p);
  siri::dialogengine::RequestInfo::~RequestInfo(&a52);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v53 - 160);
  _Unwind_Resume(a1);
}

void sub_1BFAEAE58()
{
  JUMPOUT(0x1BFAEAE48);
}

void sub_1BFAEAEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1BFAEAFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BFAEB288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  if (*(char *)(v21 - 97) < 0)
    operator delete(*(void **)(v21 - 120));
  siri::dialogengine::RequestInfo::~RequestInfo(&__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v21 - 96);

  _Unwind_Resume(a1);
}

void sub_1BFAEBE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  char v46;
  uint64_t v47;

  a29 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a33 = &a36;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (v46 < 0)
    operator delete(__p);
  siri::dialogengine::RequestInfo::~RequestInfo(&a46);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v47 - 208);
  _Block_object_dispose((const void *)(v47 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1BFAEC004()
{
  JUMPOUT(0x1BFAEBFE0);
}

void sub_1BFAEC00C()
{
  JUMPOUT(0x1BFAEBFE8);
}

void sub_1BFAEC018()
{
  JUMPOUT(0x1BFAEBFF0);
}

__n128 __Block_byref_object_copy__24702(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_1BFAEC0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t NSDictToVariableObjectPtr(void *a1, const std::string *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CFTypeID v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  double v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *__p[2];
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v27 = a1;
  v3 = operator new();
  siri::dialogengine::VariableObject::VariableObject((siri::dialogengine::VariableObject *)v3);
  std::string::operator=((std::string *)(v3 + 8), a2);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v4 = v27;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v42;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v42 != v6)
          objc_enumerationMutation(v4);
        v8 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v41 + 1) + 8 * v7));
        std::string::basic_string[abi:ne180100]<0>(&v40, (char *)objc_msgSend(v8, "UTF8String"));
        objc_msgSend(v4, "objectForKey:", v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v10 = operator new();
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String"));
          siri::dialogengine::VariableString::VariableString(v10, &v40, (uint64_t)__p);
          std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(&v38, v10);
          siri::dialogengine::VariableObject::AddProperty(v3, &v38);
          v11 = v39;
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          if (v37 < 0)
            operator delete(__p[0]);
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v14 = CFGetTypeID(v9);
            if (v14 == CFBooleanGetTypeID())
            {
              v15 = operator new();
              siri::dialogengine::VariableBoolean::VariableBoolean(v15, &v40, objc_msgSend(v9, "BOOLValue"));
              std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableBoolean,void>(&v34, v15);
              siri::dialogengine::VariableObject::AddProperty(v3, &v34);
              v16 = v35;
              if (!v35)
                goto LABEL_35;
              v17 = (unint64_t *)&v35->__shared_owners_;
              do
                v18 = __ldaxr(v17);
              while (__stlxr(v18 - 1, v17));
            }
            else
            {
              v21 = operator new();
              objc_msgSend(v9, "doubleValue");
              siri::dialogengine::VariableNumber::VariableNumber(v21, &v40, v22);
              std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v32, v21);
              siri::dialogengine::VariableObject::AddProperty(v3, &v32);
              v16 = v33;
              if (!v33)
                goto LABEL_35;
              v23 = (unint64_t *)&v33->__shared_owners_;
              do
                v18 = __ldaxr(v23);
              while (__stlxr(v18 - 1, v23));
            }
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v19 = NSDictToVariableObjectPtr(v9, &v40);
              std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v30, v19);
              siri::dialogengine::VariableObject::AddProperty(v3, &v30);
              v16 = v31;
              if (!v31)
                goto LABEL_35;
              v20 = (unint64_t *)&v31->__shared_owners_;
              do
                v18 = __ldaxr(v20);
              while (__stlxr(v18 - 1, v20));
            }
            else
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_35;
              v24 = NSArrayToVariableArrayPtr(v9, &v40);
              std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableArray,void>(&v28, v24);
              siri::dialogengine::VariableObject::AddProperty(v3, &v28);
              v16 = v29;
              if (!v29)
                goto LABEL_35;
              v25 = (unint64_t *)&v29->__shared_owners_;
              do
                v18 = __ldaxr(v25);
              while (__stlxr(v18 - 1, v25));
            }
          }
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
LABEL_35:

        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        ++v7;
      }
      while (v7 != v5);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
    }
    while (v5);
  }

  return v3;
}

void sub_1BFAEC538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7937B10;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BFAEC6D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableObject *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableObject>,std::allocator<siri::dialogengine::VariableObject>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableObject *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableObject>,std::allocator<siri::dialogengine::VariableObject>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableObject *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableObject>,std::allocator<siri::dialogengine::VariableObject>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t NSArrayToVariableArrayPtr(void *a1, const std::string *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeID v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  double v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  id v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *__p[2];
  char v36;
  std::string v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v26 = a1;
  v3 = operator new();
  siri::dialogengine::VariableArray::VariableArray((siri::dialogengine::VariableArray *)v3);
  std::string::operator=((std::string *)(v3 + 8), a2);
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v4 = v26;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v41;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v41 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v7);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v9 = operator new();
          std::string::basic_string[abi:ne180100]<0>(&v37, "");
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
          siri::dialogengine::VariableString::VariableString(v9, &v37, (uint64_t)__p);
          std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(&v38, v9);
          siri::dialogengine::VariableArray::AddItem((_QWORD *)v3, &v38);
          v10 = v39;
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          if (v36 < 0)
            operator delete(__p[0]);
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v13 = CFGetTypeID(v8);
            if (v13 == CFBooleanGetTypeID())
            {
              v14 = operator new();
              std::string::basic_string[abi:ne180100]<0>(&v37, "");
              siri::dialogengine::VariableBoolean::VariableBoolean(v14, &v37, objc_msgSend(v8, "BOOLValue"));
              std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableBoolean,void>(&v33, v14);
              siri::dialogengine::VariableArray::AddItem((_QWORD *)v3, &v33);
              v15 = v34;
              if (v34)
              {
                v16 = (unint64_t *)&v34->__shared_owners_;
                do
                  v17 = __ldaxr(v16);
                while (__stlxr(v17 - 1, v16));
                goto LABEL_33;
              }
            }
            else
            {
              v20 = operator new();
              std::string::basic_string[abi:ne180100]<0>(&v37, "");
              objc_msgSend(v8, "doubleValue");
              siri::dialogengine::VariableNumber::VariableNumber(v20, &v37, v21);
              std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v31, v20);
              siri::dialogengine::VariableArray::AddItem((_QWORD *)v3, &v31);
              v15 = v32;
              if (v32)
              {
                v22 = (unint64_t *)&v32->__shared_owners_;
                do
                  v17 = __ldaxr(v22);
                while (__stlxr(v17 - 1, v22));
                goto LABEL_33;
              }
            }
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&v37, "");
              v18 = NSDictToVariableObjectPtr(v8, &v37);
              std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v29, v18);
              siri::dialogengine::VariableArray::AddItem((_QWORD *)v3, &v29);
              v15 = v30;
              if (v30)
              {
                v19 = (unint64_t *)&v30->__shared_owners_;
                do
                  v17 = __ldaxr(v19);
                while (__stlxr(v17 - 1, v19));
                goto LABEL_33;
              }
            }
            else
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_37;
              std::string::basic_string[abi:ne180100]<0>(&v37, "");
              v23 = NSArrayToVariableArrayPtr(v8, &v37);
              std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableArray,void>(&v27, v23);
              siri::dialogengine::VariableArray::AddItem((_QWORD *)v3, &v27);
              v15 = v28;
              if (v28)
              {
                v24 = (unint64_t *)&v28->__shared_owners_;
                do
                  v17 = __ldaxr(v24);
                while (__stlxr(v17 - 1, v24));
LABEL_33:
                if (!v17)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
            }
          }
        }
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
LABEL_37:
        ++v7;
      }
      while (v7 != v5);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
    }
    while (v5);
  }

  return v3;
}

void sub_1BFAECBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  void *v31;

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableArray,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7934D40;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BFAECDAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableArray *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableArray>,std::allocator<siri::dialogengine::VariableArray>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableArray *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableArray>,std::allocator<siri::dialogengine::VariableArray>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableArray *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableArray>,std::allocator<siri::dialogengine::VariableArray>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void __copy_helper_block_ea8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE104c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v6;
  }
  v7 = (std::string *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1BFAECF50(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[103] < 0)
    operator delete(*v4);
  if (v2[79] < 0)
    operator delete(*v3);
  if (v2[55] < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE104c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_1BFAED368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  std::mutex::unlock(&+[DEExecutor preload]::sPreloadMutex);
  _Unwind_Resume(a1);
}

void sub_1BFAED4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BFAEDCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *__p, int a18, int a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  uint64_t v44;

  a30 = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a34 = &a38;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  if (a19 < 0)
    operator delete(__p);
  siri::dialogengine::RequestInfo::~RequestInfo(&a44);

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x330]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v44 - 160);
  if (*(char *)(v44 - 121) < 0)
    operator delete(*(void **)(v44 - 144));
  if (*(char *)(v44 - 97) < 0)
    operator delete(*(void **)(v44 - 120));

  _Unwind_Resume(a1);
}

void sub_1BFAEE0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c55_ZTSNSt3__110shared_ptrIN4siri12dialogengine7ContextEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_48c55_ZTSNSt3__110shared_ptrIN4siri12dialogengine7ContextEEE(uint64_t a1)
{
  return std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a1 + 48);
}

void sub_1BFAEE3E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void siri::dialogengine::ExtractUserSettings(siri::dialogengine *this@<X0>, NSDictionary *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  siri::dialogengine *v5;
  uint64_t v6;
  siri::dialogengine *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  siri::dialogengine *v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  const char *v18;
  const char *v19;
  std::string::size_type size;
  uint64_t *v21;
  const char *v22;
  void **v23;
  std::string *p_str;
  void **v25;
  void **v26;
  void **v27;
  id v28;
  siri::dialogengine *v29;
  std::string __str;
  void *__p[2];
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void **v37;
  _BYTE v38[128];
  uint64_t v39;

  v3 = (int)a2;
  v39 = *MEMORY[0x1E0C80C00];
  v5 = this;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v29 = v5;
  *(_QWORD *)a3 = a3 + 8;
  if (v3)
  {
    v6 = siri::dialogengine::DefaultUserSettings(v5);
    if (v6 != a3)
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(a3, *(__int128 **)v6, (__int128 *)(v6 + 8));
  }
  v7 = v29;
  if (v29)
  {
    -[siri::dialogengine objectForKey:](v29, "objectForKey:", CFSTR("userSettings"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v28 = v8;
      v9 = v8;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
      if (v10)
      {
        v11 = *(_QWORD *)v34;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v34 != v11)
              objc_enumerationMutation(v9);
            v13 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v33 + 1) + 8 * i));
            v14 = (siri::dialogengine *)std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v13, "UTF8String"));
            v15 = siri::dialogengine::DefaultUserSettings(v14);
            if (v15 + 8 == std::__tree<std::string>::find<std::string>(v15, (const void **)__p))
            {
              if (v32 >= 0)
                v25 = __p;
              else
                v25 = (void **)__p[0];
              siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Ignoring unsupported user setting '%s'", v16, v25);
            }
            else
            {
              objc_msgSend(v9, "objectForKey:", v13);
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(objc_retainAutorelease(v17), "UTF8String"));
                size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = __str.__r_.__value_.__l.__size_;
                if (size)
                {
                  v37 = __p;
                  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)__p, (__int128 **)&v37);
                  std::string::operator=((std::string *)(v21 + 7), &__str);
                  if (v32 >= 0)
                    v23 = __p;
                  else
                    v23 = (void **)__p[0];
                  p_str = &__str;
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Parsed user setting '%s': '%s'", v22, v23, p_str);
                }
                else
                {
                  if (v32 >= 0)
                    v27 = __p;
                  else
                    v27 = (void **)__p[0];
                  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Ignoring user setting '%s' with empty string value", v19, v27);
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
              }
              else
              {
                if (v32 >= 0)
                  v26 = __p;
                else
                  v26 = (void **)__p[0];
                siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Value for user setting '%s' is not a string", v18, v26);
              }

            }
            if (v32 < 0)
              operator delete(__p[0]);
          }
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
        }
        while (v10);
      }

      v8 = v28;
    }

    v7 = v29;
  }

}

void sub_1BFAEE740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD **a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a13);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogPersonHeight::toString(siri::dialogengine::DialogPersonHeight *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatPersonHeight(this, (uint64_t)a2, 0);
}

std::string *siri::dialogengine::FormatPersonHeight(siri::dialogengine::Context *a1, uint64_t a2, unsigned int a3)
{
  double *RequiredNumberParameter;
  double *v7;
  double v8;
  char *OptionalStringParameter;
  char *v10;
  siri::dialogengine::VariableString *v11;
  uint64_t v12;
  _BYTE *OptionalBooleanParameter;
  BOOL v14;
  char v15;
  _UNKNOWN **MeasurementSystemForLocale;
  _UNKNOWN **v17;
  const char *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  siri::dialogengine::VariableObject *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  siri::dialogengine::VariableObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t i;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t j;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t k;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  __int128 v68;
  void *v69[2];
  char v70;
  __int128 v71;
  __int128 v72;
  const void **v73[3];
  __int128 v74;
  void *v75[2];
  char v76;
  __int128 v77;
  __int128 v78;
  const void **v79[3];
  __int128 v80;
  const void **v81[3];
  void *v82[2];
  char v83;
  std::string __p;
  __int128 v85;
  void *v86[3];
  void *v87[2];
  uint64_t v88;
  char v89;
  void *v90;
  __int128 v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  siri::dialogengine::VariableObject *v96;
  std::__shared_weak_count *v97;
  __int128 v98;
  _QWORD v99[3];
  __int128 v100;
  std::string v101;
  __int128 v102;
  _QWORD v103[3];
  __int128 v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  v7 = RequiredNumberParameter;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (RequiredNumberParameter)
      goto LABEL_3;
LABEL_8:
    v11 = (siri::dialogengine::VariableString *)operator new();
    siri::dialogengine::VariableString::VariableString(v11);
    return (std::string *)v11;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7)
    goto LABEL_8;
LABEL_3:
  v8 = v7[9];
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  v10 = OptionalStringParameter;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (OptionalStringParameter)
      goto LABEL_5;
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    goto LABEL_12;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v10)
    goto LABEL_10;
LABEL_5:
  if (v10[95] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
  else
    __p = *(std::string *)(v10 + 3);
LABEL_12:
  v12 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Length>((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "convertToPreferredUnits");
  OptionalBooleanParameter = siri::dialogengine::GetOptionalBooleanParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a1)
    v14 = (_DWORD)v12 == -1;
  else
    v14 = 1;
  v15 = !v14;
  if (!OptionalBooleanParameter)
  {
    if ((v15 & 1) != 0)
      goto LABEL_27;
    return siri::dialogengine::FormatLength(a1, a2, a3);
  }
  if ((v15 & 1) == 0)
    return siri::dialogengine::FormatLength(a1, a2, a3);
  if (!OptionalBooleanParameter[66])
    goto LABEL_34;
LABEL_27:
  siri::dialogengine::Context::GetDeviceLocale(a1, &__p);
  MeasurementSystemForLocale = siri::dialogengine::GetMeasurementSystemForLocale();
  v17 = MeasurementSystemForLocale;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v17)
      goto LABEL_34;
  }
  else if (!MeasurementSystemForLocale)
  {
    goto LABEL_34;
  }
  v18 = (const char *)(*((uint64_t (**)(_UNKNOWN **))*v17 + 3))(v17);
  if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Length>(v12, v18))
  {
    v8 = siri::dialogengine::ConvertUnitValue<siri::dialogengine::Length>(v12, v18, v8);
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v18) = v12;
LABEL_35:
  if ((_DWORD)v18 == 2)
  {
    v19 = -v8;
    if (v8 >= 0.0)
      v19 = v8;
    v20 = floor(v19);
    v21 = round((v19 - v20) * 12.0);
    if (v21 == 12.0)
      v22 = v20 + 1.0;
    else
      v22 = v20;
    if (v21 == 12.0)
      v23 = 0.0;
    else
      v23 = v21;
    if (v8 < 0.0)
    {
      if (v22 <= 0.0)
        v23 = -v23;
      else
        v22 = -v22;
    }
    std::string::basic_string[abi:ne180100]<0>(v82, "unit#feetAndInchesValue");
    siri::dialogengine::CreateJSONDoubleVal(v22, (uint64_t *)&v78);
    std::string::basic_string[abi:ne180100]<0>(&v101, "value");
    v102 = v78;
    v78 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v75, "feet");
    siri::dialogengine::CreateJSONStringVal((uint64_t)v75, (uint64_t *)&v77);
    std::string::basic_string[abi:ne180100]<0>(v103, "units");
    v104 = v77;
    v77 = 0uLL;
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v79, (const void **)&v101.__r_.__value_.__l.__data_, 2);
    siri::dialogengine::CreateJSONObjectVal(v79, (uint64_t *)&v80);
    std::string::basic_string[abi:ne180100]<0>(&__p, "feet");
    v85 = v80;
    v80 = 0uLL;
    siri::dialogengine::CreateJSONDoubleVal(v23, (uint64_t *)&v72);
    std::string::basic_string[abi:ne180100]<0>(&v96, "value");
    v98 = v72;
    v72 = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(v69, "inches");
    siri::dialogengine::CreateJSONStringVal((uint64_t)v69, (uint64_t *)&v71);
    std::string::basic_string[abi:ne180100]<0>(v99, "units");
    v100 = v71;
    v71 = 0uLL;
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v73, (const void **)&v96, 2);
    siri::dialogengine::CreateJSONObjectVal(v73, (uint64_t *)&v74);
    std::string::basic_string[abi:ne180100]<0>(v86, "inches");
    *(_OWORD *)v87 = v74;
    v74 = 0uLL;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(a3 & 1), (uint64_t *)&v68);
    std::string::basic_string[abi:ne180100]<0>(&v88, "abbreviated");
    v91 = v68;
    v68 = 0uLL;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((a3 >> 4) & 1), (uint64_t *)&v67);
    std::string::basic_string[abi:ne180100]<0>(v92, "symbolic");
    *(_OWORD *)v94 = v67;
    v67 = 0uLL;
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v81, (const void **)&__p.__r_.__value_.__l.__data_, 4);
    for (i = 0; i != -20; i -= 5)
    {
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v94[i]);
      if (*(&v93 + i * 8) < 0)
        operator delete(v92[i]);
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v73[1]);
    for (j = 0; j != -10; j -= 5)
    {
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v100 + j * 8);
      if (SHIBYTE(v99[j + 2]) < 0)
        operator delete((void *)v99[j]);
    }
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
    if (*((_QWORD *)&v80 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v79[1]);
    for (k = 0; k != -10; k -= 5)
    {
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v104 + k * 8);
      if (SHIBYTE(v103[k + 2]) < 0)
        operator delete((void *)v103[k]);
    }
    v56 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
    if (*((_QWORD *)&v77 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (v76 < 0)
      operator delete(v75[0]);
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
    if (*((_QWORD *)&v78 + 1))
    {
      v60 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)v82, v81, (uint64_t)&__p);
    v11 = (siri::dialogengine::VariableString *)operator new();
    std::string::basic_string[abi:ne180100]<0>(&v101, "");
    siri::dialogengine::VariableString::VariableString((std::string *)v11, &v101, (const siri::dialogengine::SpeakableString *)&__p);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    if (v95 < 0)
      operator delete(v94[0]);
    if (v93 < 0)
      operator delete(v92[0]);
    if (SHIBYTE(v91) < 0)
      operator delete(v90);
    if (v89 < 0)
      operator delete(v87[1]);
    if (SHIBYTE(v87[0]) < 0)
      operator delete(v86[1]);
    if (SHIBYTE(v86[0]) < 0)
      operator delete((void *)v85);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v81[1]);
    if (v83 < 0)
      operator delete(v82[0]);
  }
  else
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine14VariableObjectENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v96);
    v24 = v96;
    std::string::basic_string[abi:ne180100]<0>(&__p, "value");
    siri::dialogengine::VariableObject::AddNumberProperty((uint64_t)v24, &__p, &v65, v8);
    v25 = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v28 = v96;
    std::string::basic_string[abi:ne180100]<0>(&__p, "units");
    siri::dialogengine::GetUnitLabel<siri::dialogengine::Length>(&v101, (int)v18);
    siri::dialogengine::VariableObject::AddStringProperty((uint64_t)v28, &__p, (uint64_t)&v101, &v63);
    v29 = v64;
    if (v64)
    {
      v30 = (unint64_t *)&v64->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v11 = (siri::dialogengine::VariableString *)siri::dialogengine::FormatLength(a1, (uint64_t)v96, a3);
    v32 = v97;
    if (v97)
    {
      v33 = (unint64_t *)&v97->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  return (std::string *)v11;
}

void sub_1BFAEF10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,_QWORD *a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54)
{
  uint64_t v54;
  uint64_t v55;

  if (*(char *)(v55 - 145) < 0)
    operator delete(*(void **)(v55 - 168));
  MEMORY[0x1C3B8D890](v54, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a54);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a46);
  if (a53 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogPersonHeight::abbreviated(siri::dialogengine::DialogPersonHeight *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatPersonHeight(this, (uint64_t)a2, 1u);
}

std::string *siri::dialogengine::DialogPersonHeight::symbolic(siri::dialogengine::DialogPersonHeight *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatPersonHeight(this, (uint64_t)a2, 0x10u);
}

void siri::dialogengine::FieldNameFromElementName(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  std::string v9;
  std::string v10;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  siri::dialogengine::GetElementToSnippetUIAliasMap((siri::dialogengine *)a1);
  v4 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::GetElementToSnippetUIAliasMap(void)::visualCatElementToSnippetField, (const void **)a1);
  siri::dialogengine::GetElementToSnippetUIAliasMap((siri::dialogengine *)v4);
  if ((_UNKNOWN *)v4 != &unk_1EF5829D0)
    std::string::operator=((std::string *)a2, (const std::string *)(v4 + 56));
  siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)a2, &v9);
  std::string::basic_string[abi:ne180100]<0>(v7, "-");
  std::string::basic_string[abi:ne180100]<0>(__p, "_");
  siri::dialogengine::StringReplace((uint64_t)&v9, (char *)v7, (uint64_t)__p, 0, &v10);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1BFAEF5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 + 23) < 0)
    operator delete(*(void **)v26);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetElementToSnippetUIAliasMap(siri::dialogengine *this)
{
  unsigned __int8 v1;
  const void *v2[7];

  v2[6] = *(const void **)MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0)
  {
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v2);
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::GetElementToSnippetUIAliasMap(void)::visualCatElementToSnippetField, v2, 1);
      std::pair<std::string const,std::string>::~pair((uint64_t)v2);
      __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::GetElementToSnippetUIAliasMap(void)::visualCatElementToSnippetField, &dword_1BF794000);
    }
  }
}

void sub_1BFAEF6D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "intentsui-standard");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "intentsUI-standard");
  return a1;
}

void sub_1BFAEF73C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ElementNameFromFieldName(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;
  std::string v8;

  std::string::basic_string[abi:ne180100]<0>(v6, "_");
  std::string::basic_string[abi:ne180100]<0>(__p, "-");
  siri::dialogengine::StringReplace(a1, (char *)v6, (uint64_t)__p, 0, &v8);
  siri::dialogengine::StringToLower((uint64_t)&v8, a2);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1BFAEF7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

siri::dialogengine::TemporaryVariable *siri::dialogengine::TemporaryVariable::TemporaryVariable(siri::dialogengine::TemporaryVariable *this, siri::dialogengine::Context *a2, const siri::dialogengine::ListInfo *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;

  *(_QWORD *)this = a2;
  siri::dialogengine::ListInfo::ListInfo((uint64_t)this + 8, (uint64_t)a3);
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  if (a2)
  {
    v6 = *((unsigned __int8 *)a3 + 71);
    if ((v6 & 0x80u) != 0)
      v6 = *((_QWORD *)a3 + 7);
    if (v6)
    {
      siri::dialogengine::Context::FindVariable((uint64_t)a2, (uint64_t)a3 + 48, &v11);
      std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)this + 120, &v11);
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
      if (*((_QWORD *)&v11 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
  return this;
}

void sub_1BFAEF918(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v2);
  siri::dialogengine::ListInfo::~ListInfo(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ListInfo::ListInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v7;
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v8;
  }
  v9 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return a1;
}

void sub_1BFAEFA2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;

  if (*(char *)(v2 + 71) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 47) < 0)
    operator delete(*v3);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ListInfo::~ListInfo(void **this)
{
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

void siri::dialogengine::TemporaryVariable::~TemporaryVariable(siri::dialogengine::TemporaryVariable *this)
{
  uint64_t v2;
  char *v3;
  __int128 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];
  std::string __str;

  siri::dialogengine::TemporaryVariable::RemoveFromContext(this);
  v3 = (char *)this + 120;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
      v2 = *(_QWORD *)v3;
    }
    else
    {
      v4 = *(_OWORD *)(v2 + 8);
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v4;
    }
    std::string::operator=((std::string *)(v2 + 8), (const std::string *)((char *)this + 56));
    v5 = *(_QWORD *)this;
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    v17[0] = *((_QWORD *)this + 15);
    v17[1] = (uint64_t)v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    siri::dialogengine::Context::AddVariable(v5, v17);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    std::string::operator=((std::string *)(*(_QWORD *)v3 + 8), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)this + 120, (__int128 *)&__str);
  size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)this + 104, (__int128 *)&__str);
  v14 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v15 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)this = 0;
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

void siri::dialogengine::TemporaryVariable::RemoveFromContext(siri::dialogengine::TemporaryVariable *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10[2];

  if (*(_QWORD *)this)
  {
    v2 = *((_QWORD *)this + 13);
    if (v2)
    {
      std::string::operator=((std::string *)(v2 + 8), (const std::string *)((char *)this + 56));
      v3 = *(_QWORD *)this;
      v4 = *((_QWORD *)this + 13);
      v5 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
      v10[0] = v4;
      v10[1] = (uint64_t)v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      siri::dialogengine::Context::RemoveVariable(v3, v10);
      if (v5)
      {
        v8 = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void sub_1BFAEFD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::TemporaryVariable::SetIndex(siri::dialogengine::TemporaryVariable *this, const char *a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  std::string *v18;
  std::string::size_type v19;
  uint64_t v20;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string::size_type v28;
  std::string::size_type v29;
  int v30;
  _QWORD *v32;
  __int128 v33;
  uint64_t v36;
  __int128 v38;
  std::string *p_str;
  BOOL v40;
  std::string *v41;
  void *v42;
  std::string *v43;
  __int128 v44;
  double *v45;
  double *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *size;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  unint64_t j;
  uint64_t v67;
  __int128 v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  double v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  _QWORD *v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *i;
  std::string::size_type v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t *p_shared_owners;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110[2];
  uint64_t v111;
  std::__shared_weak_count *v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  std::string __str;
  void *v118;
  char v119;
  void *v120;
  char v121;
  void *v122;
  char v123;
  void *v124;
  char v125;
  void *v126;
  char v127;
  void *__p;
  char v129;
  std::string v130;
  __int128 v131;
  std::string v132;

  if (*((char *)this + 55) < 0)
  {
    if (!*((_QWORD *)this + 5))
      return;
  }
  else if (!*((_BYTE *)this + 55))
  {
    return;
  }
  if (*((char *)this + 79) < 0)
  {
    if (!*((_QWORD *)this + 8))
      return;
  }
  else if (!*((_BYTE *)this + 79))
  {
    return;
  }
  if (!*(_QWORD *)this)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Context must not be null when setting temporary value", a2);
    return;
  }
  siri::dialogengine::TemporaryVariable::RemoveFromContext(this);
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v7 = v5 + 72;
    v6 = *(_QWORD *)(v5 + 72);
    if ((unint64_t)a2 >= (*(_QWORD *)(v7 + 8) - v6) >> 4)
    {
      v114 = 0uLL;
    }
    else
    {
      v8 = *(_OWORD *)(v6 + 16 * (_QWORD)a2);
      v114 = v8;
      v9 = v8;
      if (*((_QWORD *)&v8 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      if ((_QWORD)v8)
      {
        v111 = v8;
        v112 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
        if (*((_QWORD *)&v114 + 1))
        {
          v12 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        if (*(char *)(v8 + 55) < 0)
          std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(v8 + 32), *(_QWORD *)(v8 + 40));
        else
          v132 = *(std::string *)(v8 + 32);
        v113 = 0uLL;
        v17 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v132.__r_.__value_.__l.__size_ != 12)
          {
            if (v132.__r_.__value_.__l.__size_ != 13)
            {
              if (v132.__r_.__value_.__l.__size_ == 14)
              {
                v18 = (std::string *)v132.__r_.__value_.__r.__words[0];
                v19 = *(_QWORD *)v132.__r_.__value_.__l.__data_;
                goto LABEL_40;
              }
LABEL_81:
              if (*(char *)(v9 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
                v17 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
              }
              else
              {
                v38 = *(_OWORD *)(v9 + 8);
                __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
              }
              p_str = &__str;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              v40 = v17 < 0;
              v41 = &v132;
              if (v40)
                v41 = (std::string *)v132.__r_.__value_.__r.__words[0];
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to duplicate variable '%s' of type '%s'", v4, p_str, v41);
              if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_212;
              v42 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_90:
              operator delete(v42);
LABEL_212:
              v97 = v113;
              if (*(char *)(v111 + 55) < 0)
                std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v111 + 32), *(_QWORD *)(v111 + 40));
              else
                __str = *(std::string *)(v111 + 32);
              std::string::operator=((std::string *)(v97 + 32), &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              *(_QWORD *)(v113 + 56) = *(_QWORD *)(v111 + 56);
              if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v132.__r_.__value_.__l.__data_);
              std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)this + 104, &v113);
              v98 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
              if (*((_QWORD *)&v113 + 1))
              {
                v99 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              if (v112)
              {
                p_shared_owners = &v112->__shared_owners_;
                do
                  v102 = __ldaxr((unint64_t *)p_shared_owners);
                while (__stlxr(v102 - 1, (unint64_t *)p_shared_owners));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                }
              }
              std::string::operator=((std::string *)(*((_QWORD *)this + 13) + 8), (const std::string *)((char *)this + 56));
              v103 = *((_QWORD *)this + 13);
              *(_BYTE *)(v103 + 64) = 1;
              v104 = *(_QWORD *)this;
              v105 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
              v110[0] = v103;
              v110[1] = (uint64_t)v105;
              if (v105)
              {
                v106 = (unint64_t *)&v105->__shared_owners_;
                do
                  v107 = __ldxr(v106);
                while (__stxr(v107 + 1, v106));
              }
              siri::dialogengine::Context::AddVariable(v104, v110);
              if (v105)
              {
                v108 = (unint64_t *)&v105->__shared_owners_;
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                  std::__shared_weak_count::__release_weak(v105);
                }
              }
              goto LABEL_24;
            }
            v18 = (std::string *)v132.__r_.__value_.__r.__words[0];
            if (*(_QWORD *)v132.__r_.__value_.__l.__data_ != 0x532E676F6C616964
              || *(_QWORD *)(v132.__r_.__value_.__r.__words[0] + 5) != 0x676E697274532E67)
            {
              if (*(_QWORD *)v132.__r_.__value_.__l.__data_ != 0x4E2E676F6C616964
                || *(_QWORD *)(v132.__r_.__value_.__r.__words[0] + 5) != 0x7265626D754E2E67)
              {
                v28 = *(_QWORD *)v132.__r_.__value_.__l.__data_;
                goto LABEL_77;
              }
LABEL_93:
              v46 = v45;
              if (v45)
              {
                v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
                v130.__r_.__value_.__l.__size_ = *((_QWORD *)&v114 + 1);
                if (*((_QWORD *)&v114 + 1))
                {
                  v47 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
                  do
                    v48 = __ldxr(v47);
                  while (__stxr(v48 + 1, v47));
                }
              }
              else
              {
                *(_OWORD *)&v130.__r_.__value_.__l.__data_ = 0uLL;
              }
              v64 = operator new();
              if (*(char *)(v9 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
              }
              else
              {
                v65 = *(_OWORD *)(v9 + 8);
                __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v65;
              }
              if (v46)
                v74 = v46[9];
              else
                v74 = 0.0;
              siri::dialogengine::VariableNumber::VariableNumber(v64, &__str, v74);
              std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v131, v64);
              std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)&v113, &v131);
              v75 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
              if (*((_QWORD *)&v131 + 1))
              {
                v76 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              size = (std::__shared_weak_count *)v130.__r_.__value_.__l.__size_;
              if (!v130.__r_.__value_.__l.__size_)
                goto LABEL_212;
              v78 = (unint64_t *)(v130.__r_.__value_.__l.__size_ + 8);
              do
                v63 = __ldaxr(v78);
              while (__stlxr(v63 - 1, v78));
              goto LABEL_210;
            }
LABEL_91:
            v43 = (std::string *)operator new();
            if (*(char *)(v9 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
            }
            else
            {
              v44 = *(_OWORD *)(v9 + 8);
              v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
              *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v44;
            }
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 48))(&__str, v9);
            siri::dialogengine::VariableString::VariableString(v43, &v130, (const siri::dialogengine::SpeakableString *)&__str);
            std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(&v131, (uint64_t)v43);
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)&v113, &v131);
            v54 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
            if (*((_QWORD *)&v131 + 1))
            {
              v55 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            if (v129 < 0)
              operator delete(__p);
            if (v127 < 0)
              operator delete(v126);
            if (v125 < 0)
              operator delete(v124);
            if (v123 < 0)
              operator delete(v122);
            if (v121 < 0)
              operator delete(v120);
            if (v119 < 0)
              operator delete(v118);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_212;
            v42 = (void *)v130.__r_.__value_.__r.__words[0];
            goto LABEL_90;
          }
          v18 = (std::string *)v132.__r_.__value_.__r.__words[0];
        }
        else
        {
          v18 = &v132;
          if (HIBYTE(v132.__r_.__value_.__r.__words[2]) != 12)
          {
            if (HIBYTE(v132.__r_.__value_.__r.__words[2]) != 13)
            {
              if (HIBYTE(v132.__r_.__value_.__r.__words[2]) == 14)
              {
                v19 = v132.__r_.__value_.__r.__words[0];
LABEL_40:
                v20 = *(std::string::size_type *)((char *)v18->__r_.__value_.__r.__words + 6);
                if (v19 != 0x422E676F6C616964 || v20 != 0x6E61656C6F6F422ELL)
                  goto LABEL_81;
                v23 = v22;
                if (v22)
                {
                  v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
                  v130.__r_.__value_.__l.__size_ = *((_QWORD *)&v114 + 1);
                  if (*((_QWORD *)&v114 + 1))
                  {
                    v24 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
                    do
                      v25 = __ldxr(v24);
                    while (__stxr(v25 + 1, v24));
                  }
                }
                else
                {
                  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = 0uLL;
                }
                v52 = operator new();
                if (*(char *)(v9 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
                }
                else
                {
                  v53 = *(_OWORD *)(v9 + 8);
                  __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v53;
                }
                if (v23)
                  v57 = v23[66] != 0;
                else
                  v57 = 0;
                siri::dialogengine::VariableBoolean::VariableBoolean(v52, &__str, v57);
                std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableBoolean,void>(&v131, v52);
                std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)&v113, &v131);
                v58 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
                if (*((_QWORD *)&v131 + 1))
                {
                  v59 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
                  do
                    v60 = __ldaxr(v59);
                  while (__stlxr(v60 - 1, v59));
                  if (!v60)
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                size = (std::__shared_weak_count *)v130.__r_.__value_.__l.__size_;
                if (!v130.__r_.__value_.__l.__size_)
                  goto LABEL_212;
                v62 = (unint64_t *)(v130.__r_.__value_.__l.__size_ + 8);
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
LABEL_210:
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
                goto LABEL_212;
              }
              goto LABEL_81;
            }
            if (v132.__r_.__value_.__r.__words[0] != 0x532E676F6C616964
              || *(std::string::size_type *)((char *)v132.__r_.__value_.__r.__words + 5) != 0x676E697274532E67)
            {
              if (v132.__r_.__value_.__r.__words[0] != 0x4E2E676F6C616964
                || *(std::string::size_type *)((char *)v132.__r_.__value_.__r.__words + 5) != 0x7265626D754E2E67)
              {
                v28 = v132.__r_.__value_.__r.__words[0];
LABEL_77:
                v36 = *(std::string::size_type *)((char *)v18->__r_.__value_.__r.__words + 5);
                if (v28 != 0x4F2E676F6C616964 || v36 != 0x7463656A624F2E67)
                  goto LABEL_81;
                if (v49)
                {
                  v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
                  v130.__r_.__value_.__l.__size_ = *((_QWORD *)&v114 + 1);
                  if (*((_QWORD *)&v114 + 1))
                  {
                    v50 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
                    do
                      v51 = __ldxr(v50);
                    while (__stxr(v51 + 1, v50));
                  }
                }
                else
                {
                  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = 0uLL;
                }
                v79 = (_QWORD *)operator new();
                if (*(char *)(v9 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
                }
                else
                {
                  v80 = *(_OWORD *)(v9 + 8);
                  __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v80;
                }
                siri::dialogengine::VariableObject::VariableObject(v79, &__str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&__str, (uint64_t)v79);
                std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)&v113, (__int128 *)&__str);
                v81 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
                if (__str.__r_.__value_.__l.__size_)
                {
                  v82 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                  do
                    v83 = __ldaxr(v82);
                  while (__stlxr(v83 - 1, v82));
                  if (!v83)
                  {
                    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                    std::__shared_weak_count::__release_weak(v81);
                  }
                }
                siri::dialogengine::VariableObject::GetValues((siri::dialogengine::VariableObject *)v130.__r_.__value_.__l.__data_, &__str.__r_.__value_.__l.__data_);
                v85 = __str.__r_.__value_.__l.__size_;
                for (i = (uint64_t *)__str.__r_.__value_.__r.__words[0]; i != (uint64_t *)v85; i += 2)
                {
                  v86 = *i;
                  v87 = (std::__shared_weak_count *)i[1];
                  *(_QWORD *)&v131 = *i;
                  *((_QWORD *)&v131 + 1) = v87;
                  if (v87)
                  {
                    v88 = (unint64_t *)&v87->__shared_owners_;
                    do
                      v89 = __ldxr(v88);
                    while (__stxr(v89 + 1, v88));
                    v116 = v87;
                    do
                      v90 = __ldxr(v88);
                    while (__stxr(v90 + 1, v88));
                  }
                  else
                  {
                    v116 = 0;
                  }
                  v115 = v86;
                  siri::dialogengine::VariableObject::AddProperty((uint64_t)v79, &v115);
                  if (v87)
                  {
                    v91 = (unint64_t *)&v87->__shared_owners_;
                    do
                      v92 = __ldaxr(v91);
                    while (__stlxr(v92 - 1, v91));
                    if (!v92)
                    {
                      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                      std::__shared_weak_count::__release_weak(v87);
                    }
                  }
                  v93 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
                  if (*((_QWORD *)&v131 + 1))
                  {
                    v94 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
                    do
                      v95 = __ldaxr(v94);
                    while (__stlxr(v95 - 1, v94));
                    if (!v95)
                    {
                      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                      std::__shared_weak_count::__release_weak(v93);
                    }
                  }
                }
                *(_QWORD *)&v131 = &__str;
                std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
                size = (std::__shared_weak_count *)v130.__r_.__value_.__l.__size_;
                if (!v130.__r_.__value_.__l.__size_)
                  goto LABEL_212;
                v96 = (unint64_t *)(v130.__r_.__value_.__l.__size_ + 8);
                do
                  v63 = __ldaxr(v96);
                while (__stlxr(v63 - 1, v96));
                goto LABEL_210;
              }
              goto LABEL_93;
            }
            goto LABEL_91;
          }
        }
        v29 = v18->__r_.__value_.__r.__words[0];
        v30 = v18->__r_.__value_.__r.__words[1];
        if (v29 == 0x412E676F6C616964 && v30 == 2036429426)
        {
          std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableArray,siri::dialogengine::Variable>(&v130, (void *)v9, *((uint64_t *)&v114 + 1));
          if (v130.__r_.__value_.__r.__words[0])
          {
            v32 = (_QWORD *)operator new();
            if (*(char *)(v9 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
            }
            else
            {
              v33 = *(_OWORD *)(v9 + 8);
              __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v33;
            }
            siri::dialogengine::VariableArray::VariableArray(v32, &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableArray,void>(&__str, (uint64_t)v32);
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)&v113, (__int128 *)&__str);
            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__str);
            for (j = 0; ; ++j)
            {
              v67 = *(_QWORD *)(v130.__r_.__value_.__r.__words[0] + 72);
              if (j >= (*(_QWORD *)(v130.__r_.__value_.__r.__words[0] + 80) - v67) >> 4)
                break;
              v68 = *(_OWORD *)(v67 + 16 * j);
              v131 = v68;
              if (*((_QWORD *)&v68 + 1))
              {
                v69 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
                do
                  v70 = __ldxr(v69);
                while (__stxr(v70 + 1, v69));
              }
              siri::dialogengine::VariableArray::AddItem(v32, &v131);
              v71 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
              if (*((_QWORD *)&v131 + 1))
              {
                v72 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
            }
          }
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v130);
          goto LABEL_212;
        }
        goto LABEL_81;
      }
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get item %zu for iterator", v4, a2);
LABEL_24:
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
    if (*((_QWORD *)&v114 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_1BFAF0994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  MEMORY[0x1C3B8D890](v26, 0x10B3C40C1072A30);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v27 - 128);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (*(char *)(v27 - 57) < 0)
    operator delete(*(void **)(v27 - 80));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableArray,siri::dialogengine::Variable>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void siri::dialogengine::StoreVisualCatItem(siri::dialogengine *this, google::protobuf::Message *a2, const siri::dialogengine::CatBinary::vcat_item *a3)
{
  const char *v4;
  google::protobuf::UnknownFieldSet *v5;
  int v6;
  std::string *v7;
  std::string __str;
  _OWORD v9[2];
  __int128 v10;

  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  siri::dialogengine::GetMessageInterface((siri::dialogengine *)v9, this);
  if (LOBYTE(v9[0]))
  {
    v5 = (google::protobuf::UnknownFieldSet *)v10;
    v6 = DWORD2(v10);
    google::protobuf::MessageLite::SerializeAsString(a2, (uint64_t)&__str);
    v7 = (std::string *)google::protobuf::UnknownFieldSet::AddLengthDelimited(v5, v6);
    std::string::operator=(v7, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get valid message interface to store item", v4);
  }
}

void sub_1BFAF0CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetMessageInterface(siri::dialogengine *this, google::protobuf::Message *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  google::protobuf::Reflection *v7;
  uint64_t *v8;
  const char *v9;
  double v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  int i;
  char **v18;
  char *v19;
  char *v20;
  char **v21;
  int v22;
  const char *v23;
  char *v24;
  uint64_t *v25;
  int v26;
  char **v27;
  char *v28[2];

  *(_BYTE *)this = 0;
  if (!a2)
    return;
  *((_QWORD *)this + 1) = a2;
  v4 = (*(uint64_t (**)(google::protobuf::Message *))(*(_QWORD *)a2 + 168))(a2);
  if (!v4)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null descriptor", v5);
    *((_QWORD *)this + 2) = 0;
    v24 = "Could not get message descriptor";
LABEL_23:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v24, v23);
    return;
  }
  v6 = v4;
  *((_QWORD *)this + 2) = v4;
  (*(void (**)(google::protobuf::Message *))(*(_QWORD *)a2 + 168))(a2);
  if (!v7)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null Reflection", 0);
    *((_QWORD *)this + 3) = 0;
    v24 = "Could not get message reflection";
    goto LABEL_23;
  }
  *((_QWORD *)this + 3) = v7;
  v10 = google::protobuf::Reflection::MutableUnknownFields(v7, a2);
  *((_QWORD *)this + 4) = v8;
  if (v8)
  {
    v11 = v8;
    v28[0] = 0;
    v28[1] = 0;
    v27 = v28;
    v12 = *v8;
    if ((int)((unint64_t)(v8[1] - *v8) >> 4) < 1)
    {
      v16 = (int *)((char *)this + 40);
    }
    else
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v26 = *(_DWORD *)(v12 + v13);
        std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)&v27, &v26, &v26);
        ++v14;
        v12 = *v11;
        v13 += 16;
      }
      while (v14 < (int)((unint64_t)(v11[1] - *v11) >> 4));
      v15 = v28[0];
      v16 = (int *)((char *)this + 40);
      if (v28[0])
      {
        for (i = 20000; ; ++i)
        {
          v18 = v28;
          v19 = v28[0];
          do
          {
            v20 = v19;
            v21 = v18;
            v22 = *((_DWORD *)v19 + 7);
            if (v22 >= i)
              v18 = (char **)v19;
            else
              v19 += 8;
            v19 = *(char **)v19;
          }
          while (v19);
          if (v18 == v28)
            break;
          if (v22 < i)
            v20 = (char *)v21;
          if (i < *((_DWORD *)v20 + 7))
            break;
          if (i == 32000)
          {
            *v16 = 32000;
            goto LABEL_33;
          }
        }
        *v16 = i;
        if (i >> 8 < 0x7D)
          goto LABEL_29;
LABEL_33:
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Exceeded limit of unknown field numbers", v15);
        v15 = v28[0];
        goto LABEL_34;
      }
    }
    v15 = 0;
    *v16 = 20000;
LABEL_29:
    *(_BYTE *)this = 1;
LABEL_34:
    std::__tree<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::__map_value_compare<google::protobuf::StringPiece,std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::less<google::protobuf::StringPiece>,true>,std::allocator<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>>>::destroy((uint64_t)&v27, v15);
    return;
  }
  v25 = *(uint64_t **)(v6 + 8);
  if (*((char *)v25 + 23) < 0)
    v25 = (uint64_t *)*v25;
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"UnknownFieldSet is null for message '%s'", v9, v10, v25);
}

void sub_1BFAF0F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::__map_value_compare<google::protobuf::StringPiece,std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::less<google::protobuf::StringPiece>,true>,std::allocator<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetMessageCondition(std::string *this, const google::protobuf::Message *a2)
{
  uint64_t v3;
  __int128 __p;
  std::string::size_type v5;

  siri::dialogengine::GetConditionInfo((siri::dialogengine *)&v3, a2);
  if (SHIBYTE(v5) < 0)
  {
    std::string::__init_copy_ctor_external(this, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    if (SHIBYTE(v5) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = __p;
    this->__r_.__value_.__r.__words[2] = v5;
  }
}

void sub_1BFAF0FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetConditionInfo(siri::dialogengine *this, const google::protobuf::Message *a2)
{
  std::string *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  int v8;
  _BYTE v9[32];
  std::string *__str;
  int v11;
  uint64_t *v12;
  _QWORD *v13[2];

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (std::string *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  siri::dialogengine::GetStoredItems(&v12, a2);
  v4 = v12;
  if (v12 != (uint64_t *)v13)
  {
    while (1)
    {
      v8 = *((_DWORD *)v4 + 8);
      siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)v9, (const siri::dialogengine::CatBinary::vcat_item *)(v4 + 5));
      if (v11 != 2 && (v9[16] & 2) != 0)
        break;
      siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)v9);
      v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
      if (v6 == (uint64_t *)v13)
        goto LABEL_12;
    }
    std::string::operator=(v3, __str);
    *(_DWORD *)this = v8;
    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)v9);
  }
LABEL_12:
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(v13[0]);
}

void sub_1BFAF10C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  uint64_t v19;
  void **v20;
  siri::dialogengine::CatBinary::vcat_item *v21;

  siri::dialogengine::CatBinary::vcat_item::~vcat_item(v21);
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(a19);
  if (*(char *)(v19 + 31) < 0)
    operator delete(*v20);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetStoredItems(uint64_t **this, const google::protobuf::Message *a2)
{
  _QWORD *v2;
  google::protobuf::Reflection *v5;
  const char *v6;
  uint64_t *UnknownFields;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  const char *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  _DWORD *v22;
  uint64_t *v23;
  _BYTE v24[24];
  uint64_t v25;
  uint64_t v26[2];
  char v27;

  this[1] = 0;
  v2 = this + 1;
  this[2] = 0;
  *this = (uint64_t *)(this + 1);
  if (a2)
  {
    (*(void (**)(const google::protobuf::Message *))(*(_QWORD *)a2 + 168))(a2);
    if (v5)
    {
      UnknownFields = (uint64_t *)google::protobuf::Reflection::GetUnknownFields(v5, a2);
      v8 = *UnknownFields;
      if ((int)((unint64_t)(UnknownFields[1] - *UnknownFields) >> 4) >= 1)
      {
        v9 = 0;
        while (1)
        {
          v10 = (unsigned int *)(v8 + 16 * v9);
          if (v10[1] == 3)
            break;
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unhandled field type '%d' for unknown field", v6, v10[1]);
LABEL_17:
          ++v9;
          v8 = *UnknownFields;
          if (v9 >= (int)((unint64_t)(UnknownFields[1] - *UnknownFields) >> 4))
            return;
        }
        v11 = *((_QWORD *)v10 + 1);
        siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)v24);
        google::protobuf::MessageLite::ParseFromString(v24, v11);
        v12 = (_DWORD *)v25;
        v13 = *(char *)(v25 + 23);
        if (v13 < 0)
        {
          if (*(_QWORD *)(v25 + 8) != 4)
            goto LABEL_13;
          v12 = *(_DWORD **)v25;
        }
        else if (v13 != 4)
        {
          goto LABEL_13;
        }
        if (*v12 == 1112556374)
        {
          v17 = *v10;
          v18 = *v2;
          v19 = v2;
          v20 = v2;
          if (*v2)
          {
            while (1)
            {
              while (1)
              {
                v20 = (_QWORD *)v18;
                v21 = *(_DWORD *)(v18 + 32);
                if (v17 >= v21)
                  break;
                v18 = *v20;
                v19 = v20;
                if (!*v20)
                  goto LABEL_26;
              }
              if (v21 >= v17)
                break;
              v18 = v20[1];
              if (!v18)
              {
                v19 = v20 + 1;
                goto LABEL_26;
              }
            }
          }
          else
          {
LABEL_26:
            v22 = operator new(0x60uLL);
            v26[0] = (uint64_t)v22;
            v26[1] = (uint64_t)v2;
            v27 = 0;
            v22[8] = v17;
            siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)(v22 + 10));
            v27 = 1;
            *(_QWORD *)v22 = 0;
            *((_QWORD *)v22 + 1) = 0;
            *((_QWORD *)v22 + 2) = v20;
            *v19 = v22;
            v23 = (uint64_t *)**this;
            if (v23)
            {
              *this = v23;
              v22 = (_DWORD *)*v19;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[1], (uint64_t *)v22);
            this[2] = (uint64_t *)((char *)this[2] + 1);
            v20 = (_QWORD *)v26[0];
            v26[0] = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,void *>>>>::reset[abi:ne180100](v26);
          }
          if (v24 != (_BYTE *)(v20 + 5))
          {
            siri::dialogengine::CatBinary::vcat_item::Clear((siri::dialogengine::CatBinary::vcat_item *)(v20 + 5));
            siri::dialogengine::CatBinary::vcat_item::MergeFrom((siri::dialogengine::CatBinary::vcat_item *)(v20 + 5), (const siri::dialogengine::CatBinary::vcat_item *)v24);
          }
          goto LABEL_16;
        }
LABEL_13:
        v14 = *v10;
        v16 = *(uint64_t **)((*(uint64_t (**)(const google::protobuf::Message *))(*(_QWORD *)a2 + 168))(a2)
                          + 8);
        if (*((char *)v16 + 23) < 0)
          v16 = (uint64_t *)*v16;
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Unrecognized field %d of message '%s'", v15, v14, v16);
LABEL_16:
        siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)v24);
        goto LABEL_17;
      }
    }
    else
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null Reflection", 0);
    }
  }
}

void sub_1BFAF1350(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(*a1);
    std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(a1[1]);
    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)(a1 + 5));
    operator delete(a1);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
      siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)(v1 + 40));
    operator delete((void *)v1);
  }
}

void siri::dialogengine::SetField(uint64_t a1, google::protobuf::Message *a2, const std::string::value_type ***a3, google::protobuf::FieldDescriptor *this, const std::string *a5)
{
  unsigned __int8 v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  const char *v21;
  double v22;
  double v23;
  const char *v24;
  uint64_t *v25;
  uint64_t *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t *v30;
  const char *v31;
  uint64_t *v32;
  const char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ValueByName;
  const char *v38;
  uint64_t *v39;
  char *v40;
  const char *v41;
  uint64_t *v42;
  const char *v43;
  uint64_t *v44;
  uint64_t v45;
  const char *v46;
  double v47;
  float v48;
  float v49;
  const char *v50;
  uint64_t *v51;
  const char *v52;
  unsigned int v53;
  const char *v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  const char *v59;
  std::string *v60;
  __int128 v61;
  std::string::size_type size;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  char v67;
  _QWORD *v68;
  int v69;
  const char *v70;
  uint64_t *v71;
  const char *v72;
  uint64_t *v73;
  const char *v74;
  uint64_t *v75;
  const char *v76;
  uint64_t *v77;
  const char *v78;
  uint64_t *v79;
  float v80;
  const char *v81;
  uint64_t *v82;
  const char *v83;
  uint64_t *v84;
  uint64_t v85;
  std::string *v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  const std::string::value_type *v90;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  void *v96;
  int64_t v103;
  std::string *v104;
  _BYTE *v105;
  std::string *v106;
  _BYTE *v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  unint64_t *v112;
  unint64_t v113;
  const char *v114;
  double v115;
  uint64_t *v116;
  std::string *p_p;
  char *v118;
  unint64_t i;
  std::string v120;
  std::string v121;
  std::string v122;
  std::string v123;
  std::string v124;
  std::string __p;
  char v126;
  _QWORD v127[2];
  std::string __str[4];
  _QWORD v129[8];

  v129[7] = *MEMORY[0x1E0C80C00];
  if ((v10 & 1) == 0
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[8],0>(__str);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v129);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::SetField(siri::dialogengine::Context *,google::protobuf::Message *,google::protobuf::Reflection const*,google::protobuf::FieldDescriptor const*,std::string const&)::sEnumSynonyms, (const void **)&__str[0].__r_.__value_.__l.__data_, 2);
    for (i = 48; i != -48; i -= 48)
      std::pair<std::string const,std::string>::~pair((uint64_t)&__str[i / 0x18]);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::SetField(siri::dialogengine::Context *,google::protobuf::Message *,google::protobuf::Reflection const*,google::protobuf::FieldDescriptor const*,std::string const&)::sEnumSynonyms, &dword_1BF794000);
  }
  if (a3)
  {
    v11 = *((_DWORD *)this + 15);
    v12 = (unint64_t *)*((_QWORD *)this + 6);
    if (v12)
    {
      v124.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      v123.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
      v13 = atomic_load(v12);
      if (v13 != -1)
      {
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
        __str[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v123;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        std::__call_once(v12, &__p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    v14 = google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*((unsigned int *)this + 14)];
    switch(*((_DWORD *)this + 14))
    {
      case 1:
        v22 = siri::dialogengine::StringToDouble(a5, 0);
        v23 = v22;
        if (v11 == 3)
        {
          google::protobuf::Reflection::AddDouble(a3, a2, (const std::string::value_type **)this, v22, v20, v21);
          v25 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v25 + 23) < 0)
            v25 = (uint64_t *)*v25;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added Double to repeated field '%s': %g", v24, v25, *(_QWORD *)&v23);
        }
        else
        {
          google::protobuf::Reflection::SetDouble(a3, a2, (const std::string::value_type **)this, v22, v20, v21);
          v71 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v71 + 23) < 0)
            v71 = (uint64_t *)*v71;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set Double field '%s' to %g", v70, v71, *(_QWORD *)&v23);
        }
        return;
      case 2:
        v47 = siri::dialogengine::StringToDouble(a5, 0);
        v48 = v47;
        if (v11 == 3)
        {
          v49 = v47;
          google::protobuf::Reflection::AddFloat(a3, a2, (const std::string::value_type **)this, v49, v45, v46);
          v51 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v51 + 23) < 0)
            v51 = (uint64_t *)*v51;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added Float to repeated field '%s': %g", v50, v51, v48);
        }
        else
        {
          v80 = v47;
          google::protobuf::Reflection::SetFloat(a3, a2, (const std::string::value_type **)this, v80, v45, v46);
          v82 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v82 + 23) < 0)
            v82 = (uint64_t *)*v82;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set Float field '%s' to %g", v81, v82, v48);
        }
        return;
      case 3:
      case 0x10:
      case 0x12:
        v42 = (uint64_t *)siri::dialogengine::StringToInt64(a5, 0, 0);
        if (v11 == 3)
        {
          google::protobuf::Reflection::AddInt64(a3, a2, (const std::string::value_type **)this, (uint64_t)v42, v41);
          v44 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v44 + 23) < 0)
            v44 = (uint64_t *)*v44;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added Int64 to repeated field '%s': %lld", v43, v44, v42);
        }
        else
        {
          google::protobuf::Reflection::SetInt64(a3, a2, (const std::string::value_type **)this, v42, v41);
          v79 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v79 + 23) < 0)
            v79 = (uint64_t *)*v79;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set Int64 field '%s' to %lld", v78, v79, v42);
        }
        return;
      case 4:
      case 6:
        v32 = (uint64_t *)siri::dialogengine::StringToUInt64(a5, 0, 0);
        if (v11 == 3)
        {
          google::protobuf::Reflection::AddUInt64(a3, a2, (const std::string::value_type **)this, (uint64_t)v32, v31);
          v34 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v34 + 23) < 0)
            v34 = (uint64_t *)*v34;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added UInt64 to repeated field '%s': %llu", v33, v34, v32);
        }
        else
        {
          google::protobuf::Reflection::SetUInt64(a3, a2, (const std::string::value_type **)this, v32, v31);
          v75 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v75 + 23) < 0)
            v75 = (uint64_t *)*v75;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set UInt64 field '%s' to %llu", v74, v75, v32);
        }
        return;
      case 5:
      case 0xF:
      case 0x11:
        v16 = siri::dialogengine::StringToInt(a5, 0, 0);
        if (v11 == 3)
        {
          google::protobuf::Reflection::AddInt32(a3, a2, (const std::string::value_type **)this, v16, v15);
          v18 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v18 + 23) < 0)
            v18 = (uint64_t *)*v18;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added Int32 to repeated field '%s': %d", v17, v18, v16);
        }
        else
        {
          google::protobuf::Reflection::SetInt32(a3, a2, (const std::string::value_type **)this, v16, v15);
          v77 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v77 + 23) < 0)
            v77 = (uint64_t *)*v77;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set Int32 field '%s' to %d", v76, v77, v16);
        }
        return;
      case 7:
      case 0xD:
        v28 = siri::dialogengine::StringToUInt(a5, 0, 0);
        if (v11 == 3)
        {
          google::protobuf::Reflection::AddUInt32(a3, a2, (const std::string::value_type **)this, v28, v27);
          v30 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v30 + 23) < 0)
            v30 = (uint64_t *)*v30;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added UInt32 to repeated field '%s': %u", v29, v30, v28);
        }
        else
        {
          google::protobuf::Reflection::SetUInt32(a3, a2, (const std::string::value_type **)this, v28, v27);
          v73 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v73 + 23) < 0)
            v73 = (uint64_t *)*v73;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set UInt32 field '%s' to %u", v72, v73, v28);
        }
        return;
      case 8:
        v53 = siri::dialogengine::StringToBool(a5);
        if (v11 == 3)
        {
          google::protobuf::Reflection::AddBool(a3, a2, (const std::string::value_type **)this, v53, v52);
          v55 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v55 + 23) < 0)
            v55 = (uint64_t *)*v55;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added Bool to repeated field '%s': %d", v54, v55, v53);
        }
        else
        {
          google::protobuf::Reflection::SetBool(a3, a2, (const std::string::value_type **)this, v53, v52);
          v84 = (uint64_t *)*((_QWORD *)this + 1);
          if (*((char *)v84 + 23) < 0)
            v84 = (uint64_t *)*v84;
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Set Bool field '%s' to %d", v83, v84, v53);
        }
        return;
      case 9:
      case 0xC:
        siri::dialogengine::StringTrim(" \t\n\r", a5, __str);
        siri::dialogengine::StringTrim(" \t\n\r", __str, &__p);
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0 && __str[0].__r_.__value_.__l.__size_ >= 0x400)
        {
          std::string::basic_string(&v123, __str, 0, 0x28uLL, (std::allocator<char> *)&v122);
          v60 = std::string::append(&v123, "...");
          v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v61;
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          size = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __str[0].__r_.__value_.__l.__size_;
          std::string::basic_string(&v122, __str, size - 40, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v126);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v63 = &v122;
          else
            v63 = (std::string *)v122.__r_.__value_.__r.__words[0];
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v64 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
          else
            v64 = v122.__r_.__value_.__l.__size_;
          v65 = std::string::append(&v124, (const std::string::value_type *)v63, v64);
          v66 = v65->__r_.__value_.__r.__words[0];
          v127[0] = v65->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v127 + 7) = *(std::string::size_type *)((char *)&v65->__r_.__value_.__r.__words[1] + 7);
          v67 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[0] = v66;
          __p.__r_.__value_.__l.__size_ = v127[0];
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v127 + 7);
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v67;
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v122.__r_.__value_.__l.__data_);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v123.__r_.__value_.__l.__data_);
        }
        v68 = (_QWORD *)*((_QWORD *)this + 1);
        if (*((char *)v68 + 23) < 0)
        {
          v85 = v68[1];
          if (v85 != 27)
          {
            if (v85 != 37)
              goto LABEL_170;
            v68 = (_QWORD *)*v68;
LABEL_104:
            if (memcmp(v68, "SnippetUI.Response.Component.group_id", 0x25uLL)
              || (siri::dialogengine::ResponseHasGroup(*(_QWORD *)(a1 + 504), *(std::__shared_weak_count **)(a1 + 512), (uint64_t)__str) & 1) != 0)
            {
              goto LABEL_170;
            }
            goto LABEL_166;
          }
          if (*(_QWORD *)*v68 != 0x5574657070696E53
            || *(_QWORD *)(*v68 + 8) != 0x6E6F707365522E49
            || *(_QWORD *)(*v68 + 16) != 0x70756F72472E6573
            || *(_QWORD *)(*v68 + 19) != 0x64692E70756F7247)
          {
            goto LABEL_170;
          }
        }
        else
        {
          v69 = *((unsigned __int8 *)v68 + 23);
          if (v69 != 27)
          {
            if (v69 != 37)
              goto LABEL_170;
            goto LABEL_104;
          }
          if (*v68 != 0x5574657070696E53
            || v68[1] != 0x6E6F707365522E49
            || v68[2] != 0x70756F72472E6573
            || *(_QWORD *)((char *)v68 + 19) != 0x64692E70756F7247)
          {
            goto LABEL_170;
          }
        }
        if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v103 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
        else
          v103 = __str[0].__r_.__value_.__l.__size_;
        if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v104 = __str;
        else
          v104 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
        if (v103 >= 1)
        {
          v105 = (char *)v104 + v103;
          v106 = v104;
          while (1)
          {
            v107 = memchr(v106, 35, v103);
            if (!v107)
              goto LABEL_165;
            if (*v107 == 35)
              break;
            v106 = (std::string *)(v107 + 1);
            v103 = v105 - (_BYTE *)v106;
            if (v105 - (_BYTE *)v106 < 1)
              goto LABEL_165;
          }
          if (v107 != v105 && v107 - (_BYTE *)v104 != -1)
          {
            std::operator+<char>();
            v108 = std::string::append(&v123, "'");
            v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
            v124.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v109;
            v108->__r_.__value_.__l.__size_ = 0;
            v108->__r_.__value_.__r.__words[2] = 0;
            v108->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&v124, 0);
            if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v124.__r_.__value_.__l.__data_);
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v123.__r_.__value_.__l.__data_);
          }
        }
LABEL_165:
        if (!siri::dialogengine::ResponseHasGroup(*(_QWORD *)(a1 + 504), *(std::__shared_weak_count **)(a1 + 512), (uint64_t)__str))
        {
LABEL_170:
          v112 = (unint64_t *)*((_QWORD *)this + 6);
          if (v112)
          {
            v122.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
            v127[0] = this;
            v113 = atomic_load(v112);
            if (v113 != -1)
            {
              v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
              v124.__r_.__value_.__l.__size_ = (std::string::size_type)v127;
              v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
              std::__call_once(v112, &v123, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
            }
          }
          if (*((_DWORD *)this + 14) == 12)
          {
            siri::dialogengine::DecodeBase64((std::string::size_type)__str, &v124);
            if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str[0].__r_.__value_.__l.__data_);
            __str[0] = v124;
          }
          if (v11 == 3)
          {
            if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v121, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
            else
              v121 = __str[0];
            *(_QWORD *)&v115 = google::protobuf::Reflection::AddString(a3, (uint64_t)a2, (const std::string::value_type **)this, (uint64_t)&v121, v59).n128_u64[0];
            if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v121.__r_.__value_.__l.__data_);
            v116 = (uint64_t *)*((_QWORD *)this + 1);
            if (*((char *)v116 + 23) < 0)
              v116 = (uint64_t *)*v116;
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            v118 = "Added to repeated string '%s': '%s'";
          }
          else
          {
            if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v120, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
            else
              v120 = __str[0];
            google::protobuf::Reflection::SetString((uint64_t)a3, a2, (const std::string::value_type **)this, (uint64_t *)&v120, v59);
            if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v120.__r_.__value_.__l.__data_);
            v116 = (uint64_t *)*((_QWORD *)this + 1);
            if (*((char *)v116 + 23) < 0)
              v116 = (uint64_t *)*v116;
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            v118 = "Set string field '%s' to '%s'";
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)v118, v114, v115, v116, p_p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            v96 = (void *)__p.__r_.__value_.__r.__words[0];
            goto LABEL_200;
          }
          goto LABEL_201;
        }
LABEL_166:
        std::operator+<char>();
        v110 = std::string::append(&v123, "'");
        v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&v124, 0);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v123.__r_.__value_.__l.__data_);
        goto LABEL_170;
      case 0xA:
      case 0xB:
        v26 = (uint64_t *)*((_QWORD *)this + 1);
        if (*((char *)v26 + 23) < 0)
          v26 = (uint64_t *)*v26;
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Field '%s' is of type Message and should not be handled here", (const char *)a2, v26);
        return;
      case 0xE:
        v35 = google::protobuf::FieldDescriptor::enum_type(this);
        if (!v35)
        {
          std::operator+<char>();
          siri::dialogengine::Log::LogWithLevel((uint64_t)__str, 3u);
          goto LABEL_201;
        }
        siri::dialogengine::StringTrim(" \t\n\r", a5, __str);
        v36 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::SetField(siri::dialogengine::Context *,google::protobuf::Message *,google::protobuf::Reflection const*,google::protobuf::FieldDescriptor const*,std::string const&)::sEnumSynonyms, (const void **)&__str[0].__r_.__value_.__l.__data_);
        if ((_UNKNOWN *)v36 != &unk_1EF5829F0)
          std::string::operator=(__str, (const std::string *)(v36 + 56));
        ValueByName = google::protobuf::EnumDescriptor::FindValueByName(v35, (uint64_t)__str);
        if (ValueByName)
        {
          if (v11 == 3)
          {
            google::protobuf::Reflection::AddEnum((uint64_t *)a3, a2, (const std::string::value_type **)this, ValueByName);
            v39 = (uint64_t *)*((_QWORD *)this + 1);
            v40 = "Added to repeated enum '%s': %d";
            if (*((char *)v39 + 23) < 0)
              goto LABEL_134;
          }
          else
          {
            google::protobuf::Reflection::SetEnum((uint64_t *)a3, a2, (const std::string::value_type **)this, ValueByName);
            v39 = (uint64_t *)*((_QWORD *)this + 1);
            v40 = "Set enum field '%s' to %d";
            if (*((char *)v39 + 23) < 0)
LABEL_134:
              v39 = (uint64_t *)*v39;
          }
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)v40, v38, v39, *(unsigned int *)(ValueByName + 16));
          goto LABEL_201;
        }
        std::operator+<char>();
        v86 = std::string::append(&v122, "\" for field '");
        v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v123.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        v88 = *((_QWORD *)this + 1);
        v89 = *(char *)(v88 + 23);
        if (v89 >= 0)
          v90 = (const std::string::value_type *)*((_QWORD *)this + 1);
        else
          v90 = *(const std::string::value_type **)v88;
        if (v89 >= 0)
          v91 = *(unsigned __int8 *)(v88 + 23);
        else
          v91 = *(_QWORD *)(v88 + 8);
        v92 = std::string::append(&v123, v90, v91);
        v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v93;
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        v94 = std::string::append(&v124, "'");
        v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v95;
        v94->__r_.__value_.__l.__size_ = 0;
        v94->__r_.__value_.__r.__words[2] = 0;
        v94->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError(a1, (__int128 *)&__p, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v123.__r_.__value_.__l.__data_);
        if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
        {
          v96 = (void *)v122.__r_.__value_.__r.__words[0];
LABEL_200:
          operator delete(v96);
        }
LABEL_201:
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str[0].__r_.__value_.__l.__data_);
        break;
      default:
        v56 = (uint64_t *)*((_QWORD *)this + 1);
        if (*((char *)v56 + 23) < 0)
          v56 = (uint64_t *)*v56;
        v57 = (unint64_t *)*((_QWORD *)this + 6);
        if (v57)
        {
          v124.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
          v123.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
          v58 = atomic_load(v57);
          if (v58 != -1)
          {
            __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
            __str[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v123;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
            std::__call_once(v57, &__p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
          }
          v14 = google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*((unsigned int *)this + 14)];
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Field '%s' is of unhandled cpp type '%s'", (const char *)a2, v56, google::protobuf::FieldDescriptor::kCppTypeToName[v14]);
        return;
    }
  }
  else
  {
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = (uint64_t *)a5;
    else
      v19 = (uint64_t *)a5->__r_.__value_.__r.__words[0];
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Null value attempting to set field to '%s'", (const char *)a2, v19);
  }
}

void sub_1BFAF2210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;
  uint64_t i;

  for (i = 48; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v58 + i);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[8],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "FULL");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "CONTENT");
  return a1;
}

void sub_1BFAF23D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "SUPPORTING");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "CAPTION");
  return a1;
}

void sub_1BFAF242C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ResponseHasGroup(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v4 = a2;
  if (a2)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (!a1)
  {
    v18 = 0;
    if (a2)
      goto LABEL_37;
    return v18;
  }
  v8 = *(_QWORD *)(a1 + 256);
  v7 = *(std::__shared_weak_count **)(a1 + 264);
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (!v8 || *(int *)(v8 + 304) < 1)
  {
LABEL_27:
    v18 = 0;
    if (v7)
      goto LABEL_32;
    goto LABEL_36;
  }
  v11 = 0;
  while (1)
  {
    v12 = *(unsigned __int8 **)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>(v8 + 296, v11)+ 40);
    v13 = v12[23];
    if ((v13 & 0x80u) == 0)
      v14 = v12[23];
    else
      v14 = *((_QWORD *)v12 + 1);
    v15 = *(unsigned __int8 *)(a3 + 23);
    v16 = (char)v15;
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(a3 + 8);
    if (v14 != v15)
      goto LABEL_26;
    v17 = v16 >= 0 ? (unsigned __int8 *)a3 : *(unsigned __int8 **)a3;
    if ((v13 & 0x80) != 0)
      break;
    if (!v12[23])
      goto LABEL_31;
    while (*v12 == *v17)
    {
      ++v12;
      ++v17;
      if (!--v13)
        goto LABEL_31;
    }
LABEL_26:
    if (++v11 >= *(_DWORD *)(v8 + 304))
      goto LABEL_27;
  }
  if (memcmp(*(const void **)v12, v17, *((_QWORD *)v12 + 1)))
    goto LABEL_26;
LABEL_31:
  v18 = 1;
  if (v7)
  {
LABEL_32:
    v19 = (unint64_t *)&v7->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_36:
  v4 = a2;
  if (a2)
  {
LABEL_37:
    v21 = (unint64_t *)&v4->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v18;
}

void sub_1BFAF25F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BFAF26D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ValidateSnippetUIMessage(siri::dialogengine *this, siri::dialogengine::Context *a2, const google::protobuf::Message *a3)
{
  const std::string::value_type ***v5;
  const std::string::value_type ***v6;
  uint64_t v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  uint64_t *v12;
  uint64_t FieldByName;
  const void ***v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  char *v23;
  char **v24;
  uint64_t *RequiredFields;
  uint64_t *v26;
  _QWORD *v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t OneofByName;
  unint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  std::string *v40;
  __int128 v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  void **v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  int v58;
  void **v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v67;
  const char *v68;
  const google::protobuf::FieldDescriptor **v69;
  std::string::size_type v70;
  const google::protobuf::FieldDescriptor *v71;
  uint64_t *v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v81;
  unint64_t v82;
  int i;
  siri::dialogengine::Context *RepeatedMessage;
  const google::protobuf::Message *v85;
  siri::dialogengine::Context *Message;
  const google::protobuf::Message *v87;
  _QWORD *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  void **v93;
  uint64_t v94;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  void *__p[2];
  int64_t v101;
  char **v102;
  char *v103[2];
  void *v104[2];
  char v105;
  char **v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  std::string v111;

  if (!this)
  {
    LOBYTE(v28) = 0;
    return v28 & 1;
  }
  (*(void (**)(void **__return_ptr, siri::dialogengine::Context *))(*(_QWORD *)a2 + 16))(v104, a2);
  (*(void (**)(siri::dialogengine::Context *))(*(_QWORD *)a2 + 168))(a2);
  v6 = v5;
  if (!v5 || (v7 = (*(uint64_t (**)(siri::dialogengine::Context *))(*(_QWORD *)a2 + 168))(a2)) == 0)
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v106, 3u);
    if (SHIBYTE(v108) < 0)
      operator delete(v106);
    LOBYTE(v28) = 0;
    goto LABEL_169;
  }
  v103[0] = 0;
  v103[1] = 0;
  v102 = v103;
  siri::dialogengine::GetStoredItems((uint64_t **)&v111, a2);
  v8 = v111.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v111.__r_.__value_.__l.__data_ != &v111.__r_.__value_.__r.__words[1])
  {
    do
    {
      LODWORD(v106) = *(_DWORD *)(v8 + 32);
      siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v107, (const siri::dialogengine::CatBinary::vcat_item *)(v8 + 40));
      if (v110 == 2)
      {
        v9 = *(_QWORD *)(v109 + 32);
        if ((*(char *)(v9 + 23) & 0x80000000) == 0)
        {
          if (!*(_BYTE *)(v9 + 23))
            goto LABEL_11;
LABEL_10:
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v102, *(const void ***)(v109 + 24), *(_QWORD *)(v109 + 24));
          goto LABEL_11;
        }
        if (*(_QWORD *)(v9 + 8))
          goto LABEL_10;
      }
LABEL_11:
      siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v107);
      v10 = *(std::string **)(v8 + 8);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (std::string *)v10->__r_.__value_.__r.__words[0];
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = *(std::string **)(v8 + 16);
          v64 = v11->__r_.__value_.__r.__words[0] == v8;
          v8 = (std::string::size_type)v11;
        }
        while (!v64);
      }
      v8 = (std::string::size_type)v11;
    }
    while (v11 != (std::string *)&v111.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy((_QWORD *)v111.__r_.__value_.__l.__size_);
  v107 = 0;
  v108 = 0;
  v106 = &v107;
  v12 = (uint64_t *)v102;
  if (v102 != v103)
  {
    do
    {
      if (*((char *)v12 + 55) < 0)
        std::string::__init_copy_ctor_external(&v111, (const std::string::value_type *)v12[4], v12[5]);
      else
        v111 = *(std::string *)(v12 + 4);
      FieldByName = google::protobuf::Descriptor::FindFieldByName(v7, (uint64_t)&v111);
      if (FieldByName)
      {
        v14 = *(const void ****)(FieldByName + 88);
        if (v14)
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v106, *v14, (uint64_t)*v14);
      }
      else
      {
        std::operator+<char>();
        v15 = std::string::append(&v97, " field '");
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v111;
        else
          v17 = (std::string *)v111.__r_.__value_.__r.__words[0];
        if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v111.__r_.__value_.__r.__words[2]);
        else
          size = v111.__r_.__value_.__l.__size_;
        v19 = std::string::append(&v98, (const std::string::value_type *)v17, size);
        v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        v21 = std::string::append(&v99, "'");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v101 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
        if (SHIBYTE(v101) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      v23 = (char *)v12[1];
      if (v23)
      {
        do
        {
          v24 = (char **)v23;
          v23 = *(char **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (char **)v12[2];
          v64 = *v24 == (char *)v12;
          v12 = (uint64_t *)v24;
        }
        while (!v64);
      }
      v12 = (uint64_t *)v24;
    }
    while (v24 != v103);
  }
  RequiredFields = siri::dialogengine::vcat::GetRequiredFields((uint64_t)v104);
  v26 = RequiredFields + 1;
  v27 = (_QWORD *)*RequiredFields;
  v28 = 1;
  if ((uint64_t *)*RequiredFields != RequiredFields + 1)
  {
    while (1)
    {
      if (*((char *)v27 + 55) < 0)
        std::string::__init_copy_ctor_external(&v111, (const std::string::value_type *)v27[4], v27[5]);
      else
        v111 = *(std::string *)(v27 + 4);
      if (v103 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v102, (const void **)&v111.__r_.__value_.__l.__data_))break;
LABEL_51:
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      v29 = (uint64_t *)v27[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (uint64_t *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (uint64_t *)v27[2];
          v64 = *v30 == (_QWORD)v27;
          v27 = v30;
        }
        while (!v64);
      }
      v27 = v30;
      if (v30 == v26)
        goto LABEL_117;
    }
    v31 = google::protobuf::Descriptor::FindFieldByName(v7, (uint64_t)&v111);
    OneofByName = google::protobuf::Descriptor::FindOneofByName(v7, (uint64_t)&v111);
    if (v31)
    {
      v35 = *(unint64_t **)(v31 + 48);
      if (v35)
      {
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        v97.__r_.__value_.__r.__words[0] = v31;
        v36 = atomic_load(v35);
        if (v36 != -1)
        {
          __p[0] = &v98;
          __p[1] = &v97;
          v99.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::__call_once(v35, &v99, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
      }
      v37 = google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(v31 + 56)];
      if (v37 == 7)
        goto LABEL_51;
      v38 = *(unint64_t **)(v31 + 48);
      if (v38)
      {
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        v97.__r_.__value_.__r.__words[0] = v31;
        v39 = atomic_load(v38);
        if (v39 != -1)
        {
          __p[0] = &v98;
          __p[1] = &v97;
          v99.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::__call_once(v38, &v99, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
        v37 = google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(v31 + 56)];
      }
      if (v37 == 8)
        goto LABEL_51;
      if (*(_DWORD *)(v31 + 60) == 3)
      {
        if (!google::protobuf::Reflection::FieldSize(v6, a2, (const google::protobuf::FieldDescriptor *)v31, v32, v33))
        {
          siri::dialogengine::ElementNameFromFieldName((uint64_t)&v111, (uint64_t)__p);
          std::operator+<char>();
          v40 = std::string::append(&v96, " is missing required element '");
          v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          if (v101 >= 0)
            v42 = __p;
          else
            v42 = (void **)__p[0];
          if (v101 >= 0)
            v43 = HIBYTE(v101);
          else
            v43 = (std::string::size_type)__p[1];
LABEL_85:
          v46 = std::string::append(&v97, (const std::string::value_type *)v42, v43);
          v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          v48 = std::string::append(&v98, "'");
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v99.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)this, (__int128 *)&v99, 0);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v98.__r_.__value_.__l.__data_);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if (SHIBYTE(v101) < 0)
            operator delete(__p[0]);
          v28 = 0;
        }
      }
      else if ((google::protobuf::Reflection::HasField(v6, a2, (const google::protobuf::FieldDescriptor *)v31, v32, v33) & 1) == 0)
      {
        siri::dialogengine::ElementNameFromFieldName((uint64_t)&v111, (uint64_t)__p);
        std::operator+<char>();
        v44 = std::string::append(&v96, " is missing required element '");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (v101 >= 0)
          v42 = __p;
        else
          v42 = (void **)__p[0];
        if (v101 >= 0)
          v43 = HIBYTE(v101);
        else
          v43 = (std::string::size_type)__p[1];
        goto LABEL_85;
      }
    }
    if (OneofByName
      && !google::protobuf::Reflection::HasOneof((uint64_t)v6, (uint64_t)a2, OneofByName)
      && &v107 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v106, (const void **)&v111.__r_.__value_.__l.__data_))
    {
      siri::dialogengine::ElementNameFromFieldName((uint64_t)&v111, (uint64_t)__p);
      std::operator+<char>();
      v50 = std::string::append(&v96, " is missing required oneof choice for element '");
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v97.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if (v101 >= 0)
        v52 = __p;
      else
        v52 = (void **)__p[0];
      if (v101 >= 0)
        v53 = HIBYTE(v101);
      else
        v53 = (std::string::size_type)__p[1];
      v54 = std::string::append(&v97, (const std::string::value_type *)v52, v53);
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      v56 = std::string::append(&v98, "'");
      v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)this, (__int128 *)&v99, 0);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (SHIBYTE(v101) < 0)
        operator delete(__p[0]);
      v28 = 0;
    }
    goto LABEL_51;
  }
LABEL_117:
  v58 = v105;
  if (v105 < 0)
  {
    if (v104[1] != (void *)29)
      goto LABEL_135;
    v59 = (void **)v104[0];
  }
  else
  {
    if (v105 != 29)
      goto LABEL_135;
    v59 = v104;
  }
  v60 = *v59;
  v61 = v59[1];
  v62 = v59[2];
  v63 = *(uint64_t *)((char *)v59 + 21);
  v64 = v60 == (void *)0x5574657070696E53 && v61 == (void *)0x456567616D492E49;
  if (v64 && v62 == (void *)0x422E746E656D656CLL && v63 == 0x656C646E75422E74)
  {
    if (v89)
    {
      v91 = v89[3];
      if (*(char *)(v91 + 23) < 0)
        v92 = *(_QWORD *)(v91 + 8);
      else
        v92 = *(unsigned __int8 *)(v91 + 23);
      if (!v92)
      {
        v94 = v89[4];
        if (!(*(char *)(v94 + 23) < 0 ? *(_QWORD *)(v94 + 8) : *(unsigned __int8 *)(v94 + 23)))
        {
          std::string::basic_string[abi:ne180100]<0>(&v111, "ImageElement.Bundle must have either bundle-id or bundle-path");
          siri::dialogengine::Context::AddValidationError((uint64_t)this, (__int128 *)&v111, 0);
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      v93 = (void **)v104[0];
      if (v58 >= 0)
        v93 = v104;
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Could not get ImageElement.Bundle from message '%s'", v90, v93);
    }
  }
LABEL_135:
  memset(&v111, 0, sizeof(v111));
  google::protobuf::Reflection::ListFields((uint64_t)v6, a2, (uint64_t)&v111);
  v70 = v111.__r_.__value_.__l.__size_;
  v69 = (const google::protobuf::FieldDescriptor **)v111.__r_.__value_.__r.__words[0];
  if (v111.__r_.__value_.__r.__words[0] == v111.__r_.__value_.__l.__size_)
    goto LABEL_166;
  do
  {
    v71 = *v69;
    v72 = *(uint64_t **)*v69;
    v73 = *((char *)v72 + 23);
    if (v73 < 0)
    {
      if (v72[1] != 31)
        goto LABEL_155;
      v72 = (uint64_t *)*v72;
    }
    else if (v73 != 31)
    {
      goto LABEL_155;
    }
    v74 = (uint64_t *)*v72;
    v75 = v72[1];
    v76 = v72[2];
    v77 = *(uint64_t *)((char *)v72 + 23);
    if (v74 == (uint64_t *)0x745F6D6574737973
      && v75 == 0x72616C635F747865
      && v76 == 0x6F69746163696669
      && v77 == 0x656C7469745F6E6FLL)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Visual CAT should not use 'SystemText_ClarificationTitle' until post 2022 OS release, except for Shortcuts.  Check with your designer");
      siri::dialogengine::Context::AddValidationWarning((uint64_t)this, (__int128 *)__p, 0);
      if (SHIBYTE(v101) < 0)
        operator delete(__p[0]);
      v28 = 0;
    }
LABEL_155:
    v81 = (unint64_t *)*((_QWORD *)v71 + 6);
    if (v81)
    {
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
      v82 = atomic_load(v81);
      if (v82 != -1)
      {
        __p[0] = &v98;
        __p[1] = &v97;
        v99.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::__call_once(v81, &v99, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    if (google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*((unsigned int *)v71 + 14)] == 10)
    {
      if (*((_DWORD *)v71 + 15) == 3)
      {
        for (i = 0; i < (int)google::protobuf::Reflection::FieldSize(v6, a2, v71, v67, v68); ++i)
        {
          RepeatedMessage = (siri::dialogengine::Context *)google::protobuf::Reflection::GetRepeatedMessage(v6, a2, v71, i, v68);
          v28 &= siri::dialogengine::ValidateSnippetUIMessage(this, RepeatedMessage, v85);
        }
      }
      else
      {
        Message = (siri::dialogengine::Context *)google::protobuf::Reflection::GetMessage(v6, a2, (const std::string::value_type **)v71, 0, v68);
        v28 &= siri::dialogengine::ValidateSnippetUIMessage(this, Message, v87);
      }
    }
    ++v69;
  }
  while (v69 != (const google::protobuf::FieldDescriptor **)v70);
  v69 = (const google::protobuf::FieldDescriptor **)v111.__r_.__value_.__r.__words[0];
LABEL_166:
  if (v69)
  {
    v111.__r_.__value_.__l.__size_ = (std::string::size_type)v69;
    operator delete(v69);
  }
  std::__tree<std::string>::destroy((uint64_t)&v106, v107);
  std::__tree<std::string>::destroy((uint64_t)&v102, v103[0]);
LABEL_169:
  if (v105 < 0)
    operator delete(v104[0]);
  return v28 & 1;
}

void sub_1BFAF329C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,char *a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 105) < 0)
    operator delete(*(void **)(v54 - 128));
  std::__tree<std::string>::destroy(v54 - 192, *(char **)(v54 - 184));
  std::__tree<std::string>::destroy((uint64_t)&a46, a47);
  if (a54 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const google::protobuf::Message *siri::dialogengine::ExpandMessage(siri::dialogengine *this, siri::dialogengine::Context *a2, google::protobuf::Message *a3)
{
  const google::protobuf::Message *v3;
  siri::dialogengine::Context *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  void **v11;
  google::protobuf::Reflection *v12;
  google::protobuf::Reflection *v13;
  const char *v14;
  double v15;
  google::protobuf::UnknownFieldSet *v16;
  google::protobuf::UnknownFieldSet *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 v20;
  BOOL v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  void *v32;
  __int128 *v33;
  __int128 v34;
  __int128 *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  int v39;
  BOOL v40;
  _QWORD *v41;
  _QWORD **v42;
  _QWORD **v43;
  const void **v44;
  _BOOL4 v45;
  _QWORD *v46;
  const void **v47;
  uint64_t *v48;
  uint64_t *v49;
  const char *v50;
  uint64_t v51;
  __int128 *v52;
  __int128 v53;
  const char *v54;
  unint64_t v55;
  const char *v56;
  google::protobuf::FieldDescriptor **v57;
  __int128 v58;
  std::string *v59;
  const std::string::value_type *v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  uint64_t v64;
  uint64_t v65;
  size_t size;
  std::string::size_type v67;
  const std::string::value_type **v68;
  unsigned __int8 *v69;
  int v70;
  std::string *v71;
  uint64_t v72;
  int v73;
  std::string *v74;
  std::string *v75;
  char *v76;
  std::string *v77;
  std::string *v78;
  const std::string::value_type ***v79;
  const char *v80;
  const char *v81;
  uint64_t *v82;
  unsigned __int8 **v83;
  uint64_t v84;
  const char *v85;
  siri::dialogengine::Context *v86;
  const char *v87;
  google::protobuf::Message *v88;
  unsigned __int8 **v89;
  unsigned __int8 **v90;
  uint64_t *v91;
  std::string *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  google::protobuf::FieldDescriptor **v96;
  google::protobuf::FieldDescriptor *v97;
  uint64_t v98;
  const char *v99;
  const char *v100;
  int v101;
  int v102;
  uint64_t v103;
  const google::protobuf::Message *v104;
  uint64_t v105;
  const char *v106;
  __int128 *v107;
  __int128 v108;
  std::string::size_type v109;
  uint64_t v110;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::string *v115;
  std::string *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  const char *v120;
  int v121;
  std::string *v122;
  const char *v123;
  const char *v124;
  int v125;
  unint64_t i;
  std::string::size_type v127;
  const char *v128;
  uint64_t v129;
  const char *v130;
  siri::dialogengine::Context *v131;
  int j;
  int v133;
  google::protobuf::Message *v134;
  uint64_t *v135;
  std::string *v136;
  std::string::size_type p_size;
  int v138;
  int k;
  int v140;
  uint64_t v141;
  const char *v142;
  google::protobuf::internal::ExtensionSet::Extension *v143;
  const char *v144;
  google::protobuf::Message *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  const char *v149;
  siri::dialogengine::Context *v150;
  google::protobuf::Message *v151;
  const char *v152;
  uint64_t *v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  const std::string::value_type ***v157;
  const std::string::value_type ***v158;
  uint64_t *RequiredFields;
  uint64_t *v160;
  _QWORD *v161;
  const google::protobuf::FieldDescriptor *FieldByName;
  const char *v163;
  uint64_t v164;
  const char *v165;
  std::string::size_type v166;
  std::string *v167;
  uint64_t *v168;
  const char *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  std::string *v173;
  uint64_t *v174;
  uint64_t *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  std::string *v180;
  std::string::size_type v181;
  std::string *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t OneofByName;
  google::protobuf::FieldDescriptor **v187;
  google::protobuf::FieldDescriptor **v188;
  uint64_t v189;
  siri::dialogengine::Context *v190;
  google::protobuf::Message *v191;
  const std::string::value_type ***v192;
  std::string v193;
  char v194;
  std::string v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  void *v204;
  char v205;
  void *v206;
  char v207;
  void *__p;
  uint64_t v209;
  unsigned __int8 v210;
  std::string v211;
  std::string v212;
  std::string v213;
  int data;
  uint64_t *v215;
  _QWORD *v216[2];
  uint64_t *v217;
  _QWORD *v218[2];
  uint64_t *v219;
  _QWORD *v220;
  uint64_t v221;
  std::string v222;
  std::string v223;
  void *v224[2];
  char v225;
  std::string v226;
  std::string v227;
  google::protobuf::FieldDescriptor **v228;
  google::protobuf::FieldDescriptor **v229;
  uint64_t v230;

  if (!this)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Null Context while expanding message", (const char *)a2, a3);
    return 0;
  }
  v3 = a2;
  if (!a2)
    return v3;
  v4 = this;
  if (!(*(unsigned int (**)(siri::dialogengine::Context *, siri::dialogengine::Context *, google::protobuf::Message *))(*(_QWORD *)a2 + 64))(a2, a2, a3))return 0;
  (*(void (**)(void **__return_ptr, const google::protobuf::Message *))(*(_QWORD *)v3 + 16))(v224, v3);
  v5 = (*(uint64_t (**)(const google::protobuf::Message *))(*(_QWORD *)v3 + 168))(v3);
  v7 = v5;
  if (!v5)
  {
    v11 = v224;
    if (v225 < 0)
      v11 = (void **)v224[0];
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get message descriptor for message type '%s'", v6, v11);
    v3 = 0;
    goto LABEL_365;
  }
  v8 = *(__int128 **)(v5 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v223.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v9;
  }
  (*(void (**)(const google::protobuf::Message *))(*(_QWORD *)v3 + 168))(v3);
  v13 = v12;
  if (!v12)
  {
    v92 = &v223;
    if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v92 = (std::string *)v223.__r_.__value_.__r.__words[0];
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get message reflection for '%s'", 0, v92);
    v3 = 0;
    goto LABEL_363;
  }
  siri::dialogengine::GetMessageCondition(&v222, v3);
  if ((siri::dialogengine::ConditionIsTrue(v4, (uint64_t)&v222) & 1) != 0)
  {
    v15 = google::protobuf::Reflection::MutableUnknownFields(v13, v3);
    v17 = v16;
    if (v16)
    {
      siri::dialogengine::GetListInfo(&v219, v4, v3);
      v18 = v219;
      if (v219 != (uint64_t *)&v220)
      {
        do
        {
          std::pair<std::string const,siri::dialogengine::ListInfo>::pair[abi:ne180100]((std::string *)&v201, (__int128 *)v18 + 2);
          v19 = v210;
          v20 = v210;
          if ((v210 & 0x80u) != 0)
            v19 = v209;
          if (v19)
            v21 = 1;
          else
            v21 = SDWORD2(v202) <= 19999;
          if (v21)
          {
            google::protobuf::UnknownFieldSet::DeleteByNumber(v17, SDWORD2(v202));
            v20 = v210;
          }
          if ((v20 & 0x80) != 0)
            operator delete(__p);
          if (v207 < 0)
            operator delete(v206);
          if (v205 < 0)
            operator delete(v204);
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
          if (*((_QWORD *)&v203 + 1))
          {
            v23 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          if (SBYTE7(v202) < 0)
            operator delete((void *)v201);
          v25 = (uint64_t *)v18[1];
          if (v25)
          {
            do
            {
              v26 = v25;
              v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v26 = (uint64_t *)v18[2];
              v40 = *v26 == (_QWORD)v18;
              v18 = v26;
            }
            while (!v40);
          }
          v18 = v26;
        }
        while (v26 != (uint64_t *)&v220);
      }
      v189 = v7;
      v192 = (const std::string::value_type ***)v13;
      v218[1] = 0;
      v217 = (uint64_t *)v218;
      v218[0] = 0;
      siri::dialogengine::GetStoredItems(&v215, v3);
      v27 = v215;
      v190 = v4;
      v191 = v3;
      if (v215 != (uint64_t *)v216)
      {
        do
        {
          LODWORD(v195.__r_.__value_.__l.__data_) = *((_DWORD *)v27 + 8);
          siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v195.__r_.__value_.__r.__words[1], (const siri::dialogengine::CatBinary::vcat_item *)(v27 + 5));
          data = (int)v195.__r_.__value_.__l.__data_;
          if ((v196 & 2) != 0)
          {
            if (*(char *)(v197 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v201, *(const std::string::value_type **)v197, *(_QWORD *)(v197 + 8));
            }
            else
            {
              v28 = *(_OWORD *)v197;
              *(_QWORD *)&v202 = *(_QWORD *)(v197 + 16);
              v201 = v28;
            }
            if ((siri::dialogengine::ConditionIsTrue(v4, (uint64_t)&v201) & 1) == 0)
            {
              std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v217, &data, &data);
              if (SBYTE7(v202) < 0)
              {
                v32 = (void *)v201;
LABEL_91:
                operator delete(v32);
                goto LABEL_92;
              }
              goto LABEL_92;
            }
            if (SBYTE7(v202) < 0)
              operator delete((void *)v201);
          }
          if ((_DWORD)v198 == 2)
          {
            v29 = *((_QWORD *)&v197 + 1);
            v30 = *(__int128 **)(*((_QWORD *)&v197 + 1) + 24);
            if (*((char *)v30 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v213, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
            }
            else
            {
              v31 = *v30;
              v213.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
              *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v31;
            }
            v33 = *(__int128 **)(v29 + 32);
            if (*((char *)v33 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v212, *(const std::string::value_type **)v33, *((_QWORD *)v33 + 1));
            }
            else
            {
              v34 = *v33;
              v212.__r_.__value_.__r.__words[2] = *((_QWORD *)v33 + 2);
              *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v34;
            }
            v35 = *(__int128 **)(v29 + 40);
            if (*((char *)v35 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)v35, *((_QWORD *)v35 + 1));
            }
            else
            {
              v36 = *v35;
              v211.__r_.__value_.__r.__words[2] = *((_QWORD *)v35 + 2);
              *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v36;
            }
            std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v217, &data, &data);
            if ((SHIBYTE(v211.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) == 9)
              {
                v37 = &v211;
                goto LABEL_70;
              }
              goto LABEL_74;
            }
            if (v211.__r_.__value_.__l.__size_ != 9)
              goto LABEL_74;
            v37 = (std::string *)v211.__r_.__value_.__r.__words[0];
LABEL_70:
            v38 = v37->__r_.__value_.__r.__words[0];
            v39 = v37->__r_.__value_.__s.__data_[8];
            v40 = v38 == 0x736D5F666F656E6FLL && v39 == 103;
            if (v40)
            {
              v202 = 0u;
              v203 = 0u;
              v201 = 0u;
              siri::dialogengine::GetMessageInterface((siri::dialogengine *)&v201, v3);
              if ((_BYTE)v201)
              {
                v51 = v202;
                v52 = *(__int128 **)(v202 + 8);
                if (*((char *)v52 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v193, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
                }
                else
                {
                  v53 = *v52;
                  v193.__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 2);
                  *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v53;
                }
                siri::dialogengine::StringSplit((unsigned __int8 *)&v213, " \t\n\r", &v228);
                v57 = v228;
                if ((char *)v229 - (char *)v228 == 48)
                {
                  if (*((char *)v228 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v227, (const std::string::value_type *)*v228, (std::string::size_type)v228[1]);
                    v57 = v228;
                  }
                  else
                  {
                    v58 = *(_OWORD *)v228;
                    v227.__r_.__value_.__r.__words[2] = (std::string::size_type)v228[2];
                    *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v58;
                  }
                  if (*((char *)v57 + 47) < 0)
                    std::string::__init_copy_ctor_external(&v226, (const std::string::value_type *)v57[3], (std::string::size_type)v57[4]);
                  else
                    v226 = *(std::string *)((_BYTE *)v57 + 1);
                  OneofByName = google::protobuf::Descriptor::FindOneofByName(v51, (uint64_t)&v227);
                  if (OneofByName)
                  {
                    v61 = *(unsigned int *)(OneofByName + 24);
                    v62 = HIBYTE(v226.__r_.__value_.__r.__words[2]);
                    v63 = (std::string *)v226.__r_.__value_.__r.__words[0];
                    if ((int)v61 >= 1)
                    {
                      v64 = 0;
                      v65 = *(_QWORD *)(OneofByName + 32);
                      size = v226.__r_.__value_.__l.__size_;
                      if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v67 = HIBYTE(v226.__r_.__value_.__r.__words[2]);
                      else
                        v67 = v226.__r_.__value_.__l.__size_;
                      while (1)
                      {
                        v68 = *(const std::string::value_type ***)(v65 + 8 * v64);
                        if (v68)
                        {
                          v69 = (unsigned __int8 *)*((unsigned __int8 *)*v68 + 23);
                          v70 = (char)v69;
                          if ((char)v69 < 0)
                            v69 = (unsigned __int8 *)*((_QWORD *)*v68 + 1);
                          if ((unsigned __int8 *)v67 == v69)
                          {
                            if (v70 >= 0)
                              v60 = *v68;
                            else
                              v60 = *(const std::string::value_type **)*v68;
                            if ((v62 & 0x80) != 0)
                            {
                              v184 = v61;
                              v185 = v62;
                              v182 = v63;
                              v183 = v65;
                              v181 = v67;
                              v73 = memcmp(v63, v60, size);
                              v67 = v181;
                              v63 = v182;
                              v65 = v183;
                              v61 = v184;
                              v62 = v185;
                              if (!v73)
                              {
LABEL_151:
                                if (google::protobuf::FieldDescriptor::type((google::protobuf::FieldDescriptor *)v68) == 11)
                                {
                                  v79 = (const std::string::value_type ***)*((_QWORD *)&v202 + 1);
                                  if (google::protobuf::Reflection::GetOneofFieldDescriptor(*((uint64_t *)&v202 + 1), (uint64_t)v3, OneofByName))
                                  {
                                    v82 = *(uint64_t **)(OneofByName + 8);
                                    if (*((char *)v82 + 23) < 0)
                                      v82 = (uint64_t *)*v82;
                                    v83 = (unsigned __int8 **)v68[1];
                                    if (*((char *)v83 + 23) < 0)
                                      v83 = (unsigned __int8 **)*v83;
                                    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Oneof '%s' value is already set.  Ignoring value for field '%s'", v80, v82, v83);
                                  }
                                  else
                                  {
                                    v84 = google::protobuf::Reflection::MutableMessage(v79, v3, v68, 0, v81);
                                    v86 = (siri::dialogengine::Context *)v84;
                                    if (v84)
                                    {
                                      if ((google::protobuf::MessageLite::ParseFromString(v84, &v212) & 1) == 0)
                                      {
                                        v89 = (unsigned __int8 **)v68[1];
                                        if (*((char *)v89 + 23) < 0)
                                          v89 = (unsigned __int8 **)*v89;
                                        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not set message contents for oneof field '%s'", v87, v89);
                                      }
                                      if (!siri::dialogengine::ExpandMessage(v4, v86, v88))
                                        google::protobuf::Reflection::ClearOneof((uint64_t)v79, v3, OneofByName);
                                    }
                                    else
                                    {
                                      v90 = (unsigned __int8 **)v68[1];
                                      if (*((char *)v90 + 23) < 0)
                                        v90 = (unsigned __int8 **)*v90;
                                      v91 = *(uint64_t **)(OneofByName + 8);
                                      if (*((char *)v91 + 23) < 0)
                                        v91 = (uint64_t *)*v91;
                                      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not create message '%s' in oneof '%s'", v85, v90, v91);
                                    }
                                  }
                                  goto LABEL_164;
                                }
                                v74 = *(std::string **)(OneofByName + 8);
                                if (SHIBYTE(v74->__r_.__value_.__r.__words[2]) < 0)
                                  v74 = (std::string *)v74->__r_.__value_.__r.__words[0];
                                v75 = &v226;
                                if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                  v75 = (std::string *)v226.__r_.__value_.__r.__words[0];
                                v76 = "Oneof '%s' field '%s' is not a message type";
LABEL_163:
                                siri::dialogengine::Log::Error((siri::dialogengine::Log *)v76, v60, v74, v75);
                                goto LABEL_164;
                              }
                            }
                            else
                            {
                              if (!(_DWORD)v62)
                                goto LABEL_151;
                              v71 = &v226;
                              v72 = v62;
                              while (v71->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v60)
                              {
                                v71 = (std::string *)((char *)v71 + 1);
                                ++v60;
                                if (!--v72)
                                  goto LABEL_151;
                              }
                            }
                          }
                        }
                        if (++v64 == v61)
                        {
                          v63 = (std::string *)v226.__r_.__value_.__r.__words[0];
                          break;
                        }
                      }
                    }
                    v74 = &v226;
                    if ((v62 & 0x80u) != 0)
                      v74 = v63;
                    v75 = *(std::string **)(OneofByName + 8);
                    if (SHIBYTE(v75->__r_.__value_.__r.__words[2]) < 0)
                      v75 = (std::string *)v75->__r_.__value_.__r.__words[0];
                    v76 = "Could not get oneof field '%s' from '%s'";
                    goto LABEL_163;
                  }
                  v77 = &v193;
                  if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v77 = (std::string *)v193.__r_.__value_.__r.__words[0];
                  v78 = &v227;
                  if ((v227.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v78 = (std::string *)v227.__r_.__value_.__r.__words[0];
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get oneof descriptor for message '%s' field '%s'", v60, v77, v78);
LABEL_164:
                  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v226.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v227.__r_.__value_.__l.__data_);
                }
                else
                {
                  v59 = &v213;
                  if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v59 = (std::string *)v213.__r_.__value_.__r.__words[0];
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Oneof field name '%s' does not have two parts", v56, v59);
                }
                v227.__r_.__value_.__r.__words[0] = (std::string::size_type)&v228;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v227);
                if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v193.__r_.__value_.__l.__data_);
              }
              else
              {
                siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get message interface", v50);
              }
            }
            else
            {
LABEL_74:
              v41 = v220;
              if (!v220)
                goto LABEL_84;
              v42 = &v220;
              do
              {
                v43 = v42;
                v44 = (const void **)(v41 + 4);
                v45 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v221, (const void **)v41 + 4, (const void **)&v213.__r_.__value_.__l.__data_);
                v46 = v41 + 1;
                if (!v45)
                {
                  v46 = v41;
                  v42 = (_QWORD **)v41;
                }
                v41 = (_QWORD *)*v46;
              }
              while (*v46);
              if (v42 == &v220
                || (!v45 ? (v47 = v44) : (v47 = (const void **)(v43 + 4)),
                    std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v221, (const void **)&v213.__r_.__value_.__l.__data_, v47)))
              {
LABEL_84:
                v4 = v190;
                v3 = v191;
                siri::dialogengine::ExpandField(v190, v191, (uint64_t)&v213, (uint64_t)&v212);
              }
              else
              {
                v4 = v190;
                siri::dialogengine::TemporaryVariable::TemporaryVariable((siri::dialogengine::TemporaryVariable *)&v201, v190, (const siri::dialogengine::ListInfo *)(v42 + 7));
                v54 = 0;
                v3 = v191;
                while (1)
                {
                  v55 = (unint64_t)v42[8];
                  if (v55)
                    v55 = (uint64_t)(*(_QWORD *)(v55 + 80) - *(_QWORD *)(v55 + 72)) >> 4;
                  if ((unint64_t)v54 >= v55)
                    break;
                  siri::dialogengine::TemporaryVariable::SetIndex((siri::dialogengine::TemporaryVariable *)&v201, v54);
                  siri::dialogengine::ExpandField(v190, v191, (uint64_t)&v213, (uint64_t)&v212);
                  ++v54;
                }
                siri::dialogengine::TemporaryVariable::~TemporaryVariable((siri::dialogengine::TemporaryVariable *)&v201);
              }
            }
            if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v211.__r_.__value_.__l.__data_);
            if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v212.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_92;
            v32 = (void *)v213.__r_.__value_.__r.__words[0];
            goto LABEL_91;
          }
LABEL_92:
          siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&v195.__r_.__value_.__r.__words[1]);
          v48 = (uint64_t *)v27[1];
          if (v48)
          {
            do
            {
              v49 = v48;
              v48 = (uint64_t *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v49 = (uint64_t *)v27[2];
              v40 = *v49 == (_QWORD)v27;
              v27 = v49;
            }
            while (!v40);
          }
          v27 = v49;
        }
        while (v49 != (uint64_t *)v216);
      }
      v93 = v217;
      if (v217 != (uint64_t *)v218)
      {
        do
        {
          google::protobuf::UnknownFieldSet::DeleteByNumber(v17, *((_DWORD *)v93 + 7));
          v94 = (uint64_t *)v93[1];
          if (v94)
          {
            do
            {
              v95 = v94;
              v94 = (uint64_t *)*v94;
            }
            while (v94);
          }
          else
          {
            do
            {
              v95 = (uint64_t *)v93[2];
              v40 = *v95 == (_QWORD)v93;
              v93 = v95;
            }
            while (!v40);
          }
          v93 = v95;
        }
        while (v95 != (uint64_t *)v218);
      }
      v228 = 0;
      v229 = 0;
      v230 = 0;
      google::protobuf::Reflection::ListFields((uint64_t)v192, v3, (uint64_t)&v228);
      v96 = v228;
      v187 = v229;
      if (v228 != v229)
      {
        do
        {
          v188 = v96;
          v97 = *v96;
          if (*v96 && google::protobuf::FieldDescriptor::message_type(*v96))
          {
            if (*((_DWORD *)v97 + 15) == 3)
            {
              v101 = google::protobuf::Reflection::FieldSize(v192, v3, v97, v98, v99);
              if (v101 >= 1)
              {
                v102 = 0;
                while (1)
                {
                  v103 = google::protobuf::Reflection::MutableRepeatedMessage(v192, v3, v97, v102, v100);
                  v104 = (const google::protobuf::Message *)v103;
                  if (v103)
                  {
                    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 64))(v103) & 1) != 0)
                      break;
                  }
LABEL_303:
                  if (++v102 >= v101)
                    goto LABEL_310;
                }
                v105 = (*(uint64_t (**)(const google::protobuf::Message *))(*(_QWORD *)v104 + 168))(v104);
                if (!v105)
                {
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Message has null descriptor", v106);
                  v105 = 0;
                }
                v107 = *(__int128 **)(v105 + 8);
                if (*((char *)v107 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v227, *(const std::string::value_type **)v107, *((_QWORD *)v107 + 1));
                }
                else
                {
                  v108 = *v107;
                  v227.__r_.__value_.__r.__words[2] = *((_QWORD *)v107 + 2);
                  *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v108;
                }
                siri::dialogengine::GetListInfo((uint64_t **)&v193, v4, v104);
                v109 = v193.__r_.__value_.__r.__words[0];
                if ((std::string::size_type *)v193.__r_.__value_.__l.__data_ == &v193.__r_.__value_.__r.__words[1])
                {
LABEL_233:
                  LODWORD(v195.__r_.__value_.__l.__data_) = 0;
                  *(_OWORD *)&v195.__r_.__value_.__r.__words[1] = 0u;
                  v196 = 0u;
                  v197 = 0u;
                  v198 = 0u;
                  v199 = 0u;
                  v200 = 0;
                }
                else
                {
                  while (1)
                  {
                    std::pair<std::string const,siri::dialogengine::ListInfo>::pair[abi:ne180100]((std::string *)&v201, (__int128 *)(v109 + 32));
                    v110 = v210;
                    if ((v210 & 0x80u) != 0)
                      v110 = v209;
                    if (!v110 && SDWORD2(v202) >= 20000)
                      break;
                    if ((char)v210 < 0)
                      operator delete(__p);
                    if (v207 < 0)
                      operator delete(v206);
                    if (v205 < 0)
                      operator delete(v204);
                    v112 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
                    if (*((_QWORD *)&v203 + 1))
                    {
                      v113 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
                      do
                        v114 = __ldaxr(v113);
                      while (__stlxr(v114 - 1, v113));
                      if (!v114)
                      {
                        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                        std::__shared_weak_count::__release_weak(v112);
                      }
                    }
                    if (SBYTE7(v202) < 0)
                      operator delete((void *)v201);
                    v115 = *(std::string **)(v109 + 8);
                    if (v115)
                    {
                      do
                      {
                        v116 = v115;
                        v115 = (std::string *)v115->__r_.__value_.__r.__words[0];
                      }
                      while (v115);
                    }
                    else
                    {
                      do
                      {
                        v116 = *(std::string **)(v109 + 16);
                        v40 = v116->__r_.__value_.__r.__words[0] == v109;
                        v109 = (std::string::size_type)v116;
                      }
                      while (!v40);
                    }
                    v109 = (std::string::size_type)v116;
                    if (v116 == (std::string *)&v193.__r_.__value_.__r.__words[1])
                      goto LABEL_233;
                  }
                  siri::dialogengine::ListInfo::ListInfo((uint64_t)&v195, (uint64_t)&v202 + 8);
                  if ((char)v210 < 0)
                    operator delete(__p);
                  if (v207 < 0)
                    operator delete(v206);
                  if (v205 < 0)
                    operator delete(v204);
                  v117 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
                  if (*((_QWORD *)&v203 + 1))
                  {
                    v118 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
                    do
                      v119 = __ldaxr(v118);
                    while (__stlxr(v119 - 1, v118));
                    if (!v119)
                    {
                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                      std::__shared_weak_count::__release_weak(v117);
                    }
                  }
                  if (SBYTE7(v202) < 0)
                    operator delete((void *)v201);
                }
                std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy((_QWORD *)v193.__r_.__value_.__l.__size_);
                siri::dialogengine::GetConditionInfo((siri::dialogengine *)&v193, v104);
                siri::dialogengine::ClearUnknownField(v104, (google::protobuf::Message *)LODWORD(v195.__r_.__value_.__l.__data_));
                if (SBYTE7(v197) < 0)
                {
                  if (!*((_QWORD *)&v196 + 1))
                    goto LABEL_253;
                }
                else if (!BYTE7(v197))
                {
                  goto LABEL_253;
                }
                if (!v195.__r_.__value_.__l.__size_
                  || *(_QWORD *)(v195.__r_.__value_.__l.__size_ + 80) == *(_QWORD *)(v195.__r_.__value_.__l.__size_ + 72))
                {
                  v122 = &v227;
                  if ((v227.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v122 = (std::string *)v227.__r_.__value_.__r.__words[0];
                  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Clearing message '%s' based on empty or missing list parameter", v120, v122);
                  v121 = 1;
                }
                else
                {
LABEL_253:
                  v121 = 0;
                }
                if ((siri::dialogengine::ConditionIsTrue(v4, (uint64_t)&v193.__r_.__value_.__l.__size_) & 1) != 0)
                {
                  if (!v121)
                  {
                    siri::dialogengine::TemporaryVariable::TemporaryVariable((siri::dialogengine::TemporaryVariable *)&v201, v4, (const siri::dialogengine::ListInfo *)&v195);
                    v125 = 0;
                    for (i = 1; ; ++i)
                    {
                      v127 = v195.__r_.__value_.__l.__size_;
                      if (v195.__r_.__value_.__l.__size_)
                        v127 = (uint64_t)(*(_QWORD *)(v195.__r_.__value_.__l.__size_ + 80)
                                       - *(_QWORD *)(v195.__r_.__value_.__l.__size_ + 72)) >> 4;
                      if (i >= v127)
                        break;
                      v131 = (siri::dialogengine::Context *)google::protobuf::Reflection::AddMessage(v192, v3, (const std::string::value_type **)v97, 0, v124);
                      if (v131)
                      {
                        v101 = google::protobuf::Reflection::FieldSize(v192, v3, v97, v129, v130);
                        google::protobuf::MutableRepeatedFieldRef<google::protobuf::Message,void>::MutableRepeatedFieldRef((uint64_t **)&v226, (uint64_t)v3, v97);
                        ++v125;
                        for (j = v101 - 2; j + 1 > v125 + v102; j = v133)
                        {
                          v133 = j - 1;
                          (*(void (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v226.__r_.__value_.__l.__size_
                                                                                                 + 56))(v226.__r_.__value_.__l.__size_, v226.__r_.__value_.__r.__words[0]);
                        }
                        (*(void (**)(siri::dialogengine::Context *, const google::protobuf::Message *))(*(_QWORD *)v131 + 128))(v131, v104);
                        v4 = v190;
                        siri::dialogengine::TemporaryVariable::SetIndex((siri::dialogengine::TemporaryVariable *)&v201, (const char *)i);
                        siri::dialogengine::ExpandMessage(v190, v131, v134);
                        v3 = v191;
                      }
                      else
                      {
                        v135 = *(uint64_t **)(v189 + 8);
                        if (*((char *)v135 + 23) < 0)
                          v135 = (uint64_t *)*v135;
                        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to create list instance %zu for '%s'", v128, i, v135);
                      }
                    }
                    siri::dialogengine::TemporaryVariable::SetIndex((siri::dialogengine::TemporaryVariable *)&v201, 0);
                    siri::dialogengine::ExpandMessage(v4, v104, v145);
                    siri::dialogengine::ClearUnknownField(v104, (google::protobuf::Message *)LODWORD(v193.__r_.__value_.__l.__data_));
                    v102 += v125;
                    siri::dialogengine::TemporaryVariable::~TemporaryVariable((siri::dialogengine::TemporaryVariable *)&v201);
LABEL_288:
                    if (v194 < 0)
                      operator delete((void *)v193.__r_.__value_.__l.__size_);
                    if (SHIBYTE(v200) < 0)
                      operator delete((void *)v199);
                    if (SHIBYTE(v198) < 0)
                      operator delete(*((void **)&v197 + 1));
                    if (SBYTE7(v197) < 0)
                      operator delete((void *)v196);
                    v146 = (std::__shared_weak_count *)v195.__r_.__value_.__r.__words[2];
                    if (v195.__r_.__value_.__r.__words[2])
                    {
                      v147 = (unint64_t *)(v195.__r_.__value_.__r.__words[2] + 8);
                      do
                        v148 = __ldaxr(v147);
                      while (__stlxr(v148 - 1, v147));
                      if (!v148)
                      {
                        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                        std::__shared_weak_count::__release_weak(v146);
                      }
                    }
                    if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v227.__r_.__value_.__l.__data_);
                    goto LABEL_303;
                  }
                }
                else
                {
                  v136 = &v227;
                  if ((v227.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v136 = (std::string *)v227.__r_.__value_.__r.__words[0];
                  if (v194 >= 0)
                    p_size = (std::string::size_type)&v193.__r_.__value_.__l.__size_;
                  else
                    p_size = v193.__r_.__value_.__l.__size_;
                  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Clearing message '%s' based on unmet condition '%s'", v123, v136, p_size);
                }
                (*(void (**)(const google::protobuf::Message *))(*(_QWORD *)v104 + 56))(v104);
                google::protobuf::MutableRepeatedFieldRef<google::protobuf::Message,void>::MutableRepeatedFieldRef((uint64_t **)&v201, (uint64_t)v3, v97);
                if (v102 <= --v101)
                  v138 = v101;
                else
                  v138 = v102;
                for (k = v102; v138 != k; k = v140)
                {
                  v140 = k + 1;
                  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v201 + 1) + 56))(*((_QWORD *)&v201 + 1), v201);
                }
                (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v201 + 1) + 48))(*((_QWORD *)&v201 + 1), v201);
                v143 = google::protobuf::Reflection::FieldSize(v192, v3, v97, v141, v142);
                if ((_DWORD)v143 != v101)
                  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Bad field count %d after removing null message", v144, v143);
                --v102;
                goto LABEL_288;
              }
            }
            else if (google::protobuf::Reflection::HasField(v192, v3, v97, v98, v99))
            {
              v150 = (siri::dialogengine::Context *)google::protobuf::Reflection::MutableMessage(v192, v3, (const std::string::value_type **)v97, 0, v149);
              if (!siri::dialogengine::ExpandMessage(v4, v150, v151))
              {
                v153 = (uint64_t *)*((_QWORD *)v97 + 1);
                if (*((char *)v153 + 23) < 0)
                  v153 = (uint64_t *)*v153;
                siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Removing field '%s'", v152, v153);
                google::protobuf::Reflection::ClearField(v192, v3, v97, v154, v155);
              }
            }
          }
LABEL_310:
          v96 = v188 + 1;
        }
        while (v188 + 1 != v187);
      }
      v201 = 0uLL;
      *(_QWORD *)&v202 = 0;
      v156 = (*(uint64_t (**)(const google::protobuf::Message *))(*(_QWORD *)v3 + 168))(v3);
      if (v156)
      {
        (*(void (**)(google::protobuf::Message *))(*(_QWORD *)v191 + 168))(v191);
        v158 = v157;
        if (v157)
        {
          RequiredFields = siri::dialogengine::vcat::GetRequiredFields(*(_QWORD *)(v156 + 8));
          v160 = RequiredFields + 1;
          v161 = (_QWORD *)*RequiredFields;
          if ((uint64_t *)*RequiredFields != RequiredFields + 1)
          {
            do
            {
              if (*((char *)v161 + 55) < 0)
                std::string::__init_copy_ctor_external(&v195, (const std::string::value_type *)v161[4], v161[5]);
              else
                v195 = *(std::string *)(v161 + 4);
              FieldByName = (const google::protobuf::FieldDescriptor *)google::protobuf::Descriptor::FindFieldByName(v156, (uint64_t)&v195);
              v166 = (std::string::size_type)FieldByName;
              if (FieldByName)
              {
                if (*((_DWORD *)FieldByName + 15) == 3)
                {
                  if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v167 = &v195;
                  else
                    v167 = (std::string *)v195.__r_.__value_.__r.__words[0];
                  v168 = *(uint64_t **)(v156 + 8);
                  if (*((char *)v168 + 23) < 0)
                    v168 = (uint64_t *)*v168;
                  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Setting missing required repeated field '%s' of message '%s' is not implemented", v163, v167, v168);
                }
                else if ((google::protobuf::Reflection::HasField(v158, v191, FieldByName, v164, v165) & 1) == 0)
                {
                  v170 = *(unint64_t **)(v166 + 48);
                  if (v170)
                  {
                    v226.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
                    v213.__r_.__value_.__r.__words[0] = v166;
                    v171 = atomic_load(v170);
                    if (v171 != -1)
                    {
                      v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&v226;
                      v193.__r_.__value_.__l.__size_ = (std::string::size_type)&v213;
                      v227.__r_.__value_.__r.__words[0] = (std::string::size_type)&v193;
                      std::__call_once(v170, &v227, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
                    }
                  }
                  v172 = google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(v166 + 56)];
                  if (v172 > 0xA)
                  {
LABEL_339:
                    v175 = *(uint64_t **)(v166 + 8);
                    if (*((char *)v175 + 23) < 0)
                      v175 = (uint64_t *)*v175;
                    v176 = *(unint64_t **)(v166 + 48);
                    if (v176)
                    {
                      v226.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
                      v213.__r_.__value_.__r.__words[0] = v166;
                      v177 = atomic_load(v176);
                      if (v177 != -1)
                      {
                        v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&v226;
                        v193.__r_.__value_.__l.__size_ = (std::string::size_type)&v213;
                        v227.__r_.__value_.__r.__words[0] = (std::string::size_type)&v193;
                        std::__call_once(v176, &v227, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
                      }
                      v172 = google::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(v166 + 56)];
                    }
                    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Field '%s' is of unhandled cpp type '%s'", v169, v175, google::protobuf::FieldDescriptor::kCppTypeToName[v172]);
                    goto LABEL_346;
                  }
                  if (((1 << v172) & 0x2FE) != 0)
                  {
                    if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v173 = &v195;
                    else
                      v173 = (std::string *)v195.__r_.__value_.__r.__words[0];
                    v174 = *(uint64_t **)(v156 + 8);
                    if (*((char *)v174 + 23) < 0)
                      v174 = (uint64_t *)*v174;
                    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Setting missing required field '%s' of message '%s' to string ' '\n", v169, v173, v174);
                    std::string::basic_string[abi:ne180100]<0>(&v193, " ");
                    siri::dialogengine::SetField((uint64_t)v190, v191, v158, (google::protobuf::FieldDescriptor *)v166, &v193);
                    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v193.__r_.__value_.__l.__data_);
                  }
                  else if (((1 << v172) & 0x500) == 0)
                  {
                    goto LABEL_339;
                  }
                }
              }
LABEL_346:
              if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v195.__r_.__value_.__l.__data_);
              v178 = (uint64_t *)v161[1];
              if (v178)
              {
                do
                {
                  v179 = v178;
                  v178 = (uint64_t *)*v178;
                }
                while (v178);
              }
              else
              {
                do
                {
                  v179 = (uint64_t *)v161[2];
                  v40 = *v179 == (_QWORD)v161;
                  v161 = v179;
                }
                while (!v40);
              }
              v161 = v179;
            }
            while (v179 != v160);
          }
        }
      }
      v195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v201;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
      if (v228)
      {
        v229 = v228;
        operator delete(v228);
      }
      std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(v216[0]);
      std::__tree<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::__map_value_compare<google::protobuf::StringPiece,std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::less<google::protobuf::StringPiece>,true>,std::allocator<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>>>::destroy((uint64_t)&v217, v218[0]);
      std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy(v220);
      v3 = v191;
      goto LABEL_361;
    }
    v180 = &v223;
    if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v180 = (std::string *)v223.__r_.__value_.__r.__words[0];
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get unknown field set from message '%s", v14, v15, v180);
  }
  else
  {
    (*(void (**)(const google::protobuf::Message *))(*(_QWORD *)v3 + 56))(v3);
  }
  v3 = 0;
LABEL_361:
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v222.__r_.__value_.__l.__data_);
LABEL_363:
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v223.__r_.__value_.__l.__data_);
LABEL_365:
  if (v225 < 0)
    operator delete(v224[0]);
  return v3;
}

void sub_1BFAF4840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a67;
  char a72;
  void *a73;
  char a74;
  _QWORD *a75;
  char a76;
  siri::dialogengine::CatBinary::vcat_item *v76;
  uint64_t v77;

  if (*(char *)(v77 - 153) < 0)
    operator delete(*(void **)(v77 - 176));
  if (*(char *)(v77 - 121) < 0)
    operator delete(*(void **)(v77 - 144));
  *(_QWORD *)(v77 - 144) = v77 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v77 - 144));
  if (a28 < 0)
    operator delete(__p);
  if (a65 < 0)
    operator delete(a60);
  if (a72 < 0)
    operator delete(a67);
  if (a74 < 0)
    operator delete(a73);
  siri::dialogengine::CatBinary::vcat_item::~vcat_item(v76);
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(a75);
  std::__tree<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::__map_value_compare<google::protobuf::StringPiece,std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>,std::less<google::protobuf::StringPiece>,true>,std::allocator<std::__value_type<google::protobuf::StringPiece,google::protobuf::StringPiece>>>::destroy((uint64_t)&a76, (_QWORD *)STACK[0x200]);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy((_QWORD *)STACK[0x218]);
  if (*(char *)(v77 - 225) < 0)
    operator delete(*(void **)(v77 - 248));
  if (*(char *)(v77 - 201) < 0)
    operator delete(*(void **)(v77 - 224));
  if (*(char *)(v77 - 177) < 0)
    operator delete(*(void **)(v77 - 200));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ConditionIsTrue(siri::dialogengine *a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  siri::dialogengine::ExecutionState *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  siri::dialogengine::Context **v22;
  uint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  const char *v26;
  void *v27;
  int v28;
  const void *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  siri::dialogengine::ExecutionState *v34;
  unint64_t v35;
  siri::dialogengine::Context **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  char *v47;
  std::__shared_weak_count *v48;
  std::string __p;
  _QWORD *__s1;
  std::__shared_weak_count *v51;
  unsigned __int8 v52;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
  {
    LOBYTE(v5) = 1;
    return v5 & 1;
  }
  v6 = *((_QWORD *)a1 + 63);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 64);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10)
    {
      if (!v6)
        goto LABEL_40;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v6)
        goto LABEL_40;
    }
    v11 = *((_QWORD *)a1 + 63);
    v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 64);
    v12 = v5 == 0;
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    if (!v6)
      goto LABEL_40;
    v11 = *((_QWORD *)a1 + 63);
    v12 = 1;
  }
  v15 = std::__tree<std::string>::find<std::string>(v11 + 272, (const void **)a2);
  if (v11 + 280 == v15)
  {
    __s1 = 0;
    v51 = 0;
    if (v12)
      goto LABEL_30;
    goto LABEL_26;
  }
  v17 = *(std::__shared_weak_count **)(v15 + 64);
  __s1 = *(_QWORD **)(v15 + 56);
  v51 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (!v12)
  {
LABEL_26:
    v20 = (unint64_t *)&v5->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_30:
  if (__s1)
  {
    v22 = (siri::dialogengine::Context **)__s1[18];
    if (v22 == (siri::dialogengine::Context **)__s1[19])
      LOBYTE(v5) = 0;
    else
      LOBYTE(v5) = siri::dialogengine::EvaluateConditionEntry(a1, *v22, 0, v16);
  }
  if (!v51)
    goto LABEL_39;
  v23 = &v51->__shared_owners_;
  do
    v24 = __ldaxr((unint64_t *)v23);
  while (__stlxr(v24 - 1, (unint64_t *)v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    if (__s1)
      return v5 & 1;
  }
  else
  {
LABEL_39:
    if (__s1)
      return v5 & 1;
  }
LABEL_40:
  siri::dialogengine::ResolveType(0, (uint64_t)a1, a2, 1, (uint64_t)&__s1);
  v25 = (std::__shared_weak_count *)strlen(siri::dialogengine::TYPE_UNKNOWN);
  if ((char)v52 < 0)
  {
    if (v25 == v51)
    {
      if (v25 == (std::__shared_weak_count *)-1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v27 = __s1;
      v28 = memcmp(__s1, siri::dialogengine::TYPE_UNKNOWN, (size_t)v25);
      operator delete(v27);
      if (!v28)
        goto LABEL_47;
    }
    else
    {
      operator delete(__s1);
    }
  }
  else if (v25 == (std::__shared_weak_count *)v52 && !memcmp(&__s1, siri::dialogengine::TYPE_UNKNOWN, (size_t)v25))
  {
LABEL_47:
    if (*(char *)(a2 + 23) >= 0)
      v29 = (const void *)a2;
    else
      v29 = *(const void **)a2;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Could not resolve type for condition '%s', result will be false", v26, v29);
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  v30 = (char *)operator new(0xC0uLL);
  *(_OWORD *)(v30 + 8) = 0u;
  *(_QWORD *)v30 = &off_1E7934DC0;
  *((_OWORD *)v30 + 2) = 0u;
  *((_OWORD *)v30 + 3) = 0u;
  *((_OWORD *)v30 + 4) = 0u;
  *(_OWORD *)(v30 + 104) = 0u;
  *((_QWORD *)v30 + 12) = v30 + 104;
  *((_QWORD *)v30 + 3) = off_1E7939B60;
  *((_QWORD *)v30 + 10) = 0;
  *((_QWORD *)v30 + 11) = &unk_1E7939B88;
  *(_OWORD *)(v30 + 136) = 0u;
  *(_OWORD *)(v30 + 152) = 0u;
  *(_OWORD *)(v30 + 168) = 0u;
  *((_QWORD *)v30 + 23) = 0;
  *(_OWORD *)(v30 + 120) = 0u;
  v47 = v30 + 24;
  v48 = (std::__shared_weak_count *)v30;
  std::string::operator=((std::string *)v30 + 5, (const std::string *)a2);
  v31 = (std::__shared_weak_count *)operator new(0xF8uLL);
  v31->__shared_owners_ = 0;
  v32 = (unint64_t *)&v31->__shared_owners_;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7934E10;
  std::string::basic_string[abi:ne180100]<0>(&__s1, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ConditionExpression::ConditionExpression((uint64_t)&v31[1], (const std::string *)a2, (uint64_t)&__s1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v52 < 0)
    operator delete(__s1);
  v45 = v31 + 1;
  v46 = v31;
  *(_QWORD *)&v44 = v31 + 1;
  *((_QWORD *)&v44 + 1) = v31;
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)v30 + 21, &v44);
  do
    v35 = __ldaxr(v32);
  while (__stlxr(v35 - 1, v32));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  v36 = (siri::dialogengine::Context **)*((_QWORD *)v47 + 18);
  if (v36 == *((siri::dialogengine::Context ***)v47 + 19))
    LOBYTE(v5) = 0;
  else
    LOBYTE(v5) = siri::dialogengine::EvaluateConditionEntry(a1, *v36, 0, v34);
  v37 = v46;
  if (v46)
  {
    v38 = (unint64_t *)&v46->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v48;
  if (v48)
  {
    v41 = (unint64_t *)&v48->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v5 & 1;
}

void sub_1BFAF4F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v22 - 72);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetListInfo(uint64_t **this, siri::dialogengine::Context *a2, const google::protobuf::Message *a3)
{
  uint64_t *v3;
  _QWORD *v4;
  const std::string **v5;
  const std::string **v6;
  const char *v7;
  uint64_t **v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  size_t v27;
  size_t v28;
  char v29;
  std::string *v30;
  int v31;
  const std::string *v32;
  BOOL v33;
  int v34;
  int v35;
  _QWORD *v36;
  const char *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  std::string *v50;
  std::string *v51;
  size_t v52;
  void *v53;
  int v54;
  uint64_t v55;
  char *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  __int128 *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 *v64;
  _QWORD *v65;
  uint64_t *v66;
  void **v67;
  const void **v68;
  char *v69;
  std::string *v70;
  uint64_t *v71;
  uint64_t *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  std::string *p_s1;
  __int128 v81;
  std::string *v82;
  uint64_t **v84;
  char *v86;
  std::__shared_weak_count *v87;
  int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  std::string __p;
  int v94;
  _BYTE v95[40];
  const std::string **v96;
  int v97;
  uint64_t *v98;
  _QWORD *v99[2];
  std::string v100;
  std::string v101;
  std::string __s1;
  __int128 v103;
  uint64_t **v104;
  uint64_t **v105;
  char v106;

  this[1] = 0;
  this[2] = 0;
  v84 = this + 1;
  *this = (uint64_t *)(this + 1);
  siri::dialogengine::GetStoredItems(&v98, a3);
  v3 = v98;
  if (v98 == (uint64_t *)v99)
    goto LABEL_171;
  v4 = this + 2;
  do
  {
    v94 = *((_DWORD *)v3 + 8);
    siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)v95, (const siri::dialogengine::CatBinary::vcat_item *)(v3 + 5));
    if (v97 != 3)
      goto LABEL_150;
    v91 = 0u;
    v92 = 0u;
    memset(&__p, 0, sizeof(__p));
    v89 = 0u;
    v90 = 0u;
    std::string::operator=((std::string *)&v90, v96[3]);
    v5 = (const std::string **)&siri::dialogengine::CatBinary::_vcat_item_repetition_default_instance_;
    if (v97 == 3)
      v5 = v96;
    std::string::operator=((std::string *)((char *)&v91 + 8), v5[4]);
    v88 = v94;
    v6 = (const std::string **)&siri::dialogengine::CatBinary::_vcat_item_repetition_default_instance_;
    if (v97 == 3)
      v6 = v96;
    std::string::operator=(&__p, v6[5]);
    siri::dialogengine::StringSplit((unsigned __int8 *)&v90, ".", &v104);
    v103 = 0uLL;
    v8 = v104;
    if (v105 == v104)
      goto LABEL_105;
    v9 = 0;
    do
    {
      siri::dialogengine::StringSplit((unsigned __int8 *)&v8[3 * v9], "[]", &__s1);
      if (*(char *)(__s1.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)__s1.__r_.__value_.__l.__data_, *(_QWORD *)(__s1.__r_.__value_.__r.__words[0] + 8));
      }
      else
      {
        v10 = *(_OWORD *)__s1.__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = *(_QWORD *)(__s1.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v10;
      }
      v11 = v103;
      if ((_QWORD)v103)
      {
        if (!v12)
          goto LABEL_36;
        v13 = v12;
        v14 = std::__tree<std::string>::find<std::string>((uint64_t)(v12 + 72), (const void **)&v101.__r_.__value_.__l.__data_);
        if (v13 + 80 == (char *)v14)
        {
          v15 = 0uLL;
        }
        else
        {
          v15 = *(_OWORD *)(v14 + 56);
          v16 = *(_QWORD *)(v14 + 64);
          if (v16)
          {
            v17 = (unint64_t *)(v16 + 8);
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
        }
        size = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
        v103 = v15;
        if (size)
        {
          p_shared_owners = (unint64_t *)&size->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          goto LABEL_33;
        }
      }
      else
      {
        siri::dialogengine::Context::FindVariable((uint64_t)a2, (uint64_t)&v101, &v100);
        v19 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = 0uLL;
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
        v103 = v19;
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        size = (std::__shared_weak_count *)v100.__r_.__value_.__l.__size_;
        if (v100.__r_.__value_.__l.__size_)
        {
          v24 = (unint64_t *)(v100.__r_.__value_.__l.__size_ + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
LABEL_33:
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
      }
      v11 = v103;
      if (!(_QWORD)v103)
        goto LABEL_81;
LABEL_36:
      if (*(char *)(v11 + 55) < 0)
        std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)(v11 + 32), *(_QWORD *)(v11 + 40));
      else
        v100 = *(std::string *)(v11 + 32);
      v27 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
      v28 = v27;
      v29 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v27 != v100.__r_.__value_.__l.__size_)
          goto LABEL_80;
        if (v27 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v30 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v27 != HIBYTE(v100.__r_.__value_.__r.__words[2]))
          goto LABEL_81;
        v30 = &v100;
      }
      v31 = memcmp(v30, (const void *)siri::dialogengine::TYPE_ARRAY, v28);
      v32 = (const std::string *)__s1.__r_.__value_.__r.__words[0];
      if (v31)
        v33 = 0;
      else
        v33 = __s1.__r_.__value_.__l.__size_ - __s1.__r_.__value_.__r.__words[0] == 48;
      v34 = v33;
      if (v29 < 0)
      {
        operator delete(v100.__r_.__value_.__l.__data_);
        if (!v34)
          goto LABEL_81;
        v32 = (const std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      else if (!v34)
      {
        goto LABEL_81;
      }
      v35 = siri::dialogengine::StringToInt(v32 + 1, 0, 0);
      if (!v36)
      {
        if (*(char *)(v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)(v11 + 8), *(_QWORD *)(v11 + 16));
        }
        else
        {
          v48 = *(_OWORD *)(v11 + 8);
          v100.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 24);
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v48;
        }
        v50 = &v100;
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v50 = (std::string *)v100.__r_.__value_.__r.__words[0];
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get array from Variable '%s'", v37, v50);
LABEL_79:
        if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_81;
LABEL_80:
        operator delete(v100.__r_.__value_.__l.__data_);
        goto LABEL_81;
      }
      v38 = v36;
      v39 = v36[9];
      v40 = (v36[10] - v39) >> 4;
      if (v40 <= v35)
      {
        if (*(char *)(v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)(v11 + 8), *(_QWORD *)(v11 + 16));
          v40 = (uint64_t)(v38[10] - v38[9]) >> 4;
        }
        else
        {
          v49 = *(_OWORD *)(v11 + 8);
          v100.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 24);
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v49;
        }
        v51 = (std::string *)v100.__r_.__value_.__r.__words[0];
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v100;
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Array '%s' of length %zu has no element for index '%zu'", v37, v51, v40, v35);
        goto LABEL_79;
      }
      v41 = *(_OWORD *)(v39 + 16 * v35);
      v42 = *(_QWORD *)(v39 + 16 * v35 + 8);
      if (v42)
      {
        v43 = (unint64_t *)(v42 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      v103 = v41;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v11 = v103;
LABEL_81:
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v101.__r_.__value_.__l.__data_);
      v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
      if (!v11)
        goto LABEL_105;
      ++v9;
      v8 = v104;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * (v105 - v104));
    if (*(char *)(v11 + 55) < 0)
      std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v11 + 32), *(_QWORD *)(v11 + 40));
    else
      __s1 = *(std::string *)(v11 + 32);
    v52 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
    if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v52 == HIBYTE(__s1.__r_.__value_.__r.__words[2])
        && !memcmp(&__s1, (const void *)siri::dialogengine::TYPE_ARRAY, v52))
      {
        goto LABEL_95;
      }
      goto LABEL_102;
    }
    if (v52 != __s1.__r_.__value_.__l.__size_)
    {
      operator delete(__s1.__r_.__value_.__l.__data_);
      goto LABEL_102;
    }
    if (v52 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v53 = (void *)__s1.__r_.__value_.__r.__words[0];
    v54 = memcmp(__s1.__r_.__value_.__l.__data_, (const void *)siri::dialogengine::TYPE_ARRAY, v52);
    operator delete(v53);
    if (v54)
    {
LABEL_102:
      if ((_QWORD)v103)
      {
        if (*(char *)(v103 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v103 + 8), *(_QWORD *)(v103 + 16));
        }
        else
        {
          v59 = *(_OWORD *)(v103 + 8);
          __s1.__r_.__value_.__r.__words[2] = *(_QWORD *)(v103 + 24);
          *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v59;
        }
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_s1 = &__s1;
        else
          p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"List variable '%s' is not an array", v7, p_s1);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
      }
      else
      {
LABEL_105:
        v60 = &v90;
        if (SBYTE7(v91) < 0)
          v60 = (__int128 *)v90;
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Did not find input variable for '%s'", v7, v60);
      }
      v86 = 0;
      v87 = 0;
LABEL_109:
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      goto LABEL_114;
    }
LABEL_95:
    v55 = v103;
    if (!(_QWORD)v103
    {
      v86 = 0;
      v87 = 0;
      if (*(char *)(v55 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v55 + 8), *(_QWORD *)(v55 + 16));
      }
      else
      {
        v81 = *(_OWORD *)(v55 + 8);
        __s1.__r_.__value_.__r.__words[2] = *(_QWORD *)(v55 + 24);
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v81;
      }
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = &__s1;
      else
        v82 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get array from array variable '%s'", v7, v82);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      goto LABEL_109;
    }
    v86 = v56;
    v87 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    if (*((_QWORD *)&v103 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      goto LABEL_109;
    }
LABEL_114:
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
    if (v86)
    {
      std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](&v89, (uint64_t)v86, (uint64_t)v87);
    }
    else
    {
      v64 = &v90;
      if (SBYTE7(v91) < 0)
        v64 = (__int128 *)v90;
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not find list array variable '%s'", 0, v64);
    }
    v65 = v84;
    v66 = *v84;
    v67 = (void **)v84;
    if (!*v84)
      goto LABEL_128;
    v67 = (void **)v84;
    while (1)
    {
      while (1)
      {
        v65 = v66;
        v68 = (const void **)(v66 + 4);
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v4, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)v66 + 4))break;
        v66 = (uint64_t *)*v65;
        v67 = (void **)v65;
        if (!*v65)
          goto LABEL_128;
      }
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v4, v68, (const void **)&__p.__r_.__value_.__l.__data_))break;
      v67 = (void **)(v65 + 1);
      v66 = (uint64_t *)v65[1];
      if (!v66)
        goto LABEL_128;
    }
    v69 = (char *)*v67;
    if (!*v67)
    {
LABEL_128:
      v69 = (char *)operator new(0x98uLL);
      v104 = (uint64_t **)v69;
      v105 = v84;
      v106 = 0;
      v70 = (std::string *)(v69 + 32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v70, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v70->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)v69 + 6) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      }
      *((_DWORD *)v69 + 14) = 0;
      *((_OWORD *)v69 + 4) = 0u;
      *((_OWORD *)v69 + 5) = 0u;
      *((_OWORD *)v69 + 6) = 0u;
      *((_OWORD *)v69 + 7) = 0u;
      *((_OWORD *)v69 + 8) = 0u;
      *((_QWORD *)v69 + 18) = 0;
      v106 = 1;
      *(_QWORD *)v69 = 0;
      *((_QWORD *)v69 + 1) = 0;
      *((_QWORD *)v69 + 2) = v65;
      *v67 = v69;
      v71 = (uint64_t *)v69;
      v72 = (uint64_t *)**this;
      if (v72)
      {
        *this = v72;
        v71 = (uint64_t *)*v67;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v84, v71);
      ++*v4;
      v104 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ListInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ListInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v104);
    }
    *((_DWORD *)v69 + 14) = v88;
    std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)v69 + 8, v89, *((uint64_t *)&v89 + 1));
    std::string::operator=((std::string *)(v69 + 80), (const std::string *)&v90);
    std::string::operator=((std::string *)(v69 + 104), (const std::string *)((char *)&v91 + 8));
    std::string::operator=((std::string *)(v69 + 128), &__p);
    if (v87)
    {
      v73 = (unint64_t *)&v87->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v92) < 0)
      operator delete(*((void **)&v91 + 1));
    if (SBYTE7(v91) < 0)
      operator delete((void *)v90);
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
    if (*((_QWORD *)&v89 + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
LABEL_150:
    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)v95);
    v78 = (uint64_t *)v3[1];
    if (v78)
    {
      do
      {
        v79 = v78;
        v78 = (uint64_t *)*v78;
      }
      while (v78);
    }
    else
    {
      do
      {
        v79 = (uint64_t *)v3[2];
        v33 = *v79 == (_QWORD)v3;
        v3 = v79;
      }
      while (!v33);
    }
    v3 = v79;
  }
  while (v79 != (uint64_t *)v99);
LABEL_171:
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(v99[0]);
}

void sub_1BFAF59FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD **a16, uint64_t a17, siri::dialogengine::CatBinary::vcat_item *a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,_QWORD *a43)
{
  uint64_t v43;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v43 - 144);
  *(_QWORD *)(v43 - 176) = v43 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 176));
  siri::dialogengine::ListInfo::~ListInfo(&a22);
  siri::dialogengine::CatBinary::vcat_item::~vcat_item(a18);
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(a43);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy(*a16);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,siri::dialogengine::ListInfo>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  siri::dialogengine::ListInfo::ListInfo((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1BFAF5B88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,siri::dialogengine::ListInfo>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void siri::dialogengine::ExpandField(siri::dialogengine::Context *a1, google::protobuf::Message *a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  const google::protobuf::FieldDescriptor *FieldByName;
  const char *v13;
  uint64_t v14;
  const char *v15;
  std::string::size_type v16;
  const char *v17;
  std::string *v18;
  _QWORD *v19;
  std::string::size_type v20;
  std::string::size_type size;
  const void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string *v34;
  uint64_t v35;
  int v36;
  int v37;
  void *v39;
  int v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  const char *v54;
  unint64_t *v55;
  unint64_t v56;
  const char *v57;
  uint64_t v58;
  std::string *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  std::string *p_str;
  google::protobuf::Message *v65;
  std::string __str;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  void *__p[2];
  std::string::size_type v82;
  void *v83[2];
  char v84;
  std::string v85;
  std::string v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string v89;
  uint64_t *v90;
  uint64_t *v91;
  char *v92;
  std::__shared_weak_count *v93;
  const void *v94;
  std::__shared_weak_count *v95;
  char *v96;
  char *v97;
  std::string v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v100 = 0u;
  v101 = 0u;
  v99 = 0u;
  siri::dialogengine::GetMessageInterface((siri::dialogengine *)&v99, a2);
  if (!(_BYTE)v99)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get message interface", v8);
    return;
  }
  v9 = v100;
  v10 = *(__int128 **)(v100 + 8);
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v98.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v11;
  }
  FieldByName = (const google::protobuf::FieldDescriptor *)google::protobuf::Descriptor::FindFieldByName(v9, a3);
  v16 = (std::string::size_type)FieldByName;
  if (!FieldByName)
  {
    if (*(char *)(a3 + 23) >= 0)
      v58 = a3;
    else
      v58 = *(_QWORD *)a3;
    v59 = &v98;
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v59 = (std::string *)v98.__r_.__value_.__r.__words[0];
    if (*(char *)(a4 + 23) >= 0)
      v60 = a4;
    else
      v60 = *(_QWORD *)a4;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not get field '%s' from message '%s' with stored expression '%s'", v13, v58, v59, v60);
    goto LABEL_158;
  }
  if (*((_DWORD *)FieldByName + 15) == 3
    || !google::protobuf::Reflection::HasField(*((const std::string::value_type ****)&v100 + 1), a2, FieldByName, v14, v15))
  {
    siri::dialogengine::ParseSpeakableString(a4, &v96);
    v65 = a2;
    memset(&v73, 0, sizeof(v73));
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>((char *)&v73, v96, v97, (v97 - v96) >> 4);
    size = v73.__r_.__value_.__l.__size_;
    v20 = v73.__r_.__value_.__r.__words[0];
    if (v73.__r_.__value_.__r.__words[0] == v73.__r_.__value_.__l.__size_)
    {
LABEL_101:
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      siri::dialogengine::ChunkList::Expand(&v90, (siri::dialogengine::ChunkList *)&v96, a1);
      siri::dialogengine::ExpandToText((uint64_t)&v73, v90, v91);
      v55 = *(unint64_t **)(v16 + 48);
      if (v55)
      {
        v86.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        v85.__r_.__value_.__r.__words[0] = v16;
        v56 = atomic_load(v55);
        if (v56 != -1)
        {
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v85;
          v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::__call_once(v55, &v89, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
      }
      if (*(_DWORD *)(v16 + 56) == 9)
      {
        siri::dialogengine::Dialog::ProcessString(a1, (siri::dialogengine::Context *)&v73, (uint64_t)&__str);
        std::string::operator=(&v73, &__str);
        std::string::operator=(&v74, &v67);
        std::string::operator=(&v75, &v68);
        std::string::operator=(&v76, &v69);
        std::string::operator=(&v77, &v70);
        std::string::operator=(&v78, &v71);
        std::string::operator=(&v79, &v72);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      else
      {
        v61 = *(uint64_t **)(v16 + 8);
        if (*((char *)v61 + 23) < 0)
          v61 = (uint64_t *)*v61;
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"String processing not appropriate for field '%s'", v54, v61);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__str, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
      else
        __str = v73;
      v62 = *(uint64_t **)(v16 + 8);
      if (*((char *)v62 + 23) < 0)
        v62 = (uint64_t *)*v62;
      if (*(char *)(a4 + 23) >= 0)
        v63 = a4;
      else
        v63 = *(_QWORD *)a4;
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Expanded field '%s' expression '%s' to '%s'", v57, v62, v63, p_str);
      siri::dialogengine::SetField((uint64_t)a1, v65, *((const std::string::value_type ****)&v100 + 1), (google::protobuf::FieldDescriptor *)v16, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
      goto LABEL_158;
    }
    while (1)
    {
      v22 = *(const void **)v20;
      v23 = *(std::__shared_weak_count **)(v20 + 8);
      v94 = *(const void **)v20;
      v95 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      if (v22)
      {
        if (v26)
          break;
      }
      v92 = 0;
      v93 = 0;
LABEL_95:
      v51 = v95;
      if (v95)
      {
        v52 = (unint64_t *)&v95->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v20 += 16;
      if (v20 == size)
        goto LABEL_101;
    }
    v27 = (uint64_t)v26;
    v92 = v26;
    v93 = v23;
    if (v23)
    {
      v28 = (unint64_t *)&v23->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    if (v26[223] < 0)
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v26 + 25), *((_QWORD *)v26 + 26));
    else
      __str = *(std::string *)(v26 + 200);
    siri::dialogengine::StringSplit((unsigned __int8 *)&__str, ".", &v90);
    if (v91 == v90)
    {
      v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_90;
    }
    if (*((char *)v90 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v89, (const std::string::value_type *)*v90, v90[1]);
    }
    else
    {
      v30 = *(_OWORD *)v90;
      v89.__r_.__value_.__r.__words[2] = v90[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v30;
    }
    siri::dialogengine::Context::FindVariable((uint64_t)a1, (uint64_t)&v89, &v87);
    if (v87)
    {
      if (*(char *)(v87 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v87 + 8), *(_QWORD *)(v87 + 16));
      }
      else
      {
        v31 = *(_OWORD *)(v87 + 8);
        v86.__r_.__value_.__r.__words[2] = *(_QWORD *)(v87 + 24);
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v31;
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      else
        v32 = v86.__r_.__value_.__l.__size_;
      v33 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = v89.__r_.__value_.__l.__size_;
      if (v32 != v33)
      {
        if ((*((_BYTE *)&v86.__r_.__value_.__s + 23) & 0x80) != 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        goto LABEL_59;
      }
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v89;
      else
        v34 = (std::string *)v89.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v86.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (!*((_BYTE *)&v86.__r_.__value_.__s + 23))
          goto LABEL_80;
        v35 = 0;
        do
        {
          v36 = v86.__r_.__value_.__s.__data_[v35];
          v37 = v34->__r_.__value_.__s.__data_[v35];
        }
        while (v36 == v37 && HIBYTE(v86.__r_.__value_.__r.__words[2]) - 1 != v35++);
        if (v36 == v37)
          goto LABEL_80;
LABEL_59:
        std::string::basic_string[abi:ne180100]<0>(&v86, ".");
        if ((char *)v91 - (char *)v90 == 24)
          MEMORY[0x1C3B8D53C](&v86, "");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v89.__r_.__value_.__l.__data_, (const void **)&v86.__r_.__value_.__l.__data_, (uint64_t)v83);
        if (*(char *)(v87 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(v87 + 8), *(_QWORD *)(v87 + 16));
        }
        else
        {
          v41 = *(_OWORD *)(v87 + 8);
          v80.__r_.__value_.__r.__words[2] = *(_QWORD *)(v87 + 24);
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v41;
        }
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v86;
        else
          v42 = (std::string *)v86.__r_.__value_.__r.__words[0];
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
        else
          v43 = v86.__r_.__value_.__l.__size_;
        v44 = std::string::append(&v80, (const std::string::value_type *)v42, v43);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v82 = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::StringReplace((uint64_t)&__str, (char *)v83, (uint64_t)__p, 0, &v85);
        if (SHIBYTE(v82) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if (v84 < 0)
          operator delete(v83[0]);
        siri::dialogengine::ChunkVariable::SetName(v27, &v85);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        goto LABEL_80;
      }
      v39 = (void *)v86.__r_.__value_.__r.__words[0];
      v40 = memcmp(v86.__r_.__value_.__l.__data_, v34, v86.__r_.__value_.__l.__size_);
      operator delete(v39);
      if (v40)
        goto LABEL_59;
    }
LABEL_80:
    v46 = v88;
    if (v88)
    {
      v47 = (unint64_t *)&v88->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v23 = v93;
LABEL_90:
    if (v23)
    {
      v49 = (unint64_t *)&v23->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    goto LABEL_95;
  }
  v18 = &v98;
  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v98.__r_.__value_.__r.__words[0];
  v19 = *(_QWORD **)v16;
  if (*(char *)(*(_QWORD *)v16 + 23) < 0)
    v19 = (_QWORD *)*v19;
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Message '%s' field '%s' has already been set", v17, v18, v19);
LABEL_158:
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
}

void sub_1BFAF647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a36);
  a36 = v36 - 256;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  *(_QWORD *)(v36 - 256) = v36 - 200;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 256));
  if (*(char *)(v36 - 153) < 0)
    operator delete(*(void **)(v36 - 176));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::ListInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ListInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ListInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ListInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void siri::dialogengine::ClearUnknownField(siri::dialogengine *this, google::protobuf::Message *a2)
{
  int v2;
  google::protobuf::Reflection *v4;
  google::protobuf::UnknownFieldSet *v5;
  char *v6;

  if ((_DWORD)a2)
  {
    v2 = (int)a2;
    (*(void (**)(siri::dialogengine *))(*(_QWORD *)this + 168))(this);
    if (v4)
    {
      google::protobuf::Reflection::MutableUnknownFields(v4, this);
      if (v5)
      {
        google::protobuf::UnknownFieldSet::DeleteByNumber(v5, v2);
        return;
      }
      v6 = "Could not get unknown field set";
    }
    else
    {
      v6 = "Could not get message reflection";
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v6, (const char *)v4);
  }
}

uint64_t **google::protobuf::MutableRepeatedFieldRef<google::protobuf::Message,void>::MutableRepeatedFieldRef(uint64_t **a1, uint64_t a2, google::protobuf::FieldDescriptor *a3)
{
  uint64_t v6;
  google::protobuf::Reflection *v7;
  uint64_t MessageFactory;
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 168))(a2);
  v7 = (google::protobuf::Reflection *)v6;
  *a1 = google::protobuf::Reflection::RepeatedFieldData(v6, a2, a3, 10, 0);
  a1[1] = google::protobuf::Reflection::RepeatedFieldAccessor(v7, a3);
  MessageFactory = google::protobuf::Reflection::GetMessageFactory(v7);
  v9 = google::protobuf::FieldDescriptor::message_type(a3);
  a1[2] = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)MessageFactory + 16))(MessageFactory, v9);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ListInfo>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ListInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ListInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ListInfo>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void siri::dialogengine::FilterVisualResponse(siri::dialogengine *this, const siri::dialogengine::Context *a2, SnippetUI::Response *a3)
{
  uint64_t v4;
  char *v5;
  const char *v6;
  void **v7;
  const char *v8;
  int v9;
  int v10;
  const char *v11;
  int *v12;
  int v13;
  char v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  int *v24;
  int v25;
  int *v26;
  unint64_t v27;
  uint64_t v28;
  const google::protobuf::Message *v29;
  const char *v30;
  void **v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  std::string *v36;
  uint64_t v37;
  int v38;
  google::protobuf::internal::RepeatedPtrFieldBase *v39;
  int *v40;
  int *v41;
  void **v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  int *v48;
  int v49;
  int *v50;
  unint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  std::string *v56;
  std::string *v57;
  uint64_t v58;
  int v59;
  google::protobuf::internal::RepeatedPtrFieldBase *v60;
  int *v61;
  int *v62;
  void **v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  int *v69;
  int v70;
  int *v71;
  unint64_t v72;
  uint64_t v73;
  const char *v74;
  std::string v75;
  void *__p;
  int *v77;
  int *v78;
  void *v79[19];
  unsigned int v80;
  char v81;
  void **v82;
  int *v83;
  _QWORD v84[5];

  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v79, (siri::dialogengine *)((char *)this + 8));
  v4 = v80;
  if (v80)
  {
    if (v80 > 4)
      v5 = "";
    else
      v5 = off_1E7930A68[v80 - 1];
    std::string::basic_string[abi:ne180100]<0>(&v82, v5);
    if (v84[0] >= 0)
      v7 = (void **)&v82;
    else
      v7 = v82;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Filtering visuals according to response mode '%s'", v6, v7);
    v9 = *((_DWORD *)a2 + 6);
    if (v9)
    {
      __p = 0;
      v77 = 0;
      v78 = 0;
      if (v9 >= 1)
      {
        v10 = 0;
        while (2)
        {
          v12 = (int *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>((uint64_t)a2 + 16, v10)+ 40);
          if (*v12 < 1)
          {
            v15 = 0;
            v14 = 0;
          }
          else
          {
            v13 = 0;
            v14 = 0;
            v15 = 0;
            do
            {
              v15 |= *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v12, v13) == 0;
              v14 |= *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v12, v13++) == 1;
            }
            while (v13 < *v12);
          }
          switch((int)v4)
          {
            case 1:
              goto LABEL_22;
            case 2:
              if ((v14 & 1) != 0)
                goto LABEL_39;
              goto LABEL_22;
            case 3:
            case 4:
              if ((v15 & 1) != 0)
                goto LABEL_39;
              goto LABEL_22;
            default:
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized response mode: %d", v11, v4);
LABEL_22:
              v16 = v77;
              if (v77 >= v78)
              {
                v18 = (int *)__p;
                v19 = ((char *)v77 - (_BYTE *)__p) >> 2;
                v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 62)
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                v21 = (char *)v78 - (_BYTE *)__p;
                if (((char *)v78 - (_BYTE *)__p) >> 1 > v20)
                  v20 = v21 >> 1;
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
                  v22 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v22 = v20;
                if (v22)
                {
                  v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v78, v22);
                  v18 = (int *)__p;
                  v16 = v77;
                }
                else
                {
                  v23 = 0;
                }
                v24 = (int *)&v23[4 * v19];
                *v24 = v10;
                v17 = v24 + 1;
                while (v16 != v18)
                {
                  v25 = *--v16;
                  *--v24 = v25;
                }
                __p = v24;
                v77 = v17;
                v78 = (int *)&v23[4 * v22];
                if (v18)
                  operator delete(v18);
              }
              else
              {
                *v77 = v10;
                v17 = v16 + 1;
              }
              v77 = v17;
LABEL_39:
              if (++v10 < *((_DWORD *)a2 + 6))
                continue;
              v26 = v77;
              if (v77 != __p)
              {
                v27 = (((char *)v77 - (_BYTE *)__p) >> 2) - 1;
                v26 = (int *)__p;
                do
                {
                  v28 = v26[v27];
                  v29 = (const google::protobuf::Message *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>((uint64_t)a2 + 16, v28);
                  siri::dialogengine::GetVisualElementId(&v75, v29);
                  google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::DeleteSubrange((const siri::dialogengine::Context *)((char *)a2 + 16), v28);
                  if (v84[0] >= 0)
                    v31 = (void **)&v82;
                  else
                    v31 = v82;
                  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v32 = &v75;
                  else
                    v32 = (std::string *)v75.__r_.__value_.__r.__words[0];
                  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Response mode '%s' filtering removed Visual CAT section at index %d whose id is '%s'", v30, v31, v28, v32);
                  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v75.__r_.__value_.__l.__data_);
                  --v27;
                  v26 = (int *)__p;
                }
                while (v27 < ((char *)v77 - (_BYTE *)__p) >> 2);
              }
              if (v26)
              {
                v77 = v26;
                operator delete(v26);
              }
              break;
          }
          break;
        }
      }
    }
    else
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"There are no sections to filter!", v8);
    }
    if (SHIBYTE(v84[0]) < 0)
    {
      operator delete(v82);
      if (!v9)
        goto LABEL_121;
    }
    else if (!v9)
    {
      goto LABEL_121;
    }
  }
  if ((v81 & 1) != 0)
  {
    LODWORD(v33) = *((_DWORD *)a2 + 6);
    if ((int)v33 >= 1)
    {
      v34 = 0;
      do
      {
        if (v34 >= (int)v33)
        {
          v35 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v82, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1561);
          v36 = google::protobuf::internal::LogMessage::operator<<(v35, "CHECK failed: (index) < (current_size_): ");
          google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v36->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v82);
        }
        v37 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8 * v34 + 8);
        v82 = 0;
        v83 = 0;
        v84[0] = 0;
        if (*(int *)(v37 + 24) >= 1)
        {
          v38 = 0;
          v39 = (google::protobuf::internal::RepeatedPtrFieldBase *)(v37 + 16);
          do
          {
            if (*(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>(v37 + 16, v38)+ 36) == 49)
            {
              v40 = v83;
              if ((unint64_t)v83 >= v84[0])
              {
                v42 = v82;
                v43 = ((char *)v83 - (char *)v82) >> 2;
                v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 62)
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                v45 = v84[0] - (_QWORD)v82;
                if ((uint64_t)(v84[0] - (_QWORD)v82) >> 1 > v44)
                  v44 = v45 >> 1;
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                  v46 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v46 = v44;
                if (v46)
                {
                  v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v84, v46);
                  v42 = v82;
                  v40 = v83;
                }
                else
                {
                  v47 = 0;
                }
                v48 = (int *)&v47[4 * v43];
                *v48 = v38;
                v41 = v48 + 1;
                while (v40 != (int *)v42)
                {
                  v49 = *--v40;
                  *--v48 = v49;
                }
                v82 = (void **)v48;
                v83 = v41;
                v84[0] = &v47[4 * v46];
                if (v42)
                  operator delete(v42);
              }
              else
              {
                *v83 = v38;
                v41 = v40 + 1;
              }
              v83 = v41;
            }
            ++v38;
          }
          while (v38 < *(_DWORD *)(v37 + 24));
          v50 = v83;
          if (v83 != (int *)v82)
          {
            v51 = (((char *)v83 - (char *)v82) >> 2) - 1;
            v50 = (int *)v82;
            do
            {
              v52 = v50[v51];
              google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::DeleteSubrange(v39, v52);
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Spotlight filtering removed sash component at index %d", v53, v52);
              --v51;
              v50 = (int *)v82;
            }
            while (v51 < ((char *)v83 - (char *)v82) >> 2);
          }
          if (v50)
          {
            v83 = v50;
            operator delete(v50);
          }
        }
        ++v34;
        v33 = *((int *)a2 + 6);
      }
      while (v34 < v33);
    }
    LODWORD(v54) = *((_DWORD *)a2 + 24);
    if ((int)v54 >= 1)
    {
      v55 = 0;
      do
      {
        if (v55 >= (int)v54)
        {
          v56 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v82, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1561);
          v57 = google::protobuf::internal::LogMessage::operator<<(v56, "CHECK failed: (index) < (current_size_): ");
          google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v57->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v82);
        }
        v58 = *(_QWORD *)(*((_QWORD *)a2 + 13) + 8 * v55 + 8);
        v82 = 0;
        v83 = 0;
        v84[0] = 0;
        if (*(int *)(v58 + 24) >= 1)
        {
          v59 = 0;
          v60 = (google::protobuf::internal::RepeatedPtrFieldBase *)(v58 + 16);
          do
          {
            if (*(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>(v58 + 16, v59)+ 36) == 49)
            {
              v61 = v83;
              if ((unint64_t)v83 >= v84[0])
              {
                v63 = v82;
                v64 = ((char *)v83 - (char *)v82) >> 2;
                v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 62)
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                v66 = v84[0] - (_QWORD)v82;
                if ((uint64_t)(v84[0] - (_QWORD)v82) >> 1 > v65)
                  v65 = v66 >> 1;
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
                  v67 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v67 = v65;
                if (v67)
                {
                  v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v84, v67);
                  v63 = v82;
                  v61 = v83;
                }
                else
                {
                  v68 = 0;
                }
                v69 = (int *)&v68[4 * v64];
                *v69 = v59;
                v62 = v69 + 1;
                while (v61 != (int *)v63)
                {
                  v70 = *--v61;
                  *--v69 = v70;
                }
                v82 = (void **)v69;
                v83 = v62;
                v84[0] = &v68[4 * v67];
                if (v63)
                  operator delete(v63);
              }
              else
              {
                *v83 = v59;
                v62 = v61 + 1;
              }
              v83 = v62;
            }
            ++v59;
          }
          while (v59 < *(_DWORD *)(v58 + 24));
          v71 = v83;
          if (v83 != (int *)v82)
          {
            v72 = (((char *)v83 - (char *)v82) >> 2) - 1;
            v71 = (int *)v82;
            do
            {
              v73 = v71[v72];
              google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::DeleteSubrange(v60, v73);
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Spotlight filtering removed sash component in group %d at index %d", v74, v55, v73);
              --v72;
              v71 = (int *)v82;
            }
            while (v72 < ((char *)v83 - (char *)v82) >> 2);
          }
          if (v71)
          {
            v83 = v71;
            operator delete(v71);
          }
        }
        ++v55;
        v54 = *((int *)a2 + 24);
      }
      while (v55 < v54);
    }
  }
LABEL_121:
  siri::dialogengine::RequestInfo::~RequestInfo(v79);
}

void sub_1BFAF6EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,uint64_t a22,void *a23)
{
  siri::dialogengine::RequestInfo::~RequestInfo(&a23);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetVisualElementId(std::string *this, const google::protobuf::Message *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  __int128 v7;
  _BYTE v8[40];
  __int128 *v9;
  int v10;
  uint64_t *v11;
  _QWORD *v12[2];

  siri::dialogengine::GetStoredItems(&v11, a2);
  v3 = v11;
  if (v11 == (uint64_t *)v12)
  {
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(this, "");
  }
  else
  {
    while (1)
    {
      siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)v8, (const siri::dialogengine::CatBinary::vcat_item *)(v3 + 5));
      if (v10 == 5)
        break;
      siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)v8);
      v4 = (uint64_t *)v3[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (uint64_t *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (uint64_t *)v3[2];
          v6 = *v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
      if (v5 == (uint64_t *)v12)
        goto LABEL_9;
    }
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v7 = *v9;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
    }
    siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)v8);
  }
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(v12[0]);
}

void sub_1BFAF7098(_Unwind_Exception *a1)
{
  siri::dialogengine::CatBinary::vcat_item *v1;
  uint64_t v2;

  siri::dialogengine::CatBinary::vcat_item::~vcat_item(v1);
  std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy(*(_QWORD **)(v2 - 48));
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::DeleteSubrange(google::protobuf::internal::RepeatedPtrFieldBase *this, int a2)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  uint64_t v8;
  BOOL v9;
  std::string *v10;
  std::string *v11;
  char v13;
  std::string v14[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2041);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 2) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2043);
    v5 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start + num) <= (size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1567);
    v6 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 2) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1568);
    v7 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2 + 8);
  if (v8)
    v9 = *(_QWORD *)this == 0;
  else
    v9 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2063);
    v10 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 2) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2065);
    v11 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start + num) <= (size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::internal::RepeatedPtrFieldBase::CloseGap((uint64_t)this, a2, 1);
}

void sub_1BFAF72B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BFAF73B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedPtrField<SnippetUI::Response_Component>::DeleteSubrange(google::protobuf::internal::RepeatedPtrFieldBase *this, int a2)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  uint64_t v8;
  BOOL v9;
  std::string *v10;
  std::string *v11;
  char v13;
  std::string v14[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2041);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 2) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2043);
    v5 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start + num) <= (size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1567);
    v6 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 2) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1568);
    v7 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2 + 8);
  if (v8)
    v9 = *(_QWORD *)this == 0;
  else
    v9 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2063);
    v10 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 2) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 2065);
    v11 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start + num) <= (size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::internal::RepeatedPtrFieldBase::CloseGap((uint64_t)this, a2, 1);
}

void sub_1BFAF75CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::JsonFromResponseMessage(std::string::size_type a1@<X0>, _QWORD *a2@<X8>)
{
  char v4;
  const char *v5;
  char v6;
  _BYTE v7[8];
  void *__p;
  char v9;
  std::string v10;
  _BYTE v11[144];

  SnippetUI::Response::Response((SnippetUI::Response *)v11);
  siri::dialogengine::DecodeBase64(a1, &v10);
  v4 = google::protobuf::MessageLite::ParseFromString(v11, &v10);
  v6 = v4;
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v4 & 1) != 0)
      goto LABEL_3;
LABEL_6:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not decode response", v5);
    std::string::basic_string[abi:ne180100]<0>(a2, "");
    goto LABEL_7;
  }
  operator delete(v10.__r_.__value_.__l.__data_);
  if ((v6 & 1) == 0)
    goto LABEL_6;
LABEL_3:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LODWORD(v10.__r_.__value_.__l.__data_) = 0;
  google::protobuf::util::MessageToJsonString((google::protobuf::util::_anonymous_namespace_ *)v11, (uint64_t)a2, (uint64_t)&v10, (uint64_t)v7);
  if (v9 < 0)
    operator delete(__p);
LABEL_7:
  SnippetUI::Response::~Response((SnippetUI::Response *)v11);
}

void sub_1BFAF76C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  SnippetUI::Response::~Response((SnippetUI::Response *)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::MergeSnippetUIResults(std::string::size_type a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8;
  char v9;
  const char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  char v16;
  const char *v17;
  char v18;
  int i;
  google::protobuf::MessageLite *v20;
  uint64_t v21;
  const char *v22;
  uint64_t *v23;
  int j;
  google::protobuf::MessageLite *v25;
  const char *v26;
  uint64_t *v27;
  const void **v28;
  const char *v29;
  int *v30;
  uint64_t v31;
  int v32;
  SnippetUI::Response_Group *v33;
  uint64_t v34;
  const char *v35;
  int k;
  google::protobuf::MessageLite *v37;
  uint64_t v38;
  google::protobuf::MessageLite *v39;
  const char *v40;
  int *v41;
  uint64_t v42;
  int v43;
  SnippetUI::OrnamentElement *v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  std::string::size_type v48;
  void *v49[2];
  char v50;
  void *v51;
  char *v52;
  uint64_t v53;
  std::string __p;
  int v55[4];
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  char v61;
  int v62[4];
  int *v63;
  unsigned int v64;
  google::protobuf::internal::ArenaImpl *v65;
  int v66;
  int v67;
  int *v68;
  google::protobuf::internal::ArenaImpl *v69;
  int v70;
  int v71;
  int *v72;
  char v73;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a3 + 32));
  SnippetUI::Response::Response((SnippetUI::Response *)v62);
  SnippetUI::Response::Response((SnippetUI::Response *)v55);
  v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    siri::dialogengine::DecodeBase64(a1, &__p);
    v9 = google::protobuf::MessageLite::ParseFromString(v62, &__p);
    v11 = v9;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v11 & 1) != 0)
        goto LABEL_6;
    }
    else if ((v9 & 1) != 0)
    {
LABEL_6:
      v13 = (char *)(a2 + 23);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
      if (!v12)
      {
LABEL_78:
        siri::dialogengine::SetVisualInfo(v62, a3);
        if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        {
          *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
          v48 = *(_QWORD *)(a1 + 16);
LABEL_83:
          a4->__r_.__value_.__r.__words[2] = v48;
          goto LABEL_86;
        }
LABEL_85:
        std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
        goto LABEL_86;
      }
      v14 = 1;
      goto LABEL_16;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not decode first response", v10);
  }
  v13 = (char *)(a2 + 23);
  v15 = *(unsigned __int8 *)(a2 + 23);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a2 + 8);
  if (!v15)
    goto LABEL_80;
  v14 = 0;
LABEL_16:
  siri::dialogengine::DecodeBase64(a2, &__p);
  v16 = google::protobuf::MessageLite::ParseFromString(v55, &__p);
  v18 = v16;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v16 & 1) != 0)
      goto LABEL_18;
LABEL_77:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not decode second response", v17);
    if ((v14 & 1) != 0)
      goto LABEL_78;
LABEL_80:
    std::string::basic_string[abi:ne180100]<0>(a4, "");
    goto LABEL_86;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((v18 & 1) == 0)
    goto LABEL_77;
LABEL_18:
  if ((v14 & 1) == 0)
  {
    siri::dialogengine::SetVisualInfo(v55, a3);
    if ((*v13 & 0x80000000) == 0)
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v48 = *(_QWORD *)(a2 + 16);
      goto LABEL_83;
    }
    a1 = a2;
    goto LABEL_85;
  }
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  v53 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  v51 = &v52;
  v52 = 0;
  if (v70 >= 1)
  {
    for (i = 0; i < v70; ++i)
    {
      v20 = (google::protobuf::MessageLite *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)&v69, i);
      google::protobuf::MessageLite::SerializeAsString(v20, (uint64_t)v49);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&__p, (const void **)v49, (uint64_t)v49);
      if (v50 < 0)
        operator delete(v49[0]);
      v21 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)&v69, i);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v51, *(const void ***)(v21 + 40), *(_QWORD *)(v21 + 40));
      v23 = *(uint64_t **)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)&v69, i)+ 40);
      if (*((char *)v23 + 23) < 0)
        v23 = (uint64_t *)*v23;
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Destination has SnippetUI group '%s'", v22, v23);
    }
  }
  if (v60 >= 1)
  {
    for (j = 0; j < v60; ++j)
    {
      v25 = (google::protobuf::MessageLite *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)&v59, j);
      google::protobuf::MessageLite::SerializeAsString(v25, (uint64_t)v49);
      if (&__p.__r_.__value_.__r.__words[1] == (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&__p, (const void **)v49))
      {
        v28 = *(const void ***)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)&v59, j)+ 40);
        if (&v52 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v51, v28))
        {
          v30 = v72;
          if (v72)
          {
            v31 = v70;
            v32 = *v72;
            if (v70 < *v72)
            {
              ++v70;
              v33 = *(SnippetUI::Response_Group **)&v72[2 * v31 + 2];
              if (v33)
                goto LABEL_46;
LABEL_39:
              if (*((char *)v28 + 23) < 0)
                v28 = (const void **)*v28;
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not create Response Group while merging, ID: %s", v29, v28);
              goto LABEL_49;
            }
            if (v32 == v71)
            {
LABEL_44:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v69, v32 + 1);
              v30 = v72;
              v32 = *v72;
            }
            *v30 = v32 + 1;
            v33 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Response_Group>(v69);
            v34 = v70++;
            *(_QWORD *)&v72[2 * v34 + 2] = v33;
            if (v33)
            {
LABEL_46:
              google::protobuf::MessageLite::ParseFromString(v33, v49);
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v51, v28, (uint64_t)v28);
              if (*((char *)v28 + 23) < 0)
                v28 = (const void **)*v28;
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Merged SnippetUI group '%s'", v35, v28);
              goto LABEL_49;
            }
            goto LABEL_39;
          }
          v32 = v71;
          goto LABEL_44;
        }
        if (*((char *)v28 + 23) < 0)
          v28 = (const void **)*v28;
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Two different Response Groups have the same ID: %s", v29, v28);
      }
      else
      {
        v27 = *(uint64_t **)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Group>::TypeHandler>((uint64_t)&v59, j)+ 40);
        if (*((char *)v27 + 23) < 0)
          v27 = (uint64_t *)*v27;
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Skipping merge of identical response group '%s'", v26, v27);
      }
LABEL_49:
      if (v50 < 0)
        operator delete(v49[0]);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v51, v52);
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  if (v66 >= 1)
  {
    for (k = 0; k < v66; ++k)
    {
      v37 = (google::protobuf::MessageLite *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>((uint64_t)&v65, k);
      google::protobuf::MessageLite::SerializeAsString(v37, (uint64_t)&v51);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&__p, (const void **)&v51, (uint64_t)&v51);
      if (SHIBYTE(v53) < 0)
        operator delete(v51);
    }
  }
  if (v58 >= 1)
  {
    v38 = 0;
    while (1)
    {
      v39 = (google::protobuf::MessageLite *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>((uint64_t)&v57, v38);
      google::protobuf::MessageLite::SerializeAsString(v39, (uint64_t)&v51);
      if (&__p.__r_.__value_.__r.__words[1] == (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&__p, (const void **)&v51))break;
LABEL_69:
      if (SHIBYTE(v53) < 0)
        operator delete(v51);
      v38 = (v38 + 1);
      if ((int)v38 >= v58)
        goto LABEL_72;
    }
    v41 = v68;
    if (v68)
    {
      v42 = v66;
      v43 = *v68;
      if (v66 < *v68)
      {
        ++v66;
        v44 = *(SnippetUI::OrnamentElement **)&v68[2 * v42 + 2];
        if (v44)
          goto LABEL_68;
LABEL_63:
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not create Response Ornament while merging", v40);
        goto LABEL_69;
      }
      if (v43 != v67)
      {
LABEL_67:
        *v41 = v43 + 1;
        v44 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OrnamentElement>(v65);
        v45 = v66++;
        *(_QWORD *)&v68[2 * v45 + 2] = v44;
        if (v44)
        {
LABEL_68:
          google::protobuf::MessageLite::ParseFromString(v44, &v51);
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Merged response ornament %d", v46, v38);
          goto LABEL_69;
        }
        goto LABEL_63;
      }
    }
    else
    {
      v43 = v67;
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v65, v43 + 1);
    v41 = v68;
    v43 = *v68;
    goto LABEL_67;
  }
LABEL_72:
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>(&v63, (uint64_t)&v56);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Merged SnippetUI response has %d sections", v47, v64);
  if (v61)
    v73 = 1;
  siri::dialogengine::SetVisualInfo(v62, a3);
  google::protobuf::MessageLite::SerializeAsString((google::protobuf::MessageLite *)v62, (uint64_t)&__p);
  siri::dialogengine::EncodeBase64((uint64_t)&__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_86:
  SnippetUI::Response::~Response((SnippetUI::Response *)v55);
  SnippetUI::Response::~Response((SnippetUI::Response *)v62);
}

void sub_1BFAF7D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a28 < 0)
    operator delete(__p);
  SnippetUI::Response::~Response((SnippetUI::Response *)&a29);
  SnippetUI::Response::~Response((SnippetUI::Response *)&a47);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SetVisualInfo(int *a1, uint64_t a2)
{
  int v2;
  const google::protobuf::Message *v3;
  std::string::size_type v4;
  std::string *v5;
  std::string *v6;
  BOOL v7;
  __int128 v8;
  size_t size;
  std::string *v10;
  std::string *v11;
  std::string *p_p;
  std::string::size_type v13;
  std::string *v14;
  char *v15;
  char v16;
  std::vector<std::string>::pointer end;
  std::string *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string v31;
  std::string __p;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  std::vector<std::string> v36;
  std::__split_buffer<std::string> __v;
  __int128 *v38;
  int v39;
  std::string v40;
  std::string v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = a1[6];
  *(_QWORD *)(a2 + 8) = a1[24];
  *(_QWORD *)(a2 + 16) = a1[18];
  *(_QWORD *)(a2 + 24) = a1[12];
  memset(&v36, 0, sizeof(v36));
  v33 = 0;
  v34 = 0;
  v35 = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>(&v33, (uint64_t)(a1 + 4));
  if ((int)v34 >= 1)
  {
    v2 = 0;
    do
    {
      v3 = (const google::protobuf::Message *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>((uint64_t)&v33, v2);
      siri::dialogengine::GetVisualElementId(&__p, v3);
      siri::dialogengine::GetStoredItems((uint64_t **)&v40, v3);
      v4 = v40.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v40.__r_.__value_.__l.__data_ == &v40.__r_.__value_.__r.__words[1])
      {
LABEL_11:
        std::string::basic_string[abi:ne180100]<0>(&v31, "");
      }
      else
      {
        while (1)
        {
          LODWORD(__v.__first_) = *(_DWORD *)(v4 + 32);
          siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&__v.__begin_, (const siri::dialogengine::CatBinary::vcat_item *)(v4 + 40));
          if (v39 == 6)
            break;
          siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&__v.__begin_);
          v5 = *(std::string **)(v4 + 8);
          if (v5)
          {
            do
            {
              v6 = v5;
              v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
            }
            while (v5);
          }
          else
          {
            do
            {
              v6 = *(std::string **)(v4 + 16);
              v7 = v6->__r_.__value_.__r.__words[0] == v4;
              v4 = (std::string::size_type)v6;
            }
            while (!v7);
          }
          v4 = (std::string::size_type)v6;
          if (v6 == (std::string *)&v40.__r_.__value_.__r.__words[1])
            goto LABEL_11;
        }
        if (*((char *)v38 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v38, *((_QWORD *)v38 + 1));
        }
        else
        {
          v8 = *v38;
          v31.__r_.__value_.__r.__words[2] = *((_QWORD *)v38 + 2);
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v8;
        }
        siri::dialogengine::CatBinary::vcat_item::~vcat_item((siri::dialogengine::CatBinary::vcat_item *)&__v.__begin_);
      }
      std::__tree<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::__map_value_compare<int,std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>,std::less<int>,true>,std::allocator<std::__value_type<int,siri::dialogengine::CatBinary::vcat_item>>>::destroy((_QWORD *)v40.__r_.__value_.__l.__size_);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      else
        size = v31.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v40, size + 1);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v40;
      else
        v10 = (std::string *)v40.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &v31;
        else
          v11 = (std::string *)v31.__r_.__value_.__r.__words[0];
        memmove(v10, v11, size);
      }
      *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + size) = 35;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v13 = __p.__r_.__value_.__l.__size_;
      v14 = std::string::append(&v40, (const std::string::value_type *)p_p, v13);
      v15 = (char *)v14->__r_.__value_.__r.__words[0];
      v41.__r_.__value_.__r.__words[0] = v14->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      end = v36.__end_;
      if (v36.__end_ >= v36.__end_cap_.__value_)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_ - (char *)v36.__begin_) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3) > v20)
          v20 = 0x5555555555555556 * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3) >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v20;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v36.__end_cap_;
        if (v21)
          v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v36.__end_cap_, v21);
        else
          v22 = 0;
        v23 = v22 + v19;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        v23->__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        v23->__r_.__value_.__l.__size_ = v41.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v23->__r_.__value_.__s + 23) = v16;
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v36, &__v);
        v18 = v36.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        v36.__end_->__r_.__value_.__l.__data_ = v15;
        end->__r_.__value_.__l.__size_ = v41.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&end->__r_.__value_.__s + 23) = v16;
        v18 = end + 1;
      }
      v36.__end_ = v18;
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      std::operator+<char>();
      v24 = std::string::append(&v41, ", Visual Element (Section) ID: ");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__p;
      else
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v27 = __p.__r_.__value_.__l.__size_;
      v28 = std::string::append(&v40, (const std::string::value_type *)v26, v27);
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__v.__first_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__v, 0);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v2;
    }
    while (v2 < (int)v34);
  }
  if ((std::vector<std::string> *)(a2 + 32) != &v36)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a2 + 32), v36.__begin_, (__int128 *)v36.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_ - (char *)v36.__begin_) >> 3));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&v33);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1BFAF82C4(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__pa, char a18, uint64_t a19, char *a20,std::__split_buffer<std::string> *a21,uint64_t a22,char a23)
{
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&a20);
  a20 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::OrnamentElement>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BFAF8498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FilterSnippetUISections(std::string::size_type a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8;
  char v9;
  const char *v10;
  char v11;
  const char *v12;
  uint64_t *v13;
  int v14;
  const google::protobuf::Message *v15;
  const char *v16;
  std::string::size_type size;
  char v18;
  std::string *v19;
  uint64_t *v20;
  const char *v21;
  std::string *p_p;
  uint64_t *v23;
  std::string __p;
  int v25[4];
  uint64_t v26;
  int v27;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a3 + 32));
  v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    std::string::basic_string[abi:ne180100]<0>(a4, "");
    return;
  }
  SnippetUI::Response::Response((SnippetUI::Response *)v25);
  siri::dialogengine::DecodeBase64(a1, &__p);
  v9 = google::protobuf::MessageLite::ParseFromString(v25, &__p);
  v11 = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v11 & 1) != 0)
      goto LABEL_6;
  }
  else if ((v9 & 1) != 0)
  {
LABEL_6:
    siri::dialogengine::SetVisualInfo(v25, a3);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = (uint64_t *)a2;
    else
      v13 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Filtering Visual CAT for sections matching '%s'", v12, v13);
    if (v27 >= 1)
    {
      v14 = 0;
      while (1)
      {
        v15 = (const google::protobuf::Message *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::TypeHandler>((uint64_t)&v26, v14);
        siri::dialogengine::GetVisualElementId(&__p, v15);
        size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        v18 = size;
        if ((size & 0x80u) != 0)
          size = a2->__r_.__value_.__l.__size_;
        if (!size)
          goto LABEL_16;
        if (siri::dialogengine::StringGlobMatch(&__p, a2))
          break;
        google::protobuf::RepeatedPtrField<SnippetUI::Response_Section>::DeleteSubrange((google::protobuf::internal::RepeatedPtrFieldBase *)&v26, v14);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = (uint64_t *)a2;
        else
          v23 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Visual CAT section '%s' does not match '%s'; Excluding it from result",
          v21,
          p_p,
          v23);
        --v14;
LABEL_30:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (++v14 >= v27)
          goto LABEL_33;
      }
      v18 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
LABEL_16:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &__p;
      else
        v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v18 >= 0)
        v20 = (uint64_t *)a2;
      else
        v20 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Visual CAT section '%s' matches '%s'; Including it in result",
        v16,
        v19,
        v20);
      goto LABEL_30;
    }
LABEL_33:
    siri::dialogengine::SetVisualInfo(v25, a3);
    google::protobuf::MessageLite::SerializeAsString((google::protobuf::MessageLite *)v25, (uint64_t)&__p);
    siri::dialogengine::EncodeBase64((uint64_t)&__p, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_40;
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not decode response", v10);
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
LABEL_40:
  SnippetUI::Response::~Response((SnippetUI::Response *)v25);
}

void sub_1BFAF8734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  SnippetUI::Response::~Response((SnippetUI::Response *)&a18);
  _Unwind_Resume(a1);
}

void siri::dialogengine::TransformText(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  std::basic_string<char16_t> v11;
  void *v12[2];
  uint64_t v13;
  _BYTE v14[128];
  std::string v15;

  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v10 = "TransformText: No locale specified";
    goto LABEL_19;
  }
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (!v7)
  {
    v10 = "TransformText: Input string is empty";
    goto LABEL_19;
  }
  v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a3 + 8);
  if (!v9)
  {
    v10 = "TransformText: No op specified";
LABEL_19:
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)v10, (const char *)a2);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    return;
  }
  siri::dialogengine::GetCanonicalLocale((const std::string *)a1, 0, &v15);
  siri::dialogengine::RegisterMorphunData(&v15);
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  memset(&v11, 0, sizeof(v11));
  morphun::util::ULocale::ULocale();
  morphun::util::StringUtils::to_u16string();
  siri::dialogengine::TransformText(&v11, (uint64_t)v12, (uint64_t)v14, (uint64_t *)a3, 1);
  morphun::util::StringUtils::to_string();
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1BFAF892C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a27);
  if (*(char *)(v27 - 33) < 0)
    operator delete(*(void **)(v27 - 56));
  _Unwind_Resume(a1);
}

void siri::dialogengine::TransformText(std::basic_string<char16_t> *this, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  int v10;
  uint64_t *v13;
  uint64_t v15;
  int v16;
  uint64_t *v29;
  uint64_t v31;
  int v32;
  _BOOL4 v38;
  uint64_t DefaultCommonConceptFactoryProvider;
  const char *v40;
  uint64_t v41;
  const std::basic_string<char16_t> *Print;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  BOOL v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  void *v58;
  int v59;
  const std::basic_string<char16_t>::value_type *v60;
  std::basic_string<char16_t>::size_type v61;
  std::basic_string<char16_t>::size_type v62;
  char v63;
  std::basic_string<char16_t>::size_type v64;
  int v65;
  std::basic_string<char16_t>::size_type v66;
  std::basic_string<char16_t> __p;
  std::basic_string<char16_t> __str;
  std::basic_string<char16_t> v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    *this = *(std::basic_string<char16_t> *)a2;
  v10 = *((unsigned __int8 *)a4 + 23);
  if ((*((char *)a4 + 23) & 0x80000000) == 0)
  {
    switch(*((_BYTE *)a4 + 23))
    {
      case 9:
        if (*a4 == 0x7361637265707075 && *((_BYTE *)a4 + 8) == 101)
          goto LABEL_144;
        if (*a4 != 0x7361637265776F6CLL || *((_BYTE *)a4 + 8) != 101)
          return;
        goto LABEL_26;
      case 0xA:
        if (*a4 == 0x7269667265776F6CLL && *((_WORD *)a4 + 4) == 29811)
          goto LABEL_146;
        if (*a4 != 0x7269667265707075 || *((_WORD *)a4 + 4) != 29811)
          goto LABEL_60;
        goto LABEL_80;
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0x10:
      case 0x11:
        return;
      case 0xF:
        if (*a4 == 0x696C617469706163 && *(uint64_t *)((char *)a4 + 7) == 0x7473726966657A69 && a5 == 1)
          goto LABEL_81;
        return;
      case 0x12:
        if (*a4 == 0x696C617469706163 && a4[1] == 0x6E65746E6573657ALL && *((_WORD *)a4 + 8) == 25955 && a5 == 1)
          goto LABEL_169;
        return;
      default:
        goto LABEL_102;
    }
  }
  switch(a4[1])
  {
    case 9:
      v13 = (uint64_t *)*a4;
      if (*(_QWORD *)*a4 == 0x7361637265707075 && *(_BYTE *)(*a4 + 8) == 101)
      {
LABEL_144:
        if (a5 == 1)
          morphun::util::StringUtils::uppercase();
      }
      else
      {
        v15 = *v13;
        v16 = *((unsigned __int8 *)v13 + 8);
        if (v15 != 0x7361637265776F6CLL || v16 != 101)
          goto LABEL_96;
LABEL_26:
        morphun::util::StringUtils::lowercase();
      }
      return;
    case 10:
      v29 = (uint64_t *)*a4;
      if (*(_QWORD *)*a4 == 0x7269667265776F6CLL && *(_WORD *)(*a4 + 8) == 29811)
      {
LABEL_146:
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        morphun::util::StringUtils::to_u16string();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v53 = *(unsigned __int8 *)(a2 + 23);
        if ((v53 & 0x80u) != 0)
          v53 = *(_QWORD *)(a2 + 8);
        if (v53)
        {
          LODWORD(v54) = 0;
          do
          {
            v55 = morphun::util::StringUtils::codePointAt();
            if (!(_DWORD)v54)
            {
              memset(&__p, 0, sizeof(__p));
              morphun::util::StringUtils::appendCodePoint();
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                std::basic_string<char16_t>::__init_copy_ctor_external(&v69, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              else
                v69 = __p;
              morphun::util::StringUtils::lowercase();
              if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v69.__r_.__value_.__l.__data_);
              morphun::util::StringUtils::codePointAt();
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            morphun::util::StringUtils::appendCodePoint();
            if (v55 < 0x10000)
              v56 = 1;
            else
              v56 = 2;
            v54 = (v56 + v54);
            v57 = *(unsigned __int8 *)(a2 + 23);
            if ((v57 & 0x80u) != 0)
              v57 = *(_QWORD *)(a2 + 8);
          }
          while (v57 > v54);
        }
        goto LABEL_166;
      }
      v31 = *v29;
      v32 = *((unsigned __int16 *)v29 + 4);
      if (v31 == 0x7269667265707075 && v32 == 29811)
        goto LABEL_80;
      goto LABEL_96;
    case 15:
      if (*(_QWORD *)*a4 != 0x696C617469706163 || *(_QWORD *)(*a4 + 7) != 0x7473726966657A69)
        goto LABEL_96;
LABEL_80:
      if (a5 == 1)
      {
LABEL_81:
        if (!siri::dialogengine::IsUpperFirstException())
        {
          siri::dialogengine::CapitalizeFirstInternal(&__str, (const std::basic_string<char16_t> *)a2);
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
            operator delete(this->__r_.__value_.__l.__data_);
          *this = __str;
        }
      }
      return;
    case 18:
      if (*(_QWORD *)*a4 != 0x696C617469706163
        || *(_QWORD *)(*a4 + 8) != 0x6E65746E6573657ALL
        || *(_WORD *)(*a4 + 16) != 25955)
      {
        if ((v10 & 0x80) != 0)
        {
LABEL_96:
          if (a4[1] != 10)
            goto LABEL_104;
          if (*(_QWORD *)*a4 == 0x696C617469706163 && *(_WORD *)(*a4 + 8) == 25978)
          {
LABEL_116:
            if (a5 != 1)
              return;
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            morphun::util::StringUtils::to_u16string();
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v43 = *(unsigned __int8 *)(a2 + 23);
            if ((v43 & 0x80u) != 0)
              v43 = *(_QWORD *)(a2 + 8);
            if (v43)
            {
              LODWORD(v44) = 0;
              v45 = 0;
              v46 = MEMORY[0x1E0C80978];
              do
              {
                v47 = morphun::util::StringUtils::codePointAt();
                v48 = v47;
                if (v47 < 0x80)
                {
                  if ((*(_DWORD *)(v46 + 4 * v47 + 60) & 0x4000) == 0)
                  {
                    v49 = *(_DWORD *)(v46 + 4 * v47 + 60) & 0x2000;
LABEL_128:
                    v50 = v49 == 0;
                    if (!v45 && v49 == 0)
                    {
                      memset(&__p, 0, sizeof(__p));
                      morphun::util::StringUtils::appendCodePoint();
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        std::basic_string<char16_t>::__init_copy_ctor_external(&v69, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                      else
                        v69 = __p;
                      morphun::util::StringUtils::uppercase();
                      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v69.__r_.__value_.__l.__data_);
                      morphun::util::StringUtils::codePointAt();
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    goto LABEL_132;
                  }
                }
                else if (!__maskrune(v47, 0x4000uLL))
                {
                  v49 = __maskrune(v48, 0x2000uLL);
                  goto LABEL_128;
                }
                v50 = 0;
LABEL_132:
                morphun::util::StringUtils::appendCodePoint();
                if (v48 < 0x10000)
                  v51 = 1;
                else
                  v51 = 2;
                v44 = (v51 + v44);
                v52 = *(unsigned __int8 *)(a2 + 23);
                if ((v52 & 0x80u) != 0)
                  v52 = *(_QWORD *)(a2 + 8);
                v45 = v50;
              }
              while (v52 > v44);
            }
LABEL_166:
            std::basic_string<char16_t>::operator=(this, &__str);
            if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return;
            v58 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_182:
            operator delete(v58);
            return;
          }
          if ((v10 & 0x80) != 0)
          {
LABEL_104:
            if (a4[1] != 5)
              return;
            a4 = (uint64_t *)*a4;
          }
          else
          {
LABEL_102:
            if (v10 != 5)
              return;
          }
        }
        else if (v10 != 5)
        {
          if (v10 != 10)
            return;
LABEL_60:
          if (*a4 != 0x696C617469706163 || *((_WORD *)a4 + 4) != 25978)
            return;
          goto LABEL_116;
        }
        v38 = *(_DWORD *)a4 != 1953461617 || *((_BYTE *)a4 + 4) != 101;
        if (a5 == 1 && !v38)
        {
          DefaultCommonConceptFactoryProvider = morphun::dialog::LocalizedCommonConceptFactoryProvider::getDefaultCommonConceptFactoryProvider((morphun::dialog::LocalizedCommonConceptFactoryProvider *)this);
          v41 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)DefaultCommonConceptFactoryProvider + 24))(DefaultCommonConceptFactoryProvider, a3);
          if (v41)
          {
            morphun::dialog::SpeakableString::SpeakableString();
            (*(void (**)(std::basic_string<char16_t> *__return_ptr, uint64_t, std::basic_string<char16_t> *))(*(_QWORD *)v41 + 96))(&__p, v41, &__str);
            Print = (const std::basic_string<char16_t> *)morphun::dialog::SpeakableString::getPrint((morphun::dialog::SpeakableString *)&__p);
            std::basic_string<char16_t>::operator=(this, Print);
            morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__p);
            morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__str);
          }
          else
          {
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to create morphun concept factory to add quotes. Morphun data not found?", v40);
          }
        }
        return;
      }
      if (a5 != 1)
        return;
LABEL_169:
      if (!siri::dialogengine::IsUpperFirstException())
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "[[CAPITALIZE_SENTENCE]]");
        morphun::util::StringUtils::to_u16string();
        v59 = *(char *)(a2 + 23);
        v60 = v59 >= 0
            ? (const std::basic_string<char16_t>::value_type *)a2
            : *(const std::basic_string<char16_t>::value_type **)a2;
        v61 = v59 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
        std::basic_string<char16_t>::append(&__str, v60, v61);
        v69.__r_.__value_.__r.__words[0] = __str.__r_.__value_.__l.__size_;
        v62 = __str.__r_.__value_.__r.__words[0];
        *(std::basic_string<char16_t>::size_type *)((char *)v69.__r_.__value_.__r.__words + 7) = *(std::basic_string<char16_t>::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7);
        v63 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        memset(&__str, 0, sizeof(__str));
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(this->__r_.__value_.__l.__data_);
          v65 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          v66 = v69.__r_.__value_.__r.__words[0];
          this->__r_.__value_.__r.__words[0] = v62;
          this->__r_.__value_.__l.__size_ = v66;
          *(std::basic_string<char16_t>::size_type *)((char *)&this->__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char16_t>::size_type *)((char *)v69.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&this->__r_.__value_.__s + 23) = v63;
          if (v65 < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        else
        {
          v64 = v69.__r_.__value_.__r.__words[0];
          this->__r_.__value_.__r.__words[0] = v62;
          this->__r_.__value_.__l.__size_ = v64;
          *(std::basic_string<char16_t>::size_type *)((char *)&this->__r_.__value_.__r.__words[1] + 7) = *(std::basic_string<char16_t>::size_type *)((char *)v69.__r_.__value_.__r.__words + 7);
          *((_BYTE *)&this->__r_.__value_.__s + 23) = v63;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v58 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_182;
        }
      }
      return;
    default:
      goto LABEL_96;
  }
}

void sub_1BFAF9358(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  __cxa_end_catch();
  JUMPOUT(0x1BFAF940CLL);
}

void sub_1BFAF9394(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1BFAF941CLL);
}

void sub_1BFAF93B0()
{
  JUMPOUT(0x1BFAF940CLL);
}

void sub_1BFAF93BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  JUMPOUT(0x1BFAF93DCLL);
}

void sub_1BFAF93D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 + 23) < 0)
    operator delete(*(void **)v23);
  _Unwind_Resume(exception_object);
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::operator=(std::basic_string<char16_t> *this, const std::basic_string<char16_t> *__str)
{
  __int128 v2;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t>::size_type v4;

  if (this != __str)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else
      {
        __str = (const std::basic_string<char16_t> *)__str->__r_.__value_.__r.__words[0];
        v4 = size;
      }
      return std::basic_string<char16_t>::__assign_no_alias<false>(this, (const std::basic_string<char16_t>::value_type *)__str, v4);
    }
    else if ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      return std::basic_string<char16_t>::__assign_no_alias<true>(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      v2 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
    }
  }
  return this;
}

BOOL siri::dialogengine::IsUpperFirstException()
{
  unsigned __int8 v0;
  unint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  _BOOL8 v4;
  _BOOL8 v5;
  int v6;
  _QWORD *v8;
  std::string __p;
  std::string v10;
  char v11;
  std::string *v12;

  if ((v0 & 1) == 0
  {
    v8 = (_QWORD *)operator new();
    *v8 = 0;
    siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::flag = (uint64_t)v8;
  }
  v1 = atomic_load((unint64_t *)siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::flag);
  if (v1 != -1)
  {
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
    v12 = &v10;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::flag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::$_0 &&>>);
  }
  morphun::util::StringUtils::to_string();
  v2 = *(unsigned __int8 **)siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::sUpperFirstExceptions;
  v3 = *(unsigned __int8 **)(siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::sUpperFirstExceptions
                           + 8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    __p = v10;
  if (v2 == v3)
  {
    v5 = 0;
  }
  else
  {
    do
    {
      v4 = siri::dialogengine::StringStartsWith(&__p, v2);
      v5 = v4;
      v2 += 24;
      v6 = v2 == v3 || v4;
    }
    while (v6 != 1);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFAF95BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::CapitalizeFirstInternal(std::basic_string<char16_t> *this, const std::basic_string<char16_t> *a2)
{
  char v4;
  std::basic_string<char16_t>::size_type v5;
  unsigned __int16 *v6;
  int8_t v7;
  std::allocator<char16_t> *v8;
  char v9;
  unsigned __int16 *v10;
  int8_t v11;
  int v12;
  const std::basic_string<char16_t> *v13;
  std::basic_string<char16_t>::value_type v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *p_p;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t>::size_type v27;
  const std::basic_string<char16_t> *v28;
  unsigned __int16 *v29;
  unint64_t v30;
  std::basic_string<char16_t> *v31;
  std::basic_string<char16_t>::size_type v32;
  std::basic_string<char16_t>::size_type v33;
  std::basic_string<char16_t>::size_type v34;
  std::basic_string<char16_t> *v35;
  std::basic_string<char16_t>::size_type v37;
  std::basic_string<char16_t>::size_type v38;
  std::basic_string<char16_t> v39;
  std::basic_string<char16_t> v40;
  void *__p;
  unint64_t v42;
  int64_t v43;

  v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    if (!a2->__r_.__value_.__l.__size_)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, 0);
      return;
    }
  }
  else if (!*((_BYTE *)&a2->__r_.__value_.__s + 23))
  {
    *this = *a2;
    return;
  }
  v5 = 0;
  __p = 0;
  v42 = 0;
  v43 = 0;
  while (1)
  {
    v6 = v4 >= 0 ? (unsigned __int16 *)a2 : (unsigned __int16 *)a2->__r_.__value_.__r.__words[0];
    v7 = u_charType(v6[v5]);
    v9 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (((1 << v7) & 0x3E) != 0)
      break;
    v10 = v9 >= 0 ? (unsigned __int16 *)a2 : (unsigned __int16 *)a2->__r_.__value_.__r.__words[0];
    if (!v10[v5])
      break;
    v11 = u_charType(v10[v5]);
    v12 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (((1 << v11) & 0xE00) != 0)
    {
      if ((v12 & 0x80000000) == 0)
        goto LABEL_76;
      size = a2->__r_.__value_.__l.__size_;
LABEL_94:
      std::basic_string<char16_t>::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, size);
      goto LABEL_99;
    }
    if (v12 >= 0)
      v13 = a2;
    else
      v13 = (const std::basic_string<char16_t> *)a2->__r_.__value_.__r.__words[0];
    v14 = v13->__r_.__value_.__s.__data_[v5];
    if ((SHIBYTE(v43) & 0x80000000) == 0)
    {
      if (HIBYTE(v43) != 10)
      {
        v16 = HIBYTE(v43);
        HIBYTE(v43) = (HIBYTE(v43) + 1) & 0x7F;
        p_p = (char *)&__p;
        goto LABEL_42;
      }
      v15 = &__p;
      v16 = 10;
LABEL_27:
      if (v16 + 1 > 2 * v16)
        v18 = v16 + 1;
      else
        v18 = 2 * v16;
      v19 = (v18 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v18 | 3) != 0xB)
        v19 = v18 | 3;
      if (v18 >= 0xB)
        v17 = v19 + 1;
      else
        v17 = 11;
LABEL_35:
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v17);
      p_p = v20;
      v23 = v22;
      if (!v16 || (memmove(v20, v15, 2 * v16), v16 != 10))
        operator delete(v15);
      __p = p_p;
      v43 = v23 | 0x8000000000000000;
      goto LABEL_41;
    }
    v16 = (v43 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v42 == v16)
    {
      if ((v43 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v43 >= 0)
        v15 = &__p;
      else
        v15 = __p;
      v17 = 0x7FFFFFFFFFFFFFF7;
      if (v16 <= 0x3FFFFFFFFFFFFFF2)
        goto LABEL_27;
      goto LABEL_35;
    }
    p_p = (char *)__p;
    v16 = v42;
LABEL_41:
    v42 = v16 + 1;
LABEL_42:
    v24 = &p_p[2 * v16];
    *(_WORD *)v24 = v14;
    *((_WORD *)v24 + 1) = 0;
    ++v5;
    v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  v25 = HIBYTE(v43);
  if (v43 < 0)
    v25 = v42;
  size = a2->__r_.__value_.__l.__size_;
  if (v9 >= 0)
    v27 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v27 = a2->__r_.__value_.__l.__size_;
  if (v25 == v27)
  {
    if (!v25)
    {
LABEL_58:
      if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_76:
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
        goto LABEL_99;
      }
      goto LABEL_94;
    }
    if (v9 >= 0)
      v28 = a2;
    else
      v28 = (const std::basic_string<char16_t> *)a2->__r_.__value_.__r.__words[0];
    v29 = (unsigned __int16 *)&__p;
    if (v43 < 0)
      v29 = (unsigned __int16 *)__p;
    v30 = v25;
    while ((unsigned __int16)v28->__r_.__value_.__s.__data_[0] == *v29)
    {
      ++v29;
      v28 = (const std::basic_string<char16_t> *)((char *)v28 + 2);
      if (!--v30)
        goto LABEL_58;
    }
  }
  if (v25)
  {
    std::basic_string<char16_t>::basic_string(&v40, a2, v5, v27 - 1, v8);
    morphun::util::StringUtils::capitalizeFirst();
    if (v43 >= 0)
      v31 = (std::basic_string<char16_t> *)&__p;
    else
      v31 = (std::basic_string<char16_t> *)__p;
    if (v43 >= 0)
      v32 = HIBYTE(v43);
    else
      v32 = v42;
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      v33 = v39.__r_.__value_.__l.__size_;
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = 10;
    else
      v34 = (v39.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v34 - v33 >= v32)
    {
      if (v32)
      {
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v39;
        else
          v35 = (std::basic_string<char16_t> *)v39.__r_.__value_.__r.__words[0];
        if (v33)
        {
          if ((std::basic_string<char16_t> *)((char *)v35 + 2 * v33) <= v31 || v35 > v31)
            v37 = 0;
          else
            v37 = v32;
          v31 = (std::basic_string<char16_t> *)((char *)v31 + 2 * v37);
          memmove((char *)v35 + 2 * v32, v35, 2 * v33);
        }
        memmove(v35, v31, 2 * v32);
        v38 = v33 + v32;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          v39.__r_.__value_.__l.__size_ = v33 + v32;
        else
          *((_BYTE *)&v39.__r_.__value_.__s + 23) = v38 & 0x7F;
        v35->__r_.__value_.__s.__data_[v38] = 0;
      }
    }
    else
    {
      std::basic_string<char16_t>::__grow_by_and_replace(&v39, v34, v33 + v32 - v34, v33, 0, 0, v32, (const std::basic_string<char16_t>::value_type *)v31);
    }
    *this = v39;
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  else
  {
    morphun::util::StringUtils::capitalizeFirst();
  }
LABEL_99:
  if (SHIBYTE(v43) < 0)
    operator delete(__p);
}

void sub_1BFAF9A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::append(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __n)
{
  std::basic_string<char16_t>::size_type v6;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t> *v8;
  std::basic_string<char16_t>::size_type v9;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 10;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      v8 = this;
      if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
        v8 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      memmove((char *)v8 + 2 * size, __s, 2 * __n);
      v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v9;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char16_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

void std::basic_string<char16_t>::__grow_by_and_replace(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add, const std::basic_string<char16_t>::value_type *__p_new_stuff)
{
  std::basic_string<char16_t> *v15;
  std::basic_string<char16_t>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::basic_string<char16_t>::size_type v21;
  uint64_t v22;
  uint64_t v23;
  std::basic_string<char16_t>::size_type v24;
  std::basic_string<char16_t>::size_type v25;

  if (0x7FFFFFFFFFFFFFF6 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v15 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v16 = 2 * __old_cap;
  v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v16 | 3) != 0xB)
    v17 = v16 | 3;
  if (v16 >= 0xB)
    v18 = v17 + 1;
  else
    v18 = 11;
  if (__old_cap > 0x3FFFFFFFFFFFFFF2)
    v19 = 0x7FFFFFFFFFFFFFF7;
  else
    v19 = v18;
  v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v19);
  v21 = (std::basic_string<char16_t>::size_type)v20;
  v23 = v22;
  if (__n_copy)
    memmove(v20, v15, 2 * __n_copy);
  if (__n_add)
    memmove((void *)(v21 + 2 * __n_copy), __p_new_stuff, 2 * __n_add);
  v24 = __old_sz - (__n_del + __n_copy);
  if (v24)
    memmove((void *)(v21 + 2 * __n_copy + 2 * __n_add), (char *)v15 + 2 * __n_copy + 2 * __n_del, 2 * v24);
  if (__old_cap != 10)
    operator delete(v15);
  v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_WORD *)(v21 + 2 * v25) = 0;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::$_0 &&>>()
{
  _QWORD *v0;
  std::string *v1;
  uint64_t v2;
  __int128 v3;
  _QWORD v4[3];
  _QWORD v5[3];
  __int128 v6;

  *(_QWORD *)&v6 = *MEMORY[0x1E0C80C00];
  v0 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v3, "iPhone");
  std::string::basic_string[abi:ne180100]<0>(v4, "iPodiMac");
  std::string::basic_string[abi:ne180100]<0>(v5, "iPad");
  *v0 = 0;
  v0[1] = 0;
  v0[2] = 0;
  v1 = (std::string *)operator new(0x48uLL);
  *v0 = v1;
  v0[1] = v1;
  v0[2] = v1 + 3;
  v2 = 0;
  v0[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(v0 + 2), &v3, &v6, v1);
  siri::dialogengine::IsUpperFirstException(std::basic_string<char16_t> const&)::sUpperFirstExceptions = (uint64_t)v0;
  do
  {
    if (SHIBYTE(v5[v2 + 2]) < 0)
      operator delete((void *)v5[v2]);
    v2 -= 3;
  }
  while (v2 != -9);
}

void sub_1BFAF9DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  *(_QWORD *)(v11 + 8) = v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  v14 = 0;
  while (1)
  {
    if (*(&a11 + v14 + 71) < 0)
      operator delete(*(void **)(&a11 + v14 + 48));
    v14 -= 24;
    if (v14 == -72)
    {
      MEMORY[0x1C3B8D890](v11, 0x20C40960023A9);
      _Unwind_Resume(a1);
    }
  }
}

std::basic_string<char16_t> *std::basic_string<char16_t>::__assign_no_alias<true>(std::basic_string<char16_t> *__dst, const std::basic_string<char16_t>::value_type *__src, std::basic_string<char16_t>::size_type __n_add)
{
  BOOL v5;
  std::basic_string<char16_t>::size_type v6;

  v5 = __n_add > 0xA;
  v6 = __n_add - 10;
  if (v5)
  {
    std::basic_string<char16_t>::__grow_by_and_replace(__dst, 0xAuLL, v6, *((_BYTE *)&__dst->__r_.__value_.__s + 23) & 0x7F, 0, *((_BYTE *)&__dst->__r_.__value_.__s + 23) & 0x7F, __n_add, __src);
  }
  else
  {
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __n_add;
    if (__n_add)
      memmove(__dst, __src, 2 * __n_add);
    __dst->__r_.__value_.__s.__data_[__n_add] = 0;
  }
  return __dst;
}

std::basic_string<char16_t> *std::basic_string<char16_t>::__assign_no_alias<false>(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__src, std::basic_string<char16_t>::size_type __n_add)
{
  std::basic_string<char16_t>::size_type v5;
  void *v6;

  v5 = this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v5 <= __n_add)
  {
    std::basic_string<char16_t>::__grow_by_and_replace(this, v5 - 1, __n_add - v5 + 1, this->__r_.__value_.__l.__size_, 0, this->__r_.__value_.__l.__size_, __n_add, __src);
  }
  else
  {
    v6 = (void *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = __n_add;
    if (__n_add)
      memmove(v6, __src, 2 * __n_add);
    *((_WORD *)v6 + __n_add) = 0;
  }
  return this;
}

void siri::dialogengine::TransformText(siri::dialogengine::SpeakableString *a1@<X1>, siri::dialogengine *a2@<X0>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v6;
  const char *v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  const std::string *v15;
  const std::string *i;
  std::string __p;
  std::string __str;
  std::string v19;
  std::string v20;
  const std::string *v21;
  const std::string *v22;
  std::string v23;
  std::string v24;
  _BYTE v25[128];
  void *v26[2];
  unsigned __int8 v27;

  v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a3 + 8);
  if (v6)
  {
    siri::dialogengine::RegisterMorphunData(a2, a1);
    if (a2)
      siri::dialogengine::Context::GetLocale(a2, v9, (uint64_t)v26);
    else
      std::string::basic_string[abi:ne180100]<0>(v26, "");
    v11 = v27;
    if ((v27 & 0x80u) != 0)
      v11 = (unint64_t)v26[1];
    if (v11)
    {
      memset(&__p, 0, sizeof(__p));
      memset(&v24, 0, sizeof(v24));
      memset(&v23, 0, sizeof(v23));
      morphun::util::ULocale::ULocale();
      if (*((char *)a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
      else
        __p = *(std::string *)a1;
      morphun::util::StringUtils::to_u16string();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (*((char *)a1 + 47) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a1 + 3), *((_QWORD *)a1 + 4));
      else
        __p = *(std::string *)((_BYTE *)a1 + 1);
      morphun::util::StringUtils::to_u16string();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      siri::dialogengine::StringSplit((unsigned __int8 *)a3, ",", &v21);
      v12 = *((unsigned __int8 *)a1 + 71);
      if ((v12 & 0x80u) != 0)
        v12 = *((_QWORD *)a1 + 7);
      if (v12)
      {
        v13 = 0;
      }
      else
      {
        v14 = *((unsigned __int8 *)a1 + 95);
        if ((v14 & 0x80u) != 0)
          v14 = *((_QWORD *)a1 + 10);
        v13 = v14 == 0;
      }
      siri::dialogengine::SpeakableString::GetRedactedPrint(a1, &__p);
      morphun::util::StringUtils::to_u16string();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      siri::dialogengine::SpeakableString::GetRedactedSpeak(a1, &__p);
      morphun::util::StringUtils::to_u16string();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v15 = v21;
      for (i = v22; v15 != i; ++v15)
      {
        siri::dialogengine::StringTrim(" \t\n\r", v15, &__str);
        siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)&__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        siri::dialogengine::TransformText((std::basic_string<char16_t> *)&__str, (uint64_t)&v24, (uint64_t)v25, (uint64_t *)&__p, 1);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        v24 = __str;
        siri::dialogengine::TransformText((std::basic_string<char16_t> *)&__str, (uint64_t)&v23, (uint64_t)v25, (uint64_t *)&__p, 0);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
        v23 = __str;
        if (!v13)
        {
          siri::dialogengine::TransformText((std::basic_string<char16_t> *)&__str, (uint64_t)&v20, (uint64_t)v25, (uint64_t *)&__p, 1);
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v20.__r_.__value_.__l.__data_);
          v20 = __str;
          siri::dialogengine::TransformText((std::basic_string<char16_t> *)&__str, (uint64_t)&v19, (uint64_t)v25, (uint64_t *)&__p, 0);
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v19.__r_.__value_.__l.__data_);
          v19 = __str;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::SpeakableStringFromMorphun((uint64_t)a4);
    }
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"TransformText has empty locale", v10);
    siri::dialogengine::SpeakableString::SpeakableString(a4, a1);
    if ((char)v27 < 0)
      operator delete(v26[0]);
  }
  else
  {
    siri::dialogengine::SpeakableString::SpeakableString(a4, a1);
  }
}

void sub_1BFAFA464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  void **v61;
  uint64_t v62;

  if (a46 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a16);
  siri::dialogengine::SpeakableString::~SpeakableString(v61);
  if (a53 < 0)
    operator delete(a48);
  if (a60 < 0)
    operator delete(a55);
  a16 = &a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v62 - 233) < 0)
    operator delete(*(void **)(v62 - 256));
  if (*(char *)(v62 - 201) < 0)
    operator delete(*(void **)(v62 - 224));
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)(v62 - 200));
  if (*(char *)(v62 - 49) < 0)
    operator delete(*(void **)(v62 - 72));
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::IsValidTransformMode(const std::string *a1)
{
  unsigned __int8 v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  std::string __p;
  void *v9[2];
  char v10;
  char v11;

  if ((v2 & 1) == 0
  {
    v7 = (_QWORD *)operator new();
    *v7 = 0;
    siri::dialogengine::IsValidTransformMode(std::string const&)::flag = (uint64_t)v7;
  }
  v3 = atomic_load((unint64_t *)siri::dialogengine::IsValidTransformMode(std::string const&)::flag);
  if (v3 != -1)
  {
    v9[0] = &v11;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::IsValidTransformMode(std::string const&)::flag, &__p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsValidTransformMode(std::string const&)::$_0 &&>>);
  }
  siri::dialogengine::StringTrim(" \t\n\r", a1, &__p);
  siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = std::__tree<std::string>::find<std::string>(siri::dialogengine::IsValidTransformMode(std::string const&)::sValidModes, (const void **)v9);
  v5 = siri::dialogengine::IsValidTransformMode(std::string const&)::sValidModes;
  if (v10 < 0)
    operator delete(v9[0]);
  return v5 + 8 != v4;
}

void sub_1BFAFA728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsValidTransformMode(std::string const&)::$_0 &&>>()
{
  uint64_t *v0;
  uint64_t v1;
  const void *v2[3];
  _QWORD v3[3];
  _QWORD v4[3];
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v0 = (uint64_t *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v2, "uppercase");
  std::string::basic_string[abi:ne180100]<0>(v3, "lowercase");
  std::string::basic_string[abi:ne180100]<0>(v4, "capitalize");
  std::string::basic_string[abi:ne180100]<0>(v5, "capitalizefirst");
  std::string::basic_string[abi:ne180100]<0>(v6, "capitalizesentence");
  std::string::basic_string[abi:ne180100]<0>(v7, "quote");
  std::string::basic_string[abi:ne180100]<0>(v8, "lowerfirst");
  std::string::basic_string[abi:ne180100]<0>(v9, "upperfirst");
  std::string::basic_string[abi:ne180100]<0>(v10, "pronoun");
  std::set<std::string>::set[abi:ne180100](v0, v2, 9);
  v1 = 0;
  siri::dialogengine::IsValidTransformMode(std::string const&)::sValidModes = (uint64_t)v0;
  do
  {
    if (SHIBYTE(v10[v1 + 2]) < 0)
      operator delete((void *)v10[v1]);
    v1 -= 3;
  }
  while (v1 != -27);
}

void sub_1BFAFA8E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 215) < 0)
      operator delete(*(void **)(v2 + v4 + 192));
    v4 -= 24;
    if (v4 == -216)
    {
      MEMORY[0x1C3B8D890](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::TransformTextLower(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  _BYTE v2[128];

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
    goto LABEL_5;
  }
  if (*(_QWORD *)(a1 + 8))
  {
LABEL_5:
    morphun::util::ULocale::ULocale();
    morphun::util::StringUtils::to_u16string();
    morphun::util::StringUtils::lowercase();
    morphun::util::StringUtils::to_string();
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v2);
    return;
  }
  std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, 0);
}

void sub_1BFAFAAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
    operator delete(__p);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a28);
  _Unwind_Resume(a1);
}

void siri::dialogengine::TransformTextCapitalize(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  std::basic_string<char16_t> v2;
  std::basic_string<char16_t> v3;
  _BYTE v4[128];

  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, 0);
      return;
    }
  }
  else if (!*(_BYTE *)(a1 + 23))
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    return;
  }
  memset(&v3, 0, sizeof(v3));
  memset(&v2, 0, sizeof(v2));
  morphun::util::ULocale::ULocale();
  morphun::util::StringUtils::to_u16string();
  siri::dialogengine::CapitalizeFirstInternal(&v2, &v3);
  morphun::util::StringUtils::to_string();
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v4);
}

void sub_1BFAFAC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a25);
  _Unwind_Resume(a1);
}

void sub_1BFAFAC80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  JUMPOUT(0x1BFAFAC78);
}

void siri::dialogengine::TransformTextMatch(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  void *v2[2];
  char v3;
  std::basic_string<char16_t> v4;
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  _BYTE v11[128];

  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, 0);
      return;
    }
  }
  else if (!*(_BYTE *)(a1 + 23))
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    return;
  }
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  morphun::util::ULocale::ULocale();
  morphun::util::StringUtils::to_u16string();
  morphun::util::StringUtils::to_u16string();
  *(_OWORD *)__p = *(_OWORD *)v7;
  v6 = 0;
  morphun::util::StringUtils::lowercase();
  std::string::basic_string[abi:ne180100]<0>(v2, "lowercase");
  siri::dialogengine::TransformText(&v4, (uint64_t)v9, (uint64_t)v11, (uint64_t *)v2, 1);
  if (v3 < 0)
    operator delete(v2[0]);
  morphun::util::StringUtils::to_string();
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v11);
}

void sub_1BFAFAF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a40);
  _Unwind_Resume(a1);
}

void sub_1BFAFB01C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  JUMPOUT(0x1BFAFB014);
}

void siri::dialogengine::HandleCapitalizeSentence(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  uint64_t size;
  BOOL v4;
  std::string *v5;
  char *v6;
  std::string *v7;
  char *v8;
  BOOL v9;
  std::string::size_type v11;
  std::allocator<char16_t> *v12;
  std::basic_string<char16_t>::size_type v13;
  unsigned int data_low;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  std::string *v19;
  char *v20;
  std::string *v21;
  _QWORD *v22;
  char *v23;
  std::string v26;
  std::string __p;
  std::basic_string<char16_t> __str;
  std::string v29;
  std::string v30;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v4 = (size & 0x80u) != 0;
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (v4)
    v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
  else
    v5 = a2;
  if (size >= 23)
  {
    v6 = (char *)v5 + size;
    v7 = v5;
    while (1)
    {
      v8 = (char *)memchr(v7, 91, size - 22);
      if (!v8)
        return;
      v9 = *(_QWORD *)v8 == 0x4154495041435B5BLL && *((_QWORD *)v8 + 1) == 0x4E45535F455A494CLL;
      if (v9 && *(_QWORD *)(v8 + 15) == 0x5D5D45434E45544ELL)
        break;
      v7 = (std::string *)(v8 + 1);
      size = v6 - (char *)v7;
      if (v6 - (char *)v7 < 23)
        return;
    }
    if (v8 != v6)
    {
      v11 = v8 - (char *)v5;
      if (v8 - (char *)v5 != -1)
      {
        while (1)
        {
          std::string::basic_string(&v30, a2, 0, v11, (std::allocator<char> *)&v29);
          std::string::basic_string(&v29, a2, v11 + 23, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__str);
          siri::dialogengine::StringTrimRight(" \t\n\r", &v30, &__p);
          morphun::util::StringUtils::to_u16string();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            v13 = __str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_)
            {
LABEL_27:
              std::basic_string<char16_t>::basic_string((std::basic_string<char16_t> *)&__p, &__str, v13 - 1, 0xFFFFFFFFFFFFFFFFLL, v12);
              goto LABEL_30;
            }
          }
          else
          {
            v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
              goto LABEL_27;
          }
          std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__p, byte_1BFD3220E);
LABEL_30:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
              goto LABEL_40;
            if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 1)
              goto LABEL_43;
            data_low = LOWORD(__p.__r_.__value_.__l.__data_);
            if (LOWORD(__p.__r_.__value_.__l.__data_) > 0x3Fu)
              goto LABEL_73;
            v15 = 1 << __p.__r_.__value_.__s.__data_[0];
            goto LABEL_39;
          }
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_40;
          if (__p.__r_.__value_.__l.__size_ != 1)
            goto LABEL_43;
          data_low = *(unsigned __int16 *)__p.__r_.__value_.__l.__data_;
          if (data_low <= 0x3F)
          {
            v15 = 1 << data_low;
LABEL_39:
            if ((v15 & 0x8000400200000000) != 0)
              goto LABEL_40;
          }
LABEL_73:
          if (data_low == 191)
          {
LABEL_40:
            siri::dialogengine::TransformTextCapitalize((uint64_t)&v29, &v26);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v29.__r_.__value_.__l.__data_);
            v29 = v26;
          }
LABEL_43:
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v30.__r_.__value_.__l.__data_, (const void **)&v29.__r_.__value_.__l.__data_, (uint64_t)&v26);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
            operator delete(a2->__r_.__value_.__l.__data_);
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
          v16 = v26.__r_.__value_.__r.__words[2];
          a2->__r_.__value_.__r.__words[2] = v26.__r_.__value_.__r.__words[2];
          v17 = HIBYTE(v16);
          v18 = (v17 & 0x80u) != 0;
          if ((v17 & 0x80u) != 0)
            v17 = a2->__r_.__value_.__l.__size_;
          if (v18)
            v19 = (std::string *)a2->__r_.__value_.__r.__words[0];
          else
            v19 = a2;
          v20 = (char *)v19 + v17;
          if (v17 >= 23)
          {
            v21 = v19;
            do
            {
              v22 = memchr(v21, 91, v17 - 22);
              if (!v22)
                break;
              v23 = (char *)v22;
              if (*v22 == 0x4154495041435B5BLL
                && v22[1] == 0x4E45535F455A494CLL
                && *(_QWORD *)((char *)v22 + 15) == 0x5D5D45434E45544ELL)
              {
                goto LABEL_62;
              }
              v21 = (std::string *)((char *)v22 + 1);
              v17 = v20 - (v23 + 1);
            }
            while (v17 > 22);
          }
          v23 = v20;
LABEL_62:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v30.__r_.__value_.__l.__data_);
          if (v23 != v20)
          {
            v11 = v23 - (char *)v19;
            if (v11 != -1)
              continue;
          }
          return;
        }
      }
    }
  }
}

void sub_1BFAFB3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  if (*(char *)(v36 + 23) < 0)
    operator delete(*(void **)v36);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WritePatternBinaryFile(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BOOL8 v8;
  unint64_t *v9;
  unint64_t v10;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  std::string __p;
  uint64_t v17[2];

  v5 = (std::__shared_weak_count *)a1[1];
  v17[0] = *a1;
  v17[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v12, ".patternbin");
  siri::dialogengine::PatternIdToPath(a3, (uint64_t)v12, v14);
  siri::dialogengine::JoinPath(a2, (uint64_t)v14, (uint64_t)&__p);
  v8 = siri::dialogengine::WritePatternBinaryFile(v17, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v8;
}

void sub_1BFAFB538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v27 - 48);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::WritePatternBinaryFile(uint64_t *a1, std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string::size_type v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  siri::dialogengine::PatternBinary::Metadata *v10;
  uint64_t v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  std::string **v16;
  uint64_t *v17;
  std::string *v18;
  std::string *v19;
  BOOL v20;
  std::string::size_type v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  siri::dialogengine::PatternBinary::Setting *v25;
  uint64_t v26;
  const std::string *v27;
  std::string *v28;
  const std::string *v29;
  std::string *v30;
  std::string **v31;
  uint64_t *v32;
  std::string *v33;
  std::string *v34;
  std::string::size_type v35;
  _DWORD *v36;
  uint64_t v37;
  int v38;
  siri::dialogengine::PatternBinary::Group *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string::size_type size;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type v46;
  siri::dialogengine::PatternBinary::Component *v47;
  uint64_t v48;
  std::string::size_type v49;
  siri::dialogengine::PatternBinary::Component *v50;
  std::string *v51;
  std::string *v52;
  _BOOL8 v53;
  std::string __p;
  char v56[16];
  int v57;
  google::protobuf::internal::ArenaImpl *v58;
  int v59;
  int v60;
  _DWORD *v61;
  google::protobuf::internal::ArenaImpl *v62;
  int v63;
  int v64;
  _DWORD *v65;
  google::protobuf::internal::ArenaImpl *v66;
  int v67;
  int v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::string v74;

  siri::dialogengine::PatternBinary::Pattern::Pattern((siri::dialogengine::PatternBinary::Pattern *)v56);
  v57 |= 1u;
  std::string::basic_string[abi:ne180100]<0>(&v74, "PATPB");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v70, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v74);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  v57 |= 2u;
  std::string::basic_string[abi:ne180100]<0>(&v74, "1.0");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v71, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v74);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  v4 = *a1;
  if (*(char *)(*a1 + 87) < 0)
    std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(v4 + 64), *(_QWORD *)(v4 + 72));
  else
    v74 = *(std::string *)(v4 + 64);
  v57 |= 4u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v72, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v74);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  v5 = *a1;
  if (*(char *)(*a1 + 135) < 0)
    std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(v5 + 112), *(_QWORD *)(v5 + 120));
  else
    v74 = *(std::string *)(v5 + 112);
  v57 |= 8u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v73, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v74);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v74, (const void ***)(*a1 + 184));
  v6 = v74.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v74.__r_.__value_.__l.__data_ != &v74.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      v7 = v61;
      if (!v61)
        break;
      v8 = v59;
      v9 = *v61;
      if (v59 >= *v61)
      {
        if (v9 == v60)
        {
LABEL_21:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v58, v9 + 1);
          v7 = v61;
          v9 = *v61;
        }
        *v7 = v9 + 1;
        v10 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternBinary::Metadata>(v58);
        v11 = v59++;
        *(_QWORD *)&v61[2 * v11 + 2] = v10;
        goto LABEL_23;
      }
      ++v59;
      v10 = *(siri::dialogengine::PatternBinary::Metadata **)&v61[2 * v8 + 2];
LABEL_23:
      v12 = (const std::string *)(v6 + 32);
      v13 = (std::string *)*((_QWORD *)v10 + 3);
      *((_DWORD *)v10 + 4) |= 1u;
      if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v10 + 3, (uint64_t)v12);
      else
        std::string::operator=(v13, v12);
      v14 = (const std::string *)(v6 + 56);
      v17 = (uint64_t *)*((_QWORD *)v10 + 4);
      v16 = (std::string **)((char *)v10 + 32);
      v15 = (std::string *)v17;
      *((_DWORD *)v16 - 4) |= 2u;
      if (v17 == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v16, (uint64_t)v14);
      else
        std::string::operator=(v15, v14);
      v18 = *(std::string **)(v6 + 8);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (std::string *)v18->__r_.__value_.__r.__words[0];
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = *(std::string **)(v6 + 16);
          v20 = v19->__r_.__value_.__r.__words[0] == v6;
          v6 = (std::string::size_type)v19;
        }
        while (!v20);
      }
      v6 = (std::string::size_type)v19;
      if (v19 == (std::string *)&v74.__r_.__value_.__r.__words[1])
        goto LABEL_35;
    }
    v9 = v60;
    goto LABEL_21;
  }
LABEL_35:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v74.__r_.__value_.__l.__size_);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v74, (const void ***)(*a1 + 160));
  v21 = v74.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v74.__r_.__value_.__l.__data_ != &v74.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      v22 = v65;
      if (!v65)
        break;
      v23 = v63;
      v24 = *v65;
      if (v63 >= *v65)
      {
        if (v24 == v64)
        {
LABEL_41:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v62, v24 + 1);
          v22 = v65;
          v24 = *v65;
        }
        *v22 = v24 + 1;
        v25 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternBinary::Setting>(v62);
        v26 = v63++;
        *(_QWORD *)&v65[2 * v26 + 2] = v25;
        goto LABEL_43;
      }
      ++v63;
      v25 = *(siri::dialogengine::PatternBinary::Setting **)&v65[2 * v23 + 2];
LABEL_43:
      v27 = (const std::string *)(v21 + 32);
      v28 = (std::string *)*((_QWORD *)v25 + 3);
      *((_DWORD *)v25 + 4) |= 1u;
      if (v28 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v25 + 3, (uint64_t)v27);
      else
        std::string::operator=(v28, v27);
      v29 = (const std::string *)(v21 + 56);
      v32 = (uint64_t *)*((_QWORD *)v25 + 4);
      v31 = (std::string **)((char *)v25 + 32);
      v30 = (std::string *)v32;
      *((_DWORD *)v31 - 4) |= 2u;
      if (v32 == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v31, (uint64_t)v29);
      else
        std::string::operator=(v30, v29);
      v33 = *(std::string **)(v21 + 8);
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (std::string *)v33->__r_.__value_.__r.__words[0];
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = *(std::string **)(v21 + 16);
          v20 = v34->__r_.__value_.__r.__words[0] == v21;
          v21 = (std::string::size_type)v34;
        }
        while (!v20);
      }
      v21 = (std::string::size_type)v34;
      if (v34 == (std::string *)&v74.__r_.__value_.__r.__words[1])
        goto LABEL_55;
    }
    v24 = v64;
    goto LABEL_41;
  }
LABEL_55:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v74.__r_.__value_.__l.__size_);
  std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100]((uint64_t)&v74, (const void ***)(*a1 + 208));
  v35 = v74.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v74.__r_.__value_.__l.__data_ != &v74.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      v36 = v69;
      if (!v69)
        break;
      v37 = v67;
      v38 = *v69;
      if (v67 < *v69)
      {
        ++v67;
        v39 = *(siri::dialogengine::PatternBinary::Group **)&v69[2 * v37 + 2];
        goto LABEL_63;
      }
      if (v38 == v68)
        goto LABEL_61;
LABEL_62:
      *v36 = v38 + 1;
      v39 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternBinary::Group>(v66);
      v40 = v67++;
      *(_QWORD *)&v69[2 * v40 + 2] = v39;
LABEL_63:
      v41 = *(_QWORD *)(v35 + 56);
      if (*(char *)(v41 + 87) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v41 + 64), *(_QWORD *)(v41 + 72));
      else
        __p = *(std::string *)(v41 + 64);
      *((_DWORD *)v39 + 4) |= 1u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v39 + 3, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v42 = *(_QWORD *)(v35 + 56);
      if (*(char *)(v42 + 159) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v42 + 136), *(_QWORD *)(v42 + 144));
      else
        __p = *(std::string *)(v42 + 136);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        size = __p.__r_.__value_.__l.__size_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!size)
          goto LABEL_80;
      }
      else if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      {
        goto LABEL_80;
      }
      v44 = *(_QWORD *)(v35 + 56);
      if (*(char *)(v44 + 159) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v44 + 136), *(_QWORD *)(v44 + 144));
      else
        __p = *(std::string *)(v44 + 136);
      *((_DWORD *)v39 + 4) |= 2u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v39 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_80:
      v45 = *(_QWORD *)(v35 + 56);
      if (*(char *)(v45 + 111) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v45 + 88), *(_QWORD *)(v45 + 96));
      else
        __p = *(std::string *)(v45 + 88);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v46 = __p.__r_.__value_.__l.__size_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v46)
          goto LABEL_91;
      }
      else if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      {
        goto LABEL_91;
      }
      *((_DWORD *)v39 + 4) |= 4u;
      v47 = (siri::dialogengine::PatternBinary::Component *)*((_QWORD *)v39 + 5);
      if (!v47)
      {
        v47 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternBinary::Component>(0);
        *((_QWORD *)v39 + 5) = v47;
      }
      siri::dialogengine::PatternGroup::GetDialogIdWithComponent(*(siri::dialogengine::PatternGroup **)(v35 + 56), &__p);
      *((_DWORD *)v47 + 4) |= 1u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v47 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_91:
      v48 = *(_QWORD *)(v35 + 56);
      if (*(char *)(v48 + 135) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v48 + 112), *(_QWORD *)(v48 + 120));
      else
        __p = *(std::string *)(v48 + 112);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v49 = __p.__r_.__value_.__l.__size_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v49)
        {
LABEL_98:
          *((_DWORD *)v39 + 4) |= 8u;
          v50 = (siri::dialogengine::PatternBinary::Component *)*((_QWORD *)v39 + 6);
          if (!v50)
          {
            v50 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternBinary::Component>(0);
            *((_QWORD *)v39 + 6) = v50;
          }
          siri::dialogengine::PatternGroup::GetVisualIdWithComponent(*(siri::dialogengine::PatternGroup **)(v35 + 56), &__p);
          *((_DWORD *)v50 + 4) |= 1u;
          google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v50 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      {
        goto LABEL_98;
      }
      v51 = *(std::string **)(v35 + 8);
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (std::string *)v51->__r_.__value_.__r.__words[0];
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = *(std::string **)(v35 + 16);
          v20 = v52->__r_.__value_.__r.__words[0] == v35;
          v35 = (std::string::size_type)v52;
        }
        while (!v20);
      }
      v35 = (std::string::size_type)v52;
      if (v52 == (std::string *)&v74.__r_.__value_.__r.__words[1])
        goto LABEL_108;
    }
    v38 = v68;
LABEL_61:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v66, v38 + 1);
    v36 = v69;
    v38 = *v69;
    goto LABEL_62;
  }
LABEL_108:
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v74.__r_.__value_.__l.__size_);
  memset(&v74, 0, sizeof(v74));
  if (google::protobuf::MessageLite::SerializeToString(v56, &v74))
  {
    v53 = siri::dialogengine::WriteGzippedFile(a2, (const void **)&v74.__r_.__value_.__l.__data_);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v53 = 0;
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  siri::dialogengine::PatternBinary::Pattern::~Pattern((siri::dialogengine::PatternBinary::Pattern *)v56);
  return v53;
}

void sub_1BFAFBD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  siri::dialogengine::PatternBinary::Pattern::~Pattern((siri::dialogengine::PatternBinary::Pattern *)&a16);
  _Unwind_Resume(a1);
}

_UNKNOWN **siri::dialogengine::GetMeasurementSystemByType(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  BOOL v5;
  BOOL v6;
  _BOOL4 v8;
  void *__p[2];
  char v10;

  if ((v2 & 1) == 0
  {
  }
  if ((v3 & 1) == 0
  {
  }
  if ((v4 & 1) == 0
  {
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "uk");
  v5 = siri::dialogengine::StringsEqual(a1, (uint64_t)__p);
  v6 = v5;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v6)
      return &siri::dialogengine::GetMeasurementSystemByType(std::string const&)::countryUK;
  }
  else if (v5)
  {
    return &siri::dialogengine::GetMeasurementSystemByType(std::string const&)::countryUK;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "us");
  v8 = siri::dialogengine::StringsEqual(a1, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v8)
    return &siri::dialogengine::GetMeasurementSystemByType(std::string const&)::countryUS;
  else
    return &siri::dialogengine::GetMeasurementSystemByType(std::string const&)::countryMetric;
}

void sub_1BFAFBF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CountryUK::~CountryUK(siri::dialogengine::CountryUK *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::CountryUK::GetType(siri::dialogengine::CountryUK *this)
{
  return 7;
}

uint64_t siri::dialogengine::CountryUS::GetPersonLengthUnit(siri::dialogengine::CountryUS *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryUK::GetTemperatureUnit(siri::dialogengine::CountryUK *this)
{
  return 0;
}

uint64_t siri::dialogengine::CountryUS::GetLengthUnit(siri::dialogengine::CountryUS *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryUS::GetSpeedUnit(siri::dialogengine::CountryUS *this)
{
  return 3;
}

uint64_t siri::dialogengine::CountryUK::GetPressureUnit(siri::dialogengine::CountryUK *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryUS::GetWeightUnit(siri::dialogengine::CountryUS *this)
{
  return 6;
}

uint64_t siri::dialogengine::CountryUS::GetAreaUnit(siri::dialogengine::CountryUS *this)
{
  return 5;
}

void siri::dialogengine::CountryUS::~CountryUS(siri::dialogengine::CountryUS *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::CountryUS::GetType(siri::dialogengine::CountryUS *this)
{
  return 8;
}

uint64_t siri::dialogengine::CountryUS::GetTemperatureUnit(siri::dialogengine::CountryUS *this)
{
  return 1;
}

uint64_t siri::dialogengine::CountryUS::GetPressureUnit(siri::dialogengine::CountryUS *this)
{
  return 1;
}

void siri::dialogengine::CountryMetric::~CountryMetric(siri::dialogengine::CountryMetric *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::CountryMetric::GetType(siri::dialogengine::CountryMetric *this)
{
  return 5;
}

uint64_t siri::dialogengine::CountryMetric::GetPersonLengthUnit(siri::dialogengine::CountryMetric *this)
{
  return 6;
}

uint64_t siri::dialogengine::CountryMetric::GetTemperatureUnit(siri::dialogengine::CountryMetric *this)
{
  return 0;
}

uint64_t siri::dialogengine::CountryMetric::GetLengthUnit(siri::dialogengine::CountryMetric *this)
{
  return 6;
}

uint64_t siri::dialogengine::CountryMetric::GetSpeedUnit(siri::dialogengine::CountryMetric *this)
{
  return 0;
}

uint64_t siri::dialogengine::CountryMetric::GetPressureUnit(siri::dialogengine::CountryMetric *this)
{
  return 0;
}

uint64_t siri::dialogengine::CountryMetric::GetWeightUnit(siri::dialogengine::CountryMetric *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryMetric::GetAreaUnit(siri::dialogengine::CountryMetric *this)
{
  return 3;
}

_UNKNOWN **siri::dialogengine::GetMeasurementSystemForLocale()
{
  unsigned __int8 v0;
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t *v13;
  _BOOL4 v14;
  uint64_t *v15;
  _QWORD *v16;
  std::string *v17;
  int ICUMeasurementSystem;
  _UNKNOWN **v19;
  _UNKNOWN **v20;
  uint64_t v21;
  const char *v22;
  std::string __p;
  char v25;
  std::string *p_p;

  if ((v0 & 1) == 0
  {
    qword_1EF582A60 = 0;
    qword_1EF582A58 = 0;
    siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMap = (uint64_t)&qword_1EF582A58;
    __cxa_atexit((void (*)(void *))std::map<std::string,siri::dialogengine::MeasurementSystem *>::~map[abi:ne180100], &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMap, &dword_1BF794000);
  }
  if ((v1 & 1) == 0
  {
  }
  if ((v2 & 1) == 0
  {
  }
  if ((v3 & 1) == 0
  {
  }
  if ((v4 & 1) == 0
  {
  }
  if ((v5 & 1) == 0
  {
  }
  if ((v6 & 1) == 0
  {
  }
  if ((v7 & 1) == 0
  {
  }
  if ((v8 & 1) == 0
  {
  }
  if ((v9 & 1) == 0
  {
  }
  v10 = atomic_load(&siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::flag);
  if (v10 != -1)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
    p_p = &__p;
    std::__call_once(&siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::flag, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::$_0 &&>>);
  }
  siri::dialogengine::GetLocaleCountry(&__p);
  v12 = qword_1EF582A58;
  if (!qword_1EF582A58)
    goto LABEL_20;
  v13 = &qword_1EF582A58;
  do
  {
    v14 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF582A60, (const void **)(v12 + 32), (const void **)&__p.__r_.__value_.__l.__data_);
    v15 = (uint64_t *)(v12 + 8);
    if (!v14)
    {
      v15 = (uint64_t *)v12;
      v13 = (uint64_t *)v12;
    }
    v12 = *v15;
  }
  while (*v15);
  if (v13 == &qword_1EF582A58
    || (v16 = v13 + 4,
        std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF582A60, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)v13 + 4)))
  {
LABEL_20:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &__p;
    else
      v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No MeasurementSystem found for country '%s'; Using ICU fallback",
      v11,
      v17);
    ICUMeasurementSystem = siri::dialogengine::GetICUMeasurementSystem();
    v19 = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryUS;
    if (ICUMeasurementSystem == 2)
      v19 = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryUK;
    if (ICUMeasurementSystem)
      v20 = v19;
    else
      v20 = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  }
  else
  {
    if (*((char *)v13 + 55) < 0)
      v16 = (_QWORD *)*v16;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Found MeasurementSystem for country '%s'", v11, v16);
    v20 = (_UNKNOWN **)v13[7];
  }
  v21 = (*((uint64_t (**)(_UNKNOWN **))*v20 + 2))(v20);
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"MeasurementSystem type: %d", v22, v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v20;
}

void sub_1BFAFC420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,siri::dialogengine::MeasurementSystem *>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(char **)(a1 + 8));
  return a1;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::$_0 &&>>()
{
  void *__p[2];
  char v1;
  void **v2;

  std::string::basic_string[abi:ne180100]<0>(__p, "AT");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "AU");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersKPH;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "BE");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "BR");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetricMillibars;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "CA");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryFeetKPH;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "CH");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "CL");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "CN");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetersMPS;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "DE");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "DK");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetersMPS;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ES");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "FI");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersMPS;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "FR");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "GB");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryUK;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ID");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "IL");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetricMillibars;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "IN");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryIN;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "IT");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "HK");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "JP");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersMPS;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "KR");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersMPS;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MX");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "MY");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "NL");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetricMillibars;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "NO");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetersMPS;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "PL");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "RU");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetersMPS;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "SA");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "SE");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersMPS;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TH");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TW");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryCentimetersMPS;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "US");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryUS;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "VN");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ZA");
  v2 = __p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((const void **)__p, (_OWORD **)&v2)+ 7) = &siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMetric;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_1BFAFCC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::MeasurementSystem *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(const void **a1, _OWORD **a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  const void **v7;
  _OWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = qword_1EF582A58;
  if (!qword_1EF582A58)
  {
    v5 = &qword_1EF582A58;
    v6 = &qword_1EF582A58;
LABEL_11:
    v8 = operator new(0x40uLL);
    v9 = *a2;
    v10 = *((_QWORD *)*a2 + 2);
    v8[2] = **a2;
    *((_QWORD *)v8 + 6) = v10;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *((_QWORD *)v8 + 7) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v6;
    *v5 = (uint64_t)v8;
    v11 = (uint64_t *)v8;
    if (*(_QWORD *)siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMap)
    {
      siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMap = *(_QWORD *)siri::dialogengine::GetMeasurementSystemForLocale(std::string const&)::countryMap;
      v11 = (uint64_t *)*v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EF582A58, v11);
    ++qword_1EF582A60;
    return v8;
  }
  v5 = &qword_1EF582A58;
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t *)v3;
      v7 = (const void **)(v3 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF582A60, a1, (const void **)(v3 + 32)))
        break;
      v3 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_11;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF582A60, v7, a1))
      break;
    v5 = v6 + 1;
    v3 = v6[1];
    if (!v3)
      goto LABEL_11;
  }
  v8 = (_OWORD *)*v5;
  if (!*v5)
    goto LABEL_11;
  return v8;
}

void siri::dialogengine::CountryIN::~CountryIN(siri::dialogengine::CountryIN *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::CountryIN::GetType(siri::dialogengine::CountryIN *this)
{
  return 3;
}

uint64_t siri::dialogengine::CountryIN::GetPersonLengthUnit(siri::dialogengine::CountryIN *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryIN::GetLengthUnit(siri::dialogengine::CountryIN *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryIN::GetPressureUnit(siri::dialogengine::CountryIN *this)
{
  return 1;
}

void siri::dialogengine::CountryCentimetersMPS::~CountryCentimetersMPS(siri::dialogengine::CountryCentimetersMPS *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::CountryCentimetersMPS::GetType(siri::dialogengine::CountryCentimetersMPS *this)
{
  return 1;
}

uint64_t siri::dialogengine::CountryCentimetersMPS::GetPersonLengthUnit(siri::dialogengine::CountryCentimetersMPS *this)
{
  return 1;
}

uint64_t siri::dialogengine::CountryCentimetersMPS::GetLengthUnit(siri::dialogengine::CountryCentimetersMPS *this)
{
  return 1;
}

uint64_t siri::dialogengine::CountryCentimetersMPS::GetSpeedUnit(siri::dialogengine::CountryCentimetersMPS *this)
{
  return 2;
}

void siri::dialogengine::CountryMetersMPS::~CountryMetersMPS(siri::dialogengine::CountryMetersMPS *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::CountryMetersMPS::GetType(siri::dialogengine::CountryMetersMPS *this)
{
  return 4;
}

uint64_t siri::dialogengine::CountryMetersMPS::GetSpeedUnit(siri::dialogengine::CountryMetersMPS *this)
{
  return 2;
}

void siri::dialogengine::CountryFeetKPH::~CountryFeetKPH(siri::dialogengine::CountryFeetKPH *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::CountryFeetKPH::GetType(siri::dialogengine::CountryFeetKPH *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryFeetKPH::GetPersonLengthUnit(siri::dialogengine::CountryFeetKPH *this)
{
  return 2;
}

uint64_t siri::dialogengine::CountryFeetKPH::GetLengthUnit(siri::dialogengine::CountryFeetKPH *this)
{
  return 2;
}

void siri::dialogengine::CountryMetricMillibars::~CountryMetricMillibars(siri::dialogengine::CountryMetricMillibars *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::CountryMetricMillibars::GetType(siri::dialogengine::CountryMetricMillibars *this)
{
  return 6;
}

uint64_t siri::dialogengine::CountryMetricMillibars::GetPressureUnit(siri::dialogengine::CountryMetricMillibars *this)
{
  return 2;
}

void siri::dialogengine::CountryCentimetersKPH::~CountryCentimetersKPH(siri::dialogengine::CountryCentimetersKPH *this)
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::CountryCentimetersKPH::GetType(siri::dialogengine::CountryCentimetersKPH *this)
{
  return 0;
}

uint64_t siri::dialogengine::CountryCentimetersKPH::GetPersonLengthUnit(siri::dialogengine::CountryCentimetersKPH *this)
{
  return 1;
}

uint64_t siri::dialogengine::CountryCentimetersKPH::GetLengthUnit(siri::dialogengine::CountryCentimetersKPH *this)
{
  return 1;
}

void sub_1BFAFDEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  if (a24 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v26, 0x10B3C40D3060B95);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B0]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2E0]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  if (SLOBYTE(STACK[0x34F]) < 0)
    operator delete((void *)STACK[0x338]);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);

  if (*(char *)(v27 - 217) < 0)
    operator delete(*(void **)(v27 - 240));
  if (*(char *)(v27 - 193) < 0)
    operator delete(*(void **)(v27 - 216));
  if (*(char *)(v27 - 169) < 0)
    operator delete(*(void **)(v27 - 192));
  if (*(char *)(v27 - 145) < 0)
    operator delete(*(void **)(v27 - 168));
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<siri::dialogengine::VariableArray>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableArray,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7937D58;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BFAFE598(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableArray *,std::shared_ptr<siri::dialogengine::VariableArray>::__shared_ptr_default_delete<siri::dialogengine::VariableArray,siri::dialogengine::VariableArray>,std::allocator<siri::dialogengine::VariableArray>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableArray *,std::shared_ptr<siri::dialogengine::VariableArray>::__shared_ptr_default_delete<siri::dialogengine::VariableArray,siri::dialogengine::VariableArray>,std::allocator<siri::dialogengine::VariableArray>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableArray *,std::shared_ptr<siri::dialogengine::VariableArray>::__shared_ptr_default_delete<siri::dialogengine::VariableArray,siri::dialogengine::VariableArray>,std::allocator<siri::dialogengine::VariableArray>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1BFAFE6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFAFE790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFAFE8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v16 - 32);
  _Unwind_Resume(a1);
}

void sub_1BFAFEA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v16 - 32);
  _Unwind_Resume(a1);
}

void sub_1BFAFEB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v16 - 32);
  _Unwind_Resume(a1);
}

void sub_1BFAFED7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p);

  _Unwind_Resume(a1);
}

void sub_1BFAFEF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  void *v47;
  void *v48;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_1BFAFF15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p);

  _Unwind_Resume(a1);
}

void sub_1BFAFF4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  siri::dialogengine::PropertyBase::~PropertyBase(&a18);

  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property__25194(_QWORD *a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](a1, *a2, a2[1]);
}

_QWORD *__copy_helper_atomic_property__25195(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ObjectProperty *,std::shared_ptr<siri::dialogengine::ObjectProperty>::__shared_ptr_default_delete<siri::dialogengine::ObjectProperty,siri::dialogengine::ObjectProperty>,std::allocator<siri::dialogengine::ObjectProperty>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ObjectProperty *,std::shared_ptr<siri::dialogengine::ObjectProperty>::__shared_ptr_default_delete<siri::dialogengine::ObjectProperty,siri::dialogengine::ObjectProperty>,std::allocator<siri::dialogengine::ObjectProperty>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ObjectProperty *,std::shared_ptr<siri::dialogengine::ObjectProperty>::__shared_ptr_default_delete<siri::dialogengine::ObjectProperty,siri::dialogengine::ObjectProperty>,std::allocator<siri::dialogengine::ObjectProperty>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1BFAFF79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BFAFF920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFAFFCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1BFAFFF80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCanonicalOperator(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  __int128 v6;
  unint64_t i;
  std::string __p;
  std::string v9[2];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[7];

  v19[6] = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v9, "lt", "<");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v10, "le", "<=");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v11, "gt", ">");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v12, "ge", ">=");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v13, "eq", "=");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v14, "ne", "!=");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v15, "&lt;", "<");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v16, "&le;", "<=");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v17, "&gt;", ">");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v18, "&ge;", ">=");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(v19, "==", "=");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::GetCanonicalOperator(std::string const&)::sOperatorConversion, (const void **)&v9[0].__r_.__value_.__l.__data_, 11);
    for (i = 480; i != -48; i -= 48)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v9[i / 0x18]);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::GetCanonicalOperator(std::string const&)::sOperatorConversion, &dword_1BF794000);
  }
  siri::dialogengine::StringToLower(a1, (uint64_t)&__p);
  siri::dialogengine::StringTrim(" \t\n\r", &__p, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::GetCanonicalOperator(std::string const&)::sOperatorConversion, (const void **)&v9[0].__r_.__value_.__l.__data_);
  if ((_UNKNOWN *)v5 == &unk_1EF580810)
  {
    *a2 = v9[0];
    memset(v9, 0, 24);
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v5 + 56), *(_QWORD *)(v5 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 56);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 72);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
}

void sub_1BFB00370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t i;

  for (i = 480; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v20 + i);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFB00430(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFB00480(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFB004D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFB00520(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FormatQuantity(siri::dialogengine *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, char a11, siri::dialogengine::SpeakableString *a12, uint64_t a13, int a14, uint64_t *a15)
{
  const char *v25;
  const char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  std::basic_string<char16_t>::size_type v55;
  uint64_t v56;
  uint64_t v57;
  siri::dialogengine::SpeakableString *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  morphun::dialog::LocalizedCommonConceptFactoryProvider *v64;
  uint64_t DefaultCommonConceptFactoryProvider;
  const char *v66;
  uint64_t v67;
  std::string::size_type v68;
  const morphun::dialog::SemanticFeatureModel *v69;
  morphun::dialog::InflectableStringConcept *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const char *v74;
  _BYTE *v75;
  uint64_t v76;
  char *v77;
  __int128 *v78;
  __int128 v79;
  std::string *v80;
  const std::string::value_type **v81;
  __int128 v82;
  std::string::size_type v83;
  std::string::size_type v84;
  int GrammarFeature;
  uint64_t Feature;
  uint64_t v87;
  void *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  __int128 v94;
  std::string *v95;
  std::string::size_type v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  const char *v101;
  std::string::size_type v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::basic_string<char16_t>::size_type size;
  uint64_t Print;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  char *v121;
  _QWORD *v122;
  std::basic_string<char16_t> v123;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string v127;
  std::string v128;
  std::string v129;
  std::string v130;
  std::basic_string<char16_t> v131;
  _BYTE v132[40];
  _BYTE v133[128];
  void *v134[2];
  unsigned __int8 v135;
  std::string __p;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  _QWORD *v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154[2];
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 v157;

  siri::dialogengine::RegisterMorphunData(a1, (siri::dialogengine::Context *)a2);
  if (a1)
    siri::dialogengine::Context::GetLocale(a1, v25, (uint64_t)v134);
  else
    std::string::basic_string[abi:ne180100]<0>(v134, "");
  v27 = v135;
  if ((v135 & 0x80u) != 0)
    v27 = (unint64_t)v134[1];
  if (!v27)
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"FormatQuantity has empty locale", v26);
  v28 = *(unsigned __int8 *)(a3 + 23);
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(a3 + 8);
  if (v28)
  {
    morphun::util::StringUtils::to_u16string();
    v29 = operator new();
  }
  else
  {
    v29 = operator new();
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__p, byte_1BFD3220E);
  }
  morphun::dialog::SpeakableString::SpeakableString();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v30 = *(unsigned __int8 *)(a7 + 23);
  if ((v30 & 0x80u) != 0)
    v30 = *(_QWORD *)(a7 + 8);
  if (v30)
  {
    morphun::util::StringUtils::to_u16string();
    v31 = operator new();
  }
  else
  {
    v31 = operator new();
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__p, byte_1BFD3220E);
  }
  morphun::dialog::SpeakableString::SpeakableString();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  memset(&v124, 0, sizeof(v124));
  v154[0] = 0;
  v154[1] = 0;
  v155 = 0;
  v120 = v31;
  morphun::util::ULocale::ULocale();
  if (SHIBYTE(v155) < 0)
    operator delete(v154[0]);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  morphun::dialog::GrammaticalCountFactory::GrammaticalCountFactory((morphun::dialog::GrammaticalCountFactory *)v132, (const morphun::util::ULocale *)v133);
  v32 = morphun::dialog::GrammaticalCountFactory::choose();
  v33 = *(unsigned __int8 *)(a2 + 23);
  if ((v33 & 0x80u) != 0)
    v33 = *(_QWORD *)(a2 + 8);
  if (v33)
  {
    morphun::util::StringUtils::to_u16string();
    v34 = operator new();
    morphun::dialog::SpeakableString::SpeakableString();
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 32))(v32, v34 + *(_QWORD *)(*(_QWORD *)v34 - 56));
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v32 = v35;
  }
  else
  {
    v34 = 0;
  }
  v36 = *(unsigned __int8 *)(a4 + 23);
  if ((v36 & 0x80u) != 0)
    v36 = *(_QWORD *)(a4 + 8);
  if (v36)
  {
    morphun::util::StringUtils::to_u16string();
    v37 = operator new();
    morphun::dialog::SpeakableString::SpeakableString();
    v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 40))(v32, v37 + *(_QWORD *)(*(_QWORD *)v37 - 56));
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v32 = v38;
  }
  else
  {
    v37 = 0;
  }
  v39 = *(unsigned __int8 *)(a5 + 23);
  if ((v39 & 0x80u) != 0)
    v39 = *(_QWORD *)(a5 + 8);
  if (v39)
  {
    morphun::util::StringUtils::to_u16string();
    v40 = (_QWORD *)operator new();
    morphun::dialog::SpeakableString::SpeakableString();
    v122 = v40;
    v41 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v32 + 48))(v32, (char *)v40 + *(_QWORD *)(*v40 - 56));
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v32 = v41;
  }
  else
  {
    v122 = 0;
  }
  v42 = *(unsigned __int8 *)(a6 + 23);
  if ((v42 & 0x80u) != 0)
    v42 = *(_QWORD *)(a6 + 8);
  if (v42)
  {
    morphun::util::StringUtils::to_u16string();
    v43 = operator new();
    morphun::dialog::SpeakableString::SpeakableString();
    v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 56))(v32, v43 + *(_QWORD *)(*(_QWORD *)v43 - 56));
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v32 = v44;
  }
  else
  {
    v43 = 0;
  }
  v45 = *(unsigned __int8 *)(a8 + 23);
  if ((v45 & 0x80u) != 0)
    v45 = *(_QWORD *)(a8 + 8);
  if (v45)
  {
    morphun::util::StringUtils::to_u16string();
    v46 = (char *)operator new();
    morphun::dialog::SpeakableString::SpeakableString();
    v47 = (*(uint64_t (**)(uint64_t, char *, double))(*(_QWORD *)v32 + 64))(v32, &v46[*(_QWORD *)(*(_QWORD *)v46 - 56)], a10);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v32 = v47;
  }
  else
  {
    v46 = 0;
  }
  v121 = v46;
  v48 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  v49 = 4;
  if (!a14)
    v49 = 5;
  v118 = v49;
  v119 = v48;
  v50 = (*(uint64_t (**)(void))(*v48 + 8 * v49))();
  if (*(char *)(v50 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(&v131, *(const std::basic_string<char16_t>::value_type **)v50, *(_QWORD *)(v50 + 8));
  }
  else
  {
    v51 = *(_OWORD *)v50;
    v131.__r_.__value_.__r.__words[2] = *(_QWORD *)(v50 + 16);
    *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v51;
  }
  if (a11)
  {
    v117 = v43;
    siri::dialogengine::SpeakableString::SpeakableString(&v124, a12);
    v53 = *((unsigned __int8 *)a12 + 47);
    if ((v53 & 0x80u) != 0)
      v53 = *((_QWORD *)a12 + 4);
    if (!v53)
    {
      v54 = *((unsigned __int8 *)a12 + 23);
      if ((v54 & 0x80u) != 0)
        v54 = *((_QWORD *)a12 + 1);
      if (!v54)
      {
        size = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v131.__r_.__value_.__l.__size_;
        if (size)
        {
          morphun::util::StringUtils::to_string();
          siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)v154);
          std::string::operator=(&v124, &__p);
          std::string::operator=(&v125, &v137);
          std::string::operator=(&v126, &v138);
          std::string::operator=(&v127, &v139);
          std::string::operator=(&v128, &v140);
          std::string::operator=(&v129, &v141);
          std::string::operator=(&v130, &v142);
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v142.__r_.__value_.__l.__data_);
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v141.__r_.__value_.__l.__data_);
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v140.__r_.__value_.__l.__data_);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v139.__r_.__value_.__l.__data_);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v138.__r_.__value_.__l.__data_);
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v137.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v155) < 0)
            operator delete(v154[0]);
        }
      }
    }
    if (a1)
      siri::dialogengine::Context::GetLocale(a1, v52, (uint64_t)&__p);
    else
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    memset(&v150, 0, sizeof(v150));
    memset(&v143, 0, sizeof(v143));
    v151 = 0;
    v152 = 0;
    v153 = 0;
    morphun::util::ULocale::ULocale();
    if (SHIBYTE(v153) < 0)
      operator delete(v151);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v61 = v157;
    if ((v157 & 0x80u) != 0)
      v61 = v156;
    if (!v61)
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"FormatQuantityNumber has empty locale", v60);
    if (a1)
      siri::dialogengine::Context::GetDeviceLocale(a1, &__p);
    else
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    memset(&v143, 0, sizeof(v143));
    v151 = 0;
    v152 = 0;
    v153 = 0;
    memset(&v149, 0, sizeof(v149));
    morphun::util::ULocale::ULocale();
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v149.__r_.__value_.__l.__data_);
    if (SHIBYTE(v153) < 0)
      operator delete(v151);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v63 = v157;
    if ((v157 & 0x80u) != 0)
      v63 = v156;
    if (!v63)
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"FormatQuantityNumber has empty region locale", v62);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v124.__r_.__value_.__l.__data_, v124.__r_.__value_.__l.__size_);
    else
      __p = v124;
    v64 = (morphun::dialog::LocalizedCommonConceptFactoryProvider *)morphun::util::StringUtils::to_u16string();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    DefaultCommonConceptFactoryProvider = morphun::dialog::LocalizedCommonConceptFactoryProvider::getDefaultCommonConceptFactoryProvider(v64);
    v67 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)DefaultCommonConceptFactoryProvider + 24))(DefaultCommonConceptFactoryProvider, v154);
    if (!v67)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to create morphun concept factory for quantity value.", v66);
      siri::dialogengine::FormatUnlocalizedResult(&v123, (uint64_t)&v151);
LABEL_244:
      if (SHIBYTE(v153) < 0)
        operator delete(v151);
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&v150);
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v154);
      v43 = v117;
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      v131 = v123;
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v130.__r_.__value_.__l.__data_);
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v128.__r_.__value_.__l.__data_);
      if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v127.__r_.__value_.__l.__data_);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
LABEL_260:
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      goto LABEL_262;
    }
    v116 = v37;
    if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
    else
      __p = v128;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v68 = __p.__r_.__value_.__l.__size_;
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v68)
      {
LABEL_129:
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v149, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
        else
          v149 = v129;
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v148, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
        else
          v148 = v128;
        siri::dialogengine::GetSemanticModel(a1, &v149, (uint64_t)&v143);
        v102 = v143.__r_.__value_.__r.__words[0];
        if (v143.__r_.__value_.__r.__words[0])
        {
          morphun::util::StringUtils::to_u16string();
          morphun::util::StringUtils::to_u16string();
          morphun::dialog::SemanticValue::SemanticValue();
          v70 = (morphun::dialog::InflectableStringConcept *)operator new();
          morphun::dialog::SemanticConcept::SemanticConcept();
          morphun::dialog::SemanticValue::~SemanticValue((morphun::dialog::SemanticValue *)&__p);
          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v146.__r_.__value_.__l.__data_);
          if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v147.__r_.__value_.__l.__data_);
        }
        else
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to create semantic concept for quantity value.", v101);
          siri::dialogengine::FormatUnlocalizedResult(&v123, (uint64_t)&v151);
          v70 = 0;
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v144);
        v103 = (std::__shared_weak_count *)v143.__r_.__value_.__l.__size_;
        if (v143.__r_.__value_.__l.__size_)
        {
          v104 = (unint64_t *)(v143.__r_.__value_.__l.__size_ + 8);
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
        if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v148.__r_.__value_.__l.__data_);
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v149.__r_.__value_.__l.__data_);
          if (!v102)
          {
LABEL_240:
            v37 = v116;
            if (v70)
              (*(void (**)(morphun::dialog::InflectableStringConcept *))(*(_QWORD *)v70 + 16))(v70);
            goto LABEL_244;
          }
        }
        else if (!v102)
        {
          goto LABEL_240;
        }
LABEL_228:
        morphun::dialog::NumberConcept::NumberConcept((morphun::dialog::NumberConcept *)&__p, a9, (const morphun::util::ULocale *)v154, (const morphun::util::ULocale *)&v150);
        std::string::basic_string[abi:ne180100]<0>(&v149, "");
        siri::dialogengine::FormatNumberConcept((uint64_t)a1, (uint64_t)&__p, a13);
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v149.__r_.__value_.__l.__data_);
        Print = morphun::dialog::SpeakableString::getPrint((morphun::dialog::SpeakableString *)&v143);
        if (*(char *)(Print + 23) >= 0)
          v108 = *(unsigned __int8 *)(Print + 23);
        else
          v108 = *(_QWORD *)(Print + 8);
        v109 = *(_QWORD *)v67;
        if (v108)
          v110 = (*(uint64_t (**)(uint64_t, std::string *, std::string *, morphun::dialog::InflectableStringConcept *))(v109 + 112))(v67, &__p, &v143, v70);
        else
          v110 = (*(uint64_t (**)(uint64_t, std::string *, morphun::dialog::InflectableStringConcept *))(v109 + 104))(v67, &__p, v70);
        v111 = v110;
        v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 24))(v110);
        v113 = (*(uint64_t (**)(void))(*(_QWORD *)v112 + 8 * v118))();
        if (*(char *)(v113 + 23) < 0)
          std::basic_string<char16_t>::__init_copy_ctor_external(&v123, *(const std::basic_string<char16_t>::value_type **)v113, *(_QWORD *)(v113 + 8));
        else
          v123 = *(std::basic_string<char16_t> *)v113;
        (*(void (**)(uint64_t))(*(_QWORD *)v112 + 16))(v112);
        morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&v143);
        (*(void (**)(uint64_t))(*(_QWORD *)v111 + 16))(v111);
        morphun::dialog::NumberConcept::~NumberConcept((morphun::dialog::NumberConcept *)&__p);
        goto LABEL_240;
      }
    }
    else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      goto LABEL_129;
    }
    v114 = v29;
    v115 = v34;
    v69 = (const morphun::dialog::SemanticFeatureModel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
    morphun::dialog::SpeakableString::SpeakableString();
    v70 = (morphun::dialog::InflectableStringConcept *)operator new();
    morphun::dialog::InflectableStringConcept::InflectableStringConcept(v70, v69, (const morphun::dialog::SpeakableString *)&__p);
    morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__p);
    memset(&__p, 0, sizeof(__p));
    v72 = *a15;
    v71 = a15[1];
    v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v143.__r_.__value_.__s.__data_[8] = 0;
    if (v71 == v72)
    {
      v34 = v115;
    }
    else
    {
      v73 = 0x6DB6DB6DB6DB6DB7 * ((v71 - v72) >> 3);
      if (v73 >= 0x492492492492493)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v75 = std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SemanticFeatureConstraint>>(v73);
      v76 = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v75;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v75[56 * (_QWORD)v74];
      do
      {
        v77 = &v75[v76];
        v78 = (__int128 *)(v72 + v76);
        if (*(char *)(v72 + v76 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v75[v76], *(const std::string::value_type **)v78, *((_QWORD *)v78 + 1));
        }
        else
        {
          v79 = *v78;
          *((_QWORD *)v77 + 2) = *((_QWORD *)v78 + 2);
          *(_OWORD *)v77 = v79;
        }
        v80 = (std::string *)&v75[v76 + 24];
        v81 = (const std::string::value_type **)(v72 + v76 + 24);
        if (*(char *)(v72 + v76 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(v80, *v81, *(_QWORD *)(v72 + v76 + 32));
        }
        else
        {
          v82 = *(_OWORD *)v81;
          *(_QWORD *)&v75[v76 + 40] = *(_QWORD *)(v72 + v76 + 40);
          *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v82;
        }
        v75[v76 + 48] = *(_BYTE *)(v72 + v76 + 48);
        v76 += 56;
      }
      while (v72 + v76 != v71);
      v83 = (std::string::size_type)&v75[v76];
      v84 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__l.__size_ = v83;
      v34 = v115;
      while (v84 != v83)
      {
        if (a1)
          siri::dialogengine::Context::GetLocale(a1, v74, (uint64_t)&v143);
        else
          std::string::basic_string[abi:ne180100]<0>(&v143, "");
        GrammarFeature = siri::dialogengine::SemanticFeatureConstraint::GetGrammarFeature((std::string *)v84, (uint64_t)&v143);
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v143.__r_.__value_.__l.__data_);
        if (GrammarFeature != 1)
          goto LABEL_179;
        morphun::util::StringUtils::to_u16string();
        Feature = morphun::dialog::SemanticFeatureModel::getFeature();
        v87 = Feature;
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v143.__r_.__value_.__l.__data_);
          if (!v87)
          {
LABEL_154:
            if (*(char *)(v84 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v84, *(_QWORD *)(v84 + 8));
            }
            else
            {
              v89 = *(_OWORD *)v84;
              v146.__r_.__value_.__r.__words[2] = *(_QWORD *)(v84 + 16);
              *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v89;
            }
            v90 = std::string::insert(&v146, 0, "Unable to apply feature constraint for inflection. Ignoring '");
            v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
            v147.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v91;
            v90->__r_.__value_.__l.__size_ = 0;
            v90->__r_.__value_.__r.__words[2] = 0;
            v90->__r_.__value_.__r.__words[0] = 0;
            v92 = std::string::append(&v147, "', '");
            v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
            v148.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v93;
            v92->__r_.__value_.__l.__size_ = 0;
            v92->__r_.__value_.__r.__words[2] = 0;
            v92->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(v84 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&v145, *(const std::string::value_type **)(v84 + 24), *(_QWORD *)(v84 + 32));
            }
            else
            {
              v94 = *(_OWORD *)(v84 + 24);
              v145.__r_.__value_.__r.__words[2] = *(_QWORD *)(v84 + 40);
              *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v94;
            }
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v95 = &v145;
            else
              v95 = (std::string *)v145.__r_.__value_.__r.__words[0];
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v96 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
            else
              v96 = v145.__r_.__value_.__l.__size_;
            v97 = std::string::append(&v148, (const std::string::value_type *)v95, v96);
            v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
            v149.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v98;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v97->__r_.__value_.__r.__words[0] = 0;
            v99 = std::string::append(&v149, "'");
            v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
            v143.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v100;
            v99->__r_.__value_.__l.__size_ = 0;
            v99->__r_.__value_.__r.__words[2] = 0;
            v99->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::LogWithLevel((uint64_t)&v143, 3u);
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v143.__r_.__value_.__l.__data_);
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v149.__r_.__value_.__l.__data_);
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v145.__r_.__value_.__l.__data_);
            if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v148.__r_.__value_.__l.__data_);
            if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v147.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_179;
            v88 = (void *)v146.__r_.__value_.__r.__words[0];
            goto LABEL_178;
          }
        }
        else if (!Feature)
        {
          goto LABEL_154;
        }
        morphun::util::StringUtils::to_u16string();
        (*(void (**)(morphun::dialog::InflectableStringConcept *, uint64_t, std::string *))(*(_QWORD *)v70 + 64))(v70, v87, &v143);
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        {
          v88 = (void *)v143.__r_.__value_.__r.__words[0];
LABEL_178:
          operator delete(v88);
        }
LABEL_179:
        v84 += 56;
      }
    }
    v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);
    v29 = v114;
    goto LABEL_228;
  }
  v55 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v55 = v131.__r_.__value_.__l.__size_;
  if (!v55)
  {
    v56 = *((unsigned __int8 *)a12 + 47);
    if ((v56 & 0x80u) != 0)
      v56 = *((_QWORD *)a12 + 4);
    if (v56)
      goto LABEL_86;
    v57 = *((unsigned __int8 *)a12 + 23);
    if ((v57 & 0x80u) != 0)
      v57 = *((_QWORD *)a12 + 1);
    if (v57)
    {
LABEL_86:
      v58 = (siri::dialogengine::SpeakableString *)((char *)a12 + 24);
      v59 = 24;
      if (a14 == 1)
      {
        v59 = 0;
        v58 = a12;
      }
      if (*((char *)v58 + 23) < 0)
        std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)((char *)a12 + v59), *((_QWORD *)v58 + 1));
      else
        v124 = *(std::string *)v58;
      morphun::util::StringUtils::to_u16string();
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      v131 = (std::basic_string<char16_t>)__p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      goto LABEL_260;
    }
  }
LABEL_262:
  morphun::util::StringUtils::to_string();
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  (*(void (**)(_QWORD *))(*v119 + 16))(v119);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
  morphun::dialog::GrammaticalCountFactory::~GrammaticalCountFactory((morphun::dialog::GrammaticalCountFactory *)v132);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v133);
  if (v121)
    (*(void (**)(char *))(*(_QWORD *)v121 + 16))(v121);
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
  if (v122)
    (*(void (**)(_QWORD *))(*v122 + 16))(v122);
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
  (*(void (**)(uint64_t))(*(_QWORD *)v120 + 16))(v120);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  if ((char)v135 < 0)
    operator delete(v134[0]);
}

void sub_1BFB020D4()
{
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  __cxa_end_catch();
  JUMPOUT(0x1BFB02334);
}

void sub_1BFB0214C()
{
  JUMPOUT(0x1BFB02380);
}

void sub_1BFB02164()
{
  JUMPOUT(0x1BFB02390);
}

void sub_1BFB02180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a54);
  JUMPOUT(0x1BFB02418);
}

void sub_1BFB02198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 209) < 0)
    operator delete(*(void **)(v28 - 232));
  if (a28 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  JUMPOUT(0x1BFB02418);
}

void sub_1BFB021D8()
{
  JUMPOUT(0x1BFB02448);
}

void sub_1BFB021E8()
{
  JUMPOUT(0x1BFB0236CLL);
}

void sub_1BFB022D8()
{
  __cxa_end_catch();
  JUMPOUT(0x1BFB02320);
}

void sub_1BFB024E4()
{
  __cxa_end_catch();
  JUMPOUT(0x1BFB02520);
}

void siri::dialogengine::FormatUnlocalizedResult(std::basic_string<char16_t> *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::basic_string<char16_t>::value_type *v7;
  std::basic_string<char16_t>::size_type v8;
  std::string v9;
  void *__p[2];
  std::string::size_type v11;
  std::basic_string<char16_t> v12;

  siri::dialogengine::StringFromDouble((siri::dialogengine *)0xFFFFFFFFLL, (uint64_t)&v9);
  v4 = std::string::append(&v9, " ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  morphun::util::StringUtils::to_u16string();
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::basic_string<char16_t>::value_type *)a2;
  else
    v7 = *(const std::basic_string<char16_t>::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  std::basic_string<char16_t>::append(&v12, v7, v8);
  *a1 = v12;
  memset(&v12, 0, sizeof(v12));
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1BFB025EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SemanticFeatureConstraint>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

uint64_t YAML::GraphBuilderAdapter::OnNull(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24)
                               + (((unint64_t)(v5 + *(_QWORD *)(a1 + 48) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v5 + *(_BYTE *)(a1 + 48) - 1));
  else
    v6 = 0;
  v7 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, v6);
  YAML::GraphBuilderAdapter::RegisterAnchor((YAML::GraphBuilderAdapter *)a1, a3, v7);
  return YAML::GraphBuilderAdapter::DispositionNode(a1, v7);
}

uint64_t YAML::GraphBuilderAdapter::OnAlias(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;

  v4 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), a2, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3 - 8));
  return YAML::GraphBuilderAdapter::DispositionNode(a1, v4);
}

uint64_t YAML::GraphBuilderAdapter::OnScalar(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24)
                               + (((unint64_t)(v6 + *(_QWORD *)(a1 + 48) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v6 + *(_BYTE *)(a1 + 48) - 1));
  else
    v7 = 0;
  v8 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3, v7);
  YAML::GraphBuilderAdapter::RegisterAnchor((YAML::GraphBuilderAdapter *)a1, a4, v8);
  return YAML::GraphBuilderAdapter::DispositionNode(a1, v8);
}

void YAML::GraphBuilderAdapter::OnSequenceStart(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __n128 v10;

  v6 = a1[1];
  v7 = a1[7];
  if (v7)
    v8 = *(_QWORD *)(*(_QWORD *)(a1[3] + (((unint64_t)(v7 + a1[6] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v7 + *((_BYTE *)a1 + 48) - 1));
  else
    v8 = 0;
  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2, a3, v8);
  v10.n128_u64[0] = (unint64_t)v9;
  v10.n128_u64[1] = (unint64_t)&YAML::GraphBuilderAdapter::ContainerFrame::sequenceMarker;
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::push_back(a1 + 2, &v10);
  YAML::GraphBuilderAdapter::RegisterAnchor((YAML::GraphBuilderAdapter *)a1, a4, v9);
}

uint64_t YAML::GraphBuilderAdapter::OnSequenceEnd(YAML::GraphBuilderAdapter *this)
{
  uint64_t v2;
  void *v3;

  v2 = *((_QWORD *)this + 7) - 1;
  v3 = *(void **)(*(_QWORD *)(*((_QWORD *)this + 3)
                            + (((unint64_t)(v2 + *((_QWORD *)this + 6)) >> 5) & 0x7FFFFFFFFFFFFF8))
                + 16 * (v2 + *((_BYTE *)this + 48)));
  *((_QWORD *)this + 7) = v2;
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 2);
  return YAML::GraphBuilderAdapter::DispositionNode((uint64_t)this, v3);
}

void YAML::GraphBuilderAdapter::OnMapStart(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  __n128 v11;

  v6 = a1[1];
  v7 = a1[7];
  if (v7)
    v8 = *(_QWORD *)(*(_QWORD *)(a1[3] + (((unint64_t)(v7 + a1[6] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v7 + *((_BYTE *)a1 + 48) - 1));
  else
    v8 = 0;
  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 56))(v6, a2, a3, v8);
  v10 = a1[12];
  v11.n128_u64[0] = (unint64_t)v9;
  v11.n128_u64[1] = v10;
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::push_back(a1 + 2, &v11);
  a1[12] = 0;
  YAML::GraphBuilderAdapter::RegisterAnchor((YAML::GraphBuilderAdapter *)a1, a4, v9);
}

uint64_t YAML::GraphBuilderAdapter::OnMapEnd(YAML::GraphBuilderAdapter *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this + 7) - 1;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + (((unint64_t)(v2 + *((_QWORD *)this + 6)) >> 5) & 0x7FFFFFFFFFFFFF8))
     + 16 * (v2 + *((_BYTE *)this + 48));
  v4 = *(void **)v3;
  *((_QWORD *)this + 12) = *(_QWORD *)(v3 + 8);
  *((_QWORD *)this + 7) = v2;
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 2);
  return YAML::GraphBuilderAdapter::DispositionNode((uint64_t)this, v4);
}

void std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = 32 * (v1 - v2) - 1;
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x200)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

uint64_t YAML::GraphBuilderAdapter::DispositionNode(uint64_t this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v4 = *(_QWORD *)(this + 56);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(this + 24)
                   + (((unint64_t)(v4 + *(_QWORD *)(this + 48) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (v4 + *(_BYTE *)(this + 48) - 1);
    v6 = *(_QWORD *)v5;
    if (*(_UNKNOWN **)(v5 + 8) == &YAML::GraphBuilderAdapter::ContainerFrame::sequenceMarker)
    {
      return (*(uint64_t (**)(_QWORD, uint64_t, void *))(**(_QWORD **)(this + 8) + 40))(*(_QWORD *)(this + 8), v6, a2);
    }
    else
    {
      v7 = *(_QWORD *)(this + 96);
      if (v7)
      {
        this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, void *))(**(_QWORD **)(this + 8) + 64))(*(_QWORD *)(this + 8), v6, v7, a2);
        *(_QWORD *)(v3 + 96) = 0;
      }
      else
      {
        *(_QWORD *)(this + 96) = a2;
      }
    }
  }
  else
  {
    *(_QWORD *)(this + 88) = a2;
  }
  return this;
}

__n128 std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::push_back(_QWORD *a1, __n128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __n128 result;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = 32 * (v4 - v5) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x100)
    {
      a1[4] = v8 - 256;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v63[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v63 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v63 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v63;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v110 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v110;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v107 = v36;
      v110 = v38;
      operator delete(v30);
      v36 = v107;
    }
    v38 = v110;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v108 = v36;
            v112 = v38;
            operator delete(v78);
            v36 = v108;
            v38 = v112;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v36 + 1);
            v111 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v109;
            *(_QWORD *)&v38 = v111;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  result = *a2;
  *(__n128 *)(*(_QWORD *)&v5[(v9 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v9) = *a2;
  ++a1[5];
  return result;
}

void sub_1BFB03078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void YAML::GraphBuilderAdapter::RegisterAnchor(YAML::GraphBuilderAdapter *this, unint64_t a2, void *a3)
{
  _BYTE *v6;
  void **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  if (a2)
  {
    v6 = (_BYTE *)*((_QWORD *)this + 8);
    v8 = (char *)*((_QWORD *)this + 9);
    v7 = (void **)((char *)this + 64);
    v9 = v8 - v6;
    if (a2 > (v8 - v6) >> 3)
    {
      v10 = v9 >> 3;
      v11 = a2 - (v9 >> 3);
      v12 = (char *)this + 80;
      v13 = *((_QWORD *)this + 10);
      if (v11 <= (v13 - (uint64_t)v8) >> 3)
      {
        bzero(v8, 8 * v11);
        *((_QWORD *)this + 9) = &v8[8 * v11];
      }
      else
      {
        if (a2 >> 61)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v14 = v13 - (_QWORD)v6;
        v15 = v14 >> 2;
        if (v14 >> 2 <= a2)
          v15 = a2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v12, v16);
        v18 = &v17[8 * v10];
        v20 = &v17[8 * v19];
        bzero(v18, 8 * v11);
        v21 = &v18[8 * v11];
        v23 = (char *)*((_QWORD *)this + 8);
        v22 = (char *)*((_QWORD *)this + 9);
        if (v22 != v23)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v18 - 1) = v24;
            v18 -= 8;
          }
          while (v22 != v23);
          v22 = (char *)*v7;
        }
        *((_QWORD *)this + 8) = v18;
        *((_QWORD *)this + 9) = v21;
        *((_QWORD *)this + 10) = v20;
        if (v22)
          operator delete(v22);
      }
      v6 = *v7;
    }
    *(_QWORD *)&v6[8 * a2 - 8] = a3;
  }
}

uint64_t YAML::GraphBuilderAdapter::GetCurrentParent(YAML::GraphBuilderAdapter *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                 + (((unint64_t)(v1 + *((_QWORD *)this + 6) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v1 + *((_BYTE *)this + 48) - 1));
  else
    return 0;
}

void InitDefaultsscc_info_Asset_CatUpdater_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", a4);
  siri::dialogengine::CatUpdater::Asset::Asset((siri::dialogengine::CatUpdater::Asset *)&siri::dialogengine::CatUpdater::_Asset_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatUpdater::_Asset_default_instance_, v4);
}

siri::dialogengine::CatUpdater::Asset *siri::dialogengine::CatUpdater::Asset::Asset(siri::dialogengine::CatUpdater::Asset *this)
{
  *(_QWORD *)this = &off_1E7935400;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Asset_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Asset_CatUpdater_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  return this;
}

void sub_1BFB032B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatUpdater::Asset::~Asset(siri::dialogengine::CatUpdater::Asset *this)
{
  siri::dialogengine::CatUpdater::Asset::~Asset(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7935400;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatUpdater::Asset::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatUpdater.Asset");
}

siri::dialogengine::CatUpdater::Asset *siri::dialogengine::CatUpdater::Asset::New(siri::dialogengine::CatUpdater::Asset *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Asset>(0);
}

siri::dialogengine::CatUpdater::Asset *siri::dialogengine::CatUpdater::Asset::New(siri::dialogengine::CatUpdater::Asset *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Asset>(a2);
}

void siri::dialogengine::CatUpdater::Asset::Clear(siri::dialogengine::CatUpdater::Asset *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArenaLite *v5;
  char v6;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 7) != 0)
  {
    if ((v1 & 1) == 0)
    {
      if ((v1 & 2) == 0)
        goto LABEL_4;
LABEL_10:
      v3 = *((_QWORD *)this + 4);
      if (*(char *)(v3 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        if ((v1 & 4) == 0)
          goto LABEL_17;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
        if ((v1 & 4) == 0)
          goto LABEL_17;
      }
      goto LABEL_14;
    }
    v2 = *((_QWORD *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v1 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v4 = *((_QWORD *)this + 5);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
LABEL_17:
  if ((v1 & 0x18) != 0)
  {
    *((_DWORD *)this + 14) = 0;
    *((_QWORD *)this + 6) = 0;
  }
  v6 = *((_BYTE *)this + 8);
  v5 = (siri::dialogengine::CatUpdater::Asset *)((char *)this + 8);
  *((_DWORD *)v5 + 2) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v5);
}

uint64_t siri::dialogengine::CatUpdater::Asset::IsInitialized(siri::dialogengine::CatUpdater::Asset *this)
{
  return 1;
}

void siri::dialogengine::CatUpdater::Asset::CheckTypeAndMergeFrom(siri::dialogengine::CatUpdater::Asset *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatUpdater::Asset::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatUpdater::Asset::ByteSizeLong(siri::dialogengine::CatUpdater::Asset *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x1F) == 0)
  {
    v2 = 0;
    goto LABEL_24;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3);
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    v9 = *((_QWORD *)this + 5);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 8) == 0)
    {
LABEL_14:
      if ((v1 & 0x10) == 0)
        goto LABEL_24;
      goto LABEL_20;
    }
  }
  else if ((v1 & 8) == 0)
  {
    goto LABEL_14;
  }
  v2 += ((9 * (__clz(*((_QWORD *)this + 6) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v1 & 0x10) == 0)
    goto LABEL_24;
LABEL_20:
  v12 = *((_DWORD *)this + 14);
  if (v12 < 0)
    v13 = 11;
  else
    v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v2 += v13;
LABEL_24:
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) != 0)
  {
    v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 23) < 0)
      v17 = *(_QWORD *)(v16 + 8);
    else
      v17 = *(unsigned __int8 *)(v16 + 23);
    v2 += v17;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::CatUpdater::Asset::GetCachedSize(siri::dialogengine::CatUpdater::Asset *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatUpdater::Asset::_InternalParse(siri::dialogengine::CatUpdater::Asset *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5;
  std::string **v6;
  uint64_t *v7;
  std::string **v8;
  std::string **v9;
  google::protobuf::internal *TagFallback;
  const char *v11;
  std::string *v12;
  google::protobuf::internal *v13;
  unint64_t v14;
  int v15;
  google::protobuf::internal *v16;
  google::protobuf::internal *v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  google::protobuf::internal *v21;
  uint64_t v22;
  std::string *v23;
  std::string *v24;
  unint64_t v26;
  google::protobuf::internal *v27;

  v5 = 0;
  v27 = a2;
  v6 = (std::string **)((char *)this + 40);
  v7 = (uint64_t *)((char *)this + 8);
  v8 = (std::string **)((char *)this + 32);
  v9 = (std::string **)((char *)this + 24);
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v27, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v27 + 1);
    LODWORD(v11) = *(unsigned __int8 *)v27;
    if (*(char *)v27 < 0)
    {
      v11 = (const char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if (*(char *)TagFallback < 0)
      {
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v27, v11);
        v27 = TagFallback;
        if (!TagFallback)
          goto LABEL_49;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)((char *)v27 + 2);
    }
    v27 = TagFallback;
LABEL_7:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10)
          goto LABEL_31;
        *((_DWORD *)this + 4) |= 1u;
        v12 = (std::string *)*((_QWORD *)this + 3);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_25;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v9;
        goto LABEL_24;
      case 2u:
        if (v11 != 18)
          goto LABEL_31;
        *((_DWORD *)this + 4) |= 2u;
        v12 = (std::string *)*((_QWORD *)this + 4);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_25;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v8;
        goto LABEL_24;
      case 3u:
        if (v11 != 24)
          goto LABEL_31;
        v13 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v14 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_18;
        v15 = *(char *)v13;
        v14 = v14 + (v15 << 7) - 128;
        if (v15 < 0)
        {
          v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v14);
          if (!v27)
            goto LABEL_51;
        }
        else
        {
          v13 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_18:
          v27 = v13;
        }
        if (v14 > 2)
        {
          if ((*v7 & 1) != 0)
          {
            v23 = (std::string *)(*v7 & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            v26 = v14;
            google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v7);
            v14 = v26;
            v23 = v24;
          }
          google::protobuf::internal::WriteVarint(3, v14, v23);
        }
        else
        {
          *((_DWORD *)this + 4) |= 0x10u;
          *((_DWORD *)this + 14) = v14;
        }
        continue;
      case 4u:
        if (v11 != 34)
          goto LABEL_31;
        *((_DWORD *)this + 4) |= 4u;
        v12 = (std::string *)*((_QWORD *)this + 5);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_25;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v6;
LABEL_24:
        TagFallback = v27;
LABEL_25:
        v16 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v12, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_36;
      case 5u:
        if (v11 != 40)
          goto LABEL_31;
        v5 |= 8u;
        v17 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v18 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_30;
        v19 = *(char *)v17;
        v18 = v18 + (v19 << 7) - 128;
        if (v19 < 0)
        {
          v21 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v18);
          v27 = v21;
          *((_QWORD *)this + 6) = v22;
          if (!v21)
            goto LABEL_51;
        }
        else
        {
          v17 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_30:
          v27 = v17;
          *((_QWORD *)this + 6) = v18;
        }
        continue;
      default:
LABEL_31:
        if ((_DWORD)v11)
          v20 = (v11 & 7) == 4;
        else
          v20 = 1;
        if (v20)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
          goto LABEL_49;
        }
        v16 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v11, v7, TagFallback, a3);
LABEL_36:
        v27 = v16;
        if (!v16)
        {
LABEL_51:
          TagFallback = 0;
          goto LABEL_49;
        }
        break;
    }
  }
  TagFallback = v27;
LABEL_49:
  *((_DWORD *)this + 4) |= v5;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::CatUpdater::Asset::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatUpdater::Asset *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0)
        goto LABEL_4;
LABEL_9:
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v7 = *((int *)this + 14);
      *v4 = 24;
      if (v7 > 0x7F)
      {
        v4[1] = v7 | 0x80;
        v8 = v7 >> 7;
        if (v7 >> 14)
        {
          v9 = v4 + 2;
          do
          {
            v10 = v9;
            *v9++ = v8 | 0x80;
            v11 = v8 >> 7;
            v12 = v8 >> 14;
            v8 >>= 7;
          }
          while (v12);
          v4 = v10 + 2;
          *v9 = v11;
          if ((v6 & 4) != 0)
            goto LABEL_20;
        }
        else
        {
          v4[2] = v8;
          v4 += 3;
          if ((v6 & 4) != 0)
            goto LABEL_20;
        }
      }
      else
      {
        v4[1] = v7;
        v4 += 2;
        if ((v6 & 4) != 0)
          goto LABEL_20;
      }
LABEL_5:
      if ((v6 & 8) == 0)
        goto LABEL_30;
      goto LABEL_21;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), v4);
  if ((v6 & 0x10) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v6 & 4) == 0)
    goto LABEL_5;
LABEL_20:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 5), v4);
  if ((v6 & 8) == 0)
    goto LABEL_30;
LABEL_21:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v13 = *((_QWORD *)this + 6);
  *v4 = 40;
  if (v13 > 0x7F)
  {
    v4[1] = v13 | 0x80;
    v14 = v13 >> 7;
    if (v13 >> 14)
    {
      v15 = v4 + 2;
      do
      {
        v16 = v15;
        *v15++ = v14 | 0x80;
        v17 = v14 >> 7;
        v18 = v14 >> 14;
        v14 >>= 7;
      }
      while (v18);
      v4 = v16 + 2;
      *v15 = v17;
    }
    else
    {
      v4[2] = v14;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v13;
    v4 += 2;
  }
LABEL_30:
  v19 = *((_QWORD *)this + 1);
  if ((v19 & 1) == 0)
    return (unsigned __int8 *)v4;
  v21 = v19 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v21 + 23) < 0)
  {
    v23 = *(void **)v21;
    v22 = *(_QWORD *)(v21 + 8);
  }
  else
  {
    LODWORD(v22) = *(unsigned __int8 *)(v21 + 23);
    v23 = (void *)v21;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v22)
  {
    v24 = (int)v22;
    memcpy(v4, v23, (int)v22);
    v4 += v24;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v23, v22, (unsigned __int8 *)v4);
}

void siri::dialogengine::CatUpdater::Asset::MergeFrom(siri::dialogengine::CatUpdater::Asset *this, const siri::dialogengine::CatUpdater::Asset *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 506);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x1F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 4);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 4);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 5);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 5);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_23;
                goto LABEL_22;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
          {
LABEL_23:
            if ((v6 & 0x10) != 0)
              *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
            *((_DWORD *)this + 4) |= v6;
            return;
          }
LABEL_22:
          *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
          goto LABEL_23;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_1BFB03C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatUpdater::Asset *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Asset>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatUpdater::Asset *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Asset *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Asset>);
    siri::dialogengine::CatUpdater::Asset::Asset(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Asset *)operator new();
    siri::dialogengine::CatUpdater::Asset::Asset(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFB03CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4040ECADADLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Asset>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Encrypted_CatUpdater_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", a4);
  siri::dialogengine::CatUpdater::Encrypted::Encrypted((siri::dialogengine::CatUpdater::Encrypted *)&siri::dialogengine::CatUpdater::_Encrypted_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatUpdater::_Encrypted_default_instance_, v4);
}

siri::dialogengine::CatUpdater::Encrypted *siri::dialogengine::CatUpdater::Encrypted::Encrypted(siri::dialogengine::CatUpdater::Encrypted *this)
{
  *(_QWORD *)this = &off_1E7935760;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Encrypted_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Encrypted_CatUpdater_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_BYTE *)this + 80) = 0;
  return this;
}

void sub_1BFB03ECC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatUpdater::Encrypted::~Encrypted(siri::dialogengine::CatUpdater::Encrypted *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E7935760;
  v1 = (uint64_t *)((char *)this + 8);
  siri::dialogengine::CatUpdater::Encrypted::SharedDtor(this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E7935760;
  v1 = (uint64_t *)((char *)this + 8);
  siri::dialogengine::CatUpdater::Encrypted::SharedDtor(this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E7935760;
  v1 = (uint64_t *)((char *)this + 8);
  siri::dialogengine::CatUpdater::Encrypted::SharedDtor(this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

_QWORD *siri::dialogengine::CatUpdater::Encrypted::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatUpdater.Encrypted");
}

siri::dialogengine::CatUpdater::Encrypted *siri::dialogengine::CatUpdater::Encrypted::New(siri::dialogengine::CatUpdater::Encrypted *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Encrypted>(0);
}

siri::dialogengine::CatUpdater::Encrypted *siri::dialogengine::CatUpdater::Encrypted::New(siri::dialogengine::CatUpdater::Encrypted *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Encrypted>(a2);
}

void siri::dialogengine::CatUpdater::Encrypted::Clear(siri::dialogengine::CatUpdater::Encrypted *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x7F) == 0)
    goto LABEL_37;
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_14;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_14;
    }
LABEL_4:
    if ((v1 & 4) == 0)
      goto LABEL_5;
LABEL_18:
    v4 = *((_QWORD *)this + 5);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v1 & 8) != 0)
        goto LABEL_22;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v1 & 8) != 0)
        goto LABEL_22;
    }
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
LABEL_26:
    v6 = *((_QWORD *)this + 7);
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v1 & 0x20) != 0)
        goto LABEL_30;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
      if ((v1 & 0x20) != 0)
        goto LABEL_30;
    }
LABEL_8:
    if ((v1 & 0x40) == 0)
      goto LABEL_37;
LABEL_34:
    v8 = *((_QWORD *)this + 9);
    if (*(char *)(v8 + 23) < 0)
    {
      **(_BYTE **)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 23) = 0;
    }
    goto LABEL_37;
  }
  if ((v1 & 2) == 0)
    goto LABEL_4;
LABEL_14:
  v3 = *((_QWORD *)this + 4);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v1 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    if ((v1 & 4) != 0)
      goto LABEL_18;
  }
LABEL_5:
  if ((v1 & 8) == 0)
    goto LABEL_6;
LABEL_22:
  v5 = *((_QWORD *)this + 6);
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_26;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_26;
  }
LABEL_7:
  if ((v1 & 0x20) == 0)
    goto LABEL_8;
LABEL_30:
  v7 = *((_QWORD *)this + 8);
  if (*(char *)(v7 + 23) < 0)
  {
    **(_BYTE **)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    if ((v1 & 0x40) == 0)
      goto LABEL_37;
    goto LABEL_34;
  }
  *(_BYTE *)v7 = 0;
  *(_BYTE *)(v7 + 23) = 0;
  if ((v1 & 0x40) != 0)
    goto LABEL_34;
LABEL_37:
  v10 = *((_BYTE *)this + 8);
  v9 = (char *)this + 8;
  v9[72] = 0;
  *((_DWORD *)v9 + 2) = 0;
  if ((v10 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v9);
}

uint64_t siri::dialogengine::CatUpdater::Encrypted::IsInitialized(siri::dialogengine::CatUpdater::Encrypted *this)
{
  return 1;
}

void siri::dialogengine::CatUpdater::Encrypted::CheckTypeAndMergeFrom(siri::dialogengine::CatUpdater::Encrypted *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatUpdater::Encrypted::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatUpdater::Encrypted::ByteSizeLong(siri::dialogengine::CatUpdater::Encrypted *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  if (!*((_BYTE *)this + 16))
  {
    v2 = 0;
    goto LABEL_23;
  }
  if ((*((_BYTE *)this + 16) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 16) & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3);
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v1 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((*((_BYTE *)this + 16) & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v1 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((*((_BYTE *)this + 16) & 4) != 0)
  {
    v14 = *((_QWORD *)this + 5);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v16 = *(_QWORD *)(v14 + 8);
    if ((v15 & 0x80u) == 0)
      v16 = v15;
    v1 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((*((_BYTE *)this + 16) & 8) == 0)
    {
LABEL_14:
      if ((*((_BYTE *)this + 16) & 0x10) == 0)
        goto LABEL_15;
      goto LABEL_31;
    }
  }
  else if ((*((_BYTE *)this + 16) & 8) == 0)
  {
    goto LABEL_14;
  }
  v17 = *((_QWORD *)this + 6);
  v18 = *(unsigned __int8 *)(v17 + 23);
  v19 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  v1 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((*((_BYTE *)this + 16) & 0x10) == 0)
  {
LABEL_15:
    if ((*((_BYTE *)this + 16) & 0x20) == 0)
      goto LABEL_16;
LABEL_34:
    v23 = *((_QWORD *)this + 8);
    v24 = *(unsigned __int8 *)(v23 + 23);
    v25 = *(_QWORD *)(v23 + 8);
    if ((v24 & 0x80u) == 0)
      v25 = v24;
    v1 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((*((_BYTE *)this + 16) & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_31:
  v20 = *((_QWORD *)this + 7);
  v21 = *(unsigned __int8 *)(v20 + 23);
  v22 = *(_QWORD *)(v20 + 8);
  if ((v21 & 0x80u) == 0)
    v22 = v21;
  v1 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((*((_BYTE *)this + 16) & 0x20) != 0)
    goto LABEL_34;
LABEL_16:
  if ((*((_BYTE *)this + 16) & 0x40) != 0)
  {
LABEL_17:
    v9 = *((_QWORD *)this + 9);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    v1 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_20:
  if ((*((_BYTE *)this + 16) & 0x80) != 0)
    v2 = v1 + 2;
  else
    v2 = v1;
LABEL_23:
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v26 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v26 + 23) < 0)
      v27 = *(_QWORD *)(v26 + 8);
    else
      v27 = *(unsigned __int8 *)(v26 + 23);
    v2 += v27;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::CatUpdater::Encrypted::GetCachedSize(siri::dialogengine::CatUpdater::Encrypted *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatUpdater::Encrypted::_InternalParse(siri::dialogengine::CatUpdater::Encrypted *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  uint64_t *v9;
  google::protobuf::internal *TagFallback;
  const char *v11;
  std::string *v12;
  std::string **v13;
  google::protobuf::internal *v14;
  unint64_t v15;
  int v16;
  google::protobuf::internal *v17;
  BOOL v18;
  google::protobuf::internal *v19;
  uint64_t v20;
  std::string **v22;
  std::string **v23;
  std::string **v24;
  std::string **v25;
  google::protobuf::internal *v26;

  v5 = 0;
  v25 = (std::string **)((char *)this + 72);
  v26 = a2;
  v23 = (std::string **)((char *)this + 56);
  v24 = (std::string **)((char *)this + 64);
  v22 = (std::string **)((char *)this + 48);
  v6 = (std::string **)((char *)this + 40);
  v7 = (std::string **)((char *)this + 32);
  v8 = (std::string **)((char *)this + 24);
  v9 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v26, *((_DWORD *)a3 + 23)) & 1) != 0)
    {
      TagFallback = v26;
      break;
    }
    TagFallback = (google::protobuf::internal *)((char *)v26 + 1);
    LODWORD(v11) = *(unsigned __int8 *)v26;
    if ((*(char *)v26 & 0x80000000) == 0)
      goto LABEL_6;
    v11 = (const char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v26 + 2);
LABEL_6:
      v26 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v26, v11);
    v26 = TagFallback;
    if (!TagFallback)
      break;
LABEL_7:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10)
          goto LABEL_41;
        *((_DWORD *)this + 4) |= 1u;
        v12 = (std::string *)*((_QWORD *)this + 3);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_38;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v8;
        goto LABEL_37;
      case 2u:
        if (v11 != 18)
          goto LABEL_41;
        *((_DWORD *)this + 4) |= 2u;
        v12 = (std::string *)*((_QWORD *)this + 4);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_38;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v7;
        goto LABEL_37;
      case 3u:
        if (v11 != 26)
          goto LABEL_41;
        *((_DWORD *)this + 4) |= 4u;
        v12 = (std::string *)*((_QWORD *)this + 5);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_38;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v6;
        goto LABEL_37;
      case 4u:
        if (v11 != 34)
          goto LABEL_41;
        *((_DWORD *)this + 4) |= 8u;
        v12 = (std::string *)*((_QWORD *)this + 6);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_38;
        v13 = v22;
        goto LABEL_36;
      case 5u:
        if (v11 != 40)
          goto LABEL_41;
        v5 |= 0x80u;
        v14 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v15 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_26;
        v16 = *(char *)v14;
        v15 = v15 + (v16 << 7) - 128;
        if (v16 < 0)
        {
          v19 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v15);
          v26 = v19;
          *((_BYTE *)this + 80) = v20 != 0;
          if (!v19)
            goto LABEL_47;
        }
        else
        {
          v14 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_26:
          v26 = v14;
          *((_BYTE *)this + 80) = v15 != 0;
        }
        continue;
      case 6u:
        if (v11 != 50)
          goto LABEL_41;
        *((_DWORD *)this + 4) |= 0x10u;
        v12 = (std::string *)*((_QWORD *)this + 7);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_38;
        v13 = v23;
        goto LABEL_36;
      case 7u:
        if (v11 != 58)
          goto LABEL_41;
        *((_DWORD *)this + 4) |= 0x20u;
        v12 = (std::string *)*((_QWORD *)this + 8);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_38;
        v13 = v24;
        goto LABEL_36;
      case 8u:
        if (v11 != 66)
          goto LABEL_41;
        *((_DWORD *)this + 4) |= 0x40u;
        v12 = (std::string *)*((_QWORD *)this + 9);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_38;
        v13 = v25;
LABEL_36:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v13, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v13;
LABEL_37:
        TagFallback = v26;
LABEL_38:
        v17 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v12, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_39;
      default:
LABEL_41:
        if ((_DWORD)v11)
          v18 = (v11 & 7) == 4;
        else
          v18 = 1;
        if (v18)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
          goto LABEL_49;
        }
        v17 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v11, v9, TagFallback, a3);
LABEL_39:
        v26 = v17;
        if (v17)
          continue;
LABEL_47:
        TagFallback = 0;
        break;
    }
    break;
  }
LABEL_49:
  *((_DWORD *)this + 4) |= v5;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::CatUpdater::Encrypted::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatUpdater::Encrypted *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  char v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 5), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 6), v4);
  if ((v6 & 0x80) == 0)
  {
LABEL_6:
    if ((v6 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_16:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v9 = *((_BYTE *)this + 80);
  *v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 0x10) == 0)
  {
LABEL_7:
    if ((v6 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 7), v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_8:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_20:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 8), v4);
  if ((v6 & 0x40) != 0)
LABEL_9:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 9), v4);
LABEL_10:
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return (unsigned __int8 *)v4;
  v10 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v10 + 23) < 0)
  {
    v12 = *(void **)v10;
    v11 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    LODWORD(v11) = *(unsigned __int8 *)(v10 + 23);
    v12 = (void *)v10;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v11)
  {
    v13 = (int)v11;
    memcpy(v4, v12, (int)v11);
    v4 += v13;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v12, v11, (unsigned __int8 *)v4);
}

void siri::dialogengine::CatUpdater::Encrypted::MergeFrom(siri::dialogengine::CatUpdater::Encrypted *this, const siri::dialogengine::CatUpdater::Encrypted *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  const std::string *v20;
  char v21;
  std::string v22[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 2612);
    v4 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 4);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 4);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 5);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 5);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 6);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 6);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 7);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 7);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v16);
                      if ((v6 & 0x20) == 0)
                        goto LABEL_39;
LABEL_33:
                      v17 = (std::string *)*((_QWORD *)this + 8);
                      *((_DWORD *)this + 4) |= 0x20u;
                      v18 = (const std::string *)*((_QWORD *)a2 + 8);
                      if (v17 != v18)
                      {
                        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v18);
                        else
                          std::string::operator=(v17, v18);
                      }
LABEL_39:
                      if ((v6 & 0x40) != 0)
                      {
                        v19 = (std::string *)*((_QWORD *)this + 9);
                        *((_DWORD *)this + 4) |= 0x40u;
                        v20 = (const std::string *)*((_QWORD *)a2 + 9);
                        if (v19 != v20)
                        {
                          if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          {
                            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v20);
                            if ((v6 & 0x80) == 0)
                              goto LABEL_45;
                            goto LABEL_44;
                          }
                          std::string::operator=(v19, v20);
                        }
                      }
                      if ((v6 & 0x80) == 0)
                      {
LABEL_45:
                        *((_DWORD *)this + 4) |= v6;
                        return;
                      }
LABEL_44:
                      *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
                      goto LABEL_45;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) == 0)
                  goto LABEL_39;
                goto LABEL_33;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_1BFB04B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatUpdater::Encrypted *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Encrypted>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatUpdater::Encrypted *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Encrypted *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Encrypted>);
    siri::dialogengine::CatUpdater::Encrypted::Encrypted(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Encrypted *)operator new();
    siri::dialogengine::CatUpdater::Encrypted::Encrypted(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFB04BBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4002BE25B0);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Encrypted>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_QWORD *siri::dialogengine::CatUpdater::Encrypted::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = this;
  v2 = this[3];
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = v1[4];
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (_QWORD *)MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = v1[5];
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    this = (_QWORD *)MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = v1[6];
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    this = (_QWORD *)MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  v10 = v1[7];
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    this = (_QWORD *)MEMORY[0x1C3B8D890](v10, 0x1012C40EC159624);
  }
  v11 = v1[8];
  if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    this = (_QWORD *)MEMORY[0x1C3B8D890](v11, 0x1012C40EC159624);
  }
  v12 = v1[9];
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    JUMPOUT(0x1C3B8D890);
  }
  return this;
}

void InitDefaultsscc_info_Filter_CatUpdater_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", a4);
  siri::dialogengine::CatUpdater::Filter::Filter((siri::dialogengine::CatUpdater::Filter *)&siri::dialogengine::CatUpdater::_Filter_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatUpdater::_Filter_default_instance_, v4);
  qword_1EF584218 = (uint64_t)&siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_;
  unk_1EF584220 = &siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_;
}

void InitDefaultsscc_info_MatchCriteria_CatUpdater_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", a4);
  siri::dialogengine::CatUpdater::MatchCriteria::MatchCriteria((siri::dialogengine::CatUpdater::MatchCriteria *)&siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_, v4);
}

siri::dialogengine::CatUpdater::MatchCriteria *siri::dialogengine::CatUpdater::MatchCriteria::MatchCriteria(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  *(_QWORD *)this = &off_1E79355B0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load(scc_info_MatchCriteria_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_MatchCriteria_CatUpdater_2eproto);
  return this;
}

void sub_1BFB04EC8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatUpdater::MatchCriteria::~MatchCriteria(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  siri::dialogengine::CatUpdater::MatchCriteria::~MatchCriteria(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t *v2;

  *(_QWORD *)this = &off_1E79355B0;
  v2 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
}

_QWORD *siri::dialogengine::CatUpdater::MatchCriteria::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatUpdater.MatchCriteria");
}

siri::dialogengine::CatUpdater::MatchCriteria *siri::dialogengine::CatUpdater::MatchCriteria::New(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(0);
}

siri::dialogengine::CatUpdater::MatchCriteria *siri::dialogengine::CatUpdater::MatchCriteria::New(siri::dialogengine::CatUpdater::MatchCriteria *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(a2);
}

void siri::dialogengine::CatUpdater::MatchCriteria::Clear(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  google::protobuf::internal::InternalMetadataWithArenaLite *v2;
  char v3;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48);
  v3 = *((_BYTE *)this + 8);
  v2 = (siri::dialogengine::CatUpdater::MatchCriteria *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
}

uint64_t siri::dialogengine::CatUpdater::MatchCriteria::IsInitialized(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  return 1;
}

void siri::dialogengine::CatUpdater::MatchCriteria::CheckTypeAndMergeFrom(siri::dialogengine::CatUpdater::MatchCriteria *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatUpdater::MatchCriteria::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatUpdater::MatchCriteria::ByteSizeLong(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  v7 = *((unsigned int *)this + 14);
  v8 = v4 + v7;
  if ((int)v7 >= 1)
  {
    v9 = 0;
    do
    {
      v10 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, v9);
      v11 = *(unsigned __int8 *)(v10 + 23);
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(v10 + 8);
      v8 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      ++v9;
    }
    while ((_DWORD)v7 != v9);
  }
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v14 + 23) < 0)
      v15 = *(_QWORD *)(v14 + 8);
    else
      v15 = *(unsigned __int8 *)(v14 + 23);
    v8 += v15;
  }
  *((_DWORD *)this + 5) = v8;
  return v8;
}

uint64_t siri::dialogengine::CatUpdater::MatchCriteria::GetCachedSize(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatUpdater::MatchCriteria::_InternalParse(siri::dialogengine::CatUpdater::MatchCriteria *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t *v7;
  google::protobuf::internal *TagFallback;
  const char *v9;
  BOOL v11;
  char *v12;
  std::string::value_type *v13;
  int *v14;
  uint64_t v15;
  int v16;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string::value_type *v22;
  int *v23;
  uint64_t v24;
  int v25;
  std::string *v26;
  google::protobuf::internal::ArenaImpl *v27;
  uint64_t v28;
  uint64_t v29;
  google::protobuf::internal *v31;

  v31 = a2;
  v5 = (unsigned int *)((char *)this + 48);
  v6 = (unsigned int *)((char *)this + 24);
  v7 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v31, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v31 + 1);
    LODWORD(v9) = *(unsigned __int8 *)v31;
    if ((*(char *)v31 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (const char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v31 + 2);
LABEL_6:
      v31 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v31, v9);
    v31 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v9 >> 3 == 2)
    {
      if (v9 != 18)
        goto LABEL_12;
      v12 = (char *)TagFallback - 1;
LABEL_20:
      v13 = v12 + 1;
      v31 = (google::protobuf::internal *)(v12 + 1);
      v14 = (int *)*((_QWORD *)this + 8);
      if (v14)
      {
        v15 = *((int *)this + 14);
        v16 = *v14;
        if ((int)v15 < *v14)
        {
          *((_DWORD *)this + 14) = v15 + 1;
          AlignedAndAddCleanup = *(std::string **)&v14[2 * v15 + 2];
          goto LABEL_32;
        }
        if (v16 == *((_DWORD *)this + 15))
        {
LABEL_25:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v16 + 1);
          v14 = (int *)*((_QWORD *)this + 8);
          v16 = *v14;
        }
        *v14 = v16 + 1;
        v18 = *(google::protobuf::internal::ArenaImpl **)v5;
        if (*(_QWORD *)v5)
        {
          if (*((_QWORD *)v18 + 14))
          AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v18, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
        }
        else
        {
          AlignedAndAddCleanup = (std::string *)operator new();
        }
        AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
        AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
        AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
        v19 = *((_QWORD *)this + 8);
        v20 = *((int *)this + 14);
        *((_DWORD *)this + 14) = v20 + 1;
        *(_QWORD *)(v19 + 8 * v20 + 8) = AlignedAndAddCleanup;
        v13 = (std::string::value_type *)v31;
LABEL_32:
        v12 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v13, (uint64_t)a3);
        v31 = (google::protobuf::internal *)v12;
        if (!v12)
          return 0;
        if (*(_QWORD *)a3 <= (unint64_t)v12 || *v12 != 18)
          continue;
        goto LABEL_20;
      }
      v16 = *((_DWORD *)this + 15);
      goto LABEL_25;
    }
    if (v9 >> 3 == 1 && v9 == 10)
    {
      v21 = (char *)TagFallback - 1;
      while (1)
      {
        v22 = v21 + 1;
        v31 = (google::protobuf::internal *)(v21 + 1);
        v23 = (int *)*((_QWORD *)this + 5);
        if (!v23)
          break;
        v24 = *((int *)this + 8);
        v25 = *v23;
        if ((int)v24 >= *v23)
        {
          if (v25 == *((_DWORD *)this + 9))
          {
LABEL_42:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v25 + 1);
            v23 = (int *)*((_QWORD *)this + 5);
            v25 = *v23;
          }
          *v23 = v25 + 1;
          v27 = *(google::protobuf::internal::ArenaImpl **)v6;
          if (*(_QWORD *)v6)
          {
            if (*((_QWORD *)v27 + 14))
            v26 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v27, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
          }
          else
          {
            v26 = (std::string *)operator new();
          }
          v26->__r_.__value_.__r.__words[0] = 0;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v28 = *((_QWORD *)this + 5);
          v29 = *((int *)this + 8);
          *((_DWORD *)this + 8) = v29 + 1;
          *(_QWORD *)(v28 + 8 * v29 + 8) = v26;
          v22 = (std::string::value_type *)v31;
          goto LABEL_49;
        }
        *((_DWORD *)this + 8) = v24 + 1;
        v26 = *(std::string **)&v23[2 * v24 + 2];
LABEL_49:
        v21 = google::protobuf::internal::InlineGreedyStringParser(v26, v22, (uint64_t)a3);
        v31 = (google::protobuf::internal *)v21;
        if (!v21)
          return 0;
        if (*(_QWORD *)a3 <= (unint64_t)v21 || *v21 != 10)
          goto LABEL_2;
      }
      v25 = *((_DWORD *)this + 9);
      goto LABEL_42;
    }
LABEL_12:
    if ((_DWORD)v9)
      v11 = (v9 & 7) == 4;
    else
      v11 = 1;
    if (v11)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
      return TagFallback;
    }
    v31 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v7, TagFallback, a3);
    if (!v31)
      return 0;
  }
  return v31;
}

unsigned __int8 *siri::dialogengine::CatUpdater::MatchCriteria::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatUpdater::MatchCriteria *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  uint64_t v8;
  int64_t v9;
  const void *v10;
  int v11;
  int j;
  uint64_t v13;
  int64_t v14;
  const void *v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v6 = *((_DWORD *)this + 8);
  if (v6 >= 1)
  {
    for (i = 0; v6 != i; ++i)
    {
      v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v8 + 23) < 0)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9 > 127)
          goto LABEL_13;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0)
          v10 = (const void *)v8;
        else
          v10 = *(const void **)v8;
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v8, a2);
    }
  }
  v11 = *((_DWORD *)this + 14);
  if (v11 >= 1)
  {
    for (j = 0; v11 != j; ++j)
    {
      v13 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, j);
      if (*(char *)(v13 + 23) < 0)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14 > 127)
          goto LABEL_26;
      }
      else
      {
        v14 = *(unsigned __int8 *)(v13 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v14)
      {
        *a2 = 18;
        a2[1] = v14;
        if (*(char *)(v13 + 23) >= 0)
          v15 = (const void *)v13;
        else
          v15 = *(const void **)v13;
        memcpy(a2 + 2, v15, v14);
        a2 += v14 + 2;
        continue;
      }
LABEL_26:
      a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 2, v13, a2);
    }
  }
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) == 0)
    return (unsigned __int8 *)a2;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 23) < 0)
  {
    v20 = *(void **)v18;
    v19 = *(_QWORD *)(v18 + 8);
  }
  else
  {
    LODWORD(v19) = *(unsigned __int8 *)(v18 + 23);
    v20 = (void *)v18;
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 >= (int)v19)
  {
    v21 = (int)v19;
    memcpy(a2, v20, (int)v19);
    a2 += v21;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v20, v19, (unsigned __int8 *)a2);
}

void siri::dialogengine::CatUpdater::MatchCriteria::MergeFrom(siri::dialogengine::CatUpdater::MatchCriteria *this, const siri::dialogengine::CatUpdater::MatchCriteria *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 1447);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
}

void sub_1BFB05708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatUpdater::MatchCriteria *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatUpdater::MatchCriteria *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::MatchCriteria *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::MatchCriteria>);
    siri::dialogengine::CatUpdater::MatchCriteria::MatchCriteria(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::MatchCriteria *)operator new();
    siri::dialogengine::CatUpdater::MatchCriteria::MatchCriteria(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFB057A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C400FAF5ACDLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::MatchCriteria>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

siri::dialogengine::CatUpdater::Filter *siri::dialogengine::CatUpdater::Filter::Filter(siri::dialogengine::CatUpdater::Filter *this)
{
  *(_QWORD *)this = &off_1E7935640;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Filter_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Filter_CatUpdater_2eproto);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_1BFB05878(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatUpdater::Filter::~Filter(siri::dialogengine::CatUpdater::Filter *this)
{
  siri::dialogengine::CatUpdater::Filter::~Filter(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7935640;
  if (this != (siri::dialogengine::CatUpdater::Filter *)&siri::dialogengine::CatUpdater::_Filter_default_instance_)
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 4);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatUpdater::Filter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatUpdater.Filter");
}

siri::dialogengine::CatUpdater::Filter *siri::dialogengine::CatUpdater::Filter::New(siri::dialogengine::CatUpdater::Filter *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Filter>(0);
}

siri::dialogengine::CatUpdater::Filter *siri::dialogengine::CatUpdater::Filter::New(siri::dialogengine::CatUpdater::Filter *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Filter>(a2);
}

void siri::dialogengine::CatUpdater::Filter::Clear(siri::dialogengine::CatUpdater::Filter *this)
{
  int v2;
  siri::dialogengine::CatUpdater::MatchCriteria *v3;
  std::string *v4;
  siri::dialogengine::CatUpdater::MatchCriteria *v5;
  std::string *v6;
  google::protobuf::internal::InternalMetadataWithArenaLite *v7;
  char v8;
  char v9;
  std::string v10[2];

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v3 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((_QWORD *)this + 3);
      if (!v3)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 1567);
        v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: include_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
        v3 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((_QWORD *)this + 3);
      }
      siri::dialogengine::CatUpdater::MatchCriteria::Clear(v3);
    }
    if ((v2 & 2) != 0)
    {
      v5 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((_QWORD *)this + 4);
      if (!v5)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 1571);
        v6 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: exclude_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v6->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
        v5 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((_QWORD *)this + 4);
      }
      siri::dialogengine::CatUpdater::MatchCriteria::Clear(v5);
    }
  }
  v8 = *((_BYTE *)this + 8);
  v7 = (siri::dialogengine::CatUpdater::Filter *)((char *)this + 8);
  *((_DWORD *)v7 + 2) = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v7);
}

void sub_1BFB059B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::Filter::IsInitialized(siri::dialogengine::CatUpdater::Filter *this)
{
  return 1;
}

void siri::dialogengine::CatUpdater::Filter::CheckTypeAndMergeFrom(siri::dialogengine::CatUpdater::Filter *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatUpdater::Filter::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatUpdater::Filter::ByteSizeLong(siri::dialogengine::CatUpdater::Filter *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) == 0)
  {
    v3 = 0;
    goto LABEL_8;
  }
  if ((v2 & 1) != 0)
  {
    v4 = siri::dialogengine::CatUpdater::MatchCriteria::ByteSizeLong(*((siri::dialogengine::CatUpdater::MatchCriteria **)this
                                                                     + 3));
    v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    v5 = siri::dialogengine::CatUpdater::MatchCriteria::ByteSizeLong(*((siri::dialogengine::CatUpdater::MatchCriteria **)this
                                                                     + 4));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  v6 = *((_QWORD *)this + 1);
  if ((v6 & 1) != 0)
  {
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 23) < 0)
      v9 = *(_QWORD *)(v8 + 8);
    else
      v9 = *(unsigned __int8 *)(v8 + 23);
    v3 += v9;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

uint64_t siri::dialogengine::CatUpdater::Filter::GetCachedSize(siri::dialogengine::CatUpdater::Filter *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatUpdater::Filter::_InternalParse(siri::dialogengine::CatUpdater::Filter *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal *TagFallback;
  const char *v7;
  google::protobuf::internal *v10;
  siri::dialogengine::CatUpdater::MatchCriteria *matched;
  google::protobuf::internal *v13;

  v13 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v13, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v13;
    TagFallback = (google::protobuf::internal *)((char *)v13 + 1);
    LODWORD(v7) = *(unsigned __int8 *)v13;
    if ((*(char *)v13 & 0x80000000) == 0)
      goto LABEL_6;
    v7 = (const char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v13 + 2);
LABEL_6:
      v13 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v13, v7);
    v13 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v7 >> 3 == 2)
    {
      if (v7 == 18)
      {
        *((_DWORD *)this + 4) |= 2u;
        matched = (siri::dialogengine::CatUpdater::MatchCriteria *)*((_QWORD *)this + 4);
        if (!matched)
        {
          matched = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(0);
          *((_QWORD *)this + 4) = matched;
          goto LABEL_22;
        }
LABEL_23:
        v10 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatUpdater::MatchCriteria>(a3, matched, TagFallback);
        goto LABEL_24;
      }
    }
    else if (v7 >> 3 == 1 && v7 == 10)
    {
      *((_DWORD *)this + 4) |= 1u;
      matched = (siri::dialogengine::CatUpdater::MatchCriteria *)*((_QWORD *)this + 3);
      if (!matched)
      {
        matched = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(0);
        *((_QWORD *)this + 3) = matched;
LABEL_22:
        TagFallback = v13;
      }
      goto LABEL_23;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      break;
    v10 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, v5, TagFallback, a3);
LABEL_24:
    v13 = v10;
    if (!v10)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v7 - 1;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::CatUpdater::Filter::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatUpdater::Filter *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  siri::dialogengine::CatUpdater::MatchCriteria *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  siri::dialogengine::CatUpdater::MatchCriteria *v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((_QWORD *)this + 3);
    *v4 = 10;
    v8 = *((_DWORD *)v7 + 5);
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v11 = v4 + 2;
        do
        {
          v12 = v11;
          *v11++ = v10 | 0x80;
          v13 = v10 >> 7;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        v9 = v12 + 2;
        *v11 = v13;
      }
      else
      {
        v4[2] = v10;
        v9 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v8;
      v9 = v4 + 2;
    }
    v4 = (char *)siri::dialogengine::CatUpdater::MatchCriteria::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v15 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((_QWORD *)this + 4);
    *v4 = 18;
    v16 = *((_DWORD *)v15 + 5);
    if (v16 > 0x7F)
    {
      v4[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v19 = v4 + 2;
        do
        {
          v20 = v19;
          *v19++ = v18 | 0x80;
          v21 = v18 >> 7;
          v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        v17 = v20 + 2;
        *v19 = v21;
      }
      else
      {
        v4[2] = v18;
        v17 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v16;
      v17 = v4 + 2;
    }
    v4 = (char *)siri::dialogengine::CatUpdater::MatchCriteria::InternalSerializeWithCachedSizesToArray(v15, v17, a3);
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) == 0)
    return (unsigned __int8 *)v4;
  v25 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v25 + 23) < 0)
  {
    v27 = *(void **)v25;
    v26 = *(_QWORD *)(v25 + 8);
  }
  else
  {
    LODWORD(v26) = *(unsigned __int8 *)(v25 + 23);
    v27 = (void *)v25;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v26)
  {
    v28 = (int)v26;
    memcpy(v4, v27, (int)v26);
    v4 += v28;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v27, v26, (unsigned __int8 *)v4);
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatUpdater::MatchCriteria>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::CatUpdater::MatchCriteria *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)siri::dialogengine::CatUpdater::MatchCriteria::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

void siri::dialogengine::CatUpdater::Filter::MergeFrom(siri::dialogengine::CatUpdater::Filter *this, const siri::dialogengine::CatUpdater::Filter *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  siri::dialogengine::CatUpdater::MatchCriteria *matched;
  const siri::dialogengine::CatUpdater::MatchCriteria *v8;
  siri::dialogengine::CatUpdater::MatchCriteria *v9;
  const siri::dialogengine::CatUpdater::MatchCriteria *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 1694);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if ((v6 & 1) != 0)
    {
      *((_DWORD *)this + 4) |= 1u;
      matched = (siri::dialogengine::CatUpdater::MatchCriteria *)*((_QWORD *)this + 3);
      if (!matched)
      {
        matched = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(0);
        *((_QWORD *)this + 3) = matched;
      }
      if (*((_QWORD *)a2 + 3))
        v8 = (const siri::dialogengine::CatUpdater::MatchCriteria *)*((_QWORD *)a2 + 3);
      else
        v8 = (const siri::dialogengine::CatUpdater::MatchCriteria *)&siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_;
      siri::dialogengine::CatUpdater::MatchCriteria::MergeFrom(matched, v8);
    }
    if ((v6 & 2) != 0)
    {
      *((_DWORD *)this + 4) |= 2u;
      v9 = (siri::dialogengine::CatUpdater::MatchCriteria *)*((_QWORD *)this + 4);
      if (!v9)
      {
        v9 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::MatchCriteria>(0);
        *((_QWORD *)this + 4) = v9;
      }
      if (*((_QWORD *)a2 + 4))
        v10 = (const siri::dialogengine::CatUpdater::MatchCriteria *)*((_QWORD *)a2 + 4);
      else
        v10 = (const siri::dialogengine::CatUpdater::MatchCriteria *)&siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_;
      siri::dialogengine::CatUpdater::MatchCriteria::MergeFrom(v9, v10);
    }
  }
}

void sub_1BFB06010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatUpdater::Filter *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Filter>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatUpdater::Filter *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Filter *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Filter>);
    siri::dialogengine::CatUpdater::Filter::Filter(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Filter *)operator new();
    siri::dialogengine::CatUpdater::Filter::Filter(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFB060AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40DFBAE579);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Filter>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Manifest_CatUpdater_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", a4);
  siri::dialogengine::CatUpdater::Manifest::Manifest((siri::dialogengine::CatUpdater::Manifest *)&siri::dialogengine::CatUpdater::_Manifest_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatUpdater::_Manifest_default_instance_, v4);
}

siri::dialogengine::CatUpdater::Manifest *siri::dialogengine::CatUpdater::Manifest::Manifest(siri::dialogengine::CatUpdater::Manifest *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7935490;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Manifest_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Manifest_CatUpdater_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_1BFB06214(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatUpdater::Manifest::~Manifest(siri::dialogengine::CatUpdater::Manifest *this)
{
  siri::dialogengine::CatUpdater::Manifest::~Manifest(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)this = &off_1E7935490;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 9);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::CatUpdater::Manifest *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatUpdater::Manifest::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatUpdater.Manifest");
}

siri::dialogengine::CatUpdater::Manifest *siri::dialogengine::CatUpdater::Manifest::New(siri::dialogengine::CatUpdater::Manifest *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Manifest>(0);
}

siri::dialogengine::CatUpdater::Manifest *siri::dialogengine::CatUpdater::Manifest::New(siri::dialogengine::CatUpdater::Manifest *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Manifest>(a2);
}

void siri::dialogengine::CatUpdater::Manifest::Clear(siri::dialogengine::CatUpdater::Manifest *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  google::protobuf::internal::InternalMetadataWithArenaLite *v7;
  char v8;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>((uint64_t)this + 24);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0xF) != 0)
  {
    if ((v2 & 1) == 0)
    {
      if ((v2 & 2) == 0)
        goto LABEL_4;
LABEL_11:
      v4 = *((_QWORD *)this + 7);
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v2 & 4) != 0)
          goto LABEL_15;
      }
      else
      {
        *(_BYTE *)v4 = 0;
        *(_BYTE *)(v4 + 23) = 0;
        if ((v2 & 4) != 0)
          goto LABEL_15;
      }
LABEL_5:
      if ((v2 & 8) == 0)
        goto LABEL_22;
LABEL_19:
      v6 = *((_QWORD *)this + 9);
      if (*(char *)(v6 + 23) < 0)
      {
        **(_BYTE **)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v6 = 0;
        *(_BYTE *)(v6 + 23) = 0;
      }
      goto LABEL_22;
    }
    v3 = *((_QWORD *)this + 6);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_11;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_11;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_15:
    v5 = *((_QWORD *)this + 8);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) == 0)
        goto LABEL_22;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) == 0)
        goto LABEL_22;
    }
    goto LABEL_19;
  }
LABEL_22:
  if ((v2 & 0x30) != 0)
    *((_QWORD *)this + 10) = 0;
  v8 = *((_BYTE *)this + 8);
  v7 = (siri::dialogengine::CatUpdater::Manifest *)((char *)this + 8);
  *((_DWORD *)v7 + 2) = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v7);
}

uint64_t siri::dialogengine::CatUpdater::Manifest::IsInitialized(siri::dialogengine::CatUpdater::Manifest *this)
{
  return 1;
}

void siri::dialogengine::CatUpdater::Manifest::CheckTypeAndMergeFrom(siri::dialogengine::CatUpdater::Manifest *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatUpdater::Manifest::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatUpdater::Manifest::ByteSizeLong(siri::dialogengine::CatUpdater::Manifest *this)
{
  uint64_t v2;
  uint64_t v3;
  siri::dialogengine::CatUpdater::Asset **v4;
  uint64_t v5;
  siri::dialogengine::CatUpdater::Asset *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (siri::dialogengine::CatUpdater::Asset **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = siri::dialogengine::CatUpdater::Asset::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_DWORD *)this + 4);
  if ((v8 & 0x3F) == 0)
    goto LABEL_34;
  if ((v8 & 1) != 0)
  {
    v14 = *((_QWORD *)this + 6);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v16 = *(_QWORD *)(v14 + 8);
    if ((v15 & 0x80u) == 0)
      v16 = v15;
    v2 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v8 & 2) == 0)
    {
LABEL_12:
      if ((v8 & 4) == 0)
        goto LABEL_13;
LABEL_28:
      v20 = *((_QWORD *)this + 8);
      v21 = *(unsigned __int8 *)(v20 + 23);
      v22 = *(_QWORD *)(v20 + 8);
      if ((v21 & 0x80u) == 0)
        v22 = v21;
      v2 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v8 & 8) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_12;
  }
  v17 = *((_QWORD *)this + 7);
  v18 = *(unsigned __int8 *)(v17 + 23);
  v19 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  v2 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 4) != 0)
    goto LABEL_28;
LABEL_13:
  if ((v8 & 8) != 0)
  {
LABEL_14:
    v9 = *((_QWORD *)this + 9);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_17:
  if ((v8 & 0x10) != 0)
    v2 += 2;
  if ((v8 & 0x20) != 0)
  {
    v12 = *((_DWORD *)this + 21);
    if (v12 < 0)
      v13 = 11;
    else
      v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v2 += v13;
  }
LABEL_34:
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) != 0)
  {
    v25 = v23 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v25 + 23) < 0)
      v26 = *(_QWORD *)(v25 + 8);
    else
      v26 = *(unsigned __int8 *)(v25 + 23);
    v2 += v26;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::CatUpdater::Manifest::GetCachedSize(siri::dialogengine::CatUpdater::Manifest *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatUpdater::Manifest::_InternalParse(siri::dialogengine::CatUpdater::Manifest *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5;
  uint64_t *v6;
  std::string **v7;
  std::string **v8;
  unsigned int *v9;
  google::protobuf::internal *TagFallback;
  const char *v11;
  char *v12;
  google::protobuf::internal *v13;
  int *v14;
  uint64_t v15;
  int v16;
  siri::dialogengine::CatUpdater::Asset *v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  google::protobuf::internal *v21;
  unint64_t v22;
  int v23;
  google::protobuf::internal *v24;
  unint64_t v25;
  int v26;
  std::string **v27;
  google::protobuf::internal *v28;
  BOOL v29;
  google::protobuf::internal *v30;
  uint64_t v31;
  std::string *v32;
  std::string *v33;
  unint64_t v35;
  std::string **v36;
  std::string **v37;
  google::protobuf::internal *v38;

  v5 = 0;
  v37 = (std::string **)((char *)this + 72);
  v38 = a2;
  v36 = (std::string **)((char *)this + 64);
  v6 = (uint64_t *)((char *)this + 8);
  v7 = (std::string **)((char *)this + 56);
  v8 = (std::string **)((char *)this + 48);
  v9 = (unsigned int *)((char *)this + 24);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v38, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v38 + 1);
      LODWORD(v11) = *(unsigned __int8 *)v38;
      if (*(char *)v38 < 0)
      {
        v11 = (const char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v38, v11);
          v38 = TagFallback;
          if (!TagFallback)
            goto LABEL_66;
LABEL_7:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10)
                goto LABEL_52;
              v12 = (char *)TagFallback - 1;
              break;
            case 2u:
              if (v11 != 18)
                goto LABEL_52;
              *((_DWORD *)this + 4) |= 1u;
              v20 = (std::string *)*((_QWORD *)this + 6);
              if (v20 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_49;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v20 = *v8;
              goto LABEL_48;
            case 3u:
              if (v11 != 26)
                goto LABEL_52;
              *((_DWORD *)this + 4) |= 2u;
              v20 = (std::string *)*((_QWORD *)this + 7);
              if (v20 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_49;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v20 = *v7;
              goto LABEL_48;
            case 4u:
              if (v11 != 32)
                goto LABEL_52;
              v5 |= 0x10u;
              v21 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v22 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_33;
              v23 = *(char *)v21;
              v22 = v22 + (v23 << 7) - 128;
              if (v23 < 0)
              {
                v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v22);
                v38 = v30;
                *((_BYTE *)this + 80) = v31 != 0;
                if (!v30)
                  goto LABEL_68;
              }
              else
              {
                v21 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_33:
                v38 = v21;
                *((_BYTE *)this + 80) = v22 != 0;
              }
              continue;
            case 5u:
              if (v11 != 40)
                goto LABEL_52;
              v24 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v25 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_38;
              v26 = *(char *)v24;
              v25 = v25 + (v26 << 7) - 128;
              if (v26 < 0)
              {
                v38 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v25);
                if (!v38)
                  goto LABEL_68;
              }
              else
              {
                v24 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_38:
                v38 = v24;
              }
              if (v25 > 2)
              {
                if ((*v6 & 1) != 0)
                {
                  v32 = (std::string *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  v35 = v25;
                  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v6);
                  v25 = v35;
                  v32 = v33;
                }
                google::protobuf::internal::WriteVarint(5, v25, v32);
              }
              else
              {
                *((_DWORD *)this + 4) |= 0x20u;
                *((_DWORD *)this + 21) = v25;
              }
              continue;
            case 6u:
              if (v11 != 50)
                goto LABEL_52;
              *((_DWORD *)this + 4) |= 4u;
              v20 = (std::string *)*((_QWORD *)this + 8);
              if (v20 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_49;
              v27 = v36;
              goto LABEL_47;
            case 7u:
              if (v11 != 58)
                goto LABEL_52;
              *((_DWORD *)this + 4) |= 8u;
              v20 = (std::string *)*((_QWORD *)this + 9);
              if (v20 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_49;
              v27 = v37;
LABEL_47:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v27, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v20 = *v27;
LABEL_48:
              TagFallback = v38;
LABEL_49:
              v28 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v20, (std::string::value_type *)TagFallback, (uint64_t)a3);
              goto LABEL_50;
            default:
LABEL_52:
              if ((_DWORD)v11)
                v29 = (v11 & 7) == 4;
              else
                v29 = 1;
              if (v29)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
                goto LABEL_66;
              }
              v28 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v11, v6, TagFallback, a3);
LABEL_50:
              v38 = v28;
              if (!v28)
              {
LABEL_68:
                TagFallback = 0;
                goto LABEL_66;
              }
              continue;
          }
          while (1)
          {
            v13 = (google::protobuf::internal *)(v12 + 1);
            v38 = (google::protobuf::internal *)(v12 + 1);
            v14 = (int *)*((_QWORD *)this + 5);
            if (!v14)
              break;
            v15 = *((int *)this + 8);
            v16 = *v14;
            if ((int)v15 >= *v14)
            {
              if (v16 == *((_DWORD *)this + 9))
              {
LABEL_15:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v16 + 1);
                v14 = (int *)*((_QWORD *)this + 5);
                v16 = *v14;
              }
              *v14 = v16 + 1;
              v17 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Asset>(*((google::protobuf::internal::ArenaImpl **)this + 3));
              v18 = *((_QWORD *)this + 5);
              v19 = *((int *)this + 8);
              *((_DWORD *)this + 8) = v19 + 1;
              *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
              v13 = v38;
              goto LABEL_17;
            }
            *((_DWORD *)this + 8) = v15 + 1;
            v17 = *(siri::dialogengine::CatUpdater::Asset **)&v14[2 * v15 + 2];
LABEL_17:
            v12 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatUpdater::Asset>(a3, v17, v13);
            v38 = (google::protobuf::internal *)v12;
            if (!v12)
              goto LABEL_68;
            if (*(_QWORD *)a3 <= (unint64_t)v12 || *v12 != 10)
              goto LABEL_2;
          }
          v16 = *((_DWORD *)this + 9);
          goto LABEL_15;
        }
        TagFallback = (google::protobuf::internal *)((char *)v38 + 2);
      }
      v38 = TagFallback;
      goto LABEL_7;
    }
    break;
  }
  TagFallback = v38;
LABEL_66:
  *((_DWORD *)this + 4) |= v5;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::CatUpdater::Manifest::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatUpdater::Manifest *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  siri::dialogengine::CatUpdater::Asset *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;

  v6 = *((_DWORD *)this + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = (siri::dialogengine::CatUpdater::Asset *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>((uint64_t)this + 24, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v12 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v13 = v12;
            *v12++ = v11 | 0x80;
            v14 = v11 >> 7;
            v15 = v11 >> 14;
            v11 >>= 7;
          }
          while (v15);
          v10 = v13 + 2;
          *v12 = v14;
        }
        else
        {
          a2[2] = v11;
          v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)siri::dialogengine::CatUpdater::Asset::InternalSerializeWithCachedSizesToArray(v8, (char *)v10, a3);
    }
  }
  v16 = *((_DWORD *)this + 4);
  if ((v16 & 1) != 0)
  {
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 6), a2);
    if ((v16 & 2) == 0)
    {
LABEL_15:
      if ((v16 & 0x10) == 0)
        goto LABEL_16;
      goto LABEL_24;
    }
  }
  else if ((v16 & 2) == 0)
  {
    goto LABEL_15;
  }
  a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 7), a2);
  if ((v16 & 0x10) == 0)
  {
LABEL_16:
    if ((v16 & 0x20) == 0)
      goto LABEL_17;
LABEL_27:
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v20 = *((int *)this + 21);
    *a2 = 40;
    if (v20 > 0x7F)
    {
      a2[1] = v20 | 0x80;
      v21 = v20 >> 7;
      if (v20 >> 14)
      {
        v22 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v23 = v22;
          *v22++ = v21 | 0x80;
          v24 = v21 >> 7;
          v25 = v21 >> 14;
          v21 >>= 7;
        }
        while (v25);
        a2 = (char *)(v23 + 2);
        *v22 = v24;
        if ((v16 & 4) != 0)
          goto LABEL_38;
      }
      else
      {
        a2[2] = v21;
        a2 += 3;
        if ((v16 & 4) != 0)
          goto LABEL_38;
      }
    }
    else
    {
      a2[1] = v20;
      a2 += 2;
      if ((v16 & 4) != 0)
        goto LABEL_38;
    }
LABEL_18:
    if ((v16 & 8) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_24:
  if ((unint64_t)a2 >= *(_QWORD *)a3)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v19 = *((_BYTE *)this + 80);
  *a2 = 32;
  a2[1] = v19;
  a2 += 2;
  if ((v16 & 0x20) != 0)
    goto LABEL_27;
LABEL_17:
  if ((v16 & 4) == 0)
    goto LABEL_18;
LABEL_38:
  a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 8), a2);
  if ((v16 & 8) != 0)
LABEL_19:
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 9), a2);
LABEL_20:
  v17 = *((_QWORD *)this + 1);
  if ((v17 & 1) == 0)
    return (unsigned __int8 *)a2;
  v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v26 + 23) < 0)
  {
    v28 = *(void **)v26;
    v27 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    LODWORD(v27) = *(unsigned __int8 *)(v26 + 23);
    v28 = (void *)v26;
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 >= (int)v27)
  {
    v29 = (int)v27;
    memcpy(a2, v28, (int)v27);
    a2 += v29;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v28, v27, (unsigned __int8 *)a2);
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatUpdater::Asset>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::CatUpdater::Asset *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)siri::dialogengine::CatUpdater::Asset::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

void siri::dialogengine::CatUpdater::Manifest::MergeFrom(siri::dialogengine::CatUpdater::Manifest *this, const siri::dialogengine::CatUpdater::Manifest *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 910);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x3F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 7);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 7);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 8);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 8);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v12);
                if ((v6 & 8) != 0)
                {
LABEL_22:
                  v13 = (std::string *)*((_QWORD *)this + 9);
                  *((_DWORD *)this + 4) |= 8u;
                  v14 = (const std::string *)*((_QWORD *)a2 + 9);
                  if (v13 != v14)
                  {
                    if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v14);
                    else
                      std::string::operator=(v13, v14);
                  }
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
                if ((v6 & 0x20) != 0)
                  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
                *((_DWORD *)this + 4) |= v6;
                return;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) != 0)
            goto LABEL_22;
          goto LABEL_28;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_1BFB06F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  siri::dialogengine::CatUpdater::Asset **v13;
  siri::dialogengine::CatUpdater::Asset **v14;
  siri::dialogengine::CatUpdater::Asset *v15;
  siri::dialogengine::CatUpdater::Asset *v16;
  siri::dialogengine::CatUpdater::Asset *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::CatUpdater::Asset **v21;
  siri::dialogengine::CatUpdater::Asset **v22;
  siri::dialogengine::CatUpdater::Asset *v23;
  siri::dialogengine::CatUpdater::Asset *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (siri::dialogengine::CatUpdater::Asset **)(v6 + 8);
      v14 = (siri::dialogengine::CatUpdater::Asset **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatUpdater::Asset>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::CatUpdater::Asset **)((char *)v8 + v20);
      v22 = (siri::dialogengine::CatUpdater::Asset **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Asset>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatUpdater::Asset>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFB070D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatUpdater::Asset>::Merge(siri::dialogengine::CatUpdater::Asset *a1, siri::dialogengine::CatUpdater::Asset *this)
{
  siri::dialogengine::CatUpdater::Asset::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  siri::dialogengine::CatUpdater::Asset **v3;
  siri::dialogengine::CatUpdater::Asset *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (siri::dialogengine::CatUpdater::Asset **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      siri::dialogengine::CatUpdater::Asset::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BFB07194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatUpdater::Manifest *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Manifest>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatUpdater::Manifest *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Manifest *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Manifest>);
    siri::dialogengine::CatUpdater::Manifest::Manifest(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Manifest *)operator new();
    siri::dialogengine::CatUpdater::Manifest::Manifest(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFB07230(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4081786C5ELL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Manifest>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Publication_CatUpdater_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", a4);
  siri::dialogengine::CatUpdater::Publication::Publication((siri::dialogengine::CatUpdater::Publication *)&siri::dialogengine::CatUpdater::_Publication_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatUpdater::_Publication_default_instance_, v4);
}

siri::dialogengine::CatUpdater::Publication *siri::dialogengine::CatUpdater::Publication::Publication(siri::dialogengine::CatUpdater::Publication *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7935520;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Publication_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Publication_CatUpdater_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_BYTE *)this + 64) = 0;
  return this;
}

void sub_1BFB07454(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatUpdater::Publication::~Publication(siri::dialogengine::CatUpdater::Publication *this)
{
  siri::dialogengine::CatUpdater::Publication::~Publication(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7935520;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::CatUpdater::Publication *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatUpdater::Publication::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatUpdater.Publication");
}

siri::dialogengine::CatUpdater::Publication *siri::dialogengine::CatUpdater::Publication::New(siri::dialogengine::CatUpdater::Publication *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Publication>(0);
}

siri::dialogengine::CatUpdater::Publication *siri::dialogengine::CatUpdater::Publication::New(siri::dialogengine::CatUpdater::Publication *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Publication>(a2);
}

void siri::dialogengine::CatUpdater::Publication::Clear(siri::dialogengine::CatUpdater::Publication *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>((uint64_t)this + 24);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) == 0)
    goto LABEL_11;
  if ((v2 & 1) == 0)
  {
LABEL_5:
    if ((v2 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = *((_QWORD *)this + 6);
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  if ((v2 & 2) != 0)
  {
LABEL_6:
    v4 = *((_QWORD *)this + 7);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
LABEL_11:
  v6 = *((_BYTE *)this + 8);
  v5 = (char *)this + 8;
  v5[56] = 0;
  *((_DWORD *)v5 + 2) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v5);
}

uint64_t siri::dialogengine::CatUpdater::Publication::IsInitialized(siri::dialogengine::CatUpdater::Publication *this)
{
  return 1;
}

void siri::dialogengine::CatUpdater::Publication::CheckTypeAndMergeFrom(siri::dialogengine::CatUpdater::Publication *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatUpdater::Publication::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatUpdater::Publication::ByteSizeLong(siri::dialogengine::CatUpdater::Publication *this)
{
  uint64_t v2;
  uint64_t v3;
  siri::dialogengine::CatUpdater::Asset **v4;
  uint64_t v5;
  siri::dialogengine::CatUpdater::Asset *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (siri::dialogengine::CatUpdater::Asset **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = siri::dialogengine::CatUpdater::Asset::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_DWORD *)this + 4);
  if ((v8 & 7) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v9 = *((_QWORD *)this + 6);
      v10 = *(unsigned __int8 *)(v9 + 23);
      v11 = *(_QWORD *)(v9 + 8);
      if ((v10 & 0x80u) == 0)
        v11 = v10;
      v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v8 & 2) != 0)
    {
      v12 = *((_QWORD *)this + 7);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v14 = *(_QWORD *)(v12 + 8);
      if ((v13 & 0x80u) == 0)
        v14 = v13;
      v2 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v8 & 4) != 0)
      v2 += 2;
  }
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) != 0)
  {
    v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 23) < 0)
      v18 = *(_QWORD *)(v17 + 8);
    else
      v18 = *(unsigned __int8 *)(v17 + 23);
    v2 += v18;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::CatUpdater::Publication::GetCachedSize(siri::dialogengine::CatUpdater::Publication *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatUpdater::Publication::_InternalParse(siri::dialogengine::CatUpdater::Publication *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5;
  std::string **v6;
  std::string **v7;
  unsigned int *v8;
  uint64_t *v9;
  google::protobuf::internal *TagFallback;
  const char *v11;
  char *v12;
  google::protobuf::internal *v13;
  int *v14;
  uint64_t v15;
  int v16;
  siri::dialogengine::CatUpdater::Asset *v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  google::protobuf::internal *v21;
  unint64_t v22;
  int v23;
  google::protobuf::internal *v24;
  BOOL v25;
  google::protobuf::internal *v26;
  uint64_t v27;
  google::protobuf::internal *v29;

  v5 = 0;
  v29 = a2;
  v6 = (std::string **)((char *)this + 56);
  v7 = (std::string **)((char *)this + 48);
  v8 = (unsigned int *)((char *)this + 24);
  v9 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v29 + 1);
      LODWORD(v11) = *(unsigned __int8 *)v29;
      if (*(char *)v29 < 0)
      {
        v11 = (const char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, v11);
          v29 = TagFallback;
          if (!TagFallback)
            goto LABEL_46;
LABEL_7:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10)
                goto LABEL_34;
              v12 = (char *)TagFallback - 1;
              break;
            case 2u:
              if (v11 != 18)
                goto LABEL_34;
              *((_DWORD *)this + 4) |= 1u;
              v20 = (std::string *)*((_QWORD *)this + 6);
              if (v20 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_33;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v20 = *v7;
              goto LABEL_32;
            case 3u:
              if (v11 != 24)
                goto LABEL_34;
              v21 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v22 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_28;
              v23 = *(char *)v21;
              v22 = v22 + (v23 << 7) - 128;
              if (v23 < 0)
              {
                v26 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v22);
                v29 = v26;
                *((_BYTE *)this + 64) = v27 != 0;
                v5 = 4;
                if (!v26)
                  goto LABEL_44;
              }
              else
              {
                v21 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_28:
                v29 = v21;
                *((_BYTE *)this + 64) = v22 != 0;
                v5 = 4;
              }
              continue;
            case 4u:
              if (v11 != 34)
                goto LABEL_34;
              *((_DWORD *)this + 4) |= 2u;
              v20 = (std::string *)*((_QWORD *)this + 7);
              if (v20 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_33;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v20 = *v6;
LABEL_32:
              TagFallback = v29;
LABEL_33:
              v24 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v20, (std::string::value_type *)TagFallback, (uint64_t)a3);
              goto LABEL_39;
            default:
LABEL_34:
              if ((_DWORD)v11)
                v25 = (v11 & 7) == 4;
              else
                v25 = 1;
              if (v25)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
                goto LABEL_46;
              }
              v24 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v11, v9, TagFallback, a3);
LABEL_39:
              v29 = v24;
              if (v24)
                continue;
LABEL_44:
              TagFallback = 0;
              goto LABEL_46;
          }
          while (1)
          {
            v13 = (google::protobuf::internal *)(v12 + 1);
            v29 = (google::protobuf::internal *)(v12 + 1);
            v14 = (int *)*((_QWORD *)this + 5);
            if (!v14)
              break;
            v15 = *((int *)this + 8);
            v16 = *v14;
            if ((int)v15 >= *v14)
            {
              if (v16 == *((_DWORD *)this + 9))
              {
LABEL_15:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v16 + 1);
                v14 = (int *)*((_QWORD *)this + 5);
                v16 = *v14;
              }
              *v14 = v16 + 1;
              v17 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Asset>(*((google::protobuf::internal::ArenaImpl **)this + 3));
              v18 = *((_QWORD *)this + 5);
              v19 = *((int *)this + 8);
              *((_DWORD *)this + 8) = v19 + 1;
              *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
              v13 = v29;
              goto LABEL_17;
            }
            *((_DWORD *)this + 8) = v15 + 1;
            v17 = *(siri::dialogengine::CatUpdater::Asset **)&v14[2 * v15 + 2];
LABEL_17:
            v12 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatUpdater::Asset>(a3, v17, v13);
            v29 = (google::protobuf::internal *)v12;
            if (!v12)
              goto LABEL_44;
            if (*(_QWORD *)a3 <= (unint64_t)v12 || *v12 != 10)
              goto LABEL_2;
          }
          v16 = *((_DWORD *)this + 9);
          goto LABEL_15;
        }
        TagFallback = (google::protobuf::internal *)((char *)v29 + 2);
      }
      v29 = TagFallback;
      goto LABEL_7;
    }
    break;
  }
  TagFallback = v29;
LABEL_46:
  *((_DWORD *)this + 4) |= v5;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::CatUpdater::Publication::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatUpdater::Publication *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  siri::dialogengine::CatUpdater::Asset *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v6 = *((_DWORD *)this + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = (siri::dialogengine::CatUpdater::Asset *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>((uint64_t)this + 24, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v12 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v13 = v12;
            *v12++ = v11 | 0x80;
            v14 = v11 >> 7;
            v15 = v11 >> 14;
            v11 >>= 7;
          }
          while (v15);
          v10 = v13 + 2;
          *v12 = v14;
        }
        else
        {
          a2[2] = v11;
          v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)siri::dialogengine::CatUpdater::Asset::InternalSerializeWithCachedSizesToArray(v8, (char *)v10, a3);
    }
  }
  v16 = *((_DWORD *)this + 4);
  if ((v16 & 1) != 0)
  {
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 6), a2);
    if ((v16 & 4) == 0)
    {
LABEL_15:
      if ((v16 & 2) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((v16 & 4) == 0)
  {
    goto LABEL_15;
  }
  if ((unint64_t)a2 >= *(_QWORD *)a3)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v19 = *((_BYTE *)this + 64);
  *a2 = 24;
  a2[1] = v19;
  a2 += 2;
  if ((v16 & 2) != 0)
LABEL_16:
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 7), a2);
LABEL_17:
  v17 = *((_QWORD *)this + 1);
  if ((v17 & 1) == 0)
    return (unsigned __int8 *)a2;
  v20 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 23) < 0)
  {
    v22 = *(void **)v20;
    v21 = *(_QWORD *)(v20 + 8);
  }
  else
  {
    LODWORD(v21) = *(unsigned __int8 *)(v20 + 23);
    v22 = (void *)v20;
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 >= (int)v21)
  {
    v23 = (int)v21;
    memcpy(a2, v22, (int)v21);
    a2 += v23;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v22, v21, (unsigned __int8 *)a2);
}

void siri::dialogengine::CatUpdater::Publication::MergeFrom(siri::dialogengine::CatUpdater::Publication *this, const siri::dialogengine::CatUpdater::Publication *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 1222);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 7) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
          if ((v6 & 2) != 0)
          {
LABEL_11:
            v9 = (std::string *)*((_QWORD *)this + 7);
            *((_DWORD *)this + 4) |= 2u;
            v10 = (const std::string *)*((_QWORD *)a2 + 7);
            if (v9 != v10)
            {
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
              else
                std::string::operator=(v9, v10);
            }
          }
LABEL_17:
          if ((v6 & 4) != 0)
            *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
          *((_DWORD *)this + 4) |= v6;
          return;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
      goto LABEL_11;
    goto LABEL_17;
  }
}

void sub_1BFB07D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatUpdater::Publication *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Publication>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatUpdater::Publication *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Publication *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Publication>);
    siri::dialogengine::CatUpdater::Publication::Publication(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::Publication *)operator new();
    siri::dialogengine::CatUpdater::Publication::Publication(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFB07DD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40DD7A93C2);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::Publication>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_State_CatUpdater_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", a4);
  siri::dialogengine::CatUpdater::State::State((siri::dialogengine::CatUpdater::State *)&siri::dialogengine::CatUpdater::_State_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatUpdater::_State_default_instance_, v4);
  qword_1EF584278 = (uint64_t)&siri::dialogengine::CatUpdater::_Filter_default_instance_;
}

siri::dialogengine::CatUpdater::State *siri::dialogengine::CatUpdater::State::State(siri::dialogengine::CatUpdater::State *this)
{
  *(_QWORD *)this = &off_1E79356D0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_State_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_State_CatUpdater_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 0;
  return this;
}

void sub_1BFB07F94(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatUpdater::State::~State(siri::dialogengine::CatUpdater::State *this)
{
  siri::dialogengine::CatUpdater::State::~State(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E79356D0;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 6);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 7);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x1C3B8D890](v10, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)this + 8);
  if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x1C3B8D890](v11, 0x1012C40EC159624);
  }
  v12 = *((_QWORD *)this + 9);
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    MEMORY[0x1C3B8D890](v12, 0x1012C40EC159624);
  }
  if (this != (siri::dialogengine::CatUpdater::State *)&siri::dialogengine::CatUpdater::_State_default_instance_)
  {
    v13 = *((_QWORD *)this + 10);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatUpdater::State::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatUpdater.State");
}

siri::dialogengine::CatUpdater::State *siri::dialogengine::CatUpdater::State::New(siri::dialogengine::CatUpdater::State *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::State>(0);
}

siri::dialogengine::CatUpdater::State *siri::dialogengine::CatUpdater::State::New(siri::dialogengine::CatUpdater::State *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::State>(a2);
}

void siri::dialogengine::CatUpdater::State::Clear(siri::dialogengine::CatUpdater::State *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  siri::dialogengine::CatUpdater::Filter *v10;
  std::string *v11;
  char *v12;
  char v13;
  char v14;
  std::string v15[2];

  v2 = *((_BYTE *)this + 16);
  if (!v2)
    goto LABEL_42;
  if ((*((_BYTE *)this + 16) & 1) == 0)
  {
    if ((*((_BYTE *)this + 16) & 2) == 0)
      goto LABEL_4;
LABEL_15:
    v4 = *((_QWORD *)this + 4);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_19;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_19;
    }
LABEL_5:
    if ((v2 & 8) == 0)
      goto LABEL_6;
LABEL_23:
    v6 = *((_QWORD *)this + 6);
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v2 & 0x10) != 0)
        goto LABEL_27;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
      if ((v2 & 0x10) != 0)
        goto LABEL_27;
    }
LABEL_7:
    if ((v2 & 0x20) == 0)
      goto LABEL_8;
LABEL_31:
    v8 = *((_QWORD *)this + 8);
    if (*(char *)(v8 + 23) < 0)
    {
      **(_BYTE **)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      if ((v2 & 0x40) != 0)
        goto LABEL_35;
    }
    else
    {
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 23) = 0;
      if ((v2 & 0x40) != 0)
        goto LABEL_35;
    }
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_42;
    goto LABEL_39;
  }
  v3 = *((_QWORD *)this + 3);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_15;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_15;
  }
LABEL_4:
  if ((v2 & 4) == 0)
    goto LABEL_5;
LABEL_19:
  v5 = *((_QWORD *)this + 5);
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v2 & 8) != 0)
      goto LABEL_23;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v2 & 8) != 0)
      goto LABEL_23;
  }
LABEL_6:
  if ((v2 & 0x10) == 0)
    goto LABEL_7;
LABEL_27:
  v7 = *((_QWORD *)this + 7);
  if (*(char *)(v7 + 23) < 0)
  {
    **(_BYTE **)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_31;
  }
  else
  {
    *(_BYTE *)v7 = 0;
    *(_BYTE *)(v7 + 23) = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_31;
  }
LABEL_8:
  if ((v2 & 0x40) == 0)
    goto LABEL_9;
LABEL_35:
  v9 = *((_QWORD *)this + 9);
  if (*(char *)(v9 + 23) < 0)
  {
    **(_BYTE **)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    if ((v2 & 0x80) == 0)
      goto LABEL_42;
  }
  else
  {
    *(_BYTE *)v9 = 0;
    *(_BYTE *)(v9 + 23) = 0;
    if ((v2 & 0x80) == 0)
      goto LABEL_42;
  }
LABEL_39:
  v10 = (siri::dialogengine::CatUpdater::Filter *)*((_QWORD *)this + 10);
  if (!v10)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 1893);
    v11 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: filter_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    v10 = (siri::dialogengine::CatUpdater::Filter *)*((_QWORD *)this + 10);
  }
  siri::dialogengine::CatUpdater::Filter::Clear(v10);
LABEL_42:
  v13 = *((_BYTE *)this + 8);
  v12 = (char *)this + 8;
  v12[80] = 0;
  *((_DWORD *)v12 + 2) = 0;
  if ((v13 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v12);
}

void sub_1BFB081D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::State::IsInitialized(siri::dialogengine::CatUpdater::State *this)
{
  return 1;
}

void siri::dialogengine::CatUpdater::State::CheckTypeAndMergeFrom(siri::dialogengine::CatUpdater::State *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatUpdater::State::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatUpdater::State::ByteSizeLong(siri::dialogengine::CatUpdater::State *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v2 = *((_DWORD *)this + 4);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_19;
  }
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v4 = *((_QWORD *)this + 3);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v6 = v5;
  v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0)
  {
LABEL_9:
    v7 = *((_QWORD *)this + 4);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v9 = v8;
    v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v2 & 4) != 0)
  {
    v13 = *((_QWORD *)this + 5);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v15 = *(_QWORD *)(v13 + 8);
    if ((v14 & 0x80u) == 0)
      v15 = v14;
    v3 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_14:
      if ((v2 & 0x10) == 0)
        goto LABEL_15;
      goto LABEL_30;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_14;
  }
  v16 = *((_QWORD *)this + 6);
  v17 = *(unsigned __int8 *)(v16 + 23);
  v18 = *(_QWORD *)(v16 + 8);
  if ((v17 & 0x80u) == 0)
    v18 = v17;
  v3 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_30:
  v19 = *((_QWORD *)this + 7);
  v20 = *(unsigned __int8 *)(v19 + 23);
  v21 = *(_QWORD *)(v19 + 8);
  if ((v20 & 0x80u) == 0)
    v21 = v20;
  v3 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_33:
  v22 = *((_QWORD *)this + 8);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v24 = v23;
  v3 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_36:
  v25 = *((_QWORD *)this + 9);
  v26 = *(unsigned __int8 *)(v25 + 23);
  v27 = *(_QWORD *)(v25 + 8);
  if ((v26 & 0x80u) == 0)
    v27 = v26;
  v3 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x80) != 0)
  {
LABEL_18:
    v10 = siri::dialogengine::CatUpdater::Filter::ByteSizeLong(*((siri::dialogengine::CatUpdater::Filter **)this + 10));
    v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_19:
  if ((v2 & 0x100) != 0)
    result = v3 + 2;
  else
    result = v3;
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v28 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v28 + 23) < 0)
      v29 = *(_QWORD *)(v28 + 8);
    else
      v29 = *(unsigned __int8 *)(v28 + 23);
    result += v29;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

uint64_t siri::dialogengine::CatUpdater::State::GetCachedSize(siri::dialogengine::CatUpdater::State *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatUpdater::State::_InternalParse(siri::dialogengine::CatUpdater::State *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal *TagFallback;
  const char *v9;
  std::string *v10;
  std::string **v11;
  google::protobuf::internal *v12;
  unint64_t v13;
  int v14;
  siri::dialogengine::CatUpdater::Filter *v15;
  unsigned int v16;
  char *v17;
  google::protobuf::internal *v18;
  BOOL v19;
  char *SizeFallback;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  google::protobuf::internal *v26;
  int v27;
  google::protobuf::internal *v28;
  uint64_t v29;
  std::string **v31;
  std::string **v32;
  std::string **v33;
  std::string **v34;
  std::string **v35;
  std::string **v36;
  google::protobuf::internal *v37;

  v5 = 0;
  v36 = (std::string **)((char *)this + 72);
  v37 = a2;
  v34 = (std::string **)((char *)this + 56);
  v35 = (std::string **)((char *)this + 64);
  v32 = (std::string **)((char *)this + 40);
  v33 = (std::string **)((char *)this + 48);
  v31 = (std::string **)((char *)this + 32);
  v6 = (std::string **)((char *)this + 24);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v37, *((_DWORD *)a3 + 23)) & 1) != 0)
    {
      TagFallback = v37;
      break;
    }
    TagFallback = (google::protobuf::internal *)((char *)v37 + 1);
    LODWORD(v9) = *(unsigned __int8 *)v37;
    if ((*(char *)v37 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (const char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v37 + 2);
LABEL_6:
      v37 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v37, v9);
    v37 = TagFallback;
    if (!TagFallback)
      break;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_46;
        *((_DWORD *)this + 4) |= 1u;
        v10 = (std::string *)*((_QWORD *)this + 3);
        if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_43;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v10 = *v6;
        goto LABEL_42;
      case 2u:
        if (v9 != 18)
          goto LABEL_46;
        *((_DWORD *)this + 4) |= 2u;
        v10 = (std::string *)*((_QWORD *)this + 4);
        if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_43;
        v11 = v31;
        goto LABEL_41;
      case 3u:
        if (v9 != 26)
          goto LABEL_46;
        *((_DWORD *)this + 4) |= 4u;
        v10 = (std::string *)*((_QWORD *)this + 5);
        if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_43;
        v11 = v32;
        goto LABEL_41;
      case 4u:
        if (v9 != 32)
          goto LABEL_46;
        v5 |= 0x100u;
        v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v13 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_23;
        v14 = *(char *)v12;
        v13 = v13 + (v14 << 7) - 128;
        if (v14 < 0)
        {
          v28 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
          v37 = v28;
          *((_BYTE *)this + 88) = v29 != 0;
          if (!v28)
            goto LABEL_58;
        }
        else
        {
          v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_23:
          v37 = v12;
          *((_BYTE *)this + 88) = v13 != 0;
        }
        continue;
      case 5u:
        if (v9 != 42)
          goto LABEL_46;
        *((_DWORD *)this + 4) |= 8u;
        v10 = (std::string *)*((_QWORD *)this + 6);
        if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_43;
        v11 = v33;
        goto LABEL_41;
      case 6u:
        if (v9 != 50)
          goto LABEL_46;
        *((_DWORD *)this + 4) |= 0x10u;
        v10 = (std::string *)*((_QWORD *)this + 7);
        if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_43;
        v11 = v34;
        goto LABEL_41;
      case 7u:
        if (v9 != 58)
          goto LABEL_46;
        *((_DWORD *)this + 4) |= 0x20u;
        v10 = (std::string *)*((_QWORD *)this + 8);
        if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_43;
        v11 = v35;
        goto LABEL_41;
      case 8u:
        if (v9 != 66)
          goto LABEL_46;
        *((_DWORD *)this + 4) |= 0x80u;
        v15 = (siri::dialogengine::CatUpdater::Filter *)*((_QWORD *)this + 10);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Filter>(0);
          *((_QWORD *)this + 10) = v15;
          TagFallback = v37;
        }
        v16 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            goto LABEL_58;
          v17 = SizeFallback;
          v16 = v21;
        }
        else
        {
          v17 = (char *)TagFallback + 1;
        }
        v22 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v17, v16);
        v23 = *((_DWORD *)a3 + 22);
        v24 = __OFSUB__(v23--, 1);
        *((_DWORD *)a3 + 22) = v23;
        if (v23 < 0 != v24)
          goto LABEL_58;
        v25 = v22;
        v26 = siri::dialogengine::CatUpdater::Filter::_InternalParse(v15, (google::protobuf::internal *)v17, a3);
        if (!v26)
          goto LABEL_58;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          goto LABEL_58;
        v27 = *((_DWORD *)a3 + 7) + v25;
        *((_DWORD *)a3 + 7) = v27;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v27 & (v27 >> 31));
        v37 = v26;
        continue;
      case 9u:
        if (v9 != 74)
          goto LABEL_46;
        *((_DWORD *)this + 4) |= 0x40u;
        v10 = (std::string *)*((_QWORD *)this + 9);
        if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_43;
        v11 = v36;
LABEL_41:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v10 = *v11;
LABEL_42:
        TagFallback = v37;
LABEL_43:
        v18 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v10, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_44;
      default:
LABEL_46:
        if ((_DWORD)v9)
          v19 = (v9 & 7) == 4;
        else
          v19 = 1;
        if (v19)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          goto LABEL_60;
        }
        v18 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v7, TagFallback, a3);
LABEL_44:
        v37 = v18;
        if (v18)
          continue;
LABEL_58:
        TagFallback = 0;
        break;
    }
    break;
  }
LABEL_60:
  *((_DWORD *)this + 4) |= v5;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::CatUpdater::State::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatUpdater::State *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  char v9;
  siri::dialogengine::CatUpdater::Filter *v10;
  unsigned int v11;
  char *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 5), v4);
  if ((v6 & 0x100) == 0)
  {
LABEL_5:
    if ((v6 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_16:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v9 = *((_BYTE *)this + 88);
  *v4 = 32;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 8) == 0)
  {
LABEL_6:
    if ((v6 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 6), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_7:
    if ((v6 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 7), v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 8), v4);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_22:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v10 = (siri::dialogengine::CatUpdater::Filter *)*((_QWORD *)this + 10);
  *v4 = 66;
  v11 = *((_DWORD *)v10 + 5);
  if (v11 > 0x7F)
  {
    v4[1] = v11 | 0x80;
    v13 = v11 >> 7;
    if (v11 >> 14)
    {
      v14 = v4 + 2;
      do
      {
        v15 = v14;
        *v14++ = v13 | 0x80;
        v16 = v13 >> 7;
        v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
      v12 = v15 + 2;
      *v14 = v16;
    }
    else
    {
      v4[2] = v13;
      v12 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v11;
    v12 = v4 + 2;
  }
  v4 = (char *)siri::dialogengine::CatUpdater::Filter::InternalSerializeWithCachedSizesToArray(v10, v12, a3);
  if ((v6 & 0x40) != 0)
LABEL_10:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 9), v4);
LABEL_11:
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return (unsigned __int8 *)v4;
  v18 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 23) < 0)
  {
    v20 = *(void **)v18;
    v19 = *(_QWORD *)(v18 + 8);
  }
  else
  {
    LODWORD(v19) = *(unsigned __int8 *)(v18 + 23);
    v20 = (void *)v18;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v19)
  {
    v21 = (int)v19;
    memcpy(v4, v20, (int)v19);
    v4 += v21;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v20, v19, (unsigned __int8 *)v4);
}

void siri::dialogengine::CatUpdater::State::MergeFrom(siri::dialogengine::CatUpdater::State *this, const siri::dialogengine::CatUpdater::State *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  const std::string *v20;
  siri::dialogengine::CatUpdater::Filter *v21;
  const siri::dialogengine::CatUpdater::Filter *v22;
  char v23;
  char v24;
  std::string v25[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.cc", 2154);
    v4 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 4);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 4);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 5);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 5);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 6);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 6);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 7);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 7);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v16);
                      if ((v6 & 0x20) == 0)
                        goto LABEL_39;
LABEL_33:
                      v17 = (std::string *)*((_QWORD *)this + 8);
                      *((_DWORD *)this + 4) |= 0x20u;
                      v18 = (const std::string *)*((_QWORD *)a2 + 8);
                      if (v17 != v18)
                      {
                        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v18);
                        else
                          std::string::operator=(v17, v18);
                      }
LABEL_39:
                      if ((v6 & 0x40) != 0)
                      {
                        v19 = (std::string *)*((_QWORD *)this + 9);
                        *((_DWORD *)this + 4) |= 0x40u;
                        v20 = (const std::string *)*((_QWORD *)a2 + 9);
                        if (v19 != v20)
                        {
                          if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          {
                            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v20);
                            if ((v6 & 0x80) == 0)
                              goto LABEL_50;
                            goto LABEL_44;
                          }
                          std::string::operator=(v19, v20);
                        }
                      }
                      if ((v6 & 0x80) == 0)
                        goto LABEL_50;
LABEL_44:
                      *((_DWORD *)this + 4) |= 0x80u;
                      v21 = (siri::dialogengine::CatUpdater::Filter *)*((_QWORD *)this + 10);
                      if (!v21)
                      {
                        v21 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::Filter>(0);
                        *((_QWORD *)this + 10) = v21;
                      }
                      if (*((_QWORD *)a2 + 10))
                        v22 = (const siri::dialogengine::CatUpdater::Filter *)*((_QWORD *)a2 + 10);
                      else
                        v22 = (const siri::dialogengine::CatUpdater::Filter *)&siri::dialogengine::CatUpdater::_Filter_default_instance_;
                      siri::dialogengine::CatUpdater::Filter::MergeFrom(v21, v22);
                      goto LABEL_50;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) == 0)
                  goto LABEL_39;
                goto LABEL_33;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
LABEL_50:
  if ((v6 & 0x100) != 0)
  {
    v23 = *((_BYTE *)a2 + 88);
    *((_DWORD *)this + 4) |= 0x100u;
    *((_BYTE *)this + 88) = v23;
  }
}

void sub_1BFB08E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatUpdater::State *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatUpdater::State>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatUpdater::State *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::State *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x60uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::State>);
    siri::dialogengine::CatUpdater::State::State(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatUpdater::State *)operator new();
    siri::dialogengine::CatUpdater::State::State(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFB08E9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40493B3CACLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatUpdater::State>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

BOOL siri::dialogengine::CatUpdater::Asset_DownloadType_IsValid(siri::dialogengine::CatUpdater *this)
{
  return this < 3;
}

uint64_t *siri::dialogengine::CatUpdater::Asset_DownloadType_Name(int a1)
{
  unsigned __int8 v2;
  google::protobuf::internal *v3;

  if ((v2 & 1) == 0
  {
    siri::dialogengine::CatUpdater::Asset_DownloadType_Name(siri::dialogengine::CatUpdater::Asset_DownloadType)::dummy = google::protobuf::internal::InitializeEnumStrings((uint64_t)&siri::dialogengine::CatUpdater::Asset_DownloadType_entries, siri::dialogengine::CatUpdater::Asset_DownloadType_entries_by_number, (char *)3, (void (*)(const void *))&siri::dialogengine::CatUpdater::Asset_DownloadType_strings);
  }
  v3 = (google::protobuf::internal *)google::protobuf::internal::LookUpEnumName((uint64_t)&siri::dialogengine::CatUpdater::Asset_DownloadType_entries, siri::dialogengine::CatUpdater::Asset_DownloadType_entries_by_number, 3uLL, a1);
  if ((_DWORD)v3 != -1)
    return (uint64_t *)((char *)&siri::dialogengine::CatUpdater::Asset_DownloadType_strings + 24 * (int)v3);
  google::protobuf::internal::InitProtobufDefaults(v3);
  return &google::protobuf::internal::fixed_address_empty_string;
}

void sub_1BFB09180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::Asset_DownloadType_Parse(uint64_t *a1, _DWORD *a2, const char *a3)
{
  uint64_t result;
  void *v5[2];
  int v6;

  v6 = 0;
  google::protobuf::StringPiece::StringPiece<std::allocator<char>>(v5, a1, a3);
  result = google::protobuf::internal::LookUpEnumValue((uint64_t)&siri::dialogengine::CatUpdater::Asset_DownloadType_entries, 3uLL, v5[0], (int64_t)v5[1], &v6);
  if ((_DWORD)result)
    *a2 = v6;
  return result;
}

siri::dialogengine::CatUpdater::Asset *siri::dialogengine::CatUpdater::Asset::Asset(siri::dialogengine::CatUpdater::Asset *this, const siri::dialogengine::CatUpdater::Asset *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E7935400;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 4) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v8);
  }
  v9 = *((_QWORD *)a2 + 6);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_QWORD *)this + 6) = v9;
  return this;
}

void sub_1BFB092CC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::Asset::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatUpdater::Asset::default_instance(siri::dialogengine::CatUpdater::Asset *this)
{
  if (atomic_load(scc_info_Asset_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Asset_CatUpdater_2eproto);
  return &siri::dialogengine::CatUpdater::_Asset_default_instance_;
}

void siri::dialogengine::CatUpdater::Asset::CopyFrom(siri::dialogengine::CatUpdater::Asset *this, const siri::dialogengine::CatUpdater::Asset *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatUpdater::Asset::Clear(this);
    siri::dialogengine::CatUpdater::Asset::MergeFrom(this, a2);
  }
}

void siri::dialogengine::CatUpdater::Asset::InternalSwap(siri::dialogengine::CatUpdater::Asset *this, siri::dialogengine::CatUpdater::Asset *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v32;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_28;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_28:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 5);
  v26 = (uint64_t **)((char *)a2 + 40);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v31;
  LODWORD(v31) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v31;
}

siri::dialogengine::CatUpdater::Manifest *siri::dialogengine::CatUpdater::Manifest::Manifest(siri::dialogengine::CatUpdater::Manifest *this, const siri::dialogengine::CatUpdater::Manifest *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  *(_QWORD *)this = &off_1E7935490;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v10);
  }
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  return this;
}

void sub_1BFB096C4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::Manifest::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatUpdater::Manifest::default_instance(siri::dialogengine::CatUpdater::Manifest *this)
{
  if (atomic_load(scc_info_Manifest_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Manifest_CatUpdater_2eproto);
  return &siri::dialogengine::CatUpdater::_Manifest_default_instance_;
}

void siri::dialogengine::CatUpdater::Manifest::CopyFrom(siri::dialogengine::CatUpdater::Manifest *this, const siri::dialogengine::CatUpdater::Manifest *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatUpdater::Manifest::Clear(this);
    siri::dialogengine::CatUpdater::Manifest::MergeFrom(this, a2);
  }
}

void siri::dialogengine::CatUpdater::Manifest::InternalSwap(siri::dialogengine::CatUpdater::Manifest *this, siri::dialogengine::CatUpdater::Manifest *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  int v38;
  unint64_t v39;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v39;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_34;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_34:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatUpdater::Manifest *)((char *)this + 24), (siri::dialogengine::CatUpdater::Manifest *)((char *)a2 + 24));
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 7);
  v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 8);
  v26 = (uint64_t **)((char *)a2 + 64);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 9);
  v32 = (uint64_t **)((char *)a2 + 72);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = *((_BYTE *)this + 80);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v37;
  v38 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v38;
}

siri::dialogengine::CatUpdater::Publication *siri::dialogengine::CatUpdater::Publication::Publication(siri::dialogengine::CatUpdater::Publication *this, const siri::dialogengine::CatUpdater::Publication *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;

  *(_QWORD *)this = &off_1E7935520;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
  }
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  return this;
}

void sub_1BFB09B1C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::Publication::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatUpdater::Publication::default_instance(siri::dialogengine::CatUpdater::Publication *this)
{
  if (atomic_load(scc_info_Publication_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Publication_CatUpdater_2eproto);
  return &siri::dialogengine::CatUpdater::_Publication_default_instance_;
}

void siri::dialogengine::CatUpdater::Publication::CopyFrom(siri::dialogengine::CatUpdater::Publication *this, const siri::dialogengine::CatUpdater::Publication *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatUpdater::Publication::Clear(this);
    siri::dialogengine::CatUpdater::Publication::MergeFrom(this, a2);
  }
}

void siri::dialogengine::CatUpdater::Publication::InternalSwap(siri::dialogengine::CatUpdater::Publication *this, siri::dialogengine::CatUpdater::Publication *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v26;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatUpdater::Publication *)((char *)this + 24), (siri::dialogengine::CatUpdater::Publication *)((char *)a2 + 24));
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 7);
  v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v25;
}

siri::dialogengine::CatUpdater::MatchCriteria *siri::dialogengine::CatUpdater::MatchCriteria::MatchCriteria(siri::dialogengine::CatUpdater::MatchCriteria *this, const siri::dialogengine::CatUpdater::MatchCriteria *a2)
{
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E79355B0;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

void sub_1BFB09E34(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::MatchCriteria::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatUpdater::MatchCriteria::default_instance(siri::dialogengine::CatUpdater::MatchCriteria *this)
{
  if (atomic_load(scc_info_MatchCriteria_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_MatchCriteria_CatUpdater_2eproto);
  return &siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_;
}

void siri::dialogengine::CatUpdater::MatchCriteria::CopyFrom(siri::dialogengine::CatUpdater::MatchCriteria *this, const siri::dialogengine::CatUpdater::MatchCriteria *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatUpdater::MatchCriteria::Clear(this);
    siri::dialogengine::CatUpdater::MatchCriteria::MergeFrom(this, a2);
  }
}

void siri::dialogengine::CatUpdater::MatchCriteria::InternalSwap(siri::dialogengine::CatUpdater::MatchCriteria *this, siri::dialogengine::CatUpdater::MatchCriteria *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  unint64_t v13;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v13;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_OWORD *)v8;
  v11 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = v11;
  *(_OWORD *)v7 = v10;
  *(_QWORD *)(v7 + 16) = v9;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatUpdater::MatchCriteria *)((char *)this + 24), (siri::dialogengine::CatUpdater::MatchCriteria *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatUpdater::MatchCriteria *)((char *)this + 48), (siri::dialogengine::CatUpdater::MatchCriteria *)((char *)a2 + 48));
}

void siri::dialogengine::CatUpdater::Filter::InitAsDefaultInstance(siri::dialogengine::CatUpdater::Filter *this)
{
  qword_1EF584218 = (uint64_t)&siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_;
  unk_1EF584220 = &siri::dialogengine::CatUpdater::_MatchCriteria_default_instance_;
}

uint64_t siri::dialogengine::CatUpdater::Filter::_Internal::include(siri::dialogengine::CatUpdater::Filter::_Internal *this, const siri::dialogengine::CatUpdater::Filter *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t siri::dialogengine::CatUpdater::Filter::_Internal::exclude(siri::dialogengine::CatUpdater::Filter::_Internal *this, const siri::dialogengine::CatUpdater::Filter *a2)
{
  return *((_QWORD *)this + 4);
}

siri::dialogengine::CatUpdater::Filter *siri::dialogengine::CatUpdater::Filter::Filter(siri::dialogengine::CatUpdater::Filter *this, const siri::dialogengine::CatUpdater::Filter *a2)
{
  uint64_t v4;
  int v5;
  siri::dialogengine::CatUpdater::MatchCriteria *v6;
  std::string *v7;
  siri::dialogengine::CatUpdater::MatchCriteria *v8;
  std::string *v9;
  char v11;
  std::string v12[2];

  *(_QWORD *)this = &off_1E7935640;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    if (!*((_QWORD *)a2 + 3))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.h", 2704);
      v7 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: !value || include_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
    }
    v8 = (siri::dialogengine::CatUpdater::MatchCriteria *)operator new();
    siri::dialogengine::CatUpdater::MatchCriteria::MatchCriteria(v8, *((const siri::dialogengine::CatUpdater::MatchCriteria **)a2 + 3));
    *((_QWORD *)this + 3) = v8;
    if ((*((_DWORD *)a2 + 4) & 2) == 0)
      goto LABEL_5;
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
    if ((v5 & 2) == 0)
    {
LABEL_5:
      v6 = 0;
      goto LABEL_12;
    }
  }
  if (!*((_QWORD *)a2 + 4))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.h", 2764);
    v9 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: !value || exclude_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v6 = (siri::dialogengine::CatUpdater::MatchCriteria *)operator new();
  siri::dialogengine::CatUpdater::MatchCriteria::MatchCriteria(v6, *((const siri::dialogengine::CatUpdater::MatchCriteria **)a2 + 4));
LABEL_12:
  *((_QWORD *)this + 4) = v6;
  return this;
}

void sub_1BFB0A138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::Filter::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatUpdater::Filter::default_instance(siri::dialogengine::CatUpdater::Filter *this)
{
  if (atomic_load(scc_info_Filter_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Filter_CatUpdater_2eproto);
  return &siri::dialogengine::CatUpdater::_Filter_default_instance_;
}

void siri::dialogengine::CatUpdater::Filter::CopyFrom(siri::dialogengine::CatUpdater::Filter *this, const siri::dialogengine::CatUpdater::Filter *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatUpdater::Filter::Clear(this);
    siri::dialogengine::CatUpdater::Filter::MergeFrom(this, a2);
  }
}

void siri::dialogengine::CatUpdater::Filter::InternalSwap(siri::dialogengine::CatUpdater::Filter *this, siri::dialogengine::CatUpdater::Filter *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v15;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_OWORD *)v8;
  v11 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = v11;
  *(_OWORD *)v7 = v10;
  *(_QWORD *)(v7 + 16) = v9;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
}

void siri::dialogengine::CatUpdater::State::InitAsDefaultInstance(siri::dialogengine::CatUpdater::State *this)
{
  qword_1EF584278 = (uint64_t)&siri::dialogengine::CatUpdater::_Filter_default_instance_;
}

uint64_t siri::dialogengine::CatUpdater::State::_Internal::filter(siri::dialogengine::CatUpdater::State::_Internal *this, const siri::dialogengine::CatUpdater::State *a2)
{
  return *((_QWORD *)this + 10);
}

siri::dialogengine::CatUpdater::State *siri::dialogengine::CatUpdater::State::State(siri::dialogengine::CatUpdater::State *this, const siri::dialogengine::CatUpdater::State *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  siri::dialogengine::CatUpdater::Filter *v13;
  std::string *v14;
  char v16;
  std::string v17[2];

  *(_QWORD *)this = &off_1E79356D0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 4) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v8);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 8) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v9);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x10) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x20) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v11);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x40) != 0)
  {
    v12 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v12 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v12);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v5 & 0x80) != 0)
  {
    if (!*((_QWORD *)a2 + 10))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/updater/CatUpdater.pb.h", 3282);
      v14 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: !value || filter_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
    }
    v13 = (siri::dialogengine::CatUpdater::Filter *)operator new();
    siri::dialogengine::CatUpdater::Filter::Filter(v13, *((const siri::dialogengine::CatUpdater::Filter **)a2 + 10));
  }
  else
  {
    v13 = 0;
  }
  *((_QWORD *)this + 10) = v13;
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  return this;
}

void sub_1BFB0A4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::State::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatUpdater::State::default_instance(siri::dialogengine::CatUpdater::State *this)
{
  if (atomic_load(scc_info_State_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_State_CatUpdater_2eproto);
  return &siri::dialogengine::CatUpdater::_State_default_instance_;
}

void siri::dialogengine::CatUpdater::State::CopyFrom(siri::dialogengine::CatUpdater::State *this, const siri::dialogengine::CatUpdater::State *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatUpdater::State::Clear(this);
    siri::dialogengine::CatUpdater::State::MergeFrom(this, a2);
  }
}

void siri::dialogengine::CatUpdater::State::InternalSwap(siri::dialogengine::CatUpdater::State *this, siri::dialogengine::CatUpdater::State *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v56;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_52;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_52:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 5);
  v26 = (uint64_t **)((char *)a2 + 40);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 6);
  v32 = (uint64_t **)((char *)a2 + 48);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 7);
  v38 = (uint64_t **)((char *)a2 + 56);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  v43 = (uint64_t *)*((_QWORD *)this + 8);
  v44 = (uint64_t **)((char *)a2 + 64);
  if (v43 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_44;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v43 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v45 = *v44;
  if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v45 = *v44;
  }
  v46 = v43[2];
  v47 = *(_OWORD *)v43;
  v48 = v45[2];
  *(_OWORD *)v43 = *(_OWORD *)v45;
  v43[2] = v48;
  *(_OWORD *)v45 = v47;
  v45[2] = v46;
LABEL_44:
  v49 = (uint64_t *)*((_QWORD *)this + 9);
  v50 = (uint64_t **)((char *)a2 + 72);
  if (v49 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_50;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v49 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v51 = *v50;
  if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v51 = *v50;
  }
  v52 = v49[2];
  v53 = *(_OWORD *)v49;
  v54 = v51[2];
  *(_OWORD *)v49 = *(_OWORD *)v51;
  v49[2] = v54;
  *(_OWORD *)v51 = v53;
  v51[2] = v52;
LABEL_50:
  v55 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v55;
  LOBYTE(v55) = *((_BYTE *)this + 88);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a2 + 88) = v55;
}

siri::dialogengine::CatUpdater::Encrypted *siri::dialogengine::CatUpdater::Encrypted::Encrypted(siri::dialogengine::CatUpdater::Encrypted *this, const siri::dialogengine::CatUpdater::Encrypted *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  *(_QWORD *)this = &off_1E7935760;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 4) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v8);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 8) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v9);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x10) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x20) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v11);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x40) != 0)
  {
    v12 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v12 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v12);
  }
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  return this;
}

void sub_1BFB0AB1C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatUpdater::Encrypted::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatUpdater::Encrypted::default_instance(siri::dialogengine::CatUpdater::Encrypted *this)
{
  if (atomic_load(scc_info_Encrypted_CatUpdater_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Encrypted_CatUpdater_2eproto);
  return &siri::dialogengine::CatUpdater::_Encrypted_default_instance_;
}

void siri::dialogengine::CatUpdater::Encrypted::CopyFrom(siri::dialogengine::CatUpdater::Encrypted *this, const siri::dialogengine::CatUpdater::Encrypted *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatUpdater::Encrypted::Clear(this);
    siri::dialogengine::CatUpdater::Encrypted::MergeFrom(this, a2);
  }
}

void siri::dialogengine::CatUpdater::Encrypted::InternalSwap(siri::dialogengine::CatUpdater::Encrypted *this, siri::dialogengine::CatUpdater::Encrypted *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  unint64_t v56;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v56;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_52;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_52:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 5);
  v26 = (uint64_t **)((char *)a2 + 40);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 6);
  v32 = (uint64_t **)((char *)a2 + 48);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 7);
  v38 = (uint64_t **)((char *)a2 + 56);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  v43 = (uint64_t *)*((_QWORD *)this + 8);
  v44 = (uint64_t **)((char *)a2 + 64);
  if (v43 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_44;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v43 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v45 = *v44;
  if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v45 = *v44;
  }
  v46 = v43[2];
  v47 = *(_OWORD *)v43;
  v48 = v45[2];
  *(_OWORD *)v43 = *(_OWORD *)v45;
  v43[2] = v48;
  *(_OWORD *)v45 = v47;
  v45[2] = v46;
LABEL_44:
  v49 = (uint64_t *)*((_QWORD *)this + 9);
  v50 = (uint64_t **)((char *)a2 + 72);
  if (v49 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_50;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v49 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v51 = *v50;
  if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v51 = *v50;
  }
  v52 = v49[2];
  v53 = *(_OWORD *)v49;
  v54 = v51[2];
  *(_OWORD *)v49 = *(_OWORD *)v51;
  v49[2] = v54;
  *(_OWORD *)v51 = v53;
  v51[2] = v52;
LABEL_50:
  v55 = *((_BYTE *)this + 80);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v55;
}

void *siri::dialogengine::GetRequiredArrayParameter(const void **a1, uint64_t a2)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *lpsrc;
  std::__shared_weak_count *v8;

  siri::dialogengine::GetParameter((uint64_t *)&lpsrc, a2, a1, (char *)siri::dialogengine::TYPE_ARRAY, 1);
  if (lpsrc)
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void siri::dialogengine::GetParameter(uint64_t *a1, uint64_t a2, const void **a3, char *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  void *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const struct __class_type_info *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *p_p;
  std::string::size_type size;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::string __p;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  __int128 v45;
  std::string::size_type v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  v9 = std::__tree<std::string>::find<std::string>(a2 + 72, a3);
  if (a2 + 80 == v9)
  {
    v47 = 0;
    v48 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 56);
    v11 = *(std::__shared_weak_count **)(v9 + 64);
    v47 = v10;
    v48 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    if (v10)
    {
      if ((char *)siri::dialogengine::TYPE_ARRAY == a4)
      {
      }
      else if (siri::dialogengine::TYPE_BOOLEAN == a4)
      {
      }
      else if (siri::dialogengine::TYPE_NUMBER[0] == a4)
      {
      }
      else if ((char *)siri::dialogengine::TYPE_OBJECT == a4)
      {
      }
      else
      {
        if (siri::dialogengine::TYPE_STRING[0] != a4)
        {
          std::operator+<char>();
          v14 = std::string::append(&v44, "'!");
          v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v46 = v14->__r_.__value_.__r.__words[2];
          v45 = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v45, 3u);
          if (SHIBYTE(v46) < 0)
            operator delete((void *)v45);
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          {
            v16 = (void *)v44.__r_.__value_.__r.__words[0];
LABEL_25:
            operator delete(v16);
            goto LABEL_56;
          }
          goto LABEL_56;
        }
      }
      {
        std::operator+<char>();
        v24 = std::string::append(&v40, "'. Expected '");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v41.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        v26 = std::string::append(&v41, a4);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v28 = std::string::append(&v42, "' but got '");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(v10 + 55) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 32), *(_QWORD *)(v10 + 40));
        else
          __p = *(std::string *)(v10 + 32);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v32 = std::string::append(&v43, (const std::string::value_type *)p_p, size);
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v34 = std::string::append(&v44, "'!");
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v46 = v34->__r_.__value_.__r.__words[2];
        v45 = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::LogWithLevel((uint64_t)&v45, 3u);
        if (SHIBYTE(v46) < 0)
          operator delete((void *)v45);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
      }
      *a1 = v10;
      a1[1] = (uint64_t)v11;
      a1 = &v47;
      goto LABEL_56;
    }
  }
  if (a5)
  {
    std::operator+<char>();
    v17 = std::string::append(&v42, "' of type '");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v43, a4);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v44, "' is a required input but was not specified!");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v46 = v21->__r_.__value_.__r.__words[2];
    v45 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v45, 3u);
    if (SHIBYTE(v46) < 0)
      operator delete((void *)v45);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v42.__r_.__value_.__r.__words[0];
      goto LABEL_25;
    }
  }
LABEL_56:
  *a1 = 0;
  a1[1] = 0;
  v36 = v48;
  if (v48)
  {
    v37 = (unint64_t *)&v48->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1BFB0B504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  if (a47 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v47 - 80);
  _Unwind_Resume(a1);
}

void *siri::dialogengine::GetRequiredBooleanParameter(const void **a1, uint64_t a2)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *lpsrc;
  std::__shared_weak_count *v8;

  siri::dialogengine::GetParameter((uint64_t *)&lpsrc, a2, a1, siri::dialogengine::TYPE_BOOLEAN, 1);
  if (lpsrc)
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void *siri::dialogengine::GetRequiredNumberParameter(const void **a1, uint64_t a2)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *lpsrc;
  std::__shared_weak_count *v8;

  siri::dialogengine::GetParameter((uint64_t *)&lpsrc, a2, a1, siri::dialogengine::TYPE_NUMBER[0], 1);
  if (lpsrc)
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void *siri::dialogengine::GetRequiredObjectParameter(const void **a1, uint64_t a2)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *lpsrc;
  std::__shared_weak_count *v8;

  siri::dialogengine::GetParameter((uint64_t *)&lpsrc, a2, a1, (char *)siri::dialogengine::TYPE_OBJECT, 1);
  if (lpsrc)
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void *siri::dialogengine::GetRequiredStringParameter(const void **a1, uint64_t a2)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *lpsrc;
  std::__shared_weak_count *v8;

  siri::dialogengine::GetParameter((uint64_t *)&lpsrc, a2, a1, siri::dialogengine::TYPE_STRING[0], 1);
  if (lpsrc)
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void *siri::dialogengine::GetOptionalArrayParameter(const void **a1, uint64_t a2)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *lpsrc;
  std::__shared_weak_count *v8;

  siri::dialogengine::GetParameter((uint64_t *)&lpsrc, a2, a1, (char *)siri::dialogengine::TYPE_ARRAY, 0);
  if (lpsrc)
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void *siri::dialogengine::GetOptionalBooleanParameter(const void **a1, uint64_t a2)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *lpsrc;
  std::__shared_weak_count *v8;

  siri::dialogengine::GetParameter((uint64_t *)&lpsrc, a2, a1, siri::dialogengine::TYPE_BOOLEAN, 0);
  if (lpsrc)
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void *siri::dialogengine::GetOptionalNumberParameter(const void **a1, uint64_t a2)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *lpsrc;
  std::__shared_weak_count *v8;

  siri::dialogengine::GetParameter((uint64_t *)&lpsrc, a2, a1, siri::dialogengine::TYPE_NUMBER[0], 0);
  if (lpsrc)
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void *siri::dialogengine::GetOptionalObjectParameter(const void **a1, uint64_t a2)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *lpsrc;
  std::__shared_weak_count *v8;

  siri::dialogengine::GetParameter((uint64_t *)&lpsrc, a2, a1, (char *)siri::dialogengine::TYPE_OBJECT, 0);
  if (lpsrc)
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void *siri::dialogengine::GetOptionalStringParameter(const void **a1, uint64_t a2)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *lpsrc;
  std::__shared_weak_count *v8;

  siri::dialogengine::GetParameter((uint64_t *)&lpsrc, a2, a1, siri::dialogengine::TYPE_STRING[0], 0);
  if (lpsrc)
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void siri::dialogengine::LabelModeNodeVisitor::~LabelModeNodeVisitor(siri::dialogengine::LabelModeNodeVisitor *this)
{
  JUMPOUT(0x1C3B8D890);
}

void siri::dialogengine::LabelModeNodeVisitor::Visit(siri::dialogengine::LabelModeNodeVisitor *this, siri::dialogengine::Dialog *a2)
{
  std::string v2;
  std::string v3;
  std::string v4;
  _BYTE v5[176];

  siri::dialogengine::SpeakableString::SpeakableString(&v3, (siri::dialogengine::Dialog *)((char *)a2 + 208));
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v4, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  else
    v4 = v3;
  std::string::basic_string[abi:ne180100]<0>(&v2, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v5, &v4, &v2);
}

void sub_1BFB0BC70()
{
  siri::dialogengine::Dialog *v0;
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;

  siri::dialogengine::Dialog::SetFull(v0, (const std::string *)(v1 - 192));
  if (*(char *)(v1 - 25) < 0)
    operator delete(*(void **)(v1 - 48));
  if (*(char *)(v1 - 49) < 0)
    operator delete(*(void **)(v1 - 72));
  if (*(char *)(v1 - 73) < 0)
    operator delete(*(void **)(v1 - 96));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  if (v3 < 0)
    operator delete(v2);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (v9 < 0)
    operator delete(v8);
  if (v7 < 0)
    operator delete(v6);
  if (v5 < 0)
    operator delete(v4);
  *(_QWORD *)(v1 - 32) = 0;
  *(_OWORD *)(v1 - 64) = 0u;
  *(_OWORD *)(v1 - 48) = 0u;
  *(_OWORD *)(v1 - 96) = 0u;
  *(_OWORD *)(v1 - 80) = 0u;
  *(_OWORD *)(v1 - 128) = 0u;
  *(_OWORD *)(v1 - 112) = 0u;
  *(_OWORD *)(v1 - 160) = 0u;
  *(_OWORD *)(v1 - 144) = 0u;
  *(_OWORD *)(v1 - 192) = 0u;
  *(_OWORD *)(v1 - 176) = 0u;
  siri::dialogengine::Dialog::SetSupporting(v0, (const std::string *)(v1 - 192));
  if (*(char *)(v1 - 25) < 0)
    operator delete(*(void **)(v1 - 48));
  if (*(char *)(v1 - 49) < 0)
    operator delete(*(void **)(v1 - 72));
  if (*(char *)(v1 - 73) < 0)
    operator delete(*(void **)(v1 - 96));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  *((_DWORD *)v0 + 136) = 257;
}

void sub_1BFB0BE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a15);
  _Unwind_Resume(a1);
}

void siri::dialogengine::LabelModeNodeVisitor::Visit(siri::dialogengine::LabelModeNodeVisitor *this, siri::dialogengine::Text *a2)
{
  std::string v2;
  std::string v3;
  std::string v4;
  _BYTE v5[168];

  siri::dialogengine::SpeakableString::SpeakableString(&v3, (siri::dialogengine::Text *)((char *)a2 + 208));
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v4, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  else
    v4 = v3;
  std::string::basic_string[abi:ne180100]<0>(&v2, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v5, &v4, &v2);
}

void sub_1BFB0BEF4()
{
  siri::dialogengine::Text *v0;
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;

  siri::dialogengine::Text::SetValue(v0, (const std::string *)(v1 - 184));
  if (*(char *)(v1 - 17) < 0)
    operator delete(*(void **)(v1 - 40));
  if (*(char *)(v1 - 41) < 0)
    operator delete(*(void **)(v1 - 64));
  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 161) < 0)
    operator delete(*(void **)(v1 - 184));
  if (v3 < 0)
    operator delete(v2);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (v9 < 0)
    operator delete(v8);
  if (v7 < 0)
    operator delete(v6);
  if (v5 < 0)
    operator delete(v4);
}

void sub_1BFB0C010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a15);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::IsContainedByDateTimeConstant(siri::dialogengine::Context *a1, char *a2, int a3)
{
  const char *v5;
  unint64_t v6;
  const siri::dialogengine::TimeStamp *v7;
  int ICUHour24;
  const siri::dialogengine::TimeStamp *v9;
  siri::dialogengine *ICUMinutes;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  std::string __p;
  void *v30[2];
  char v31;
  void *v32[2];
  unsigned __int8 v33;

  if (a1)
    siri::dialogengine::Context::GetLocale(a1, a2, (uint64_t)v32);
  else
    std::string::basic_string[abi:ne180100]<0>(v32, "");
  v6 = v33;
  if ((v33 & 0x80u) != 0)
    v6 = (unint64_t)v32[1];
  if (!v6)
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"IsContainedByDateTimeConstant has empty locale", v5);
  siri::dialogengine::GetLocaleCountry(&__p);
  siri::dialogengine::StringToUpper((uint64_t)&__p, (uint64_t)v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ICUHour24 = siri::dialogengine::GetICUHour24((siri::dialogengine *)a2, v7);
  ICUMinutes = (siri::dialogengine *)siri::dialogengine::GetICUMinutes((siri::dialogengine *)a2, v9);
  v11 = (int)ICUMinutes;
  siri::dialogengine::GetDateTimeOverridesMap(ICUMinutes);
  v12 = std::__tree<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>>>::find<std::string>((const void **)v30);
  if (v12 != &qword_1EF582B20)
  {
    v14 = v12[8];
    v12 += 8;
    v13 = v14;
    if (v14)
    {
      v15 = v12;
      do
      {
        v16 = *(_DWORD *)(v13 + 28);
        v17 = v16 < a3;
        if (v16 >= a3)
          v18 = (uint64_t *)v13;
        else
          v18 = (uint64_t *)(v13 + 8);
        if (!v17)
          v15 = (uint64_t *)v13;
        v13 = *v18;
      }
      while (*v18);
      if (v15 != v12 && *((_DWORD *)v15 + 7) <= a3)
        goto LABEL_32;
    }
  }
  siri::dialogengine::GetBaseDateTimeConstantsMap((siri::dialogengine *)v12);
  v19 = qword_1EF582B40;
  if (!qword_1EF582B40)
    goto LABEL_31;
  v15 = &qword_1EF582B40;
  do
  {
    v20 = *(_DWORD *)(v19 + 28);
    v21 = v20 < a3;
    if (v20 >= a3)
      v22 = (uint64_t *)v19;
    else
      v22 = (uint64_t *)(v19 + 8);
    if (!v21)
      v15 = (uint64_t *)v19;
    v19 = *v22;
  }
  while (*v22);
  if (v15 == &qword_1EF582B40 || *((_DWORD *)v15 + 7) > a3)
  {
LABEL_31:
    v23 = 0;
  }
  else
  {
LABEL_32:
    v24 = v11 + 3600 * ICUHour24;
    v26 = *((_DWORD *)v15 + 8);
    v25 = *((_DWORD *)v15 + 9);
    if (v26 <= v25)
      v27 = v24 >= v26 && v24 <= v25;
    else
      v27 = v24 >= v26 || v24 <= v25;
    v23 = v27;
  }
  if (v31 < 0)
    operator delete(v30[0]);
  if ((char)v33 < 0)
    operator delete(v32[0]);
  return v23;
}

void sub_1BFB0C214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDateTimeOverridesMap(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t i;
  uint64_t v3[3];
  void *__p[2];
  char v5;
  uint64_t v6[3];
  void *v7[2];
  char v8;
  uint64_t v9[3];
  void *v10[2];
  char v11;
  uint64_t v12[3];
  void *v13[2];
  char v14;
  uint64_t v15[3];
  void *v16[2];
  char v17;
  uint64_t v18[3];
  void *v19[2];
  char v20;
  uint64_t v21[3];
  void *v22[2];
  char v23;
  uint64_t v24[3];
  void *v25[2];
  char v26;
  uint64_t v27[3];
  void *v28[2];
  char v29;
  uint64_t v30[3];
  void *v31[2];
  char v32;
  uint64_t v33[3];
  void *v34[2];
  char v35;
  uint64_t v36[3];
  void *v37[2];
  char v38;
  uint64_t v39[3];
  void *v40[2];
  char v41;
  uint64_t v42[3];
  void *v43[2];
  char v44;
  _OWORD v45[6];
  int v46;
  __int128 v47;
  int v48;
  _OWORD v49[5];
  _OWORD v50[6];
  int v51;
  _OWORD v52[3];
  uint64_t v53;
  int v54;
  _OWORD v55[12];
  uint64_t v56;
  _OWORD v57[6];
  int v58;
  _OWORD v59[3];
  uint64_t v60;
  int v61;
  _OWORD v62[12];
  uint64_t v63;
  _OWORD v64[8];
  uint64_t v65;
  int v66;
  _OWORD v67[6];
  int v68;
  __int128 v69;
  int v70;
  _OWORD v71[6];
  int v72;
  _OWORD v73[8];
  uint64_t v74;
  int v75;
  std::string v76[2];
  std::string v77[2];
  std::string v78[2];
  std::string v79[2];
  std::string v80[2];
  std::string v81[2];
  std::string v82[2];
  std::string v83[2];
  std::string v84[2];
  std::string v85[2];
  std::string v86[2];
  std::string v87[2];
  std::string v88[2];
  std::string v89[2];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(v43, "AT");
    v73[0] = xmmword_1BFCCD810;
    v73[1] = xmmword_1BFCCD820;
    v73[2] = xmmword_1BFCCD830;
    v73[3] = xmmword_1BFCCD840;
    v73[4] = xmmword_1BFCCD850;
    v73[5] = xmmword_1BFCCD860;
    v73[6] = xmmword_1BFCCD870;
    v73[7] = xmmword_1BFCCD880;
    v74 = 0x60000EF4BLL;
    v75 = 17;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v42, (int *)v73, 7);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v76, (__int128 *)v43, v42);
    std::string::basic_string[abi:ne180100]<0>(v40, "BE");
    v71[0] = xmmword_1BFCCD890;
    v71[1] = xmmword_1BFCCD8A0;
    v71[2] = xmmword_1BFCCD8B0;
    v71[3] = xmmword_1BFCCD8C0;
    v71[4] = xmmword_1BFCCD8D0;
    v71[5] = xmmword_1BFCCD8E0;
    v72 = 5;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v39, (int *)v71, 5);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v77, (__int128 *)v40, v39);
    std::string::basic_string[abi:ne180100]<0>(v37, "CA");
    v69 = xmmword_1BFCCD8F0;
    v70 = 19;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v36, (int *)&v69, 1);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v78, (__int128 *)v37, v36);
    std::string::basic_string[abi:ne180100]<0>(v34, "CN");
    v67[0] = xmmword_1BFCCD900;
    v67[1] = xmmword_1BFCCD910;
    v67[2] = xmmword_1BFCCD920;
    v67[3] = xmmword_1BFCCD930;
    v67[4] = xmmword_1BFCCD940;
    v67[5] = xmmword_1BFCCD950;
    v68 = 4;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v33, (int *)v67, 5);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v79, (__int128 *)v34, v33);
    std::string::basic_string[abi:ne180100]<0>(v31, "DE");
    v64[0] = xmmword_1BFCCD960;
    v64[1] = xmmword_1BFCCD970;
    v64[2] = xmmword_1BFCCD980;
    v64[3] = xmmword_1BFCCD840;
    v64[4] = xmmword_1BFCCD850;
    v64[5] = xmmword_1BFCCD990;
    v64[6] = xmmword_1BFCCD9A0;
    v64[7] = xmmword_1BFCCD9B0;
    v65 = 0x60000EF4BLL;
    v66 = 17;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v30, (int *)v64, 7);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v80, (__int128 *)v31, v30);
    std::string::basic_string[abi:ne180100]<0>(v28, "ES");
    v62[0] = xmmword_1BFCCD960;
    v62[1] = xmmword_1BFCCD9C0;
    v62[2] = xmmword_1BFCCD9D0;
    v62[3] = xmmword_1BFCCD9E0;
    v62[4] = xmmword_1BFCCD9F0;
    v62[5] = xmmword_1BFCCDA00;
    v62[6] = xmmword_1BFCCDA10;
    v62[7] = xmmword_1BFCCDA20;
    v62[8] = xmmword_1BFCCDA30;
    v62[9] = xmmword_1BFCCDA40;
    v62[10] = xmmword_1BFCCDA50;
    v62[11] = xmmword_1BFCCDA60;
    v63 = 0x1600000014;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v27, (int *)v62, 10);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v81, (__int128 *)v28, v27);
    std::string::basic_string[abi:ne180100]<0>(v25, "FR");
    v59[0] = xmmword_1BFCCDA70;
    v59[1] = xmmword_1BFCCDA80;
    v59[2] = xmmword_1BFCCDA90;
    v60 = 0x1700004650;
    v61 = 5;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v24, (int *)v59, 3);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v82, (__int128 *)v25, v24);
    std::string::basic_string[abi:ne180100]<0>(v22, "HK");
    v57[0] = xmmword_1BFCCDAA0;
    v57[1] = xmmword_1BFCCDAB0;
    v57[2] = xmmword_1BFCCD920;
    v57[3] = xmmword_1BFCCD930;
    v57[4] = xmmword_1BFCCD940;
    v57[5] = xmmword_1BFCCD950;
    v58 = 4;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v21, (int *)v57, 5);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v83, (__int128 *)v22, v21);
    std::string::basic_string[abi:ne180100]<0>(v19, "IT");
    v55[0] = xmmword_1BFCCDAC0;
    v55[1] = xmmword_1BFCCDAD0;
    v55[2] = xmmword_1BFCCDAE0;
    v55[3] = xmmword_1BFCCDAF0;
    v55[4] = xmmword_1BFCCDB00;
    v55[5] = xmmword_1BFCCDB10;
    v55[6] = xmmword_1BFCCDB20;
    v55[7] = xmmword_1BFCCDB30;
    v55[8] = xmmword_1BFCCDB40;
    v55[9] = xmmword_1BFCCDB50;
    v55[10] = xmmword_1BFCCD8F0;
    v55[11] = xmmword_1BFCCDB60;
    v56 = 0x1600000013;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v18, (int *)v55, 10);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v84, (__int128 *)v19, v18);
    std::string::basic_string[abi:ne180100]<0>(v16, "JA");
    v52[0] = xmmword_1BFCCDB70;
    v52[1] = xmmword_1BFCCDB80;
    v52[2] = xmmword_1BFCCDB90;
    v53 = 0x1000010B30;
    v54 = 19;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v15, (int *)v52, 3);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v85, (__int128 *)v16, v15);
    std::string::basic_string[abi:ne180100]<0>(v13, "MY");
    v50[0] = xmmword_1BFCCDBA0;
    v50[1] = xmmword_1BFCCDBB0;
    v50[2] = xmmword_1BFCCDBC0;
    v50[3] = xmmword_1BFCCDBD0;
    v50[4] = xmmword_1BFCCDBE0;
    v50[5] = xmmword_1BFCCDBF0;
    v51 = 3;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v12, (int *)v50, 5);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v86, (__int128 *)v13, v12);
    std::string::basic_string[abi:ne180100]<0>(v10, "NO");
    v49[0] = xmmword_1BFCCDC00;
    v49[1] = xmmword_1BFCCDC10;
    v49[2] = xmmword_1BFCCDAE0;
    v49[3] = xmmword_1BFCCDC20;
    v49[4] = xmmword_1BFCCDC30;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v9, (int *)v49, 4);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v87, (__int128 *)v10, v9);
    std::string::basic_string[abi:ne180100]<0>(v7, "NL");
    v47 = xmmword_1BFCCDC40;
    v48 = 6;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v6, (int *)&v47, 1);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v88, (__int128 *)v7, v6);
    std::string::basic_string[abi:ne180100]<0>(__p, "TW");
    v45[0] = xmmword_1BFCCD900;
    v45[1] = xmmword_1BFCCD910;
    v45[2] = xmmword_1BFCCD920;
    v45[3] = xmmword_1BFCCD930;
    v45[4] = xmmword_1BFCCD940;
    v45[5] = xmmword_1BFCCD950;
    v46 = 4;
    std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v3, (int *)v45, 5);
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(v89, (__int128 *)__p, v3);
    std::map<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::map[abi:ne180100]((__int128 *)v76, 14);
    for (i = 624; i != -48; i -= 48)
      std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::~pair((uint64_t)&v76[i / 0x18]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v3[1]);
    if (v5 < 0)
      operator delete(__p[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v6[1]);
    if (v8 < 0)
      operator delete(v7[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v9[1]);
    if (v11 < 0)
      operator delete(v10[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v12[1]);
    if (v14 < 0)
      operator delete(v13[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v15[1]);
    if (v17 < 0)
      operator delete(v16[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v18[1]);
    if (v20 < 0)
      operator delete(v19[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v21[1]);
    if (v23 < 0)
      operator delete(v22[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v24[1]);
    if (v26 < 0)
      operator delete(v25[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v27[1]);
    if (v29 < 0)
      operator delete(v28[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v30[1]);
    if (v32 < 0)
      operator delete(v31[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v33[1]);
    if (v35 < 0)
      operator delete(v34[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v36[1]);
    if (v38 < 0)
      operator delete(v37[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v39[1]);
    if (v41 < 0)
      operator delete(v40[0]);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v42[1]);
    if (v44 < 0)
      operator delete(v43[0]);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::~map[abi:ne180100], &siri::dialogengine::GetDateTimeOverridesMap(void)::countryDateTimeOverrides, &dword_1BF794000);
  }
}

void sub_1BFB0CBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_QWORD *a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,_QWORD *a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,_QWORD *a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,_QWORD *a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  _QWORD *a66;
  void *a68;
  char a72;
  _QWORD *a73;
  void *a74;
  char a75;
  _QWORD *a76;
  void *a77;
  char a78;
  _QWORD *a79;
  uint64_t v79;
  uint64_t i;

  for (i = 624; i != -48; i -= 48)
    std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::~pair(v79 + i);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a30);
  if (a37 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a39);
  if (a46 < 0)
    operator delete(a41);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a48);
  if (a55 < 0)
    operator delete(a50);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a57);
  if (a64 < 0)
    operator delete(a59);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a66);
  if (a72 < 0)
    operator delete(a68);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a73);
  if (a75 < 0)
    operator delete(a74);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a76);
  if (a78 < 0)
    operator delete(a77);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a79);
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)STACK[0x228]);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)STACK[0x258]);
  if (SLOBYTE(STACK[0x27F]) < 0)
    operator delete((void *)STACK[0x268]);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)STACK[0x288]);
  if (SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)STACK[0x2B8]);
  if (SLOBYTE(STACK[0x2DF]) < 0)
    operator delete((void *)STACK[0x2C8]);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)STACK[0x2E8]);
  if (SLOBYTE(STACK[0x30F]) < 0)
    operator delete((void *)STACK[0x2F8]);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)STACK[0x318]);
  if (SLOBYTE(STACK[0x33F]) < 0)
    operator delete((void *)STACK[0x328]);
  _Unwind_Resume(a1);
}

void sub_1BFB0CE28()
{
  JUMPOUT(0x1BFB0CD1CLL);
}

void sub_1BFB0CE34()
{
  JUMPOUT(0x1BFB0CD2CLL);
}

void sub_1BFB0CE44()
{
  JUMPOUT(0x1BFB0CD34);
}

void sub_1BFB0CE50()
{
  JUMPOUT(0x1BFB0CD44);
}

void sub_1BFB0CE60()
{
  JUMPOUT(0x1BFB0CD4CLL);
}

void sub_1BFB0CE6C()
{
  JUMPOUT(0x1BFB0CD5CLL);
}

void sub_1BFB0CE7C()
{
  JUMPOUT(0x1BFB0CD64);
}

void sub_1BFB0CE88()
{
  JUMPOUT(0x1BFB0CD74);
}

void sub_1BFB0CE98()
{
  JUMPOUT(0x1BFB0CD7CLL);
}

void sub_1BFB0CEA4()
{
  JUMPOUT(0x1BFB0CD8CLL);
}

void sub_1BFB0CEB4()
{
  JUMPOUT(0x1BFB0CD94);
}

void sub_1BFB0CEC0()
{
  JUMPOUT(0x1BFB0CDA4);
}

void sub_1BFB0CED0()
{
  JUMPOUT(0x1BFB0CDACLL);
}

void sub_1BFB0CEDC()
{
  JUMPOUT(0x1BFB0CDBCLL);
}

void sub_1BFB0CEEC()
{
  JUMPOUT(0x1BFB0CDC4);
}

void sub_1BFB0CEF8()
{
  JUMPOUT(0x1BFB0CDD4);
}

void sub_1BFB0CF04()
{
  JUMPOUT(0x1BFB0CDD4);
}

void sub_1BFB0CF14()
{
  JUMPOUT(0x1BFB0CDDCLL);
}

void sub_1BFB0CF24()
{
  JUMPOUT(0x1BFB0CE14);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>>>::find<std::string>(const void **a1)
{
  uint64_t v1;
  uint64_t *v3;
  _BOOL4 v4;
  uint64_t *v5;

  v1 = qword_1EF582B20;
  if (!qword_1EF582B20)
    return &qword_1EF582B20;
  v3 = &qword_1EF582B20;
  do
  {
    v4 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF582B28, (const void **)(v1 + 32), a1);
    v5 = (uint64_t *)(v1 + 8);
    if (!v4)
    {
      v5 = (uint64_t *)v1;
      v3 = (uint64_t *)v1;
    }
    v1 = *v5;
  }
  while (*v5);
  if (v3 == &qword_1EF582B20
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF582B28, a1, (const void **)v3 + 4))
  {
    return &qword_1EF582B20;
  }
  return v3;
}

void siri::dialogengine::GetBaseDateTimeConstantsMap(siri::dialogengine *this)
{
  unsigned __int8 v1;
  _OWORD v2[20];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0)
  {
    {
      v2[0] = xmmword_1BFCCDC50;
      v2[1] = xmmword_1BFCCD9C0;
      v2[2] = xmmword_1BFCCDC60;
      v2[3] = xmmword_1BFCCDC70;
      v2[4] = xmmword_1BFCCDC80;
      v2[5] = xmmword_1BFCCDC90;
      v2[6] = xmmword_1BFCCDCA0;
      v2[7] = xmmword_1BFCCDCB0;
      v2[8] = xmmword_1BFCCDAF0;
      v2[9] = xmmword_1BFCCDCC0;
      v2[10] = xmmword_1BFCCDBF0;
      v2[11] = xmmword_1BFCCDCD0;
      v2[12] = xmmword_1BFCCDCE0;
      v2[13] = xmmword_1BFCCDCF0;
      v2[14] = xmmword_1BFCCDD00;
      v2[15] = xmmword_1BFCCDD10;
      v2[16] = xmmword_1BFCCDD20;
      v2[17] = xmmword_1BFCCDD30;
      v2[18] = xmmword_1BFCCDD40;
      v2[19] = xmmword_1BFCCDD50;
      std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](&siri::dialogengine::GetBaseDateTimeConstantsMap(void)::baseDateTimeConstants, (int *)v2, 16);
      __cxa_atexit((void (*)(void *))std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::~map[abi:ne180100], &siri::dialogengine::GetBaseDateTimeConstantsMap(void)::baseDateTimeConstants, &dword_1BF794000);
    }
  }
}

void sub_1BFB0D140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](uint64_t *a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    v6 = 20 * a3;
    do
    {
      std::__tree<std::__value_type<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>,std::__map_value_compare<siri::dialogengine::DateTimeConstants,std::__value_type<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>,std::less<siri::dialogengine::DateTimeConstants>,true>,std::allocator<std::__value_type<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>>::__emplace_hint_unique_key_args<siri::dialogengine::DateTimeConstants,std::pair<siri::dialogengine::DateTimeConstants const,siri::dialogengine::DateTimeConstant> const&>(a1, v4, *a2, (uint64_t)a2);
      a2 += 5;
      v6 -= 20;
    }
    while (v6);
  }
  return a1;
}

void sub_1BFB0D1C0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *std::__tree<std::__value_type<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>,std::__map_value_compare<siri::dialogengine::DateTimeConstants,std::__value_type<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>,std::less<siri::dialogengine::DateTimeConstants>,true>,std::allocator<std::__value_type<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>>::__emplace_hint_unique_key_args<siri::dialogengine::DateTimeConstants,std::pair<siri::dialogengine::DateTimeConstants const,siri::dialogengine::DateTimeConstant> const&>(uint64_t *result, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;

  v5 = result;
  v6 = result + 1;
  if (result + 1 == a2 || (v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    v8 = *a2;
    if ((uint64_t *)*result == a2)
    {
      v10 = a2;
LABEL_16:
      if (v8)
        v13 = v10;
      else
        v13 = a2;
      if (v8)
        v11 = v10 + 1;
      else
        v11 = a2;
      goto LABEL_22;
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (uint64_t *)v15[2];
        v16 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 7) < a3)
      goto LABEL_16;
    v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t *)v17;
          v18 = *(_DWORD *)(v17 + 28);
          if (v18 <= a3)
            break;
          v17 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v18 >= a3)
          break;
        v6 = v13 + 1;
        v17 = v13[1];
        if (!v17)
          goto LABEL_44;
      }
LABEL_49:
      v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3)
      return result;
    v11 = a2 + 1;
    v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        v11 = v12;
        v12 = (uint64_t *)*v12;
        v13 = v11;
        v14 = v11;
      }
      while (v12);
    }
    else
    {
      v14 = a2;
      do
      {
        v19 = v14;
        v14 = (uint64_t *)v14[2];
      }
      while ((uint64_t *)*v14 != v19);
      v13 = a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 7) > a3)
    {
LABEL_22:
      v6 = v11;
      if (*v11)
        return result;
      goto LABEL_44;
    }
    v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t *)v20;
          v21 = *(_DWORD *)(v20 + 28);
          if (v21 <= a3)
            break;
          v20 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v21 >= a3)
          goto LABEL_49;
        v6 = v13 + 1;
        v20 = v13[1];
        if (!v20)
          goto LABEL_44;
      }
    }
  }
  v13 = result + 1;
LABEL_44:
  v22 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v22 + 28) = *(_OWORD *)a4;
  *((_DWORD *)v22 + 11) = *(_DWORD *)(a4 + 16);
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = v13;
  *v6 = (uint64_t)v22;
  v23 = *(_QWORD *)*v5;
  if (v23)
  {
    *v5 = v23;
    v24 = (uint64_t *)*v6;
  }
  else
  {
    v24 = (uint64_t *)v22;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v24);
  ++v5[2];
  return result;
}

std::string *std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, _QWORD *a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100]((uint64_t *)&this[1], a3);
  return this;
}

void sub_1BFB0D43C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::map<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::map[abi:ne180100](__int128 *a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  _BOOL4 v9;
  uint64_t *v10;
  const void **v11;
  char *v12;
  uint64_t *v13;
  __int128 v14;
  _QWORD v15[2];
  char v16;

  qword_1EF582B28 = 0;
  qword_1EF582B20 = 0;
  siri::dialogengine::GetDateTimeOverridesMap(void)::countryDateTimeOverrides = (uint64_t)&qword_1EF582B20;
  if (a2)
  {
    v2 = a1;
    v3 = 0;
    v4 = &a1[3 * a2];
    v5 = &qword_1EF582B20;
    while (v5 != &qword_1EF582B20)
    {
      if (v3)
      {
        do
        {
          v6 = (uint64_t *)v3;
          v3 = *(_QWORD *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        v7 = &qword_1EF582B20;
        do
        {
          v6 = (uint64_t *)v7[2];
          v8 = *v6 == (_QWORD)v7;
          v7 = v6;
        }
        while (v8);
      }
      v9 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF582B28, (const void **)v6 + 4, (const void **)v2);
      v3 = qword_1EF582B20;
      if (v9)
        goto LABEL_11;
      if (qword_1EF582B20)
      {
        v10 = &qword_1EF582B20;
        while (1)
        {
          while (1)
          {
            v6 = (uint64_t *)v3;
            v11 = (const void **)(v3 + 32);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF582B28, (const void **)v2, (const void **)(v3 + 32)))break;
            v3 = *v6;
            v10 = v6;
            if (!*v6)
              goto LABEL_24;
          }
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF582B28, v11, (const void **)v2))
            break;
          v10 = v6 + 1;
          v3 = v6[1];
          if (!v3)
            goto LABEL_24;
        }
LABEL_13:
        if (*v10)
          goto LABEL_30;
        goto LABEL_24;
      }
LABEL_23:
      v6 = &qword_1EF582B20;
      v10 = &qword_1EF582B20;
LABEL_24:
      v12 = (char *)operator new(0x50uLL);
      v13 = (uint64_t *)v12;
      v15[0] = v12;
      v15[1] = &qword_1EF582B20;
      v16 = 0;
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v12 + 32), *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
      }
      else
      {
        v14 = *v2;
        *((_QWORD *)v12 + 6) = *((_QWORD *)v2 + 2);
        *((_OWORD *)v12 + 2) = v14;
      }
      std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](v13 + 7, (_QWORD *)v2 + 3);
      v16 = 1;
      *v13 = 0;
      v13[1] = 0;
      v13[2] = (uint64_t)v6;
      *v10 = (uint64_t)v13;
      if (*(_QWORD *)siri::dialogengine::GetDateTimeOverridesMap(void)::countryDateTimeOverrides)
      {
        siri::dialogengine::GetDateTimeOverridesMap(void)::countryDateTimeOverrides = *(_QWORD *)siri::dialogengine::GetDateTimeOverridesMap(void)::countryDateTimeOverrides;
        v13 = (uint64_t *)*v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EF582B20, v13);
      ++qword_1EF582B28;
      v15[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
LABEL_30:
      v2 += 3;
      if (v2 == v4)
        return;
      v5 = (uint64_t *)siri::dialogengine::GetDateTimeOverridesMap(void)::countryDateTimeOverrides;
      v3 = qword_1EF582B20;
    }
    v6 = &qword_1EF582B20;
LABEL_11:
    if (v3)
    {
      v10 = v6 + 1;
      goto LABEL_13;
    }
    goto LABEL_23;
  }
}

void sub_1BFB0D650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>>>::destroy((_QWORD *)qword_1EF582B20);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::map<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void std::__tree<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t *std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>::map[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  a1[1] = 0;
  v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>,std::__map_value_compare<siri::dialogengine::DateTimeConstants,std::__value_type<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>,std::less<siri::dialogengine::DateTimeConstants>,true>,std::allocator<std::__value_type<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>>::__emplace_hint_unique_key_args<siri::dialogengine::DateTimeConstants,std::pair<siri::dialogengine::DateTimeConstants const,siri::dialogengine::DateTimeConstant> const&>(a1, v3, *((_DWORD *)v5 + 7), (uint64_t)v5 + 28);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1BFB0D844(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::IsDateTimeConstant(siri::dialogengine::Context *a1, char *a2, siri::dialogengine *a3, int a4)
{
  const char *v7;
  unint64_t v8;
  const siri::dialogengine::TimeStamp *v9;
  int ICUHour24;
  const siri::dialogengine::TimeStamp *v11;
  siri::dialogengine *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  _BOOL8 v25;
  std::string __p;
  void *v28[2];
  char v29;
  void *v30[2];
  unsigned __int8 v31;

  if (a1)
    siri::dialogengine::Context::GetLocale(a1, a2, (uint64_t)v30);
  else
    std::string::basic_string[abi:ne180100]<0>(v30, "");
  v8 = v31;
  if ((v31 & 0x80u) != 0)
    v8 = (unint64_t)v30[1];
  if (!v8)
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"IsDateTimeConstant has empty locale", v7);
  siri::dialogengine::GetLocaleCountry(&__p);
  siri::dialogengine::StringToUpper((uint64_t)&__p, (uint64_t)v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ICUHour24 = siri::dialogengine::GetICUHour24((siri::dialogengine *)a2, v9);
  v12 = (siri::dialogengine *)siri::dialogengine::GetICUHour24(a3, v11);
  v13 = (int)v12;
  siri::dialogengine::GetDateTimeOverridesMap(v12);
  v14 = std::__tree<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>>>::find<std::string>((const void **)v28);
  if (v14 == &qword_1EF582B20)
    goto LABEL_30;
  v16 = v14[8];
  v14 += 8;
  v15 = v16;
  if (!v16)
    goto LABEL_30;
  v17 = v14;
  do
  {
    v18 = *(_DWORD *)(v15 + 28);
    v19 = v18 < a4;
    if (v18 >= a4)
      v20 = (uint64_t *)v15;
    else
      v20 = (uint64_t *)(v15 + 8);
    if (!v19)
      v17 = (uint64_t *)v15;
    v15 = *v20;
  }
  while (*v20);
  if (v17 == v14 || *((_DWORD *)v17 + 7) > a4)
  {
LABEL_30:
    siri::dialogengine::GetBaseDateTimeConstantsMap((siri::dialogengine *)v14);
    v21 = qword_1EF582B40;
    if (!qword_1EF582B40)
      goto LABEL_33;
    v17 = &qword_1EF582B40;
    do
    {
      v22 = *(_DWORD *)(v21 + 28);
      v23 = v22 < a4;
      if (v22 >= a4)
        v24 = (uint64_t *)v21;
      else
        v24 = (uint64_t *)(v21 + 8);
      if (!v23)
        v17 = (uint64_t *)v21;
      v21 = *v24;
    }
    while (*v24);
    if (v17 == &qword_1EF582B40 || *((_DWORD *)v17 + 7) > a4)
      goto LABEL_33;
  }
  if (*((_DWORD *)v17 + 10) != ICUHour24)
LABEL_33:
    v25 = 0;
  else
    v25 = *((_DWORD *)v17 + 11) == v13;
  if (v29 < 0)
    operator delete(v28[0]);
  if ((char)v31 < 0)
    operator delete(v30[0]);
  return v25;
}

void sub_1BFB0D9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::IsAnyDateTimeConstant(siri::dialogengine *this, siri::dialogengine::Context *a2, siri::dialogengine::TimeStamp *a3, const siri::dialogengine::TimeStamp *a4)
{
  const char *v6;
  unint64_t v7;
  const siri::dialogengine::TimeStamp *v8;
  int ICUHour24;
  const siri::dialogengine::TimeStamp *v10;
  siri::dialogengine *v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  std::string __p;
  void *v29[2];
  char v30;
  void *v31[2];
  unsigned __int8 v32;

  if (this)
    siri::dialogengine::Context::GetLocale(this, (const char *)a2, (uint64_t)v31);
  else
    std::string::basic_string[abi:ne180100]<0>(v31, "");
  v7 = v32;
  if ((v32 & 0x80u) != 0)
    v7 = (unint64_t)v31[1];
  if (!v7)
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"IsAnyDateTimeConstant has empty locale", v6);
  siri::dialogengine::GetLocaleCountry(&__p);
  siri::dialogengine::StringToUpper((uint64_t)&__p, (uint64_t)v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ICUHour24 = siri::dialogengine::GetICUHour24(a2, v8);
  v11 = (siri::dialogengine *)siri::dialogengine::GetICUHour24(a3, v10);
  v12 = (int)v11;
  siri::dialogengine::GetDateTimeOverridesMap(v11);
  v13 = 0;
  while (1)
  {
    v14 = std::__tree<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<siri::dialogengine::DateTimeConstants,siri::dialogengine::DateTimeConstant>>>>::find<std::string>((const void **)v29);
    if (v14 != &qword_1EF582B20)
    {
      v16 = v14[8];
      v14 += 8;
      v15 = v16;
      if (v16)
      {
        v17 = v14;
        do
        {
          v18 = *(_DWORD *)(v15 + 28);
          v19 = v18 < v13;
          if (v18 >= v13)
            v20 = (uint64_t *)v15;
          else
            v20 = (uint64_t *)(v15 + 8);
          if (!v19)
            v17 = (uint64_t *)v15;
          v15 = *v20;
        }
        while (*v20);
        if (v17 != v14
          && v13 >= *((_DWORD *)v17 + 7)
          && *((_DWORD *)v17 + 10) == ICUHour24
          && *((_DWORD *)v17 + 11) == v12)
        {
          break;
        }
      }
    }
    siri::dialogengine::GetBaseDateTimeConstantsMap((siri::dialogengine *)v14);
    v21 = qword_1EF582B40;
    if (qword_1EF582B40)
    {
      v22 = &qword_1EF582B40;
      do
      {
        v23 = *(_DWORD *)(v21 + 28);
        v24 = v23 < v13;
        if (v23 >= v13)
          v25 = (uint64_t *)v21;
        else
          v25 = (uint64_t *)(v21 + 8);
        if (!v24)
          v22 = (uint64_t *)v21;
        v21 = *v25;
      }
      while (*v25);
      if (v22 != &qword_1EF582B40
        && v13 >= *((_DWORD *)v22 + 7)
        && *((_DWORD *)v22 + 10) == ICUHour24
        && *((_DWORD *)v22 + 11) == v12)
      {
        break;
      }
    }
    if (++v13 == 16)
    {
      v26 = 0;
      goto LABEL_38;
    }
  }
  v26 = 1;
LABEL_38:
  if (v30 < 0)
    operator delete(v29[0]);
  if ((char)v32 < 0)
    operator delete(v31[0]);
  return v26;
}

void sub_1BFB0DC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::WritePatternXmlFile(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  std::string __p;
  uint64_t v17[2];

  v5 = (std::__shared_weak_count *)a1[1];
  v17[0] = *a1;
  v17[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v12, ".patternxml");
  siri::dialogengine::PatternIdToPath(a3, (uint64_t)v12, v14);
  siri::dialogengine::JoinPath(a2, (uint64_t)v14, (uint64_t)&__p);
  v8 = siri::dialogengine::WritePatternXmlFile(v17, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v8;
}

void sub_1BFB0DD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v27 - 48);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::WritePatternXmlFile(uint64_t *a1, std::string *__str)
{
  std::string::size_type size;
  std::string *v5;
  xmlTextWriter *v6;
  const char *v7;
  xmlTextWriter *v8;
  _xmlTextWriter *v9;
  _BOOL4 started;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  const char *v14;
  __int128 v15;
  const char *v16;
  const xmlChar *v17;
  const char *v18;
  uint64_t v19;
  std::string *v20;
  _BOOL4 v21;
  uint64_t v22;
  _BOOL4 v23;
  const char *v24;
  std::string::size_type v25;
  const char *v26;
  const xmlChar *v27;
  const char *v28;
  const xmlChar *v29;
  const char *v30;
  std::string *v31;
  std::string *v32;
  BOOL v33;
  std::string::size_type v34;
  const char *v35;
  BOOL v36;
  const char *v37;
  std::string::size_type v38;
  const char *v39;
  const xmlChar *v40;
  const char *v41;
  const xmlChar *v42;
  const char *v43;
  std::string *v44;
  std::string *v45;
  const char *v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  const char *v50;
  uint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  int v54;
  std::string::size_type v55;
  const char *v56;
  std::string *v57;
  _BOOL4 v58;
  _BOOL4 v59;
  std::string *p_p;
  _BOOL4 v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  std::string *v67;
  _BOOL4 v68;
  std::string::size_type v69;
  const char *v70;
  std::string *v71;
  std::string *v72;
  const char *v73;
  char *v74;
  xmlTextWriter *v75;
  char v77;
  std::string *v78;
  std::string __p;
  std::string v80;
  void *v81[2];
  int64_t v82;
  xmlTextWriterPtr writer;
  std::string v84;

  siri::dialogengine::DirName(__str, (uint64_t)&v84);
  if (!siri::dialogengine::DirExists((uint64_t *)&v84))
  {
    size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v84.__r_.__value_.__l.__size_;
    if (size)
      siri::dialogengine::CreateDir(&v84, 504);
  }
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = __str;
  else
    v5 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v6 = xmlNewTextWriterFilename((const char *)v5, 0);
  v8 = v6;
  writer = v6;
  if (!v6)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to create xmlWriter", v7);
    v12 = 0;
    goto LABEL_177;
  }
  xmlTextWriterSetIndent(v6, 1);
  xmlTextWriterSetIndentString(v8, (const xmlChar *)"  ");
  started = siri::dialogengine::StartXmlDocument(v8, v9);
  v11 = *a1;
  if (*(char *)(*a1 + 159) < 0)
    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(v11 + 136), *(_QWORD *)(v11 + 144));
  else
    v80 = *(std::string *)(v11 + 136);
  v13 = std::string::insert(&v80, 0, "urn:apple:names:siri:pattern:");
  v15 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v82 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)v81 = v15;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v80.__r_.__value_.__l.__data_);
    if (!started)
    {
LABEL_35:
      v23 = 0;
      goto LABEL_36;
    }
  }
  else if (!started)
  {
    goto LABEL_35;
  }
  if (!siri::dialogengine::StartXmlElement(v8, (const xmlChar *)"pattern", v14))
    goto LABEL_35;
  v17 = v82 >= 0 ? (const xmlChar *)v81 : (const xmlChar *)v81[0];
  if (!siri::dialogengine::WriteXmlAttribute(v8, (const xmlChar *)"xmlns", v17, v16))
    goto LABEL_35;
  v19 = *a1;
  if (*(char *)(*a1 + 87) < 0)
    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(v19 + 64), *(_QWORD *)(v19 + 72));
  else
    v80 = *(std::string *)(v19 + 64);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v80;
  else
    v20 = (std::string *)v80.__r_.__value_.__r.__words[0];
  if (v20->__r_.__value_.__s.__data_[0])
  {
    v21 = siri::dialogengine::WriteXmlAttribute(v8, (const xmlChar *)"id", (const xmlChar *)v20, v18);
    if ((*((_BYTE *)&v80.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  v21 = 1;
  if ((*((_BYTE *)&v80.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_31:
    operator delete(v80.__r_.__value_.__l.__data_);
LABEL_32:
  if (!v21)
    goto LABEL_35;
  v22 = *a1;
  if (*(char *)(*a1 + 135) < 0)
    std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(v22 + 112), *(_QWORD *)(v22 + 120));
  else
    v80 = *(std::string *)(v22 + 112);
  v77 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v78 = &v80;
  else
    v78 = (std::string *)v80.__r_.__value_.__r.__words[0];
  if (v78->__r_.__value_.__s.__data_[0])
  {
    v23 = siri::dialogengine::WriteXmlAttribute(v8, (const xmlChar *)"type", (const xmlChar *)v78, v18);
    v77 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v23 = 1;
  }
  if (v77 < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
LABEL_36:
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v80, (const void ***)(*a1 + 184));
  v25 = v80.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v80.__r_.__value_.__l.__data_ != &v80.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      if (!v23 || !siri::dialogengine::StartXmlElement(v8, (const xmlChar *)"meta", v24))
        goto LABEL_48;
      v27 = (const xmlChar *)(v25 + 32);
      if (*(char *)(v25 + 55) < 0)
        v27 = *(const xmlChar **)v27;
      if (!siri::dialogengine::WriteXmlAttribute(v8, (const xmlChar *)"name", v27, v26))
        goto LABEL_48;
      v29 = (const xmlChar *)(v25 + 56);
      if (*(char *)(v25 + 79) < 0)
        v29 = *(const xmlChar **)v29;
      if (!siri::dialogengine::WriteXmlAttribute(v8, (const xmlChar *)"value", v29, v28))
        goto LABEL_48;
      if (xmlTextWriterEndElement(v8) == -1)
        break;
      v23 = 1;
LABEL_49:
      v31 = *(std::string **)(v25 + 8);
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (std::string *)v31->__r_.__value_.__r.__words[0];
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = *(std::string **)(v25 + 16);
          v33 = v32->__r_.__value_.__r.__words[0] == v25;
          v25 = (std::string::size_type)v32;
        }
        while (!v33);
      }
      v25 = (std::string::size_type)v32;
      if (v32 == (std::string *)&v80.__r_.__value_.__r.__words[1])
        goto LABEL_55;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v30);
LABEL_48:
    v23 = 0;
    goto LABEL_49;
  }
LABEL_55:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v80.__r_.__value_.__l.__size_);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v80, (const void ***)(*a1 + 160));
  v34 = v80.__r_.__value_.__r.__words[2];
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v80.__r_.__value_.__l.__size_);
  if (v34)
  {
    v36 = v23 && siri::dialogengine::StartXmlElement(v8, (const xmlChar *)"settings", v35);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v80, (const void ***)(*a1 + 160));
    v38 = v80.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v80.__r_.__value_.__l.__data_ != &v80.__r_.__value_.__r.__words[1])
    {
      while (1)
      {
        if (!v36 || !siri::dialogengine::StartXmlElement(v8, (const xmlChar *)"setting", v37))
          goto LABEL_71;
        v40 = (const xmlChar *)(v38 + 32);
        if (*(char *)(v38 + 55) < 0)
          v40 = *(const xmlChar **)v40;
        if (!siri::dialogengine::WriteXmlAttribute(v8, (const xmlChar *)"name", v40, v39))
          goto LABEL_71;
        v42 = (const xmlChar *)(v38 + 56);
        if (*(char *)(v38 + 79) < 0)
          v42 = *(const xmlChar **)v42;
        if (!siri::dialogengine::WriteXmlAttribute(v8, (const xmlChar *)"value", v42, v41))
          goto LABEL_71;
        if (xmlTextWriterEndElement(v8) == -1)
          break;
        v36 = 1;
LABEL_72:
        v44 = *(std::string **)(v38 + 8);
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = (std::string *)v44->__r_.__value_.__r.__words[0];
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = *(std::string **)(v38 + 16);
            v33 = v45->__r_.__value_.__r.__words[0] == v38;
            v38 = (std::string::size_type)v45;
          }
          while (!v33);
        }
        v38 = (std::string::size_type)v45;
        if (v45 == (std::string *)&v80.__r_.__value_.__r.__words[1])
          goto LABEL_78;
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v43);
LABEL_71:
      v36 = 0;
      goto LABEL_72;
    }
LABEL_78:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v80.__r_.__value_.__l.__size_);
    if (v36)
    {
      if (xmlTextWriterEndElement(v8) != -1)
      {
        v23 = 1;
        goto LABEL_83;
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v46);
    }
    v23 = 0;
  }
LABEL_83:
  std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100]((uint64_t)&v80, (const void ***)(*a1 + 208));
  v47 = v80.__r_.__value_.__r.__words[2];
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v80.__r_.__value_.__l.__size_);
  if (v47)
  {
    std::map<std::string,std::shared_ptr<siri::dialogengine::PatternGroup>>::map[abi:ne180100]((uint64_t)&v80, (const void ***)(*a1 + 208));
    v49 = v80.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v80.__r_.__value_.__l.__data_ != &v80.__r_.__value_.__r.__words[1])
    {
      do
      {
        if (!v23 || !siri::dialogengine::StartXmlElement(v8, (const xmlChar *)"group", (const char *)v48))
        {
          v52 = 0;
          goto LABEL_90;
        }
        v51 = *(_QWORD *)(v49 + 56);
        if (*(char *)(v51 + 87) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v51 + 64), *(_QWORD *)(v51 + 72));
        else
          __p = *(std::string *)(v51 + 64);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v61 = siri::dialogengine::WriteXmlAttribute(v8, (const xmlChar *)"name", (const xmlChar *)p_p, v50);
        v52 = v61;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v52)
            goto LABEL_90;
        }
        else if (!v61)
        {
          goto LABEL_90;
        }
        v63 = *(_QWORD *)(v49 + 56);
        if (*(char *)(v63 + 159) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v63 + 136), *(_QWORD *)(v63 + 144));
        else
          __p = *(std::string *)(v63 + 136);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &__p;
        else
          v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v48->__r_.__value_.__s.__data_[0])
        {
          v52 = siri::dialogengine::WriteXmlAttribute(v8, (const xmlChar *)"pattern", (const xmlChar *)v48, v62);
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_90;
        }
        else
        {
          v52 = 1;
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_90;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_90:
        v53 = *(_QWORD *)(v49 + 56);
        if (*(char *)(v53 + 111) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v53 + 88), *(_QWORD *)(v53 + 96));
        else
          __p = *(std::string *)(v53 + 88);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v55 = __p.__r_.__value_.__l.__size_;
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v55)
            v54 = 0;
          else
            v54 = v52;
          if (v55)
          {
LABEL_103:
            if (!v52)
              goto LABEL_135;
            if (!siri::dialogengine::StartXmlElement(v8, (const xmlChar *)"dialog", (const char *)v48))
              goto LABEL_134;
            siri::dialogengine::PatternGroup::GetDialogIdWithComponent(*(siri::dialogengine::PatternGroup **)(v49 + 56), &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &__p;
            else
              v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v58 = siri::dialogengine::WriteXmlAttribute(v8, (const xmlChar *)"id", (const xmlChar *)v57, v56);
            v59 = v58;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if (!v59)
              {
LABEL_134:
                v54 = 0;
                goto LABEL_135;
              }
            }
            else if (!v58)
            {
              goto LABEL_134;
            }
            if (xmlTextWriterEndElement(v8) != -1)
            {
              v54 = 1;
              goto LABEL_135;
            }
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v64);
            goto LABEL_134;
          }
        }
        else
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
            v54 = 0;
          else
            v54 = v52;
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
            goto LABEL_103;
        }
LABEL_135:
        v65 = *(_QWORD *)(v49 + 56);
        if (*(char *)(v65 + 135) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v65 + 112), *(_QWORD *)(v65 + 120));
        else
          __p = *(std::string *)(v65 + 112);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v69 = __p.__r_.__value_.__l.__size_;
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v69)
          {
LABEL_149:
            if (!v54)
              goto LABEL_156;
            goto LABEL_153;
          }
        }
        else if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
        {
          goto LABEL_149;
        }
        if (!v54 || !siri::dialogengine::StartXmlElement(v8, (const xmlChar *)"visual", (const char *)v48))
          goto LABEL_156;
        siri::dialogengine::PatternGroup::GetVisualIdWithComponent(*(siri::dialogengine::PatternGroup **)(v49 + 56), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = &__p;
        else
          v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v68 = siri::dialogengine::WriteXmlAttribute(v8, (const xmlChar *)"id", (const xmlChar *)v67, v66);
        v23 = v68;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v23)
            goto LABEL_157;
        }
        else if (!v68)
        {
          goto LABEL_157;
        }
        if (xmlTextWriterEndElement(v8) == -1)
          goto LABEL_155;
LABEL_153:
        if (xmlTextWriterEndElement(v8) == -1)
        {
LABEL_155:
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v70, __p.__r_.__value_.__r.__words[0]);
LABEL_156:
          LOBYTE(v23) = 0;
          goto LABEL_157;
        }
        LOBYTE(v23) = 1;
LABEL_157:
        v71 = *(std::string **)(v49 + 8);
        if (v71)
        {
          do
          {
            v72 = v71;
            v71 = (std::string *)v71->__r_.__value_.__r.__words[0];
          }
          while (v71);
        }
        else
        {
          do
          {
            v72 = *(std::string **)(v49 + 16);
            v33 = v72->__r_.__value_.__r.__words[0] == v49;
            v49 = (std::string::size_type)v72;
          }
          while (!v33);
        }
        v49 = (std::string::size_type)v72;
      }
      while (v72 != (std::string *)&v80.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v80.__r_.__value_.__l.__size_);
    if (!v23)
      goto LABEL_172;
  }
  else if (!v23)
  {
LABEL_172:
    v12 = 0;
    goto LABEL_173;
  }
  if (xmlTextWriterFullEndElement(v8) == -1)
  {
    v74 = "Error ending element.";
LABEL_171:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v74, v73, __p.__r_.__value_.__r.__words[0]);
    goto LABEL_172;
  }
  if (xmlTextWriterEndDocument(v8) == -1)
  {
    v74 = "Error while Ending Document.";
    goto LABEL_171;
  }
  v12 = 1;
LABEL_173:
  xmlTextWriterFlush(v8);
  if (SHIBYTE(v82) < 0)
    operator delete(v81[0]);
  v75 = writer;
  writer = 0;
  if (v75)
    xmlFreeTextWriter(v75);
LABEL_177:
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1BFB0E6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,xmlTextWriter *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a28 < 0)
    operator delete(__p);
  std::unique_ptr<_xmlTextWriter,siri::dialogengine::xmlTextWriterDeleter>::reset[abi:ne180100](&a30);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(a1);
}

void sub_1BFB0E860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFB0EA78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BFB0EB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BFB0EC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_1BFB0ED70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BFB0EE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_1BFB0EF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BFB0F1A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va1);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property__25473(_QWORD *a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](a1, *a2, a2[1]);
}

_QWORD *__copy_helper_atomic_property__25474(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__shared_ptr_emplace<siri::dialogengine::Variable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79358E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::Variable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79358E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::Variable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void siri::dialogengine::ExecuteSharedCat(_QWORD *a1@<X0>, uint64_t a2@<X1>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  const char *v8;
  uint64_t i;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  siri::dialogengine *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  siri::dialogengine::Context *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  const char *v32;
  const char *v33;
  std::string *v34;
  int data;
  int v36;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  void *v46[2];
  char v47;
  std::string v48;
  std::string v49;
  __int128 v50;
  std::string v51;
  std::string v52;
  siri::dialogengine *v53[2];
  std::string v54;
  _QWORD v55[3];
  std::string v56;
  void *__p;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  __int16 v62;
  const void **v63;
  std::string v64;
  std::string v65;
  __int128 v66;
  _QWORD v67[3];
  __int128 v68;
  uint64_t v69;
  int v70;
  __int128 v71;
  _QWORD v72[3];
  __int128 v73;
  _QWORD v74[3];
  __int128 v75;
  _QWORD v76[3];
  _OWORD v77[3];
  unsigned int v78;
  __int16 v79;
  _BYTE v80[208];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::GetSharedTemplateDir(0, (siri::dialogengine::UpdatableDir *)&v56);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v64, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  else
    v64 = v56;
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  if (v58 < 0)
    operator delete(__p);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v64.__r_.__value_.__l.__size_)
      goto LABEL_10;
  }
  else if (*((_BYTE *)&v64.__r_.__value_.__s + 23))
  {
LABEL_10:
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v56, (const siri::dialogengine::RequestInfo *)(a1 + 1));
    siri::dialogengine::CreateJSONStringVal((uint64_t)&v64, (uint64_t *)&v52);
    std::string::basic_string[abi:ne180100]<0>(&v65, "templateDir");
    v66 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
    siri::dialogengine::CreateJSONStringVal(a2, (uint64_t *)&v51);
    std::string::basic_string[abi:ne180100]<0>(v67, "catId");
    v68 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = 0uLL;
    siri::dialogengine::Context::GetLocale((siri::dialogengine::Context *)a1, v8, (uint64_t)&v54);
    siri::dialogengine::CreateJSONStringVal((uint64_t)&v54, (uint64_t *)&v49);
    std::string::basic_string[abi:ne180100]<0>(&v69, "locale");
    v71 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
    siri::dialogengine::CreateJSONObjectVal(a3, (uint64_t *)&v48);
    std::string::basic_string[abi:ne180100]<0>(v72, "parameters");
    v73 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0uLL;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v61 >> 3) & 1), (uint64_t *)v46);
    std::string::basic_string[abi:ne180100]<0>(v74, "enableUpdates");
    v75 = *(_OWORD *)v46;
    v46[0] = 0;
    v46[1] = 0;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v61 >> 8) & 1), (uint64_t *)v53);
    std::string::basic_string[abi:ne180100]<0>(v76, "isSpotlight");
    v77[0] = *(_OWORD *)v53;
    v53[0] = 0;
    v53[1] = 0;
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v55, (const void **)&v65.__r_.__value_.__l.__data_, 6);
    for (i = 0; i != -30; i -= 5)
    {
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v77 + i * 8);
      if (SHIBYTE(v76[i + 2]) < 0)
        operator delete((void *)v76[i]);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v11 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    std::operator+<char>();
    v13 = std::string::append(&v54, "'");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)&v65);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    siri::dialogengine::ConstructJSONString(v55, &v65);
    std::string::basic_string[abi:ne180100]<0>(&v54, "");
    std::string::basic_string[abi:ne180100]<0>(&v52, "");
    std::string::basic_string[abi:ne180100]<0>(&v51, "");
    siri::dialogengine::PrepareRequestFromJson(v53, &v65, &v54, &v52, &v51);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (!v53[0])
    {
      std::operator+<char>();
      v21 = std::string::append(&v54, "'");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v65, 3u);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      *(_QWORD *)(a4 + 160) = 0;
      *(_OWORD *)(a4 + 128) = 0u;
      *(_OWORD *)(a4 + 144) = 0u;
      *(_OWORD *)(a4 + 96) = 0u;
      *(_OWORD *)(a4 + 112) = 0u;
      *(_OWORD *)(a4 + 64) = 0u;
      *(_OWORD *)(a4 + 80) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      goto LABEL_80;
    }
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v65, (siri::dialogengine *)((char *)v53[0] + 8));
    v78 = v61;
    v79 = v62;
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v54, &v63);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)v80, (__int128 *)v54.__r_.__value_.__l.__data_, (__int128 *)&v54.__r_.__value_.__r.__words[1]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v54.__r_.__value_.__l.__size_);
    v80[192] = 1;
    siri::dialogengine::Context::SetRequestInfo((uint64_t)v53[0], (uint64_t)&v65);
    siri::dialogengine::RequestInfo::~RequestInfo((void **)&v65.__r_.__value_.__l.__data_);
    v15 = v53[0];
    *((_QWORD *)v53[0] + 99) = a1[99];
    v16 = a1[433];
    if (v16)
    {
      v18 = *(_QWORD *)(v16 + 72);
      v17 = *(_QWORD *)(v16 + 80);
    }
    else
    {
      v18 = a1[437];
      v17 = a1[438];
    }
    *(_QWORD *)&v50 = v18;
    *((_QWORD *)&v50 + 1) = v17;
    if (v17)
    {
      v23 = (unint64_t *)(v17 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    siri::dialogengine::Context::SetSemanticModelCache((uint64_t)v15, &v50);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    siri::dialogengine::GenerateResponse((uint64_t *)&v54, v53[0], v25);
    std::operator+<char>();
    v29 = std::string::append(&v52, "'");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)&v65);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)&v65);
    v31 = &v54;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = (std::string *)v54.__r_.__value_.__r.__words[0];
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<0u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>((uint64_t)&v65, (uint64_t)&v52);
    if (v70)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error: shared CAT execution returned invalid JSON response", v32);
      *(_QWORD *)(a4 + 160) = 0;
      *(_OWORD *)(a4 + 128) = 0u;
      *(_OWORD *)(a4 + 144) = 0u;
      *(_OWORD *)(a4 + 96) = 0u;
      *(_OWORD *)(a4 + 112) = 0u;
      *(_OWORD *)(a4 + 64) = 0u;
      *(_OWORD *)(a4 + 80) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
LABEL_78:
      rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&v65);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
LABEL_80:
      v38 = (std::__shared_weak_count *)v53[1];
      if (v53[1])
      {
        v39 = (unint64_t *)((char *)v53[1] + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v55[1]);
      siri::dialogengine::RequestInfo::~RequestInfo((void **)&v56.__r_.__value_.__l.__data_);
      goto LABEL_86;
    }
    std::string::basic_string[abi:ne180100]<0>(&v51, "status");
    siri::dialogengine::ParseJSONString((unsigned int *)&v65, (const char *)&v51, &v52);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v52.__r_.__value_.__l.__size_ != 7)
        goto LABEL_75;
      v34 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) != 7)
        goto LABEL_75;
      v34 = &v52;
    }
    data = (int)v34->__r_.__value_.__l.__data_;
    v36 = *(_DWORD *)((char *)v34->__r_.__value_.__r.__words + 3);
    if (data == 1667462515 && v36 == 1936942435)
    {
      memset(&v51, 0, sizeof(v51));
      memset(&v49, 0, sizeof(v49));
      v41 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)&v65, "response");
      if (*(_WORD *)(v41 + 22) == 4)
      {
        if (*(_DWORD *)v41)
        {
          v43 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](v41, 0);
          v44 = (unsigned int *)v43;
          if (*(_WORD *)(v43 + 22) == 3
            && rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v43, "content"))
          {
            v45 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v44, "content");
            if (*(_WORD *)(v45 + 22) == 3)
            {
              std::string::basic_string[abi:ne180100]<0>(v46, "print");
              siri::dialogengine::ParseJSONString((unsigned int *)v45, (const char *)v46, &v48);
              if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v51.__r_.__value_.__l.__data_);
              v51 = v48;
              *((_BYTE *)&v48.__r_.__value_.__s + 23) = 0;
              v48.__r_.__value_.__s.__data_[0] = 0;
              if (v47 < 0)
                operator delete(v46[0]);
              std::string::basic_string[abi:ne180100]<0>(v46, "speak");
              siri::dialogengine::ParseJSONString((unsigned int *)v45, (const char *)v46, &v48);
              if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v49.__r_.__value_.__l.__data_);
              v49 = v48;
              *((_BYTE *)&v48.__r_.__value_.__s + 23) = 0;
              v48.__r_.__value_.__s.__data_[0] = 0;
              if (v47 < 0)
                operator delete(v46[0]);
              siri::dialogengine::SpeakableString::SpeakableString(a4, &v51, &v49);
            }
          }
        }
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error: cannot parse response from shared CAT execution", v42);
      *(_QWORD *)(a4 + 160) = 0;
      *(_OWORD *)(a4 + 128) = 0u;
      *(_OWORD *)(a4 + 144) = 0u;
      *(_OWORD *)(a4 + 96) = 0u;
      *(_OWORD *)(a4 + 112) = 0u;
      *(_OWORD *)(a4 + 64) = 0u;
      *(_OWORD *)(a4 + 80) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      goto LABEL_76;
    }
LABEL_75:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error: shared CAT execution returned invalid JSON response", v33);
    *(_QWORD *)(a4 + 160) = 0;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
LABEL_76:
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    goto LABEL_78;
  }
  std::operator+<char>();
  v19 = std::string::append(&v65, "'");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v56, 3u);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  *(_QWORD *)(a4 + 160) = 0;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
LABEL_86:
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
}

void sub_1BFB0FBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  if (a14 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a34 < 0)
    operator delete(a29);
  if (a41 < 0)
    operator delete(a36);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&STACK[0x300]);
  if (a50 < 0)
    operator delete(a45);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)a52);
  siri::dialogengine::RequestInfo::~RequestInfo(&a54);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void sub_1BFB0FF38()
{
  JUMPOUT(0x1BFB0FF30);
}

void siri::dialogengine::PreloadSharedCat(const std::string *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t i;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *__p;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  const void **v26[3];
  uint64_t v27;
  std::__shared_weak_count *v28;
  _QWORD v29[63];
  _QWORD v30[376];
  const void *v31[2];
  char v32;
  __int128 v33;
  _QWORD v34[3];
  __int128 v35;
  _QWORD v36[3];
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::Context::Context((siri::dialogengine::Context *)v29);
  std::allocate_shared[abi:ne180100]<siri::dialogengine::File,std::allocator<siri::dialogengine::File>,std::string const&,void>(&v27, a1);
  v2 = v28;
  std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v30, v27, (uint64_t)v28);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)1, (uint64_t *)&v25);
  std::string::basic_string[abi:ne180100]<0>(v31, "hours");
  v33 = v25;
  v25 = 0uLL;
  siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)2, (uint64_t *)&v24);
  std::string::basic_string[abi:ne180100]<0>(v34, "minutes");
  v35 = v24;
  v24 = 0uLL;
  siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)3, (uint64_t *)&v23);
  std::string::basic_string[abi:ne180100]<0>(v36, "seconds");
  v37 = v23;
  v23 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v26, v31, 3);
  for (i = 0; i != -15; i -= 5)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v37 + i * 8);
    if (SHIBYTE(v36[i + 2]) < 0)
      operator delete((void *)v36[i]);
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v31, "dateTime#hoursMinutesSeconds");
  siri::dialogengine::ExecuteSharedCat(v29, (uint64_t)v31, v26, (uint64_t)&v9);
  if (v22 < 0)
    operator delete(__p);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v32 < 0)
    operator delete((void *)v31[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v26[1]);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v29);
}

void sub_1BFB101B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,_QWORD *a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 153) < 0)
    operator delete(*(void **)(v42 - 176));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a38);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a42);
  _Unwind_Resume(a1);
}

void sub_1BFB10288()
{
  JUMPOUT(0x1BFB10280);
}

void InitDefaultsscc_info_LongItem_Text_LongItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/LongItem.pb.cc", a4);
  SnippetUI::LongItem_Text::LongItem_Text((SnippetUI::LongItem_Text *)&SnippetUI::_LongItem_Text_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_LongItem_Text_default_instance_, v4);
  qword_1ED1D3E20 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D3E28 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::LongItem_Text *SnippetUI::LongItem_Text::LongItem_Text(SnippetUI::LongItem_Text *this)
{
  *(_QWORD *)this = &off_1E79359A8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_LongItem_Text_LongItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_LongItem_Text_LongItem_2eproto);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFB10360(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::LongItem_Text::~LongItem_Text(SnippetUI::LongItem_Text *this)
{
  SnippetUI::LongItem_Text::~LongItem_Text(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E79359A8;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::LongItem_Text *)&SnippetUI::_LongItem_Text_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::LongItem_Text *SnippetUI::LongItem_Text::New(SnippetUI::LongItem_Text *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::LongItem_Text>(0);
}

SnippetUI::LongItem_Text *SnippetUI::LongItem_Text::New(SnippetUI::LongItem_Text *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::LongItem_Text>(a2);
}

void SnippetUI::LongItem_Text::Clear(SnippetUI::LongItem_Text *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArena *v5;
  char v6;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = *((_BYTE *)this + 8);
  v5 = (SnippetUI::LongItem_Text *)((char *)this + 8);
  *((_QWORD *)v5 + 3) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
}

uint64_t SnippetUI::LongItem_Text::IsInitialized(SnippetUI::LongItem_Text *this)
{
  return 1;
}

char *SnippetUI::LongItem_Text::ByteSizeLong(SnippetUI::LongItem_Text *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::ActionProperty *v8;
  char *v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::LongItem_Text *)&SnippetUI::_LongItem_Text_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::LongItem_Text *)((char *)this + 8), v5, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::LongItem_Text::GetCachedSize(SnippetUI::LongItem_Text *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::LongItem_Text::_InternalParse(SnippetUI::LongItem_Text *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  unsigned int v10;
  char *v13;
  std::string *v14;
  SnippetUI::ActionProperty *v15;
  SnippetUI::TextProperty *v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v18;
    TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
    v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    v18 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.LongItem_Text.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 4) = v15;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
      if (!v16)
      {
        v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v16;
        TagFallback = v18;
      }
      v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v16, TagFallback);
      goto LABEL_29;
    }
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      break;
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    v18 = (google::protobuf::internal *)v13;
    if (!v13)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::LongItem_Text::InternalSerializeWithCachedSizesToArray(SnippetUI::LongItem_Text *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::ActionProperty *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  google::protobuf::internal *v24;
  const char *v25;
  uint64_t v26;

  v5 = (char *)a2;
  if (this == (SnippetUI::LongItem_Text *)&SnippetUI::_LongItem_Text_default_instance_)
    goto LABEL_25;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((_QWORD *)v24 + 1);
    if (!v25)
      goto LABEL_31;
    v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((_BYTE *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.LongItem_Text.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 2), v5);
  }
LABEL_31:
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::LongItem_Text::CopyFrom(SnippetUI::LongItem_Text *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::LongItem_Text::Clear(this);
    SnippetUI::LongItem_Text::MergeFrom(this, a2);
  }
}

void SnippetUI::LongItem_Text::MergeFrom(SnippetUI::LongItem_Text *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::LongItem_Text *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/LongItem.pb.cc", 325);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::LongItem_Text::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFB109EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::LongItem_Text::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::LongItem_Text::GetMetadata(SnippetUI::LongItem_Text *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_LongItem_2eproto);
  return file_level_metadata_LongItem_2eproto;
}

void *SnippetUI::LongItem_Text::default_instance(SnippetUI::LongItem_Text *this)
{
  if (atomic_load(scc_info_LongItem_Text_LongItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_LongItem_Text_LongItem_2eproto);
  return &SnippetUI::_LongItem_Text_default_instance_;
}

void SnippetUI::LongItem_Text::MergeFrom(SnippetUI::LongItem_Text *this, const SnippetUI::LongItem_Text *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/LongItem.pb.cc", 340);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::LongItem_Text *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::LongItem_Text *)&SnippetUI::_LongItem_Text_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1BFB10BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::LongItem_Text *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::LongItem_Text>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::LongItem_Text *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::LongItem_Text *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::LongItem_Text>);
    SnippetUI::LongItem_Text::LongItem_Text(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::LongItem_Text *)operator new();
    SnippetUI::LongItem_Text::LongItem_Text(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFB10C48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::LongItem_Text>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::LongItem_Text::InitAsDefaultInstance(SnippetUI::LongItem_Text *this)
{
  qword_1ED1D3E20 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D3E28 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::LongItem_Text::_Internal::text_1(SnippetUI::LongItem_Text::_Internal *this, const SnippetUI::LongItem_Text *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::LongItem_Text::_Internal::action(SnippetUI::LongItem_Text::_Internal *this, const SnippetUI::LongItem_Text *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::LongItem_Text::clear_text_1(SnippetUI::LongItem_Text *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::LongItem_Text::clear_action(SnippetUI::LongItem_Text *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

SnippetUI::LongItem_Text *SnippetUI::LongItem_Text::LongItem_Text(SnippetUI::LongItem_Text *this, const SnippetUI::LongItem_Text *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;

  *(_QWORD *)this = &off_1E79359A8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::LongItem_Text *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::LongItem_Text *)&SnippetUI::_LongItem_Text_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 4));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 4) = v9;
  return this;
}

void sub_1BFB10EDC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::LongItem_Text::CopyFrom(SnippetUI::LongItem_Text *this, const SnippetUI::LongItem_Text *a2)
{
  if (a2 != this)
  {
    SnippetUI::LongItem_Text::Clear(this);
    SnippetUI::LongItem_Text::MergeFrom(this, a2);
  }
}

void SnippetUI::LongItem_Text::InternalSwap(SnippetUI::LongItem_Text *this, SnippetUI::LongItem_Text *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::LongItem_Text *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
}

void siri::dialogengine::DialogStateServer::~DialogStateServer(siri::dialogengine::DialogStateServer *this)
{
  JUMPOUT(0x1C3B8D890);
}

void siri::dialogengine::DialogStateServer::GetUseCase(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t **v3;
  uint64_t **v4;
  std::string::size_type size;
  char v6;
  std::string *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *String;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  std::string::size_type i;
  char *v19;
  _BOOL4 v20;
  unsigned int *v21;
  double v22;
  uint64_t v23;
  _WORD *v24;
  uint64_t v25;
  double Double;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *__p[2];
  __int128 v34;
  std::string v35;
  std::string __str;
  std::string v37;
  std::string v38[3];
  int v39;
  std::string __s;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  a2[3] = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = a2 + 3;
  v3 = (uint64_t **)(a2 + 2);
  a2[4] = 0;
  a2[6] = 0;
  a2[5] = a2 + 6;
  v4 = (uint64_t **)(a2 + 5);
  a2[10] = 0;
  a2[9] = 0;
  a2[7] = 0;
  a2[8] = a2 + 9;
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v38, (const siri::dialogengine::RequestInfo *)(a1 + 8));
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v37, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v37 = __s;
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&v38[0].__r_.__value_.__l.__data_);
  siri::dialogengine::DecodeBase64((std::string::size_type)&v37, v38);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v37 = v38[0];
  size = HIBYTE(v38[0].__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v38[0].__r_.__value_.__r.__words[2]);
  if ((v38[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v37.__r_.__value_.__l.__size_;
  if (size)
  {
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)v38);
    v7 = &v37;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v37.__r_.__value_.__r.__words[0];
    __p[0] = v7;
    __p[1] = v7;
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<128u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>((uint64_t)v38, (uint64_t)__p);
    if (v39)
    {
LABEL_12:
      rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)v38);
      v6 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      goto LABEL_13;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "count");
    *a2 = siri::dialogengine::ParseJSONUint((unsigned int *)v38, (const char *)__p);
    if (SBYTE7(v34) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "timestamp");
    *((double *)a2 + 1) = siri::dialogengine::ParseJSONDouble((unsigned int *)v38, (const char *)__p);
    if (SBYTE7(v34) < 0)
      operator delete(__p[0]);
    if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v38, "lastRandomIds")&& *(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v38, "lastRandomIds")+ 22) == 4)
    {
      v8 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v38, "lastRandomIds");
      if (*((_WORD *)v8 + 11) != 4)
        __assert_rtn("GetArray", "document.h", 1723, "IsArray()");
      v9 = *v8;
      if ((_DWORD)v9)
      {
        v10 = *((_QWORD *)v8 + 1);
        v11 = 24 * v9;
        do
        {
          String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v10);
          std::string::basic_string[abi:ne180100]<0>(__p, String);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v3, (const void **)__p, (uint64_t)__p);
          if (SBYTE7(v34) < 0)
            operator delete(__p[0]);
          v10 += 24;
          v11 -= 24;
        }
        while (v11);
      }
    }
    if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v38, "allRandomIds")&& *(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v38, "allRandomIds")+ 22) == 4)
    {
      v13 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v38, "allRandomIds");
      if (*((_WORD *)v13 + 11) != 4)
        __assert_rtn("GetArray", "document.h", 1723, "IsArray()");
      v14 = *v13;
      if ((_DWORD)v14)
      {
        v15 = *((_QWORD *)v13 + 1);
        v16 = 24 * v14;
        do
        {
          v17 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v15);
          std::string::basic_string[abi:ne180100]<0>(__p, v17);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v4, (const void **)__p, (uint64_t)__p);
          if (SBYTE7(v34) < 0)
            operator delete(__p[0]);
          v15 += 24;
          v16 -= 24;
        }
        while (v16);
      }
    }
    if (HIWORD(v38[0].__r_.__value_.__r.__words[2]) != 3)
      __assert_rtn("MemberBegin", "document.h", 1161, "IsObject()");
    for (i = v38[0].__r_.__value_.__l.__size_; ; i += 48)
    {
      if (i == v38[0].__r_.__value_.__l.__size_ + 48 * LODWORD(v38[0].__r_.__value_.__l.__data_))
        goto LABEL_12;
      v19 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(i);
      std::string::basic_string[abi:ne180100]<0>(__p, v19);
      std::string::basic_string[abi:ne180100]<0>(&__str, "grounding_");
      v20 = siri::dialogengine::StringStartsWith((std::string *)__p, (unsigned __int8 *)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SBYTE7(v34) < 0)
      {
        operator delete(__p[0]);
        if (!v20)
          goto LABEL_69;
      }
      else if (!v20)
      {
        goto LABEL_69;
      }
      v34 = 0u;
      memset(&v35, 0, sizeof(v35));
      *(_OWORD *)__p = 0u;
      std::string::basic_string[abi:ne180100]<0>(v31, "text");
      siri::dialogengine::ParseJSONString((unsigned int *)(i + 24), (const char *)v31, &__str);
      std::string::operator=(&v35, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v32 < 0)
        operator delete(v31[0]);
      std::string::basic_string[abi:ne180100]<0>(&__str, "count");
      __p[0] = (void *)siri::dialogengine::ParseJSONUint((unsigned int *)(i + 24), (const char *)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)(i + 24), "timestamps")&& *(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)(i + 24), "timestamps")+ 22) == 4)
      {
        v21 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)(i + 24), "timestamps");
        if (*((_WORD *)v21 + 11) != 4)
          __assert_rtn("GetArray", "document.h", 1723, "IsArray()");
        v23 = *v21;
        if ((_DWORD)v23)
        {
          v24 = (_WORD *)*((_QWORD *)v21 + 1);
          v25 = 24 * v23;
          do
          {
            Double = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetDouble(v24, v22);
            siri::dialogengine::GroundingInfo::AddTimestamp((siri::dialogengine::GroundingInfo *)__p, Double);
            v24 += 12;
            v25 -= 24;
          }
          while (v25);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v31, v19);
      std::string::basic_string[abi:ne180100]<0>(v29, "grounding_");
      std::string::basic_string[abi:ne180100]<0>(v27, "");
      siri::dialogengine::StringReplace((uint64_t)v31, (char *)v29, (uint64_t)v27, 0, &__str);
      if (v28 < 0)
        operator delete(v27[0]);
      if (v30 < 0)
        operator delete(v29[0]);
      if (v32 < 0)
        operator delete(v31[0]);
      siri::dialogengine::DialogStateUseCase::SetGroundingUsage((uint64_t)a2, (__int128 *)&__str, (uint64_t)__p);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (__p[1])
      {
        *(void **)&v34 = __p[1];
        operator delete(__p[1]);
      }
LABEL_69:
      if (HIWORD(v38[0].__r_.__value_.__r.__words[2]) != 3)
        __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
    }
  }
LABEL_13:
  if (v6 < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
}

void sub_1BFB116D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  siri::dialogengine::DialogStateUseCase *v50;

  if (a33 < 0)
    operator delete(__p);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&a50);
  if (a49 < 0)
    operator delete(a44);
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase(v50);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogStateServer::GetFamily(uint64_t a1, uint64_t a2)
{
  std::string::size_type size;
  std::string *v3;
  uint64_t v4;
  std::string __p;
  std::string v7;
  void *v8[11];
  int v9;
  std::string __s;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v8, (const siri::dialogengine::RequestInfo *)(a2 + 8));
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    __p = __s;
  siri::dialogengine::DecodeBase64((std::string::size_type)&__p, &v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  siri::dialogengine::RequestInfo::~RequestInfo(v8);
  size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v7.__r_.__value_.__l.__size_;
  if (size)
  {
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)v8);
    v3 = &v7;
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v3 = (std::string *)v7.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v3;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v3;
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<128u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>((uint64_t)v8, (uint64_t)&__p);
    if (v9)
    {
      v4 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "count");
      LODWORD(v4) = siri::dialogengine::ParseJSONUint((unsigned int *)v8, (const char *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__p, "timestamp");
      siri::dialogengine::ParseJSONDouble((unsigned int *)v8, (const char *)&__p);
      v4 = v4;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)v8);
    if ((*((_BYTE *)&v7.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_20;
  }
  else
  {
    v4 = 0;
    if ((*((_BYTE *)&v7.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_20:
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1BFB119CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&a22);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogStateServer::GetPattern()
{
  return 0;
}

void siri::dialogengine::DialogStateServer::Update(int a1, siri::dialogengine::Context *this, double a3, unsigned __int8 *a4, const void ***a5, uint64_t *a6, uint64_t a7, _OWORD *a8)
{
  const char *v15;
  uint64_t v16;
  double v17;
  std::string::size_type v18;
  const char *v19;
  unsigned int v20;
  std::string *v21;
  std::string *v22;
  BOOL v23;
  std::string::size_type v24;
  const char *v25;
  unsigned int v26;
  std::string *v27;
  std::string *v28;
  std::string::size_type v29;
  void **v30;
  unsigned int v31;
  double *v32;
  void *v33;
  double *i;
  double v35;
  void **v36;
  unsigned int v37;
  std::string *v38;
  std::string *v39;
  char *String;
  std::string *v41;
  unsigned int v42;
  uint64_t v43;
  double v44;
  char *v45;
  std::string *v46;
  unsigned int v47;
  unsigned __int8 v48;
  uint64_t v50;
  _OWORD *v51;
  void *v52[2];
  char v53;
  std::string v54;
  std::string v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char v60;
  void *__p[2];
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t *v68;
  _BYTE v69[32];
  uint64_t v70;
  uint64_t v71;
  int v72;
  char v73;
  _OWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  const void **v79;
  char *v80;
  const void **v81;
  char *v82;
  const void **v83;
  __int128 v84;

  siri::dialogengine::Context::GetUseCaseState(this, (const char *)this, (uint64_t)&v78);
  *(_QWORD *)&v77 = siri::dialogengine::Context::GetFamilyState(this, v15);
  *((_QWORD *)&v77 + 1) = v16;
  siri::dialogengine::DialogStateBase::UpdateStats(a3, v77, (const void ***)this, a4, a5, (uint64_t)&v78, (uint64_t)&v77, 0);
  memset(v74, 0, sizeof(v74));
  v75 = 0;
  v76 = 256;
  memset(v69, 0, sizeof(v69));
  v68 = (uint64_t *)v74;
  v70 = 0;
  v71 = 512;
  v72 = 324;
  v73 = 0;
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v68);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)&v68, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v68, (uint64_t)"count", 5u);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(&v68, (rapidjson::internal *)v78);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)&v68, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v68, (uint64_t)"timestamp", 9u);
  v17 = *((double *)&v78 + 1);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)&v68, 6);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)&v68, v17);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)&v68, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v68, (uint64_t)"lastRandomIds", 0xDu);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)&v68);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v55, &v79);
  v18 = v55.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v55.__r_.__value_.__l.__data_ != &v55.__r_.__value_.__r.__words[1])
  {
    do
    {
      v19 = (const char *)(v18 + 32);
      if (*(char *)(v18 + 55) < 0)
        v19 = *(const char **)v19;
      v20 = strlen(v19);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v68, (uint64_t)v19, v20);
      v21 = *(std::string **)(v18 + 8);
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (std::string *)v21->__r_.__value_.__r.__words[0];
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = *(std::string **)(v18 + 16);
          v23 = v22->__r_.__value_.__r.__words[0] == v18;
          v18 = (std::string::size_type)v22;
        }
        while (!v23);
      }
      v18 = (std::string::size_type)v22;
    }
    while (v22 != (std::string *)&v55.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::string>::destroy((uint64_t)&v55, (char *)v55.__r_.__value_.__l.__size_);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)&v68);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)&v68, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v68, (uint64_t)"allRandomIds", 0xCu);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)&v68);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v55, &v81);
  v24 = v55.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v55.__r_.__value_.__l.__data_ != &v55.__r_.__value_.__r.__words[1])
  {
    do
    {
      v25 = (const char *)(v24 + 32);
      if (*(char *)(v24 + 55) < 0)
        v25 = *(const char **)v25;
      v26 = strlen(v25);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v68, (uint64_t)v25, v26);
      v27 = *(std::string **)(v24 + 8);
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = *(std::string **)(v24 + 16);
          v23 = v28->__r_.__value_.__r.__words[0] == v24;
          v24 = (std::string::size_type)v28;
        }
        while (!v23);
      }
      v24 = (std::string::size_type)v28;
    }
    while (v28 != (std::string *)&v55.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::string>::destroy((uint64_t)&v55, (char *)v55.__r_.__value_.__l.__size_);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)&v68);
  v50 = a7;
  v51 = a8;
  std::map<std::string,siri::dialogengine::GroundingInfo>::map[abi:ne180100]((uint64_t)&v55, &v83);
  v29 = v55.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v55.__r_.__value_.__l.__data_ != &v55.__r_.__value_.__r.__words[1])
  {
    do
    {
      std::operator+<char>();
      if ((SBYTE7(v62) & 0x80u) == 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      v31 = strlen((const char *)v30);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v68, (uint64_t)v30, v31);
      if (SBYTE7(v62) < 0)
        operator delete(__p[0]);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v68);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)&v68, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v68, (uint64_t)"count", 5u);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(&v68, (rapidjson::internal *)*(unsigned int *)(v29 + 56));
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)&v68, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v68, (uint64_t)"timestamps", 0xAu);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)&v68);
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v62 = 0;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(__p, *(const void **)(v29 + 64), *(_QWORD *)(v29 + 72), (uint64_t)(*(_QWORD *)(v29 + 72) - *(_QWORD *)(v29 + 64)) >> 3);
      v33 = __p[0];
      v32 = (double *)__p[1];
      for (i = (double *)__p[0]; i != v32; ++i)
      {
        v35 = *i;
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)&v68, 6);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)&v68, v35);
      }
      if (v33)
        operator delete(v33);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)&v68);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)&v68, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v68, (uint64_t)"text", 4u);
      if (*(char *)(v29 + 111) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v29 + 88), *(_QWORD *)(v29 + 96));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(v29 + 88);
        *(_QWORD *)&v62 = *(_QWORD *)(v29 + 104);
      }
      if ((SBYTE7(v62) & 0x80u) == 0)
        v36 = __p;
      else
        v36 = (void **)__p[0];
      v37 = strlen((const char *)v36);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v68, (uint64_t)v36, v37);
      if (SBYTE7(v62) < 0)
        operator delete(__p[0]);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v68);
      v38 = *(std::string **)(v29 + 8);
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (std::string *)v38->__r_.__value_.__r.__words[0];
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = *(std::string **)(v29 + 16);
          v23 = v39->__r_.__value_.__r.__words[0] == v29;
          v29 = (std::string::size_type)v39;
        }
        while (!v23);
      }
      v29 = (std::string::size_type)v39;
    }
    while (v39 != (std::string *)&v55.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((_QWORD *)v55.__r_.__value_.__l.__size_);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v68);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a6, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(a6, (uint64_t)"useCaseState", 0xCu);
  String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)v74);
  std::string::basic_string[abi:ne180100]<0>(__p, String);
  v41 = &v55;
  siri::dialogengine::EncodeBase64((uint64_t)__p, &v55);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v41 = (std::string *)v55.__r_.__value_.__r.__words[0];
  v42 = strlen((const char *)v41);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a6, (uint64_t)v41, v42);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SBYTE7(v62) < 0)
    operator delete(__p[0]);
  siri::dialogengine::GetFamilyIdFromCatId(a4, (uint64_t)&v65);
  v43 = v67;
  if ((v67 & 0x80u) != 0)
    v43 = v66;
  if (v43)
  {
    *(_OWORD *)__p = 0u;
    v62 = 0u;
    v63 = 0;
    v64 = 256;
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    *(_OWORD *)&v55.__r_.__value_.__r.__words[1] = 0u;
    v56 = 0u;
    v57 = 0;
    v58 = 512;
    v59 = 324;
    v60 = 0;
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v55);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)&v55, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v55, (uint64_t)"count", 5u);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint((uint64_t **)&v55, (rapidjson::internal *)v77);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)&v55, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v55, (uint64_t)"timestamp", 9u);
    v44 = *((double *)&v77 + 1);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)&v55, 6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)&v55, v44);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v55);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a6, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(a6, (uint64_t)"familyState", 0xBu);
    v45 = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)__p);
    std::string::basic_string[abi:ne180100]<0>(v52, v45);
    v46 = &v54;
    siri::dialogengine::EncodeBase64((uint64_t)v52, &v54);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v46 = (std::string *)v54.__r_.__value_.__r.__words[0];
    v47 = strlen((const char *)v46);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a6, (uint64_t)v46, v47);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (v53 < 0)
      operator delete(v52[0]);
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&v55.__r_.__value_.__l.__size_);
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)__p);
  }
  if (v50)
  {
    *(_OWORD *)v50 = v78;
    if (&v78 != (__int128 *)v50)
    {
      std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(v50 + 16), v79, &v80);
      std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(v50 + 40), v81, &v82);
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *> *,long>>(v50 + 64, (__int128 *)v83, &v84);
    }
  }
  v48 = v67;
  if (v51)
  {
    if ((v67 & 0x80u) == 0 ? v67 : v66)
      *v51 = v77;
  }
  if ((v48 & 0x80) != 0)
    operator delete(v65);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v69);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v74);
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((_QWORD *)v84);
  std::__tree<std::string>::destroy((uint64_t)&v81, v82);
  std::__tree<std::string>::destroy((uint64_t)&v79, v80);
}

void sub_1BFB12214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;
  uint64_t v59;

  if (a28 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(v58);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&a37);
  if (a49 < 0)
    operator delete(a44);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(a16);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&a58);
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)(v59 - 200));
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateServer::Clear(uint64_t a1, uint64_t a2)
{
  std::string __str;
  void *v4[55];
  std::string v5;
  std::string v6;

  if (a2)
  {
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v4, (const siri::dialogengine::RequestInfo *)(a2 + 8));
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    std::string::operator=(&v5, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    std::string::operator=(&v6, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    siri::dialogengine::Context::SetRequestInfo(a2, (uint64_t)v4);
    siri::dialogengine::RequestInfo::~RequestInfo(v4);
  }
}

void sub_1BFB1241C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  siri::dialogengine::RequestInfo::~RequestInfo(&a16);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::DialogStateServer::DialogStateServer(_QWORD *this)
{
  *this = &off_1E7935A80;
  return this;
}

{
  *this = &off_1E7935A80;
  return this;
}

uint64_t siri::dialogengine::DialogNumber::absoluteValue(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  const siri::dialogengine::Variable *v4;
  double *NumberVar;
  const char *v6;
  double v7;
  void **v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(v11, "absoluteValue");
  NumberVar = (double *)siri::dialogengine::getNumberVar(a2, v4);
  if (NumberVar)
  {
    v7 = fabs(NumberVar[9]);
    v8 = (void **)v11[0];
    if (v12 >= 0)
      v8 = v11;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"dialog.Number.%s: %f -> %f", v6, v8, *((_QWORD *)NumberVar + 9), *(_QWORD *)&v7);
    v9 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableNumber::VariableNumber(v9, &__p, v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = 0;
  }
  if (v12 < 0)
    operator delete(v11[0]);
  return v9;
}

void sub_1BFB1255C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v24, 0x10B3C4030AE2ACELL);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

void *siri::dialogengine::getNumberVar(siri::dialogengine *this, const siri::dialogengine::Variable *a2)
{
  void *result;

  if (!this
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Received a variable that's not a number", (const char *)a2);
    return 0;
  }
  return result;
}

std::string *siri::dialogengine::DialogNumber::asDigits(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  std::string *v5;
  void *__p[2];
  char v8;
  std::string v9;

  std::string::basic_string[abi:ne180100]<0>(&v9, "asDigits");
  std::string::basic_string[abi:ne180100]<0>(__p, "asDigits");
  v5 = siri::dialogengine::formatNumber(this, a2, &v9, (uint64_t *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFB1267C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::formatNumber(siri::dialogengine *a1, siri::dialogengine *this, const std::string *a3, uint64_t *a4)
{
  _QWORD *NumberVar;
  _QWORD *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  const char *v12;
  uint64_t *v13;
  std::string *p_p;
  std::string *v15;
  std::string __p;
  void *v18[2];
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;

  NumberVar = siri::dialogengine::getNumberVar(this, this);
  if (!NumberVar)
    return 0;
  v8 = NumberVar;
  siri::dialogengine::FormatNumber(a1, (uint64_t)NumberVar, a3, (uint64_t)v18);
  v9 = *((char *)a4 + 23);
  v10 = (uint64_t *)*a4;
  v11 = v8[9];
  siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)v18, &__p);
  if (v9 >= 0)
    v13 = a4;
  else
    v13 = v10;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"dialog.Number.%s: %f -> %s", v12, v13, v11, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v15, &__p, (const siri::dialogengine::SpeakableString *)v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18[0]);
  return v15;
}

void sub_1BFB1283C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  uint64_t v19;

  if (a18 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v19, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a19);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogNumber::asOrdinalDigits(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  std::string *v5;
  void *__p[2];
  char v8;
  std::string v9;

  std::string::basic_string[abi:ne180100]<0>(&v9, "asOrdinalDigits");
  std::string::basic_string[abi:ne180100]<0>(__p, "asOrdinalDigits");
  v5 = siri::dialogengine::formatNumber(this, a2, &v9, (uint64_t *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFB12930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogNumber::asSpokenWords(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  std::string *v5;
  void *__p[2];
  char v8;
  std::string v9;

  std::string::basic_string[abi:ne180100]<0>(&v9, "asSpokenWords");
  std::string::basic_string[abi:ne180100]<0>(__p, "asSpokenWords");
  v5 = siri::dialogengine::formatNumber(this, a2, &v9, (uint64_t *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFB129F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogNumber::asWords(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  std::string *v5;
  void *__p[2];
  char v8;
  std::string v9;

  std::string::basic_string[abi:ne180100]<0>(&v9, "asWords");
  std::string::basic_string[abi:ne180100]<0>(__p, "asWords");
  v5 = siri::dialogengine::formatNumber(this, a2, &v9, (uint64_t *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFB12AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogNumber::compactDecimalLong(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  const char *v4;
  uint64_t NumberVar;
  const char *v6;
  void **v7;
  std::string __p;
  void *v10[2];
  char v11;

  NumberVar = (uint64_t)siri::dialogengine::getNumberVar(a2, a2);
  if (NumberVar)
  {
    siri::dialogengine::Context::GetLocale(this, v4, (uint64_t)&__p);
    siri::dialogengine::GetICUCompactNumberFormatLong(v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = v10;
    if (v11 < 0)
      v7 = (void **)v10[0];
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"dialog.Number.compactDecimalLong: %f -> %s", v6, *(_QWORD *)(NumberVar + 72), v7);
    NumberVar = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableString::VariableString(NumberVar, &__p, (uint64_t)v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11 < 0)
      operator delete(v10[0]);
  }
  return NumberVar;
}

void sub_1BFB12BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v22, 0x10B3C40D3060B95);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogNumber::compactDecimalShort(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  const char *v4;
  const char *v5;
  void *__p[2];
  char v8;
  std::string v9;
  std::string v10;

  if (siri::dialogengine::getNumberVar(a2, a2))
  {
    siri::dialogengine::Context::GetLocale(this, v4, (uint64_t)__p);
    siri::dialogengine::GetICUCompactNumberFormatShort(&v10);
    if (v8 < 0)
      operator delete(__p[0]);
    siri::dialogengine::Context::GetLocale(this, v5, (uint64_t)__p);
    siri::dialogengine::GetICUCompactNumberFormatLong(&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)__p, &v10, &v9);
  }
  return 0;
}

void sub_1BFB12E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  if (a16 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v22, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a17);
  if (*(char *)(v23 - 73) < 0)
    operator delete(*(void **)(v23 - 96));
  if (*(char *)(v23 - 49) < 0)
    operator delete(*(void **)(v23 - 72));
  _Unwind_Resume(a1);
}

void sub_1BFB12ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    JUMPOUT(0x1BFB12EC0);
  JUMPOUT(0x1BFB12EC4);
}

uint64_t siri::dialogengine::DialogNumber::hasFraction(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  double *NumberVar;
  double v4;
  double v5;
  char *v6;
  const char *v7;
  std::string *p_p;
  uint64_t v9;
  std::string __p;

  NumberVar = (double *)siri::dialogengine::getNumberVar(a2, a2);
  if (!NumberVar)
    return 0;
  v4 = NumberVar[9];
  v5 = (double)(uint64_t)v4;
  if (v4 == v5)
    v6 = "false";
  else
    v6 = "true";
  std::string::basic_string[abi:ne180100]<0>(&__p, v6);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"dialog.Number.hasFraction: %f -> %s", v7, *(_QWORD *)&v4, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableBoolean::VariableBoolean(v9, &__p, v4 != v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1BFB12FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v17, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogNumber::round(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  uint64_t v4;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "round");
  v4 = siri::dialogengine::transformNumber(a2, (const siri::dialogengine::Variable *)siri::dialogengine::RoundToInteger, (uint64_t *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1BFB13088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::transformNumber(siri::dialogengine *a1, const siri::dialogengine::Variable *a2, uint64_t *a3)
{
  double *NumberVar;
  double *v6;
  const char *v7;
  double v8;
  uint64_t *v9;
  uint64_t v10;
  std::string __p;

  NumberVar = (double *)siri::dialogengine::getNumberVar(a1, a2);
  if (!NumberVar)
    return 0;
  v6 = NumberVar;
  v8 = ((double (*)(double))a2)(NumberVar[9]);
  if (*((char *)a3 + 23) >= 0)
    v9 = a3;
  else
    v9 = (uint64_t *)*a3;
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"dialog.Number.%s: %f -> %f", v7, v9, *((_QWORD *)v6 + 9), *(_QWORD *)&v8);
  v10 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v10, &__p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1BFB13174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v17, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogNumber::roundDown(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  uint64_t v4;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "roundDown");
  v4 = siri::dialogengine::transformNumber(a2, MEMORY[0x1E0C83410], (uint64_t *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1BFB13210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogNumber::roundToHundredths(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  uint64_t v4;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "roundToHundredths");
  v4 = siri::dialogengine::transformNumber(a2, (const siri::dialogengine::Variable *)siri::dialogengine::RoundToNearestHundredth, (uint64_t *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1BFB1328C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogNumber::roundToTenths(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  uint64_t v4;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "roundToTenths");
  v4 = siri::dialogengine::transformNumber(a2, (const siri::dialogengine::Variable *)siri::dialogengine::RoundToNearestTenth, (uint64_t *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1BFB13308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogNumber::roundUp(siri::dialogengine::DialogNumber *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  uint64_t v4;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "roundUp");
  v4 = siri::dialogengine::transformNumber(a2, MEMORY[0x1E0C825F8], (uint64_t *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1BFB13384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetCalendarType(uint64_t a1)
{
  BOOL v2;
  BOOL v3;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  _BOOL4 v14;
  void *__p[2];
  char v16;

  std::string::basic_string[abi:ne180100]<0>(__p, "GREGORIAN");
  v2 = siri::dialogengine::StringsEqual(a1, (uint64_t)__p);
  v3 = v2;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v3)
      return 0;
  }
  else if (v2)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "JULIAN");
  v5 = siri::dialogengine::StringsEqual(a1, (uint64_t)__p);
  v6 = v5;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v6)
      return 1;
  }
  else if (v5)
  {
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CHINESE");
  v7 = siri::dialogengine::StringsEqual(a1, (uint64_t)__p);
  v8 = v7;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v8)
      return 2;
  }
  else if (v7)
  {
    return 2;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "HIJRI");
  v9 = siri::dialogengine::StringsEqual(a1, (uint64_t)__p);
  v10 = v9;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v10)
      return 3;
  }
  else if (v9)
  {
    return 3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "HEBREW");
  v11 = siri::dialogengine::StringsEqual(a1, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v11)
    return 4;
  std::string::basic_string[abi:ne180100]<0>(__p, "JAPANESE");
  v12 = siri::dialogengine::StringsEqual(a1, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v12)
    return 5;
  std::string::basic_string[abi:ne180100]<0>(__p, "HINDU");
  v13 = siri::dialogengine::StringsEqual(a1, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v13)
    return 6;
  std::string::basic_string[abi:ne180100]<0>(__p, "BUDDHIST");
  v14 = siri::dialogengine::StringsEqual(a1, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v14)
    return 7;
  else
    return 8;
}

void sub_1BFB135B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::DateIsHoliday(siri::dialogengine *a1, uint64_t a2)
{
  const siri::dialogengine::TimeStamp *v4;
  _BOOL4 v5;
  int ICUYear;
  const siri::dialogengine::TimeStamp *v7;
  int ICUMonth;
  const siri::dialogengine::TimeStamp *v9;
  int ICUDayOfMonth;
  sqlite3 *v11;
  sqlite3 *v12;
  _BOOL4 v13;
  const siri::dialogengine::TimeStamp *v14;
  _BOOL4 v15;
  _BOOL4 v17;
  const siri::dialogengine::TimeStamp *v18;
  _BOOL4 v19;
  uint64_t DoesRowExist;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  sqlite3 *v26;
  int v27;
  int v28;
  const std::string *v29;
  unsigned __int16 *v30;
  int v31;
  int v32;
  const std::string *v33;
  std::string::size_type size;
  int data_low;
  int v38;
  _BOOL4 v40;
  const siri::dialogengine::TimeStamp *v41;
  _BOOL4 v42;
  siri::dialogengine *v43;
  const siri::dialogengine::TimeStamp *v44;
  int v45;
  const siri::dialogengine::TimeStamp *v46;
  int v47;
  const siri::dialogengine::TimeStamp *v48;
  int v49;
  const siri::dialogengine::TimeStamp *v50;
  int v51;
  const siri::dialogengine::TimeStamp *v52;
  int v53;
  const siri::dialogengine::TimeStamp *v54;
  int v55;
  sqlite3 *v56;
  const std::string *i;
  std::string::size_type v58;
  BOOL v59;
  BOOL v60;
  std::string *v61;
  _BOOL4 v62;
  _BOOL4 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  const std::string *v66;
  unsigned __int16 *v67;
  int v68;
  int v69;
  const std::string *v70;
  std::string::size_type v71;
  int v74;
  int v75;
  _BOOL4 v78;
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  BOOL v81;
  BOOL v82;
  std::string *v83;
  BOOL v84;
  BOOL v85;
  _BOOL4 v86;
  int64_t v87;
  int v88;
  sqlite3 *v89;
  uint64_t v90;
  const siri::dialogengine::TimeStamp *v91;
  _BOOL4 v92;
  _BOOL8 IsGregorianEaster;
  uint64_t v94;
  void **v95;
  void *v96;
  _BOOL4 v97;
  void *v99[2];
  char v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::vector<std::pair<std::string, std::string>> v104;
  std::string __p;
  std::string v106;
  void *v107;
  uint64_t v108;
  char *v109;
  std::string v110;
  std::string v111;
  std::string v112;
  std::string v113;
  std::string v114;
  _QWORD v115[3];
  __int128 v116;
  std::string v117;
  _QWORD v118[3];
  std::string v119;
  _QWORD v120[3];

  v120[0] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v114, "ramadan");
  v5 = siri::dialogengine::StringsEqual(a2, (uint64_t)&v114);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  if (v5)
  {
    ICUYear = siri::dialogengine::GetICUYear(a1, v4);
    std::to_string(&v113, ICUYear);
    ICUMonth = siri::dialogengine::GetICUMonth(a1, v7);
    std::to_string(&v112, ICUMonth);
    ICUDayOfMonth = siri::dialogengine::GetICUDayOfMonth(a1, v9);
    std::to_string(&v111, ICUDayOfMonth);
    siri::dialogengine::GetHolidayDatabaseFile(&v114);
    v11 = siri::dialogengine::OpenDatabase((const char *)&v114);
    v12 = v11;
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v114.__r_.__value_.__l.__data_);
      if (v12)
      {
LABEL_6:
        std::string::basic_string[abi:ne180100]<0>(&v114, "holiday");
        std::string::basic_string[abi:ne180100]<0>(v115, "thestartoframadan");
        std::string::basic_string[abi:ne180100]<0>(&v116, "country");
        std::string::basic_string[abi:ne180100]<0>(&v117, "default");
        std::string::basic_string[abi:ne180100]<0>(v118, "year");
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v119, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
        else
          v119 = v113;
        memset(&v110, 0, sizeof(v110));
        v107 = &v110;
        LOBYTE(v108) = 0;
        v110.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x90uLL);
        v110.__r_.__value_.__l.__size_ = v110.__r_.__value_.__r.__words[0];
        v110.__r_.__value_.__r.__words[2] = v110.__r_.__value_.__r.__words[0] + 144;
        v21 = 0;
        v110.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField*>((uint64_t)&v110.__r_.__value_.__r.__words[2], (uint64_t)&v114, (uint64_t)v120, (uint64_t)v110.__r_.__value_.__l.__data_);
        do
        {
          v22 = (void **)((char *)&v114.__r_.__value_.__l.__data_ + v21 * 8);
          if (SHIBYTE(v119.__r_.__value_.__r.__words[v21 + 2]) < 0)
            operator delete(v22[15]);
          if (*((char *)v22 + 119) < 0)
            operator delete(v22[12]);
          v21 -= 6;
        }
        while (v21 != -18);
        std::string::basic_string[abi:ne180100]<0>(&v114, "holiday");
        std::string::basic_string[abi:ne180100]<0>(v115, "endoframadan");
        std::string::basic_string[abi:ne180100]<0>(&v116, "country");
        std::string::basic_string[abi:ne180100]<0>(&v117, "default");
        std::string::basic_string[abi:ne180100]<0>(v118, "year");
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v119, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
        else
          v119 = v113;
        v107 = 0;
        v108 = 0;
        v109 = 0;
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
        v106.__r_.__value_.__s.__data_[8] = 0;
        v107 = operator new(0x90uLL);
        v108 = (uint64_t)v107;
        v109 = (char *)v107 + 144;
        v23 = 0;
        v108 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField*>((uint64_t)&v109, (uint64_t)&v114, (uint64_t)v120, (uint64_t)v107);
        do
        {
          v24 = (void **)((char *)&v114.__r_.__value_.__l.__data_ + v23 * 8);
          if (SHIBYTE(v119.__r_.__value_.__r.__words[v23 + 2]) < 0)
            operator delete(v24[15]);
          if (*((char *)v24 + 119) < 0)
            operator delete(v24[12]);
          v23 -= 6;
        }
        while (v23 != -18);
        std::string::basic_string[abi:ne180100]<0>(&v114, "month");
        std::string::basic_string[abi:ne180100]<0>(v115, "day");
        memset(&v106, 0, sizeof(v106));
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
        __p.__r_.__value_.__s.__data_[8] = 0;
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        v106.__r_.__value_.__l.__size_ = v106.__r_.__value_.__r.__words[0];
        v106.__r_.__value_.__r.__words[2] = v106.__r_.__value_.__r.__words[0] + 48;
        v25 = 0;
        v106.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v106.__r_.__value_.__r.__words[2], (__int128 *)&v114, &v116, (std::string *)v106.__r_.__value_.__l.__data_);
        do
        {
          if (SHIBYTE(v115[v25 + 2]) < 0)
            operator delete(*(void **)((char *)&v114 + v25 * 8 + 24));
          v25 -= 3;
        }
        while (v25 != -6);
        std::string::basic_string[abi:ne180100]<0>(&__p, "HOLIDAYS");
        siri::dialogengine::GetRows((const char *)&v110, (uint64_t)&__p, v12, (uint64_t *)&v106, &v114);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v104, "HOLIDAYS");
        siri::dialogengine::GetRows((const char *)&v107, (uint64_t)&v104, v12, (uint64_t *)&v106, &__p);
        if (SHIBYTE(v104.__end_cap_.__value_) < 0)
          operator delete(v104.__begin_);
        siri::dialogengine::CloseDatabase(v12, v26);
        if (v114.__r_.__value_.__l.__size_ - v114.__r_.__value_.__r.__words[0] == 24
          && __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] == 24)
        {
          v27 = siri::dialogengine::StringToInt(&v111, 0, 0);
          v28 = siri::dialogengine::StringToInt(&v112, 0, 0);
          v29 = *(const std::string **)v114.__r_.__value_.__l.__data_;
          v30 = *(unsigned __int16 **)(v114.__r_.__value_.__r.__words[0] + 8);
          if (*(unsigned __int16 **)v114.__r_.__value_.__l.__data_ != v30)
          {
            v31 = 0;
            v32 = 0;
            while (1)
            {
              if (SHIBYTE(v29->__r_.__value_.__r.__words[2]) < 0)
              {
                size = v29->__r_.__value_.__l.__size_;
                if (size == 3)
                {
                  v33 = (const std::string *)v29->__r_.__value_.__r.__words[0];
LABEL_65:
                  data_low = LOWORD(v33->__r_.__value_.__l.__data_);
                  v38 = v33->__r_.__value_.__s.__data_[2];
                  if (data_low == 24932 && v38 == 121)
                    v31 = siri::dialogengine::StringToInt(v29 + 1, 0, 0);
                  goto LABEL_71;
                }
                if (size == 5
                  && *(_DWORD *)v29->__r_.__value_.__l.__data_ == 1953394541
                  && *(_BYTE *)(v29->__r_.__value_.__r.__words[0] + 4) == 104)
                {
                  goto LABEL_63;
                }
              }
              else
              {
                if (*((_BYTE *)&v29->__r_.__value_.__s + 23) == 5)
                {
                  if (LODWORD(v29->__r_.__value_.__l.__data_) != 1953394541 || v29->__r_.__value_.__s.__data_[4] != 104)
                    goto LABEL_71;
LABEL_63:
                  v32 = siri::dialogengine::StringToInt(v29 + 1, 0, 0);
                  goto LABEL_71;
                }
                v33 = v29;
                if (*((_BYTE *)&v29->__r_.__value_.__s + 23) == 3)
                  goto LABEL_65;
              }
LABEL_71:
              v29 += 2;
              if (v29 == (const std::string *)v30)
                goto LABEL_119;
            }
          }
          v32 = 0;
          v31 = 0;
LABEL_119:
          v66 = *(const std::string **)__p.__r_.__value_.__l.__data_;
          v67 = *(unsigned __int16 **)(__p.__r_.__value_.__r.__words[0] + 8);
          if (*(unsigned __int16 **)__p.__r_.__value_.__l.__data_ != v67)
          {
            v68 = 0;
            v69 = 0;
            while (1)
            {
              if (SHIBYTE(v66->__r_.__value_.__r.__words[2]) < 0)
              {
                v71 = v66->__r_.__value_.__l.__size_;
                if (v71 == 3)
                {
                  v70 = (const std::string *)v66->__r_.__value_.__r.__words[0];
LABEL_140:
                  v74 = LOWORD(v70->__r_.__value_.__l.__data_);
                  v75 = v70->__r_.__value_.__s.__data_[2];
                  if (v74 == 24932 && v75 == 121)
                    v68 = siri::dialogengine::StringToInt(v66 + 1, 0, 0);
                  goto LABEL_146;
                }
                if (v71 == 5
                  && *(_DWORD *)v66->__r_.__value_.__l.__data_ == 1953394541
                  && *(_BYTE *)(v66->__r_.__value_.__r.__words[0] + 4) == 104)
                {
                  goto LABEL_138;
                }
              }
              else
              {
                if (*((_BYTE *)&v66->__r_.__value_.__s + 23) == 5)
                {
                  if (LODWORD(v66->__r_.__value_.__l.__data_) != 1953394541 || v66->__r_.__value_.__s.__data_[4] != 104)
                    goto LABEL_146;
LABEL_138:
                  v69 = siri::dialogengine::StringToInt(v66 + 1, 0, 0);
                  goto LABEL_146;
                }
                v70 = v66;
                if (*((_BYTE *)&v66->__r_.__value_.__s + 23) == 3)
                  goto LABEL_140;
              }
LABEL_146:
              v66 += 2;
              if (v66 == (const std::string *)v67)
                goto LABEL_149;
            }
          }
          v69 = 0;
          v68 = 0;
LABEL_149:
          DoesRowExist = v28 == v32 && v27 >= v31 || v28 == v69 && v27 <= v68 || v28 > v32 && v28 < v69;
        }
        else
        {
          DoesRowExist = 0;
        }
        v104.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)&__p;
        std::vector<std::vector<siri::dialogengine::DatabaseField>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
        std::vector<std::vector<siri::dialogengine::DatabaseField>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
        v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
        v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
        goto LABEL_75;
      }
    }
    else if (v11)
    {
      goto LABEL_6;
    }
    DoesRowExist = 0;
LABEL_75:
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113.__r_.__value_.__l.__data_);
    return DoesRowExist;
  }
  std::string::basic_string[abi:ne180100]<0>(&v114, "easter");
  v13 = siri::dialogengine::StringsEqual(a2, (uint64_t)&v114);
  v15 = v13;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v114.__r_.__value_.__l.__data_);
    if (v15)
      return siri::dialogengine::DateIsGregorianEaster(a1, v14);
  }
  else if (v13)
  {
    return siri::dialogengine::DateIsGregorianEaster(a1, v14);
  }
  std::string::basic_string[abi:ne180100]<0>(&v114, "thanksgiving");
  v17 = siri::dialogengine::StringsEqual(a2, (uint64_t)&v114);
  v19 = v17;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v114.__r_.__value_.__l.__data_);
    if (v19)
      return siri::dialogengine::DateIsThanksgiving(a1, v18);
  }
  else if (v17)
  {
    return siri::dialogengine::DateIsThanksgiving(a1, v18);
  }
  std::string::basic_string[abi:ne180100]<0>(&v114, "firstadvent");
  v40 = siri::dialogengine::StringsEqual(a2, (uint64_t)&v114);
  v42 = v40;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v114.__r_.__value_.__l.__data_);
    if (v42)
    {
LABEL_84:
      v43 = (siri::dialogengine *)siri::dialogengine::GetICUYear(a1, v41);
      v45 = siri::dialogengine::GetICUMonth(a1, v44);
      v47 = siri::dialogengine::GetICUDayOfMonth(a1, v46);
      if (v45 == 11 && v47 > 20 || (DoesRowExist = 0, v45 == 12) && v47 <= 9)
      {
        v49 = siri::dialogengine::GetICUDayOfMonth(a1, v48);
        return v49 == siri::dialogengine::GetDateForFirstAdvent(v43);
      }
      return DoesRowExist;
    }
  }
  else if (v40)
  {
    goto LABEL_84;
  }
  std::string::basic_string[abi:ne180100]<0>(&v114, "default");
  siri::dialogengine::GetHolidayTypeInfo((std::vector<std::pair<std::string, std::string>> *)&v113, a2, (uint64_t)&v114);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  v51 = siri::dialogengine::GetICUYear(a1, v50);
  std::to_string(&v112, v51);
  v53 = siri::dialogengine::GetICUMonth(a1, v52);
  std::to_string(&v111, v53);
  v55 = siri::dialogengine::GetICUDayOfMonth(a1, v54);
  std::to_string(&v110, v55);
  siri::dialogengine::GetHolidayDatabaseFile(&v114);
  v56 = siri::dialogengine::OpenDatabase((const char *)&v114);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  v107 = 0;
  v108 = 0;
  v109 = 0;
  memset(&v106, 0, sizeof(v106));
  memset(&__p, 0, sizeof(__p));
  if (v56)
  {
    v58 = v113.__r_.__value_.__l.__size_;
    for (i = (const std::string *)v113.__r_.__value_.__r.__words[0]; i != (const std::string *)v58; i += 2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v114, "type");
      v59 = siri::dialogengine::StringsEqual((uint64_t)i, (uint64_t)&v114);
      v60 = v59;
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v114.__r_.__value_.__l.__data_);
        if (v60)
        {
LABEL_98:
          v61 = (std::string *)&v107;
          goto LABEL_103;
        }
      }
      else if (v59)
      {
        goto LABEL_98;
      }
      std::string::basic_string[abi:ne180100]<0>(&v114, "offset");
      v62 = siri::dialogengine::StringsEqual((uint64_t)i, (uint64_t)&v114);
      v63 = v62;
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v114.__r_.__value_.__l.__data_);
        if (!v63)
        {
LABEL_107:
          std::string::basic_string[abi:ne180100]<0>(&v114, "relativeto");
          v64 = siri::dialogengine::StringsEqual((uint64_t)i, (uint64_t)&v114);
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v114.__r_.__value_.__l.__data_);
          if (v64)
          {
            siri::dialogengine::StringToLower((uint64_t)&i[1], (uint64_t)&v114);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p = v114;
          }
          continue;
        }
      }
      else if (!v62)
      {
        goto LABEL_107;
      }
      v61 = &v106;
LABEL_103:
      std::string::operator=(v61, i + 1);
    }
    std::string::basic_string[abi:ne180100]<0>(&v114, "AbsoluteDate");
    v65 = siri::dialogengine::StringsEqual((uint64_t)&v107, (uint64_t)&v114);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
    if (v65)
    {
      std::string::basic_string[abi:ne180100]<0>(&v114, "holiday");
      siri::dialogengine::StringToLower(a2, (uint64_t)v115);
      std::string::basic_string[abi:ne180100]<0>(&v116, "month");
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v117, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      else
        v117 = v111;
      std::string::basic_string[abi:ne180100]<0>(v118, "day");
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v119, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
      else
        v119 = v110;
      memset(&v104, 0, sizeof(v104));
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      v103.__r_.__value_.__s.__data_[8] = 0;
      v104.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)operator new(0x90uLL);
      v104.__end_ = v104.__begin_;
      v104.__end_cap_.__value_ = v104.__begin_ + 3;
      v94 = 0;
      v104.__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField*>((uint64_t)&v104.__end_cap_, (uint64_t)&v114, (uint64_t)v120, (uint64_t)v104.__begin_);
      do
      {
        v95 = (void **)((char *)&v114.__r_.__value_.__l.__data_ + v94 * 8);
        if (SHIBYTE(v119.__r_.__value_.__r.__words[v94 + 2]) < 0)
          operator delete(v95[15]);
        if (*((char *)v95 + 119) < 0)
          operator delete(v95[12]);
        v94 -= 6;
      }
      while (v94 != -18);
      std::string::basic_string[abi:ne180100]<0>(&v114, "HOLIDAYS");
      DoesRowExist = siri::dialogengine::DoesRowExist((const char *)&v104, (uint64_t)&v114, v56);
      if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_220;
      v96 = (void *)v114.__r_.__value_.__r.__words[0];
LABEL_219:
      operator delete(v96);
LABEL_220:
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
LABEL_221:
      siri::dialogengine::CloseDatabase(v56, v89);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_223;
    }
    std::string::basic_string[abi:ne180100]<0>(&v114, "DateList");
    v78 = siri::dialogengine::StringsEqual((uint64_t)&v107, (uint64_t)&v114);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
    if (v78)
    {
      std::string::basic_string[abi:ne180100]<0>(&v114, "default");
      siri::dialogengine::GetHolidayDateInfo(&v104, a2, (uint64_t)&v112, (uint64_t)&v114);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      memset(&v103, 0, sizeof(v103));
      memset(&v102, 0, sizeof(v102));
      memset(&v101, 0, sizeof(v101));
      begin = v104.__begin_;
      end = v104.__end_;
      if (v104.__begin_ == v104.__end_)
      {
LABEL_181:
        siri::dialogengine::StringToInt(&v112, 0, 0);
        siri::dialogengine::StringToInt(&v102, 0, 0);
        siri::dialogengine::StringToInt(&v101, 0, 0);
        std::string::basic_string[abi:ne180100]<0>(v99, "UTC");
        siri::dialogengine::GetICUTimeStampForDate((uint64_t)v99, (uint64_t)&v114);
        v87 = v114.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v115[0]) < 0)
          operator delete((void *)v114.__r_.__value_.__l.__size_);
        if (v100 < 0)
          operator delete(v99[0]);
        v88 = siri::dialogengine::StringToInt(&v103, 0, 0);
        DoesRowExist = *(_QWORD *)a1 >= v87 && *(_QWORD *)a1 <= v87 + 86400 * v88 + 86399;
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v102.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_220;
        v96 = (void *)v103.__r_.__value_.__r.__words[0];
        goto LABEL_219;
      }
      while (1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v114, "month");
        v81 = siri::dialogengine::StringsEqual((uint64_t)begin, (uint64_t)&v114);
        v82 = v81;
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v114.__r_.__value_.__l.__data_);
          if (v82)
          {
LABEL_169:
            v83 = &v102;
            goto LABEL_179;
          }
        }
        else if (v81)
        {
          goto LABEL_169;
        }
        std::string::basic_string[abi:ne180100]<0>(&v114, "day");
        v84 = siri::dialogengine::StringsEqual((uint64_t)begin, (uint64_t)&v114);
        v85 = v84;
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v114.__r_.__value_.__l.__data_);
          if (v85)
          {
LABEL_173:
            v83 = &v101;
            goto LABEL_179;
          }
        }
        else if (v84)
        {
          goto LABEL_173;
        }
        std::string::basic_string[abi:ne180100]<0>(&v114, "duration");
        v86 = siri::dialogengine::StringsEqual((uint64_t)begin, (uint64_t)&v114);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v114.__r_.__value_.__l.__data_);
        if (!v86)
          goto LABEL_180;
        v83 = &v103;
LABEL_179:
        std::string::operator=(v83, &begin->second);
LABEL_180:
        if (++begin == end)
          goto LABEL_181;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v114, "SpecialDateRelativeDate");
    DoesRowExist = siri::dialogengine::StringsEqual((uint64_t)&v107, (uint64_t)&v114);
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
    if (!(_DWORD)DoesRowExist)
      goto LABEL_221;
    v90 = *(_QWORD *)a1;
    v114.__r_.__value_.__r.__words[0] = v90 + (int)(-86400 * siri::dialogengine::StringToInt(&v106, 0, 0));
    std::string::basic_string[abi:ne180100]<0>(&v114.__r_.__value_.__l.__size_, "UTC");
    std::string::basic_string[abi:ne180100]<0>(&v104, "easter");
    v92 = siri::dialogengine::StringsEqual((uint64_t)&__p, (uint64_t)&v104);
    if (SHIBYTE(v104.__end_cap_.__value_) < 0)
      operator delete(v104.__begin_);
    if (v92)
    {
      IsGregorianEaster = siri::dialogengine::DateIsGregorianEaster((siri::dialogengine *)&v114, v91);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v104, "thanksgiving");
      v97 = siri::dialogengine::StringsEqual((uint64_t)&__p, (uint64_t)&v104);
      if (SHIBYTE(v104.__end_cap_.__value_) < 0)
        operator delete(v104.__begin_);
      if (!v97)
      {
        DoesRowExist = 0;
LABEL_236:
        if (SHIBYTE(v115[0]) < 0)
          operator delete((void *)v114.__r_.__value_.__l.__size_);
        goto LABEL_221;
      }
      IsGregorianEaster = siri::dialogengine::DateIsThanksgiving((siri::dialogengine *)&v114, v89);
    }
    DoesRowExist = IsGregorianEaster;
    goto LABEL_236;
  }
  DoesRowExist = 0;
LABEL_223:
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (SHIBYTE(v109) < 0)
    operator delete(v107);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  return DoesRowExist;
}

void sub_1BFB14550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t a64;
  uint64_t v64;

  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v64 - 217) < 0)
    operator delete(*(void **)(v64 - 240));
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  if (a57 < 0)
    operator delete(a52);
  if (a63 < 0)
    operator delete(a58);
  *(_QWORD *)(v64 - 248) = &a64;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v64 - 248));
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  std::string *v11;
  const std::string::value_type **v12;
  __int128 v13;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v8 = v10;
      }
      v11 = (std::string *)(a4 + v7 + 24);
      v12 = (const std::string::value_type **)(a2 + v7 + 24);
      if (*(char *)(a2 + v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(_QWORD *)(a2 + v7 + 32));
      }
      else
      {
        v13 = *(_OWORD *)v12;
        *(_QWORD *)(a4 + v7 + 40) = *(_QWORD *)(a2 + v7 + 40);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1BFB14B54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  while (v2 != v1)
  {
    v2 -= 48;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::DateIsGregorianEaster(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  siri::dialogengine *ICUYear;
  const siri::dialogengine::TimeStamp *v4;
  int ICUMonth;
  const siri::dialogengine::TimeStamp *v6;
  int ICUDayOfMonth;
  unint64_t v8;

  ICUYear = (siri::dialogengine *)siri::dialogengine::GetICUYear(this, a2);
  ICUMonth = siri::dialogengine::GetICUMonth(this, v4);
  ICUDayOfMonth = siri::dialogengine::GetICUDayOfMonth(this, v6);
  v8 = siri::dialogengine::CalculateGregorianEaster(ICUYear);
  return ICUMonth == (_DWORD)v8 && ICUDayOfMonth == HIDWORD(v8);
}

BOOL siri::dialogengine::DateIsThanksgiving(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  int ICUWeekOfMonth;
  const siri::dialogengine::TimeStamp *v4;
  int ICUMonth;
  _BOOL8 v6;
  void *v8[2];
  __int128 v9;
  void *v10[2];
  char v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  ICUWeekOfMonth = siri::dialogengine::GetICUWeekOfMonth(this, a2);
  ICUMonth = siri::dialogengine::GetICUMonth(this, v4);
  std::string::basic_string[abi:ne180100]<0>(v10, "en");
  *(_OWORD *)v8 = 0u;
  v9 = 0u;
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  BYTE8(v9) = 0;
  siri::dialogengine::GetICUDayName(this, (char **)v10, (uint64_t *)v8, __p);
  siri::dialogengine::StringToLower((uint64_t)__p, (uint64_t)v14);
  if (v13 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v9) < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  v6 = 0;
  if (ICUWeekOfMonth == 4 && ICUMonth == 11)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "thursday");
    v6 = siri::dialogengine::StringsEqual((uint64_t)v14, (uint64_t)v8);
    if (SBYTE7(v9) < 0)
      operator delete(v8[0]);
  }
  if (v15 < 0)
    operator delete(v14[0]);
  return v6;
}

void sub_1BFB14D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetHolidayTypeInfo(std::vector<std::pair<std::string, std::string>> *a1, uint64_t a2, uint64_t a3)
{
  sqlite3 *v6;
  sqlite3 *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  sqlite3 *v11;
  void *p_p;
  char v13;
  char v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  std::string __p;
  std::string v22;
  _QWORD v23[3];
  std::string v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  siri::dialogengine::GetHolidayDatabaseFile(&__p);
  v6 = siri::dialogengine::OpenDatabase((const char *)&__p);
  v7 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v7)
      return;
  }
  else if (!v6)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "holiday");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v22 = *(std::string *)a2;
  std::string::basic_string[abi:ne180100]<0>(v23, "country");
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v24 = *(std::string *)a3;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v15 = (std::string *)&v18;
  LOBYTE(v16) = 0;
  v18 = (char *)operator new(0x60uLL);
  v19 = (uint64_t)v18;
  v20 = v18 + 96;
  v8 = 0;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField*>((uint64_t)&v20, (uint64_t)&__p, (uint64_t)&v25, (uint64_t)v18);
  do
  {
    v9 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + v8 * 8);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[v8 + 2]) < 0)
      operator delete(v9[9]);
    if (*((char *)v9 + 71) < 0)
      operator delete(v9[6]);
    v8 -= 6;
  }
  while (v8 != -12);
  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  std::string::basic_string[abi:ne180100]<0>(&v22, "offset");
  std::string::basic_string[abi:ne180100]<0>(v23, "relativeto");
  v15 = 0;
  v16 = 0;
  v17 = 0;
  p_p = &v15;
  v13 = 0;
  v15 = (std::string *)operator new(0x48uLL);
  v16 = v15;
  v17 = v15 + 3;
  v10 = 0;
  v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v17, (__int128 *)&__p, (__int128 *)&v24, v15);
  do
  {
    if (SHIBYTE(v23[v10 + 2]) < 0)
      operator delete((void *)v23[v10]);
    v10 -= 3;
  }
  while (v10 != -9);
  std::string::basic_string[abi:ne180100]<0>(&p_p, "HOLIDAYS");
  siri::dialogengine::GetRows((const char *)&v18, (uint64_t)&p_p, v7, (uint64_t *)&v15, &__p);
  if (v14 < 0)
    operator delete(p_p);
  if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0]
    && (std::vector<std::pair<std::string, std::string>> *)__p.__r_.__value_.__l.__data_ != a1)
  {
    std::vector<siri::dialogengine::DatabaseField>::__assign_with_size[abi:ne180100]<siri::dialogengine::DatabaseField*,siri::dialogengine::DatabaseField*>(a1, *(std::string **)__p.__r_.__value_.__l.__data_, *(std::string **)(__p.__r_.__value_.__r.__words[0] + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) - *(_QWORD *)__p.__r_.__value_.__l.__data_) >> 4));
  }
  siri::dialogengine::CloseDatabase(v7, v11);
  p_p = &__p;
  std::vector<std::vector<siri::dialogengine::DatabaseField>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1BFB1505C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  std::pair<std::string const,std::string>::~pair((uint64_t)&a21);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetHolidayDateInfo(std::vector<std::pair<std::string, std::string>> *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sqlite3 *v8;
  sqlite3 *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  sqlite3 *v13;
  void *p_p;
  char v15;
  char v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  std::string __p;
  std::string v24;
  _QWORD v25[3];
  std::string v26;
  _QWORD v27[3];
  std::string v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  siri::dialogengine::GetHolidayDatabaseFile(&__p);
  v8 = siri::dialogengine::OpenDatabase((const char *)&__p);
  v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v9)
      return;
  }
  else if (!v8)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "holiday");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v24 = *(std::string *)a2;
  std::string::basic_string[abi:ne180100]<0>(v25, "country");
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v26 = *(std::string *)a4;
  std::string::basic_string[abi:ne180100]<0>(v27, "year");
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v28 = *(std::string *)a3;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v17 = (std::string *)&v20;
  LOBYTE(v18) = 0;
  v20 = (char *)operator new(0x90uLL);
  v21 = (uint64_t)v20;
  v22 = v20 + 144;
  v10 = 0;
  v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField*>((uint64_t)&v22, (uint64_t)&__p, (uint64_t)&v29, (uint64_t)v20);
  do
  {
    v11 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + v10 * 8);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[v10 + 2]) < 0)
      operator delete(v11[15]);
    if (*((char *)v11 + 119) < 0)
      operator delete(v11[12]);
    v10 -= 6;
  }
  while (v10 != -18);
  std::string::basic_string[abi:ne180100]<0>(&__p, "month");
  std::string::basic_string[abi:ne180100]<0>(&v24, "day");
  std::string::basic_string[abi:ne180100]<0>(v25, "duration");
  v17 = 0;
  v18 = 0;
  v19 = 0;
  p_p = &v17;
  v15 = 0;
  v17 = (std::string *)operator new(0x48uLL);
  v18 = v17;
  v19 = v17 + 3;
  v12 = 0;
  v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v19, (__int128 *)&__p, (__int128 *)&v26, v17);
  do
  {
    if (SHIBYTE(v25[v12 + 2]) < 0)
      operator delete((void *)v25[v12]);
    v12 -= 3;
  }
  while (v12 != -9);
  std::string::basic_string[abi:ne180100]<0>(&p_p, "HOLIDAYS");
  siri::dialogengine::GetRows((const char *)&v20, (uint64_t)&p_p, v9, (uint64_t *)&v17, &__p);
  if (v16 < 0)
    operator delete(p_p);
  if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0]
    && (std::vector<std::pair<std::string, std::string>> *)__p.__r_.__value_.__l.__data_ != a1)
  {
    std::vector<siri::dialogengine::DatabaseField>::__assign_with_size[abi:ne180100]<siri::dialogengine::DatabaseField*,siri::dialogengine::DatabaseField*>(a1, *(std::string **)__p.__r_.__value_.__l.__data_, *(std::string **)(__p.__r_.__value_.__r.__words[0] + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) - *(_QWORD *)__p.__r_.__value_.__l.__data_) >> 4));
  }
  siri::dialogengine::CloseDatabase(v9, v13);
  p_p = &__p;
  std::vector<std::vector<siri::dialogengine::DatabaseField>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1BFB154F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void **v44;

  if (a44 < 0)
    operator delete(__p);
  do
  {
    v44 -= 6;
    std::pair<std::string const,std::string>::~pair((uint64_t)v44);
  }
  while (v44 != &a21);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

unint64_t siri::dialogengine::CalculateGregorianEaster(siri::dialogengine *this)
{
  int v1;
  int v2;
  int v3;
  char v4;
  int v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;

  v1 = (int)this / 100 + ((int)this / 100 + 8) / -25 + 1;
  v2 = (int)((int)this / 100
           + (int)this / -400
           + 19 * ((int)this % 19)
           + ((int)(((unint64_t)(1431655765 * v1) >> 32) - v1) >> 1)
           + ((((unint64_t)(1431655765 * v1) >> 32) - v1) >> 31)
           + 15)
     % 30;
  if ((int)this / -100 >= 0)
    v3 = -(((int)this / -100) & 3);
  else
    v3 = ((int)this / 100) & 3;
  v4 = (int)this % 100 + ((((int)this % 100) >> 13) & 3);
  v5 = 2 * (v3 + (v4 >> 2)) + ((v4 & 0xFC) - (int)this % 100 + 32);
  v6 = (37201 * (__int16)((int)this % 19 + 11 * v2 + 22 * ((v5 - v2) % 7))) >> 16;
  v7 = v5 - 7 * ((v5 - v2) / 7) + 249 * ((v6 >> 8) + ((unsigned __int16)(v6 & 0x8000) >> 15)) + 114;
  v8 = (((v7 - ((unsigned __int16)(9 * v7) >> 8)) >> 1)
      + ((9 * v7) >> 8)) >> 4;
  return v8 | ((unint64_t)(-31 * v8 + v7 + 1) << 32);
}

uint64_t siri::dialogengine::IsValidHoliday(uint64_t a1)
{
  sqlite3 *v2;
  sqlite3 *v3;
  sqlite3 *v4;
  uint64_t DoesRowExist;
  char *v7;
  uint64_t v8;
  _QWORD v9[2];
  char v10;
  std::string v11;
  void *__p;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::GetHolidayDatabaseFile(&v11);
  v2 = siri::dialogengine::OpenDatabase((const char *)&v11);
  v3 = v2;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v3)
      goto LABEL_3;
    return 0;
  }
  if (!v2)
    return 0;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&v11, "holiday");
  siri::dialogengine::StringToLower(a1, (uint64_t)&__p);
  v7 = 0;
  v8 = 0;
  v9[0] = 0;
  v9[1] = &v7;
  v10 = 0;
  v7 = (char *)operator new(0x30uLL);
  v8 = (uint64_t)v7;
  v9[0] = v7 + 48;
  v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField*>((uint64_t)v9, (uint64_t)&v11, (uint64_t)&v14, (uint64_t)v7);
  if (v13 < 0)
    operator delete(__p);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v11, "HOLIDAYS");
  DoesRowExist = siri::dialogengine::DoesRowExist((const char *)&v7, (uint64_t)&v11, v3);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  siri::dialogengine::CloseDatabase(v3, v4);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  return DoesRowExist;
}

void sub_1BFB15978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  __p = &a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetHolidayEmotion(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sqlite3 *v4;
  uint64_t v5;
  uint64_t i;
  std::string *v7;
  __int128 v8;
  sqlite3 *v9;
  std::string v10;
  void *v11[2];
  std::string::size_type v12;
  char *v13;
  uint64_t v14;
  char *v15;
  std::string v16;
  std::string __p;
  void *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::GetHolidayNamesDatabaseFile(&__p);
  v4 = siri::dialogengine::OpenDatabase((const char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "holiday");
    siri::dialogengine::StringToLower(a1, (uint64_t)&v18);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    v16.__r_.__value_.__s.__data_[8] = 0;
    v13 = (char *)operator new(0x30uLL);
    v14 = (uint64_t)v13;
    v15 = v13 + 48;
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField*>((uint64_t)&v15, (uint64_t)&__p, (uint64_t)&v20, (uint64_t)v13);
    if (v19 < 0)
      operator delete(v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v16, "emotion");
    memset(&__p, 0, sizeof(__p));
    v11[0] = &__p;
    LOBYTE(v11[1]) = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 24;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__p.__r_.__value_.__r.__words[2], (__int128 *)&v16, (__int128 *)&__p, (std::string *)__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(v11, "holidayNames");
    siri::dialogengine::GetRows((const char *)&v13, (uint64_t)v11, v4, (uint64_t *)&__p, &v16);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
    if (v16.__r_.__value_.__r.__words[0] != v16.__r_.__value_.__l.__size_)
    {
      v5 = *(_QWORD *)(v16.__r_.__value_.__r.__words[0] + 8);
      if (*(_QWORD *)v16.__r_.__value_.__l.__data_ != v5)
      {
        for (i = *(_QWORD *)v16.__r_.__value_.__l.__data_; i != v5; i += 48)
        {
          if (*(char *)(i + 47) < 0)
          {
            if (*(_QWORD *)(i + 32))
            {
LABEL_24:
              std::string::operator=(a2, (const std::string *)(*(_QWORD *)v16.__r_.__value_.__l.__data_ + 24));
              goto LABEL_25;
            }
          }
          else if (*(_BYTE *)(i + 47))
          {
            goto LABEL_24;
          }
        }
      }
    }
    std::operator+<char>();
    v7 = std::string::append(&v10, ".");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v12 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)v11 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)v11);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
LABEL_25:
    siri::dialogengine::CloseDatabase(v4, v9);
    v11[0] = &v16;
    std::vector<std::vector<siri::dialogengine::DatabaseField>>::__destroy_vector::operator()[abi:ne180100]((void ***)v11);
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
}

void sub_1BFB15CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char ***__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char **a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  __p = &a25;
  std::vector<std::vector<siri::dialogengine::DatabaseField>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a25 = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a31 = &a22;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (*(char *)(v36 + 23) < 0)
    operator delete(*(void **)v36);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetLocalizedHolidayName(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, std::string *a4@<X8>)
{
  sqlite3 *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void **v20;
  unsigned int v21;
  char *v22;
  const std::string **v23;
  std::string::size_type v24;
  uint64_t i;
  std::string::size_type v26;
  void **v27;
  void **v28;
  int v29;
  const std::string *j;
  std::string::size_type v31;
  void **v32;
  void **v33;
  int v34;
  const std::string *k;
  std::string *v36;
  __int128 v37;
  std::string::size_type v38;
  void **v39;
  void **v40;
  int v41;
  const std::string *m;
  const std::string *v43;
  const std::string *v44;
  const std::string *n;
  std::string *v46;
  __int128 v47;
  int v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  sqlite3 *v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string __p;
  std::string v64;
  uint64_t v65[3];
  std::string v66;
  uint64_t v67[3];
  _QWORD v68[3];
  _QWORD v69[2];

  v69[1] = *MEMORY[0x1E0C80C00];
  siri::dialogengine::GetHolidayNamesDatabaseFile(&__p);
  v8 = siri::dialogengine::OpenDatabase((const char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (!v8)
    return;
  siri::dialogengine::GetLocaleLanguage(&v61);
  v9 = std::string::append(&v61, "_");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::GetLocaleCountry(&v60);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v60;
  else
    v11 = (std::string *)v60.__r_.__value_.__r.__words[0];
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  else
    size = v60.__r_.__value_.__l.__size_;
  v13 = std::string::append(&__p, (const std::string::value_type *)v11, size);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "yue");
  v15 = siri::dialogengine::StringContains(&v62.__r_.__value_.__l.__data_, (char *)&__p);
  v16 = v15;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v16)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (v15)
LABEL_20:
    MEMORY[0x1C3B8D53C](&v62, "zh_CN");
LABEL_21:
  std::string::basic_string[abi:ne180100]<0>(&__p, "holiday");
  siri::dialogengine::StringToLower(a1, (uint64_t)&v64);
  std::string::basic_string[abi:ne180100]<0>(v65, "locale");
  siri::dialogengine::GetCanonicalLocale(&v62, 1, &v66);
  std::string::basic_string[abi:ne180100]<0>(v67, "calendarType");
  v17 = *a3;
  if (v17 > 7)
    v18 = "UNKNOWN";
  else
    v18 = off_1E7935B58[v17];
  std::string::basic_string[abi:ne180100]<0>(v68, v18);
  memset(&v61, 0, sizeof(v61));
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  v60.__r_.__value_.__s.__data_[8] = 0;
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x90uLL);
  v61.__r_.__value_.__l.__size_ = v61.__r_.__value_.__r.__words[0];
  v61.__r_.__value_.__r.__words[2] = v61.__r_.__value_.__r.__words[0] + 144;
  v19 = 0;
  v61.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField const*,siri::dialogengine::DatabaseField*>((uint64_t)&v61.__r_.__value_.__r.__words[2], (uint64_t)&__p, (uint64_t)v69, (uint64_t)v61.__r_.__value_.__l.__data_);
  do
  {
    v20 = (void **)((char *)&__p.__r_.__value_.__l.__data_ + v19 * 8);
    if (SHIBYTE(v68[v19 + 2]) < 0)
      operator delete(v20[15]);
    if (*((char *)v20 + 119) < 0)
      operator delete(v20[12]);
    v19 -= 6;
  }
  while (v19 != -18);
  v21 = a3[1] - 1;
  if (v21 > 5)
    v22 = "text";
  else
    v22 = off_1E7935B98[v21];
  std::string::basic_string[abi:ne180100]<0>(&__p, v22);
  memset(&v60, 0, sizeof(v60));
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  v59.__r_.__value_.__s.__data_[8] = 0;
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v60.__r_.__value_.__l.__size_ = v60.__r_.__value_.__r.__words[0];
  v60.__r_.__value_.__r.__words[2] = v60.__r_.__value_.__r.__words[0] + 24;
  v60.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v60.__r_.__value_.__r.__words[2], (__int128 *)&__p, (__int128 *)&v64, (std::string *)v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "holidayNames");
  siri::dialogengine::GetRows((const char *)&v61, (uint64_t)&__p, v8, (uint64_t *)&v60, &v59);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24 = v59.__r_.__value_.__l.__size_;
  v23 = (const std::string **)v59.__r_.__value_.__r.__words[0];
  if (v59.__r_.__value_.__r.__words[0] != v59.__r_.__value_.__l.__size_)
  {
    for (i = *(_QWORD *)v59.__r_.__value_.__l.__data_; i != *(_QWORD *)(v59.__r_.__value_.__r.__words[0] + 8); i += 48)
    {
      if (*(char *)(i + 47) < 0)
      {
        if (*(_QWORD *)(i + 32))
          goto LABEL_54;
      }
      else if (*(_BYTE *)(i + 47))
      {
        goto LABEL_54;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "locale");
  siri::dialogengine::GetCanonicalLocale(&v62, 0, &v64);
  v26 = v61.__r_.__value_.__r.__words[0];
  v27 = (void **)(v61.__r_.__value_.__r.__words[0] + 48);
  if (*(char *)(v61.__r_.__value_.__r.__words[0] + 71) < 0)
    operator delete(*v27);
  *(std::string *)v27 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  v28 = (void **)(v26 + 72);
  if (*(char *)(v26 + 95) < 0)
  {
    operator delete(*v28);
    v29 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_OWORD *)v28 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
    *(_QWORD *)(v26 + 88) = *((_QWORD *)&v64.__r_.__value_.__l + 2);
    *((_BYTE *)&v64.__r_.__value_.__s + 23) = 0;
    v64.__r_.__value_.__s.__data_[0] = 0;
    if (v29 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)v28 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
    *(_QWORD *)(v26 + 88) = *((_QWORD *)&v64.__r_.__value_.__l + 2);
  }
  std::string::basic_string[abi:ne180100]<0>(&v58, "holidayNames");
  siri::dialogengine::GetRows((const char *)&v61, (uint64_t)&v58, v8, (uint64_t *)&v60, &__p);
  std::vector<std::vector<siri::dialogengine::DatabaseField>>::__vdeallocate((void ***)&v59);
  v59 = __p;
  memset(&__p, 0, sizeof(__p));
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::vector<siri::dialogengine::DatabaseField>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v24 = v59.__r_.__value_.__l.__size_;
  v23 = (const std::string **)v59.__r_.__value_.__r.__words[0];
LABEL_54:
  if (v23 != (const std::string **)v24)
  {
    for (j = *v23; j != v23[1]; j += 2)
    {
      if (SHIBYTE(j[1].__r_.__value_.__r.__words[2]) < 0)
      {
        if (j[1].__r_.__value_.__l.__size_)
          goto LABEL_71;
      }
      else if (*((_BYTE *)&j[1].__r_.__value_.__s + 23))
      {
        goto LABEL_71;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "locale");
  siri::dialogengine::GetLocaleLanguage(&v64);
  v31 = v61.__r_.__value_.__r.__words[0];
  v32 = (void **)(v61.__r_.__value_.__r.__words[0] + 48);
  if (*(char *)(v61.__r_.__value_.__r.__words[0] + 71) < 0)
    operator delete(*v32);
  *(std::string *)v32 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  v33 = (void **)(v31 + 72);
  if (*(char *)(v31 + 95) < 0)
  {
    operator delete(*v33);
    v34 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_OWORD *)v33 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
    *(_QWORD *)(v31 + 88) = *((_QWORD *)&v64.__r_.__value_.__l + 2);
    *((_BYTE *)&v64.__r_.__value_.__s + 23) = 0;
    v64.__r_.__value_.__s.__data_[0] = 0;
    if (v34 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
    *(_QWORD *)(v31 + 88) = *((_QWORD *)&v64.__r_.__value_.__l + 2);
  }
  std::string::basic_string[abi:ne180100]<0>(&v58, "holidayNames");
  siri::dialogengine::GetRows((const char *)&v61, (uint64_t)&v58, v8, (uint64_t *)&v60, &__p);
  std::vector<std::vector<siri::dialogengine::DatabaseField>>::__vdeallocate((void ***)&v59);
  v59 = __p;
  memset(&__p, 0, sizeof(__p));
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::vector<siri::dialogengine::DatabaseField>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v24 = v59.__r_.__value_.__l.__size_;
  v23 = (const std::string **)v59.__r_.__value_.__r.__words[0];
LABEL_71:
  if (v23 != (const std::string **)v24)
  {
    for (k = *v23; k != v23[1]; k += 2)
    {
      if (SHIBYTE(k[1].__r_.__value_.__r.__words[2]) < 0)
      {
        if (k[1].__r_.__value_.__l.__size_)
          goto LABEL_90;
      }
      else if (*((_BYTE *)&k[1].__r_.__value_.__s + 23))
      {
        goto LABEL_90;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "locale");
  siri::dialogengine::GetLocaleLanguage(&v58);
  v36 = std::string::append(&v58, "%");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = v61.__r_.__value_.__r.__words[0];
  v39 = (void **)(v61.__r_.__value_.__r.__words[0] + 48);
  if (*(char *)(v61.__r_.__value_.__r.__words[0] + 71) < 0)
    operator delete(*v39);
  *(std::string *)v39 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  v40 = (void **)(v38 + 72);
  if (*(char *)(v38 + 95) < 0)
  {
    operator delete(*v40);
    v41 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_OWORD *)v40 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
    *(_QWORD *)(v38 + 88) = *((_QWORD *)&v64.__r_.__value_.__l + 2);
    *((_BYTE *)&v64.__r_.__value_.__s + 23) = 0;
    v64.__r_.__value_.__s.__data_[0] = 0;
    if (v41 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)v40 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
    *(_QWORD *)(v38 + 88) = *((_QWORD *)&v64.__r_.__value_.__l + 2);
    *((_BYTE *)&v64.__r_.__value_.__s + 23) = 0;
    v64.__r_.__value_.__s.__data_[0] = 0;
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v58, "holidayNames");
  siri::dialogengine::GetRows((const char *)&v61, (uint64_t)&v58, v8, (uint64_t *)&v60, &__p);
  std::vector<std::vector<siri::dialogengine::DatabaseField>>::__vdeallocate((void ***)&v59);
  v59 = __p;
  memset(&__p, 0, sizeof(__p));
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::vector<siri::dialogengine::DatabaseField>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v24 = v59.__r_.__value_.__l.__size_;
  v23 = (const std::string **)v59.__r_.__value_.__r.__words[0];
LABEL_90:
  if (v23 != (const std::string **)v24)
  {
    for (m = *v23; m != v23[1]; m += 2)
    {
      if (SHIBYTE(m[1].__r_.__value_.__r.__words[2]) < 0)
      {
        if (m[1].__r_.__value_.__l.__size_)
          goto LABEL_102;
      }
      else if (*((_BYTE *)&m[1].__r_.__value_.__s + 23))
      {
        goto LABEL_102;
      }
    }
  }
  if (a3[1])
  {
    MEMORY[0x1C3B8D53C](v60.__r_.__value_.__r.__words[0], "text");
    std::string::basic_string[abi:ne180100]<0>(&v58, "holidayNames");
    siri::dialogengine::GetRows((const char *)&v61, (uint64_t)&v58, v8, (uint64_t *)&v60, &__p);
    std::vector<std::vector<siri::dialogengine::DatabaseField>>::__vdeallocate((void ***)&v59);
    v59 = __p;
    memset(&__p, 0, sizeof(__p));
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::vector<siri::dialogengine::DatabaseField>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v24 = v59.__r_.__value_.__l.__size_;
    v23 = (const std::string **)v59.__r_.__value_.__r.__words[0];
  }
LABEL_102:
  if (v23 != (const std::string **)v24)
  {
    v44 = *v23;
    v43 = v23[1];
    if (v44 != v43)
    {
      for (n = v44; n != v43; n += 2)
      {
        if (SHIBYTE(n[1].__r_.__value_.__r.__words[2]) < 0)
        {
          if (n[1].__r_.__value_.__l.__size_)
          {
LABEL_124:
            std::string::operator=(a4, v44 + 1);
            goto LABEL_125;
          }
        }
        else if (*((_BYTE *)&n[1].__r_.__value_.__s + 23))
        {
          goto LABEL_124;
        }
      }
    }
  }
  std::operator+<char>();
  v46 = std::string::append(&v56, " for locale ");
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v48 = *(char *)(a2 + 23);
  if (v48 >= 0)
    v49 = (const std::string::value_type *)a2;
  else
    v49 = *(const std::string::value_type **)a2;
  if (v48 >= 0)
    v50 = *(unsigned __int8 *)(a2 + 23);
  else
    v50 = *(_QWORD *)(a2 + 8);
  v51 = std::string::append(&v57, v49, v50);
  v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  v53 = std::string::append(&v58, " or associated base language.");
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
LABEL_125:
  siri::dialogengine::CloseDatabase(v8, v55);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
  std::vector<std::vector<siri::dialogengine::DatabaseField>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
}

void sub_1BFB16788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a36 < 0)
    operator delete(__p);
  if (*(char *)(v36 + 23) < 0)
    operator delete(*(void **)v36);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetHolidayDate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  int v6;
  uint64_t p_second;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  std::pair<std::string, std::string> *v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  _BOOL4 v25;
  _BOOL4 v26;
  std::vector<std::pair<std::string, std::string>>::pointer v27;
  std::vector<std::pair<std::string, std::string>>::pointer v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  siri::dialogengine::VariableObject *v49;
  uint64_t v52[2];
  uint64_t v53[2];
  uint64_t v54[2];
  std::string v55;
  std::vector<std::pair<std::string, std::string>> v56;
  std::vector<std::pair<std::string, std::string>> __p;
  std::vector<std::pair<std::string, std::string>> v58;
  std::string v59;
  std::vector<std::pair<std::string, std::string>> v60;
  std::string v61;
  std::vector<std::pair<std::string, std::string>> *v62;

  siri::dialogengine::GetLocaleCountry(&v61);
  siri::dialogengine::GetHolidayTypeInfo(&v60, a1, (uint64_t)&v61);
  begin = v60.__begin_;
  end = v60.__end_;
  if (v60.__begin_ == v60.__end_)
  {
    MEMORY[0x1C3B8D53C](&v61, "default");
    siri::dialogengine::GetHolidayTypeInfo((std::vector<std::pair<std::string, std::string>> *)&v59, a1, (uint64_t)&v61);
    std::vector<siri::dialogengine::DatabaseField>::__vdeallocate(&v60);
    v60 = (std::vector<std::pair<std::string, std::string>>)v59;
    memset(&v59, 0, sizeof(v59));
    v58.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)&v59;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    end = v60.__end_;
    begin = v60.__begin_;
  }
  memset(&v59, 0, sizeof(v59));
  memset(&v58, 0, sizeof(v58));
  if (begin != end)
  {
    v6 = 0;
    p_second = (uint64_t)&begin->second;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "type");
      v8 = siri::dialogengine::StringsEqual(p_second - 24, (uint64_t)&__p);
      v9 = v8;
      if (SHIBYTE(__p.__end_cap_.__value_) < 0)
      {
        operator delete(__p.__begin_);
        if (v9)
        {
LABEL_7:
          std::string::operator=(&v59, (const std::string *)p_second);
          goto LABEL_26;
        }
      }
      else if (v8)
      {
        goto LABEL_7;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
      if (siri::dialogengine::StringsEqual(p_second - 24, (uint64_t)&__p))
      {
        if (*(char *)(p_second + 23) < 0)
          v10 = *(_QWORD *)(p_second + 8);
        else
          v10 = *(unsigned __int8 *)(p_second + 23);
        if (SHIBYTE(__p.__end_cap_.__value_) < 0)
        {
          operator delete(__p.__begin_);
          if (v10)
          {
LABEL_17:
            v6 = siri::dialogengine::StringToInt((const std::string *)p_second, 0, 0);
            goto LABEL_26;
          }
        }
        else if (v10)
        {
          goto LABEL_17;
        }
      }
      else if (SHIBYTE(__p.__end_cap_.__value_) < 0)
      {
        operator delete(__p.__begin_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "relativeto");
      v11 = siri::dialogengine::StringsEqual(p_second - 24, (uint64_t)&__p);
      v12 = v11;
      if (SHIBYTE(__p.__end_cap_.__value_) < 0)
      {
        operator delete(__p.__begin_);
        if (v12)
        {
LABEL_23:
          siri::dialogengine::StringToLower(p_second, (uint64_t)&__p);
          if (SHIBYTE(v58.__end_cap_.__value_) < 0)
            operator delete(v58.__begin_);
          v58 = __p;
        }
      }
      else if (v11)
      {
        goto LABEL_23;
      }
LABEL_26:
      v13 = (std::pair<std::string, std::string> *)(p_second + 24);
      p_second += 48;
      if (v13 == end)
        goto LABEL_29;
    }
  }
  v6 = 0;
LABEL_29:
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(&v56, "AbsoluteDate");
  v14 = siri::dialogengine::StringsEqual((uint64_t)&v59, (uint64_t)&v56);
  v15 = v14;
  if (SHIBYTE(v56.__end_cap_.__value_) < 0)
  {
    operator delete(v56.__begin_);
    if (v15)
      goto LABEL_31;
  }
  else if (v14)
  {
LABEL_31:
    std::string::basic_string[abi:ne180100]<0>(&v55, "0");
    siri::dialogengine::GetHolidayDateInfo(&v56, a1, (uint64_t)&v55, (uint64_t)&v61);
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "DateList");
  v16 = siri::dialogengine::StringsEqual((uint64_t)&v59, (uint64_t)&v56);
  v17 = v16;
  if (SHIBYTE(v56.__end_cap_.__value_) < 0)
  {
    operator delete(v56.__begin_);
    if (v17)
      goto LABEL_35;
  }
  else if (v16)
  {
LABEL_35:
    std::to_string(&v55, *(_DWORD *)(a2 + 32));
    siri::dialogengine::GetHolidayDateInfo(&v56, a1, (uint64_t)&v55, (uint64_t)&v61);
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "SpecialDateRelativeDate");
  v18 = siri::dialogengine::StringsEqual((uint64_t)&v59, (uint64_t)&v56);
  v19 = v18;
  if (SHIBYTE(v56.__end_cap_.__value_) < 0)
  {
    operator delete(v56.__begin_);
    if (!v19)
      goto LABEL_59;
  }
  else if (!v18)
  {
    goto LABEL_59;
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "easter");
  v20 = siri::dialogengine::StringsEqual((uint64_t)&v58, (uint64_t)&v56);
  v21 = v20;
  if (SHIBYTE(v56.__end_cap_.__value_) < 0)
  {
    operator delete(v56.__begin_);
    if (v21)
      goto LABEL_45;
  }
  else if (v20)
  {
LABEL_45:
    v22 = siri::dialogengine::CalculateGregorianEaster((siri::dialogengine *)*(unsigned int *)(a2 + 32));
    v23 = v22;
    v24 = HIDWORD(v22);
    goto LABEL_57;
  }
  std::string::basic_string[abi:ne180100]<0>(&v56, "thanksgiving");
  v25 = siri::dialogengine::StringsEqual((uint64_t)&v58, (uint64_t)&v56);
  if (SHIBYTE(v56.__end_cap_.__value_) < 0)
    operator delete(v56.__begin_);
  if (v25)
  {
    LODWORD(v24) = siri::dialogengine::GetDateForThanksgiving((siri::dialogengine *)*(unsigned int *)(a2 + 32));
    v23 = 11;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v56, "firstadvent");
    v26 = siri::dialogengine::StringsEqual((uint64_t)&v58, (uint64_t)&v56);
    if (SHIBYTE(v56.__end_cap_.__value_) < 0)
      operator delete(v56.__begin_);
    if (!v26)
    {
      std::to_string(&v55, *(_DWORD *)(a2 + 32));
      siri::dialogengine::GetHolidayDateInfo(&v56, (uint64_t)&v58, (uint64_t)&v55, (uint64_t)&v61);
LABEL_36:
      std::vector<siri::dialogengine::DatabaseField>::__vdeallocate(&__p);
      __p = v56;
      memset(&v56, 0, sizeof(v56));
      v62 = &v56;
      std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
LABEL_59:
      v28 = __p.__begin_;
      v27 = __p.__end_;
      if (__p.__begin_ != __p.__end_)
      {
        LODWORD(v24) = -1;
        v23 = -1;
        while (1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v56, "month");
          v29 = siri::dialogengine::StringsEqual((uint64_t)v28, (uint64_t)&v56);
          v30 = v29;
          if (SHIBYTE(v56.__end_cap_.__value_) < 0)
          {
            operator delete(v56.__begin_);
            if (v30)
            {
LABEL_63:
              v23 = siri::dialogengine::StringToInt(&v28->second, 0, 0);
              goto LABEL_70;
            }
          }
          else if (v29)
          {
            goto LABEL_63;
          }
          std::string::basic_string[abi:ne180100]<0>(&v56, "day");
          v31 = siri::dialogengine::StringsEqual((uint64_t)v28, (uint64_t)&v56);
          v32 = v31;
          if ((SHIBYTE(v56.__end_cap_.__value_) & 0x80000000) == 0)
          {
            if (!v31)
              goto LABEL_70;
LABEL_69:
            LODWORD(v24) = siri::dialogengine::StringToInt(&v28->second, 0, 0);
            goto LABEL_70;
          }
          operator delete(v56.__begin_);
          if (v32)
            goto LABEL_69;
LABEL_70:
          if (++v28 == v27)
            goto LABEL_71;
        }
      }
      goto LABEL_93;
    }
    LODWORD(v24) = siri::dialogengine::GetDateForFirstAdvent((siri::dialogengine *)*(unsigned int *)(a2 + 32));
    if ((int)v24 >= 10)
      v23 = 11;
    else
      v23 = 12;
  }
LABEL_57:
  if ((int)v24 < 1 || v23 <= 0)
    goto LABEL_59;
LABEL_71:
  if (v23 < 0 || (v24 & 0x80000000) != 0)
  {
LABEL_93:
    v49 = (siri::dialogengine::VariableObject *)operator new();
    siri::dialogengine::VariableObject::VariableObject(v49);
    std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(a3, (uint64_t)v49);
    goto LABEL_94;
  }
  v33 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v56, "dateTime");
  siri::dialogengine::VariableObject::VariableObject(v33, (const std::string *)&v56);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(a3, (uint64_t)v33);
  if (SHIBYTE(v56.__end_cap_.__value_) < 0)
    operator delete(v56.__begin_);
  v34 = *a3;
  v35 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v56, "year");
  siri::dialogengine::VariableNumber::VariableNumber(v35, (const std::string *)&v56, (double)*(int *)(a2 + 32));
  v54[0] = v35;
  v36 = (std::__shared_weak_count *)operator new();
  v36->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v36->__shared_owners_;
  v36->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937CE0;
  v36->__shared_weak_owners_ = 0;
  v36[1].__vftable = (std::__shared_weak_count_vtbl *)v35;
  v54[1] = (uint64_t)v36;
  siri::dialogengine::VariableObject::AddProperty(v34, v54);
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  if (SHIBYTE(v56.__end_cap_.__value_) < 0)
    operator delete(v56.__begin_);
  v39 = *a3;
  v40 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v56, "month");
  siri::dialogengine::VariableNumber::VariableNumber(v40, (const std::string *)&v56, (double)v23);
  v53[0] = v40;
  v41 = (std::__shared_weak_count *)operator new();
  v41->__shared_owners_ = 0;
  v42 = (unint64_t *)&v41->__shared_owners_;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937CE0;
  v41->__shared_weak_owners_ = 0;
  v41[1].__vftable = (std::__shared_weak_count_vtbl *)v40;
  v53[1] = (uint64_t)v41;
  siri::dialogengine::VariableObject::AddProperty(v39, v53);
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  if (SHIBYTE(v56.__end_cap_.__value_) < 0)
    operator delete(v56.__begin_);
  v44 = *a3;
  v45 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v56, "day");
  siri::dialogengine::VariableNumber::VariableNumber(v45, (const std::string *)&v56, (double)((int)v24 + v6));
  v52[0] = v45;
  v46 = (std::__shared_weak_count *)operator new();
  v46->__shared_owners_ = 0;
  v47 = (unint64_t *)&v46->__shared_owners_;
  v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937CE0;
  v46->__shared_weak_owners_ = 0;
  v46[1].__vftable = (std::__shared_weak_count_vtbl *)v45;
  v52[1] = (uint64_t)v46;
  siri::dialogengine::VariableObject::AddProperty(v44, v52);
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  if (SHIBYTE(v56.__end_cap_.__value_) < 0)
    operator delete(v56.__begin_);
LABEL_94:
  v56.__begin_ = (std::vector<std::pair<std::string, std::string>>::pointer)&__p;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  if (SHIBYTE(v58.__end_cap_.__value_) < 0)
    operator delete(v58.__begin_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
}

void sub_1BFB172C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void **a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  if (a23 < 0)
    operator delete(__p);
  a24 = &a31;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a24);
  if (a43 < 0)
    operator delete(a38);
  if (a50 < 0)
    operator delete(a45);
  a45 = (void *)(v50 - 160);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  if (*(char *)(v50 - 105) < 0)
    operator delete(*(void **)(v50 - 128));
  _Unwind_Resume(a1);
}

BOOL YAML::convert<BOOL>::decode(YAML::Node *a1, char *a2)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v14;
  std::string *v15;
  int v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  int v24;
  std::string *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  char v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  std::string::size_type v38;
  int v39;
  const void **v40;
  std::string *v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  char v47;
  _BOOL4 v48;
  char v49;
  std::string::size_type v51;
  int v52;
  unsigned int v53;
  char v54;
  std::string __p;
  char v56;

  if (YAML::Node::Type(a1) != 2)
  {
LABEL_81:
    LOBYTE(v17) = 0;
    return v17;
  }
  if ((v4 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(YAML::convert<BOOL>::decode(YAML::Node const&,BOOL &)::names, "y");
    std::string::basic_string[abi:ne180100]<0>(qword_1EF582B88, "n");
    std::string::basic_string[abi:ne180100]<0>(qword_1EF582BA0, "yes");
    std::string::basic_string[abi:ne180100]<0>(qword_1EF582BB8, "no");
    std::string::basic_string[abi:ne180100]<0>(qword_1EF582BD0, "true");
    std::string::basic_string[abi:ne180100]<0>(qword_1EF582BE8, "false");
    std::string::basic_string[abi:ne180100]<0>(qword_1EF582C00, "on");
    std::string::basic_string[abi:ne180100]<0>(qword_1EF582C18, "off");
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_1BF794000);
  }
  v5 = YAML::Node::Scalar(a1);
  v6 = *((unsigned __int8 *)v5 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = v5[1];
  if (v6)
  {
    v8 = 0;
    if (v7 >= 0)
      v9 = (unsigned __int8 *)v5;
    else
      v9 = (unsigned __int8 *)*v5;
    while (v9[v8] - 97 < 0x1A)
    {
      if (v6 == ++v8)
        goto LABEL_26;
    }
    v10 = *v9 - 65;
    std::string::basic_string(&__p, (const std::string *)v5, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v56);
    if (v10 >= 0x1A)
    {
      v17 = 0;
      v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      size = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (size)
      {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        v14 = size;
        v15 = p_p;
        while (1)
        {
          v16 = v15->__r_.__value_.__s.__data_[0];
          v15 = (std::string *)((char *)v15 + 1);
          if ((v16 - 97) >= 0x1A)
            break;
          if (!--v14)
            goto LABEL_21;
        }
        v51 = size - 1;
        do
        {
          v52 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          v53 = v52 - 65;
          v17 = (v52 - 65) < 0x1A;
          v31 = v51-- != 0;
          v54 = v31;
        }
        while (v53 <= 0x19 && (v54 & 1) != 0);
      }
      else
      {
LABEL_21:
        v17 = 1;
      }
    }
    if (v11 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (!v17)
      return v17;
  }
LABEL_26:
  v18 = 0;
  LOBYTE(v17) = 1;
  while (1)
  {
    v19 = &YAML::convert<BOOL>::decode(YAML::Node const&,BOOL &)::names[6 * v18];
    v20 = YAML::Node::Scalar(a1);
    v21 = *((unsigned __int8 *)v19 + 23);
    if ((v21 & 0x80u) == 0)
      v22 = *((unsigned __int8 *)v19 + 23);
    else
      v22 = v19[1];
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v23 = __p.__r_.__value_.__l.__size_;
    if (v22 != v23)
    {
      v33 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_50;
LABEL_49:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_50;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__p;
    else
      v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v21 & 0x80) != 0)
    {
      v33 = memcmp((const void *)*v19, v25, v19[1]) == 0;
      goto LABEL_48;
    }
    if (*((_BYTE *)v19 + 23))
    {
      v26 = v21 - 1;
      do
      {
        v28 = *(unsigned __int8 *)v19;
        v19 = (uint64_t *)((char *)v19 + 1);
        v27 = v28;
        v30 = v25->__r_.__value_.__s.__data_[0];
        v25 = (std::string *)((char *)v25 + 1);
        v29 = v30;
        v31 = v26-- != 0;
        v32 = v31;
        v33 = v27 == v29;
      }
      while (v27 == v29 && (v32 & 1) != 0);
LABEL_48:
      if ((v24 & 0x80000000) == 0)
        goto LABEL_50;
      goto LABEL_49;
    }
    v33 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_49;
LABEL_50:
    if (v33)
    {
      v49 = 1;
      goto LABEL_84;
    }
    v34 = &YAML::convert<BOOL>::decode(YAML::Node const&,BOOL &)::names[6 * v18];
    v35 = YAML::Node::Scalar(a1);
    v36 = *((unsigned __int8 *)v34 + 47);
    if ((v36 & 0x80u) == 0)
      v37 = *((unsigned __int8 *)v34 + 47);
    else
      v37 = v34[4];
    v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = __p.__r_.__value_.__l.__size_;
    if (v37 != v38)
    {
      v48 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_74;
LABEL_73:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_74;
    }
    v40 = (const void **)(v34 + 3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &__p;
    else
      v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v36 & 0x80) != 0)
    {
      v48 = memcmp(*v40, v41, v34[4]) == 0;
      goto LABEL_72;
    }
    if (*((_BYTE *)v34 + 47))
    {
      v42 = v36 - 1;
      do
      {
        v44 = *(unsigned __int8 *)v40;
        v40 = (const void **)((char *)v40 + 1);
        v43 = v44;
        v46 = v41->__r_.__value_.__s.__data_[0];
        v41 = (std::string *)((char *)v41 + 1);
        v45 = v46;
        v31 = v42-- != 0;
        v47 = v31;
        v48 = v43 == v45;
      }
      while (v43 == v45 && (v47 & 1) != 0);
LABEL_72:
      if ((v39 & 0x80000000) == 0)
        goto LABEL_74;
      goto LABEL_73;
    }
    v48 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_73;
LABEL_74:
    if (v48)
      break;
    LOBYTE(v17) = v18++ < 3;
    if (v18 == 4)
      goto LABEL_81;
  }
  v49 = 0;
LABEL_84:
  *a2 = v49;
  return v17;
}

void sub_1BFB17944(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  do
  {
    v2 -= 48;
    std::pair<std::string const,std::string>::~pair(v2);
  }
  while (v2 != v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::tolower(std::string *this, uint64_t a2)
{
  uint64_t v3;
  int v4;
  std::string *v5;
  std::string *v6;
  int v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    *this = *(std::string *)a2;
  v3 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v4 = (char)v3;
  v5 = (std::string *)((char *)this + v3);
  if (v4 >= 0)
  {
    v6 = this;
  }
  else
  {
    v5 = (std::string *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  while (v6 != v5)
  {
    v7 = v6->__r_.__value_.__s.__data_[0];
    if ((v7 - 65) < 0x1A)
      LOBYTE(v7) = v7 + 32;
    v6->__r_.__value_.__s.__data_[0] = v7;
    v6 = (std::string *)((char *)v6 + 1);
  }
}

uint64_t siri::dialogengine::GetCoreAnalyticsEvent@<X0>(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6;
  size_t v7;
  size_t v8;
  const void **v9;
  const void *v10;
  uint64_t result;
  xpc_object_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string *v19;
  unint64_t *v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL JSONBoolVal;
  unint64_t *v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t *v38;
  unint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::string *v46;
  unint64_t *v47;
  unint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  double JSONDoubleVal;
  unint64_t *v56;
  unint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  double v64;
  unint64_t *v65;
  unint64_t v66;
  const void *v67[2];
  const void *v68[2];
  const void *v69[2];
  const void *v70[2];
  const void *v71[2];
  void *__p[2];
  char v73;
  const void *v74[2];
  std::string v75;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v6 = strlen((const char *)siri::dialogengine::CAT_UPDATE_EVENT);
  v7 = v6;
  v8 = *((unsigned __int8 *)a1 + 23);
  if (*((char *)a1 + 23) < 0)
  {
    if ((const void *)v6 != a1[1])
    {
      v10 = (const void *)siri::dialogengine::CAT_EXECUTION_TIME_EVENT;
      result = strlen((const char *)siri::dialogengine::CAT_EXECUTION_TIME_EVENT);
      v8 = (size_t)a1[1];
      goto LABEL_49;
    }
    if (v6 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v9 = (const void **)*a1;
LABEL_7:
    if (!memcmp(v9, (const void *)siri::dialogengine::CAT_UPDATE_EVENT, v7))
    {
      v12 = xpc_dictionary_create(0, 0, 0);
      v13 = (const char *)siri::dialogengine::PUBLICATION_ID;
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)siri::dialogengine::PUBLICATION_ID);
      v14 = std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::at(a2, (const void **)__p);
      v16 = *(std::__shared_weak_count **)(v14 + 8);
      v74[0] = *(const void **)v14;
      v74[1] = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      siri::dialogengine::GetJSONStringVal(v74, v15, &v75);
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v75;
      else
        v19 = (std::string *)v75.__r_.__value_.__r.__words[0];
      xpc_dictionary_set_string(v12, v13, (const char *)v19);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (v16)
      {
        v20 = (unint64_t *)&v16->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (v73 < 0)
        operator delete(__p[0]);
      v22 = (const char *)siri::dialogengine::IS_DISABLED;
      std::string::basic_string[abi:ne180100]<0>(&v75, (char *)siri::dialogengine::IS_DISABLED);
      v23 = std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::at(a2, (const void **)&v75.__r_.__value_.__l.__data_);
      v25 = *(std::__shared_weak_count **)(v23 + 8);
      v71[0] = *(const void **)v23;
      v71[1] = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      JSONBoolVal = siri::dialogengine::GetJSONBoolVal(v71, v24);
      xpc_dictionary_set_BOOL(v12, v22, JSONBoolVal);
      if (v25)
      {
        v29 = (unint64_t *)&v25->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      v31 = (const char *)siri::dialogengine::IS_UP_TO_DATE;
      std::string::basic_string[abi:ne180100]<0>(&v75, (char *)siri::dialogengine::IS_UP_TO_DATE);
      v32 = std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::at(a2, (const void **)&v75.__r_.__value_.__l.__data_);
      v34 = *(std::__shared_weak_count **)(v32 + 8);
      v70[0] = *(const void **)v32;
      v70[1] = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v37 = siri::dialogengine::GetJSONBoolVal(v70, v33);
      xpc_dictionary_set_BOOL(v12, v31, v37);
      if (v34)
      {
        v38 = (unint64_t *)&v34->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      result = MEMORY[0x1C3B8D53C](a3, siri::dialogengine::CAT_UPDATE_EVENT);
      goto LABEL_89;
    }
    v10 = (const void *)siri::dialogengine::CAT_EXECUTION_TIME_EVENT;
    result = strlen((const char *)siri::dialogengine::CAT_EXECUTION_TIME_EVENT);
    if ((v8 & 0x80) == 0)
      goto LABEL_9;
    v8 = (size_t)a1[1];
LABEL_49:
    if (result != v8)
      return result;
    if (v8 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    a1 = (const void **)*a1;
    goto LABEL_52;
  }
  v9 = a1;
  if (v7 == v8)
    goto LABEL_7;
  v10 = (const void *)siri::dialogengine::CAT_EXECUTION_TIME_EVENT;
  result = strlen((const char *)siri::dialogengine::CAT_EXECUTION_TIME_EVENT);
LABEL_9:
  if (result != v8)
    return result;
LABEL_52:
  result = memcmp(a1, v10, v8);
  if ((_DWORD)result)
    return result;
  v12 = xpc_dictionary_create(0, 0, 0);
  v40 = (const char *)siri::dialogengine::CAT_ID;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)siri::dialogengine::CAT_ID);
  v41 = std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::at(a2, (const void **)__p);
  v43 = *(std::__shared_weak_count **)(v41 + 8);
  v69[0] = *(const void **)v41;
  v69[1] = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  siri::dialogengine::GetJSONStringVal(v69, v42, &v75);
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &v75;
  else
    v46 = (std::string *)v75.__r_.__value_.__r.__words[0];
  xpc_dictionary_set_string(v12, v40, (const char *)v46);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (v43)
  {
    v47 = (unint64_t *)&v43->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v73 < 0)
    operator delete(__p[0]);
  v49 = (const char *)siri::dialogengine::ELAPSED_MILLISECONDS;
  std::string::basic_string[abi:ne180100]<0>(&v75, (char *)siri::dialogengine::ELAPSED_MILLISECONDS);
  v50 = std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::at(a2, (const void **)&v75.__r_.__value_.__l.__data_);
  v52 = *(std::__shared_weak_count **)(v50 + 8);
  v68[0] = *(const void **)v50;
  v68[1] = v52;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  JSONDoubleVal = siri::dialogengine::GetJSONDoubleVal(v68, v51);
  xpc_dictionary_set_double(v12, v49, JSONDoubleVal);
  if (v52)
  {
    v56 = (unint64_t *)&v52->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  v58 = (const char *)siri::dialogengine::ELAPSED_THREAD_MILLISECONDS;
  std::string::basic_string[abi:ne180100]<0>(&v75, (char *)siri::dialogengine::ELAPSED_THREAD_MILLISECONDS);
  v59 = std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::at(a2, (const void **)&v75.__r_.__value_.__l.__data_);
  v61 = *(std::__shared_weak_count **)(v59 + 8);
  v67[0] = *(const void **)v59;
  v67[1] = v61;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = siri::dialogengine::GetJSONDoubleVal(v67, v60);
  xpc_dictionary_set_double(v12, v58, v64);
  if (v61)
  {
    v65 = (unint64_t *)&v61->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  result = MEMORY[0x1C3B8D53C](a3, siri::dialogengine::CAT_EXECUTION_TIME_EVENT);
LABEL_89:
  *(_QWORD *)(a3 + 24) = v12;
  return result;
}

void sub_1BFB17FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  if (*(char *)(v26 - 65) < 0)
    operator delete(*(void **)(v26 - 88));
  if (*(char *)(v25 + 23) < 0)
    operator delete(*(void **)v25);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::string>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

void siri::dialogengine::LogCoreAnalyticsCatUpdateEvent(uint64_t a1, siri::dialogengine *a2, siri::dialogengine *a3)
{
  uint64_t i;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::string v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  __int128 v13;
  uint64_t v14[3];
  _BYTE v15[8];
  _QWORD *v16;
  std::string __s;
  __int128 v18;
  _QWORD v19[3];
  __int128 v20;
  _QWORD v21[3];
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::CreateJSONStringVal(a1, (uint64_t *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__s, (char *)siri::dialogengine::PUBLICATION_ID);
  v18 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  siri::dialogengine::CreateJSONBoolVal(a2, v14);
  std::string::basic_string[abi:ne180100]<0>(v19, (char *)siri::dialogengine::IS_DISABLED);
  v20 = *(_OWORD *)v14;
  *(_OWORD *)v14 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal(a3, (uint64_t *)&v13);
  std::string::basic_string[abi:ne180100]<0>(v21, (char *)siri::dialogengine::IS_UP_TO_DATE);
  v22 = v13;
  v13 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v15, (const void **)&__s.__r_.__value_.__l.__data_, 3);
  for (i = 0; i != -15; i -= 5)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v22 + i * 8);
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  v6 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v7 = (unint64_t *)((char *)__p[1] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)siri::dialogengine::CAT_UPDATE_EVENT);
  siri::dialogengine::GetCoreAnalyticsEvent((const void **)__p, (uint64_t)v15, (uint64_t)&__s);
  if (v12 < 0)
    operator delete(__p[0]);
  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      goto LABEL_21;
    v9 = __s;
    goto LABEL_17;
  }
  if (__s.__r_.__value_.__l.__size_)
  {
    std::string::__init_copy_ctor_external(&v9, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
LABEL_17:
    v10 = v18;
    analytics_send_event_lazy();
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_21:
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v16);
}

void sub_1BFB18344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a33);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4siri12dialogengine30LogCoreAnalyticsCatUpdateEventERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbb_block_invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

void __copy_helper_block_e8_32c79_ZTSNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPvEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
}

void __destroy_helper_block_e8_32c79_ZTSNSt3__14pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPvEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void siri::dialogengine::LogCoreAnalyticsCatExecutionTimeEvent(uint64_t a1, double a2, double a3)
{
  uint64_t i;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::string v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  __int128 v13;
  uint64_t v14[3];
  _BYTE v15[8];
  _QWORD *v16;
  std::string __s;
  __int128 v18;
  _QWORD v19[3];
  __int128 v20;
  _QWORD v21[3];
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::CreateJSONStringVal(a1, (uint64_t *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__s, (char *)siri::dialogengine::CAT_ID);
  v18 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  siri::dialogengine::CreateJSONDoubleVal(a2, v14);
  std::string::basic_string[abi:ne180100]<0>(v19, (char *)siri::dialogengine::ELAPSED_MILLISECONDS);
  v20 = *(_OWORD *)v14;
  *(_OWORD *)v14 = 0uLL;
  siri::dialogengine::CreateJSONDoubleVal(a3, (uint64_t *)&v13);
  std::string::basic_string[abi:ne180100]<0>(v21, (char *)siri::dialogengine::ELAPSED_THREAD_MILLISECONDS);
  v22 = v13;
  v13 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v15, (const void **)&__s.__r_.__value_.__l.__data_, 3);
  for (i = 0; i != -15; i -= 5)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v22 + i * 8);
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  v6 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v7 = (unint64_t *)((char *)__p[1] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)siri::dialogengine::CAT_EXECUTION_TIME_EVENT);
  siri::dialogengine::GetCoreAnalyticsEvent((const void **)__p, (uint64_t)v15, (uint64_t)&__s);
  if (v12 < 0)
    operator delete(__p[0]);
  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      goto LABEL_21;
    v9 = __s;
    goto LABEL_17;
  }
  if (__s.__r_.__value_.__l.__size_)
  {
    std::string::__init_copy_ctor_external(&v9, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
LABEL_17:
    v10 = v18;
    analytics_send_event_lazy();
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_21:
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v16);
}

void sub_1BFB18718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a33);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4siri12dialogengine37LogCoreAnalyticsCatExecutionTimeEventERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEdd_block_invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

void siri::dialogengine::ExecutePatternSimple::~ExecutePatternSimple(siri::dialogengine::ExecutePatternSimple *this)
{
  void **v2;

  *(_QWORD *)this = off_1E7935C38;
  v2 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E7935C38;
  v2 = (void **)((char *)this + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
  MEMORY[0x1C3B8D890]();
}

uint64_t *siri::dialogengine::ExecutePatternSimple::Execute@<X0>(siri::dialogengine::ExecutePatternSimple *this@<X0>, uint64_t a2@<X1>, siri::dialogengine::VariableObject *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;

  v6 = *((_QWORD *)this + 13);
  v7 = *((_QWORD *)this + 14);
  while (v6 != v7)
  {
    v8 = *(char *)(v6 + 23);
    if (v8 < 0)
    {
      if (*(_QWORD *)(v6 + 8) == 4)
      {
        v9 = *(_DWORD **)v6;
LABEL_7:
        if (*v9 == 1752392019
          && !siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup((siri::dialogengine **)this, a2, a3))
        {
          goto LABEL_10;
        }
      }
    }
    else
    {
      v9 = (_DWORD *)v6;
      if (v8 == 4)
        goto LABEL_7;
    }
    siri::dialogengine::ExecutePatternBase::AddGroup(this, v6);
LABEL_10:
    v6 += 24;
  }
  return siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a4);
}

uint64_t siri::dialogengine::ExecutePatternSimple::ExecutePatternSimple(uint64_t a1, __int128 **a2)
{
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1E7935C38;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 104), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  return a1;
}

void sub_1BFB189CC(_Unwind_Exception *a1)
{
  siri::dialogengine::ExecutePatternBase *v1;

  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(v1);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_Color_Color_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Color.pb.cc", a4);
  SnippetUI::Color::Color((SnippetUI::Color *)&SnippetUI::_Color_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Color_default_instance_, v4);
  qword_1ED1D4DB8 = (uint64_t)&SnippetUI::_Color_HexValue_default_instance_;
  dword_1ED1D4DC0 = 0;
}

void InitDefaultsscc_info_Color_HexValue_Color_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Color.pb.cc", a4);
  SnippetUI::Color_HexValue::Color_HexValue((SnippetUI::Color_HexValue *)&SnippetUI::_Color_HexValue_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Color_HexValue_default_instance_, v4);
}

SnippetUI::Color_HexValue *SnippetUI::Color_HexValue::Color_HexValue(SnippetUI::Color_HexValue *this)
{
  *(_QWORD *)this = &off_1E7935D10;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load(scc_info_Color_HexValue_Color_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Color_HexValue_Color_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFB18AFC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Color_HexValue::~Color_HexValue(SnippetUI::Color_HexValue *this)
{
  SnippetUI::Color_HexValue::~Color_HexValue(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7935D10;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Color_HexValue *SnippetUI::Color_HexValue::New(SnippetUI::Color_HexValue *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color_HexValue>(0);
}

SnippetUI::Color_HexValue *SnippetUI::Color_HexValue::New(SnippetUI::Color_HexValue *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color_HexValue>(a2);
}

void SnippetUI::Color_HexValue::Clear(SnippetUI::Color_HexValue *this)
{
  uint64_t v1;
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  v1 = *((_QWORD *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::Color_HexValue *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::Color_HexValue::IsInitialized(SnippetUI::Color_HexValue *this)
{
  return 1;
}

char *SnippetUI::Color_HexValue::ByteSizeLong(SnippetUI::Color_HexValue *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const google::protobuf::UnknownFieldSet *v4;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Color_HexValue *)((char *)this + 8), v4, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::Color_HexValue::GetCachedSize(SnippetUI::Color_HexValue *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::Color_HexValue::_InternalParse(SnippetUI::Color_HexValue *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v4;
  std::string **v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  char *v10;
  std::string *v11;
  google::protobuf::internal *v13;

  v13 = a2;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v13, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v13;
    TagFallback = (google::protobuf::internal *)((char *)v13 + 1);
    v8 = (char *)*(unsigned __int8 *)v13;
    if ((*(char *)v13 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v13 + 2);
LABEL_6:
      v13 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v13, v8);
    v13 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v8 == 10)
    {
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
        TagFallback = v13;
      }
      v10 = google::protobuf::internal::InlineGreedyStringParserUTF8(v11, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Color.HexValue.rgba");
      goto LABEL_16;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v10 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v4, TagFallback, a3, v6);
LABEL_16:
    v13 = (google::protobuf::internal *)v10;
    if (!v10)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Color_HexValue::InternalSerializeWithCachedSizesToArray(SnippetUI::Color_HexValue *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  uint64_t v9;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.Color.HexValue.rgba");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 2), (char *)a2);
  }
LABEL_7:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v9 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::Color_HexValue::CopyFrom(SnippetUI::Color_HexValue *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Color_HexValue::Clear(this);
    SnippetUI::Color_HexValue::MergeFrom(this, a2);
  }
}

void SnippetUI::Color_HexValue::MergeFrom(SnippetUI::Color_HexValue *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Color_HexValue *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Color.pb.cc", 316);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Color_HexValue::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFB18EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Color_HexValue::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::Color_HexValue::GetMetadata(SnippetUI::Color_HexValue *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Color_2eproto);
  return file_level_metadata_Color_2eproto;
}

void *SnippetUI::Color_HexValue::default_instance(SnippetUI::Color_HexValue *this)
{
  if (atomic_load(scc_info_Color_HexValue_Color_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Color_HexValue_Color_2eproto);
  return &SnippetUI::_Color_HexValue_default_instance_;
}

void SnippetUI::Color_HexValue::MergeFrom(SnippetUI::Color_HexValue *this, const SnippetUI::Color_HexValue *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string **v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Color.pb.cc", 331);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Color_HexValue *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      return;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    return;
  }
  v9 = (std::string *)*((_QWORD *)this + 2);
  v8 = (std::string **)((char *)this + 16);
  v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, v6);
    else
      std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1BFB19014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Color_HexValue *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color_HexValue>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Color_HexValue *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Color_HexValue *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Color_HexValue>);
    SnippetUI::Color_HexValue::Color_HexValue(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Color_HexValue *)operator new();
    SnippetUI::Color_HexValue::Color_HexValue(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFB190B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Color_HexValue>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::Color *SnippetUI::Color::Color(SnippetUI::Color *this)
{
  *(_QWORD *)this = &off_1E7935DD0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load(scc_info_Color_Color_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Color_Color_2eproto);
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1BFB191B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Color::~Color(SnippetUI::Color *this)
{
  SnippetUI::Color::~Color(this);
  JUMPOUT(0x1C3B8D890);
}

{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7935DD0;
  v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = *((_QWORD *)this + 2);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    *((_DWORD *)this + 7) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Color *SnippetUI::Color::New(SnippetUI::Color *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
}

SnippetUI::Color *SnippetUI::Color::New(SnippetUI::Color *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(a2);
}

void SnippetUI::Color::Clear(SnippetUI::Color *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  if (*((_DWORD *)this + 7) == 1)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::Color *)((char *)this + 8);
  *((_DWORD *)v3 + 5) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

uint64_t SnippetUI::Color::IsInitialized(SnippetUI::Color *this)
{
  return 1;
}

char *SnippetUI::Color::ByteSizeLong(SnippetUI::Color *this)
{
  int v2;
  char *v3;
  uint64_t v4;
  int v5;

  v2 = *((_DWORD *)this + 7);
  if (v2 == 2)
  {
    v5 = *((_DWORD *)this + 4);
    if (v5 < 0)
      v4 = 11;
    else
      v4 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else if (v2 == 1)
  {
    v3 = SnippetUI::Color_HexValue::ByteSizeLong(*((SnippetUI::Color_HexValue **)this + 2));
    v4 = (uint64_t)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
  }
  else
  {
    v4 = 0;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Color *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v4, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v4;
  return (char *)v4;
}

uint64_t SnippetUI::Color::GetCachedSize(SnippetUI::Color *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::Color::_InternalParse(SnippetUI::Color *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  google::protobuf::internal *v8;
  google::protobuf::internal *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  SnippetUI::Color_HexValue *v17;
  unsigned int v18;
  char *v19;
  char *SizeFallback;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  google::protobuf::internal *v26;
  int v27;
  int v28;
  google::protobuf::internal *v30;

  v30 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) != 0)return v30;
        TagFallback = (google::protobuf::internal *)((char *)v30 + 1);
        v8 = (google::protobuf::internal *)*(unsigned __int8 *)v30;
        if ((*(char *)v30 & 0x80000000) == 0)
          goto LABEL_6;
        v8 = (google::protobuf::internal *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
          v30 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, (const char *)v8);
        v30 = TagFallback;
        if (!TagFallback)
          return TagFallback;
LABEL_7:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 16)
          goto LABEL_12;
        v11 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v12 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_22;
        v13 = *(char *)v11;
        v14 = v12 + (v13 << 7);
        v12 = v14 - 128;
        if ((v13 & 0x80000000) == 0)
        {
          v11 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_22:
          v30 = v11;
          goto LABEL_23;
        }
        v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, (v14 - 128));
        if (!v30)
          return 0;
        v12 = v28;
LABEL_23:
        v15 = *((_DWORD *)this + 7);
        if (v15 != 2)
        {
          if (v15 == 1)
          {
            v16 = *((_QWORD *)this + 2);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          *((_DWORD *)this + 7) = 2;
        }
        *((_DWORD *)this + 4) = v12;
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      if (*((_DWORD *)this + 7) == 1)
      {
        v17 = (SnippetUI::Color_HexValue *)*((_QWORD *)this + 2);
      }
      else
      {
        *((_DWORD *)this + 7) = 1;
        v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color_HexValue>(0);
        *((_QWORD *)this + 2) = v17;
        TagFallback = v30;
      }
      v18 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback)
          return 0;
        v19 = SizeFallback;
        v18 = v21;
      }
      else
      {
        v19 = (char *)TagFallback + 1;
      }
      v22 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v19, v18);
      v23 = *((_DWORD *)a3 + 22);
      v24 = __OFSUB__(v23--, 1);
      *((_DWORD *)a3 + 22) = v23;
      if (v23 < 0 != v24)
        return 0;
      v25 = v22;
      v26 = SnippetUI::Color_HexValue::_InternalParse(v17, (google::protobuf::internal *)v19, a3);
      if (!v26)
        return 0;
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20))
        return 0;
      v27 = *((_DWORD *)a3 + 7) + v25;
      *((_DWORD *)a3 + 7) = v27;
      *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v27 & (v27 >> 31));
      v30 = v26;
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v30 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v5, TagFallback, a3, v6);
    if (!v30)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Color::InternalSerializeWithCachedSizesToArray(SnippetUI::Color *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  SnippetUI::Color_HexValue *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v24;

  v6 = *((_DWORD *)this + 7);
  if (v6 == 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = (SnippetUI::Color_HexValue *)*((_QWORD *)this + 2);
    *a2 = 10;
    v8 = *((_DWORD *)v7 + 6);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v12 = v11;
          *v11++ = v10 | 0x80;
          v13 = v10 >> 7;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        v9 = v12 + 2;
        *v11 = v13;
      }
      else
      {
        a2[2] = v10;
        v9 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v8;
      v9 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::Color_HexValue::InternalSerializeWithCachedSizesToArray(v7, (google::protobuf::UnknownFieldSet *)v9, a3, a4);
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 < *(_QWORD *)a3
      || (v24 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2),
          a2 = (char *)v24,
          *((_DWORD *)this + 7) == 2))
    {
      v15 = *((_DWORD *)this + 4);
      *a2 = 16;
      if (v15 > 0x7F)
      {
        v16 = v15;
        a2[1] = v15 | 0x80;
        v17 = (unint64_t)(int)v15 >> 7;
        if (v16 >> 14)
        {
          v18 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v19 = v18;
            *v18++ = v17 | 0x80;
            v20 = v17 >> 7;
            v21 = v17 >> 14;
            v17 >>= 7;
          }
          while (v21);
          a2 = (char *)(v19 + 2);
          *v18 = v20;
        }
        else
        {
          a2[2] = v17;
          a2 += 3;
        }
        goto LABEL_21;
      }
    }
    else
    {
      LOBYTE(v15) = 0;
      *v24 = 16;
    }
    a2[1] = v15;
    a2 += 2;
  }
LABEL_21:
  v22 = *((_QWORD *)this + 1);
  if ((v22 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v22 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::Color::CopyFrom(SnippetUI::Color *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Color::Clear(this);
    SnippetUI::Color::MergeFrom(this, a2);
  }
}

void SnippetUI::Color::MergeFrom(SnippetUI::Color *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Color *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Color.pb.cc", 590);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Color::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFB197E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Color::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::Color::GetMetadata(SnippetUI::Color *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Color_2eproto);
  return qword_1EF582C50;
}

void *SnippetUI::Color::default_instance(SnippetUI::Color *this)
{
  if (atomic_load(scc_info_Color_Color_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Color_Color_2eproto);
  return &SnippetUI::_Color_default_instance_;
}

void SnippetUI::Color::MergeFrom(SnippetUI::Color *this, const SnippetUI::Color *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  SnippetUI::Color_HexValue *v10;
  const SnippetUI::Color_HexValue *v11;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Color.pb.cc", 605);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Color *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_DWORD *)a2 + 7);
  if (v6 == 1)
  {
    if (*((_DWORD *)this + 7) == 1)
    {
      v10 = (SnippetUI::Color_HexValue *)*((_QWORD *)this + 2);
    }
    else
    {
      *((_DWORD *)this + 7) = 1;
      v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color_HexValue>(0);
      *((_QWORD *)this + 2) = v10;
      if (*((_DWORD *)a2 + 7) != 1)
      {
        v11 = (const SnippetUI::Color_HexValue *)&SnippetUI::_Color_HexValue_default_instance_;
        goto LABEL_18;
      }
    }
    v11 = (const SnippetUI::Color_HexValue *)*((_QWORD *)a2 + 2);
LABEL_18:
    SnippetUI::Color_HexValue::MergeFrom(v10, v11);
    return;
  }
  if (v6 == 2)
  {
    v7 = *((_DWORD *)a2 + 4);
    v8 = *((_DWORD *)this + 7);
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        v9 = *((_QWORD *)this + 2);
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      *((_DWORD *)this + 7) = 2;
    }
    *((_DWORD *)this + 4) = v7;
  }
}

void sub_1BFB1997C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Color *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Color *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Color *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Color>);
    SnippetUI::Color::Color(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Color *)operator new();
    SnippetUI::Color::Color(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFB19A18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A3C407A2727C4);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Color>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t SnippetUI::Color_Name_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Color_2eproto);
  return file_level_enum_descriptors_Color_2eproto;
}

BOOL SnippetUI::Color_Name_IsValid(SnippetUI *this)
{
  return this < 0x13;
}

SnippetUI::Color_HexValue *SnippetUI::Color_HexValue::Color_HexValue(SnippetUI::Color_HexValue *this, const SnippetUI::Color_HexValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7935D10;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Color_HexValue *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  return this;
}

void sub_1BFB19B6C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Color_HexValue::CopyFrom(SnippetUI::Color_HexValue *this, const SnippetUI::Color_HexValue *a2)
{
  if (a2 != this)
  {
    SnippetUI::Color_HexValue::Clear(this);
    SnippetUI::Color_HexValue::MergeFrom(this, a2);
  }
}

__n128 SnippetUI::Color_HexValue::InternalSwap(SnippetUI::Color_HexValue *this, SnippetUI::Color_HexValue *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  __n128 result;
  std::string **v8;
  std::string *v9;
  uint64_t *v10;
  std::string **v11;
  std::string *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::Color_HexValue *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v10 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (std::string **)((char *)this + 16);
  v9 = (std::string *)v10;
  v11 = (std::string **)((char *)a2 + 16);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = *v11;
  }
  v13 = v9->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

void SnippetUI::Color::InitAsDefaultInstance(SnippetUI::Color *this)
{
  qword_1ED1D4DB8 = (uint64_t)&SnippetUI::_Color_HexValue_default_instance_;
  dword_1ED1D4DC0 = 0;
}

uint64_t SnippetUI::Color::_Internal::hex_value(SnippetUI::Color::_Internal *this, const SnippetUI::Color *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::Color::set_allocated_hex_value(uint64_t this, SnippetUI::Color_HexValue *a2)
{
  uint64_t v3;

  v3 = this;
  if (*(_DWORD *)(this + 28) == 1)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v3 + 28) = 0;
  if (a2)
  {
    *(_DWORD *)(v3 + 28) = 1;
    *(_QWORD *)(v3 + 16) = a2;
  }
  return this;
}

uint64_t SnippetUI::Color::clear_value(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_DWORD *)(this + 28) == 1)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

SnippetUI::Color *SnippetUI::Color::Color(SnippetUI::Color *this, const SnippetUI::Color *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  SnippetUI::Color_HexValue *v7;
  const SnippetUI::Color_HexValue *v8;

  *(_QWORD *)this = &off_1E7935DD0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Color *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_DWORD *)this + 7) = 0;
  v5 = *((_DWORD *)a2 + 7);
  if (v5 == 1)
  {
    *((_DWORD *)this + 7) = 1;
    v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color_HexValue>(0);
    *((_QWORD *)this + 2) = v7;
    if (*((_DWORD *)a2 + 7) == 1)
      v8 = (const SnippetUI::Color_HexValue *)*((_QWORD *)a2 + 2);
    else
      v8 = (const SnippetUI::Color_HexValue *)&SnippetUI::_Color_HexValue_default_instance_;
    SnippetUI::Color_HexValue::MergeFrom(v7, v8);
  }
  else if (v5 == 2)
  {
    v6 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 7) = 2;
    *((_DWORD *)this + 4) = v6;
  }
  return this;
}

void sub_1BFB19E10(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Color::CopyFrom(SnippetUI::Color *this, const SnippetUI::Color *a2)
{
  if (a2 != this)
  {
    SnippetUI::Color::Clear(this);
    SnippetUI::Color::MergeFrom(this, a2);
  }
}

void SnippetUI::Color::InternalSwap(SnippetUI::Color *this, SnippetUI::Color *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::Color *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

std::string *siri::dialogengine::DialogLocation::name(siri::dialogengine::DialogLocation *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *LocationVariable;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::string v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  std::string v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  LocationVariable = (std::string *)siri::dialogengine::GetLocationVariable(a2, a2, a3);
  if (!LocationVariable)
    goto LABEL_32;
  v4 = LocationVariable;
  std::string::basic_string[abi:ne180100]<0>(&v13, "name");
  v5 = std::__tree<std::string>::find<std::string>((uint64_t)&v4[3], (const void **)&v13.__r_.__value_.__l.__data_);
  if (&v4[3].__r_.__value_.__r.__words[1] == (std::string::size_type *)v5)
  {
    v7 = 0;
    v6 = 0;
    v27 = 0;
    v28 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 56);
    v7 = *(std::__shared_weak_count **)(v5 + 64);
    v27 = v6;
    v28 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_27;
  }
  else if (!v6)
  {
    goto LABEL_27;
  }
  v4 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v26, "");
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v6 + 48))(&v13, v6);
  siri::dialogengine::VariableString::VariableString(v4, &v26, (const siri::dialogengine::SpeakableString *)&v13);
  if (v25 < 0)
    operator delete(__p);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (!v7)
    goto LABEL_31;
LABEL_27:
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v6)
      return v4;
  }
  else
  {
LABEL_31:
    if (v6)
      return v4;
  }
LABEL_32:
  v4 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  std::string::basic_string[abi:ne180100]<0>(&v26, "");
  siri::dialogengine::VariableString::VariableString((uint64_t)v4, &v13, (uint64_t)&v26);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFB1A10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  siri::dialogengine::SpeakableString::~SpeakableString(&__p);
  if (*(char *)(v15 - 49) < 0)
    operator delete(*(void **)(v15 - 72));
  MEMORY[0x1C3B8D890](v14, 0x10B3C40D3060B95);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v15 - 48);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetLocationVariable(siri::dialogengine *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *RequiredArrayParameter;
  _QWORD *RequiredObjectParameter;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 v20;
  void *__p[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(__p, "values");
  RequiredArrayParameter = siri::dialogengine::GetRequiredArrayParameter((const void **)__p, (uint64_t)this);
  RequiredObjectParameter = RequiredArrayParameter;
  if (v22 < 0)
  {
    operator delete(__p[0]);
    if (!RequiredObjectParameter)
      return RequiredObjectParameter;
  }
  else if (!RequiredArrayParameter)
  {
    return RequiredObjectParameter;
  }
  v6 = RequiredObjectParameter[10] - RequiredObjectParameter[9];
  if (!v6)
    return 0;
  v7 = 0;
  v8 = v6 >> 4;
  while (1)
  {
    v9 = RequiredObjectParameter[9];
    if (v7 >= (RequiredObjectParameter[10] - v9) >> 4)
    {
      v15 = 0;
      v10 = 0uLL;
    }
    else
    {
      v10 = *(__n128 *)(v9 + 16 * v7);
      v11 = *(_QWORD *)(v9 + 16 * v7 + 8);
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      if (v10.n128_u64[0])
      {
        v20 = v10;
        v10 = v20;
        v15 = (uint64_t)v14;
      }
      else
      {
        v15 = 0;
      }
    }
    v16 = (std::__shared_weak_count *)v10.n128_u64[1];
    if (v10.n128_u64[1])
    {
      v17 = (unint64_t *)(v10.n128_u64[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(unint64_t, __n128))(*(_QWORD *)v10.n128_u64[1] + 16))(v10.n128_u64[1], v10);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v15)
      break;
    if (++v7 == v8)
      return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "address");
  RequiredObjectParameter = siri::dialogengine::GetRequiredObjectParameter((const void **)__p, v15);
  if (v22 < 0)
    operator delete(__p[0]);
  return RequiredObjectParameter;
}

void sub_1BFB1A340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogLocation::shortLocation(siri::dialogengine::DialogLocation *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  const siri::dialogengine::VariableObject *LocationVariable;
  const siri::dialogengine::VariableObject *v5;
  std::string *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  void *v38;
  std::string::size_type v39;
  BOOL v40;
  std::string::size_type v41;
  _BOOL4 v42;
  _BOOL4 v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  std::string::size_type v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::string::size_type v71;
  std::string::size_type v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::string::size_type v77;
  std::string::size_type v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::string::size_type v82;
  std::string::size_type v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::string::size_type size;
  std::string *v88;
  uint64_t v89;
  std::string::size_type v90;
  std::string::size_type v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::string v97;
  std::string v98;
  std::string v99;
  __int128 *v100[3];
  std::string v101;
  std::string v102;
  void *v103;
  char v104;
  void *v105;
  char v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  void *v111;
  char v112;
  void *v113;
  char v114;
  std::string v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE __str[32];
  __int128 v119;
  void *v120[2];
  void *v121[2];
  __int128 v122;
  void *v123[2];
  void *v124[2];
  __int128 v125;
  std::string v126;
  _BYTE v127[32];
  __int128 v128;
  void *v129[2];
  void *v130[2];
  __int128 v131;
  void *v132[2];
  void *v133[2];
  __int128 v134;
  void *v135[2];
  uint64_t v136;
  std::string v137[2];
  void *v138[2];
  void *v139[2];
  __int128 v140;
  void *v141[2];
  void *v142[2];
  __int128 v143;
  std::string v144;
  std::string v145[2];
  void *v146[2];
  void *v147[2];
  __int128 v148;
  void *v149[2];
  void *v150[2];
  __int128 v151;
  std::string v152;
  std::string v153;
  std::string v154;
  std::string v155;
  std::string v156;
  std::string v157;
  std::string v158;
  std::string v159;
  std::string v160;
  std::string v161;
  std::string v162;
  std::string v163;
  std::string v164;
  std::string __s;
  void *__p[2];
  _QWORD v167[4];
  void *v168[2];
  void *v169[2];
  __int128 v170;
  void *v171[2];
  void *v172[2];
  __int128 v173;
  std::string v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  __int128 **v183;

  LocationVariable = (const siri::dialogengine::VariableObject *)siri::dialogengine::GetLocationVariable(a2, a2, a3);
  if (!LocationVariable)
    goto LABEL_301;
  v5 = LocationVariable;
  std::string::basic_string[abi:ne180100]<0>(__p, "fullThoroughfare");
  v6 = (std::string *)((char *)v5 + 72);
  v7 = std::__tree<std::string>::find<std::string>((uint64_t)v5 + 72, (const void **)__p);
  v8 = (char *)v5 + 80;
  if ((const siri::dialogengine::VariableObject *)((char *)v5 + 80) == (const siri::dialogengine::VariableObject *)v7)
  {
    v10 = 0;
    v181 = 0;
    v182 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v7 + 56);
    v9 = *(std::__shared_weak_count **)(v7 + 64);
    v181 = v10;
    v182 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  if (SHIBYTE(v167[0]) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "thoroughfare");
  v13 = std::__tree<std::string>::find<std::string>((uint64_t)v5 + 72, (const void **)__p);
  if (v8 == (char *)v13)
  {
    v15 = 0;
    v179 = 0;
    v180 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v13 + 56);
    v14 = *(std::__shared_weak_count **)(v13 + 64);
    v179 = v15;
    v180 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  if (SHIBYTE(v167[0]) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "subThoroughfare");
  v18 = std::__tree<std::string>::find<std::string>((uint64_t)v5 + 72, (const void **)__p);
  if (v8 == (char *)v18)
  {
    v20 = 0;
    v177 = 0;
    v178 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(v18 + 56);
    v19 = *(std::__shared_weak_count **)(v18 + 64);
    v177 = v20;
    v178 = v19;
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  if (SHIBYTE(v167[0]) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "locality");
  v23 = std::__tree<std::string>::find<std::string>((uint64_t)v5 + 72, (const void **)__p);
  if (v8 == (char *)v23)
  {
    v25 = 0;
    v175 = 0;
    v176 = 0;
  }
  else
  {
    v25 = *(_QWORD *)(v23 + 56);
    v24 = *(std::__shared_weak_count **)(v23 + 64);
    v175 = v25;
    v176 = v24;
    if (v24)
    {
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  if (SHIBYTE(v167[0]) < 0)
  {
    operator delete(__p[0]);
    if (v15)
      goto LABEL_34;
LABEL_36:
    if (v10)
    {
      memset(&v174, 0, sizeof(v174));
      v173 = 0u;
      *(_OWORD *)v172 = 0u;
      *(_OWORD *)v171 = 0u;
      v170 = 0u;
      *(_OWORD *)v169 = 0u;
      *(_OWORD *)v168 = 0u;
      memset(v167, 0, sizeof(v167));
      *(_OWORD *)__p = 0u;
      goto LABEL_38;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "subLocality");
    v58 = std::__tree<std::string>::find<std::string>((uint64_t)v5 + 72, (const void **)__p);
    if (v8 == (char *)v58)
    {
      v59 = 0;
      v60 = 0;
      *(_OWORD *)__str = 0uLL;
    }
    else
    {
      v60 = *(_QWORD *)(v58 + 56);
      v59 = *(std::__shared_weak_count **)(v58 + 64);
      *(_QWORD *)__str = v60;
      *(_QWORD *)&__str[8] = v59;
      if (v59)
      {
        v61 = (unint64_t *)&v59->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
    }
    if (SHIBYTE(v167[0]) < 0)
      operator delete(__p[0]);
    if (v60)
    {
      v6 = (std::string *)operator new();
      std::string::basic_string[abi:ne180100]<0>(&v153, "");
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v60 + 48))(__p, v60);
      siri::dialogengine::VariableString::VariableString(v6, &v153, (const siri::dialogengine::SpeakableString *)__p);
    }
    else
    {
      if (!v25)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "subAdministrativeArea");
        v65 = std::__tree<std::string>::find<std::string>((uint64_t)v5 + 72, (const void **)__p);
        if (v8 == (char *)v65)
        {
          v66 = 0;
          v67 = 0;
          *(_OWORD *)&v102.__r_.__value_.__l.__data_ = 0uLL;
        }
        else
        {
          v67 = *(_QWORD *)(v65 + 56);
          v66 = *(std::__shared_weak_count **)(v65 + 64);
          v102.__r_.__value_.__r.__words[0] = v67;
          v102.__r_.__value_.__l.__size_ = (std::string::size_type)v66;
          if (v66)
          {
            v68 = (unint64_t *)&v66->__shared_owners_;
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
          }
        }
        if (SHIBYTE(v167[0]) < 0)
          operator delete(__p[0]);
        if (v67)
        {
          v6 = (std::string *)operator new();
          std::string::basic_string[abi:ne180100]<0>(&v153, "");
          (*(void (**)(void **__return_ptr, std::string::size_type))(*(_QWORD *)v67 + 48))(__p, v67);
          siri::dialogengine::VariableString::VariableString(v6, &v153, (const siri::dialogengine::SpeakableString *)__p);
          siri::dialogengine::SpeakableString::~SpeakableString(__p);
          if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v153.__r_.__value_.__l.__data_);
          v44 = 1;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "administrativeArea");
          v70 = std::__tree<std::string>::find<std::string>((uint64_t)v5 + 72, (const void **)__p);
          if (v8 == (char *)v70)
          {
            v71 = 0;
            *(_OWORD *)&v163.__r_.__value_.__l.__data_ = 0uLL;
          }
          else
          {
            v71 = *(_QWORD *)(v70 + 56);
            v72 = *(_QWORD *)(v70 + 64);
            v163.__r_.__value_.__r.__words[0] = v71;
            v163.__r_.__value_.__l.__size_ = v72;
            if (v72)
            {
              v73 = (unint64_t *)(v72 + 8);
              do
                v74 = __ldxr(v73);
              while (__stxr(v74 + 1, v73));
            }
          }
          if (SHIBYTE(v167[0]) < 0)
          {
            operator delete(__p[0]);
            v71 = v163.__r_.__value_.__r.__words[0];
          }
          if (v71)
          {
            std::string::basic_string[abi:ne180100]<0>(v145, "state");
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v163.__r_.__value_.__l.__data_ + 48))(&v153);
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(v137, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
            else
              v137[0] = v154;
            memset(v127, 0, 24);
            siri::dialogengine::ApplySemanticConcept(this, v145, v137, (__int128 **)v127, (std::string *)__p);
            __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v127;
            std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
            if (SHIBYTE(v137[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v137[0].__r_.__value_.__l.__data_);
            siri::dialogengine::SpeakableString::~SpeakableString((void **)&v153.__r_.__value_.__l.__data_);
            if (SHIBYTE(v145[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v145[0].__r_.__value_.__l.__data_);
            v6 = (std::string *)operator new();
            std::string::basic_string[abi:ne180100]<0>(&v153, "");
            siri::dialogengine::VariableString::VariableString(v6, &v153, (const siri::dialogengine::SpeakableString *)__p);
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v153.__r_.__value_.__l.__data_);
            siri::dialogengine::SpeakableString::~SpeakableString(__p);
            v44 = 1;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "postCode");
            v75 = std::__tree<std::string>::find<std::string>((uint64_t)v5 + 72, (const void **)__p);
            if (v8 == (char *)v75)
            {
              v77 = 0;
              *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
            }
            else
            {
              v76 = v75;
              v77 = *(_QWORD *)(v75 + 56);
              v78 = *(_QWORD *)(v76 + 64);
              __s.__r_.__value_.__r.__words[0] = v77;
              __s.__r_.__value_.__l.__size_ = v78;
              if (v78)
              {
                v79 = (unint64_t *)(v78 + 8);
                do
                  v80 = __ldxr(v79);
                while (__stxr(v80 + 1, v79));
              }
            }
            if (SHIBYTE(v167[0]) < 0)
            {
              operator delete(__p[0]);
              v77 = __s.__r_.__value_.__r.__words[0];
            }
            if (v77)
            {
              (*(void (**)(void **__return_ptr))(*(_QWORD *)v77 + 48))(__p);
              if (SHIBYTE(v167[3]) < 0)
                std::string::__init_copy_ctor_external(&v153, (const std::string::value_type *)v167[1], v167[2]);
              else
                v153 = *(std::string *)&v167[1];
              siri::dialogengine::SpeakableString::~SpeakableString(__p);
              siri::dialogengine::InsertSpacesInPostCode((uint64_t)v145, (uint64_t *)&v153);
              v86 = operator new();
              std::string::basic_string[abi:ne180100]<0>(v137, "");
              (*(void (**)(void **__return_ptr))(*(_QWORD *)__s.__r_.__value_.__l.__data_ + 48))(__p);
              if (SHIBYTE(v167[0]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v127, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                *(_OWORD *)v127 = *(_OWORD *)__p;
                *(_QWORD *)&v127[16] = v167[0];
              }
              size = HIBYTE(v145[0].__r_.__value_.__r.__words[2]);
              if ((v145[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v145[0].__r_.__value_.__l.__size_;
              if (size)
                v88 = v145;
              else
                v88 = &v153;
              siri::dialogengine::VariableString::VariableString(v86, v137, (const std::string *)v127, v88);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "country");
            v81 = std::__tree<std::string>::find<std::string>((uint64_t)v5 + 72, (const void **)__p);
            if (v8 == (char *)v81)
            {
              v82 = 0;
              *(_OWORD *)&v161.__r_.__value_.__l.__data_ = 0uLL;
            }
            else
            {
              v82 = *(_QWORD *)(v81 + 56);
              v83 = *(_QWORD *)(v81 + 64);
              v161.__r_.__value_.__r.__words[0] = v82;
              v161.__r_.__value_.__l.__size_ = v83;
              if (v83)
              {
                v84 = (unint64_t *)(v83 + 8);
                do
                  v85 = __ldxr(v84);
                while (__stxr(v85 + 1, v84));
              }
            }
            if (SHIBYTE(v167[0]) < 0)
            {
              operator delete(__p[0]);
              v82 = v161.__r_.__value_.__r.__words[0];
            }
            if (v82)
            {
              std::string::basic_string[abi:ne180100]<0>(v145, "country");
              (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v161.__r_.__value_.__l.__data_ + 48))(&v153);
              if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(v137, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
              else
                v137[0] = v154;
              memset(v127, 0, 24);
              siri::dialogengine::ApplySemanticConcept(this, v145, v137, (__int128 **)v127, (std::string *)__p);
              v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v127;
              std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
              if (SHIBYTE(v137[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v137[0].__r_.__value_.__l.__data_);
              siri::dialogengine::SpeakableString::~SpeakableString((void **)&v153.__r_.__value_.__l.__data_);
              if (SHIBYTE(v145[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v145[0].__r_.__value_.__l.__data_);
              v6 = (std::string *)operator new();
              std::string::basic_string[abi:ne180100]<0>(&v153, "");
              siri::dialogengine::VariableString::VariableString(v6, &v153, (const siri::dialogengine::SpeakableString *)__p);
              if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v153.__r_.__value_.__l.__data_);
              siri::dialogengine::SpeakableString::~SpeakableString(__p);
              v44 = 1;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "name");
              v89 = std::__tree<std::string>::find<std::string>((uint64_t)v5 + 72, (const void **)__p);
              if (v8 == (char *)v89)
              {
                v90 = 0;
                *(_OWORD *)&v145[0].__r_.__value_.__l.__data_ = 0uLL;
              }
              else
              {
                v90 = *(_QWORD *)(v89 + 56);
                v91 = *(_QWORD *)(v89 + 64);
                v145[0].__r_.__value_.__r.__words[0] = v90;
                v145[0].__r_.__value_.__l.__size_ = v91;
                if (v91)
                {
                  v92 = (unint64_t *)(v91 + 8);
                  do
                    v93 = __ldxr(v92);
                  while (__stxr(v93 + 1, v92));
                }
              }
              if (SHIBYTE(v167[0]) < 0)
              {
                operator delete(__p[0]);
                v90 = v145[0].__r_.__value_.__r.__words[0];
              }
              if (v90)
              {
                v6 = (std::string *)operator new();
                std::string::basic_string[abi:ne180100]<0>(&v153, "");
                (*(void (**)(void **__return_ptr))(*(_QWORD *)v145[0].__r_.__value_.__l.__data_ + 48))(__p);
                siri::dialogengine::VariableString::VariableString(v6, &v153, (const siri::dialogengine::SpeakableString *)__p);
                siri::dialogengine::SpeakableString::~SpeakableString(__p);
                if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v153.__r_.__value_.__l.__data_);
                v44 = 1;
              }
              else
              {
                v44 = 0;
              }
              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v145);
            }
            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v161);
            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__s);
          }
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v163);
        }
        if (v66)
        {
          v94 = (unint64_t *)&v66->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v59 = *(std::__shared_weak_count **)&__str[8];
        if (!*(_QWORD *)&__str[8])
          goto LABEL_281;
LABEL_336:
        v63 = (unint64_t *)&v59->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
        goto LABEL_281;
      }
      v6 = (std::string *)operator new();
      std::string::basic_string[abi:ne180100]<0>(&v153, "");
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v25 + 48))(__p, v25);
      siri::dialogengine::VariableString::VariableString(v6, &v153, (const siri::dialogengine::SpeakableString *)__p);
    }
    if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v174.__r_.__value_.__l.__data_);
    if (SHIBYTE(v173) < 0)
      operator delete(v172[1]);
    if (SHIBYTE(v172[0]) < 0)
      operator delete(v171[0]);
    if (SHIBYTE(v170) < 0)
      operator delete(v169[1]);
    if (SHIBYTE(v169[0]) < 0)
      operator delete(v168[0]);
    if (SHIBYTE(v167[3]) < 0)
      operator delete((void *)v167[1]);
    if (SHIBYTE(v167[0]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    v44 = 1;
    if (!v59)
      goto LABEL_281;
    goto LABEL_336;
  }
  if (!v15)
    goto LABEL_36;
LABEL_34:
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v15 + 48))(__p, v15);
LABEL_38:
  if (v20 | v25)
  {
    siri::dialogengine::GetLanguageForCountryCode(&__s, v5);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v162, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v162 = __s;
    siri::dialogengine::GetSeparatorsForLanguage(&v163, &v162);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v161, v163.__r_.__value_.__l.__data_, v163.__r_.__value_.__l.__size_);
    else
      v161 = v163;
    if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v160, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
    else
      v160 = v164;
    siri::dialogengine::SpeakableString::SpeakableString(&v153, (const siri::dialogengine::SpeakableString *)__p);
    if (v25)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v25 + 48))(v145, v25);
      if (v20)
        goto LABEL_54;
    }
    else
    {
      memset(&v152, 0, sizeof(v152));
      v151 = 0u;
      *(_OWORD *)v150 = 0u;
      *(_OWORD *)v149 = 0u;
      v148 = 0u;
      *(_OWORD *)v147 = 0u;
      *(_OWORD *)v146 = 0u;
      memset(v145, 0, sizeof(v145));
      if (v20)
      {
LABEL_54:
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v20 + 48))(v137, v20);
        if (v10)
        {
LABEL_55:
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v10 + 48))(v127, v10);
          goto LABEL_59;
        }
LABEL_58:
        v136 = 0;
        v134 = 0u;
        *(_OWORD *)v135 = 0u;
        *(_OWORD *)v132 = 0u;
        *(_OWORD *)v133 = 0u;
        *(_OWORD *)v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        *(_OWORD *)v129 = 0u;
        memset(v127, 0, sizeof(v127));
LABEL_59:
        v125 = 0u;
        memset(&v126, 0, sizeof(v126));
        *(_OWORD *)v123 = 0u;
        *(_OWORD *)v124 = 0u;
        *(_OWORD *)v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        *(_OWORD *)v120 = 0u;
        memset(__str, 0, sizeof(__str));
        std::string::operator=((std::string *)__p, (const std::string *)__str);
        std::string::operator=((std::string *)&v167[1], (const std::string *)&__str[24]);
        std::string::operator=((std::string *)v168, (const std::string *)v120);
        std::string::operator=((std::string *)&v169[1], (const std::string *)&v121[1]);
        std::string::operator=((std::string *)v171, (const std::string *)v123);
        std::string::operator=((std::string *)&v172[1], (const std::string *)&v124[1]);
        std::string::operator=(&v174, &v126);
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v126.__r_.__value_.__l.__data_);
        if (SHIBYTE(v125) < 0)
          operator delete(v124[1]);
        if (SHIBYTE(v124[0]) < 0)
          operator delete(v123[0]);
        if (SHIBYTE(v122) < 0)
          operator delete(v121[1]);
        if (SHIBYTE(v121[0]) < 0)
          operator delete(v120[0]);
        if (SHIBYTE(v119) < 0)
          operator delete(*(void **)&__str[24]);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        v28 = HIBYTE(v128);
        if (v128 < 0)
          v28 = v128;
        if (v28)
          goto LABEL_79;
        v29 = v127[23];
        if (v127[23] < 0)
          v29 = *(_QWORD *)&v127[8];
        if (v29)
        {
LABEL_79:
          v125 = 0u;
          memset(&v126, 0, sizeof(v126));
          *(_OWORD *)v123 = 0u;
          *(_OWORD *)v124 = 0u;
          *(_OWORD *)v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          *(_OWORD *)v120 = 0u;
          memset(__str, 0, sizeof(__str));
          std::string::operator=(v137, (const std::string *)__str);
          std::string::operator=(&v137[1], (const std::string *)&__str[24]);
          std::string::operator=((std::string *)v138, (const std::string *)v120);
          std::string::operator=((std::string *)&v139[1], (const std::string *)&v121[1]);
          std::string::operator=((std::string *)v141, (const std::string *)v123);
          std::string::operator=((std::string *)&v142[1], (const std::string *)&v124[1]);
          std::string::operator=(&v144, &v126);
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v126.__r_.__value_.__l.__data_);
          if (SHIBYTE(v125) < 0)
            operator delete(v124[1]);
          if (SHIBYTE(v124[0]) < 0)
            operator delete(v123[0]);
          if (SHIBYTE(v122) < 0)
            operator delete(v121[1]);
          if (SHIBYTE(v121[0]) < 0)
            operator delete(v120[0]);
          if (SHIBYTE(v119) < 0)
            operator delete(*(void **)&__str[24]);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          v125 = 0u;
          memset(&v126, 0, sizeof(v126));
          *(_OWORD *)v123 = 0u;
          *(_OWORD *)v124 = 0u;
          *(_OWORD *)v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          *(_OWORD *)v120 = 0u;
          memset(__str, 0, sizeof(__str));
          std::string::operator=(&v153, (const std::string *)__str);
          std::string::operator=(&v154, (const std::string *)&__str[24]);
          std::string::operator=(&v155, (const std::string *)v120);
          std::string::operator=(&v156, (const std::string *)&v121[1]);
          std::string::operator=(&v157, (const std::string *)v123);
          std::string::operator=(&v158, (const std::string *)&v124[1]);
          std::string::operator=(&v159, &v126);
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v126.__r_.__value_.__l.__data_);
          if (SHIBYTE(v125) < 0)
            operator delete(v124[1]);
          if (SHIBYTE(v124[0]) < 0)
            operator delete(v123[0]);
          if (SHIBYTE(v122) < 0)
            operator delete(v121[1]);
          if (SHIBYTE(v121[0]) < 0)
            operator delete(v120[0]);
          if (SHIBYTE(v119) < 0)
            operator delete(*(void **)&__str[24]);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
        }
        siri::dialogengine::GetLocationComponentOrder(&__s, &v116);
        v30 = v116;
        v96 = v117;
        if (v116 == v117)
        {
LABEL_250:
          if (SHIBYTE(v167[0]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)__str = *(_OWORD *)__p;
            *(_QWORD *)&__str[16] = v167[0];
          }
          if (SHIBYTE(v167[3]) < 0)
            std::string::__init_copy_ctor_external(&v102, (const std::string::value_type *)v167[1], v167[2]);
          else
            v102 = *(std::string *)&v167[1];
          if ((__str[23] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
          else
            v99 = *(std::string *)__str;
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v98, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
          else
            v98 = v102;
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v97, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v97 = __s;
          siri::dialogengine::CreateLocationVariable((uint64_t)&v99, (uint64_t)&v98, &v97);
        }
        while (1)
        {
          if (*(char *)(v30 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)v30, *(_QWORD *)(v30 + 8));
          }
          else
          {
            v31 = *(_OWORD *)v30;
            v115.__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 16);
            *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v31;
          }
          std::string::basic_string[abi:ne180100]<0>(__str, "LINE_SEPARATOR");
          v32 = siri::dialogengine::StringsEqual((uint64_t)&v115, (uint64_t)__str);
          v33 = v32;
          if ((__str[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__str);
            if (v33)
            {
LABEL_113:
              if (SHIBYTE(v167[0]) < 0)
              {
                std::string::__init_copy_ctor_external(&v102, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                *(_OWORD *)&v102.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
                v102.__r_.__value_.__r.__words[2] = v167[0];
              }
              siri::dialogengine::StringTrim(" \t\n\r", &v102, (std::string *)__str);
              std::string::operator=((std::string *)__p, (const std::string *)__str);
              if ((__str[23] & 0x80000000) != 0)
                operator delete(*(void **)__str);
              if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v102.__r_.__value_.__l.__data_);
              if (SHIBYTE(v167[3]) < 0)
                std::string::__init_copy_ctor_external(&v102, (const std::string::value_type *)v167[1], v167[2]);
              else
                v102 = *(std::string *)&v167[1];
              siri::dialogengine::StringTrim(" \t\n\r", &v102, (std::string *)__str);
              std::string::operator=((std::string *)&v167[1], (const std::string *)__str);
              if ((__str[23] & 0x80000000) != 0)
                operator delete(*(void **)__str);
              if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v102.__r_.__value_.__l.__data_);
              siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v102, (uint64_t)&v160);
              siri::dialogengine::SpeakableString::Append((siri::dialogengine::SpeakableString *)__p, (const siri::dialogengine::SpeakableString *)&v102, (std::string *)__str);
              std::string::operator=((std::string *)__p, (const std::string *)__str);
              std::string::operator=((std::string *)&v167[1], (const std::string *)&__str[24]);
              std::string::operator=((std::string *)v168, (const std::string *)v120);
              std::string::operator=((std::string *)&v169[1], (const std::string *)&v121[1]);
              std::string::operator=((std::string *)v171, (const std::string *)v123);
              std::string::operator=((std::string *)&v172[1], (const std::string *)&v124[1]);
              std::string::operator=(&v174, &v126);
              if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v126.__r_.__value_.__l.__data_);
              if (SHIBYTE(v125) < 0)
                operator delete(v124[1]);
              if (SHIBYTE(v124[0]) < 0)
                operator delete(v123[0]);
              if (SHIBYTE(v122) < 0)
                operator delete(v121[1]);
              if (SHIBYTE(v121[0]) < 0)
                operator delete(v120[0]);
              if (SHIBYTE(v119) < 0)
                operator delete(*(void **)&__str[24]);
              if ((__str[23] & 0x80000000) != 0)
                operator delete(*(void **)__str);
              if (v114 < 0)
                operator delete(v113);
              if (v112 < 0)
                operator delete(v111);
              if (v110 < 0)
                operator delete(v109);
              if (v108 < 0)
                operator delete(v107);
              if (v106 < 0)
                operator delete(v105);
              if (v104 < 0)
                operator delete(v103);
              if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_219;
              v38 = (void *)v102.__r_.__value_.__r.__words[0];
              goto LABEL_218;
            }
          }
          else if (v32)
          {
            goto LABEL_113;
          }
          std::string::basic_string[abi:ne180100]<0>(__str, "fullThoroughfare");
          v34 = siri::dialogengine::StringsEqual((uint64_t)&v115, (uint64_t)__str);
          v35 = v34;
          if ((__str[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__str);
            if (v35)
            {
LABEL_118:
              siri::dialogengine::SpeakableString::Append((siri::dialogengine::SpeakableString *)__p, (const siri::dialogengine::SpeakableString *)v127, (std::string *)__str);
              std::string::operator=((std::string *)__p, (const std::string *)__str);
              std::string::operator=((std::string *)&v167[1], (const std::string *)&__str[24]);
              std::string::operator=((std::string *)v168, (const std::string *)v120);
              std::string::operator=((std::string *)&v169[1], (const std::string *)&v121[1]);
              std::string::operator=((std::string *)v171, (const std::string *)v123);
              std::string::operator=((std::string *)&v172[1], (const std::string *)&v124[1]);
              std::string::operator=(&v174, &v126);
              goto LABEL_204;
            }
          }
          else if (v34)
          {
            goto LABEL_118;
          }
          std::string::basic_string[abi:ne180100]<0>(__str, "thoroughfare");
          v36 = siri::dialogengine::StringsEqual((uint64_t)&v115, (uint64_t)__str);
          v37 = v36;
          if ((__str[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__str);
            if (v37)
            {
LABEL_129:
              siri::dialogengine::SpeakableString::Append((siri::dialogengine::SpeakableString *)__p, (const siri::dialogengine::SpeakableString *)&v153, (std::string *)__str);
              std::string::operator=((std::string *)__p, (const std::string *)__str);
              std::string::operator=((std::string *)&v167[1], (const std::string *)&__str[24]);
              std::string::operator=((std::string *)v168, (const std::string *)v120);
              std::string::operator=((std::string *)&v169[1], (const std::string *)&v121[1]);
              std::string::operator=((std::string *)v171, (const std::string *)v123);
              std::string::operator=((std::string *)&v172[1], (const std::string *)&v124[1]);
              std::string::operator=(&v174, &v126);
              goto LABEL_204;
            }
          }
          else if (v36)
          {
            goto LABEL_129;
          }
          std::string::basic_string[abi:ne180100]<0>(__str, "subThoroughfare");
          if (siri::dialogengine::StringsEqual((uint64_t)&v115, (uint64_t)__str))
          {
            v39 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
            if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v39 = v154.__r_.__value_.__l.__size_;
            if (v39)
            {
              v40 = 0;
            }
            else
            {
              v41 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
              if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v41 = v153.__r_.__value_.__l.__size_;
              v40 = v41 == 0;
            }
            if ((__str[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)__str);
              if (!v40)
              {
LABEL_183:
                siri::dialogengine::SpeakableString::Append((siri::dialogengine::SpeakableString *)__p, (const siri::dialogengine::SpeakableString *)v137, (std::string *)__str);
                std::string::operator=((std::string *)__p, (const std::string *)__str);
                std::string::operator=((std::string *)&v167[1], (const std::string *)&__str[24]);
                std::string::operator=((std::string *)v168, (const std::string *)v120);
                std::string::operator=((std::string *)&v169[1], (const std::string *)&v121[1]);
                std::string::operator=((std::string *)v171, (const std::string *)v123);
                std::string::operator=((std::string *)&v172[1], (const std::string *)&v124[1]);
                std::string::operator=(&v174, &v126);
                goto LABEL_204;
              }
            }
            else if (!v40)
            {
              goto LABEL_183;
            }
          }
          else if ((__str[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__str);
          }
          std::string::basic_string[abi:ne180100]<0>(__str, "locality");
          v42 = siri::dialogengine::StringsEqual((uint64_t)&v115, (uint64_t)__str);
          v43 = v42;
          if ((__str[23] & 0x80000000) == 0)
          {
            if (!v42)
              goto LABEL_219;
LABEL_180:
            std::string::basic_string[abi:ne180100]<0>(&v102, "city");
            if (SHIBYTE(v145[1].__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v101, v145[1].__r_.__value_.__l.__data_, v145[1].__r_.__value_.__l.__size_);
            else
              v101 = v145[1];
            memset(v100, 0, sizeof(v100));
            siri::dialogengine::ApplySemanticConcept(this, &v102, &v101, v100, (std::string *)__str);
            std::string::operator=(v145, (const std::string *)__str);
            std::string::operator=(&v145[1], (const std::string *)&__str[24]);
            std::string::operator=((std::string *)v146, (const std::string *)v120);
            std::string::operator=((std::string *)&v147[1], (const std::string *)&v121[1]);
            std::string::operator=((std::string *)v149, (const std::string *)v123);
            std::string::operator=((std::string *)&v150[1], (const std::string *)&v124[1]);
            std::string::operator=(&v152, &v126);
            if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v126.__r_.__value_.__l.__data_);
            if (SHIBYTE(v125) < 0)
              operator delete(v124[1]);
            if (SHIBYTE(v124[0]) < 0)
              operator delete(v123[0]);
            if (SHIBYTE(v122) < 0)
              operator delete(v121[1]);
            if (SHIBYTE(v121[0]) < 0)
              operator delete(v120[0]);
            if (SHIBYTE(v119) < 0)
              operator delete(*(void **)&__str[24]);
            if ((__str[23] & 0x80000000) != 0)
              operator delete(*(void **)__str);
            v183 = v100;
            std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
            if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v101.__r_.__value_.__l.__data_);
            if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v102.__r_.__value_.__l.__data_);
            siri::dialogengine::SpeakableString::Append((siri::dialogengine::SpeakableString *)__p, (const siri::dialogengine::SpeakableString *)v145, (std::string *)__str);
            std::string::operator=((std::string *)__p, (const std::string *)__str);
            std::string::operator=((std::string *)&v167[1], (const std::string *)&__str[24]);
            std::string::operator=((std::string *)v168, (const std::string *)v120);
            std::string::operator=((std::string *)&v169[1], (const std::string *)&v121[1]);
            std::string::operator=((std::string *)v171, (const std::string *)v123);
            std::string::operator=((std::string *)&v172[1], (const std::string *)&v124[1]);
            std::string::operator=(&v174, &v126);
LABEL_204:
            if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v126.__r_.__value_.__l.__data_);
            if (SHIBYTE(v125) < 0)
              operator delete(v124[1]);
            if (SHIBYTE(v124[0]) < 0)
              operator delete(v123[0]);
            if (SHIBYTE(v122) < 0)
              operator delete(v121[1]);
            if (SHIBYTE(v121[0]) < 0)
              operator delete(v120[0]);
            if (SHIBYTE(v119) < 0)
              operator delete(*(void **)&__str[24]);
            if ((__str[23] & 0x80000000) == 0)
              goto LABEL_219;
            v38 = *(void **)__str;
LABEL_218:
            operator delete(v38);
            goto LABEL_219;
          }
          operator delete(*(void **)__str);
          if (v43)
            goto LABEL_180;
LABEL_219:
          siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v102, (uint64_t)&v161);
          siri::dialogengine::SpeakableString::Append((siri::dialogengine::SpeakableString *)__p, (const siri::dialogengine::SpeakableString *)&v102, (std::string *)__str);
          std::string::operator=((std::string *)__p, (const std::string *)__str);
          std::string::operator=((std::string *)&v167[1], (const std::string *)&__str[24]);
          std::string::operator=((std::string *)v168, (const std::string *)v120);
          std::string::operator=((std::string *)&v169[1], (const std::string *)&v121[1]);
          std::string::operator=((std::string *)v171, (const std::string *)v123);
          std::string::operator=((std::string *)&v172[1], (const std::string *)&v124[1]);
          std::string::operator=(&v174, &v126);
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v126.__r_.__value_.__l.__data_);
          if (SHIBYTE(v125) < 0)
            operator delete(v124[1]);
          if (SHIBYTE(v124[0]) < 0)
            operator delete(v123[0]);
          if (SHIBYTE(v122) < 0)
            operator delete(v121[1]);
          if (SHIBYTE(v121[0]) < 0)
            operator delete(v120[0]);
          if (SHIBYTE(v119) < 0)
            operator delete(*(void **)&__str[24]);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          if (v114 < 0)
            operator delete(v113);
          if (v112 < 0)
            operator delete(v111);
          if (v110 < 0)
            operator delete(v109);
          if (v108 < 0)
            operator delete(v107);
          if (v106 < 0)
            operator delete(v105);
          if (v104 < 0)
            operator delete(v103);
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v102.__r_.__value_.__l.__data_);
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v115.__r_.__value_.__l.__data_);
          v30 += 24;
          if (v30 == v96)
            goto LABEL_250;
        }
      }
    }
    v143 = 0u;
    memset(&v144, 0, sizeof(v144));
    *(_OWORD *)v141 = 0u;
    *(_OWORD *)v142 = 0u;
    *(_OWORD *)v139 = 0u;
    v140 = 0u;
    *(_OWORD *)v138 = 0u;
    memset(v137, 0, sizeof(v137));
    if (v10)
      goto LABEL_55;
    goto LABEL_58;
  }
  v6 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v153, "");
  siri::dialogengine::VariableString::VariableString(v6, &v153, (const siri::dialogengine::SpeakableString *)__p);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  if (SHIBYTE(v173) < 0)
    operator delete(v172[1]);
  if (SHIBYTE(v172[0]) < 0)
    operator delete(v171[0]);
  if (SHIBYTE(v170) < 0)
    operator delete(v169[1]);
  if (SHIBYTE(v169[0]) < 0)
    operator delete(v168[0]);
  if (SHIBYTE(v167[3]) < 0)
    operator delete((void *)v167[1]);
  if (SHIBYTE(v167[0]) < 0)
    operator delete(__p[0]);
  v44 = 1;
LABEL_281:
  v45 = v176;
  if (v176)
  {
    v46 = (unint64_t *)&v176->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v178;
  if (v178)
  {
    v49 = (unint64_t *)&v178->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v180;
  if (v180)
  {
    v52 = (unint64_t *)&v180->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v182;
  if (!v182)
    goto LABEL_300;
  v55 = (unint64_t *)&v182->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    if (v44)
      return v6;
  }
  else
  {
LABEL_300:
    if (v44)
      return v6;
  }
LABEL_301:
  v6 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v153, "");
  siri::dialogengine::VariableString::VariableString((uint64_t)v6, (const std::string *)__p, (uint64_t)&v153);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (SHIBYTE(v167[0]) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1BFB1C174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;
  uint64_t v68;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)&STACK[0x5E0]);
  if (SLOBYTE(STACK[0x4A7]) < 0)
    operator delete((void *)STACK[0x490]);
  MEMORY[0x1C3B8D890](v67, 0x10B3C40D3060B95);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3E0]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x560]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x5C8]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x598]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a67);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v68 - 168);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v68 - 152);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v68 - 136);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v68 - 120);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetLanguageForCountryCode(std::string *this, const siri::dialogengine::VariableObject *a2)
{
  char *RequiredStringParameter;
  char *v5;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "countryCode");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v5 = RequiredStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5)
    {
LABEL_3:
      if (v5[95] < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 9), *((_QWORD *)v5 + 10));
      else
        __p = *(std::string *)(v5 + 3);
      goto LABEL_8;
    }
  }
  else if (RequiredStringParameter)
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "US");
LABEL_8:
  siri::dialogengine::GetLikelyLanguageForCountryCode((uint64_t)&__p, this);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BFB1C8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetSeparatorsForLanguage(std::string *a1, std::string *a2)
{
  const char *v4;
  _BOOL4 v5;
  std::string *v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  std::string::size_type v12;
  __int128 v13;
  std::string::size_type v14;

  std::string::basic_string[abi:ne180100]<0>(&v13, " ");
  std::string::basic_string[abi:ne180100]<0>(v11, ", ");
  if (siri::dialogengine::IsNonWhitespaceLocale())
  {
    MEMORY[0x1C3B8D53C](&v13, "");
    std::string::basic_string[abi:ne180100]<0>(v9, "zh");
    v4 = "";
    if (!siri::dialogengine::StringStartsWith(a2, (unsigned __int8 *)v9))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "yue");
      v5 = siri::dialogengine::StringStartsWith(a2, (unsigned __int8 *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      if (!v5)
        v4 = " ";
    }
    if (v10 < 0)
      operator delete(v9[0]);
    MEMORY[0x1C3B8D53C](v11, v4);
  }
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v13, *((std::string::size_type *)&v13 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v13;
    a1->__r_.__value_.__r.__words[2] = v14;
  }
  v6 = a1 + 1;
  if (SHIBYTE(v12) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)v11[0], (std::string::size_type)v11[1]);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
    a1[1].__r_.__value_.__r.__words[2] = v12;
  }
  if (SHIBYTE(v14) < 0)
    operator delete((void *)v13);
}

void sub_1BFB1CA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CreateLocationVariable(uint64_t a1, uint64_t a2, std::string *a3)
{
  _BOOL4 v5;
  _BOOL4 v6;
  std::string v7;
  std::string __p[7];
  std::string v9;
  void *v10[2];
  char v11;
  std::string v12;
  std::string v13;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v13 = *(std::string *)a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v12 = *(std::string *)a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "ar");
  v5 = siri::dialogengine::StringStartsWith(a3, (unsigned __int8 *)__p);
  v6 = v5;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_23;
  }
  else if (!v5)
  {
    goto LABEL_23;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, ", ");
  std::string::basic_string[abi:ne180100]<0>(&v9, "، ");
  siri::dialogengine::StringReplace((uint64_t)&v13, (char *)v10, (uint64_t)&v9, 0, __p);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v13 = __p[0];
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, ", ");
  std::string::basic_string[abi:ne180100]<0>(&v9, "، ");
  siri::dialogengine::StringReplace((uint64_t)&v12, (char *)v10, (uint64_t)&v9, 0, __p);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v12 = __p[0];
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
LABEL_23:
  siri::dialogengine::StringTrimRight(", ", &v13, __p);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v13 = __p[0];
  siri::dialogengine::StringTrimRight(", ", &v12, __p);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v12 = __p[0];
  operator new();
  std::string::basic_string[abi:ne180100]<0>(v10, "");
  siri::dialogengine::StringTrimLeft(" \t\n\r", &v13, &v9);
  siri::dialogengine::StringTrimLeft(" \t\n\r", &v12, &v7);
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)__p, &v9, &v7);
}

std::string *sub_1BFB1CD1C()
{
  std::string *v0;
  uint64_t v1;
  void *v3;
  char v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;

  siri::dialogengine::VariableString::VariableString(v0, (const std::string *)(v1 - 120), (const siri::dialogengine::SpeakableString *)&v5);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
  if (v4 < 0)
    operator delete(v3);
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  if (*(char *)(v1 - 73) < 0)
    operator delete(*(void **)(v1 - 96));
  if (*(char *)(v1 - 41) < 0)
    operator delete(*(void **)(v1 - 64));
  return v0;
}

void sub_1BFB1CE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::InsertSpacesInPostCode(uint64_t a1, uint64_t *a2)
{
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  std::string __p;
  void *v11[2];
  uint64_t v12;

  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  memset(&__p, 0, sizeof(__p));
  v3 = *((char *)a2 + 23) < 0;
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  if (v4)
  {
    v6 = 0;
    do
    {
      if (v3)
        v7 = (uint64_t *)*a2;
      else
        v7 = a2;
      v8 = *((char *)v7 + v6);
      if (v8 < 0)
      {
        std::string::push_back(&__p, v8);
      }
      else
      {
        std::string::push_back(&__p, v8);
        std::string::append(&__p, " ");
      }
      ++v6;
      v3 = *((char *)a2 + 23) < 0;
      v9 = *((unsigned __int8 *)a2 + 23);
      if ((v9 & 0x80u) != 0)
        v9 = a2[1];
    }
    while (v6 < v9);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v11, (const void **)&__p.__r_.__value_.__l.__data_, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_1BFB1D000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogLocation::longLocation(siri::dialogengine::DialogLocation *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  const siri::dialogengine::VariableObject *LocationVariable;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  std::string::size_type v11;
  std::string::size_type v12;
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  _BOOL4 v31;
  uint64_t v32;
  std::string::size_type v33;
  std::string::size_type v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::string::size_type v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _BOOL4 v42;
  _BOOL4 v43;
  char v44;
  char v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *size;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  _BOOL4 v60;
  _BOOL4 v61;
  uint64_t v62;
  std::string::size_type v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _BOOL4 v67;
  _BOOL4 v68;
  unint64_t *v69;
  unint64_t v70;
  std::string *v71;
  std::string::size_type v72;
  std::string *v73;
  std::string::size_type v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::string v82;
  std::string v83;
  std::string v84;
  __int128 *v85;
  uint64_t v86;
  uint64_t v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  void *v92;
  char v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::string v106;
  std::string __p;
  std::string v108;
  uint64_t v109;
  uint64_t v110;
  std::string v111;
  std::string v112;
  std::string v113;
  std::string v114;
  std::string __s;
  std::string __sz;
  std::string v117;
  std::string v118;
  std::string v119;
  std::string v120;
  std::string v121;
  void **v122[2];

  memset(&v121, 0, sizeof(v121));
  memset(&v120, 0, sizeof(v120));
  LocationVariable = (const siri::dialogengine::VariableObject *)siri::dialogengine::GetLocationVariable(a2, a2, a3);
  if (!LocationVariable)
  {
    v119 = v120;
    v118 = v121;
    std::string::basic_string[abi:ne180100]<0>(&v117, "US");
    siri::dialogengine::CreateLocationVariable((uint64_t)&v119, (uint64_t)&v118, &v117);
  }
  siri::dialogengine::GetLanguageForCountryCode(&__sz, LocationVariable);
  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v113, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
  else
    v113 = __sz;
  siri::dialogengine::GetSeparatorsForLanguage(&v114, &v113);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v112, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
  else
    v112 = v114;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v111, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v111 = __s;
  siri::dialogengine::GetLocationComponentOrder(&__sz, &v109);
  v5 = v109;
  v4 = v110;
  if (v109 == v110)
  {
LABEL_295:
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v84, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
    else
      v84 = v120;
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v83, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
    else
      v83 = v121;
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v82, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    else
      v82 = __sz;
    siri::dialogengine::CreateLocationVariable((uint64_t)&v84, (uint64_t)&v83, &v82);
  }
  v6 = (uint64_t)LocationVariable + 72;
  v7 = (char *)LocationVariable + 80;
  while (1)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v5;
      v108.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v8;
    }
    std::string::basic_string[abi:ne180100]<0>(&v90, "LINE_SEPARATOR");
    v9 = siri::dialogengine::StringsEqual((uint64_t)&v108, (uint64_t)&v90);
    v10 = v9;
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v90.__r_.__value_.__l.__data_);
      if (!v10)
      {
LABEL_38:
        v14 = std::__tree<std::string>::find<std::string>(v6, (const void **)&v108.__r_.__value_.__l.__data_);
        if (v7 == (char *)v14)
        {
          v16 = 0;
          v104 = 0;
          v105 = 0;
          v102 = 0;
        }
        else
        {
          v16 = *(_QWORD *)(v14 + 56);
          v15 = *(std::__shared_weak_count **)(v14 + 64);
          v104 = v16;
          v105 = v15;
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v18 = __ldxr(p_shared_owners);
            while (__stxr(v18 + 1, p_shared_owners));
            v102 = v16;
            v103 = v105;
            if (v105)
            {
              v19 = (unint64_t *)&v105->__shared_owners_;
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
            }
LABEL_49:
            std::string::basic_string[abi:ne180100]<0>(&v90, "administrativeArea");
            v21 = siri::dialogengine::StringsEqual((uint64_t)&v108, (uint64_t)&v90);
            v22 = v21;
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v90.__r_.__value_.__l.__data_);
              if (!v22)
                goto LABEL_68;
            }
            else if (!v21)
            {
              goto LABEL_68;
            }
            std::string::basic_string[abi:ne180100]<0>(&v90, "administrativeAreaCode");
            v23 = std::__tree<std::string>::find<std::string>(v6, (const void **)&v90.__r_.__value_.__l.__data_);
            if (v7 == (char *)v23)
            {
              v25 = 0;
              v24 = 0;
            }
            else
            {
              v25 = *(_QWORD *)(v23 + 56);
              v24 = *(std::__shared_weak_count **)(v23 + 64);
              if (v24)
              {
                v26 = (unint64_t *)&v24->__shared_owners_;
                do
                  v27 = __ldxr(v26);
                while (__stxr(v27 + 1, v26));
              }
            }
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v90.__r_.__value_.__l.__data_);
              if (v25)
LABEL_61:
                std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](&v104, v25, (uint64_t)v24);
            }
            else if (v25)
            {
              goto LABEL_61;
            }
            if (v24)
            {
              v28 = (unint64_t *)&v24->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                std::__shared_weak_count::__release_weak(v24);
              }
            }
            v16 = v102;
LABEL_68:
            if (v104)
              v30 = v16 == 0;
            else
              v30 = 1;
            if (v30)
              goto LABEL_259;
            std::string::basic_string[abi:ne180100]<0>(&v90, "subThoroughfare");
            if (siri::dialogengine::StringsEqual((uint64_t)&v108, (uint64_t)&v90))
            {
              v31 = 1;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "thoroughfare");
              v31 = siri::dialogengine::StringsEqual((uint64_t)&v108, (uint64_t)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v90.__r_.__value_.__l.__data_);
              if (!v31)
                goto LABEL_132;
            }
            else if (!v31)
            {
              goto LABEL_132;
            }
            std::string::basic_string[abi:ne180100]<0>(&v90, "fullThoroughfare");
            v32 = std::__tree<std::string>::find<std::string>(v6, (const void **)&v90.__r_.__value_.__l.__data_);
            if (v7 == (char *)v32)
            {
              v34 = 0;
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
            }
            else
            {
              v34 = *(_QWORD *)(v32 + 56);
              v33 = *(_QWORD *)(v32 + 64);
              __p.__r_.__value_.__r.__words[0] = v34;
              __p.__r_.__value_.__l.__size_ = v33;
              if (v33)
              {
                v35 = (unint64_t *)(v33 + 8);
                do
                  v36 = __ldxr(v35);
                while (__stxr(v36 + 1, v35));
              }
            }
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v90.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&v90, "thoroughfare");
            v37 = std::__tree<std::string>::find<std::string>(v6, (const void **)&v90.__r_.__value_.__l.__data_);
            if (v7 == (char *)v37)
            {
              v39 = 0;
              v38 = 0;
              *(_OWORD *)&v106.__r_.__value_.__l.__data_ = 0uLL;
            }
            else
            {
              v38 = *(_QWORD *)(v37 + 56);
              v39 = *(std::__shared_weak_count **)(v37 + 64);
              v106.__r_.__value_.__r.__words[0] = v38;
              v106.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
              if (v39)
              {
                v40 = (unint64_t *)&v39->__shared_owners_;
                do
                  v41 = __ldxr(v40);
                while (__stxr(v41 + 1, v40));
              }
            }
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v90.__r_.__value_.__l.__data_);
              if (!v34)
                goto LABEL_101;
            }
            else if (!v34)
            {
LABEL_101:
              std::string::basic_string[abi:ne180100]<0>(&v90, "subThoroughfare");
              v42 = siri::dialogengine::StringsEqual((uint64_t)&v108, (uint64_t)&v90);
              if (v38)
                v43 = v42;
              else
                v43 = 0;
              if (!v43)
              {
                if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v90.__r_.__value_.__l.__data_);
                goto LABEL_121;
              }
              v44 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v38 + 32))(v38);
              v45 = v44;
              if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v90.__r_.__value_.__l.__data_);
                if ((v45 & 1) == 0)
                  goto LABEL_121;
              }
              else if ((v44 & 1) == 0)
              {
LABEL_121:
                if (v39)
                {
                  v51 = (unint64_t *)&v39->__shared_owners_;
                  do
                    v52 = __ldaxr(v51);
                  while (__stlxr(v52 - 1, v51));
                  if (!v52)
                  {
                    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
                size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                if (__p.__r_.__value_.__l.__size_)
                {
                  v54 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                  do
                    v55 = __ldaxr(v54);
                  while (__stlxr(v55 - 1, v54));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                    std::__shared_weak_count::__release_weak(size);
                  }
                }
                v16 = v102;
LABEL_132:
                (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v16 + 48))(&v90, v16);
                if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&__p, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
                else
                  __p = v91;
                if (v101 < 0)
                  operator delete(v100);
                if (v99 < 0)
                  operator delete(v98);
                if (v97 < 0)
                  operator delete(v96);
                if (v95 < 0)
                  operator delete(v94);
                if (v93 < 0)
                  operator delete(v92);
                if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v91.__r_.__value_.__l.__data_);
                if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v90.__r_.__value_.__l.__data_);
                (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v104 + 48))(&v90);
                if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v106, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
                else
                  v106 = v91;
                if (v101 < 0)
                  operator delete(v100);
                if (v99 < 0)
                  operator delete(v98);
                if (v97 < 0)
                  operator delete(v96);
                if (v95 < 0)
                  operator delete(v94);
                if (v93 < 0)
                  operator delete(v92);
                if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v91.__r_.__value_.__l.__data_);
                if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v90.__r_.__value_.__l.__data_);
                std::string::basic_string[abi:ne180100]<0>(&v90, "locality");
                v56 = siri::dialogengine::StringsEqual((uint64_t)&v108, (uint64_t)&v90);
                v57 = v56;
                if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v90.__r_.__value_.__l.__data_);
                  if (!v57)
                    goto LABEL_171;
LABEL_168:
                  std::string::basic_string[abi:ne180100]<0>(&v88, "city");
                  v85 = 0;
                  v86 = 0;
                  v87 = 0;
                  siri::dialogengine::ApplySemanticConcept(this, &v88, &__p, &v85, &v90);
                  if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_169;
LABEL_175:
                  std::string::__init_copy_ctor_external(&v89, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
LABEL_176:
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  __p = v89;
                  *((_BYTE *)&v89.__r_.__value_.__s + 23) = 0;
                  v89.__r_.__value_.__s.__data_[0] = 0;
                  if (v101 < 0)
                    operator delete(v100);
                  if (v99 < 0)
                    operator delete(v98);
                  if (v97 < 0)
                    operator delete(v96);
                  if (v95 < 0)
                    operator delete(v94);
                  if (v93 < 0)
                    operator delete(v92);
                  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v91.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v90.__r_.__value_.__l.__data_);
                  v122[0] = (void **)&v85;
                  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100](v122);
                  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v88.__r_.__value_.__l.__data_);
                  std::string::operator=(&v106, &__p);
                }
                else
                {
                  if (v56)
                    goto LABEL_168;
LABEL_171:
                  std::string::basic_string[abi:ne180100]<0>(&v90, "administrativeArea");
                  v58 = siri::dialogengine::StringsEqual((uint64_t)&v108, (uint64_t)&v90);
                  v59 = v58;
                  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v90.__r_.__value_.__l.__data_);
                    if (!v59)
                      goto LABEL_205;
LABEL_173:
                    std::string::basic_string[abi:ne180100]<0>(&v88, "state");
                    v85 = 0;
                    v86 = 0;
                    v87 = 0;
                    siri::dialogengine::ApplySemanticConcept(this, &v88, &__p, &v85, &v90);
                    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                      std::string::__init_copy_ctor_external(&v89, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
                    else
                      v89 = v91;
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    __p = v89;
                    *((_BYTE *)&v89.__r_.__value_.__s + 23) = 0;
                    v89.__r_.__value_.__s.__data_[0] = 0;
                    if (v101 < 0)
                      operator delete(v100);
                    if (v99 < 0)
                      operator delete(v98);
                    if (v97 < 0)
                      operator delete(v96);
                    if (v95 < 0)
                      operator delete(v94);
                    if (v93 < 0)
                      operator delete(v92);
                    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v91.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v90.__r_.__value_.__l.__data_);
                    v122[0] = (void **)&v85;
                    std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100](v122);
                    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v88.__r_.__value_.__l.__data_);
                  }
                  else
                  {
                    if (v58)
                      goto LABEL_173;
LABEL_205:
                    std::string::basic_string[abi:ne180100]<0>(&v90, "country");
                    v67 = siri::dialogengine::StringsEqual((uint64_t)&v108, (uint64_t)&v90);
                    v68 = v67;
                    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v90.__r_.__value_.__l.__data_);
                      if (v68)
                        goto LABEL_293;
                    }
                    else if (v67)
                    {
LABEL_293:
                      std::string::basic_string[abi:ne180100]<0>(&v88, "country");
                      v85 = 0;
                      v86 = 0;
                      v87 = 0;
                      siri::dialogengine::ApplySemanticConcept(this, &v88, &__p, &v85, &v90);
                      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                        goto LABEL_175;
LABEL_169:
                      v89 = v91;
                      goto LABEL_176;
                    }
                  }
                }
                std::string::basic_string[abi:ne180100]<0>(&v90, "postCode");
                v60 = siri::dialogengine::StringsEqual((uint64_t)&v108, (uint64_t)&v90);
                v61 = v60;
                if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v90.__r_.__value_.__l.__data_);
                  if (!v61)
                    goto LABEL_239;
                }
                else if (!v60)
                {
                  goto LABEL_239;
                }
                std::string::basic_string[abi:ne180100]<0>(&v90, "postCode");
                v62 = std::__tree<std::string>::find<std::string>(v6, (const void **)&v90.__r_.__value_.__l.__data_);
                if (v7 == (char *)v62)
                {
                  v64 = 0;
                  v63 = 0;
                  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
                }
                else
                {
                  v63 = *(_QWORD *)(v62 + 56);
                  v64 = *(std::__shared_weak_count **)(v62 + 64);
                  v88.__r_.__value_.__r.__words[0] = v63;
                  v88.__r_.__value_.__l.__size_ = (std::string::size_type)v64;
                  if (v64)
                  {
                    v65 = (unint64_t *)&v64->__shared_owners_;
                    do
                      v66 = __ldxr(v65);
                    while (__stxr(v66 + 1, v65));
                  }
                }
                if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  if (!v63)
                    goto LABEL_234;
LABEL_213:
                  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v63 + 48))(&v90, v63);
                  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v89, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
                  else
                    v89 = v91;
                  if (v101 < 0)
                    operator delete(v100);
                  if (v99 < 0)
                    operator delete(v98);
                  if (v97 < 0)
                    operator delete(v96);
                  if (v95 < 0)
                    operator delete(v94);
                  if (v93 < 0)
                    operator delete(v92);
                  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v91.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v90.__r_.__value_.__l.__data_);
                  siri::dialogengine::InsertSpacesInPostCode((uint64_t)&v90, (uint64_t *)&v89);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  __p = v90;
                  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v89.__r_.__value_.__l.__data_);
                  goto LABEL_234;
                }
                operator delete(v90.__r_.__value_.__l.__data_);
                if (v63)
                  goto LABEL_213;
LABEL_234:
                if (v64)
                {
                  v69 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v70 = __ldaxr(v69);
                  while (__stlxr(v70 - 1, v69));
                  if (!v70)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
LABEL_239:
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p.__r_.__value_.__l.__data_, (const void **)&v112.__r_.__value_.__l.__data_, (uint64_t)&v90);
                if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v71 = &v90;
                else
                  v71 = (std::string *)v90.__r_.__value_.__r.__words[0];
                if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v72 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
                else
                  v72 = v90.__r_.__value_.__l.__size_;
                std::string::append(&v121, (const std::string::value_type *)v71, v72);
                if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v90.__r_.__value_.__l.__data_);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v106.__r_.__value_.__l.__data_, (const void **)&v112.__r_.__value_.__l.__data_, (uint64_t)&v90);
                if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v73 = &v90;
                else
                  v73 = (std::string *)v90.__r_.__value_.__r.__words[0];
                if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v74 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
                else
                  v74 = v90.__r_.__value_.__l.__size_;
                std::string::append(&v120, (const std::string::value_type *)v73, v74);
                if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v90.__r_.__value_.__l.__data_);
                if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v106.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_259:
                v75 = v103;
                if (v103)
                {
                  v76 = (unint64_t *)&v103->__shared_owners_;
                  do
                    v77 = __ldaxr(v76);
                  while (__stlxr(v77 - 1, v76));
                  if (!v77)
                  {
                    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                    std::__shared_weak_count::__release_weak(v75);
                  }
                }
                v78 = v105;
                if (v105)
                {
                  v79 = (unint64_t *)&v105->__shared_owners_;
                  do
                    v80 = __ldaxr(v79);
                  while (__stlxr(v80 - 1, v79));
                  if (!v80)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                  }
                }
                goto LABEL_269;
              }
LABEL_111:
              if (v39)
              {
                v46 = (unint64_t *)&v39->__shared_owners_;
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 - 1, v46));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              v48 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_)
              {
                v49 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                do
                  v50 = __ldaxr(v49);
                while (__stlxr(v50 - 1, v49));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
              goto LABEL_259;
            }
            if (((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v34 + 32))(v34) & 1) != 0)
              goto LABEL_101;
            goto LABEL_111;
          }
          v102 = v16;
        }
        v103 = 0;
        goto LABEL_49;
      }
    }
    else if (!v9)
    {
      goto LABEL_38;
    }
    siri::dialogengine::StringTrimRight(" \t\n\r", &v121, &v90);
    siri::dialogengine::StringTrimRight(" \t\n\r", &v120, &__p);
    v11 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = v90.__r_.__value_.__l.__size_;
    if (v11)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v90.__r_.__value_.__l.__data_, (const void **)&v111.__r_.__value_.__l.__data_, (uint64_t)&v106);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      v121 = v106;
    }
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = __p.__r_.__value_.__l.__size_;
    if (v12)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p.__r_.__value_.__l.__data_, (const void **)&v111.__r_.__value_.__l.__data_, (uint64_t)&v106);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v120.__r_.__value_.__l.__data_);
      v120 = v106;
      v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v13 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
LABEL_269:
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    v5 += 24;
    if (v5 == v4)
      goto LABEL_295;
  }
}

void sub_1BFB1DFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a67;
  char a72;
  void *a73;
  char a74;
  char a75;
  void *a76;
  uint64_t v76;

  siri::dialogengine::SpeakableString::~SpeakableString(&a35);
  *(_QWORD *)(v76 - 96) = &a23;
  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)(v76 - 96));
  if (a31 < 0)
    operator delete(__p);
  if (a65 < 0)
    operator delete(a60);
  if (a72 < 0)
    operator delete(a67);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  if (a74 < 0)
    operator delete(a73);
  a35 = &a75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a76);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  std::pair<std::string const,std::string>::~pair((uint64_t)&STACK[0x250]);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  if (*(char *)(v76 - 137) < 0)
    operator delete(*(void **)(v76 - 160));
  if (*(char *)(v76 - 105) < 0)
    operator delete(*(void **)(v76 - 128));
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogLocation::preposition(siri::dialogengine::DialogLocation *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetPrepositionOrPostposition(this, a2, 0);
}

std::string *siri::dialogengine::GetPrepositionOrPostposition(_QWORD *a1, siri::dialogengine *a2, int a3)
{
  siri::dialogengine::Context *v6;
  const siri::dialogengine::VariableObject *v7;
  uint64_t LocationVariable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  BOOL v26;
  const std::string::value_type **v27;
  const std::string::value_type **v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type size;
  std::string::size_type v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  char v46;
  __int128 *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t i;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void **v89;
  void *v90;
  int v91;
  int v92;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  std::string *v102;
  int v104;
  _QWORD *v105;
  std::string v106;
  std::string v107;
  std::string v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  _OWORD v117[2];
  std::string v118;
  void *v119;
  char v120;
  _BYTE v121[32];
  __int128 v122;
  void *v123[2];
  void *v124[2];
  __int128 v125;
  void *v126[2];
  void *v127[2];
  __int128 v128;
  std::string v129;
  void *v130[2];
  void *v131[2];
  __int128 v132;
  std::string v133;
  std::string __p;
  std::string v135;
  void *v136;
  __int128 v137;
  uint64_t v138;
  char v139;
  std::string v140;
  std::string v141;
  std::string v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v131 = 0u;
  v132 = 0u;
  *(_OWORD *)v130 = 0u;
  v128 = 0u;
  memset(&v129, 0, sizeof(v129));
  *(_OWORD *)v126 = 0u;
  *(_OWORD *)v127 = 0u;
  *(_OWORD *)v124 = 0u;
  v125 = 0u;
  v122 = 0u;
  *(_OWORD *)v123 = 0u;
  memset(v121, 0, sizeof(v121));
  std::string::basic_string[abi:ne180100]<0>(&v119, "");
  LocationVariable = (uint64_t)siri::dialogengine::GetLocationVariable(a2, v6, v7);
  if (!LocationVariable)
    goto LABEL_212;
  siri::dialogengine::GetLanguageForCountryCode(&v118, (const siri::dialogengine::VariableObject *)LocationVariable);
  siri::dialogengine::GetLocationComponentOrder(&v118, (uint64_t *)v117);
  std::string::basic_string[abi:ne180100]<0>(&__p, "fullThoroughfare");
  v9 = LocationVariable + 72;
  v10 = std::__tree<std::string>::find<std::string>(LocationVariable + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  v11 = LocationVariable + 80;
  if (LocationVariable + 80 == v10)
  {
    v13 = 0;
    v115 = 0;
    v116 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(v10 + 56);
    v12 = *(std::__shared_weak_count **)(v10 + 64);
    v115 = v13;
    v116 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "subThoroughfare");
  v16 = std::__tree<std::string>::find<std::string>(v9, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v11 == v16)
  {
    v18 = 0;
    v113 = 0;
    v114 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(v16 + 56);
    v17 = *(std::__shared_weak_count **)(v16 + 64);
    v113 = v18;
    v114 = v17;
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "thoroughfare");
  v21 = std::__tree<std::string>::find<std::string>(v9, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v11 == v21)
  {
    v23 = 0;
    v111 = 0;
    v112 = 0;
  }
  else
  {
    v23 = *(_QWORD *)(v21 + 56);
    v22 = *(std::__shared_weak_count **)(v21 + 64);
    v111 = v23;
    v112 = v22;
    if (v22)
    {
      v24 = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13)
      goto LABEL_26;
  }
  else if (v13)
  {
LABEL_26:
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v13 + 48))(&__p, v13);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v107, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v107 = __p;
    v133.__r_.__value_.__r.__words[0] = v107.__r_.__value_.__l.__size_;
    v45 = (void *)v107.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v107.__r_.__value_.__r.__words[1] + 7);
    v46 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
    memset(&v107, 0, sizeof(v107));
    MEMORY[0x1C3B8D53C](v130, "fullThoroughfare");
    if (SHIBYTE(v132) < 0)
      operator delete(v131[1]);
    v131[1] = v45;
    *(_QWORD *)&v132 = v133.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)&v132 + 7) = *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 7);
    HIBYTE(v132) = v46;
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v142.__r_.__value_.__l.__data_);
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v141.__r_.__value_.__l.__data_);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if (v139 < 0)
      operator delete(*((void **)&v137 + 1));
    if (SBYTE7(v137) < 0)
      operator delete(v136);
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v135.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    LocationVariable = 1;
    goto LABEL_195;
  }
  v105 = a1;
  if (v18)
    v26 = v23 == 0;
  else
    v26 = 1;
  LocationVariable = !v26;
  v104 = a3;
  if (a3)
  {
    v27 = (const std::string::value_type **)*((_QWORD *)&v117[0] + 1);
    while (1)
    {
      if (v27 == *(const std::string::value_type ***)&v117[0])
        goto LABEL_194;
      v28 = v27 - 3;
      if (*((char *)v27 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v133, *(v27 - 3), (std::string::size_type)*(v27 - 2));
      }
      else
      {
        v29 = *(_OWORD *)v28;
        v133.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v27 - 1);
        *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v29;
      }
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (HIBYTE(v133.__r_.__value_.__r.__words[2]) != 14)
      {
        if (HIBYTE(v133.__r_.__value_.__r.__words[2]) != 16)
          goto LABEL_60;
        v30 = &v133;
        goto LABEL_48;
      }
      if (v133.__r_.__value_.__r.__words[0] == 0x5045535F454E494CLL
        && *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 6) == 0x524F544152415045)
      {
        goto LABEL_98;
      }
LABEL_60:
      v37 = std::__tree<std::string>::find<std::string>(v9, (const void **)&v133.__r_.__value_.__l.__data_);
      if (v11 == v37)
        goto LABEL_98;
      v38 = *(_QWORD *)(v37 + 56);
      v39 = *(std::__shared_weak_count **)(v37 + 64);
      v109 = v38;
      v110 = v39;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      if (v38)
      {
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v38 + 48))(&__p, v38);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v106, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v106 = __p;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v107, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
        else
          v107 = v133;
        v108 = v106;
        memset(&v106, 0, sizeof(v106));
        std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)v130, (__int128 *)&v107);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v108.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v142.__r_.__value_.__l.__data_);
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v141.__r_.__value_.__l.__data_);
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (v139 < 0)
          operator delete(*((void **)&v137 + 1));
        if (SBYTE7(v137) < 0)
          operator delete(v136);
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v135.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v42 = 5;
        if (!v39)
          goto LABEL_97;
      }
      else
      {
        v42 = 0;
        if (!v39)
          goto LABEL_97;
      }
      v43 = (unint64_t *)&v39->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        if (v38)
          goto LABEL_99;
LABEL_98:
        v42 = 0;
        goto LABEL_99;
      }
LABEL_97:
      if (!v38)
        goto LABEL_98;
LABEL_99:
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      v27 = v28;
      if (v42)
        goto LABEL_194;
    }
    if (v133.__r_.__value_.__l.__size_ == 14)
    {
      size = *(_QWORD *)(v133.__r_.__value_.__r.__words[0] + 6);
      v33 = *(_QWORD *)v133.__r_.__value_.__l.__data_ == 0x5045535F454E494CLL;
      v34 = 0x524F544152415045;
    }
    else
    {
      if (v133.__r_.__value_.__l.__size_ != 16)
        goto LABEL_60;
      v30 = (std::string *)v133.__r_.__value_.__r.__words[0];
LABEL_48:
      v32 = v30->__r_.__value_.__r.__words[0];
      size = v30->__r_.__value_.__l.__size_;
      v33 = v32 == 0x726F68546C6C7566;
      v34 = 0x657261666867756FLL;
    }
    if (v33 && size == v34)
      goto LABEL_98;
    goto LABEL_60;
  }
  v47 = *(__int128 **)&v117[0];
  if (*(_QWORD *)&v117[0] != *((_QWORD *)&v117[0] + 1))
  {
    while (1)
    {
      if (*((char *)v47 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)v47, *((_QWORD *)v47 + 1));
      }
      else
      {
        v48 = *v47;
        v133.__r_.__value_.__r.__words[2] = *((_QWORD *)v47 + 2);
        *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v48;
      }
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (HIBYTE(v133.__r_.__value_.__r.__words[2]) != 14)
      {
        if (HIBYTE(v133.__r_.__value_.__r.__words[2]) != 16)
          goto LABEL_148;
        v49 = &v133;
        goto LABEL_136;
      }
      if (v133.__r_.__value_.__r.__words[0] == 0x5045535F454E494CLL
        && *(std::string::size_type *)((char *)v133.__r_.__value_.__r.__words + 6) == 0x524F544152415045)
      {
        goto LABEL_186;
      }
LABEL_148:
      v56 = std::__tree<std::string>::find<std::string>(v9, (const void **)&v133.__r_.__value_.__l.__data_);
      if (v11 == v56)
        goto LABEL_186;
      v57 = *(_QWORD *)(v56 + 56);
      v58 = *(std::__shared_weak_count **)(v56 + 64);
      v109 = v57;
      v110 = v58;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      if (v57)
      {
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v57 + 48))(&__p, v57);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v106, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v106 = __p;
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v107, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
        else
          v107 = v133;
        v108 = v106;
        memset(&v106, 0, sizeof(v106));
        std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)v130, (__int128 *)&v107);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v108.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v142.__r_.__value_.__l.__data_);
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v141.__r_.__value_.__l.__data_);
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        if (v139 < 0)
          operator delete(*((void **)&v137 + 1));
        if (SBYTE7(v137) < 0)
          operator delete(v136);
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v135.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v61 = 2;
        if (!v58)
          goto LABEL_185;
      }
      else
      {
        v61 = 0;
        if (!v58)
          goto LABEL_185;
      }
      v62 = (unint64_t *)&v58->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
        if (v57)
          goto LABEL_187;
LABEL_186:
        v61 = 0;
        goto LABEL_187;
      }
LABEL_185:
      if (!v57)
        goto LABEL_186;
LABEL_187:
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v133.__r_.__value_.__l.__data_);
      if (!v61)
      {
        v47 = (__int128 *)((char *)v47 + 24);
        if (v47 != *((__int128 **)&v117[0] + 1))
          continue;
      }
      goto LABEL_194;
    }
    if (v133.__r_.__value_.__l.__size_ == 14)
    {
      v50 = *(_QWORD *)(v133.__r_.__value_.__r.__words[0] + 6);
      v52 = *(_QWORD *)v133.__r_.__value_.__l.__data_ == 0x5045535F454E494CLL;
      v53 = 0x524F544152415045;
    }
    else
    {
      if (v133.__r_.__value_.__l.__size_ != 16)
        goto LABEL_148;
      v49 = (std::string *)v133.__r_.__value_.__r.__words[0];
LABEL_136:
      v51 = v49->__r_.__value_.__r.__words[0];
      v50 = v49->__r_.__value_.__l.__size_;
      v52 = v51 == 0x726F68546C6C7566;
      v53 = 0x657261666867756FLL;
    }
    if (v52 && v50 == v53)
      goto LABEL_186;
    goto LABEL_148;
  }
LABEL_194:
  a1 = v105;
  a3 = v104;
LABEL_195:
  v64 = v112;
  if (v112)
  {
    v65 = (unint64_t *)&v112->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v114;
  if (v114)
  {
    v68 = (unint64_t *)&v114->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v116;
  if (v116)
  {
    v71 = (unint64_t *)&v116->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
LABEL_212:
  v73 = (void *)HIBYTE(v131[0]);
  if (SHIBYTE(v131[0]) < 0)
    v73 = v130[1];
  if (v73)
  {
    v74 = HIBYTE(v132);
    if (v132 < 0)
      v74 = v132;
    if (v74)
    {
      siri::dialogengine::CreateJSONStringVal((uint64_t)v130, (uint64_t *)&v118);
      std::string::basic_string[abi:ne180100]<0>(&__p, "componentType");
      *(_OWORD *)&v135.__r_.__value_.__l.__data_ = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = 0uLL;
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v131[1], (uint64_t *)v117);
      std::string::basic_string[abi:ne180100]<0>(&v135.__r_.__value_.__r.__words[2], "component");
      v137 = v117[0];
      v117[0] = 0uLL;
      siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)LocationVariable, (uint64_t *)&v133);
      std::string::basic_string[abi:ne180100]<0>(&v138, "locationHasStreetNumber");
      *(_OWORD *)&v140.__r_.__value_.__r.__words[1] = *(_OWORD *)&v133.__r_.__value_.__l.__data_;
      *(_OWORD *)&v133.__r_.__value_.__l.__data_ = 0uLL;
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v107, (const void **)&__p.__r_.__value_.__l.__data_, 3);
      for (i = 0; i != -15; i -= 5)
      {
        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v140.__r_.__value_.__r.__words[i + 1]);
        if (SHIBYTE(v140.__r_.__value_.__r.__words[i]) < 0)
          operator delete(*(void **)((char *)&v138 + i * 8));
      }
      v76 = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
      if (v118.__r_.__value_.__l.__size_)
      {
        v77 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      if ((HIBYTE(v131[0]) & 0x80) != 0)
      {
        if (v130[1] != (void *)7)
        {
          if (v130[1] != (void *)8)
          {
            if (v130[1] != (void *)18)
              goto LABEL_295;
            v81 = *(_QWORD *)v130[0] == 0x7473696E696D6461 && *((_QWORD *)v130[0] + 1) == 0x7241657669746172;
            if (!v81 || *((_WORD *)v130[0] + 8) != 24933)
              goto LABEL_295;
LABEL_251:
            siri::dialogengine::CreateJSONStringVal((uint64_t)&v131[1], (uint64_t *)&v118);
            std::string::basic_string[abi:ne180100]<0>(&__p, "adminstrativeArea");
            *(_OWORD *)&v135.__r_.__value_.__l.__data_ = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
            *(_OWORD *)&v118.__r_.__value_.__l.__data_ = 0uLL;
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)&v107, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
            v83 = (std::__shared_weak_count *)v135.__r_.__value_.__l.__size_;
            if (v135.__r_.__value_.__l.__size_)
            {
              v84 = (unint64_t *)(v135.__r_.__value_.__l.__size_ + 8);
              do
                v85 = __ldaxr(v84);
              while (__stlxr(v85 - 1, v84));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v86 = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
            if (!v118.__r_.__value_.__l.__size_)
              goto LABEL_295;
            v87 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            goto LABEL_293;
          }
          v90 = *(void **)v130[0];
          goto LABEL_282;
        }
        v89 = (void **)v130[0];
      }
      else
      {
        if (HIBYTE(v131[0]) != 7)
        {
          if (HIBYTE(v131[0]) != 8)
          {
            if (HIBYTE(v131[0]) != 18
              || (v130[0] == (void *)0x7473696E696D6461 ? (v79 = v130[1] == (void *)0x7241657669746172) : (v79 = 0),
                  v79 ? (v80 = LOWORD(v131[0]) == 24933) : (v80 = 0),
                  !v80))
            {
LABEL_295:
              if (a3)
                std::string::basic_string[abi:ne180100]<0>(&v118, "location#postposition");
              else
                std::string::basic_string[abi:ne180100]<0>(&v118, "location#preposition");
              siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)&v118, (const void ***)&v107, (uint64_t)&__p);
              std::string::operator=((std::string *)v121, &__p);
              std::string::operator=((std::string *)&v121[24], &v135);
              std::string::operator=((std::string *)v123, (const std::string *)&v136);
              std::string::operator=((std::string *)&v124[1], (const std::string *)((char *)&v137 + 8));
              std::string::operator=((std::string *)v126, &v140);
              std::string::operator=((std::string *)&v127[1], &v141);
              std::string::operator=(&v129, &v142);
              if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v142.__r_.__value_.__l.__data_);
              if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v141.__r_.__value_.__l.__data_);
              if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v140.__r_.__value_.__l.__data_);
              if (v139 < 0)
                operator delete(*((void **)&v137 + 1));
              if (SBYTE7(v137) < 0)
                operator delete(v136);
              if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v135.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v118.__r_.__value_.__l.__data_);
              std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v107.__r_.__value_.__l.__size_);
              goto LABEL_315;
            }
            goto LABEL_251;
          }
          v90 = v130[0];
LABEL_282:
          if (v90 != (void *)0x7974696C61636F6CLL)
            goto LABEL_295;
          siri::dialogengine::CreateJSONStringVal((uint64_t)&v131[1], (uint64_t *)&v118);
          std::string::basic_string[abi:ne180100]<0>(&__p, "locality");
          *(_OWORD *)&v135.__r_.__value_.__l.__data_ = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
          *(_OWORD *)&v118.__r_.__value_.__l.__data_ = 0uLL;
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)&v107, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
          v98 = (std::__shared_weak_count *)v135.__r_.__value_.__l.__size_;
          if (v135.__r_.__value_.__l.__size_)
          {
            v99 = (unint64_t *)(v135.__r_.__value_.__l.__size_ + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v86 = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
          if (!v118.__r_.__value_.__l.__size_)
            goto LABEL_295;
          v101 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
          do
            v88 = __ldaxr(v101);
          while (__stlxr(v88 - 1, v101));
          goto LABEL_293;
        }
        v89 = v130;
      }
      v91 = *(_DWORD *)v89;
      v92 = *(_DWORD *)((char *)v89 + 3);
      if (v91 != 1853189987 || v92 != 2037544046)
        goto LABEL_295;
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v131[1], (uint64_t *)&v118);
      std::string::basic_string[abi:ne180100]<0>(&__p, "country");
      *(_OWORD *)&v135.__r_.__value_.__l.__data_ = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = 0uLL;
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)&v107, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
      v94 = (std::__shared_weak_count *)v135.__r_.__value_.__l.__size_;
      if (v135.__r_.__value_.__l.__size_)
      {
        v95 = (unint64_t *)(v135.__r_.__value_.__l.__size_ + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v86 = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
      if (!v118.__r_.__value_.__l.__size_)
        goto LABEL_295;
      v97 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
      do
        v88 = __ldaxr(v97);
      while (__stlxr(v88 - 1, v97));
LABEL_293:
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
      goto LABEL_295;
    }
  }
LABEL_315:
  v102 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v102, &__p, (const siri::dialogengine::SpeakableString *)v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v120 < 0)
    operator delete(v119);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128) < 0)
    operator delete(v127[1]);
  if (SHIBYTE(v127[0]) < 0)
    operator delete(v126[0]);
  if (SHIBYTE(v125) < 0)
    operator delete(v124[1]);
  if (SHIBYTE(v124[0]) < 0)
    operator delete(v123[0]);
  if (SHIBYTE(v122) < 0)
    operator delete(*(void **)&v121[24]);
  if ((v121[23] & 0x80000000) != 0)
    operator delete(*(void **)v121);
  if (SHIBYTE(v132) < 0)
    operator delete(v131[1]);
  if (SHIBYTE(v131[0]) < 0)
    operator delete(v130[0]);
  return v102;
}

void sub_1BFB1F3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, _QWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  void *a72;

  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair((uint64_t)&a72);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a16);
  if (a41 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a42);
  std::pair<std::string const,std::string>::~pair((uint64_t)&a64);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return a1;
}

std::string *siri::dialogengine::DialogLocation::postposition(siri::dialogengine::DialogLocation *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetPrepositionOrPostposition(this, a2, 1);
}

uint64_t siri::dialogengine::DialogLocationAddress::countryFromCode(siri::dialogengine::DialogLocationAddress *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  const void **v5;
  char *RequiredStringParameter;
  uint64_t v7;
  const char *v8;
  void *v9;
  std::string v11;
  void *v12[2];
  char v13;
  void *__p[2];
  char v15;
  std::string v16;

  v5 = (const void **)std::string::basic_string[abi:ne180100]<0>(&v16, "countryCode");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter(v5, (uint64_t)a2);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v7 = operator new();
  if (!this || !RequiredStringParameter)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    siri::dialogengine::VariableString::VariableString(v7, &v16, (uint64_t)__p);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_17;
    v9 = __p[0];
    goto LABEL_16;
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  siri::dialogengine::Context::GetLocale(this, v8, (uint64_t)v12);
  if (RequiredStringParameter[95] < 0)
    std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)RequiredStringParameter + 9), *((_QWORD *)RequiredStringParameter + 10));
  else
    v11 = *(std::string *)(RequiredStringParameter + 3);
  siri::dialogengine::CountryCodeToString((uint64_t *)v12, (uint64_t)&v11, __p);
  siri::dialogengine::VariableString::VariableString(v7, &v16, (uint64_t)__p);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (v13 < 0)
  {
    v9 = v12[0];
LABEL_16:
    operator delete(v9);
  }
LABEL_17:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1BFB1F864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 33) < 0)
    operator delete(*(void **)(v27 - 56));
  MEMORY[0x1C3B8D890](v26, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void sub_1BFB1F904()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1BFB1F8FCLL);
}

void siri::dialogengine::ExecuteDetailedDisambiguationPrompt::~ExecuteDetailedDisambiguationPrompt(siri::dialogengine::ExecuteDetailedDisambiguationPrompt *this)
{
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t *siri::dialogengine::ExecuteDetailedDisambiguationPrompt::Execute@<X0>(siri::dialogengine **this@<X0>, _QWORD *a2@<X8>)
{
  double NumberParameter;
  _BOOL4 BooleanParameter;
  _BOOL4 v6;
  uint64_t v7;
  siri::dialogengine::VariableObject *v8;
  _BOOL4 v9;
  void *__p[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(__p, "windowSize");
  NumberParameter = siri::dialogengine::ExecutePatternBase::GetNumberParameter((uint64_t)this, (const void **)__p, 0.0);
  if (v12 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isFirstWindow");
  BooleanParameter = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v12 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isLastWindow");
  v6 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v12 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isConclusion");
  v9 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v12 < 0)
    operator delete(__p[0]);
  if (siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup(this, v7, v8)
    && (std::string::basic_string[abi:ne180100]<0>(__p, "Sash"),
        siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p),
        v12 < 0))
  {
    operator delete(__p[0]);
    if (v9)
      goto LABEL_12;
  }
  else if (v9)
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(__p, "Conclusion");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "Prompt");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    goto LABEL_37;
  }
  if (NumberParameter >= 1.0)
  {
    if (BooleanParameter)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Intro");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    if (!BooleanParameter || !v6)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "WindowIntro");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Item");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "WindowPrompt");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
    {
      operator delete(__p[0]);
      if (!v6)
        return siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
    }
    else if (!v6)
    {
      return siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "Item");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "WindowPrompt");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Attribution");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
LABEL_37:
  if (v12 < 0)
    operator delete(__p[0]);
  return siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
}

void sub_1BFB1FC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void InitDefaultsscc_info_TertiaryHeader_Standard_TertiaryHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TertiaryHeader.pb.cc", a4);
  SnippetUI::TertiaryHeader_Standard::TertiaryHeader_Standard((SnippetUI::TertiaryHeader_Standard *)&SnippetUI::_TertiaryHeader_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TertiaryHeader_Standard_default_instance_, v4);
  qword_1EF5844B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF5844C0 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::TertiaryHeader_Standard *SnippetUI::TertiaryHeader_Standard::TertiaryHeader_Standard(SnippetUI::TertiaryHeader_Standard *this)
{
  *(_QWORD *)this = &off_1E7935F58;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_TertiaryHeader_Standard_TertiaryHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TertiaryHeader_Standard_TertiaryHeader_2eproto);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFB1FDB8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::TertiaryHeader_Standard::~TertiaryHeader_Standard(SnippetUI::TertiaryHeader_Standard *this)
{
  SnippetUI::TertiaryHeader_Standard::~TertiaryHeader_Standard(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7935F58;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::TertiaryHeader_Standard *)&SnippetUI::_TertiaryHeader_Standard_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::TertiaryHeader_Standard *SnippetUI::TertiaryHeader_Standard::New(SnippetUI::TertiaryHeader_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TertiaryHeader_Standard>(0);
}

SnippetUI::TertiaryHeader_Standard *SnippetUI::TertiaryHeader_Standard::New(SnippetUI::TertiaryHeader_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TertiaryHeader_Standard>(a2);
}

void SnippetUI::TertiaryHeader_Standard::Clear(SnippetUI::TertiaryHeader_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArena *v5;
  char v6;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = *((_BYTE *)this + 8);
  v5 = (SnippetUI::TertiaryHeader_Standard *)((char *)this + 8);
  *((_QWORD *)v5 + 3) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
}

uint64_t SnippetUI::TertiaryHeader_Standard::IsInitialized(SnippetUI::TertiaryHeader_Standard *this)
{
  return 1;
}

char *SnippetUI::TertiaryHeader_Standard::ByteSizeLong(SnippetUI::TertiaryHeader_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::ActionProperty *v8;
  char *v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::TertiaryHeader_Standard *)&SnippetUI::_TertiaryHeader_Standard_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TertiaryHeader_Standard *)((char *)this + 8), v5, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::TertiaryHeader_Standard::GetCachedSize(SnippetUI::TertiaryHeader_Standard *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::TertiaryHeader_Standard::_InternalParse(SnippetUI::TertiaryHeader_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  unsigned int v10;
  char *v13;
  std::string *v14;
  SnippetUI::ActionProperty *v15;
  SnippetUI::TextProperty *v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v18;
    TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
    v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    v18 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.TertiaryHeader_Standard.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 4) = v15;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
      if (!v16)
      {
        v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v16;
        TagFallback = v18;
      }
      v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v16, TagFallback);
      goto LABEL_29;
    }
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      break;
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    v18 = (google::protobuf::internal *)v13;
    if (!v13)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::TertiaryHeader_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::TertiaryHeader_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::ActionProperty *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  google::protobuf::internal *v24;
  const char *v25;
  uint64_t v26;

  v5 = (char *)a2;
  if (this == (SnippetUI::TertiaryHeader_Standard *)&SnippetUI::_TertiaryHeader_Standard_default_instance_)
    goto LABEL_25;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((_QWORD *)v24 + 1);
    if (!v25)
      goto LABEL_31;
    v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((_BYTE *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.TertiaryHeader_Standard.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 2), v5);
  }
LABEL_31:
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::TertiaryHeader_Standard::CopyFrom(SnippetUI::TertiaryHeader_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::TertiaryHeader_Standard::Clear(this);
    SnippetUI::TertiaryHeader_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::TertiaryHeader_Standard::MergeFrom(SnippetUI::TertiaryHeader_Standard *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::TertiaryHeader_Standard *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TertiaryHeader.pb.cc", 325);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::TertiaryHeader_Standard::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFB20444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TertiaryHeader_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::TertiaryHeader_Standard::GetMetadata(SnippetUI::TertiaryHeader_Standard *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TertiaryHeader_2eproto);
  return file_level_metadata_TertiaryHeader_2eproto;
}

void *SnippetUI::TertiaryHeader_Standard::default_instance(SnippetUI::TertiaryHeader_Standard *this)
{
  if (atomic_load(scc_info_TertiaryHeader_Standard_TertiaryHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TertiaryHeader_Standard_TertiaryHeader_2eproto);
  return &SnippetUI::_TertiaryHeader_Standard_default_instance_;
}

void SnippetUI::TertiaryHeader_Standard::MergeFrom(SnippetUI::TertiaryHeader_Standard *this, const SnippetUI::TertiaryHeader_Standard *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TertiaryHeader.pb.cc", 340);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TertiaryHeader_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::TertiaryHeader_Standard *)&SnippetUI::_TertiaryHeader_Standard_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1BFB20604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::TertiaryHeader_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TertiaryHeader_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::TertiaryHeader_Standard *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::TertiaryHeader_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TertiaryHeader_Standard>);
    SnippetUI::TertiaryHeader_Standard::TertiaryHeader_Standard(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::TertiaryHeader_Standard *)operator new();
    SnippetUI::TertiaryHeader_Standard::TertiaryHeader_Standard(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFB206A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TertiaryHeader_Standard>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::TertiaryHeader_Standard::InitAsDefaultInstance(SnippetUI::TertiaryHeader_Standard *this)
{
  qword_1EF5844B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF5844C0 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::TertiaryHeader_Standard::_Internal::text_1(SnippetUI::TertiaryHeader_Standard::_Internal *this, const SnippetUI::TertiaryHeader_Standard *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::TertiaryHeader_Standard::_Internal::action(SnippetUI::TertiaryHeader_Standard::_Internal *this, const SnippetUI::TertiaryHeader_Standard *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::TertiaryHeader_Standard::clear_text_1(SnippetUI::TertiaryHeader_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::TertiaryHeader_Standard::clear_action(SnippetUI::TertiaryHeader_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

SnippetUI::TertiaryHeader_Standard *SnippetUI::TertiaryHeader_Standard::TertiaryHeader_Standard(SnippetUI::TertiaryHeader_Standard *this, const SnippetUI::TertiaryHeader_Standard *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;

  *(_QWORD *)this = &off_1E7935F58;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TertiaryHeader_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::TertiaryHeader_Standard *)&SnippetUI::_TertiaryHeader_Standard_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 4));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 4) = v9;
  return this;
}

void sub_1BFB20934(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::TertiaryHeader_Standard::CopyFrom(SnippetUI::TertiaryHeader_Standard *this, const SnippetUI::TertiaryHeader_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::TertiaryHeader_Standard::Clear(this);
    SnippetUI::TertiaryHeader_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::TertiaryHeader_Standard::InternalSwap(SnippetUI::TertiaryHeader_Standard *this, SnippetUI::TertiaryHeader_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::TertiaryHeader_Standard *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
}

uint64_t YAML::Load@<X0>(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD v5[13];
  char v6;
  uint64_t v7;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5, a1);
  YAML::Load(v5, a2);
  v5[0] = *MEMORY[0x1E0DE4F50];
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v5[2] = v3;
  v5[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8D80C](&v7);
}

void sub_1BFB20B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

YAML::Scanner *YAML::Load@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  YAML::Scanner *result;
  _BYTE v4[112];
  YAML::Scanner *v5;
  uint64_t v6;

  YAML::Parser::Parser(&v5, a1);
  YAML::NodeBuilder::NodeBuilder((YAML::NodeBuilder *)v4);
  if ((YAML::Parser::HandleNextDocument(&v5, (uint64_t)v4) & 1) != 0)
  {
    YAML::NodeBuilder::Root((YAML::NodeBuilder *)v4, a2);
  }
  else
  {
    *(_BYTE *)a2 = 1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
  }
  YAML::NodeBuilder::~NodeBuilder((YAML::NodeBuilder *)v4);
  std::unique_ptr<YAML::Directives>::reset[abi:ne180100](&v6, 0);
  result = v5;
  v5 = 0;
  if (result)
  {
    YAML::Scanner::~Scanner(result);
    return (YAML::Scanner *)MEMORY[0x1C3B8D890]();
  }
  return result;
}

void sub_1BFB20C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  YAML::Parser::~Parser((YAML::Parser *)(v1 - 32));
  _Unwind_Resume(a1);
}

uint64_t YAML::Load@<X0>(YAML *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::string __p;
  _QWORD v7[13];
  char v8;
  uint64_t v9;

  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)this);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  YAML::Load(v7, a2);
  v7[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[2] = v4;
  v7[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8D80C](&v9);
}

void sub_1BFB20D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t YAML::LoadFile@<X0>(uint64_t a1@<X8>)
{
  YAML::BadFile *exception;
  _QWORD v4[2];
  _BYTE v5[408];
  _QWORD v6[20];

  v6[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v4);
  if ((v5[*(_QWORD *)(v4[0] - 24) + 16] & 5) != 0)
  {
    exception = (YAML::BadFile *)__cxa_allocate_exception(0x38uLL);
    YAML::BadFile::BadFile(exception);
  }
  YAML::Load(v4, a1);
  v4[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3B8D608](v5);
  std::istream::~istream();
  return MEMORY[0x1C3B8D80C](v6);
}

void sub_1BFB20E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  std::ifstream::~ifstream(&a10);
  _Unwind_Resume(a1);
}

void sub_1BFB20F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1C3B8D80C](v1 + 424);
  _Unwind_Resume(a1);
}

YAML::BadFile *YAML::BadFile::BadFile(YAML::BadFile *this)
{
  void *__p[2];
  char v4;
  uint64_t v5;
  int v6;

  v5 = -1;
  v6 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "bad file");
  YAML::Exception::Exception((uint64_t)this, &v5, (__int128 *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = &off_1E7936048;
  return this;
}

void sub_1BFB20FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t YAML::LoadAll@<X0>(const std::string *a1@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD v5[13];
  char v6;
  uint64_t v7;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5, a1);
  YAML::LoadAll(v5, a2);
  v5[0] = *MEMORY[0x1E0DE4F50];
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v5[2] = v3;
  v5[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8D80C](&v7);
}

void sub_1BFB210B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

YAML::Scanner *YAML::LoadAll@<X0>(_QWORD *a1@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int64x2_t v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  YAML::Scanner *result;
  char v30[8];
  void *__p;
  char v32;
  std::__shared_weak_count *v33;
  _BYTE v34[112];
  YAML::Scanner *v35;
  uint64_t v36;
  char *v37;
  int64x2_t v38;
  char *v39;
  int64x2_t *v40;

  a2->i64[0] = 0;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  YAML::Parser::Parser(&v35, a1);
  while (1)
  {
    YAML::NodeBuilder::NodeBuilder((YAML::NodeBuilder *)v34);
    if ((YAML::Parser::HandleNextDocument(&v35, (uint64_t)v34) & 1) == 0)
      break;
    YAML::NodeBuilder::Root((YAML::NodeBuilder *)v34, (uint64_t)v30);
    v4 = a2->u64[1];
    v3 = a2[1].u64[0];
    if (v4 >= v3)
    {
      v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - a2->i64[0]) >> 3);
      v7 = v6 + 1;
      if ((unint64_t)(v6 + 1) > 0x492492492492492)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3 - a2->i64[0]) >> 3);
      if (2 * v8 > v7)
        v7 = 2 * v8;
      if (v8 >= 0x249249249249249)
        v9 = 0x492492492492492;
      else
        v9 = v7;
      v40 = a2 + 1;
      if (v9)
      {
        if (v9 > 0x492492492492492)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(56 * v9);
      }
      else
      {
        v10 = 0;
      }
      v37 = v10;
      v38.i64[0] = (uint64_t)&v10[56 * v6];
      v38.i64[1] = v38.i64[0];
      v39 = &v10[56 * v9];
      std::allocator<YAML::Node>::construct[abi:ne180100]<YAML::Node,YAML::Node>(v38.i64[0], (uint64_t)v30);
      v11 = v38.i64[0];
      v5 = v38.i64[1] + 56;
      v38.i64[1] += 56;
      v12 = a2->i64[0];
      v13 = a2->u64[1];
      if (v13 == a2->i64[0])
      {
        v24 = vdupq_n_s64(v13);
      }
      else
      {
        v14 = 0;
        v15 = v38.i64[0];
        v16 = a2->u64[1];
        v17 = v38.i64[0];
        do
        {
          v18 = *(_BYTE *)(v16 - 56);
          v16 -= 56;
          *(_BYTE *)(v17 - 56) = v18;
          v17 -= 56;
          v19 = (std::string *)(v17 + 8);
          if (*(char *)(v16 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)(v13 - 48), *(_QWORD *)(v13 - 40));
          }
          else
          {
            v20 = *(_OWORD *)(v16 + 8);
            *(_QWORD *)(v17 + 24) = *(_QWORD *)(v16 + 24);
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
          }
          *(_QWORD *)(v15 - 24) = *(_QWORD *)(v13 - 24);
          v21 = *(_QWORD *)(v13 - 16);
          *(_QWORD *)(v15 - 16) = v21;
          if (v21)
          {
            v22 = (unint64_t *)(v21 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          *(_QWORD *)(v15 - 8) = *(_QWORD *)(v13 - 8);
          v14 -= 56;
          v15 = v17;
          v13 = v16;
        }
        while (v16 != v12);
        v24 = *a2;
        v5 = v38.i64[1];
        v11 = v17;
      }
      a2->i64[0] = v11;
      a2->i64[1] = v5;
      v38 = v24;
      v25 = (char *)a2[1].i64[0];
      a2[1].i64[0] = (uint64_t)v39;
      v39 = v25;
      v37 = (char *)v24.i64[0];
      std::__split_buffer<YAML::Node>::~__split_buffer((uint64_t)&v37);
    }
    else
    {
      std::allocator<YAML::Node>::construct[abi:ne180100]<YAML::Node,YAML::Node>(a2->i64[1], (uint64_t)v30);
      v5 = v4 + 56;
      a2->i64[1] = v4 + 56;
    }
    a2->i64[1] = v5;
    v26 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v32 < 0)
      operator delete(__p);
    YAML::NodeBuilder::~NodeBuilder((YAML::NodeBuilder *)v34);
  }
  YAML::NodeBuilder::~NodeBuilder((YAML::NodeBuilder *)v34);
  std::unique_ptr<YAML::Directives>::reset[abi:ne180100](&v36, 0);
  result = v35;
  v35 = 0;
  if (result)
  {
    YAML::Scanner::~Scanner(result);
    return (YAML::Scanner *)MEMORY[0x1C3B8D890]();
  }
  return result;
}

void sub_1BFB213AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::vector<YAML::Node>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::allocator<YAML::Node>::construct[abi:ne180100]<YAML::Node,YAML::Node>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
}

void std::vector<YAML::Node>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<YAML::Node>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<YAML::Node>::destroy[abi:ne180100](uint64_t a1)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

uint64_t std::__split_buffer<YAML::Node>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::allocator<YAML::Node>::destroy[abi:ne180100](i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t YAML::LoadAll@<X0>(YAML *this@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v4;
  std::string __p;
  _QWORD v7[13];
  char v8;
  uint64_t v9;

  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)this);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  YAML::LoadAll(v7, a2);
  v7[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[2] = v4;
  v7[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8D80C](&v9);
}

void sub_1BFB21670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t YAML::LoadAllFromFile@<X0>(int64x2_t *a1@<X8>)
{
  YAML::BadFile *exception;
  _QWORD v4[2];
  _BYTE v5[408];
  _QWORD v6[20];

  v6[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v4);
  if ((v5[*(_QWORD *)(v4[0] - 24) + 16] & 5) != 0)
  {
    exception = (YAML::BadFile *)__cxa_allocate_exception(0x38uLL);
    YAML::BadFile::BadFile(exception);
  }
  YAML::LoadAll(v4, a1);
  v4[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3B8D608](v5);
  std::istream::~istream();
  return MEMORY[0x1C3B8D80C](v6);
}

void sub_1BFB217A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  std::ifstream::~ifstream(&a10);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Parameter::Validate(siri::dialogengine::Parameter *this, siri::dialogengine::Context *a2)
{
  uint64_t v4;
  std::string::size_type size;
  void *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string *v10;
  __int128 v11;
  std::string::size_type IsBuiltinType;
  void *v13;
  std::string::size_type v14;
  uint64_t v15;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string::size_type v36;
  char *v37;
  size_t v38;
  size_t v39;
  std::string *v40;
  std::string::size_type v41;
  std::string::size_type v42;
  int v43;
  std::string *p_p;
  uint64_t v45;
  std::string *v46;
  int v47;
  int v48;
  int v49;
  _BOOL4 v50;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string __p;
  std::string v66;
  std::string v67;
  std::string v68;

  if (!a2)
    return 0;
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v68, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v68 = *(std::string *)((char *)this + 8);
  if (*((char *)this + 55) < 0)
    std::string::__init_copy_ctor_external(&v67, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  else
    v67 = *(std::string *)((char *)this + 32);
  if (*((char *)this + 183) < 0)
    std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)this + 20), *((_QWORD *)this + 21));
  else
    v66 = *(std::string *)((char *)this + 160);
  size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v68.__r_.__value_.__l.__size_;
  if (size)
  {
    if (siri::dialogengine::IsValidVariableName((uint64_t)&v68))
    {
      v4 = 1;
      goto LABEL_25;
    }
    std::operator+<char>();
    v7 = std::string::append(&v64, "' (Name must match regex \"[a-zA-Z_][a-zA-Z0-9_\\-]*\")");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, (uint64_t)this + 240);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      v6 = (void *)v64.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Parameter has no name");
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, (uint64_t)this + 240);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v6 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v6);
    }
  }
  v4 = 0;
LABEL_25:
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v67.__r_.__value_.__l.__size_)
    {
LABEL_32:
      std::operator+<char>();
      v10 = std::string::append(&v64, "'");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      IsBuiltinType = siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, (uint64_t)this + 240);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_62;
      v13 = (void *)v64.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    if (v67.__r_.__value_.__l.__size_ != 13)
      goto LABEL_41;
    v9 = (std::string *)v67.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v67.__r_.__value_.__r.__words[2]) != 13)
    {
      if (*((_BYTE *)&v67.__r_.__value_.__s + 23))
        goto LABEL_41;
      goto LABEL_32;
    }
    v9 = &v67;
  }
  v14 = v9->__r_.__value_.__r.__words[0];
  v15 = *(std::string::size_type *)((char *)v9->__r_.__value_.__r.__words + 5);
  if (v14 == 0x442E676F6C616964 && v15 == 0x6563697665442E67)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "The 'dialog.Device' type has been removed. Use 'sirikit.DeviceState' instead.");
    IsBuiltinType = siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, (uint64_t)this + 240);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      v4 = 0;
      goto LABEL_63;
    }
    v13 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_61:
    operator delete(v13);
    goto LABEL_62;
  }
LABEL_41:
  if (!siri::dialogengine::IsValidType((uint64_t)a2, (uint64_t)&v67))
  {
    std::operator+<char>();
    v17 = std::string::append(&v62, "' for '");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v68;
    else
      v19 = (std::string *)v68.__r_.__value_.__r.__words[0];
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    else
      v20 = v68.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v63, (const std::string::value_type *)v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v64, "'");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    IsBuiltinType = siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, (uint64_t)this + 240);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_62;
    v13 = (void *)v62.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
  IsBuiltinType = siri::dialogengine::IsBuiltinType(&v67);
  if ((IsBuiltinType & 1) == 0)
  {
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    else
      __p = v67;
    if (siri::dialogengine::IsArrayType(&__p))
    {
      siri::dialogengine::GetArrayElementType((uint64_t)&__p, &v64);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v64;
    }
    siri::dialogengine::ObjectRegistry::GetObject((uint64_t)a2, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t *)&v64);
    IsBuiltinType = v64.__r_.__value_.__r.__words[0];
    if (v64.__r_.__value_.__r.__words[0])
      IsBuiltinType = siri::dialogengine::ObjectSchema::Validate((std::string *)v64.__r_.__value_.__l.__data_, a2);
    v59 = (std::__shared_weak_count *)v64.__r_.__value_.__l.__size_;
    if (v64.__r_.__value_.__l.__size_)
    {
      v60 = (unint64_t *)(v64.__r_.__value_.__l.__size_ + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_63:
  v25 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v25 = v66.__r_.__value_.__l.__size_;
  if (v25)
  {
    if (!siri::dialogengine::IsValidSemanticConceptType(IsBuiltinType, (uint64_t)&v67))
    {
      std::operator+<char>();
      v26 = std::string::append(&v64, "'");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, (uint64_t)this + 240);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      v4 = 0;
    }
    if (!siri::dialogengine::IsValidSemanticConcept((uint64_t)a2, (const void **)&v66.__r_.__value_.__l.__data_))
    {
      std::operator+<char>();
      v28 = std::string::append(&v62, "'. No dialog metadata found for '");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v68;
      else
        v30 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        v31 = v68.__r_.__value_.__l.__size_;
      v32 = std::string::append(&v63, (const std::string::value_type *)v30, v31);
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      v34 = std::string::append(&v64, "'");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, (uint64_t)this + 240);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      v4 = 0;
    }
  }
  if (*((char *)this + 207) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 23), *((_QWORD *)this + 24));
  else
    __p = *(std::string *)((char *)this + 184);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v36 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v36)
      goto LABEL_139;
  }
  else if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    goto LABEL_139;
  }
  v37 = siri::dialogengine::TYPE_STRING[0];
  v38 = strlen(siri::dialogengine::TYPE_STRING[0]);
  v39 = v38;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v38 != v67.__r_.__value_.__l.__size_)
      goto LABEL_102;
    if (v38 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v40 = (std::string *)v67.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v38 != HIBYTE(v67.__r_.__value_.__r.__words[2]))
      goto LABEL_102;
    v40 = &v67;
  }
  if (!memcmp(v40, siri::dialogengine::TYPE_STRING[0], v39))
    goto LABEL_139;
LABEL_102:
  std::string::basic_string[abi:ne180100]<0>(&v64, v37);
  siri::dialogengine::SetArrayElementType((uint64_t)&v64, (uint64_t)&__p);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    v41 = v67.__r_.__value_.__l.__size_;
  v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v43 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v42 = __p.__r_.__value_.__l.__size_;
  if (v41 == v42)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&v67.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v50 = memcmp(v67.__r_.__value_.__l.__data_, p_p, v67.__r_.__value_.__l.__size_) != 0;
      if ((v43 & 0x80000000) == 0)
        goto LABEL_120;
    }
    else if (*((_BYTE *)&v67.__r_.__value_.__s + 23))
    {
      v45 = HIBYTE(v67.__r_.__value_.__r.__words[2]) - 1;
      v46 = &v67;
      do
      {
        v48 = v46->__r_.__value_.__s.__data_[0];
        v46 = (std::string *)((char *)v46 + 1);
        v47 = v48;
        v49 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v50 = v47 != v49;
      }
      while (v47 == v49 && v45-- != 0);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_120;
    }
    else
    {
      v50 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_120;
    }
    goto LABEL_124;
  }
  v50 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_124:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_120:
  if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v50)
      goto LABEL_139;
LABEL_126:
    std::operator+<char>();
    v52 = std::string::append(&v63, "' is of type ");
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = &v67;
    else
      v54 = (std::string *)v67.__r_.__value_.__r.__words[0];
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
    else
      v55 = v67.__r_.__value_.__l.__size_;
    v56 = std::string::append(&v64, (const std::string::value_type *)v54, v55);
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, (uint64_t)this + 240);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    v4 = 0;
    goto LABEL_139;
  }
  operator delete(v64.__r_.__value_.__l.__data_);
  if (v50)
    goto LABEL_126;
LABEL_139:
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFB220A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  if (*(char *)(v42 - 57) < 0)
    operator delete(*(void **)(v42 - 80));
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'siri::dialogengine::Parameter::~Parameter(siri::dialogengine::Parameter *this)
{
  void **v2;

  v2 = (void **)((char *)this - 240);
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  siri::dialogengine::ObjectProperty::~ObjectProperty(v2);
}

{
  void **v2;

  v2 = (void **)((char *)this - 240);
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  siri::dialogengine::ObjectProperty::~ObjectProperty(v2);
  JUMPOUT(0x1C3B8D890);
}

{
  void **v2;

  v2 = (void **)((char *)this - 304);
  *(_QWORD *)this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this - 8);
  siri::dialogengine::ObjectProperty::~ObjectProperty(v2);
}

{
  void **v2;

  v2 = (void **)((char *)this - 304);
  *(_QWORD *)this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this - 8);
  siri::dialogengine::ObjectProperty::~ObjectProperty(v2);
  JUMPOUT(0x1C3B8D890);
}

uint64_t `non-virtual thunk to'siri::dialogengine::Parameter::Validate(siri::dialogengine::Parameter *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::Parameter::Validate((siri::dialogengine::Parameter *)((char *)this - 304), a2);
}

uint64_t siri::dialogengine::Parameter::Parameter(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, const std::string *a5, const std::string *a6, const std::string *a7, const std::string *a8, std::string *__str, char a10, char a11, char a12, char a13)
{
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 153) = 257;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 240) = &unk_1E793AE60;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)a1 = &off_1E793AE30;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = &unk_1E793AE80;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::operator=((std::string *)(a1 + 32), a3);
  std::string::operator=((std::string *)(a1 + 56), a4);
  std::string::operator=((std::string *)(a1 + 160), a5);
  std::string::operator=((std::string *)(a1 + 80), a6);
  std::string::operator=((std::string *)(a1 + 128), a7);
  std::string::operator=((std::string *)(a1 + 184), a8);
  std::string::operator=((std::string *)(a1 + 208), __str);
  *(_BYTE *)(a1 + 153) = a10;
  *(_BYTE *)(a1 + 152) = a11;
  *(_BYTE *)(a1 + 232) = a12;
  *(_BYTE *)(a1 + 154) = a13;
  return a1;
}

{
  return siri::dialogengine::Parameter::Parameter(a1, a2, a3, a4, a5, a6, a7, a8, __str, a10, a11, a12, a13);
}

void sub_1BFB224C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  *(_QWORD *)(v1 + 304) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v1 + 320));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)v1);
  _Unwind_Resume(a1);
}

double siri::dialogengine::PatternSchemaOverride::PatternSchemaOverride(siri::dialogengine::PatternSchemaOverride *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

char *siri::dialogengine::PatternSchemaOverride::GetUsage@<X0>(siri::dialogengine::PatternSchemaOverride *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)a2, *(_QWORD **)this, *((_QWORD **)this + 1), (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
}

uint64_t **siri::dialogengine::PatternSchemaOverride::SetUsage(uint64_t **result, uint64_t **a2)
{
  if (result != a2)
    return (uint64_t **)std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

std::string *siri::dialogengine::PatternSchemaOverride::GetIdioms@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[3], this[4], 0xAAAAAAAAAAAAAAABLL * (((char *)this[4] - (char *)this[3]) >> 3));
}

void siri::dialogengine::PatternSchemaOverride::SetIdioms(std::vector<std::string> *a1, uint64_t a2)
{
  std::vector<std::string> *v2;

  v2 = a1 + 1;
  if (v2 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

uint64_t siri::dialogengine::NodeVectorDialogFilterAdapter::size(siri::dialogengine::NodeVectorDialogFilterAdapter *this)
{
  return (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3;
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::GetId(siri::dialogengine::NodeVectorDialogFilterAdapter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2);
  if (*(char *)(v3 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v3 + 96), *(_QWORD *)(v3 + 104));
  }
  else
  {
    v4 = *(_OWORD *)(v3 + 96);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 112);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v4;
  }
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::GetFullPrint(siri::dialogengine::NodeVectorDialogFilterAdapter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;

  siri::dialogengine::SpeakableString::SpeakableString(&v4, (const siri::dialogengine::SpeakableString *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) + 208));
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(a3, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
  else
    *a3 = v4;
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1BFB2273C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::GetFullSpeak(siri::dialogengine::NodeVectorDialogFilterAdapter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string v4;
  __int128 v5;
  std::string::size_type v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;

  siri::dialogengine::SpeakableString::SpeakableString(&v4, (const siri::dialogengine::SpeakableString *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) + 208));
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v5, *((std::string::size_type *)&v5 + 1));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    a3->__r_.__value_.__r.__words[2] = v6;
  }
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)v5);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1BFB22828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::GetSupportingPrint(siri::dialogengine::NodeVectorDialogFilterAdapter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;

  siri::dialogengine::SpeakableString::SpeakableString(&v4, (const siri::dialogengine::SpeakableString *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) + 376));
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(a3, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_);
  else
    *a3 = v4;
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1BFB2290C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::GetSupportingSpeak(siri::dialogengine::NodeVectorDialogFilterAdapter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string v4;
  __int128 v5;
  std::string::size_type v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;

  siri::dialogengine::SpeakableString::SpeakableString(&v4, (const siri::dialogengine::SpeakableString *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) + 376));
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v5, *((std::string::size_type *)&v5 + 1));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    a3->__r_.__value_.__r.__words[2] = v6;
  }
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)v5);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1BFB229F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::NodeVectorDialogFilterAdapter::GetSpokenOnly(siri::dialogengine::NodeVectorDialogFilterAdapter *this, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2);
  v3 = *(unsigned __int8 *)(v2 + 547);
  if (*(_BYTE *)(v2 + 547))
  {
    v4 = *(unsigned __int8 *)(v2 + 546);
    v3 = 1;
  }
  else
  {
    v4 = 0;
  }
  return v4 | (v3 << 8);
}

uint64_t siri::dialogengine::NodeVectorDialogFilterAdapter::GetPrintOnly(siri::dialogengine::NodeVectorDialogFilterAdapter *this, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2);
  v3 = *(unsigned __int8 *)(v2 + 545);
  if (*(_BYTE *)(v2 + 545))
  {
    v4 = *(unsigned __int8 *)(v2 + 544);
    v3 = 1;
  }
  else
  {
    v4 = 0;
  }
  return v4 | (v3 << 8);
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::GetRedactedFullPrint(siri::dialogengine::NodeVectorDialogFilterAdapter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;

  siri::dialogengine::SpeakableString::SpeakableString(&v4, (const siri::dialogengine::SpeakableString *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) + 208));
  siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)&v4, a3);
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1BFB22B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::GetRedactedFullSpeak(siri::dialogengine::NodeVectorDialogFilterAdapter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;

  siri::dialogengine::SpeakableString::SpeakableString(&v4, (const siri::dialogengine::SpeakableString *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) + 208));
  siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)&v4, a3);
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1BFB22BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::GetRedactedSupportingPrint(siri::dialogengine::NodeVectorDialogFilterAdapter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;

  siri::dialogengine::SpeakableString::SpeakableString(&v4, (const siri::dialogengine::SpeakableString *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) + 376));
  siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)&v4, a3);
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1BFB22CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::GetRedactedSupportingSpeak(siri::dialogengine::NodeVectorDialogFilterAdapter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;

  siri::dialogengine::SpeakableString::SpeakableString(&v4, (const siri::dialogengine::SpeakableString *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) + 376));
  siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)&v4, a3);
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1BFB22D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::ClearFullDialog(siri::dialogengine::NodeVectorDialogFilterAdapter *this, uint64_t a2)
{
  siri::dialogengine::Dialog *v2;
  void *v3[2];
  void *v4[2];
  __int128 v5;
  void *v6[2];
  void *v7[2];
  __int128 v8;
  void *v9[2];
  void *v10[2];
  __int128 v11;
  void *__p[2];
  uint64_t v13;

  v2 = *(siri::dialogengine::Dialog **)(*((_QWORD *)this + 2) + 8 * a2);
  v13 = 0;
  v11 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)v4 = 0u;
  siri::dialogengine::Dialog::SetFull(v2, (const std::string *)v3);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[1]);
  if (SHIBYTE(v10[0]) < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  if (SHIBYTE(v7[0]) < 0)
    operator delete(v6[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[1]);
  if (SHIBYTE(v4[0]) < 0)
    operator delete(v3[0]);
}

void sub_1BFB22E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::ClearSupportingDialog(siri::dialogengine::NodeVectorDialogFilterAdapter *this, uint64_t a2)
{
  siri::dialogengine::Dialog *v2;
  void *v3[2];
  void *v4[2];
  __int128 v5;
  void *v6[2];
  void *v7[2];
  __int128 v8;
  void *v9[2];
  void *v10[2];
  __int128 v11;
  void *__p[2];
  uint64_t v13;

  v2 = *(siri::dialogengine::Dialog **)(*((_QWORD *)this + 2) + 8 * a2);
  v13 = 0;
  v11 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)v4 = 0u;
  siri::dialogengine::Dialog::SetSupporting(v2, (const std::string *)v3);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[1]);
  if (SHIBYTE(v10[0]) < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  if (SHIBYTE(v7[0]) < 0)
    operator delete(v6[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[1]);
  if (SHIBYTE(v4[0]) < 0)
    operator delete(v3[0]);
}

void sub_1BFB22F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::NodeVectorDialogFilterAdapter::SetPrintOnly(uint64_t this, uint64_t a2, __int16 a3)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 8 * a2) + 544) = a3 | 0x100;
  return this;
}

uint64_t siri::dialogengine::NodeVectorDialogFilterAdapter::SetSpokenOnly(uint64_t this, uint64_t a2, __int16 a3)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 8 * a2) + 546) = a3 | 0x100;
  return this;
}

uint64_t *siri::dialogengine::NodeVectorDialogFilterAdapter::MarkDialogForRemoval(uint64_t *this, unint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = (uint64_t)this;
  v5 = (uint64_t **)(this + 6);
  v4 = (uint64_t *)this[6];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(this + 6);
LABEL_9:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = a2;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = **(_QWORD **)(v3 + 40);
    if (v9)
    {
      *(_QWORD *)(v3 + 40) = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 48), v10);
    ++*(_QWORD *)(v3 + 56);
  }
  return this;
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::RemoveMarkedDialogs(siri::dialogengine::NodeVectorDialogFilterAdapter *this, std::string *a2)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  __int128 **v11;
  __int128 *v12;
  __int128 *v13;
  std::string *v14;
  std::string::size_type size;
  std::string::size_type v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  std::string v27;
  std::string v28;

  v26 = (char *)this + 48;
  if ((siri::dialogengine::NodeVectorDialogFilterAdapter *)((char *)this + 48) != *((siri::dialogengine::NodeVectorDialogFilterAdapter **)this
                                                                                   + 5))
  {
    v3 = -1;
    v4 = (_QWORD *)((char *)this + 48);
    while (1)
    {
      v5 = (_QWORD *)*v4;
      v6 = v4;
      if (*v4)
      {
        do
        {
          v7 = v5;
          v5 = (_QWORD *)v5[1];
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v6[2];
          v8 = *v7 == (_QWORD)v6;
          v6 = v7;
        }
        while (v8);
      }
      v9 = v7[4];
      if (v9 >= v3)
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Expected to process indices in strictly decreasing order, but found %zu after %zu", (const char *)a2, v7[4], v3);
      v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v9);
      if (*(char *)(v10 + 119) < 0)
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(v10 + 96), *(_QWORD *)(v10 + 104));
      else
        v27 = *(std::string *)(v10 + 96);
      v11 = (__int128 **)*((_QWORD *)this + 1);
      v12 = *v11;
      v13 = v11[1];
      if (*v11 != v13)
        break;
LABEL_36:
      v20 = *((_QWORD *)this + 1);
      v21 = (uint64_t)(v12 + 1);
      v22 = *(__int128 **)(v20 + 8);
      if (v12 + 1 != v22)
      {
        do
          v23 = (uint64_t)v12++;
        while ((__int128 *)(std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100](v23, v12) + 32) != v22);
        v21 = *(_QWORD *)(v20 + 8);
      }
      while ((__int128 *)v21 != v12)
        v21 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v21 - 16);
      *(_QWORD *)(v20 + 8) = v12;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      v24 = (_QWORD *)*v4;
      if (*v4)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)v24[1];
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v4[2];
          v8 = *v25 == (_QWORD)v4;
          v4 = v25;
        }
        while (v8);
      }
      v3 = v9;
      v4 = v25;
      if (v25 == *((_QWORD **)this + 5))
        goto LABEL_48;
    }
    while (1)
    {
      v14 = *(std::string **)v12;
      if (*(char *)(*(_QWORD *)v12 + 119) < 0)
        std::string::__init_copy_ctor_external(&v28, v14[4].__r_.__value_.__l.__data_, v14[4].__r_.__value_.__l.__size_);
      else
        v28 = v14[4];
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      else
        size = v28.__r_.__value_.__l.__size_;
      v16 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = v27.__r_.__value_.__l.__size_;
      if (size == v16)
      {
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          a2 = &v27;
        else
          a2 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v28.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v18 = (void *)v28.__r_.__value_.__r.__words[0];
          v19 = memcmp(v28.__r_.__value_.__l.__data_, a2, v28.__r_.__value_.__l.__size_);
          operator delete(v18);
          if (!v19)
            goto LABEL_36;
          goto LABEL_34;
        }
        if (!*((_BYTE *)&v28.__r_.__value_.__s + 23))
          goto LABEL_36;
        v17 = 0;
        while (v28.__r_.__value_.__s.__data_[v17] == a2->__r_.__value_.__s.__data_[v17])
        {
          if (HIBYTE(v28.__r_.__value_.__r.__words[2]) == ++v17)
            goto LABEL_36;
        }
      }
      if ((*((_BYTE *)&v28.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(v28.__r_.__value_.__l.__data_);
LABEL_34:
      if (++v12 == v13)
      {
        v12 = v13;
        goto LABEL_36;
      }
    }
  }
LABEL_48:
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*((_QWORD **)this + 6));
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = v26;
  siri::dialogengine::NodeVectorDialogFilterAdapter::CollectDialogNodes(this);
}

void sub_1BFB23278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::CollectDialogNodes(siri::dialogengine::NodeVectorDialogFilterAdapter *this)
{
  const void ***v1;
  _QWORD *v2;
  const void **v3;
  const void **v4;
  void *v6;
  void *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v1 = (const void ***)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 3) = v2;
  v3 = *v1;
  v4 = v1[1];
  if (*v1 != v4)
  {
    do
    {
      if (*v3)
      {
        if (v6)
        {
          v7 = v6;
          v8 = *((_QWORD *)this + 4);
          if ((unint64_t)v2 >= v8)
          {
            v10 = (_QWORD *)*((_QWORD *)this + 2);
            v11 = v2 - v10;
            v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 61)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v13 = v8 - (_QWORD)v10;
            if (v13 >> 2 > v12)
              v12 = v13 >> 2;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
              v14 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v14 = v12;
            if (v14)
            {
              if (v14 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v15 = (char *)operator new(8 * v14);
            }
            else
            {
              v15 = 0;
            }
            v16 = &v15[8 * v11];
            *(_QWORD *)v16 = v7;
            v9 = v16 + 8;
            if (v2 != v10)
            {
              do
              {
                v17 = *--v2;
                *((_QWORD *)v16 - 1) = v17;
                v16 -= 8;
              }
              while (v2 != v10);
              v2 = (_QWORD *)*((_QWORD *)this + 2);
            }
            *((_QWORD *)this + 2) = v16;
            *((_QWORD *)this + 3) = v9;
            *((_QWORD *)this + 4) = &v15[8 * v14];
            if (v2)
              operator delete(v2);
          }
          else
          {
            *v2 = v6;
            v9 = v2 + 1;
          }
          *((_QWORD *)this + 3) = v9;
          v2 = v9;
        }
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
}

siri::dialogengine::NodeVectorDialogFilterAdapter *siri::dialogengine::NodeVectorDialogFilterAdapter::NodeVectorDialogFilterAdapter(siri::dialogengine::NodeVectorDialogFilterAdapter *a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E79360B8;
  *((_QWORD *)a1 + 1) = a2;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 6) = 0;
  *((_QWORD *)a1 + 7) = 0;
  *((_QWORD *)a1 + 5) = (char *)a1 + 48;
  siri::dialogengine::NodeVectorDialogFilterAdapter::CollectDialogNodes(a1);
  return a1;
}

void sub_1BFB23430(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD **v3;
  void **v4;
  void *v6;

  v4 = v2;
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*v3);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void sub_1BFB234C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFB23544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFB235B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFB23784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);

  _Unwind_Resume(a1);
}

void sub_1BFB23828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFB23894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFB2394C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFB239F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BFB23BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BFB23CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetProfanityFilter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  siri::dialogengine *v3;
  siri::dialogengine *v4;
  int v5;
  uint64_t v12;
  int *v13;
  int v17;
  int v18;
  uint64_t result;
  _WORD *v22;
  BOOL v24;
  BOOL v27;
  uint64_t v28;
  unsigned __int8 v29;
  _WORD *v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  BOOL v33;
  unsigned __int8 v35;
  int v36;
  int v37;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  uint64_t i;
  uint64_t nn;
  uint64_t j;
  uint64_t k;
  uint64_t n;
  uint64_t mm;
  uint64_t m;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  uint64_t v264[6];
  uint64_t v265[6];
  uint64_t v266[6];
  uint64_t v267[6];
  uint64_t v268[6];
  uint64_t v269[6];
  uint64_t v270[6];
  uint64_t v271[6];
  uint64_t v272[6];
  uint64_t v273[6];
  uint64_t v274[6];
  uint64_t v275[6];
  uint64_t v276[6];
  uint64_t v277[6];
  uint64_t v278[6];
  uint64_t v279[6];
  uint64_t v280[6];
  uint64_t v281[6];
  uint64_t v282[6];
  uint64_t v283[6];
  uint64_t v284[6];
  uint64_t v285[6];
  _QWORD v286[7];

  v1 = MEMORY[0x1E0C80A78](a1);
  v2 = (_QWORD *)v1;
  v4 = v3;
  v286[6] = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    v12 = *(_QWORD *)(v1 + 8);
    if (v12 != 2)
    {
      if (v12 == 3)
      {
        if (**(_WORD **)v1 == 30073 && *(_BYTE *)(*(_QWORD *)v1 + 2) == 101)
        {
LABEL_94:
          if ((v29 & 1) == 0
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(v55, "up乜春", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v56, "on9", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v57, "黑鬼", "黑*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v58, "黐脷筋", "**筋");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v59, "黐筋", "*筋");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v60, "黐孖筋", "**筋");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v61, "麻甩佬", "**佬");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v62, "鸠", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v63, "食撚屎", "食**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v64, "食屎", "食*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v65, "颜射", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v66, "顶你个肺", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v67, "霎昂", "*昂");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v68, "閪头", "*头");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v69, "閪", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v70, "躝瘫", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v71, "躝坦", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v72, "足交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v73, "贱精", "*精");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v74, "贱种", "*种");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v75, "贱格", "*格");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v76, "贱", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v77, "西头", "*头");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v78, "茂里", "*里");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v79, "臭閪", "臭*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v80, "臭西", "臭*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v81, "臭屄", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v82, "脚交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v83, "肛交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v84, "肏", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v85, "粉肠", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v86, "粉皮", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v87, "笨柒", "笨*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v88, "碌柒", "碌*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v89, "白鬼", "白*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v90, "痴鸠线", "**线");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v91, "痴线", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v92, "痴撚线", "**线");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v93, "生仔无屎窟", "生仔***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v94, "生仔无屎忽", "生仔***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v95, "生仔冇屎忽", "生仔***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v96, "玩撚完", "玩*完");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v97, "猪閪", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v98, "猪兜", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v99, "猪乸", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v100, "死柒头", "**头");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v101, "柒头", "*头");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v102, "柒", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v103, "条条揈", "**揈");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v104, "杂种", "*种");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v105, "晏昼屌你屎忽窿", "晏昼*****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v106, "晏昼屌你屎忽", "晏昼****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v107, "晏昼叼你屎忽窿", "晏昼*****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v108, "晏昼叼你屎忽", "晏昼****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v109, "是撚但", "是*但");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v110, "是尻但", "是*但");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v111, "春袋", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v112, "昂居", "昂*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v113, "收皮啦", "**啦");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v114, "收皮", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v115, "收皮", "收*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v116, "收爹", "收*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v117, "操你妈", "**妈");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v118, "撚野", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v119, "撚样", "*样");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v120, "撚屌", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v121, "撚", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v122, "搅嘢", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v123, "援交妹", "**妹");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v124, "援交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v125, "指交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v126, "拾下拾下", "*下*下");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v127, "把撚", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v128, "扯旗", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v129, "打飞机", "打**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v130, "打靶仔", "**仔");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v131, "打潜艇", "打**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v132, "打柒佢", "**佢");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v133, "打手枪", "打**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v134, "扑野", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v135, "扑街女", "**女");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v136, "扑街仔", "**仔");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v137, "扑街", "*街");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v138, "扑晒街", "**街");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v139, "成嚿叉烧咁", "成嚿*烧咁");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v140, "戆鸠鸠", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v141, "戆鸠", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v142, "戆胶", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v143, "戆撚鸠", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v144, "戆居", "戆*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v145, "懵盛盛", "懵**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v146, "废柴", "*柴");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v147, "干你娘", "**娘");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v148, "屎忽鬼", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v149, "屌那星", "**星");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v150, "屌那妈", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v151, "屌柒", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v152, "屌揾你", "**你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v153, "屌屌揈", "**揈");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v154, "屌屄", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v155, "屌尻爆你", "***你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v156, "屌尻你", "**你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v157, "屌尻", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v158, "屌佢", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v159, "屌你老母閪", "*你***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v160, "屌你老母臭閪", "*你****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v161, "屌你老母", "*你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v162, "屌你老味閪", "*你***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v163, "屌你老味", "*你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v164, "屌你老味", "*你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v165, "屌你", "*你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v166, "屌", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v167, "屄", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v168, "尻", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v169, "小喇叭", "小**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v170, "射精", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v171, "孤鸠寒", "孤*寒");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v172, "妖", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v173, "好on9", "好**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v174, "好撚on9", "好****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v175, "好撚柒", "好**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v176, "好撚", "好*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v177, "契弟", "*弟");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v178, "大鸠镬", "大**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v179, "大波", "大*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v180, "大撚镬", "大*镬");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v181, "多鸠余", "多*余");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v182, "含撚", "含*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v183, "叼那妈", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v184, "叼柒", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v185, "叼揾你", "**你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v186, "叼屄", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v187, "叼尻", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v188, "叼叼揈", "**揈");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v189, "叼你老母", "*你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v190, "叼你", "*你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v191, "叼", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v192, "叫鸭", "叫*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v193, "叫鸡", "叫*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v194, "口爆", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v195, "口交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v196, "冚家铲", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v197, "冚家铲", "**铲");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v198, "冚家拎", "**拎");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v199, "冚家富贵", "**富贵");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v200, "兽交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v201, "八婆", "*婆");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v202, "八公", "*公");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v203, "做咩撚", "做咩*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v204, "做乜撚野", "做乜**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v205, "做乜撚嘢", "做乜**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v206, "做乜撚", "做乜*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v207, "你老母", "你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v208, "你老尾", "你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v209, "你老味", "你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v210, "你好on9", "你好**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v211, "你卤味", "你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v212, "低B", "低*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v213, "他妈的", "他*的");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v214, "今朝拮你箩柚", "今朝****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v215, "仆街女", "**女");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v216, "仆街仔", "**仔");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v217, "仆街", "*街");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v218, "仆晒街", "**街");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v219, "仆你个街", "**个*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v220, "仆你个臭街", "**个**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v221, "乸型", "*型");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v222, "乳交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v223, "乜鸠", "乜*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v224, "一楼一凤", "一*一*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v225, "一楼一", "一*一");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v226, "SM", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v227, "3P", "3*");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_yue(void)::sProfanityData_yue, (uint64_t)v55, 0xADuLL);
            for (i = 0; i != -1038; i -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v227[i]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_yue(void)::sProfanityData_yue, &dword_1BF794000);
          }
          *(_QWORD *)v4 = 0;
          *((_QWORD *)v4 + 1) = 0;
          *((_QWORD *)v4 + 2) = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, siri::dialogengine::GetProfanityFilter_yue(void)::sProfanityData_yue, *(uint64_t *)algn_1EF583050, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583050- siri::dialogengine::GetProfanityFilter_yue(void)::sProfanityData_yue) >> 4));
        }
      }
      else if (v12 == 5)
      {
        v13 = *(int **)v1;
        if (**(_DWORD **)v1 == 1230992489 && *(_BYTE *)(*(_QWORD *)v1 + 4) == 84)
        {
LABEL_106:
          if ((v32 & 1) == 0
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[23],0>(v55, "vai a fare in culo", "v********************o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[19],0>(v56, "testa di minchia", "t****************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v57, "porco dio", "p********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v58, "porca puttana", "p************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[23],0>(v59, "mannaggia la madonna", "m********************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[18],0>(v60, "mannaggia cristo", "m***************o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v61, "madonna troia", "m************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v62, "madonna maiala", "m*************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v63, "madonna impestata", "m***************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(v64, "figlio di troia", "f***************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[20],0>(v65, "figlio di puttana", "f*****************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(v66, "figlia di troia", "f***************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[20],0>(v67, "figlia di puttana", "f*****************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v68, "dio stronzo", "d**********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v69, "dio porco", "d********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v70, "dio ladro", "d********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v71, "dio fa", "d*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v72, "brutta stronza", "b*************a");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_it_IT(void)::sProfanityData_it_IT, (uint64_t)v55, 0x12uLL);
            for (j = 102; j != -6; j -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v55[j]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_it_IT(void)::sProfanityData_it_IT, &dword_1BF794000);
          }
          *(_QWORD *)v4 = 0;
          *((_QWORD *)v4 + 1) = 0;
          *((_QWORD *)v4 + 2) = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, siri::dialogengine::GetProfanityFilter_it_IT(void)::sProfanityData_it_IT, *(uint64_t *)algn_1EF583030, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583030- siri::dialogengine::GetProfanityFilter_it_IT(void)::sProfanityData_it_IT) >> 4));
        }
        if (*v13 == 1348433008 && *((_BYTE *)v13 + 4) == 84)
        {
LABEL_124:
          if ((v35 & 1) == 0
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v55, "xanax", "x***x");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v56, "viadao", "v****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "viada", "v***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v58, "veadao", "v****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v59, "veada", "v***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v60, "veadão", "v****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v61, "vagabunda", "v*******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v62, "vadia", "v***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v63, "trolha", "t****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v64, "transe-me", "t*******e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v65, "transa-la", "t*******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v66, "tomar no cu", "t*********u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v67, "sapatao", "s*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v68, "sapatão", "s*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "rabudona", "r******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v70, "rabudo", "r****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "rabudao", "r*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v72, "rabuda", "r****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v73, "rabudão", "r*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v74, "porra", "p***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v75, "pixereca", "p******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v76, "pemba", "p***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v77, "mariquinhas", "m*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v78, "mariquinha", "m********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "maricas", "m*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v80, "marica", "m****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v81, "fodo", "f**o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v82, "fodido", "f****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "fodemos", "f*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v84, "fodam", "f***m");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v85, "foda-se", "f*****e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v86, "foda", "f**a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v87, "fodê", "f**ê");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v88, "filho da puta", "f***********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v89, "fdp", "f*p");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v90, "escroto", "e*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v91, "ejaculei-me", "e*********e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v92, "corrê", "c***ê");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "cornuda", "c*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v94, "corno", "c***o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v95, "corna", "c***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v96, "cona", "c**a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v97, "colhões", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v98, "cocô", "c**ô");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v99, "cacete", "c****e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v100, "cabronas", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v101, "cabrona", "c*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v102, "cabrões", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v103, "cabrão", "c****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v104, "broxou-me", "b*******e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v105, "bostana", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v106, "bosseta", "b*****a");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_pt_PT(void)::sProfanityData_pt_PT, (uint64_t)v55, 0x34uLL);
            for (k = 306; k != -6; k -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v55[k]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_pt_PT(void)::sProfanityData_pt_PT, &dword_1BF794000);
          }
          *(_QWORD *)v4 = 0;
          *((_QWORD *)v4 + 1) = 0;
          *((_QWORD *)v4 + 2) = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, siri::dialogengine::GetProfanityFilter_pt_PT(void)::sProfanityData_pt_PT, *(uint64_t *)algn_1EF583070, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583070- siri::dialogengine::GetProfanityFilter_pt_PT(void)::sProfanityData_pt_PT) >> 4));
        }
        if (*v13 == 1113551984 && *((_BYTE *)v13 + 4) == 82)
        {
LABEL_140:
          if ((v41 & 1) == 0
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v55, "xoxotonas", "x*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v56, "xoxotona", "x******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v57, "xoxotinhas", "x********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v58, "xoxotas", "x*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v59, "xoxotões", "x******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "xoxhotas", "x******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "xotinhas", "x******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v62, "xotas", "x***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v63, "xotões", "x****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "xiricas", "x*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v65, "xirica", "x****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v66, "xibungos", "x******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v67, "xibungo", "x*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "xibius", "x****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v69, "xexecas", "x*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "xererecas", "x*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v71, "xecas", "x***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "xavascas", "x******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "xaninhas", "x******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v74, "xanas", "x***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v75, "viadagens", "v*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "viadagem", "v******m");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v77, "vagabas", "v*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v78, "vagaba", "v****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v79, "travecos", "t******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "traveco", "t*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "traveca", "t*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "transei", "t*****i");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v83, "transe", "t****e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "transar", "t*****r");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "transa", "t****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v86, "tobona", "t****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "tobinha", "t*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v88, "tobão", "t***o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v89, "tetinhas", "t******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v90, "tetões", "t****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v91, "tesudos", "t*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "tesudas", "t*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v93, "tesoes", "t****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v94, "tesões", "t****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v95, "surubas", "s*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v96, "siriricas", "s*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v97, "putos", "p***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v98, "putonas", "p*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v99, "putinhas", "p******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "putinha", "p*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "puteiros", "p******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v102, "puteiro", "p*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v103, "putanas", "p*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v104, "putão", "p***o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v105, "punheteiro", "p********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v106, "prexerecas", "p********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v107, "prexecas", "p******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v108, "prechecas", "p*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v109, "pixiricas", "p*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "pirocos", "p*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v111, "pirocas", "p*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v112, "pirocao", "p*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "piroca", "p****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v114, "pirocões", "p******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v115, "pirocão", "p*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v116, "picões", "p****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v117, "piçou", "p***u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v118, "piços", "p***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v119, "piço", "p**o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v120, "piçadas", "P*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v121, "piçada", "p****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v122, "pexerecas", "p*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v123, "pentelhudos", "p*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v124, "pentelhudo", "p********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v125, "pentelhudas", "p*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v126, "pentelhuda", "p********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v127, "pentelho", "p******o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v128, "pentelha", "p******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v129, "olhotas", "o*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "merdosos", "m******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v131, "merdosas", "m******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v132, "merdosa", "m*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v133, "grelos", "g****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v134, "grelo", "g***o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v135, "grelinhos", "g*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v136, "grelinho", "g******o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v137, "grelões", "g*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v138, "grelão", "g****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v139, "furnicou", "f******u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v140, "funicou", "f*****u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v141, "fudida", "f****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v142, "fudi", "f**i");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v143, "fudeu", "f***u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "fuderam", "f*****m");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v145, "fuder", "f***r");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v146, "fudedor", "f*****r");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v147, "fornicou", "f******u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "fornicar", "f******r");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v149, "fodi", "f**i");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v150, "fodeu", "f***u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v151, "foderam", "f*****m");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v152, "fodecao", "f*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v153, "fodeção", "f*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v154, "fodões", "f****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v155, "fodão", "f***o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v156, "fiofós", "f****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v157, "fiofó", "f***ó");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v158, "esporrou", "e******u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v159, "esporrados", "e********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v160, "esporradas", "e********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v161, "escrotos", "e******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v162, "escrotas", "e******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v163, "escrotíssimos", "e***********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v164, "enrabei", "e*****i");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v165, "embocetados", "e*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v166, "embocetado", "e********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v167, "embocetadas", "e*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v168, "embocetada", "e********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v169, "cuzudos", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v170, "cuzudas", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v171, "cuzinhos", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v172, "cuzões", "c****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v173, "cus", "c*s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v174, "curras", "c****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v175, "curradas", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v176, "curalhos", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v177, "cunilingus", "c********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v178, "cunilingua", "c********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v179, "ciriricas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v180, "chotas", "c****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v181, "chochotonas", "c*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v182, "chochotona", "c********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v183, "chochotas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v184, "chibungos", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v185, "chibungo", "c******o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v186, "chibumbos", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v187, "chibumbas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "cherecas", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v189, "chechecas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v190, "chavascas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v191, "chavasca", "c******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v192, "chaninhas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "chaninha", "c******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v194, "chanas", "c****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v195, "caralhudos", "c********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v196, "caralhos", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v197, "caralhões", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v198, "cagonas", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v199, "cagona", "c****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v200, "cagados", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v201, "cagadores", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "cagador", "c*****r");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v203, "cagaço", "c****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v204, "cagões", "c****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v205, "cabaçudos", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v206, "cabaçudas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v207, "cabaços", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v208, "buzanfas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v209, "buzanfa", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v210, "bussetas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v211, "bucetinhas", "b********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v212, "bucetas", "b*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v213, "bucetões", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v214, "buças", "b***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v215, "broxou", "b****u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v216, "broxei", "b****i");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v217, "broxasse", "b******e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v218, "broxados", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v219, "broxado", "b*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v220, "broxadas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v221, "broxada", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v222, "brochou", "b*****u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v223, "brochei", "b*****i");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v224, "brochados", "b*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v225, "brochado", "b******o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v226, "brochadas", "b*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v227, "brochada", "b******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v228, "brioquinhos", "b*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v229, "brioquinho", "b********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v230, "briocuzinhos", "b**********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v231, "briocuzinho", "b*********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v232, "briocozinhos", "b**********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v233, "briocozinho", "b*********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v234, "briocos", "b*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v235, "briocões", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v236, "briocão", "b*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v237, "bostonas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v238, "bostona", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v239, "bosteiros", "b*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v240, "bostas", "b****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v241, "bostadas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v242, "bostada", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v243, "bostões", "b*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v244, "bostão", "b****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v245, "boquetes", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v246, "boquete", "b*****e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v247, "boiolas", "b*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v248, "boioladas", "b*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v249, "boiolada", "b******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v250, "bocetinhas", "b********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v251, "bocetinha", "b*******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v252, "bocetas", "b*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v253, "boceta", "b****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v254, "bocetões", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v255, "bocetão", "b*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v256, "boazudas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v257, "boazuda", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v258, "bixonas", "b*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v259, "bixona", "b****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v260, "bixas", "b***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v261, "bimbas", "b****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v262, "bimbadas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v263, "bimba", "b***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v264, "bilauzinhos", "b*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v265, "bilauzinho", "b********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v266, "bilauzões", "b*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v267, "bilauzão", "b******o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v268, "bilaus", "b****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v269, "bichonas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v270, "bichona", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v271, "bichinhas", "b*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v272, "bichinha", "b******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v273, "bichas", "b****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v274, "baranguinhas", "b**********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v275, "baranguinha", "b*********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v276, "barangonas", "b********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v277, "barangona", "b*******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v278, "barangas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v279, "baranga", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v280, "baitolas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v281, "aviadados", "a*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v282, "aviadado", "a******o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v283, "autofelações", "a**********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v284, "autofelação", "a*********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v285, "abaitolados", "a*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v286, "abaitolado", "a********o");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_pt_BR(void)::sProfanityData_pt_BR, (uint64_t)v55, 0xE8uLL);
            for (m = 0; m != -1392; m -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v286[m]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_pt_BR(void)::sProfanityData_pt_BR, &dword_1BF794000);
          }
          *(_QWORD *)v4 = 0;
          *((_QWORD *)v4 + 1) = 0;
          *((_QWORD *)v4 + 2) = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, siri::dialogengine::GetProfanityFilter_pt_BR(void)::sProfanityData_pt_BR, *(uint64_t *)algn_1EF583090, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583090- siri::dialogengine::GetProfanityFilter_pt_BR(void)::sProfanityData_pt_BR) >> 4));
        }
        v17 = *v13;
        v18 = *((unsigned __int8 *)v13 + 4);
        if (v17 == 1214212218 && v18 == 75)
          return (uint64_t)siri::dialogengine::GetProfanityFilter_zh_HK(v4);
        if ((v5 & 0x80) == 0)
        {
          if (v5 != 5)
            goto LABEL_57;
LABEL_21:
          if (*(_DWORD *)v1 != 1130326138 || *(_BYTE *)(v1 + 4) != 78)
          {
            if (*(_DWORD *)v1 != 1415538810 || *(_BYTE *)(v1 + 4) != 87)
              goto LABEL_84;
            goto LABEL_142;
          }
LABEL_136:
          if ((v39 & 1) == 0
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v55, "鸡巴蛋", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v56, "鸡巴", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v57, "鸡巴", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v58, "骚逼", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v59, "阴道", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v60, "阴道", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v61, "阴茎", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v62, "阴茎", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v63, "阳萎", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v64, "阳具", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v65, "长成个逼样", "*****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v66, "迷奸", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v67, "轮奸", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v68, "贱B", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v69, "蠢货", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v70, "臭婊子", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v71, "肥尻", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v72, "肛交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v73, "肏", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v74, "肉洞", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v75, "肉棒", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v76, "肉棍", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v77, "粪便", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v78, "秃屌", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v79, "狗日的", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v80, "狗娘养的", "狗***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v81, "狗交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v82, "狗B", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v83, "爆菊花", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v84, "混蛋", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v85, "滚你娘的逼", "*****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v86, "深喉", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v87, "日你龟儿子", "*****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v88, "日你妈的", "***的");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v89, "日你妈", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v90, "日你", "*你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v91, "操逼", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v92, "操死", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v93, "操我", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v94, "操你屁眼", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[7],0>(v95, "操你娘老鸡巴", "******");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v96, "操你娘", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v97, "操你姥姥", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v98, "操你妹", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v99, "操你妈的逼", "*****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(v100, "操你妈的大鸡巴", "*******");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[5],0>(v101, "操你妈的B", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v102, "操你妈", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v103, "操你大爷", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v104, "操你", "*你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v105, "操他妈", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v106, "操B", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v107, "操", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v108, "插死你", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v109, "插我", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v110, "插她", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v111, "插你", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v112, "插他", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v113, "捅我", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v114, "捅你", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v115, "我靠你老娘", "我****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v116, "我靠", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v117, "我日", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v118, "我操", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v119, "性奴", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v120, "幼交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v121, "干你娘的", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v122, "干你妈", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v123, "屌你老妈", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v124, "屌", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v125, "屄缝", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v126, "屄", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v127, "屁眼", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v128, "射精", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v129, "嫩逼", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v130, "婊子", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v131, "姦童", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v132, "妓女", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v133, "奸虐", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v134, "奸尸", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v135, "吮吸阴茎", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v136, "后背体位", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(v137, "叼你妈的小屁屁", "*******");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v138, "口交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v139, "勃起", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v140, "兽交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v141, "傻逼", "傻*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v142, "傻屄", "傻*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v143, "傻B", "傻*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v144, "你妈逼", "你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v145, "你妈的逼", "你***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v146, "你妈的屄", "你***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v147, "他媽", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v148, "他妈的", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v149, "他妈", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v150, "乳房性交", "****");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_zh_CN(void)::sProfanityData_zh_CN, (uint64_t)v55, 0x60uLL);
            for (n = 0; n != -576; n -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v150[n]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_zh_CN(void)::sProfanityData_zh_CN, &dword_1BF794000);
          }
          *(_QWORD *)v4 = 0;
          *((_QWORD *)v4 + 1) = 0;
          *((_QWORD *)v4 + 2) = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, siri::dialogengine::GetProfanityFilter_zh_CN(void)::sProfanityData_zh_CN, *(uint64_t *)algn_1EF5830D0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF5830D0- siri::dialogengine::GetProfanityFilter_zh_CN(void)::sProfanityData_zh_CN) >> 4));
        }
      }
      if (*(_QWORD *)(v1 + 8) != 5
        || (**(_DWORD **)v1 == 1130326138 ? (v24 = *(_BYTE *)(*(_QWORD *)v1 + 4) == 78) : (v24 = 0), !v24))
      {
        if (*(_QWORD *)(v1 + 8) == 5)
        {
          if (**(_DWORD **)v1 == 1415538810 && *(_BYTE *)(*(_QWORD *)v1 + 4) == 87)
          {
LABEL_142:
            if ((v42 & 1) == 0
            {
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v55, "shit", "s**t");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v56, "motherfucking", "m*********ing");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v57, "motherfucker", "m*********er");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v58, "motherfuck", "m********k");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v59, "fucks", "f**ks");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v60, "fucking", "f***ing");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v61, "fuckin", "f****n");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v62, "fuck", "f**k");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "bullshit", "b******t");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "blowjob", "b*****b");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v65, "bitch", "b***h");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v66, "asshole", "a*****e");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v67, "龜公", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v68, "龜兒子", "龜**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v69, "黑鬼", "黑*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v70, "鬼子", "*子");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v71, "駛恁娘", "駛**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v72, "馬的", "*的");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v73, "顏射", "顏*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v74, "韓狗", "韓*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v75, "靠腰", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v76, "靠背", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v77, "靠夭", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v78, "靠卑", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v79, "靠北", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v80, "雞歪", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v81, "雞掰", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v82, "雞巴", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v83, "雞八", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v84, "趕羚羊", "趕**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v85, "賽羚羊", "賽**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v86, "賤人", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v87, "該死", "該*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v88, "草枝擺", "草**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v89, "臭雞掰", "臭**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v90, "肚爛", "肚*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v91, "老雞排", "老**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v92, "老目", "老*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v93, "老母", "老*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v94, "老木", "老*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v95, "破麻", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v96, "白鬼", "白*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v97, "畜生", "*生");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v98, "王八蛋", "王**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v99, "王八", "王*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v100, "狗屎", "狗*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v101, "狗屁", "狗*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v102, "狗娘", "狗*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v103, "混蛋", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v104, "混帳", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v105, "洋鬼子", "洋**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v106, "母狗", "*狗");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v107, "死泡菜", "**菜");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v108, "機掰", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v109, "機巴", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v110, "機八", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v111, "日本鬼子", "日本**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v112, "操俗揦", "操**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[7],0>(v113, "操你媽的B", "操***");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v114, "操你", "*你");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v115, "打飛機", "打**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v116, "打炮", "打*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v117, "打泡", "打*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v118, "打手槍", "打**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v119, "我靠", "我*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v120, "我操", "我*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v121, "懶趴", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v122, "懶叫", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v123, "恁娘卡好", "恁***");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v124, "幹林", "*林");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v125, "幹恁老母", "幹***");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v126, "幹恁老師", "幹***");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v127, "幹恁娘", "幹**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v128, "幹你老師", "幹***");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v129, "幹你娘", "幹**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v130, "幹你", "*你");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v131, "幹他", "*他");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v132, "屌", "*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v133, "屄", "*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v134, "屁眼", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v135, "尻", "*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v136, "射精", "射*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v137, "媽的", "*的");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v138, "婊子", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v139, "嘰歪", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v140, "唧唧歪歪", "****");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v141, "哭爸", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v142, "哭夭", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v143, "吹簫", "吹*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v144, "吞精", "吞*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[2],0>(v145, "吃屎", "*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[2],0>(v146, "吃屌", "*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v147, "吃大便", "吃**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v148, "口爆", "口*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v149, "口交", "口*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v150, "去死", "去*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v151, "去你的", "去**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v152, "北嘛", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v153, "北七", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v154, "內射", "內*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v155, "你老母", "你**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v156, "他馬的", "他*的");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v157, "他祖宗", "他**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v158, "他媽的", "他**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v159, "他媽的", "他*的");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v160, "他姥姥", "他**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v161, "他奶奶的", "他***");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v162, "他奶奶", "他**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v163, "下賤", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v164, "下地獄", "下**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v165, "三小", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v166, "㩕老師", "*老師");
              std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_zh_TW(void)::sProfanityData_zh_TW, (uint64_t)v55, 0x70uLL);
              for (ii = 0; ii != -672; ii -= 6)
                std::pair<std::string const,std::string>::~pair((uint64_t)&v166[ii]);
              __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_zh_TW(void)::sProfanityData_zh_TW, &dword_1BF794000);
            }
            *(_QWORD *)v4 = 0;
            *((_QWORD *)v4 + 1) = 0;
            *((_QWORD *)v4 + 2) = 0;
            return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, siri::dialogengine::GetProfanityFilter_zh_TW(void)::sProfanityData_zh_TW, *(uint64_t *)algn_1EF5830F0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF5830F0- siri::dialogengine::GetProfanityFilter_zh_TW(void)::sProfanityData_zh_TW) >> 4));
          }
          if ((v5 & 0x80) == 0)
          {
            if (v5 != 5)
              goto LABEL_57;
LABEL_84:
            if (*(_DWORD *)v1 != 1096774241 || *(_BYTE *)(v1 + 4) != 69)
            {
              v27 = *(_DWORD *)v1 == 1113549934 && *(_BYTE *)(v1 + 4) == 69;
              v28 = v1;
              if (!v27)
              {
LABEL_128:
                v36 = *(_DWORD *)v28;
                v37 = *(unsigned __int8 *)(v28 + 4);
                if (v36 == 1314876526 && v37 == 76)
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_nl_NL(v4);
LABEL_57:
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v1, "de_CH"))
                {
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_de_CH(v4);
                }
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "de_AT"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_de_AT(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "de_DE"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_de_DE(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fr_BE"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_fr_BE(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fr_CA"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_fr_CA(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "es_US"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_es_US(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "es_MX"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_es_MX(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "es_ES"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_es_ES(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "es_CL"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_es_CL(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_US"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_en_US(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_NZ"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_en_NZ(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_IN"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_en_IN(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_CA"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_en_CA(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_ZA"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_en_ZA(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_SG"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_en_SG(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_GB"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_en_GB(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_AU"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_en_AU(v4);
                result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_IE");
                if ((_DWORD)result)
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_en_IE(v4);
LABEL_272:
                *(_QWORD *)v4 = 0;
                *((_QWORD *)v4 + 1) = 0;
                *((_QWORD *)v4 + 2) = 0;
                return result;
              }
              goto LABEL_149;
            }
            return (uint64_t)siri::dialogengine::GetProfanityFilter_ar_AE(v4);
          }
        }
        if (*(_QWORD *)(v1 + 8) != 5
          || (**(_DWORD **)v1 == 1096774241 ? (v33 = *(_BYTE *)(*(_QWORD *)v1 + 4) == 69) : (v33 = 0), !v33))
        {
          if (*(_QWORD *)(v1 + 8) == 5)
          {
            if (**(_DWORD **)v1 == 1113549934 && *(_BYTE *)(*(_QWORD *)v1 + 4) == 69)
            {
LABEL_149:
              if ((v43 & 1) == 0
              {
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v55, "zweetreten", "z********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v56, "zweetreetjes", "z**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v57, "zweetreetje", "z*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v58, "zweetreet", "z*******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v59, "zweefteven", "z********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v60, "zweefteefjes", "z**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v61, "zweefteefje", "z*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v62, "zweefteef", "z*******f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v63, "zuigzeugjes", "z*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v64, "zuigzeugje", "z********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v65, "zuigzeugen", "z********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v66, "zuigzeug", "z******g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v67, "zeikwijven", "z********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "zeikwijf", "z******f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v69, "zeiker", "z****r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v70, "wippen", "w****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v71, "wipkippetjes", "w**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v72, "wipkippetje", "w*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v73, "wipkippen", "w*******n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "wipkip", "w****p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v75, "websletten", "w********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v76, "websletjes", "w********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v77, "websletje", "w*******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v78, "webslet", "w*****t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v79, "vortzakskes", "v**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v80, "vortzakske", "v*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v81, "vortzakken", "v********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v82, "vortzakjes", "v********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v83, "vortzakje", "v*******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "vortzak", "v*****k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v85, "turbotrutten", "t**********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v86, "turbotrutjes", "t**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v87, "turbotrutje", "t*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "turbotrut", "t*******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v89, "turboteven", "t********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v90, "turboteefjes", "t**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v91, "turboteefje", "t*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v92, "turboteef", "t*******f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v93, "turbokutten", "t*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v94, "turbokutjes", "t*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v95, "turbokutje", "t********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v96, "turbokut", "t******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v97, "torenpoepsters", "t************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v98, "torenpoepster", "t***********r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v99, "torenpoepers", "t**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v100, "torenpoeper", "t*********r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v101, "tieten", "t****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v102, "teven", "t***n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v103, "tettenkoppen", "t**********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v104, "tettenkopjes", "t**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v105, "tettenkopje", "t*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v106, "tettenkop", "t*******p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "tetten", "t****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v108, "tettekoppen", "t*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v109, "tettekopjes", "t*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v110, "tettekopje", "t********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v111, "tettekop", "t******p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v112, "tetjes", "t****s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v113, "tetje", "t***e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v114, "tet", "t*t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v115, "teringtubby’s", "t***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v116, "teringtubby", "t*********y");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v117, "teringtubbietjes", "t**************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v118, "teringtubbietje", "t*************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v119, "tentsletten", "t*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v120, "tentsletjes", "t*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v121, "tentsletje", "t********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v122, "tentslet", "t******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v123, "takkewijven", "t*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v124, "strandjanetten", "s************n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v125, "strandjanetjes", "s************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v126, "strandjanetje", "s***********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v127, "strandjanet", "s*********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v128, "sopkutten", "s*******n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v129, "sopkutjes", "s*******s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "sopkutje", "s******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v131, "sopkut", "s****t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "sloeries", "s******s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v133, "slobberkutten", "s***********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v134, "slobberkutjes", "s***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v135, "slobberkutje", "s**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v136, "slobberkut", "s********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v137, "schimmelfoefjes", "s*************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v138, "schimmelfoefje", "s************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v139, "schimmelfoefen", "s************n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v140, "schimmelfoef", "s**********f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v141, "schijtluizen", "s**********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v142, "schijtluis", "s********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v143, "schijterij", "s********j");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v144, "scheefpoepers", "s***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v145, "scheefpoeperij", "s************j");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v146, "scheefpoeper", "s**********r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v147, "scheefpoepen", "s**********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v148, "scheefgepoepte", "s************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v149, "scheefgepoept", "s***********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v150, "scheefgeneukte", "s************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v151, "scheefgeneukt", "s***********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v152, "rotzakskes", "r********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v153, "rotzakske", "r*******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v154, "rotzakken", "r*******n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v155, "rotzakjes", "r*******s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v156, "rotzakje", "r*****e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v157, "rotzak", "r****k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v158, "rondpoepen", "r********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v159, "rondgepoept", "r*********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v160, "reteskevertjes", "r***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v161, "retekevertje", "r**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v162, "retekevers", "r********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v163, "retekever", "r*******r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v164, "reetkevertjes", "r***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v165, "reetkevertje", "r**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v166, "reetkevers", "r********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v167, "reetkever", "r*******r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v168, "puddinglulletjes", "p**************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v169, "puddinglulletje", "p*************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v170, "puddinglullen", "p***********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v171, "puddinglul", "p********l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v172, "pruttelkutten", "p***********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v173, "pruttelkutjes", "p***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v174, "pruttelkutje", "p**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v175, "pruttelkut", "p********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v176, "ponylulletjes", "p***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v177, "ponylulletje", "p**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v178, "ponylullen", "p********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v179, "ponylul", "p*****l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v180, "pijpmuiltjes", "p**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v181, "pijpmuiltje", "p*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v182, "pijpmuilen", "p********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v183, "pijpmuil", "p******l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v184, "mierenneukertjes", "m**************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v185, "mierenneukertje", "m*************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v186, "mierenneuker", "m**********r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v187, "miereneukers", "m***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "makakken", "m******n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v189, "makakjes", "m******s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v190, "makakje", "m*****e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v191, "makak", "m***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v192, "loezen", "l****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v193, "kuttenkoppen", "k*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v194, "kuttenkopjes", "k*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v195, "kuttenkopje", "k*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v196, "kuttenkop", "k*******p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v197, "kuttekoppen", "k********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v198, "kuttekopjes", "k*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v199, "kuttekopje", "k********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v200, "kuttekop", "k******p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v201, "kutkopjes", "k*******s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v202, "kutkopje", "k******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v203, "kutkop", "k****p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v204, "klotewijven", "k*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v205, "klotewijf", "k*******f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v206, "kloteventjes", "k**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v207, "kloteventje", "k*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v208, "kloteventen", "k*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v209, "klotevent", "k*******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v210, "kinderporno", "k*********o");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v211, "kakmadammetjes", "k*************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v212, "kakmadammetje", "k***********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v213, "kakmadammen", "k*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v214, "kakmadammekes", "k***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v215, "kakmadammeke", "k**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v216, "kakmadam", "k******m");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v217, "kakkers", "k*****s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v218, "kakker", "k****r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v219, "hoererij", "h******j");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v220, "hoererige", "h*******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v221, "hoererig", "h******g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v222, "gepoepte", "g******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v223, "gepoept", "g*****t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v224, "gepoep", "g****p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v225, "foorwijven", "f********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v226, "foorwijf", "f******f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v227, "foefkoppen", "f********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v228, "foefkop", "f****p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v229, "foefen", "f****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v230, "foef", "f**f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v231, "droogneukertjes", "d*************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v232, "droogneukertje", "d************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v233, "droogneukers", "d**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v234, "droogneukerij", "d***********j");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v235, "droogneuker", "d*********r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v236, "droogneuken", "d*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v237, "droogkloten", "d*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v238, "droogkloot", "d********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v239, "drooggeneukt", "d**********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v240, "darmtoeristjes", "d************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v241, "darmtoeristje", "d***********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v242, "darmtoeristen", "d***********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v243, "darmtoerist", "d*********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v244, "bospoepers", "b********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v245, "bospoeperkes", "b**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v246, "bospoeperke", "b*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v247, "bospoeper", "b*******r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v248, "boskakkertjes", "b***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v249, "boskakkertje", "b**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v250, "boskakkers", "b********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v251, "boskakker", "b*******r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v252, "boshoertjes", "b*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v253, "boshoertje", "b********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v254, "boshoeren", "b*******n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v255, "boshoer", "b*****r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v256, "befkonijntjes", "b***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v257, "befkonijntje", "b**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v258, "befkonijnen", "b*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v259, "befkonijn", "b*******n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v260, "assenpoepsters", "a************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v261, "assenpoepster", "a***********r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v262, "aarsgeweien", "a*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v263, "aarsgewei", "a*******i");
                std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_nl_BE(void)::sProfanityData_nl_BE, (uint64_t)v55, 0xD1uLL);
                for (jj = 0; jj != -1254; jj -= 6)
                  std::pair<std::string const,std::string>::~pair((uint64_t)&v263[jj]);
                __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_nl_BE(void)::sProfanityData_nl_BE, &dword_1BF794000);
              }
              *(_QWORD *)v4 = 0;
              *((_QWORD *)v4 + 1) = 0;
              *((_QWORD *)v4 + 2) = 0;
              return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, siri::dialogengine::GetProfanityFilter_nl_BE(void)::sProfanityData_nl_BE, *(uint64_t *)algn_1EF583130, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF583130- siri::dialogengine::GetProfanityFilter_nl_BE(void)::sProfanityData_nl_BE) >> 4));
            }
            if ((v5 & 0x80) == 0)
            {
              v28 = v1;
              if (v5 != 5)
                goto LABEL_57;
              goto LABEL_128;
            }
          }
          if (*(_QWORD *)(v1 + 8) != 5)
            goto LABEL_57;
          v28 = *(_QWORD *)v1;
          goto LABEL_128;
        }
        return (uint64_t)siri::dialogengine::GetProfanityFilter_ar_AE(v4);
      }
      goto LABEL_136;
    }
    v30 = *(_WORD **)v1;
    if (**(_WORD **)v1 != 27507)
    {
      if (*v30 != 27760)
      {
        if (*v30 != 26998)
        {
          if (*v30 != 30323)
          {
            if (*v30 != 25960)
            {
              if ((v5 & 0x80) != 0)
              {
                if (*(_QWORD *)(v1 + 8) != 2 || **(_WORD **)v1 != 29549)
                {
                  if (*(_QWORD *)(v1 + 8) != 2)
                    goto LABEL_161;
                  v22 = *(_WORD **)v1;
                  goto LABEL_160;
                }
                goto LABEL_163;
              }
              if (v5 != 2)
                goto LABEL_161;
LABEL_66:
              if (*(_WORD *)v1 != 29549)
              {
                v22 = (_WORD *)v1;
LABEL_160:
                if (*v22 == 24932)
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_da(v4);
LABEL_161:
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v1, "ja"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_ja(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "el"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_el(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "it"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_it(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ca"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_ca(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "cs"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_cs(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ru"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_ru(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ro"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_ro(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "pt"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_pt(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "uk"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_uk(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ar"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_ar(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "hr"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_hr(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "hu"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_hu(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "nl"))
                  return siri::dialogengine::GetProfanityFilter_nl(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "nb"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_nb(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "hi"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_hi(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "de"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_de(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ko"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_ko(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fi"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_fi(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "id"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_id(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fr"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_fr(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_en(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "th"))
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_th(v4);
                result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "tr");
                if ((_DWORD)result)
                  return (uint64_t)siri::dialogengine::GetProfanityFilter_tr(v4);
                goto LABEL_272;
              }
LABEL_163:
              if ((v44 & 1) == 0
              {
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v55, "tetek senget", "t***k senget");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v56, "tetek menglebeh", "t***k menglebeh");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "tetek", "t***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v58, "telur loyot", "t***r l***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v59, "sundal", "s****l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v60, "sial", "s**l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v61, "puting lendir", "p****g lendir");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "pundek", "p****k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v63, "pukimak", "p*****k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "puki mak", "p*** **k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v65, "puki busuk", "p*** busuk");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v66, "puki basi", "p*** basi");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v67, "puki babi", "p*** b**i");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v68, "puki anjing", "p*** anjing");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v69, "puki", "p***");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v70, "pergi mampus", "pergi m****s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v71, "pepek daki", "p***k d**i");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v72, "pepek", "p***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v73, "pelir mamak", "p***r m***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v74, "pelir", "p***r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v75, "peler", "p***r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v76, "pantat berserabai", "p****t b********i");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "pantat", "p****t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v78, "palat", "p***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v79, "nonok", "n***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v80, "ne-nen", "n****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v81, "melancap", "m******p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v82, "mangkuk hayun", "mangkuk h***n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v83, "mangkuk hanyun", "mangkuk h****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v84, "lanchiau", "l******u");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "lancap", "l****p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v86, "lahanat", "l*****t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v87, "kulum kote", "k***m k**e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v88, "kulum", "k***m");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v89, "kote neraka", "k**e n****a");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v90, "kote", "k**e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v91, "kongkek", "k*****k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v92, "konek gajus", "k***k g***s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v93, "konek babi", "k***k b**i");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v94, "konek", "k***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v95, "keting", "k****g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v96, "kepala butto", "kepala b***o");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v97, "kepala butoh", "kepala b***h");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v98, "kepala bana", "kepala b**a");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v99, "kelentit", "k******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v100, "jilat totok", "j***t t***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v101, "jilat tonton", "j***t t****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v102, "jilat puki", "j***t p***");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v103, "jilat nonok", "j***t n***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v104, "jilat lubang puki", "j***t l****g p***");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v105, "jilat jubur", "j***t j***r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v106, "jantan sial", "j****n s**l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "jalang", "j****g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v108, "isap kote kuda", "i**p k**e kuda");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v109, "isap kote anjing", "i**p k**e anjing");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v110, "hisap telur", "h***p t***r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v111, "hisap konek", "h***p k***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v112, "haram jadah", "h***m j***h");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v113, "gatal burit", "g***l b***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v114, "cipap", "c***p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v115, "cibai", "c***i");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v116, "butuh tua", "b***h tua");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v117, "butuh", "b***h");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v118, "butu buruk", "b**u buruk");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v119, "butoh pak hang", "b***h pak hang");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v120, "butoh", "b***h");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v121, "burit lebeh", "b***t l***h");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v122, "burit", "b***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v123, "bijik tersentil", "b***k t*******l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v124, "bijik panjang", "b***k p*****g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v125, "bijik kelentit", "b***k k******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v126, "bijik hang", "b***k h**g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v127, "bijik gatal", "b***k g***l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v128, "barua", "b****");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v129, "bapakmu telur kecut", "bapakmu t***r k***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v130, "bapak telur kecut", "bapak t***r k***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v131, "bahlul", "b****l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v132, "anak luar nikah", "anak l**r n***h");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v133, "anak haram", "anak h***m");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v134, "anak gampang", "anak g*****g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v135, "aku henjut mak", "aku h****t mak");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[22],0>(v136, "Bapak kau telur kecut", "bapak kau t***r k***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v137, "Bapak kamu telur kecut", "bapak kamu t***r k***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v138, "Bapak awak telur kecut", "bapak awak t***r k***t");
                std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_ms(void)::sProfanityData_ms, (uint64_t)v55, 0x54uLL);
                for (kk = 498; kk != -6; kk -= 6)
                  std::pair<std::string const,std::string>::~pair((uint64_t)&v55[kk]);
                __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_ms(void)::sProfanityData_ms, &dword_1BF794000);
              }
              *(_QWORD *)v4 = 0;
              *((_QWORD *)v4 + 1) = 0;
              *((_QWORD *)v4 + 2) = 0;
              return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, siri::dialogengine::GetProfanityFilter_ms(void)::sProfanityData_ms, *(uint64_t *)algn_1EF582D30, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582D30- siri::dialogengine::GetProfanityFilter_ms(void)::sProfanityData_ms) >> 4));
            }
            return (uint64_t)siri::dialogengine::GetProfanityFilter_he(v4);
          }
          return (uint64_t)siri::dialogengine::GetProfanityFilter_sv(v4);
        }
        goto LABEL_138;
      }
      return (uint64_t)siri::dialogengine::GetProfanityFilter_pl(v4);
    }
  }
  else
  {
    if (v5 != 2)
    {
      if (v5 != 3)
      {
        if (v5 != 5)
          goto LABEL_57;
        if (*(_DWORD *)v1 != 1230992489 || *(_BYTE *)(v1 + 4) != 84)
        {
          if (*(_DWORD *)v1 != 1348433008 || *(_BYTE *)(v1 + 4) != 84)
          {
            if (*(_DWORD *)v1 != 1113551984 || *(_BYTE *)(v1 + 4) != 82)
            {
              if (*(_DWORD *)v1 != 1214212218 || *(_BYTE *)(v1 + 4) != 75)
                goto LABEL_21;
              return (uint64_t)siri::dialogengine::GetProfanityFilter_zh_HK(v4);
            }
            goto LABEL_140;
          }
          goto LABEL_124;
        }
        goto LABEL_106;
      }
      if (*(_WORD *)v1 != 30073 || *(_BYTE *)(v1 + 2) != 101)
        goto LABEL_57;
      goto LABEL_94;
    }
    if (*(_WORD *)v1 != 27507)
    {
      if (*(_WORD *)v1 != 27760)
      {
        if (*(_WORD *)v1 != 26998)
        {
          if (*(_WORD *)v1 != 30323)
          {
            if (*(_WORD *)v1 != 25960)
              goto LABEL_66;
            return (uint64_t)siri::dialogengine::GetProfanityFilter_he(v4);
          }
          return (uint64_t)siri::dialogengine::GetProfanityFilter_sv(v4);
        }
LABEL_138:
        if ((v40 & 1) == 0
        {
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v55, "nứng", "n**g");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v56, "lồn", "l*n");
          std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_vi(void)::sProfanityData_vi, (uint64_t)v55, 2uLL);
          for (mm = 6; mm != -6; mm -= 6)
            std::pair<std::string const,std::string>::~pair((uint64_t)&v55[mm]);
          __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_vi(void)::sProfanityData_vi, &dword_1BF794000);
        }
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
        return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, siri::dialogengine::GetProfanityFilter_vi(void)::sProfanityData_vi, *(uint64_t *)algn_1EF582CD0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582CD0- siri::dialogengine::GetProfanityFilter_vi(void)::sProfanityData_vi) >> 4));
      }
      return (uint64_t)siri::dialogengine::GetProfanityFilter_pl(v4);
    }
  }
  if ((v31 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v55, "šukanie", "š*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v56, "čurák", "č***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "zmrdi", "z***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v58, "zmrda", "z***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v59, "zmrd", "z**d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v60, "zhovadilosti", "z**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v61, "zdebilieva", "z********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "zblbol", "z****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "zasranov", "z******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "zasrani", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v65, "zaprdenom", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v66, "vysral", "v****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v67, "vyserte", "v*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "vyseriem", "v******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v69, "vyserie", "v*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v70, "vyjeb", "v***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v71, "vydrbe", "v****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "vydrbali", "v******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v73, "tupcov", "t****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "tupcom", "t****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v75, "trtkať", "t****ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v76, "trtkačka", "t******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v77, "svinstvách", "s********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v78, "svinstvá", "s******á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v79, "svinstve", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v80, "svinstva", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v81, "svinstiev", "s*******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "sviniar", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v83, "superblbec", "s********c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v84, "suky", "s**y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v85, "suka", "s**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v86, "sráčmi", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v87, "srať", "s**ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v88, "sračkách", "s******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v89, "sračky", "s****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v90, "sračku", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v91, "sračiek", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v92, "sranie", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v93, "srací", "s***í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v94, "sprostú", "s*****ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "sprostí", "s*****í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v96, "sprostého", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v97, "sprostou", "s******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v98, "sprostota", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v99, "sprostosti", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "sprosto", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v101, "sprostejšie", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v102, "sprostej", "s******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v103, "sproste", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v104, "skurveny", "s******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v105, "skurvene", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v106, "skurvena", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "seriem", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "serete", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v109, "serem", "s***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v110, "rozjebal", "r******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v111, "rozjeb", "r****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v112, "riť", "r*ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "ritiek", "r****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v114, "prďúsov", "p*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v115, "prďúsi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v116, "prúseroch", "p*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v117, "prúser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v118, "pruser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v119, "priblbo", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v120, "priblblých", "p********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v121, "priblblé", "p******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v122, "presrali", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v123, "presral", "p*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "posrať", "p****ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v125, "posralo", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v126, "posrala", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "poserieš", "p******š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v128, "poser", "p***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v129, "pojeb", "p***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v130, "pičovina", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v131, "pičný", "p***ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v132, "pičisko", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v133, "piča", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v134, "osraným", "o*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v135, "ojeb", "o**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v136, "odrbávať", "o******ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v137, "odrbáva", "o*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v138, "odrbe", "o***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v139, "odrbať", "o****ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v140, "odrbal", "o****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v141, "odjeb", "o***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v142, "nesralo", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v143, "nesrali", "n*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "neserú", "n****ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v145, "neser", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v146, "neposer", "n*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "neodrbeš", "n******š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v148, "neodrbe", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v149, "nenasral", "n******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v150, "nekurvím", "n******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "negrov", "n****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v152, "negrom", "n****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v153, "nasrať", "n****ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v154, "nasratý", "n*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v155, "nasraté", "n*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v156, "nasratosti", "n********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v157, "nasraný", "n*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v158, "nasrané", "n*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v159, "nasralo", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v160, "nasrali", "n*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v161, "nasral", "n****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v162, "nasieral", "n******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v163, "naserie", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v164, "naprd", "n***d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v165, "nahovno", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v166, "mrdnutím", "m******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v167, "lesieb", "l****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v168, "lesba", "l***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v169, "kurvy", "k***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v170, "kurva", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v171, "kurevsky", "k******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v172, "kravín", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v173, "kraviny", "k*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v174, "kokotsky", "k******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v175, "kokotiny", "k******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v176, "kokotina", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v177, "kokot", "k***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v178, "jebák", "j***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v179, "jebo", "j**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v180, "jebnutom", "j******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v181, "jeblina", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v182, "jebe", "j**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v183, "jebať", "j***ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v184, "jebačka", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v185, "jebal", "j***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v186, "jeb", "j*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v187, "hovná", "h***á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "hovnová", "h*****á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v189, "hovno", "h***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v190, "hovna", "h***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v191, "hovienko", "h******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v192, "hovadinku", "h*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "hovadine", "h******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v194, "hovadina", "h******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v195, "hajzlíky", "h******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v196, "hajzlík", "h*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v197, "hajzlom", "h*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v198, "hajzli", "h****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v199, "hajzle", "h****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v200, "hajzel", "h****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v201, "drbnúť", "d****ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v202, "dodrbávanie", "d*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v203, "dodrbe", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v204, "dodrbal", "d*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v205, "dilino", "d****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v206, "dilinko", "d*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v207, "dementovi", "d*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v208, "dementov", "d******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v209, "dementný", "d******ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v210, "dementne", "d******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v211, "dementi", "d*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v212, "dementa", "d*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v213, "degeši", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v214, "degeš", "d***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v215, "debilov", "d*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v216, "debilom", "d*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v217, "debilný", "d*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v218, "debilné", "d*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v219, "debilne", "d*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v220, "debilku", "d*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v221, "debilkov", "d******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v222, "debilko", "d*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v223, "debilitou", "d*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v224, "debili", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v225, "debil", "d***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v226, "chujovina", "c*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v227, "chujovi", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v228, "chuji", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v229, "buzna", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v230, "buzerantovi", "b*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v231, "buzerantov", "b********v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v232, "buzerantom", "b********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v233, "buzerant", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v234, "blbými", "b****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v235, "blbý", "b**ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v236, "blbú", "b**ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v237, "blbí", "b**í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v238, "blbé", "b**é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v239, "blbosťou", "b******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v240, "blbom", "b***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v241, "blbne", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v242, "blbiny", "b****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v243, "blbej", "b***j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v244, "blbcoch", "b*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v245, "blbcami", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v246, "bastardoch", "b********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v247, "bastarda", "b******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v248, "bastard", "b*****d");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_sk(void)::sProfanityData_sk, (uint64_t)v55, 0xC2uLL);
    for (nn = 0; nn != -1164; nn -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v248[nn]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_sk(void)::sProfanityData_sk, &dword_1BF794000);
  }
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, siri::dialogengine::GetProfanityFilter_sk(void)::sProfanityData_sk, *(uint64_t *)algn_1EF582C90, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582C90 - siri::dialogengine::GetProfanityFilter_sk(void)::sProfanityData_sk) >> 4));
}

void sub_1BFB2E7D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 3984; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_pl(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v419[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v5, "zjebie", "z****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "zjebany", "z*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v7, "zjeb", "z**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "zesrasz", "z*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "zesrali", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v10, "zesrają", "z*****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v11, "zesrały", "z*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v12, "zesrało", "z*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v13, "zesrałbyś", "z*******ś");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v14, "zesrała", "z*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "zesrał", "z****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v16, "zasranymi", "z*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v17, "zasranych", "z*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "zasrany", "z*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "zasrani", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v20, "zasranej", "z******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v21, "zasranego", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v22, "zasrane", "z*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v23, "zasraną", "z*****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v24, "zasrańcu", "z******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v25, "zasrańcom", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v26, "zasrańce", "z******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v27, "zasrańca", "z******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v28, "zasra", "z***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v29, "zapierniczać", "z**********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v30, "zapierdzielaj", "z***********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v31, "zapierdzielać", "z***********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v32, "zapierdziel", "z*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v33, "zapierdoli", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v34, "zapierdol", "z*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v35, "zapierdalaj", "z*********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v36, "zapierdala", "z********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v37, "zapieprzasz", "z*********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v38, "zapieprzają", "z*********ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v39, "zapieprzać", "z********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v40, "zapieprza", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v41, "zajebistym", "z********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "zajebisty", "z*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v43, "zajebistość", "z*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v44, "zajebistego", "z*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v45, "zajebiste", "z*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v46, "zajebista", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v47, "zajebiesz", "z*******z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v48, "zajebiście", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v49, "zajebałem", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "zajebał", "z*****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v51, "zajebać", "z*****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v52, "zajeb", "z***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v53, "wysrać", "w****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v54, "wyruchana", "w*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v55, "wyrucham", "w******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v56, "wyruchali", "w*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v57, "wyruchałby", "w********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v58, "wyruchał", "w******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v59, "wyrucha", "w*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v60, "wypierdzielone", "w************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v61, "wypierdolona", "w**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v62, "wypierdolili", "w**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v63, "wypierdolił", "w*********ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v64, "wypierdol", "w*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v65, "wypierdalania", "w***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v66, "wypierdalam", "w*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v67, "wypierdalaj", "w*********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v68, "wypierdalać", "w*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v69, "wypieprzyć", "w********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v70, "wypieprzeniu", "w**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v71, "wypieprza", "w*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "wyjebane", "w******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "wyjebać", "w*****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v74, "wydymany", "w******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v75, "wydymaniu", "w*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v76, "wydymanie", "w*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "wydymana", "w******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v78, "wydymać", "w*****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v79, "wpiernicz", "w*******z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v80, "wpierdzieli", "w*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v81, "wpierdziela", "w*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v82, "wpierdol", "w******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v83, "wpierdalają", "w*********ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v84, "wpierdala", "w*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v85, "wpieprzył", "w*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v86, "wpieprzyć", "w*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v87, "wpieprzają", "w********ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "wkurwiony", "w*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v89, "wkurwionego", "w*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v90, "wkurwili", "w******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v91, "wkurwienie", "w********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v92, "wkurwiam", "w******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v93, "wkurwiali", "w*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v94, "wkurwiającego", "w***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v95, "wkurwiacie", "w********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v96, "wkurwia", "w*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v97, "wkurwiłem", "w*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v98, "wkurwić", "w*****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v99, "wkurw", "w***w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "wjebany", "w*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v101, "wjebał", "w****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v102, "upierdolony", "u*********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v103, "szczy", "s***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v104, "szczochach", "s********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v105, "szczochów", "s*******w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v106, "szczanie", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "szczam", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v108, "szczała", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v109, "szczał", "s****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "szczać", "s****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v111, "szcza", "s***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v112, "szczące", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "szczą", "s***ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v114, "srasz", "s***z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v115, "sraniem", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v116, "sranie", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v117, "srania", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "sranego", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v119, "sram", "s**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v120, "srali", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v121, "sraki", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v122, "srakę", "s***ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v123, "srak", "s**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v124, "srajtaśma", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v125, "srających", "s*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v126, "srający", "s*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v127, "srające", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v128, "srają", "s***ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "sraczy", "s****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v130, "sracze", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v131, "sraczce", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "sraczach", "s******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v133, "sracza", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v134, "sracz", "s***z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v135, "sracie", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v136, "srał", "s**ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v137, "srać", "s**ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v138, "sra", "s*a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v139, "spierdzielaj", "s**********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v140, "spierdział", "s********ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v141, "spierdol", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v142, "spierdalaliście", "s*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v143, "spierdalaj", "s********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v144, "spierdala", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v145, "spieprzaj", "s*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v146, "skurwysyny", "s********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v147, "skurwysynu", "s********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v148, "skurwysynom", "s*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v149, "skurwysynie", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v150, "skurwysynem", "s*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v151, "skurwysynami", "s**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v152, "skurwysyna", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v153, "skurwysynów", "s*********w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v154, "skurwysyn", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v155, "skurwieni", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v156, "skurwił", "s*****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v157, "skurwi", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v158, "ruchasz", "r*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v159, "ruchanie", "r******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v160, "ruchania", "r******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v161, "rucham", "r****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v162, "ruchali", "r*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v163, "ruchacz", "r*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v164, "ruchało", "r*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v165, "ruchałem", "r******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v166, "ruchać", "r****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v167, "rucha", "r***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v168, "rozpierdolę", "r*********ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v169, "rozpieprzyli", "r**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v170, "rozpieprzy", "r********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v171, "rozjebania", "r********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v172, "rozjebał", "r******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v173, "rozdupcył", "r*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v174, "przypierdolił", "p***********ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v175, "przypierdolić", "p***********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v176, "przypierdol", "p*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v177, "przypierdalać", "p***********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v178, "przypieprzajmy", "p************y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v179, "przyjebali", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v180, "przesrany", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v181, "przesrane", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v182, "przejebane", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v183, "przejebać", "p*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v184, "przejeb", "p*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v185, "posrywający", "p*********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v186, "posrasz", "p*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v187, "posranych", "p*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v188, "posrany", "p*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v189, "posraniec", "p*******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v190, "posrani", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v191, "posranego", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v192, "posrana", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "posraną", "p*****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v194, "posrali", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v195, "posracie", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v196, "posrańcami", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v197, "poruchamy", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v198, "poruchał", "p******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v199, "popierdzielone", "p************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v200, "popierdzielania", "p*************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v201, "popierdywanie", "p***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v202, "popierdolonych", "p************h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v203, "popierdolone", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v204, "popierdolilo", "p**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v205, "pojeby", "p****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v206, "pojebie", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v207, "pojebanym", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v208, "pojebany", "p******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v209, "pojebane", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v210, "pojebańcy", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v211, "pojebańcu", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v212, "pojebało", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v213, "pojeba", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v214, "pojebów", "p*****w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v215, "pojeb", "p***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v216, "podupczą", "p******ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v217, "podsrywaniu", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v218, "podpierdolono", "p***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v219, "podpierdolili", "p***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v220, "pizgać", "p****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v221, "pizga", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v222, "pizdy", "p***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v223, "pizdu", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v224, "pizda", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v225, "pizdę", "p***ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v226, "pizd", "p**d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v227, "pindy", "p***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v228, "pindo", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v229, "pinda", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v230, "pindą", "p***ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v231, "pierdziut", "p*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v232, "pierdziucha", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v233, "pierdzistołek", "p***********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v234, "pierdzielone", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v235, "pierdzielić", "p*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v236, "pierdzieli", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v237, "pierdzielenie", "p***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v238, "pierdzielenia", "p***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v239, "pierdziele", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v240, "pierdziela", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v241, "pierdzielę", "p********ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v242, "pierdziel", "p*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v243, "pierdzieć", "p*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v244, "pierdzie", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v245, "pierdziała", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v246, "pierdział", "p*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v247, "pierdzi", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v248, "pierdzeniu", "p********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v249, "pierdzenie", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v250, "pierdzenia", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v251, "pierdzących", "p*********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v252, "pierdzące", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v253, "pierdzą", "p*****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v254, "pierdyknął", "p********ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v255, "pierdykam", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v256, "pierdu", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v257, "pierdolonym", "p*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v258, "pierdolone", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v259, "pierdolnie", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v260, "pierdolnięty", "p**********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v261, "pierdolnięte", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v262, "pierdolnięta", "p**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v263, "pierdolnięci", "p**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v264, "pierdolił", "p*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v265, "pierdolić", "p*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v266, "pierdoli", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v267, "pierdolenie", "p*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v268, "pierdolenia", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v269, "pierdolca", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v270, "pierdolę", "p******ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v271, "pierdolą", "p******ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v272, "pieprzyła", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v273, "pieprzony", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v274, "pieprznięta", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v275, "pieprzenie", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v276, "pieprzę", "p*****ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v277, "piczki", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v278, "piczkę", "p****ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v279, "piździec", "p******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v280, "piździ", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v281, "osranej", "o*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v282, "osrać", "o***ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v283, "opierdzielić", "o**********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v284, "opierdalanie", "o**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v285, "opierdalania", "o**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v286, "opierdalajcie", "o***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v287, "opierdala", "o*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v288, "opieprzył", "o*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v289, "opieprzy", "o******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v290, "opieprzasz", "o********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v291, "opieprzanie", "o*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v292, "opieprzają", "o********ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v293, "opieprzą", "o******ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v294, "odpierdzielony", "o************y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v295, "odpierdoli", "o********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v296, "odpierdalasz", "o**********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v297, "odpierdala", "o********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v298, "odpieprzy", "o*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v299, "odpieprzcie", "o*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v300, "obsrywać", "o******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v301, "obsrany", "o*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v302, "obsrane", "o*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v303, "obsrana", "o*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v304, "obsrały", "o*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v305, "obsrała", "o*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v306, "nieskurwienie", "n***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v307, "nasrane", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v308, "nasrał", "n****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v309, "nasra", "n***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v310, "napierdzielanie", "n*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v311, "napierdalacie", "n***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v312, "napierdalać", "n*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v313, "napierdala", "n********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v314, "najebany", "n******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v315, "kurwy", "k***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v316, "kurwował", "k******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v317, "kurwom", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v318, "kurwo", "k***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v319, "kurwiszony", "k********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v320, "kurwiszonie", "k*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v321, "kurwiszonami", "k**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v322, "kurwiszon", "k*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v323, "kurwie", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v324, "kurwidole", "k*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v325, "kurwidołek", "k********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v326, "kurwidół", "k******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v327, "kurwi", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v328, "kurwami", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v329, "kurwach", "k*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v330, "kurwa", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v331, "kurwę", "k***ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v332, "kurwą", "k***ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v333, "kurw", "k**w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v334, "kurewstwie", "k********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v335, "kurewsko", "k******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v336, "kurewska", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v337, "kurewka", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v338, "kurew", "k***w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v339, "jebnij", "j****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v340, "jebnięty", "j******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v341, "jebnąłby", "j******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v342, "jebnąć", "j****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v343, "jebliwa", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v344, "jebie", "j***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v345, "jebany", "j****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v346, "jebania", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v347, "jebani", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v348, "jebanego", "j******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v349, "jebane", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v350, "jebana", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v351, "jebaną", "j****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v352, "jebaki", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v353, "jebaka", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v354, "jebak", "j***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v355, "jebałem", "j*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v356, "jebał", "j***ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v357, "jebać", "j***ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v358, "jeba", "j**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v359, "jebło", "j***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v360, "jeb", "j*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v361, "hwdp", "h**p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v362, "huje", "h**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v363, "gównozjady", "g********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v364, "gównozjadem", "g*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v365, "gównojady", "g*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v366, "gówno", "g***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v367, "gównie", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v368, "gównianym", "g*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v369, "gówniany", "g******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v370, "gównianej", "g*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v371, "gówniane", "g******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v372, "gówniana", "g******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v373, "gównem", "g****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v374, "gównami", "g*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v375, "gównach", "g*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v376, "gówna", "g***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v377, "fiuty", "f***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v378, "fiutem", "f****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v379, "fiutami", "f*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v380, "fiuta", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v381, "fiutów", "f****w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v382, "fiut", "f**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v383, "dymanku", "d*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v384, "dymaniem", "d******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v385, "dymania", "d*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v386, "dymani", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v387, "dymana", "d****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v388, "dymali", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v389, "dymał", "d***ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v390, "dymać", "d***ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v391, "dupy", "d**y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v392, "dupo", "d**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v393, "dupczy", "d****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v394, "dupczenia", "d*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v395, "dupcz", "d***z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v396, "dupami", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v397, "dupach", "d****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v398, "dosrajcie", "d*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v399, "dosrać", "d****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v400, "dopierdolić", "d*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v401, "dopieprzenie", "d**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v402, "cweluchu", "c******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v403, "cwelu", "c***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v404, "cwelem", "c****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v405, "cwele", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v406, "cwela", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v407, "cwel", "c**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v408, "ciulu", "c***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v409, "ciula", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v410, "ciul", "c**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v411, "cipo", "c**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v412, "cipa", "c**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v413, "cip", "c*p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v414, "chuju", "c***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v415, "chujowe", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v416, "chujem", "c****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v417, "chuje", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v418, "chuja", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v419, "chuj", "c**j");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_pl(void)::sProfanityData_pl, (uint64_t)v5, 0x19FuLL);
    for (i = 0; i != -2490; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v419[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_pl(void)::sProfanityData_pl, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_pl(void)::sProfanityData_pl, *(uint64_t *)algn_1EF582CB0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582CB0 - siri::dialogengine::GetProfanityFilter_pl(void)::sProfanityData_pl) >> 4));
}

void sub_1BFB32200(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 19872;
  v4 = -19920;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_sv(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v408[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v5, "zigenarstuk", "z*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v6, "zigenare", "z******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v7, "vildknull", "v*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[19],0>(v8, "vibrationslösfitta", "v****************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "tjockis", "t*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v10, "tjackluder", "t********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v11, "tjackhora", "t*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v12, "tattarna", "t******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v13, "tattarjänta", "t*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "tattare", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "tamejfan", "t******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v16, "tölp", "t**p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v17, "svennehora", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v18, "svartskalle", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v19, "svartskallarna", "s************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v20, "svartskallar", "s**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v21, "svartingen", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v22, "svartingarna", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v23, "svartingar", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v24, "svarting", "s******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v25, "stridspittar", "s**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v26, "stockholmsjävlar", "s**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v27, "spermaharen", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "spagge", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v29, "spaggarna", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "snorunge", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v31, "småjävlig", "s*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "slyngel", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v33, "slyna", "s***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v34, "slampa", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v35, "skitvillkor", "s*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v36, "skitviktigt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v37, "skitviktig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "skittufft", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v39, "skittråkigt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v40, "skittråkig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v41, "skitträff", "s*******f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "skittjock", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v43, "skittaskiga", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v44, "skittaskig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v45, "skitsystem", "s********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v46, "skitsvårt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v47, "skitsura", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v48, "skitstressad", "s**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v49, "skitstark", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v50, "skitstövlarna", "s***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v51, "skitstövlar", "s*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v52, "skitstöveln", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v53, "skitstövel", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v54, "skitställe", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v55, "skitsnygga", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v56, "skitsnygg", "s*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v57, "skitsnacksmejl", "s************l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v58, "skitsnackare", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v59, "skitsmarta", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v60, "skitskyttar", "s*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "skitsida", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v62, "skitsaker", "s*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v63, "skitsak", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v64, "skitsäsong", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v65, "skitroligt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v66, "skitroliga", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v67, "skitprylar", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v68, "skitprogrammet", "s************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "skitprat", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "skitpappa", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "skitont", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v72, "skitobehagligt", "s************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v73, "skitnervös", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v74, "skitnöjda", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v75, "skitnöjd", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v76, "skitnödigt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v77, "skitnödig", "s*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v78, "skitmusik", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v79, "skitmedicin", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v80, "skitmatchen", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v81, "skitmatch", "s*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "skitmat", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v83, "skitmål", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v84, "skitlukten", "s********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v85, "skitliv", "s*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "skitligan", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v87, "skitliberal", "s*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v88, "skitland", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v89, "skitlag", "s*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v90, "skitlöner", "s*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v91, "skitlön", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v92, "skitlöjligt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v93, "skitlöjliga", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v94, "skitlätt", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v95, "skitläckert", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v96, "skitkonstigt", "s**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v97, "skitkonstiga", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v98, "skitkass", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v99, "skitkallt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v100, "skitkåt", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v101, "skitjobbiga", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v102, "skitjobbig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v103, "skitjobbet", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v104, "skitit", "s****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v105, "skitirriterad", "s***********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v106, "skithockey", "s********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v107, "skithemskt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v108, "skithelg", "s******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v109, "skithögt", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v110, "skithögen", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v111, "skithäftigt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "skitgoda", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v113, "skitgnäll", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v114, "skitglada", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v115, "skitglad", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v116, "skitgörat", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v117, "skitgöra", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "skitful", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v119, "skitfränt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v120, "skitfilmer", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v121, "skitförbannade", "s************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v122, "skitfärdig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v123, "skitenkelt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v124, "skitdagis", "s*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v125, "skitdag", "s*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v126, "skitdåligt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v127, "skitdålig", "s*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v128, "skitcoolt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v129, "skitbränsle", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v130, "skitblaska", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v131, "skitbilligt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "skitband", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v133, "skitballt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v134, "skitavtal", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v135, "skitarga", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v136, "skitäckligt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v137, "skit-tV", "s*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v138, "skit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v139, "skadehelvete", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v140, "sjuhelvetes", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v141, "sjuhelsikes", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v142, "sjözigenarfolk", "s************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v143, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v144, "schlagerbögarna", "s*************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v145, "satan", "s***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v146, "sandneger", "s******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v147, "salthelvete", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v148, "sär", "s*r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v149, "runkobjekt", "r********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v150, "runkat", "r****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "runkar", "r****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v152, "runkade", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v153, "runkad", "r****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v154, "runka", "r***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v155, "rövunge", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v156, "rövknullare", "r*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v157, "rövknullade", "r*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v158, "rövknull", "r******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v159, "rövhatt", "r*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v160, "rövhål", "r****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v161, "röv", "r**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v162, "röding", "r****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v163, "råttpiss", "r******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v164, "punkjävlar", "p********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v165, "pundhuvud", "p*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v166, "pundhuve", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v167, "pucko", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v168, "praktarsel", "p********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v169, "pitten", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v170, "pitt", "p**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v171, "pissvädret", "p********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v172, "pisstidningar", "p***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v173, "pissråttan", "p********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v174, "pisslata", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v175, "pissland", "p******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v176, "pattar", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v177, "pajjas", "p****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v178, "pajas", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v179, "orre", "o**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v180, "operabögar", "o********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v181, "niggrerna", "n*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v182, "niggern", "n*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v183, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v184, "negrer", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v185, "negerpojkar", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v186, "negerbollar", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v187, "negerboll", "n*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v188, "neger", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v189, "muhammedhundar", "m************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v190, "muhammedhund", "m**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v191, "mongo", "m***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v192, "mes", "m*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v193, "masjävlar", "m*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v194, "mammaknullare", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v195, "mainstream-skiten", "m***************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v196, "mainstream-skit", "m*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v197, "mög", "m*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v198, "lyxrunka", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v199, "luder", "l***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v200, "lebb", "l**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v201, "lassemajas", "l********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v202, "lappjävlar", "l********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v203, "lappjäveln", "l********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v204, "lappjävel", "l*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v205, "lapphelvetet", "l**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v206, "läbb", "l**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v207, "kuksugerska", "k*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v208, "kuksugareskan", "k**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v209, "kuksugaren", "k******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v210, "kuksugare", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v211, "kukkunskap", "k********p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v212, "kukjävel", "k******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v213, "kukhuvud", "k******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v214, "kuken", "k***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v215, "kukbruk", "k*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v216, "kukat", "k***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v217, "kukarna", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v218, "kukar", "k***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v219, "kuk", "k*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v220, "koskit", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[19],0>(v221, "kommunistkärringen", "k****************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v222, "knullmara", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v223, "knullkompisar", "k***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v224, "knullkompis", "k*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(v225, "knullborgarmärket", "k***************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v226, "knullat", "k*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v227, "knullas", "k*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v228, "knullare", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v229, "knullar", "k*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v230, "knullade", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v231, "knulla", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v232, "klyktattare", "k*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v233, "klitta", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v234, "klantarsel", "k********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v235, "kanadickerna", "k**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v236, "kanadicken", "k********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v237, "kanadick", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v238, "kötthuvud", "k*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v239, "kärring", "k*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v240, "juggen", "j****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v241, "juggemaffian", "j**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v242, "juggejävel", "j********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v243, "juggedisco", "j********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v244, "jugge", "j***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v245, "juggar", "j****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v246, "jävulsk", "j*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v247, "jävligaste", "j********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v248, "jävligare", "j*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v249, "jävliga", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v250, "jävlig", "j****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v251, "jävlats", "j*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v252, "jävlarna", "j******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v253, "jävlar", "j****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v254, "jävlad", "j****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v255, "jävla", "j***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v256, "jävelskap", "j*******p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v257, "jäveln", "j****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v258, "jävel", "j***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v259, "jäklar", "j***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v260, "idiot", "i***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v261, "husneger", "h******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v262, "hundskiten", "h********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v263, "hundskit", "h******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v264, "horunge", "h*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v265, "horbock", "h*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v266, "horan", "h***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v267, "hora", "h**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v268, "hondjävulen", "h*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v269, "homos", "h***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v270, "homoresorna", "h*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v271, "homomän", "h*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v272, "homolobbyns", "h*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v273, "homo", "h**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v274, "herrejävlar", "h*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v275, "helvetes", "h******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v276, "helvete", "h*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v277, "hönshjärna", "h********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v278, "hästskiten", "h********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v279, "hästskit", "h******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v280, "hästkuk", "h*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v281, "hängtuttar", "h********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v282, "hängröv", "h*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v283, "hängbröst", "h*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v284, "gulingen", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v285, "gulingarna", "g********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v286, "guling", "g****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v287, "gubbslemmet", "g*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v288, "gubbjävlar", "g********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v289, "gubbjävel", "g*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v290, "gubbfan", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v291, "groggluder", "g********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v292, "grönjävligt", "g*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v293, "golfidioter", "g*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v294, "gnällkärringar", "g************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v295, "gnällkärring", "g**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v296, "göka", "g**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v297, "fucking", "f*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v298, "fuckar", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v299, "frilanshelvetet", "f*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v300, "flugskit", "f******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v301, "flinfitta", "f*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v302, "flatorna", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v303, "flata", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v304, "fjolla", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v305, "fjant", "f****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v306, "fittstim", "f******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v307, "fittslickare", "f**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v308, "fittorna", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v309, "fittor", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v310, "fittjävel", "f*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v311, "fitthora", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v312, "fittfis", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v313, "fittfakta", "f*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v314, "fittan", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v315, "fitta", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v316, "finndjävul", "f********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v317, "fikus", "f***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v318, "fetto", "f***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v319, "fanstygen", "f*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v320, "fanskapet", "f*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v321, "fanken", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v322, "fan", "f*n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v323, "förbannat", "f*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v324, "förbannade", "f********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v325, "förbövelen", "f********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v326, "fåntratt", "f******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v327, "dummerjöns", "d********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v328, "dumjävel", "d******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v329, "dumhuvud", "d******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v330, "dumhuve", "d*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v331, "dumfan", "d****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v332, "djävulusiska", "d**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v333, "djävligt", "d******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v334, "djävlarna", "d*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v335, "djävlar", "d*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v336, "djävelskap", "d********p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v337, "djäveln", "d*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v338, "djävel", "d****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v339, "djäkla", "d****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v340, "datorrunkande", "d***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v341, "datajävel", "d*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v342, "danskjävlar", "d*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v343, "cp", "c*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v344, "butchflator", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v345, "bullshit-filsosof", "b***************f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v346, "breeders", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v347, "brakskit", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v348, "bonnläppar", "b********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v349, "bonnjävlar", "b********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v350, "bondläpp", "b******p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v351, "bollibompasex", "b***********x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v352, "bokhora-sidan", "b***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v353, "bokhora", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v354, "blodsugarjävlar", "b*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v355, "blattesvenska", "b***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v356, "blattesnack", "b*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v357, "blatten", "b*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v358, "blattehumor", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v359, "blatte", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v360, "blattarna", "b*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v361, "blattar", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v362, "bitterfittan", "b**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v363, "bitterfittalappen", "b***************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v364, "bitterfitta", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v365, "betongröv", "b*******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v366, "betonghäck", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v367, "balle", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v368, "ballar", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v369, "badjävlar", "b*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v370, "badhelvetet", "b*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v371, "babbe", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v372, "bögskräcken", "b*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v373, "bögskräck", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v374, "bögskämt", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v375, "bögporr", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v376, "bögparlör", "b*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v377, "bögpar", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v378, "bögmagasin", "b********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v379, "bögjävlarna", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v380, "bögjävel", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v381, "böghora", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v382, "böghatare", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v383, "böghög", "b****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v384, "bögfaktor", "b*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v385, "bögen", "b***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v386, "bögdjävel", "b*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v387, "bögbomb", "b*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v388, "bögbingo", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v389, "bögarnas", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v390, "bögarna", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v391, "bögar", "b***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v392, "böga", "b**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v393, "bög", "b*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v394, "avsugning", "a*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v395, "avskum", "a****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v396, "attackflator", "a**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v397, "as", "a*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v398, "arslen", "a****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v399, "arsle", "a***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v400, "arselet", "a*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v401, "arsel", "a***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v402, "arschel", "a*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v403, "analt", "a***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v404, "analsex", "a*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v405, "analporr", "a******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v406, "analplugg", "a*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v407, "analkulor", "a*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v408, "a-hole", "a****e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_sv(void)::sProfanityData_sv, (uint64_t)v5, 0x194uLL);
    for (i = 0; i != -2424; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v408[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_sv(void)::sProfanityData_sv, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_sv(void)::sProfanityData_sv, *(uint64_t *)algn_1EF582CF0, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582CF0 - siri::dialogengine::GetProfanityFilter_sv(void)::sProfanityData_sv) >> 4));
}

void sub_1BFB357DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 19344;
  v4 = -19392;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_he(siri::dialogengine *this)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[7];

  v16[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v5, "שרמוטה", "ש***ה");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v6, "צ׳חצ׳ח", "צ׳**ח");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v7, "צ׳וח", "צ׳*ח");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v8, "פרענק", "פ***ק");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v9, "פרחולה", "פ****ה");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v10, "ערסוואט", "ע*****ט");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v11, "ערבוש", "ע****ש");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v12, "מזדיין", "מ****ן");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v13, "לזיין", "ל***ן");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v14, "כושון", "כ***ן");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v15, "יהודון", "י****ן");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v16, "זונה", "ז***ה");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_he(void)::sProfanityData_he, (uint64_t)v5, 0xCuLL);
    for (i = 66; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_he(void)::sProfanityData_he, &dword_1BF794000);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this, siri::dialogengine::GetProfanityFilter_he(void)::sProfanityData_he, *(uint64_t *)algn_1EF582D10, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582D10 - siri::dialogengine::GetProfanityFilter_he(void)::sProfanityData_he) >> 4));
}

void sub_1BFB35AA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 528; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_da(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v450[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v5, "voldtægtsporno", "v************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v6, "underklassetosser", "u***************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[22],0>(v7, "underkastelseskælling", "u*******************g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v8, "tyndskid", "t******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v9, "tuneserpjok", "t*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v10, "toiletsex", "t*******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v11, "svagpisser", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v12, "stikkersvin", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "spassere", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "spasser", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v15, "sortsmudskede", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v16, "smatso", "s****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v17, "sladderkælling", "s************g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v18, "skidefornuftig", "s************g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v19, "skidefarligt", "s**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v20, "skidefalsk", "s********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v21, "skidebange", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v22, "skideærgerligt", "s************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v23, "skamlæberne", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v24, "skabsmuslimer", "s***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v25, "skabsmandschauvinister", "s********************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v26, "skøge", "s***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v27, "sigøjnertøser", "s***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v28, "shemale", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v29, "sgu", "s*u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v30, "sexslaveri", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v31, "sexslaver", "s*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "sexslave", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v33, "sexobjekt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "sexfreak", "s******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v35, "seniorsex", "s*******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[25],0>(v36, "selvudslettelsesreligion", "s**********************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "sateme", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "rygersvin", "r*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v39, "rumpehul", "r******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v40, "roetyskerne", "r*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v41, "racist-pia", "r********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v42, "racismekortet", "r***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v43, "racetænkning", "r**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v44, "racerent", "r******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v45, "røvsygt", "r*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v46, "røvsyge", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v47, "røvsyg", "r****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v48, "røvkedelige", "r*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v49, "røvhul", "r****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v50, "røvgode", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v51, "røverkapitalisme", "r**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v52, "røværgerligt", "r**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v53, "rødfascist", "r********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v54, "pulet", "p***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v55, "pules", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v56, "puler", "p***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v57, "puledes", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v58, "pulede", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v59, "pule", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v60, "pul", "p*l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v61, "pisseuretfærdigt", "p**************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "pissets", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v63, "pissetræt", "p*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "pisset", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v65, "pissesur", "p******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v66, "pisses", "p****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v67, "pisserig", "p******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "pisser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "pissende", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v70, "pissen", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v71, "pissegrådige", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "pissedes", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v73, "pissede", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v74, "pissebarnlig", "p**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v75, "pissebange", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v76, "pisse", "p***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "pisnings", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v78, "pisningers", "p********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v79, "pisninger", "p*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v80, "pisningen", "p*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "pisning", "p*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v82, "pis", "p*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v83, "piks", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v84, "piknings", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v85, "pikløshed", "p*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v86, "pikløse", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v87, "pikløs", "p****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "pikkets", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v89, "pikket", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v90, "pikkes", "p****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v91, "pikker", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "pikkens", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v93, "pikkenes", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v94, "pikkene", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v95, "pikken", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v96, "pikkedes", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v97, "pikkede", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v98, "pikke", "p***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v99, "pikhoved", "p******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v100, "pik", "p*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v101, "pigesex", "p*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v102, "pigerøve", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v103, "perkersvin", "p********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v104, "perkere", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v105, "perkerdansk", "p*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v106, "perker", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v107, "penetrering", "p*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v108, "patters", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v109, "patterne", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v110, "patter", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v111, "pat", "p*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v112, "parvoldtægt", "p*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v113, "panserkælling", "p***********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v114, "overpisset", "o********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v115, "orgiets", "o*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v116, "orgiet", "o****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v117, "orgies", "o****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "orgiers", "o*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v119, "orgiernes", "o*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v120, "orgierne", "o******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v121, "orgier", "o****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v122, "ordvoldtægt", "o*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v123, "oralsex", "o*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v124, "orale", "o***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v125, "onanists", "o******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v126, "onanisters", "o********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "onanister", "o*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v128, "onanist", "o*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "onanis", "o****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "onaniens", "o******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v131, "onanien", "o*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "onaneret", "o******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v133, "onanerer", "o******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v134, "onanerende", "o********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v135, "onaneredes", "o********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v136, "onanerede", "o*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v137, "onanere", "o*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v138, "onaner", "o****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v139, "omgangsluder", "o**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v140, "nynazistiske", "n**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v141, "nynazistisk", "n*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v142, "nynazist", "n******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v143, "nyfascistiske", "n***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v144, "nyfascistisk", "n**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v145, "nyfascisterne", "n***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v146, "numsemanden", "n*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "numsehuls", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v148, "numsehuller", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v149, "numsehul", "n******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v150, "nosses", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v151, "nossers", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v152, "nossernes", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v153, "nosserne", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v154, "nossens", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v155, "nossen", "n****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v156, "nosseløse", "n*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v157, "nosse", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v158, "niggers", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v159, "niggernes", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v160, "niggerne", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v161, "niggeres", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v162, "niggerens", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v163, "niggeren", "n******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v164, "niggere", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v165, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v166, "nervevrag", "n*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v167, "neosvin", "n*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[21],0>(v168, "neonazistgrupperings", "n******************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v169, "neonazisters", "n**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v170, "neofascists", "n*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v171, "neofascistiske", "n************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v172, "neofascistisk", "n***********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v173, "neofascisters", "n***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v174, "neofascister", "n**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v175, "neofascistens", "n***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v176, "neofascisten", "n**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v177, "neofascist", "n********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v178, "neo-fascistisk", "n************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v179, "negres", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v180, "negrenes", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v181, "negrene", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v182, "negre", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v183, "negers", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v184, "negerpikke", "n********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v185, "negernes", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v186, "negerne", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v187, "negeres", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "negerens", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v189, "negeren", "n*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v190, "negerdrengen", "n**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v191, "negerdreng", "n********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v192, "neger", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v193, "nasserøve", "n*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v194, "nasserøv", "n******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v195, "narrøve", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v196, "narkoluderne", "n**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v197, "narkoluderen", "n**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v198, "narkoludere", "n*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v199, "narkoluder", "n********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v200, "narhoveder", "n********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v201, "muslimhadere", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v202, "muslimhader", "m*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v203, "muslimfrit", "m********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v204, "mundsex", "m*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v205, "mundlort", "m******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v206, "mundgalde", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v207, "muhammedbog", "m*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v208, "muhammedanske", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v209, "muhammedanernes", "m*************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v210, "muhammedanerne", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v211, "muhammed-reaktion", "m***************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v212, "muhammed-bamse", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v213, "muhamedanske", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v214, "muhamedansk", "m*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v215, "muhamedanismens", "m*************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v216, "muhamedanerne", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v217, "muhamedaneres", "m***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v218, "muhamedanerens", "m************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v219, "muhamedaneren", "m***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v220, "muhamedanere", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v221, "motherfucker", "m**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v222, "morgensex", "m*******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v223, "morgenbolledamer", "m**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v224, "moone", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v225, "medieliderlig", "m***********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v226, "masturberet", "m*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v227, "masturberede", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v228, "masturbere", "m********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v229, "masturber", "m*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v230, "møgunge", "m*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v231, "møgsvinets", "m********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v232, "møgsvinet", "m*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v233, "møgsvin", "m*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v234, "møgsos", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v235, "møgsoer", "m*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v236, "møgsoens", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v237, "møgsoen", "m*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v238, "møgso", "m***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v239, "møgkælling", "m********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v240, "møggrisens", "m********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v241, "møggris", "m*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v242, "møgfeminister", "m***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v243, "mæres", "m***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v244, "mærens", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v245, "mærenes", "m*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v246, "mæren", "m***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v247, "mære", "m**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v248, "mær", "m*r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v249, "måsen", "m***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v250, "luksusluder", "l*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v251, "luders", "l****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v252, "ludernes", "l******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v253, "luderne", "l*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v254, "luderkræft", "l********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v255, "luderes", "l*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v256, "luderen", "l*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v257, "ludere", "l****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v258, "luderagtigt", "l*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v259, "luderagtige", "l*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v260, "ludders", "l*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v261, "luddernes", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v262, "ludderne", "l******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v263, "ludderes", "l******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v264, "ludderens", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v265, "ludderen", "l******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v266, "luddere", "l*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v267, "ludder", "l****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v268, "lorts", "l***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v269, "lortespanden", "l**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v270, "lortesituation", "l************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v271, "lortesag", "l******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v272, "lortes", "l****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v273, "lorteregering", "l***********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v274, "lorteposen", "l********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v275, "lorten", "l****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v276, "lortelandet", "l*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v277, "lortejobs", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v278, "lortefilm", "l*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v279, "lortede", "l*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v280, "lortebrune", "l********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v281, "lorteartikler", "l***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v282, "lorteargument", "l***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v283, "lortearbejde", "l**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v284, "lokumsaftalen", "l***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v285, "lokumsaftale", "l**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v286, "listepik", "l******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v287, "liderligheden", "l***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v288, "liderlige", "l*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v289, "lebbe", "l***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v290, "langpisseri", "l*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v291, "læderbøsser", "l*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v292, "læderbøsse", "l********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v293, "kvindfolk", "k*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v294, "kvinderøv", "k*******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v295, "kusses", "k****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v296, "kusserne", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v297, "kussens", "k*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v298, "kussekarl", "k*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v299, "kussegalleri", "k**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v300, "kraftværks-svin", "k*************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v301, "kraftedeme", "k********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v302, "kommunistsvin", "k***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[21],0>(v303, "kommunist-fascismens", "k******************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v304, "kneppen", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v305, "klimasvin", "k*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v306, "klidmostre", "k********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v307, "kartoffeltyskere", "k**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v308, "kartoffelpolakkerne", "k*****************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v309, "kamelklapper", "k**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v310, "kønsdele", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v311, "købesex", "k*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[20],0>(v312, "københavnerasiatisk", "k*****************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v313, "kærlighedssovs", "k************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v314, "kæmpevagina", "k*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v315, "jødeso", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v316, "jøderent", "j******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v317, "jødekost", "j******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v318, "jødeblodet", "j********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v319, "islam-hadende", "i***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v320, "horkarle", "h******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v321, "horeunge", "h******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v322, "hoer", "h**r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v323, "hjernelamme", "h*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v324, "hitlers", "h*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v325, "hitler-lignende", "h*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v326, "hitler-kortet", "h***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v327, "hitler", "h****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v328, "hipsterlebbe", "h**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v329, "hippiefis", "h*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v330, "himpegimpes", "h*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v331, "himpegimpers", "h**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v332, "himpegimpernes", "h************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v333, "himpegimperne", "h***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v334, "himpegimper", "h*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v335, "himpegimpens", "h**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v336, "himpegimpen", "h*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v337, "himpegimpe", "h********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v338, "hesteluder", "h********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v339, "halvhjerner", "h*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v340, "halenegerne", "h*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v341, "halalhysteriet", "h************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v342, "gruppesex", "g*******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v343, "gruppeknald", "g*********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v344, "gramsedes", "g*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v345, "grønlænderstiv", "g************v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v346, "goddammit", "g*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v347, "fucking", "f*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v348, "fuckfinger", "f********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v349, "fucker", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v350, "fucked-up", "f*******p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v351, "fucked", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v352, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v353, "forpulet", "f******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v354, "forpulede", "f*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v355, "forhud", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v356, "forfatnings-striptease", "f********************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v357, "fluelort", "f******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v358, "fluekneppe", "f********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[16],0>(v359, "fløjlshængerøve", "f*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[19],0>(v360, "flæskestegsdansker", "f****************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[18],0>(v361, "flæskestegsædende", "f***************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v362, "fist-fucking", "f**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v363, "fisses", "f****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v364, "fissers", "f*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v365, "fissernes", "f*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v366, "fisserne", "f******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v367, "fisser", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v368, "fissens", "f*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v369, "fissen", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v370, "fisse", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v371, "festivalsex", "f*********x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v372, "fes", "f*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v373, "engangsknald", "e**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v374, "ejakulering", "e*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v375, "dyresex", "d*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v376, "dyrepornografi", "d************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v377, "duskes", "d****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v378, "duskens", "d*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v379, "dusk", "d**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v380, "dumb", "d**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v381, "drypperts", "d*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v382, "drypperters", "d*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v383, "drypperten", "d********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v384, "dryppert", "d******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v385, "dopehead", "d******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v386, "dick", "d**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v387, "diarréen", "d******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v388, "danselebbe", "d********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v389, "damned", "d****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v390, "dæmon-moderen", "d***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v391, "dåsesnak", "d******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v392, "cojones", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v393, "burlesk-freaks", "b************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v394, "bunkepul", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v395, "bullshitter", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v396, "bongopatter", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v397, "bondeislamisme", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v398, "bollerummet", "b*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v399, "bollerum", "b******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v400, "bolleri", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v401, "bogluder", "b******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v402, "boblepatter", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v403, "blowjobbets", "b*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v404, "blowjob", "b*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v405, "blegfede", "b******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v406, "bj", "b*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v407, "bj", "b*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v408, "bitterfisser", "b**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v409, "bitterfissens", "b***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v410, "bitterfissen", "b**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v411, "bitterfisse", "b*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v412, "bitche", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v413, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v414, "betonsocialisten", "b**************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v415, "betonsocialist", "b************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v416, "betonsocialdemokratisk", "b********************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v417, "betonmarxister", "b************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v418, "betonliberalister", "b***************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v419, "betonliberalist", "b*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v420, "betonlebbe", "b********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v421, "betonkommunister", "b**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v422, "betonkommunist", "b************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v423, "betonfeministisk", "b**************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v424, "betonfeministerne", "b***************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v425, "betonfeminister", "b*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v426, "betonfeminist", "b***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v427, "betonfeminisme", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v428, "betonchauvinistiske", "b*****************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v429, "beton-feminisme", "b*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v430, "begramsede", "b********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v431, "barrøvet", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v432, "bananrepublikanere", "b****************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v433, "bananplukkerne", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v434, "bøssestening", "b**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v435, "bøssesexfester", "b************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v436, "bøsserøve", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v437, "børnevold", "b*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v438, "børnesex", "b******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v439, "børnepornosider", "b*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v440, "børnepornografi", "b*************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v441, "børneporno", "b********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v442, "børnekrænkere", "b***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v443, "bæerne", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v444, "analt", "a***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v445, "analsex", "a*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v446, "analkløe", "a******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v447, "afføringssex", "a**********x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v448, "abekasteriet", "a**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v449, "åndsforsnottede", "å*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v450, "åndsamøber", "å********r");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_da(void)::sProfanityData_da, (uint64_t)v5, 0x1BEuLL);
    for (i = 0; i != -2676; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v450[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_da(void)::sProfanityData_da, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_da(void)::sProfanityData_da, *(uint64_t *)algn_1EF582D50, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582D50 - siri::dialogengine::GetProfanityFilter_da(void)::sProfanityData_da) >> 4));
}

void sub_1BFB39614(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 21360;
  v4 = -21408;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_ja(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v119[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v5, "fuck", "f***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[6],0>(v6, "鼻フック", "鼻**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v7, "黒ん坊", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v8, "黒んぼ", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v9, "顔射", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v10, "露助", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v11, "電マ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v12, "間の子", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v13, "金玉野郎", "金***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v14, "金玉", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v15, "輪姦", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v16, "腐れマンコ", "腐***コ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v17, "腐れまんこ", "腐***こ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v18, "肉便器", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v19, "盲", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v20, "痴女", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v21, "生ハメ", "生**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v22, "手マン", "手**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v23, "手コキ", "手**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v24, "巨乳", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v25, "土人", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v26, "口内発射", "口***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v27, "口内射精", "口***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v28, "即ハメ", "即**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v29, "便器女", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v30, "乱交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v31, "中出し", "中**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v32, "ワレメ", "ワ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v33, "ヤリマン", "ヤ**ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v34, "ヤリチン", "ヤ**ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v35, "マンコ", "マ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v36, "ブス", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v37, "フニャチン野郎", "フ*****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[13],0>(v38, "フニャチンやろう", "フ******う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v39, "フェラチオ", "フ***オ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v40, "フェラゴックン", "フ*****ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v41, "フェラごっくん", "フ*****ん");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v42, "フェラ", "フ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[13],0>(v43, "ファックユー", "フ***ユー");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v44, "ファック", "フ**ク");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v45, "パイパン", "パ**ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v46, "パイズリ", "パ**リ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[13],0>(v47, "バキュームフェラ", "バ******ラ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v48, "バカチョン", "バ***ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v49, "ハメ撮り", "ハ**り");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v50, "ハメまくり", "ハ***り");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v51, "ハゲ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v52, "ニグロ", "ニ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v53, "ニガー", "ニ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v54, "デブ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v55, "デカチン", "デ**ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v56, "デカちん", "デ**ん");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v57, "チンポ", "チ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v58, "チンチン", "チ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v59, "チンコ", "チ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v60, "チンカス野郎", "チ****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v61, "チンカス", "チ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v62, "チョン公", "チ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v63, "チョン", "チ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v64, "チョッパリ", "チ***リ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v65, "チャンコロ", "チ***ロ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v66, "チビ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v67, "センズリ", "セ**リ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v68, "セックス", "セ**ス");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v69, "クロンボ", "ク**ボ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v70, "クソ野郎", "く***う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v71, "クソ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v72, "キ印", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v73, "キンタマ野郎", "キ****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v74, "キンタマ", "キ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v75, "キジルシ", "キ**シ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v76, "オメコ", "オ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v77, "オマンコ", "オ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v78, "オナホール", "オ***ル");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v79, "オナホ", "オ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v80, "オッパイ", "オ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v81, "オチンチン", "オ***ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v82, "エロ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v83, "イラマチオ", "イ***オ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v84, "イタ公", "イ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v85, "イキまくり", "イ***り");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v86, "アメ公", "ア**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v87, "アナル調教", "ア***教");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v88, "アナルセックス", "ア*****ス");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v89, "めくら", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v90, "まんこ野郎", "ま***郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v91, "まんこやろう", "ま****う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v92, "まんこ", "ま**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v93, "ふにゃちん野郎", "ふ*****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[13],0>(v94, "ふにゃちんやろう", "ふ******う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v95, "びっこ", "び**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v96, "はげ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v97, "つんぼ", "つ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v98, "ちんぽ", "ち**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v99, "ちんば", "ち**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v100, "ちんちん", "ち***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v101, "ちんこ", "ち**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v102, "くろんぼ", "く**ぼ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v103, "くそ野郎", "く***う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v104, "くそやろう", "く***う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v105, "くそ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v106, "おチンチン", "お***ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v107, "おめこ", "お**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v108, "おまんこ野郎", "お****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v109, "おまんこやろう", "お*****う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v110, "おまんこ", "お***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v111, "おっぱい", "お***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v112, "おちんちん", "お***ん");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v113, "うんち", "う**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v114, "うんこ野郎", "う***郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v115, "うんこやろう", "う****う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v116, "うんこたれ", "う***れ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v117, "うんこ", "う**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v118, "SEX", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v119, "3P", "**");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_ja(void)::sProfanityData_ja, (uint64_t)v5, 0x73uLL);
    for (i = 0; i != -690; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v119[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_ja(void)::sProfanityData_ja, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_ja(void)::sProfanityData_ja, *(uint64_t *)algn_1EF582D70, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582D70 - siri::dialogengine::GetProfanityFilter_ja(void)::sProfanityData_ja) >> 4));
}

void sub_1BFB3A594(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 5472;
  v4 = -5520;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetProfanityFilter_el(siri::dialogengine *this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](this);
  v519[6] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v5, "ψώλος", "ψ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v6, "ψόφα", "ψ**α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v7, "ψωνιστήρι", "ψ*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v8, "ψωλή", "ψ**ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v9, "ψωλές", "ψ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v10, "ψοφοδεή", "ψ*****ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v11, "ψοφιμιών", "ψ******ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v12, "ψοφάτε", "ψ****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v13, "χοντροφτιαγμένα", "χ*************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[37],char const(&)[21],0>(v14, "χοντροσαραντάρηδες", "χ****************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v15, "χοντρομπαλάς", "χ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v16, "χοντρομπαλά", "χ*********ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v17, "χοντροκέφαλοι", "χ***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v18, "χοντρέλω", "χ******ω");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v19, "χοντρέλες", "χ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v20, "χεστεί", "χ****ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v21, "χεστήκατε", "χ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v22, "χεστήκανε", "χ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v23, "χεστήκαμε", "χ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v24, "χεσμένος", "χ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v25, "χεσμένο", "χ*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v26, "χεσμένες", "χ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v27, "χαφιεδότσουρμου", "χ*************υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v28, "χαφιεδότσουρμο", "χ************ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v29, "χασισάκια", "χ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v30, "χασικλίδες", "χ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v31, "χασικλήδες", "χ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v32, "χασικλή", "χ*****ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v33, "χασίσια", "χ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v34, "χασίς", "χ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v35, "χαζογκόμενες", "χ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v36, "χαζογκόμενα", "χ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v37, "χαζογκομενίστικα", "χ**************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v38, "χέστρες", "χ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v39, "χέστης", "χ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v40, "χέστηκες", "χ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v41, "χέστηκα", "χ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v42, "χέστηδες", "χ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v43, "χέστη", "χ***η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v44, "χέστες", "χ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v45, "χέστα", "χ***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v46, "χέσιμο", "χ****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v47, "χέσεις", "χ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v48, "χέσει", "χ***ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v49, "χέσε", "χ**ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v50, "χέζω", "χ**ω");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v51, "χέζουνε", "χ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v52, "χέζονται", "χ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v53, "χέζεις", "χ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v54, "χέζει", "χ***ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v55, "χάχας", "χ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v56, "φλώρους", "φ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v57, "φλώρος", "φ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v58, "φλώρε", "φ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v59, "φλόκους", "φ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v60, "φλωράκια", "φ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v61, "φλούφληδων", "φ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v62, "φλούφλη", "φ*****η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v63, "φασιστόμουτρων", "φ************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v64, "φασιστόμουτρο", "φ***********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v65, "φασιστόμουτρα", "φ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v66, "τσόγλανος", "τ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v67, "τσόγλανο", "τ******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v68, "τσούλα", "τ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v69, "τσουτσούνια", "τ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v70, "τσουτσούνι", "τ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v71, "τσουτσουνάκια", "τ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v72, "τσουτσουνάκι", "τ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v73, "τσουλιά", "τ*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v74, "τσουλί", "τ****ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v75, "τσουλάκια", "τ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v76, "τσουλάκι", "τ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v77, "τσογλανοπαρέα", "τ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v78, "τσογλανιών", "τ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v79, "τσογλανισμοί", "τ**********ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v80, "τσογλαναρίας", "τ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v81, "τσογλανάκια", "τ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v82, "τσογλάνια", "τ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v83, "τσογλάνι", "τ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v84, "τσιμπούκια", "τ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v85, "τσιμπουκιού", "τ*********ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v86, "τουρκόσπορων", "τ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v87, "τουρκόσπορους", "τ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v88, "τουρκόσπορο", "τ*********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v89, "τουρκόγυφτους", "τ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v90, "τουρκοφαγία", "τ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v91, "τουρκοφάγους", "τ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v92, "τουρκομπαρόκ", "τ**********κ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v93, "τουρκολιγούρηδες", "τ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v94, "τουρκιά", "τ*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v95, "τουρκαλβανό", "τ*********ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v96, "τουρκαλάδες", "τ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v97, "τεντιμπόης", "τ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v98, "τεμπελχανείο", "τ**********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v99, "τεμπελχανάδες", "τ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v100, "τεμπελχανάς", "τ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v101, "τεμπελχανάδες", "τ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v102, "τεμπελχανά", "τ********ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v103, "στραβοχυμένος", "σ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[35],char const(&)[20],0>(v104, "στραβοκατουρήσατε", "σ***************ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v105, "στούρνους", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v106, "στούρνοι", "σ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v107, "στούρνο", "σ*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v108, "στούρνε", "σ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v109, "σπερματοθήκη", "σ**********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v110, "σλαβόσπορων", "σ*********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v111, "σλαβόσποροι", "σ*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v112, "σκυλαδικορόκ", "σ**********κ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v113, "σκυλίλα", "σ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v114, "σκυλάραπα", "σ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v115, "σκυλάδικο", "σ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v116, "σκυλάδικη", "σ*******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v117, "σκρόφα", "σ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v118, "σκατώσατε", "σ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v119, "σκατώνεις", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v120, "σκατόψυχος", "σ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v121, "σκατόψυχοι", "σ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v122, "σκατόψυχο", "σ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v123, "σκατόφατσες", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v124, "σκατόπαιδων", "σ*********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v125, "σκατόπαιδο", "σ********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v126, "σκατόπαιδα", "σ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v127, "σκατόκοσμος", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v128, "σκατό", "σ***ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v129, "σκατωμένο", "σ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v130, "σκατοχώρα", "σ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v131, "σκατουλάκι", "σ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v132, "σκατολογίες", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v133, "σκατοκέφαλα", "σ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v134, "σκατογερνάς", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v135, "σκατοαλβανό", "σ*********ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v136, "σκατιάρης", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v137, "σκατιάρηδες", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v138, "σκατιάρες", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v139, "σκατιάρα", "σ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v140, "σκατένιες", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v141, "σκατά", "σ***ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v142, "σκάτωσες", "σ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v143, "σκάτωσε", "σ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v144, "σιχτιρίσω", "σ*******ω");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v145, "σιχτιρίσει", "σ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v146, "σιχτιρίζουν", "σ*********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v147, "σιχτιρήσουν", "σ*********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v148, "σιχτίρισμα", "σ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v149, "σιχτίριζαν", "σ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v150, "σιχτίρ", "σ****ρ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v151, "σικτίρ", "σ****ρ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v152, "σεξουαλίζεσαι", "σ***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v153, "σεξουάλα", "σ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v154, "σεξομάγαζου", "σ*********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v155, "σεξομάγαζα", "σ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v156, "σεξοεπιχειρήσεων", "σ**************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v157, "σατανομπάσταρδοι", "σ**************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v158, "ρεντίκολο", "ρ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v159, "ρεντίκολα", "ρ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v160, "πρεζόνια", "π******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v161, "πρεζού", "π****ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v162, "πρεζεμπόριο", "π*********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v163, "πρεζέμπορος", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v164, "πρεζέμποροι", "π*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v165, "πρεζάκια", "π******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v166, "πρεζάκι", "π*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v167, "πούτσος", "π*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v168, "πούτσο", "π****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v169, "πούτανος", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v170, "πούστικο", "π******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v171, "πούστικες", "π*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v172, "πούστης", "π*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v173, "πουτσάκι", "π******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v174, "πουτανιά", "π******ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v175, "πουτανάδικα", "π*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v176, "πουτάνας", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v177, "πουτάνα", "π*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v178, "πουστόγερος", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v179, "πουστράκια", "π********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v180, "πουστιές", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v181, "πουστιάς", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v182, "πουστιά", "π*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v183, "πουστάρα", "π******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v184, "πορνόγερος", "π********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v185, "πορνοσινεμά", "π*********ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v186, "πορνολάγνου", "π*********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v187, "πορνοκρατία", "π*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v188, "πορνοεπισκεπτών", "π*************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v189, "πορνοεκδότης", "π**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[35],char const(&)[20],0>(v190, "πορνοδιαγωνισμούς", "π***************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v191, "πορνοβοσκός", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v192, "πορδής", "π****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v193, "πορδή", "π***ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v194, "πορδές", "π****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v195, "πισωγλέντης", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v196, "πισωγλέντηδες", "π***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v197, "πιθηκάνθρωπος", "π***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v198, "πηδήχτηκα", "π*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v199, "παρτούζες", "π*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v200, "παρτούζα", "π******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v201, "παρτουζών", "π*******ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v202, "παρλαπίπες", "π********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v203, "παραχέσει", "π*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v204, "παπαρολόγος", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v205, "παπαρολόγοι", "π*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v206, "παπαρολόγε", "π********ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v207, "παπαρολογίες", "π**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v208, "παπαρολογίας", "π**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v209, "παπαριές", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v210, "παπαριά", "π*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v211, "παπάρας", "π*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v212, "πανηλιθίων", "π********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v213, "πανηλίθιων", "π********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v214, "πανηλίθιου", "π********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v215, "πανηλίθιοι", "π********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v216, "πανηλίθιο", "π*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v217, "πανηλίθιε", "π*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v218, "πανηλίθια", "π*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v219, "πανίβλακα", "π*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v220, "παλιοπούστης", "π**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v221, "παλιοπούστηδων", "π************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v222, "παλιοπούστηδες", "π************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v223, "παλιομετανάστη", "π************η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v224, "παλιομαλάκα", "π*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v225, "παλιολουμπίνα", "π***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v226, "παλιολινάτσες", "π***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v227, "παλιολινάτσα", "π**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v228, "παλιοκομμούνι", "π***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v229, "πέη", "π*η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v230, "ξώπετση", "ξ*****η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v231, "ξώβυζη", "ξ****η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v232, "ξενογάμησε", "ξ********ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v233, "ξεκώλιασμα", "ξ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v234, "ξέκωλο", "ξ****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v235, "ξέκωλα", "ξ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v236, "ξέκολων", "ξ*****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v237, "νέγρων", "ν****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v238, "νέγρου", "ν****υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v239, "νέγρος", "ν****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v240, "νέγροι", "ν****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v241, "νέγρικο", "ν*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v242, "νέγρικα", "ν*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v243, "νέγρες", "ν****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v244, "νέγρα", "ν***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v245, "μπουχέσες", "μ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v246, "μπουχέσας", "μ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v247, "μπουφονεοέλληνας", "μ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v248, "μπουρτζόβλαχους", "μ*************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v249, "μπουρτζόβλαχος", "μ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v250, "μπουρτζόβλαχοι", "μ************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v251, "μπουρδέλων", "μ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v252, "μπουρδέλου", "μ********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v253, "μπουρδέλο", "μ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v254, "μπουρδέλα", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v255, "μπορντέλου", "μ********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v256, "μπορδέλου", "μ*******υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v257, "μπινέδες", "μ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v258, "μπινέ", "μ***έ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v259, "μπετόβλακας", "μ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v260, "μπετόβλακα", "μ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v261, "μπαστουνόβλαχοι", "μ*************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v262, "μπασταρδεύει", "μ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v263, "μπασταρδεμένος", "μ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v264, "μπασταρδεμένο", "μ***********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v265, "μπαρουφολόγους", "μ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v266, "μπάφους", "μ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v267, "μπάσταρδους", "μ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v268, "μπάσταρδου", "μ********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v269, "μπάσταρδοι", "μ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v270, "μπάσταρδε", "μ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v271, "μπάσταρδα", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v272, "μούλος", "μ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v273, "μουνόπανο", "μ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v274, "μουνόπανα", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v275, "μουνιά", "μ****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v276, "μουνί", "μ***ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v277, "μουνάκι", "μ*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v278, "μογγολοτόμαρα", "μ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v279, "μαστούρια", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v280, "μαμίσιοι", "μ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v281, "μαλαπέρδα", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v282, "μαλακοπίτουρες", "μ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v283, "μαλακισμένα", "μ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v284, "μαλακιζόμαστε", "μ***********ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v285, "μαλακίες", "μ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v286, "μαλακίας", "μ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v287, "μαλακία", "μ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v288, "μαλακάκο", "μ******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v289, "μαλάκες", "μ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v290, "μαλάκας", "μ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v291, "μαλάκα", "μ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v292, "λούληδες", "λ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v293, "λούγκρες", "λ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v294, "λουλάκι", "λ*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v295, "λελές", "λ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v296, "κώλωσαν", "κ*****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v297, "κώλους", "κ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v298, "κώλου", "κ***υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v299, "κώλος", "κ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v300, "κώλοι", "κ***ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v301, "κώλο", "κ**ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v302, "κόπανου", "κ*****υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v303, "κόπανος", "κ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v304, "κόπανε", "κ****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v305, "κωλώσουν", "κ******ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v306, "κωλώσεις", "κ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v307, "κωλώνανε", "κ******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v308, "κωλόχαρτο", "κ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v309, "κωλόσπιτο", "κ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v310, "κωλόσπιτα", "κ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v311, "κωλόπανο", "κ******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v312, "κωλόπαιδο", "κ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v313, "κωλόπαιδα", "κ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v314, "κωλόμπαρα", "κ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v315, "κωλόγρια", "κ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v316, "κωλοχώρι", "κ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v317, "κωλοχώρα", "κ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v318, "κωλοχαρακτήρας", "κ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v319, "κωλοχαρακτήρα", "κ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v320, "κωλοχανείο", "κ********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v321, "κωλοφυλλάδα", "κ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v322, "κωλοφάναρο", "κ********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v323, "κωλοτρυπίδα", "κ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v324, "κωλοπαιδαρισμού", "κ*************ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v325, "κωλομπαράς", "κ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v326, "κωλομπαράδων", "κ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v327, "κωλομπαράδες", "κ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v328, "κωλομέρια", "κ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v329, "κωλοκυβέρνηση", "κ***********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v330, "κωλοκατάσταση", "κ***********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v331, "κωλοβυσμάτων", "κ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v332, "κωλοβαράνε", "κ********ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v333, "κωλοαπόφαση", "κ*********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v334, "κωλοαλβανός", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v335, "κωλαράκι", "κ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v336, "κρυόκωλοι", "κ*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v337, "κρυφοπηδηχτούλης", "κ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v338, "κουραδόμαγκες", "κ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v339, "κουράδες", "κ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v340, "κουράδα", "κ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v341, "κουνουπιδόμαγκα", "κ*************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v342, "κουλομαρία", "κ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v343, "κουλή", "κ***ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v344, "κλαπαρχίδης", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v345, "κλανιές", "κ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v346, "κλανιάρης", "κ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v347, "κλανιά", "κ****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v348, "κλάσιμο", "κ*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v349, "κλάσει", "κ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v350, "κλάνουν", "κ*****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v351, "κενυαπίθηκος", "κ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v352, "καύλωσε", "κ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v353, "καύλα", "κ***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v354, "καυλωμένη", "κ*******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v355, "κατσίφλωροι", "κ*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v356, "κατουρλού", "κ*******ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v357, "κατουρλήδες", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v358, "καριόλες", "κ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v359, "καργιόλης", "κ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v360, "καργιόληδες", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v361, "καργιόλες", "κ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v362, "καργιόλα", "κ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v363, "καρατσουλάρας", "κ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v364, "καραπουτανάρες", "κ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v365, "καραγκιοζαρίας", "κ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v366, "καραγκιοζάκου", "κ***********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v367, "καραβανάς", "κ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v368, "καράβλαχων", "κ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v369, "καράβλαχους", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v370, "καράβλαχοι", "κ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v371, "καπότες", "κ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v372, "καπότας", "κ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v373, "ζιγκολολεβέντες", "ζ*************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v374, "ευρωλιγούρη", "ε*********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v375, "ευρωλιγουριάς", "ε***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v376, "δούλε", "δ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v377, "δούλας", "δ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v378, "δουλικό", "δ*****ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v379, "δουλικά", "δ*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v380, "δουλάκι", "δ*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v381, "γύφτων", "γ****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v382, "γύφτους", "γ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v383, "γύφτουλες", "γ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v384, "γύφτου", "γ****υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v385, "γύφτοι", "γ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v386, "γύφτικου", "γ******υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v387, "γύφτε", "γ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v388, "γυφτόπουλα", "γ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v389, "γυφτοσκοπιανών", "γ************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v390, "γυφτοσκοπιανό", "γ***********ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v391, "γυφτοσκοπιανικής", "γ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v392, "γυφτιάς", "γ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v393, "γυφτάκια", "γ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v394, "γυαλαμπούκες", "γ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v395, "γρόθο", "γ***ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v396, "γλύφτης", "γ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v397, "γκομενούλες", "γ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v398, "γκομενούλα", "γ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v399, "γκομενιλίκια", "γ**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v400, "γκομενιλίκι", "γ*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v401, "γκομενίτσες", "γ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v402, "γκομενάρα", "γ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v403, "γκομενάκια", "γ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v404, "γιδαραίοι", "γ*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v405, "γεροσάψαλα", "γ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[35],char const(&)[20],0>(v406, "γαϊδουροκαβαλαρία", "γ***************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v407, "γαμώτο", "γ****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v408, "γαμώ", "γ**ώ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v409, "γαμωσταυρίδια", "γ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v410, "γαμούσαμε", "γ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v411, "γαμοτράγουδα", "γ**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v412, "γαμοσταυρίδια", "γ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v413, "γαμοσταυρίδι", "γ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v414, "γαμημένο", "γ******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v415, "γαμημένη", "γ******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v416, "γαμηθώ", "γ****ώ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v417, "γαμηθούν", "γ******ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v418, "γαμηθείτε", "γ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v419, "γαμείς", "γ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v420, "γαμήσω", "γ****ω");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v421, "γαμήσουμε", "γ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v422, "γαμήσου", "γ*****υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v423, "γαμήσι", "γ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v424, "γαμήσει", "γ*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v425, "γαμήσαμε", "γ******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v426, "γαμάτο", "γ****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v427, "γαμάς", "γ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v428, "γαμάει", "γ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v429, "γάμησε", "γ****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v430, "βυζιά", "β***ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v431, "βυζί", "β**ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v432, "βρωμόπουστες", "β**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v433, "βρωμόπουστας", "β**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v434, "βλαχοπορνό", "β********ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v435, "βλαχομπαρόκ", "β*********κ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v436, "βλαχοδήμαρχος", "β***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v437, "βλαχοαμερικάνους", "β**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v438, "βλαχαδερό", "β*******ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v439, "βλαχαδερά", "β*******ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v440, "βλαχάρες", "β******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v441, "βλαχάρα", "β*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v442, "βλαμμένους", "β********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v443, "βλαμμένοι", "β*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v444, "βλαμμένη", "β******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v445, "βλακόφατσα", "β********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v446, "βιζιτούδες", "β********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v447, "αυτοχασισώνεται", "α*************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v448, "αυνάνες", "α*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v449, "αρχιδιακό", "α*******ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v450, "αρχίδια", "α*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v451, "αρχίδι", "α****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v452, "αραπάκος", "α******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v453, "αραπάδες", "α******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v454, "αράπικο", "α*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v455, "αράπικη", "α*****η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v456, "αράπης", "α****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v457, "αράπηδες", "α******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v458, "αράπη", "α***η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v459, "απάρθενος", "α*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v460, "αντιμπατσικός", "α***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v461, "αναρχοτραμπούκοι", "α**************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v462, "αναρχοσκούληκα", "α************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v463, "αναρχοκάφρους", "α***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v464, "αναρχοβλαμμένα", "α************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v465, "αναρχοάπλυτα", "α**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v466, "αλλαξοκωλιές", "α**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v467, "αλητόβιε", "α******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v468, "αλητοτουρίστες", "α************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v469, "αλητονεολαία", "α**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v470, "αληταριά", "α******ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v471, "αιμοπότη", "α******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v472, "αιματορούφηδες", "α************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v473, "αερογαμίας", "α********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v474, "αερογάμηδες", "α*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v475, "αδερφάρες", "α*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v476, "αδερφάρα", "α******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v477, "αγάμητες", "α******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v478, "έχεσε", "έ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v479, "έχεσα", "έ***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v480, "έχεζες", "έ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v481, "έκλασε", "έ****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v482, "Χεστήκαμε", "Χ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v483, "Χέσε", "Χ**ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v484, "Τσογλαναραίοι", "Τ***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v485, "Τσογλανίτσα", "Τ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v486, "Τουρκόφιλη", "Τ********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v487, "Τουρκόσπορους", "Τ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v488, "Τουρκόσποροι", "Τ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v489, "Τουρκόγυφτοι", "Τ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v490, "Τουρκιστάν", "Τ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v491, "Τουρκιά", "Τ*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v492, "Τουρκαλάδες", "Τ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v493, "Σούφρας", "Σ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v494, "Σεξογλάστρες", "Σ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v495, "Νέγρος", "Ν****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v496, "Νέγροι", "Ν****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v497, "Νέγρικης", "Ν******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v498, "Μπαρουφολόγοι", "Μ***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v499, "Μπαράς", "Μ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v500, "Μπαλουχιστάν", "Μ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v501, "Μούλα", "Μ***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v502, "Μαλάκα", "Μ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v503, "Μάπα", "Μ**α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v504, "Λουλού", "Λ****ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v505, "Λελέδες", "Λ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v506, "Κουράδες", "Κ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v507, "Κουνίστρας", "Κ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v508, "Κλάσε", "Κ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v509, "Κατουρήθηκα", "Κ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v510, "Ευρωλιγούρηδες", "Ε************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v511, "Γύφτοι", "Γ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v512, "Γερμανοτσολιάδες", "Γ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v513, "Γερμαναράδων", "Γ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v514, "Γερμαναράδες", "Γ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v515, "Γαμήστε", "Γ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v516, "Βυζάκια", "Β*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v517, "Αρκουδόγυφτων", "Α***********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v518, "Αλογοσκουφίτσα", "Α************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v519, "Αλβανόγυφτοι", "Α**********ι");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](&siri::dialogengine::GetProfanityFilter_el(void)::sProfanityData_el, (uint64_t)v5, 0x203uLL);
    for (i = 0; i != -3090; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v519[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], &siri::dialogengine::GetProfanityFilter_el(void)::sProfanityData_el, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, siri::dialogengine::GetProfanityFilter_el(void)::sProfanityData_el, *(uint64_t *)algn_1EF582D90, 0xAAAAAAAAAAAAAAABLL* ((*(_QWORD *)algn_1EF582D90 - siri::dialogengine::GetProfanityFilter_el(void)::sProfanityData_el) >> 4));
}

