void sub_1BF9C7A64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 21360;
  v4 = -21408;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_ja(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v119[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v5, "fuck", "f***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[6],0>(v6, "鼻フック", "鼻**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v7, "黒ん坊", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v8, "黒んぼ", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v9, "顔射", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v10, "露助", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v11, "電マ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v12, "間の子", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v13, "金玉野郎", "金***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v14, "金玉", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v15, "輪姦", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v16, "腐れマンコ", "腐***コ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v17, "腐れまんこ", "腐***こ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v18, "肉便器", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v19, "盲", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v20, "痴女", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v21, "生ハメ", "生**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v22, "手マン", "手**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v23, "手コキ", "手**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v24, "巨乳", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v25, "土人", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v26, "口内発射", "口***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v27, "口内射精", "口***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v28, "即ハメ", "即**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v29, "便器女", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v30, "乱交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v31, "中出し", "中**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v32, "ワレメ", "ワ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v33, "ヤリマン", "ヤ**ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v34, "ヤリチン", "ヤ**ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v35, "マンコ", "マ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v36, "ブス", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v37, "フニャチン野郎", "フ*****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[13],0>(v38, "フニャチンやろう", "フ******う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v39, "フェラチオ", "フ***オ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v40, "フェラゴックン", "フ*****ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v41, "フェラごっくん", "フ*****ん");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v42, "フェラ", "フ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[13],0>(v43, "ファックユー", "フ***ユー");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v44, "ファック", "フ**ク");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v45, "パイパン", "パ**ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v46, "パイズリ", "パ**リ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[13],0>(v47, "バキュームフェラ", "バ******ラ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v48, "バカチョン", "バ***ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v49, "ハメ撮り", "ハ**り");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v50, "ハメまくり", "ハ***り");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v51, "ハゲ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v52, "ニグロ", "ニ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v53, "ニガー", "ニ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v54, "デブ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v55, "デカチン", "デ**ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v56, "デカちん", "デ**ん");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v57, "チンポ", "チ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v58, "チンチン", "チ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v59, "チンコ", "チ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v60, "チンカス野郎", "チ****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v61, "チンカス", "チ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v62, "チョン公", "チ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v63, "チョン", "チ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v64, "チョッパリ", "チ***リ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v65, "チャンコロ", "チ***ロ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v66, "チビ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v67, "センズリ", "セ**リ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v68, "セックス", "セ**ス");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v69, "クロンボ", "ク**ボ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v70, "クソ野郎", "く***う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v71, "クソ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v72, "キ印", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v73, "キンタマ野郎", "キ****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v74, "キンタマ", "キ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v75, "キジルシ", "キ**シ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v76, "オメコ", "オ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v77, "オマンコ", "オ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v78, "オナホール", "オ***ル");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v79, "オナホ", "オ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v80, "オッパイ", "オ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v81, "オチンチン", "オ***ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v82, "エロ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v83, "イラマチオ", "イ***オ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v84, "イタ公", "イ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v85, "イキまくり", "イ***り");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v86, "アメ公", "ア**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v87, "アナル調教", "ア***教");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v88, "アナルセックス", "ア*****ス");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v89, "めくら", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v90, "まんこ野郎", "ま***郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v91, "まんこやろう", "ま****う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v92, "まんこ", "ま**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v93, "ふにゃちん野郎", "ふ*****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[13],0>(v94, "ふにゃちんやろう", "ふ******う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v95, "びっこ", "び**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v96, "はげ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v97, "つんぼ", "つ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v98, "ちんぽ", "ち**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v99, "ちんば", "ち**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v100, "ちんちん", "ち***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v101, "ちんこ", "ち**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v102, "くろんぼ", "く**ぼ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v103, "くそ野郎", "く***う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v104, "くそやろう", "く***う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v105, "くそ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v106, "おチンチン", "お***ン");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v107, "おめこ", "お**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v108, "おまんこ野郎", "お****郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v109, "おまんこやろう", "お*****う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v110, "おまんこ", "お***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v111, "おっぱい", "お***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v112, "おちんちん", "お***ん");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v113, "うんち", "う**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v114, "うんこ野郎", "う***郎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v115, "うんこやろう", "う****う");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v116, "うんこたれ", "う***れ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v117, "うんこ", "う**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v118, "SEX", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v119, "3P", "**");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ja(void)::sProfanityData_ja, (uint64_t)v5, 0x73uLL);
    for (i = 0; i != -690; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v119[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ja(void)::sProfanityData_ja, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_ja(void)::sProfanityData_ja[0], unk_1EF581F28, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF581F28 - GetProfanityFilter_ja(void)::sProfanityData_ja[0]) >> 4));
}

void sub_1BF9C89E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 5472;
  v4 = -5520;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_el(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v519[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v5, "ψώλος", "ψ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v6, "ψόφα", "ψ**α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v7, "ψωνιστήρι", "ψ*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v8, "ψωλή", "ψ**ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v9, "ψωλές", "ψ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v10, "ψοφοδεή", "ψ*****ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v11, "ψοφιμιών", "ψ******ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v12, "ψοφάτε", "ψ****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v13, "χοντροφτιαγμένα", "χ*************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[37],char const(&)[21],0>(v14, "χοντροσαραντάρηδες", "χ****************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v15, "χοντρομπαλάς", "χ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v16, "χοντρομπαλά", "χ*********ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v17, "χοντροκέφαλοι", "χ***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v18, "χοντρέλω", "χ******ω");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v19, "χοντρέλες", "χ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v20, "χεστεί", "χ****ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v21, "χεστήκατε", "χ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v22, "χεστήκανε", "χ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v23, "χεστήκαμε", "χ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v24, "χεσμένος", "χ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v25, "χεσμένο", "χ*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v26, "χεσμένες", "χ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v27, "χαφιεδότσουρμου", "χ*************υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v28, "χαφιεδότσουρμο", "χ************ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v29, "χασισάκια", "χ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v30, "χασικλίδες", "χ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v31, "χασικλήδες", "χ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v32, "χασικλή", "χ*****ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v33, "χασίσια", "χ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v34, "χασίς", "χ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v35, "χαζογκόμενες", "χ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v36, "χαζογκόμενα", "χ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v37, "χαζογκομενίστικα", "χ**************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v38, "χέστρες", "χ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v39, "χέστης", "χ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v40, "χέστηκες", "χ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v41, "χέστηκα", "χ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v42, "χέστηδες", "χ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v43, "χέστη", "χ***η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v44, "χέστες", "χ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v45, "χέστα", "χ***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v46, "χέσιμο", "χ****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v47, "χέσεις", "χ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v48, "χέσει", "χ***ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v49, "χέσε", "χ**ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v50, "χέζω", "χ**ω");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v51, "χέζουνε", "χ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v52, "χέζονται", "χ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v53, "χέζεις", "χ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v54, "χέζει", "χ***ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v55, "χάχας", "χ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v56, "φλώρους", "φ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v57, "φλώρος", "φ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v58, "φλώρε", "φ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v59, "φλόκους", "φ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v60, "φλωράκια", "φ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v61, "φλούφληδων", "φ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v62, "φλούφλη", "φ*****η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v63, "φασιστόμουτρων", "φ************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v64, "φασιστόμουτρο", "φ***********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v65, "φασιστόμουτρα", "φ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v66, "τσόγλανος", "τ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v67, "τσόγλανο", "τ******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v68, "τσούλα", "τ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v69, "τσουτσούνια", "τ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v70, "τσουτσούνι", "τ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v71, "τσουτσουνάκια", "τ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v72, "τσουτσουνάκι", "τ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v73, "τσουλιά", "τ*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v74, "τσουλί", "τ****ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v75, "τσουλάκια", "τ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v76, "τσουλάκι", "τ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v77, "τσογλανοπαρέα", "τ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v78, "τσογλανιών", "τ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v79, "τσογλανισμοί", "τ**********ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v80, "τσογλαναρίας", "τ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v81, "τσογλανάκια", "τ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v82, "τσογλάνια", "τ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v83, "τσογλάνι", "τ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v84, "τσιμπούκια", "τ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v85, "τσιμπουκιού", "τ*********ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v86, "τουρκόσπορων", "τ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v87, "τουρκόσπορους", "τ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v88, "τουρκόσπορο", "τ*********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v89, "τουρκόγυφτους", "τ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v90, "τουρκοφαγία", "τ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v91, "τουρκοφάγους", "τ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v92, "τουρκομπαρόκ", "τ**********κ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v93, "τουρκολιγούρηδες", "τ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v94, "τουρκιά", "τ*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v95, "τουρκαλβανό", "τ*********ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v96, "τουρκαλάδες", "τ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v97, "τεντιμπόης", "τ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v98, "τεμπελχανείο", "τ**********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v99, "τεμπελχανάδες", "τ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v100, "τεμπελχανάς", "τ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v101, "τεμπελχανάδες", "τ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v102, "τεμπελχανά", "τ********ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v103, "στραβοχυμένος", "σ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[35],char const(&)[20],0>(v104, "στραβοκατουρήσατε", "σ***************ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v105, "στούρνους", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v106, "στούρνοι", "σ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v107, "στούρνο", "σ*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v108, "στούρνε", "σ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v109, "σπερματοθήκη", "σ**********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v110, "σλαβόσπορων", "σ*********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v111, "σλαβόσποροι", "σ*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v112, "σκυλαδικορόκ", "σ**********κ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v113, "σκυλίλα", "σ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v114, "σκυλάραπα", "σ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v115, "σκυλάδικο", "σ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v116, "σκυλάδικη", "σ*******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v117, "σκρόφα", "σ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v118, "σκατώσατε", "σ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v119, "σκατώνεις", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v120, "σκατόψυχος", "σ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v121, "σκατόψυχοι", "σ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v122, "σκατόψυχο", "σ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v123, "σκατόφατσες", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v124, "σκατόπαιδων", "σ*********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v125, "σκατόπαιδο", "σ********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v126, "σκατόπαιδα", "σ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v127, "σκατόκοσμος", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v128, "σκατό", "σ***ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v129, "σκατωμένο", "σ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v130, "σκατοχώρα", "σ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v131, "σκατουλάκι", "σ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v132, "σκατολογίες", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v133, "σκατοκέφαλα", "σ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v134, "σκατογερνάς", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v135, "σκατοαλβανό", "σ*********ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v136, "σκατιάρης", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v137, "σκατιάρηδες", "σ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v138, "σκατιάρες", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v139, "σκατιάρα", "σ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v140, "σκατένιες", "σ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v141, "σκατά", "σ***ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v142, "σκάτωσες", "σ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v143, "σκάτωσε", "σ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v144, "σιχτιρίσω", "σ*******ω");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v145, "σιχτιρίσει", "σ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v146, "σιχτιρίζουν", "σ*********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v147, "σιχτιρήσουν", "σ*********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v148, "σιχτίρισμα", "σ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v149, "σιχτίριζαν", "σ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v150, "σιχτίρ", "σ****ρ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v151, "σικτίρ", "σ****ρ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v152, "σεξουαλίζεσαι", "σ***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v153, "σεξουάλα", "σ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v154, "σεξομάγαζου", "σ*********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v155, "σεξομάγαζα", "σ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v156, "σεξοεπιχειρήσεων", "σ**************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v157, "σατανομπάσταρδοι", "σ**************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v158, "ρεντίκολο", "ρ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v159, "ρεντίκολα", "ρ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v160, "πρεζόνια", "π******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v161, "πρεζού", "π****ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v162, "πρεζεμπόριο", "π*********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v163, "πρεζέμπορος", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v164, "πρεζέμποροι", "π*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v165, "πρεζάκια", "π******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v166, "πρεζάκι", "π*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v167, "πούτσος", "π*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v168, "πούτσο", "π****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v169, "πούτανος", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v170, "πούστικο", "π******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v171, "πούστικες", "π*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v172, "πούστης", "π*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v173, "πουτσάκι", "π******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v174, "πουτανιά", "π******ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v175, "πουτανάδικα", "π*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v176, "πουτάνας", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v177, "πουτάνα", "π*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v178, "πουστόγερος", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v179, "πουστράκια", "π********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v180, "πουστιές", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v181, "πουστιάς", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v182, "πουστιά", "π*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v183, "πουστάρα", "π******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v184, "πορνόγερος", "π********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v185, "πορνοσινεμά", "π*********ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v186, "πορνολάγνου", "π*********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v187, "πορνοκρατία", "π*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v188, "πορνοεπισκεπτών", "π*************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v189, "πορνοεκδότης", "π**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[35],char const(&)[20],0>(v190, "πορνοδιαγωνισμούς", "π***************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v191, "πορνοβοσκός", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v192, "πορδής", "π****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v193, "πορδή", "π***ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v194, "πορδές", "π****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v195, "πισωγλέντης", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v196, "πισωγλέντηδες", "π***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v197, "πιθηκάνθρωπος", "π***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v198, "πηδήχτηκα", "π*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v199, "παρτούζες", "π*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v200, "παρτούζα", "π******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v201, "παρτουζών", "π*******ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v202, "παρλαπίπες", "π********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v203, "παραχέσει", "π*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v204, "παπαρολόγος", "π*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v205, "παπαρολόγοι", "π*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v206, "παπαρολόγε", "π********ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v207, "παπαρολογίες", "π**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v208, "παπαρολογίας", "π**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v209, "παπαριές", "π******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v210, "παπαριά", "π*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v211, "παπάρας", "π*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v212, "πανηλιθίων", "π********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v213, "πανηλίθιων", "π********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v214, "πανηλίθιου", "π********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v215, "πανηλίθιοι", "π********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v216, "πανηλίθιο", "π*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v217, "πανηλίθιε", "π*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v218, "πανηλίθια", "π*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v219, "πανίβλακα", "π*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v220, "παλιοπούστης", "π**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v221, "παλιοπούστηδων", "π************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v222, "παλιοπούστηδες", "π************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v223, "παλιομετανάστη", "π************η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v224, "παλιομαλάκα", "π*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v225, "παλιολουμπίνα", "π***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v226, "παλιολινάτσες", "π***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v227, "παλιολινάτσα", "π**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v228, "παλιοκομμούνι", "π***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v229, "πέη", "π*η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v230, "ξώπετση", "ξ*****η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v231, "ξώβυζη", "ξ****η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v232, "ξενογάμησε", "ξ********ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v233, "ξεκώλιασμα", "ξ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v234, "ξέκωλο", "ξ****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v235, "ξέκωλα", "ξ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v236, "ξέκολων", "ξ*****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v237, "νέγρων", "ν****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v238, "νέγρου", "ν****υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v239, "νέγρος", "ν****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v240, "νέγροι", "ν****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v241, "νέγρικο", "ν*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v242, "νέγρικα", "ν*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v243, "νέγρες", "ν****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v244, "νέγρα", "ν***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v245, "μπουχέσες", "μ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v246, "μπουχέσας", "μ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v247, "μπουφονεοέλληνας", "μ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v248, "μπουρτζόβλαχους", "μ*************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v249, "μπουρτζόβλαχος", "μ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v250, "μπουρτζόβλαχοι", "μ************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v251, "μπουρδέλων", "μ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v252, "μπουρδέλου", "μ********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v253, "μπουρδέλο", "μ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v254, "μπουρδέλα", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v255, "μπορντέλου", "μ********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v256, "μπορδέλου", "μ*******υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v257, "μπινέδες", "μ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v258, "μπινέ", "μ***έ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v259, "μπετόβλακας", "μ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v260, "μπετόβλακα", "μ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v261, "μπαστουνόβλαχοι", "μ*************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v262, "μπασταρδεύει", "μ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v263, "μπασταρδεμένος", "μ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v264, "μπασταρδεμένο", "μ***********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v265, "μπαρουφολόγους", "μ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v266, "μπάφους", "μ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v267, "μπάσταρδους", "μ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v268, "μπάσταρδου", "μ********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v269, "μπάσταρδοι", "μ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v270, "μπάσταρδε", "μ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v271, "μπάσταρδα", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v272, "μούλος", "μ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v273, "μουνόπανο", "μ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v274, "μουνόπανα", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v275, "μουνιά", "μ****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v276, "μουνί", "μ***ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v277, "μουνάκι", "μ*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v278, "μογγολοτόμαρα", "μ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v279, "μαστούρια", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v280, "μαμίσιοι", "μ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v281, "μαλαπέρδα", "μ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v282, "μαλακοπίτουρες", "μ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v283, "μαλακισμένα", "μ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v284, "μαλακιζόμαστε", "μ***********ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v285, "μαλακίες", "μ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v286, "μαλακίας", "μ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v287, "μαλακία", "μ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v288, "μαλακάκο", "μ******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v289, "μαλάκες", "μ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v290, "μαλάκας", "μ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v291, "μαλάκα", "μ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v292, "λούληδες", "λ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v293, "λούγκρες", "λ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v294, "λουλάκι", "λ*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v295, "λελές", "λ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v296, "κώλωσαν", "κ*****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v297, "κώλους", "κ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v298, "κώλου", "κ***υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v299, "κώλος", "κ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v300, "κώλοι", "κ***ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v301, "κώλο", "κ**ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v302, "κόπανου", "κ*****υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v303, "κόπανος", "κ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v304, "κόπανε", "κ****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v305, "κωλώσουν", "κ******ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v306, "κωλώσεις", "κ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v307, "κωλώνανε", "κ******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v308, "κωλόχαρτο", "κ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v309, "κωλόσπιτο", "κ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v310, "κωλόσπιτα", "κ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v311, "κωλόπανο", "κ******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v312, "κωλόπαιδο", "κ*******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v313, "κωλόπαιδα", "κ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v314, "κωλόμπαρα", "κ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v315, "κωλόγρια", "κ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v316, "κωλοχώρι", "κ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v317, "κωλοχώρα", "κ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v318, "κωλοχαρακτήρας", "κ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v319, "κωλοχαρακτήρα", "κ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v320, "κωλοχανείο", "κ********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v321, "κωλοφυλλάδα", "κ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v322, "κωλοφάναρο", "κ********ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v323, "κωλοτρυπίδα", "κ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v324, "κωλοπαιδαρισμού", "κ*************ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v325, "κωλομπαράς", "κ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v326, "κωλομπαράδων", "κ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v327, "κωλομπαράδες", "κ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v328, "κωλομέρια", "κ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v329, "κωλοκυβέρνηση", "κ***********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v330, "κωλοκατάσταση", "κ***********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v331, "κωλοβυσμάτων", "κ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v332, "κωλοβαράνε", "κ********ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v333, "κωλοαπόφαση", "κ*********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v334, "κωλοαλβανός", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v335, "κωλαράκι", "κ******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v336, "κρυόκωλοι", "κ*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v337, "κρυφοπηδηχτούλης", "κ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v338, "κουραδόμαγκες", "κ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v339, "κουράδες", "κ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v340, "κουράδα", "κ*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v341, "κουνουπιδόμαγκα", "κ*************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v342, "κουλομαρία", "κ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v343, "κουλή", "κ***ή");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v344, "κλαπαρχίδης", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v345, "κλανιές", "κ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v346, "κλανιάρης", "κ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v347, "κλανιά", "κ****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v348, "κλάσιμο", "κ*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v349, "κλάσει", "κ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v350, "κλάνουν", "κ*****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v351, "κενυαπίθηκος", "κ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v352, "καύλωσε", "κ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v353, "καύλα", "κ***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v354, "καυλωμένη", "κ*******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v355, "κατσίφλωροι", "κ*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v356, "κατουρλού", "κ*******ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v357, "κατουρλήδες", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v358, "καριόλες", "κ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v359, "καργιόλης", "κ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v360, "καργιόληδες", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v361, "καργιόλες", "κ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v362, "καργιόλα", "κ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v363, "καρατσουλάρας", "κ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v364, "καραπουτανάρες", "κ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v365, "καραγκιοζαρίας", "κ************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v366, "καραγκιοζάκου", "κ***********υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v367, "καραβανάς", "κ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v368, "καράβλαχων", "κ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v369, "καράβλαχους", "κ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v370, "καράβλαχοι", "κ********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v371, "καπότες", "κ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v372, "καπότας", "κ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v373, "ζιγκολολεβέντες", "ζ*************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v374, "ευρωλιγούρη", "ε*********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v375, "ευρωλιγουριάς", "ε***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v376, "δούλε", "δ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v377, "δούλας", "δ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v378, "δουλικό", "δ*****ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v379, "δουλικά", "δ*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v380, "δουλάκι", "δ*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v381, "γύφτων", "γ****ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v382, "γύφτους", "γ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v383, "γύφτουλες", "γ*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v384, "γύφτου", "γ****υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v385, "γύφτοι", "γ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v386, "γύφτικου", "γ******υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v387, "γύφτε", "γ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v388, "γυφτόπουλα", "γ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v389, "γυφτοσκοπιανών", "γ************ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v390, "γυφτοσκοπιανό", "γ***********ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v391, "γυφτοσκοπιανικής", "γ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v392, "γυφτιάς", "γ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v393, "γυφτάκια", "γ******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v394, "γυαλαμπούκες", "γ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v395, "γρόθο", "γ***ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v396, "γλύφτης", "γ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v397, "γκομενούλες", "γ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v398, "γκομενούλα", "γ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v399, "γκομενιλίκια", "γ**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v400, "γκομενιλίκι", "γ*********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v401, "γκομενίτσες", "γ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v402, "γκομενάρα", "γ*******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v403, "γκομενάκια", "γ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v404, "γιδαραίοι", "γ*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v405, "γεροσάψαλα", "γ********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[35],char const(&)[20],0>(v406, "γαϊδουροκαβαλαρία", "γ***************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v407, "γαμώτο", "γ****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v408, "γαμώ", "γ**ώ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v409, "γαμωσταυρίδια", "γ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v410, "γαμούσαμε", "γ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v411, "γαμοτράγουδα", "γ**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v412, "γαμοσταυρίδια", "γ***********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v413, "γαμοσταυρίδι", "γ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v414, "γαμημένο", "γ******ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v415, "γαμημένη", "γ******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v416, "γαμηθώ", "γ****ώ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v417, "γαμηθούν", "γ******ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v418, "γαμηθείτε", "γ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v419, "γαμείς", "γ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v420, "γαμήσω", "γ****ω");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v421, "γαμήσουμε", "γ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v422, "γαμήσου", "γ*****υ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v423, "γαμήσι", "γ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v424, "γαμήσει", "γ*****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v425, "γαμήσαμε", "γ******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v426, "γαμάτο", "γ****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v427, "γαμάς", "γ***ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v428, "γαμάει", "γ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v429, "γάμησε", "γ****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v430, "βυζιά", "β***ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v431, "βυζί", "β**ί");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v432, "βρωμόπουστες", "β**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v433, "βρωμόπουστας", "β**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v434, "βλαχοπορνό", "β********ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v435, "βλαχομπαρόκ", "β*********κ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v436, "βλαχοδήμαρχος", "β***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v437, "βλαχοαμερικάνους", "β**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v438, "βλαχαδερό", "β*******ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v439, "βλαχαδερά", "β*******ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v440, "βλαχάρες", "β******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v441, "βλαχάρα", "β*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v442, "βλαμμένους", "β********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v443, "βλαμμένοι", "β*******ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v444, "βλαμμένη", "β******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v445, "βλακόφατσα", "β********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v446, "βιζιτούδες", "β********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v447, "αυτοχασισώνεται", "α*************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v448, "αυνάνες", "α*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v449, "αρχιδιακό", "α*******ό");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v450, "αρχίδια", "α*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v451, "αρχίδι", "α****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v452, "αραπάκος", "α******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v453, "αραπάδες", "α******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v454, "αράπικο", "α*****ο");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v455, "αράπικη", "α*****η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v456, "αράπης", "α****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v457, "αράπηδες", "α******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v458, "αράπη", "α***η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v459, "απάρθενος", "α*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v460, "αντιμπατσικός", "α***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v461, "αναρχοτραμπούκοι", "α**************ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v462, "αναρχοσκούληκα", "α************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v463, "αναρχοκάφρους", "α***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v464, "αναρχοβλαμμένα", "α************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v465, "αναρχοάπλυτα", "α**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v466, "αλλαξοκωλιές", "α**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v467, "αλητόβιε", "α******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v468, "αλητοτουρίστες", "α************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v469, "αλητονεολαία", "α**********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v470, "αληταριά", "α******ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v471, "αιμοπότη", "α******η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v472, "αιματορούφηδες", "α************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v473, "αερογαμίας", "α********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v474, "αερογάμηδες", "α*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v475, "αδερφάρες", "α*******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v476, "αδερφάρα", "α******α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v477, "αγάμητες", "α******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v478, "έχεσε", "έ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v479, "έχεσα", "έ***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v480, "έχεζες", "έ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v481, "έκλασε", "έ****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v482, "Χεστήκαμε", "Χ*******ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v483, "Χέσε", "Χ**ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v484, "Τσογλαναραίοι", "Τ***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v485, "Τσογλανίτσα", "Τ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v486, "Τουρκόφιλη", "Τ********η");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v487, "Τουρκόσπορους", "Τ***********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v488, "Τουρκόσποροι", "Τ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v489, "Τουρκόγυφτοι", "Τ**********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v490, "Τουρκιστάν", "Τ********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v491, "Τουρκιά", "Τ*****ά");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v492, "Τουρκαλάδες", "Τ*********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v493, "Σούφρας", "Σ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v494, "Σεξογλάστρες", "Σ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v495, "Νέγρος", "Ν****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v496, "Νέγροι", "Ν****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v497, "Νέγρικης", "Ν******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v498, "Μπαρουφολόγοι", "Μ***********ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v499, "Μπαράς", "Μ****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v500, "Μπαλουχιστάν", "Μ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v501, "Μούλα", "Μ***α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v502, "Μαλάκα", "Μ****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v503, "Μάπα", "Μ**α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v504, "Λουλού", "Λ****ύ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v505, "Λελέδες", "Λ*****ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v506, "Κουράδες", "Κ******ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v507, "Κουνίστρας", "Κ********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v508, "Κλάσε", "Κ***ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v509, "Κατουρήθηκα", "Κ*********α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v510, "Ευρωλιγούρηδες", "Ε************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v511, "Γύφτοι", "Γ****ι");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v512, "Γερμανοτσολιάδες", "Γ**************ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v513, "Γερμαναράδων", "Γ**********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v514, "Γερμαναράδες", "Γ**********ς");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v515, "Γαμήστε", "Γ*****ε");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v516, "Βυζάκια", "Β*****α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v517, "Αρκουδόγυφτων", "Α***********ν");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v518, "Αλογοσκουφίτσα", "Α************α");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v519, "Αλβανόγυφτοι", "Α**********ι");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_el(void)::sProfanityData_el, (uint64_t)v5, 0x203uLL);
    for (i = 0; i != -3090; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v519[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_el(void)::sProfanityData_el, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_el(void)::sProfanityData_el[0], unk_1EF581F48, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF581F48 - GetProfanityFilter_el(void)::sProfanityData_el[0]) >> 4));
}

void sub_1BF9CCE7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 24672;
  v4 = -24720;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_it(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[6];
  _QWORD v556[6];
  _QWORD v557[6];
  _QWORD v558[6];
  _QWORD v559[6];
  _QWORD v560[6];
  _QWORD v561[6];
  _QWORD v562[6];
  _QWORD v563[6];
  _QWORD v564[6];
  _QWORD v565[6];
  _QWORD v566[6];
  _QWORD v567[6];
  _QWORD v568[6];
  _QWORD v569[6];
  _QWORD v570[6];
  _QWORD v571[6];
  _QWORD v572[6];
  _QWORD v573[6];
  _QWORD v574[6];
  _QWORD v575[6];
  _QWORD v576[6];
  _QWORD v577[6];
  _QWORD v578[6];
  _QWORD v579[6];
  _QWORD v580[6];
  _QWORD v581[6];
  _QWORD v582[6];
  _QWORD v583[6];
  _QWORD v584[6];
  _QWORD v585[6];
  _QWORD v586[6];
  _QWORD v587[6];
  _QWORD v588[6];
  _QWORD v589[6];
  _QWORD v590[6];
  _QWORD v591[6];
  _QWORD v592[6];
  _QWORD v593[6];
  _QWORD v594[6];
  _QWORD v595[6];
  _QWORD v596[6];
  _QWORD v597[6];
  _QWORD v598[6];
  _QWORD v599[6];
  _QWORD v600[6];
  _QWORD v601[6];
  _QWORD v602[6];
  _QWORD v603[6];
  _QWORD v604[6];
  _QWORD v605[6];
  _QWORD v606[6];
  _QWORD v607[6];
  _QWORD v608[6];
  _QWORD v609[6];
  _QWORD v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v621[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v5, "zoccolavo", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v6, "zoccolavi", "z*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v7, "zoccolavate", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v8, "zoccolavano", "z*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v9, "zoccolavamo", "z*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v10, "zoccolava", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v11, "zoccolature", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v12, "zoccolatura", "z*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v13, "zoccolato", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v14, "zoccolati", "z*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v15, "zoccolate", "z*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v16, "zoccolata", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v17, "zoccolasti", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v18, "zoccolaste", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v19, "zoccolassimo", "z**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v20, "zoccolassi", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v21, "zoccolassero", "z**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v22, "zoccolasse", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v23, "zoccolarono", "z*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v24, "zoccolare", "z*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v25, "zoccolar", "z******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v26, "zoccolanti", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v27, "zoccolante", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v28, "zoccolano", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v29, "zoccolando", "z********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v30, "zoccolammo", "z********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v31, "zoccolaio", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "zoccolai", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v33, "zoccola", "z*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v34, "zizze", "z***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v35, "zizza", "z***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v36, "zinne", "z***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v37, "zinna", "z***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v38, "vaffanculo", "v********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v39, "trombò", "t****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v40, "trombino", "t******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "trombiate", "t*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "trombiamo", "t*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "tromberò", "t******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v44, "tromberà", "t******à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v45, "tromberete", "t********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v46, "tromberesti", "t*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v47, "trombereste", "t*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v48, "tromberemo", "t********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v49, "tromberemmo", "t*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v50, "tromberei", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v51, "tromberebbero", "t***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v52, "tromberebbe", "t*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v53, "tromberanno", "t*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v54, "tromberai", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v55, "trombavo", "t******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v56, "trombavi", "t******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v57, "trombavate", "t********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v58, "trombavano", "t********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v59, "trombavamo", "t********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "trombava", "t******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "trombato", "t******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "trombati", "t******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "trombate", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "trombata", "t******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v65, "trombasti", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v66, "trombaste", "t*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v67, "trombassimo", "t*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v68, "trombassi", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v69, "trombassero", "t*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "trombasse", "t*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v71, "trombarono", "t********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "trombare", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v73, "trombar", "t*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v74, "trombanti", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v75, "trombante", "t*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "trombano", "t******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v77, "trombando", "t*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v78, "trombammo", "t*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "trombai", "t*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "troioni", "t*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "troione", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "troiona", "t*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "troiaio", "t*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v84, "troiai", "t****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v85, "troia", "t***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v86, "travoni", "t*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "travone", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "terroni", "t*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v89, "terrone", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v90, "terrona", "t*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v91, "succhiacazzo", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v92, "succhiacazzi", "s**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "stronzo", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v94, "stronzi", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v95, "stronza", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v96, "sputtanò", "s******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v97, "sputtano", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v98, "sputtanino", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v99, "sputtaniate", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v100, "sputtaniamo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "sputtani", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v102, "sputtanerò", "s********ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v103, "sputtanerà", "s********à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v104, "sputtanerete", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v105, "sputtaneresti", "s***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v106, "sputtanereste", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v107, "sputtaneremo", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v108, "sputtaneremmo", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v109, "sputtanerei", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v110, "sputtanerebbero", "s*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v111, "sputtanerebbe", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v112, "sputtaneranno", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v113, "sputtanerai", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v114, "sputtanavo", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v115, "sputtanavi", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v116, "sputtanavate", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v117, "sputtanavano", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v118, "sputtanavamo", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v119, "sputtanava", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v120, "sputtanato", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v121, "sputtanati", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v122, "sputtanate", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v123, "sputtanata", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v124, "sputtanasti", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v125, "sputtanaste", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v126, "sputtanassimo", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v127, "sputtanassi", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v128, "sputtanassero", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v129, "sputtanasse", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v130, "sputtanarono", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v131, "sputtanare", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v132, "sputtanar", "s*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v133, "sputtananti", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v134, "sputtanante", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v135, "sputtanano", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v136, "sputtanando", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v137, "sputtanammo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v138, "sputtanai", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v139, "sputtana", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v140, "sporco negro", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v141, "sporca negra", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v142, "scoreggiai", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v143, "scoreggia", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v144, "scoreggi", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v145, "scoreggerò", "s********ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v146, "scoreggerà", "s********à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v147, "scoreggerete", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v148, "scoreggeresti", "s***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v149, "scoreggereste", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v150, "scoreggeremo", "s**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v151, "scoreggeremmo", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v152, "scoreggerei", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v153, "scoreggerebbero", "s*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v154, "scoreggerebbe", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v155, "scoreggeranno", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v156, "scoreggerai", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v157, "scoregge", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v158, "scopata", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v159, "scopalo", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v160, "scopale", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v161, "scopala", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v162, "scazzavi", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v163, "scazzatone", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v164, "scazzati", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v165, "scazzatevi", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v166, "scazzatemi", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v167, "scazzarvi", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v168, "scazzarti", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v169, "scazzarsi", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v170, "scazzarmi", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v171, "scassacazzo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v172, "sborro", "s****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v173, "sborrino", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v174, "sborriate", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v175, "sborriamo", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v176, "sborri", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v177, "sborrerete", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v178, "sborreresti", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v179, "sborrereste", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v180, "sborreremo", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v181, "sborreremmo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v182, "sborrerei", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v183, "sborrerebbero", "s***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v184, "sborrerebbe", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v185, "sborreranno", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v186, "sborrerai", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v187, "sborrer", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v188, "sborre", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v189, "sborravo", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v190, "sborravi", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v191, "sborravate", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v192, "sborravano", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v193, "sborravamo", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v194, "sborrava", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v195, "sborrato", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v196, "sborrati", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v197, "sborrate", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v198, "sborrata", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v199, "sborrasti", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v200, "sborraste", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v201, "sborrassimo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v202, "sborrassi", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v203, "sborrassero", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v204, "sborrasse", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v205, "sborrarti", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v206, "sborrarono", "s********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v207, "sborrare", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v208, "sborrarci", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v209, "sborranti", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v210, "sborrante", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v211, "sborrano", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v212, "sborrando", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v213, "sborrammo", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v214, "sborrai", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v215, "sborra", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v216, "sborr", "s***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v217, "rottoinculo", "r*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v218, "rottinculo", "r********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v219, "rompipalle", "r********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v220, "rompicazzo", "r********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v221, "rincoglionì", "r*********ì");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v222, "rincoglionivo", "r***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v223, "rincoglionivi", "r***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v224, "rincoglionivate", "r*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v225, "rincoglionivano", "r*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v226, "rincoglionivamo", "r*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v227, "rincoglioniva", "r***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v228, "rincoglionito", "r***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v229, "rincoglioniti", "r***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v230, "rincoglionite", "r***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v231, "rincoglionita", "r***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v232, "rincoglionisti", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v233, "rincoglioniste", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v234, "rincoglionissimo", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v235, "rincoglionissi", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v236, "rincoglionissero", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v237, "rincoglionisse", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v238, "rincoglioniscono", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v239, "rincoglionisco", "r************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v240, "rincoglionisci", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v241, "rincoglionisce", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v242, "rincoglioniscano", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v243, "rincoglionisca", "r************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v244, "rincoglionirò", "r***********ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v245, "rincoglionirà", "r***********à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v246, "rincoglionirono", "r*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v247, "rincoglionirete", "r*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v248, "rincoglioniresti", "r**************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v249, "rincoglionireste", "r**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v250, "rincoglioniremo", "r*************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v251, "rincoglioniremmo", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v252, "rincoglionirei", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v253, "rincoglionirebbero", "r****************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v254, "rincoglionirebbe", "r**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v255, "rincoglionire", "r***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v256, "rincoglioniranno", "r**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v257, "rincoglionirai", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v258, "rincoglionir", "r**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v259, "rincoglionimmo", "r************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v260, "rincoglionii", "r**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v261, "rincoglioniate", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v262, "rincoglioniamo", "r************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v263, "rincoglionenti", "r************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v264, "rincoglionente", "r************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v265, "rincoglionendo", "r************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v266, "puttane", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v267, "puttana", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v268, "pompino", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v269, "pisciò", "p****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v270, "piscio", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v271, "piscino", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v272, "pisciavo", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v273, "pisciavi", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v274, "pisciavate", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v275, "pisciavano", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v276, "pisciavamo", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v277, "pisciava", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v278, "pisciatoio", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v279, "pisciatoi", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v280, "pisciato", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v281, "pisciate", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v282, "pisciata", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v283, "pisciasti", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v284, "pisciaste", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v285, "pisciassimo", "p*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v286, "pisciassi", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v287, "pisciassero", "p*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v288, "pisciasse", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v289, "pisciarono", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v290, "pisciare", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v291, "pisciar", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v292, "piscianti", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v293, "pisciante", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v294, "pisciano", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v295, "pisciando", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v296, "pisciamo", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v297, "pisciammo", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v298, "pisciai", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v299, "piscia", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v300, "pisci", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v301, "piscerò", "p*****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v302, "piscerà", "p*****à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v303, "piscerete", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v304, "pisceresti", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v305, "piscereste", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v306, "pisceremo", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v307, "pisceremmo", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v308, "piscerei", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v309, "piscerebbero", "p**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v310, "piscerebbe", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v311, "pisceranno", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v312, "piscerai", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v313, "pisce", "p***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v314, "pecorine", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v315, "pecorina", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v316, "negro", "n***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v317, "negra", "n***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v318, "mortacci", "m******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v319, "minchionò", "m*******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v320, "minchiono", "m*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v321, "minchionino", "m*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v322, "minchioniate", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v323, "minchioniamo", "m**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v324, "minchioni", "m*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v325, "minchionerò", "m*********ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v326, "minchionerà", "m*********à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v327, "minchionerete", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v328, "minchioneresti", "m************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v329, "minchionereste", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v330, "minchioneremo", "m***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v331, "minchioneremmo", "m************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v332, "minchionerei", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v333, "minchionerebbero", "m**************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v334, "minchionerebbe", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v335, "minchioneranno", "m************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v336, "minchionerai", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v337, "minchione", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v338, "minchionavo", "m*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v339, "minchionavi", "m*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v340, "minchionavate", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v341, "minchionavano", "m***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v342, "minchionavamo", "m***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v343, "minchionava", "m*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v344, "minchionato", "m*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v345, "minchionati", "m*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v346, "minchionate", "m*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v347, "minchionata", "m*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v348, "minchionasti", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v349, "minchionaste", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v350, "minchionassimo", "m************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v351, "minchionassi", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v352, "minchionassero", "m************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v353, "minchionasse", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v354, "minchionarono", "m***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v355, "minchionare", "m*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v356, "minchionar", "m********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v357, "minchionanti", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v358, "minchionante", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v359, "minchionano", "m*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v360, "minchionando", "m**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v361, "minchionammo", "m**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v362, "minchionai", "m********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v363, "minchionaggini", "m************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v364, "minchionaggine", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v365, "minchiona", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v366, "minchiata", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v367, "minchia", "m*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v368, "mignotte", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v369, "mignotta", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v370, "merdoso", "m*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v371, "merdosissimo", "m**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v372, "merdosissimi", "m**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v373, "merdosissime", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v374, "merdosissima", "m**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v375, "merdosamente", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v376, "merdosa", "m*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v377, "merde", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v378, "merdaccia", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v379, "merda", "m***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v380, "magnaccia", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v381, "inculerà", "i******à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v382, "inculerei", "i*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v383, "inculato", "i******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v384, "inculata", "i******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v385, "inculare", "i******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v386, "incazzò", "i*****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v387, "incazzo", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v388, "incazzino", "i*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v389, "incazziate", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v390, "incazziamoci", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v391, "incazziamo", "i********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v392, "incazzi", "i*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v393, "incazzerò", "i*******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v394, "incazzerà", "i*******à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v395, "incazzerete", "i*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v396, "incazzeresti", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v397, "incazzereste", "i**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v398, "incazzeremo", "i*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v399, "incazzeremmo", "i**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v400, "incazzerei", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v401, "incazzerebbero", "i************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v402, "incazzerebbe", "i**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v403, "incazzeranno", "i**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v404, "incazzerai", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v405, "incazzer", "i******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v406, "incazzavo", "i*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v407, "incazzavi", "i*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v408, "incazzavate", "i*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v409, "incazzavano", "i*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v410, "incazzavamo", "i*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v411, "incazzava", "i*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v412, "incazzato", "i*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v413, "incazzatici", "i*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v414, "incazzati", "i*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v415, "incazzatevi", "i*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v416, "incazzatemi", "i*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v417, "incazzate", "i*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v418, "incazzata", "i*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v419, "incazzasti", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v420, "incazzaste", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v421, "incazzassimo", "i**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v422, "incazzassi", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v423, "incazzassero", "i**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v424, "incazzasse", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v425, "incazzarvi", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v426, "incazzarti", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v427, "incazzarsi", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v428, "incazzarono", "i*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v429, "incazzarmi", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v430, "incazzare", "i*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v431, "incazzarci", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v432, "incazzar", "i******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v433, "incazzanti", "i********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v434, "incazzante", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v435, "incazzano", "i*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v436, "incazzandovi", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v437, "incazzandoti", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v438, "incazzandomi", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v439, "incazzandoci", "i**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v440, "incazzando", "i********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v441, "incazzammo", "i********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v442, "incazzai", "i******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v443, "incazza", "i*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v444, "incazz", "i****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v445, "frocio", "f****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v446, "froci", "f***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v447, "fottuto", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v448, "fottiti", "f*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v449, "fottere", "f*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v450, "fotter", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v451, "figa", "f**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v452, "fica", "f**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v453, "fatti una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v454, "farti una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v455, "farsi una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v456, "farci una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v457, "fanculo", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v458, "fancazzisti", "f*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v459, "fancazziste", "f*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v460, "fancazzista", "f*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v461, "fammi una sega", "f***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v462, "ditalino", "d******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v463, "ditalini", "d******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v464, "culo", "c**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v465, "culi", "c**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v466, "culattoni", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v467, "culattone", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v468, "cornuto", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v469, "coglioni", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v470, "coglione", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v471, "chiavò", "c****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v472, "chiavo", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v473, "chiavino", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v474, "chiaviate", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v475, "chiaviamo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v476, "chiaverò", "c******ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v477, "chiaverà", "c******à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v478, "chiaverete", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v479, "chiaveresti", "c*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v480, "chiavereste", "c*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v481, "chiaveremo", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v482, "chiaveremmo", "c*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v483, "chiaverei", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v484, "chiaverebbero", "c***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v485, "chiaverebbe", "c*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v486, "chiaveranno", "c*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v487, "chiaverai", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v488, "chiavavo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v489, "chiavavi", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v490, "chiavavate", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v491, "chiavavano", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v492, "chiavavamo", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v493, "chiavava", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v494, "chiavato", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v495, "chiavati", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v496, "chiavate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v497, "chiavata", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v498, "chiavasti", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v499, "chiavaste", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v500, "chiavassimo", "c*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v501, "chiavassi", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v502, "chiavassero", "c*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v503, "chiavasse", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v504, "chiavarono", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v505, "chiavare", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v506, "chiavar", "c*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v507, "chiavanti", "c*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v508, "chiavante", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v509, "chiavano", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v510, "chiavando", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v511, "chiavammo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v512, "chiavai", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v513, "chiava", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v514, "checche", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v515, "checca", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v516, "cesso", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v517, "cazzuto", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v518, "cazzuti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v519, "cazzute", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v520, "cazzuta", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v521, "cazzoni", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v522, "cazzone", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v523, "cazzo", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v524, "cazziatoni", "c********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v525, "cazziatone", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v526, "cazzi", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v527, "cazzate", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v528, "cazzata", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v529, "cazza", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v530, "cagò", "c**ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v531, "cago", "c**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v532, "caghino", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v533, "caghiate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v534, "caghiamo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v535, "caghi", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v536, "cagherò", "c*****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v537, "cagherà", "c*****à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v538, "cagherete", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v539, "cagheresti", "c********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v540, "caghereste", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v541, "cagheremo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v542, "cagheremmo", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v543, "cagherei", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v544, "cagherebbero", "c**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v545, "cagherebbe", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v546, "cagheranno", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v547, "cagherai", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v548, "cagavo", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v549, "cagavi", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v550, "cagavate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v551, "cagavano", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v552, "cagavamo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v553, "cagava", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v554, "cagato", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v555, "cagati", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v556, "cagate", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v557, "cagata", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v558, "cagasti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v559, "cagaste", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v560, "cagassimo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v561, "cagassi", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v562, "cagassero", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v563, "cagasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v564, "cagarono", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v565, "cagare", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v566, "cagar", "c***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v567, "caganti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v568, "cagante", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v569, "cagano", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v570, "cagando", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v571, "cagammo", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v572, "cagai", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v573, "cagacazzo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v574, "caga", "c**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v575, "cacò", "c**ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v576, "cachino", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v577, "cachiate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v578, "cachiamo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v579, "cacherò", "c*****ò");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v580, "cacherà", "c*****à");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v581, "cacherete", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v582, "cacheresti", "c********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v583, "cachereste", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v584, "cacheremo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v585, "cacheremmo", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v586, "cacherei", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v587, "cacherebbero", "c**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v588, "cacherebbe", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v589, "cacheranno", "c********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v590, "cacherai", "c******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v591, "cacca", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v592, "cacavo", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v593, "cacavi", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v594, "cacavate", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v595, "cacavano", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v596, "cacavamo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v597, "cacava", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v598, "cacatoio", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v599, "cacatoi", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v600, "cacato", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v601, "cacati", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v602, "cacate", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v603, "cacata", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v604, "cacasti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v605, "cacaste", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v606, "cacassimo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v607, "cacassi", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v608, "cacassero", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v609, "cacasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v610, "cacarono", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v611, "cacare", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v612, "cacar", "c***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v613, "cacanti", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v614, "cacante", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v615, "cacano", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v616, "cacando", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v617, "cacammo", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v618, "cacai", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v619, "cacacazzo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v620, "bastardo", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v621, "bastarda", "b******a");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_it(void)::sProfanityData_it, (uint64_t)v5, 0x269uLL);
    for (i = 0; i != -3702; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v621[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_it(void)::sProfanityData_it, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_it(void)::sProfanityData_it[0], unk_1EF581F68, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF581F68 - GetProfanityFilter_it(void)::sProfanityData_it[0]) >> 4));
}

void sub_1BF9D20A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 29568;
  v4 = -29616;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_ca(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[7];

  v85[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v5, "xoxo", "x**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v6, "tortilleres", "t*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v7, "torrapebrots", "t**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "tonto", "t***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "tonta", "t***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v10, "superxarnegu", "s**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v11, "subnormal", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v12, "reputíssima", "r*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v13, "rehòstia", "r******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v14, "recony", "r****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(v15, "recontraputíssima", "r***************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v16, "recollons", "r*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v17, "putu", "p**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v18, "putot", "p***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "puto", "p**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v20, "putiferi", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "puteta", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v22, "puteria", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v23, "putejat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v24, "putejar", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v25, "putejant", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "putassa", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "putada", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v28, "puta", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v29, "porca", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v30, "polla", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v31, "poca-vergonya", "p***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v32, "poca-solta", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v33, "pardala", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v34, "pardal", "p****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v35, "panoli", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v36, "pakis", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v37, "pècora", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v38, "negrates", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v39, "negrata", "n*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v40, "merdos", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v41, "merda", "m***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "megapolla", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v43, "maricons", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v44, "mariconades", "m*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v45, "maricóna", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v46, "maricón", "m*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v47, "malparits", "m*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v48, "malparit", "m******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v49, "malparides", "m********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v50, "malparida", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v51, "malfollades", "m*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v52, "malcarat", "m******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v53, "malcarada", "m*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v54, "llepaculs", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v55, "jilipolles", "j********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v56, "imbècil", "i*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v57, "idiota", "i****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v58, "gitanada", "g******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v59, "gilipollisme", "g**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v60, "gilipolles", "g********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v61, "gilipolla", "g*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "garrepa", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v63, "filldeputisme", "f***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "esconyat", "e******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v65, "esconyar", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v66, "descollono", "d********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v67, "descollonar", "d*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v68, "conyàs", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v69, "cony", "c**y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "collons", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v71, "collonades", "c********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v72, "colló", "c***ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "catalufo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v74, "catalufes", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v75, "cagondéu", "c******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v76, "cabrons", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "cabrones", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v78, "cabrona", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v79, "cabronàs", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v80, "cabró", "c***ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v81, "botiflera", "b*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v82, "botifler", "b******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v83, "borinota", "b******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "borinot", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v85, "bleda", "b***a");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ca(void)::sProfanityData_ca, (uint64_t)v5, 0x51uLL);
    for (i = 480; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ca(void)::sProfanityData_ca, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_ca(void)::sProfanityData_ca[0], unk_1EF581F88, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF581F88 - GetProfanityFilter_ca(void)::sProfanityData_ca[0]) >> 4));
}

void sub_1BF9D2B84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 3840; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_cs(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v224[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v5, "šulina", "š****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v6, "šukat", "š***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v7, "šoustají", "š******í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v8, "řiťolezectví", "ř**********í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v9, "řiťlezkové", "ř********é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "řitě", "ř**ě");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v11, "řití", "ř**í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v12, "řitního", "ř*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v13, "čuráci", "č****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v14, "černoprdelníky", "č************y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v15, "černoprdelníka", "č************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v16, "zmrdu", "z***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v17, "zmrdi", "z***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v18, "zmrde", "z***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "zkurví", "z****í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v20, "zkurvená", "z******á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v21, "zkurvenou", "z*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v22, "zkurvenej", "z*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "zesrat", "z****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v24, "zblitky", "z*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v25, "zblblý", "z****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v26, "zblblíků", "z******ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v27, "zblblíci", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v28, "zblblá", "z****á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v29, "zasraný", "z*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v30, "zasraném", "z******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "zasranou", "z******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v32, "vyčůránků", "v*******ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v33, "vyčůraný", "v******ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v34, "vyčuraností", "v*********í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v35, "vysrat", "v****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "vyserte", "v*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v37, "vyser", "v***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v38, "vyprdnou", "v******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v39, "vypatlanců", "v********ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v40, "vyjebávat", "v*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "vyfakoval", "v*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v42, "vychcánkové", "v*********é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "vychcané", "v******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v44, "vychcanosti", "v*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v45, "vychcanost", "v********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v46, "vožraly", "v*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v47, "vožralej", "v******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "vojebe", "v****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v49, "ultrahovadech", "u***********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v50, "tupounu", "t*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v51, "tupounku", "t******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v52, "trotlovsky", "t********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v53, "trotla", "t****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v54, "teploušská", "t********á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v55, "teplouš", "t*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v56, "sračkách", "s******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v57, "sračky", "s****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v58, "socky", "s***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v59, "sockou", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v60, "socka", "s***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v61, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v62, "seru", "s**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v63, "serou", "s***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "sereš", "s***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v65, "sereme", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v66, "sere", "s**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v67, "ser", "s*r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v68, "senzidebila", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v69, "rozumprdi", "r*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "rozesralo", "r*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v71, "rozesere", "r******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "retarde", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v73, "retard", "r****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[12],0>(v74, "přiožralých", "p*********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v75, "přiblblých", "p********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v76, "přiblblý", "p******ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v77, "přiblblíkem", "p*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v78, "přiblblíka", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v79, "přiblblé", "p******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v80, "přiblblou", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v81, "přečůrat", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v82, "přečuráme", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[13],0>(v83, "přechcávání", "p*********í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v84, "píči", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v85, "píča", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v86, "průseru", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v87, "průserem", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v88, "průser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v89, "prďolu", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v90, "prdi", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v91, "prdelky", "p*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v92, "prdeli", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v93, "prdele", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v94, "prdel", "p***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v95, "prde", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v96, "prcičky", "p*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v97, "posrat", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v98, "posraných", "p*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v99, "posraný", "p*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "posrali", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v101, "posral", "p****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v102, "poserů", "p****ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v103, "poseru", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v104, "poserou", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v105, "poser", "p***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v106, "pičovina", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v107, "pička", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v108, "pindíka", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v109, "pakem", "p***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "pablbek", "p*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v111, "ožralý", "o****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v112, "ožerou", "o****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v113, "ošoustat", "o******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "osrati", "o****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v115, "ojebávat", "o******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v116, "nepochčijou", "n*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v117, "nepochčiješ", "n*********š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v118, "nechcačky", "n*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v119, "nasrání", "n*****í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v120, "nasrat", "n****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v121, "nasraný", "n*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v122, "nasral", "n****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v123, "naserete", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v124, "naser", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v125, "mrdákov", "m*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v126, "mrdkou", "m****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v127, "mrdka", "m***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v128, "mrdat", "m***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "mamrdi", "m****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v130, "magora", "m****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v131, "lesbicky", "l******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v132, "kurvy", "k***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v133, "kurvou", "k****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v134, "kurvo", "k***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v135, "kurva", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v136, "kuruovců", "k******ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v137, "kurevsky", "k******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v138, "kurev", "k***v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v139, "kundy", "k***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v140, "krávovina", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v141, "kreténi", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v142, "kravině", "k*****ě");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v143, "kravinami", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "kravina", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v145, "kravin", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v146, "kokoty", "k****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "kokotský", "k******ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "kokotiny", "k******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v149, "kokotek", "k*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v150, "kokote", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v151, "kokot", "k***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v152, "jebne", "j***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v153, "hovno", "h***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v154, "hovna", "h***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v155, "hoven", "h***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v156, "homoušům", "h******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v157, "heteráci", "h******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v158, "hajzlů", "h****ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v159, "hajzlu", "h****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v160, "hajzlpapír", "h********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v161, "hajzlové", "h******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v162, "hajzle", "h****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v163, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v164, "frnda", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v165, "feťáků", "f****ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v166, "feťáky", "f****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v167, "feťáci", "f****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v168, "feťačka", "f*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v169, "feťačce", "f*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v170, "děvkách", "d*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v171, "děvky", "d***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v172, "děvkař", "d****ř");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v173, "děvka", "d***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v174, "dementů", "d*****ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v175, "dementy", "d*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v176, "dementem", "d******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v177, "demente", "d*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v178, "dementat", "d******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v179, "dementa", "d*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v180, "dement", "d****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v181, "debílek", "d*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v182, "debile", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v183, "cigošům", "c*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v184, "cigoše", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v185, "cigoš", "c***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v186, "chčijou", "c*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v187, "chcačky", "c*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v188, "chcanky", "c*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v189, "buzioblečku", "b*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v190, "buziku", "b****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v191, "buzerantů", "b*******ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v192, "buzerant", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v193, "blbů", "b**ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v194, "blbý", "b**ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v195, "blbínku", "b*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v196, "blbí", "b**í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v197, "blbého", "b****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v198, "blbé", "b**é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v199, "blbá", "b**á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v200, "blby", "b**y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v201, "blbu", "b**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v202, "blbovi", "b****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v203, "blboučtí", "b******í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v204, "blbouny", "b*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v205, "blbou", "b***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v206, "blbostí", "b*****í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v207, "blbosti", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v208, "blbost", "b****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v209, "blbnout", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v210, "blbne", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v211, "blbka", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v212, "blbino", "b****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v213, "blbi", "b**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v214, "blbečky", "b*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v215, "blbečku", "b*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v216, "blbečkové", "b*******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v217, "blbečci", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v218, "blbejch", "b*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v219, "blbe", "b**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v220, "blbců", "b***ů");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v221, "blbci", "b***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v222, "blbce", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v223, "blba", "b**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v224, "blb", "b*b");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_cs(void)::sProfanityData_cs, (uint64_t)v5, 0xDCuLL);
    for (i = 0; i != -1320; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v224[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_cs(void)::sProfanityData_cs, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_cs(void)::sProfanityData_cs[0], unk_1EF581FA8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF581FA8 - GetProfanityFilter_cs(void)::sProfanityData_cs[0]) >> 4));
}

void sub_1BF9D48F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 10512;
  v4 = -10560;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_ru(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[6];
  _QWORD v556[6];
  _QWORD v557[6];
  _QWORD v558[6];
  _QWORD v559[6];
  _QWORD v560[6];
  _QWORD v561[6];
  _QWORD v562[6];
  _QWORD v563[6];
  _QWORD v564[6];
  _QWORD v565[6];
  _QWORD v566[6];
  _QWORD v567[6];
  _QWORD v568[6];
  _QWORD v569[6];
  _QWORD v570[6];
  _QWORD v571[6];
  _QWORD v572[6];
  _QWORD v573[6];
  _QWORD v574[6];
  _QWORD v575[6];
  _QWORD v576[6];
  _QWORD v577[6];
  _QWORD v578[6];
  _QWORD v579[6];
  _QWORD v580[6];
  _QWORD v581[6];
  _QWORD v582[6];
  _QWORD v583[6];
  _QWORD v584[6];
  _QWORD v585[6];
  _QWORD v586[6];
  _QWORD v587[6];
  _QWORD v588[6];
  _QWORD v589[6];
  _QWORD v590[6];
  _QWORD v591[6];
  _QWORD v592[6];
  _QWORD v593[6];
  _QWORD v594[6];
  _QWORD v595[6];
  _QWORD v596[6];
  _QWORD v597[6];
  _QWORD v598[6];
  _QWORD v599[6];
  _QWORD v600[6];
  _QWORD v601[6];
  _QWORD v602[6];
  _QWORD v603[6];
  _QWORD v604[6];
  _QWORD v605[6];
  _QWORD v606[6];
  _QWORD v607[6];
  _QWORD v608[6];
  _QWORD v609[6];
  _QWORD v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[6];
  _QWORD v622[6];
  _QWORD v623[6];
  _QWORD v624[6];
  _QWORD v625[6];
  _QWORD v626[6];
  _QWORD v627[6];
  _QWORD v628[6];
  _QWORD v629[6];
  _QWORD v630[6];
  _QWORD v631[6];
  _QWORD v632[6];
  _QWORD v633[6];
  _QWORD v634[6];
  _QWORD v635[6];
  _QWORD v636[6];
  _QWORD v637[6];
  _QWORD v638[6];
  _QWORD v639[6];
  _QWORD v640[6];
  _QWORD v641[6];
  _QWORD v642[6];
  _QWORD v643[6];
  _QWORD v644[6];
  _QWORD v645[6];
  _QWORD v646[6];
  _QWORD v647[6];
  _QWORD v648[6];
  _QWORD v649[6];
  _QWORD v650[6];
  _QWORD v651[6];
  _QWORD v652[6];
  _QWORD v653[6];
  _QWORD v654[6];
  _QWORD v655[6];
  _QWORD v656[6];
  _QWORD v657[6];
  _QWORD v658[6];
  _QWORD v659[6];
  _QWORD v660[6];
  _QWORD v661[6];
  _QWORD v662[6];
  _QWORD v663[6];
  _QWORD v664[6];
  _QWORD v665[6];
  _QWORD v666[6];
  _QWORD v667[6];
  _QWORD v668[6];
  _QWORD v669[6];
  _QWORD v670[6];
  _QWORD v671[6];
  _QWORD v672[6];
  _QWORD v673[6];
  _QWORD v674[6];
  _QWORD v675[6];
  _QWORD v676[6];
  _QWORD v677[6];
  _QWORD v678[6];
  _QWORD v679[6];
  _QWORD v680[6];
  _QWORD v681[6];
  _QWORD v682[6];
  _QWORD v683[6];
  _QWORD v684[6];
  _QWORD v685[6];
  _QWORD v686[6];
  _QWORD v687[6];
  _QWORD v688[6];
  _QWORD v689[6];
  _QWORD v690[6];
  _QWORD v691[6];
  _QWORD v692[6];
  _QWORD v693[6];
  _QWORD v694[6];
  _QWORD v695[6];
  _QWORD v696[6];
  _QWORD v697[6];
  _QWORD v698[6];
  _QWORD v699[6];
  _QWORD v700[6];
  _QWORD v701[6];
  _QWORD v702[6];
  _QWORD v703[6];
  _QWORD v704[6];
  _QWORD v705[6];
  _QWORD v706[6];
  _QWORD v707[6];
  _QWORD v708[6];
  _QWORD v709[6];
  _QWORD v710[6];
  _QWORD v711[6];
  _QWORD v712[6];
  _QWORD v713[6];
  _QWORD v714[6];
  _QWORD v715[6];
  _QWORD v716[6];
  _QWORD v717[6];
  _QWORD v718[6];
  _QWORD v719[6];
  _QWORD v720[6];
  _QWORD v721[6];
  _QWORD v722[6];
  _QWORD v723[6];
  _QWORD v724[6];
  _QWORD v725[6];
  _QWORD v726[6];
  _QWORD v727[6];
  _QWORD v728[6];
  _QWORD v729[6];
  _QWORD v730[6];
  _QWORD v731[6];
  _QWORD v732[6];
  _QWORD v733[6];
  _QWORD v734[6];
  _QWORD v735[6];
  _QWORD v736[6];
  _QWORD v737[6];
  _QWORD v738[6];
  _QWORD v739[6];
  _QWORD v740[6];
  _QWORD v741[6];
  _QWORD v742[6];
  _QWORD v743[6];
  _QWORD v744[6];
  _QWORD v745[6];
  _QWORD v746[6];
  _QWORD v747[6];
  _QWORD v748[6];
  _QWORD v749[6];
  _QWORD v750[6];
  _QWORD v751[6];
  _QWORD v752[6];
  _QWORD v753[6];
  _QWORD v754[6];
  _QWORD v755[6];
  _QWORD v756[6];
  _QWORD v757[6];
  _QWORD v758[6];
  _QWORD v759[6];
  _QWORD v760[6];
  _QWORD v761[6];
  _QWORD v762[6];
  _QWORD v763[6];
  _QWORD v764[6];
  _QWORD v765[6];
  _QWORD v766[6];
  _QWORD v767[6];
  _QWORD v768[6];
  _QWORD v769[6];
  _QWORD v770[6];
  _QWORD v771[6];
  _QWORD v772[6];
  _QWORD v773[6];
  _QWORD v774[6];
  _QWORD v775[6];
  _QWORD v776[6];
  _QWORD v777[6];
  _QWORD v778[6];
  _QWORD v779[6];
  _QWORD v780[6];
  _QWORD v781[6];
  _QWORD v782[6];
  _QWORD v783[6];
  _QWORD v784[6];
  _QWORD v785[6];
  _QWORD v786[6];
  _QWORD v787[6];
  _QWORD v788[6];
  _QWORD v789[6];
  _QWORD v790[6];
  _QWORD v791[6];
  _QWORD v792[6];
  _QWORD v793[6];
  _QWORD v794[6];
  _QWORD v795[6];
  _QWORD v796[6];
  _QWORD v797[6];
  _QWORD v798[6];
  _QWORD v799[6];
  _QWORD v800[6];
  _QWORD v801[6];
  _QWORD v802[6];
  _QWORD v803[6];
  _QWORD v804[6];
  _QWORD v805[6];
  _QWORD v806[6];
  _QWORD v807[6];
  _QWORD v808[6];
  _QWORD v809[6];
  _QWORD v810[6];
  _QWORD v811[6];
  _QWORD v812[6];
  _QWORD v813[6];
  _QWORD v814[6];
  _QWORD v815[6];
  _QWORD v816[6];
  _QWORD v817[6];
  _QWORD v818[6];
  _QWORD v819[6];
  _QWORD v820[6];
  _QWORD v821[6];
  _QWORD v822[6];
  _QWORD v823[6];
  _QWORD v824[6];
  _QWORD v825[6];
  _QWORD v826[6];
  _QWORD v827[6];
  _QWORD v828[6];
  _QWORD v829[6];
  _QWORD v830[6];
  _QWORD v831[6];
  _QWORD v832[6];
  _QWORD v833[6];
  _QWORD v834[6];
  _QWORD v835[6];
  _QWORD v836[6];
  _QWORD v837[6];
  _QWORD v838[6];
  _QWORD v839[6];
  _QWORD v840[6];
  _QWORD v841[6];
  _QWORD v842[6];
  _QWORD v843[6];
  _QWORD v844[6];
  _QWORD v845[6];
  _QWORD v846[6];
  _QWORD v847[6];
  _QWORD v848[6];
  _QWORD v849[6];
  _QWORD v850[6];
  _QWORD v851[6];
  _QWORD v852[6];
  _QWORD v853[6];
  _QWORD v854[6];
  _QWORD v855[6];
  _QWORD v856[6];
  _QWORD v857[6];
  _QWORD v858[6];
  _QWORD v859[6];
  _QWORD v860[6];
  _QWORD v861[6];
  _QWORD v862[6];
  _QWORD v863[6];
  _QWORD v864[6];
  _QWORD v865[6];
  _QWORD v866[6];
  _QWORD v867[6];
  _QWORD v868[6];
  _QWORD v869[6];
  _QWORD v870[6];
  _QWORD v871[6];
  _QWORD v872[6];
  _QWORD v873[6];
  _QWORD v874[6];
  _QWORD v875[6];
  _QWORD v876[6];
  _QWORD v877[6];
  _QWORD v878[6];
  _QWORD v879[6];
  _QWORD v880[6];
  _QWORD v881[6];
  _QWORD v882[6];
  _QWORD v883[6];
  _QWORD v884[6];
  _QWORD v885[6];
  _QWORD v886[6];
  _QWORD v887[6];
  _QWORD v888[6];
  _QWORD v889[6];
  _QWORD v890[6];
  _QWORD v891[6];
  _QWORD v892[6];
  _QWORD v893[6];
  _QWORD v894[6];
  _QWORD v895[6];
  _QWORD v896[6];
  _QWORD v897[6];
  _QWORD v898[6];
  _QWORD v899[6];
  _QWORD v900[6];
  _QWORD v901[6];
  _QWORD v902[6];
  _QWORD v903[6];
  _QWORD v904[6];
  _QWORD v905[6];
  _QWORD v906[6];
  _QWORD v907[6];
  _QWORD v908[6];
  _QWORD v909[6];
  _QWORD v910[6];
  _QWORD v911[6];
  _QWORD v912[6];
  _QWORD v913[6];
  _QWORD v914[6];
  _QWORD v915[6];
  _QWORD v916[6];
  _QWORD v917[6];
  _QWORD v918[6];
  _QWORD v919[6];
  _QWORD v920[6];
  _QWORD v921[6];
  _QWORD v922[6];
  _QWORD v923[6];
  _QWORD v924[6];
  _QWORD v925[6];
  _QWORD v926[6];
  _QWORD v927[6];
  _QWORD v928[6];
  _QWORD v929[6];
  _QWORD v930[6];
  _QWORD v931[6];
  _QWORD v932[6];
  _QWORD v933[6];
  _QWORD v934[6];
  _QWORD v935[6];
  _QWORD v936[6];
  _QWORD v937[6];
  _QWORD v938[6];
  _QWORD v939[6];
  _QWORD v940[6];
  _QWORD v941[6];
  _QWORD v942[6];
  _QWORD v943[6];
  _QWORD v944[6];
  _QWORD v945[6];
  _QWORD v946[6];
  _QWORD v947[6];
  _QWORD v948[6];
  _QWORD v949[6];
  _QWORD v950[6];
  _QWORD v951[6];
  _QWORD v952[6];
  _QWORD v953[6];
  _QWORD v954[6];
  _QWORD v955[6];
  _QWORD v956[6];
  _QWORD v957[6];
  _QWORD v958[6];
  _QWORD v959[6];
  _QWORD v960[6];
  _QWORD v961[6];
  _QWORD v962[6];
  _QWORD v963[6];
  _QWORD v964[6];
  _QWORD v965[6];
  _QWORD v966[6];
  _QWORD v967[6];
  _QWORD v968[6];
  _QWORD v969[6];
  _QWORD v970[6];
  _QWORD v971[6];
  _QWORD v972[6];
  _QWORD v973[6];
  _QWORD v974[6];
  _QWORD v975[6];
  _QWORD v976[6];
  _QWORD v977[6];
  _QWORD v978[6];
  _QWORD v979[6];
  _QWORD v980[6];
  _QWORD v981[6];
  _QWORD v982[6];
  _QWORD v983[6];
  _QWORD v984[6];
  _QWORD v985[6];
  _QWORD v986[6];
  _QWORD v987[6];
  _QWORD v988[6];
  _QWORD v989[6];
  _QWORD v990[6];
  _QWORD v991[6];
  _QWORD v992[6];
  _QWORD v993[6];
  _QWORD v994[6];
  _QWORD v995[6];
  _QWORD v996[6];
  _QWORD v997[6];
  _QWORD v998[6];
  _QWORD v999[6];
  _QWORD v1000[6];
  _QWORD v1001[6];
  _QWORD v1002[6];
  _QWORD v1003[6];
  _QWORD v1004[6];
  _QWORD v1005[6];
  _QWORD v1006[6];
  _QWORD v1007[6];
  _QWORD v1008[6];
  _QWORD v1009[6];
  _QWORD v1010[6];
  _QWORD v1011[6];
  _QWORD v1012[6];
  _QWORD v1013[6];
  _QWORD v1014[6];
  _QWORD v1015[6];
  _QWORD v1016[6];
  _QWORD v1017[6];
  _QWORD v1018[6];
  _QWORD v1019[6];
  _QWORD v1020[6];
  _QWORD v1021[6];
  _QWORD v1022[6];
  _QWORD v1023[6];
  _QWORD v1024[6];
  _QWORD v1025[6];
  _QWORD v1026[6];
  _QWORD v1027[6];
  _QWORD v1028[6];
  _QWORD v1029[6];
  _QWORD v1030[6];
  _QWORD v1031[6];
  _QWORD v1032[6];
  _QWORD v1033[6];
  _QWORD v1034[6];
  _QWORD v1035[6];
  _QWORD v1036[6];
  _QWORD v1037[6];
  _QWORD v1038[6];
  _QWORD v1039[6];
  _QWORD v1040[6];
  _QWORD v1041[6];
  _QWORD v1042[6];
  _QWORD v1043[6];
  _QWORD v1044[6];
  _QWORD v1045[6];
  _QWORD v1046[6];
  _QWORD v1047[6];
  _QWORD v1048[6];
  _QWORD v1049[6];
  _QWORD v1050[6];
  _QWORD v1051[6];
  _QWORD v1052[6];
  _QWORD v1053[6];
  _QWORD v1054[6];
  _QWORD v1055[6];
  _QWORD v1056[6];
  _QWORD v1057[6];
  _QWORD v1058[6];
  _QWORD v1059[6];
  _QWORD v1060[6];
  _QWORD v1061[6];
  _QWORD v1062[6];
  _QWORD v1063[6];
  _QWORD v1064[6];
  _QWORD v1065[6];
  _QWORD v1066[6];
  _QWORD v1067[6];
  _QWORD v1068[6];
  _QWORD v1069[6];
  _QWORD v1070[6];
  _QWORD v1071[6];
  _QWORD v1072[6];
  _QWORD v1073[6];
  _QWORD v1074[6];
  _QWORD v1075[6];
  _QWORD v1076[6];
  _QWORD v1077[6];
  _QWORD v1078[6];
  _QWORD v1079[6];
  _QWORD v1080[6];
  _QWORD v1081[6];
  _QWORD v1082[6];
  _QWORD v1083[6];
  _QWORD v1084[6];
  _QWORD v1085[6];
  _QWORD v1086[6];
  _QWORD v1087[6];
  _QWORD v1088[6];
  _QWORD v1089[6];
  _QWORD v1090[6];
  _QWORD v1091[6];
  _QWORD v1092[6];
  _QWORD v1093[6];
  _QWORD v1094[6];
  _QWORD v1095[6];
  _QWORD v1096[6];
  _QWORD v1097[6];
  _QWORD v1098[6];
  _QWORD v1099[6];
  _QWORD v1100[6];
  _QWORD v1101[6];
  _QWORD v1102[6];
  _QWORD v1103[6];
  _QWORD v1104[6];
  _QWORD v1105[6];
  _QWORD v1106[6];
  _QWORD v1107[6];
  _QWORD v1108[6];
  _QWORD v1109[6];
  _QWORD v1110[6];
  _QWORD v1111[6];
  _QWORD v1112[6];
  _QWORD v1113[6];
  _QWORD v1114[6];
  _QWORD v1115[6];
  _QWORD v1116[6];
  _QWORD v1117[6];
  _QWORD v1118[6];
  _QWORD v1119[6];
  _QWORD v1120[6];
  _QWORD v1121[6];
  _QWORD v1122[6];
  _QWORD v1123[6];
  _QWORD v1124[6];
  _QWORD v1125[6];
  _QWORD v1126[6];
  _QWORD v1127[6];
  _QWORD v1128[6];
  _QWORD v1129[6];
  _QWORD v1130[6];
  _QWORD v1131[6];
  _QWORD v1132[6];
  _QWORD v1133[6];
  _QWORD v1134[6];
  _QWORD v1135[6];
  _QWORD v1136[6];
  _QWORD v1137[6];
  _QWORD v1138[6];
  _QWORD v1139[6];
  _QWORD v1140[6];
  _QWORD v1141[6];
  _QWORD v1142[6];
  _QWORD v1143[6];
  _QWORD v1144[6];
  _QWORD v1145[6];
  _QWORD v1146[6];
  _QWORD v1147[6];
  _QWORD v1148[6];
  _QWORD v1149[6];
  _QWORD v1150[6];
  _QWORD v1151[6];
  _QWORD v1152[6];
  _QWORD v1153[6];
  _QWORD v1154[6];
  _QWORD v1155[6];
  _QWORD v1156[6];
  _QWORD v1157[6];
  _QWORD v1158[6];
  _QWORD v1159[6];
  _QWORD v1160[6];
  _QWORD v1161[6];
  _QWORD v1162[6];
  _QWORD v1163[6];
  _QWORD v1164[6];
  _QWORD v1165[6];
  _QWORD v1166[6];
  _QWORD v1167[6];
  _QWORD v1168[6];
  _QWORD v1169[6];
  _QWORD v1170[6];
  _QWORD v1171[6];
  _QWORD v1172[6];
  _QWORD v1173[6];
  _QWORD v1174[6];
  _QWORD v1175[6];
  _QWORD v1176[6];
  _QWORD v1177[6];
  _QWORD v1178[6];
  _QWORD v1179[6];
  _QWORD v1180[6];
  _QWORD v1181[6];
  _QWORD v1182[6];
  _QWORD v1183[6];
  _QWORD v1184[6];
  _QWORD v1185[6];
  _QWORD v1186[6];
  _QWORD v1187[6];
  _QWORD v1188[6];
  _QWORD v1189[6];
  _QWORD v1190[6];
  _QWORD v1191[6];
  _QWORD v1192[6];
  _QWORD v1193[6];
  _QWORD v1194[6];
  _QWORD v1195[6];
  _QWORD v1196[6];
  _QWORD v1197[6];
  _QWORD v1198[6];
  _QWORD v1199[6];
  _QWORD v1200[6];
  _QWORD v1201[6];
  _QWORD v1202[6];
  _QWORD v1203[6];
  _QWORD v1204[6];
  _QWORD v1205[6];
  _QWORD v1206[6];
  _QWORD v1207[6];
  _QWORD v1208[6];
  _QWORD v1209[6];
  _QWORD v1210[6];
  _QWORD v1211[6];
  _QWORD v1212[6];
  _QWORD v1213[6];
  _QWORD v1214[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v1214[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v5, "ёбля", "ё**я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v6, "ёбат", "ё**т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v7, "ёбарь", "ё***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v8, "ёбаный", "ё****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v9, "ёбаную", "ё****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v10, "ёбанный", "ё*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v11, "ёбаная", "ё****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v12, "ёбан", "ё**н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v13, "шлюха", "ш***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v14, "хуёвый", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v15, "хуёвое", "х****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v16, "хуёвая", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v17, "хуя", "х*я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v18, "хуйям", "х***м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v19, "хуйчик", "х****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v20, "хуйцы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v21, "хуйцу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v22, "хуйцом", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v23, "хуйцов", "х****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v24, "хуйцо", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v25, "хуйце", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v26, "хуйцах", "х****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v27, "хуйцам", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v28, "хуйца", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v29, "хуйхуй", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v30, "хуйхаа", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v31, "хуйфон", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v32, "хуйтэн", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v33, "хуйты", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v34, "хуйту", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v35, "хуйто", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v36, "хуйте", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v37, "хуйтам", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v38, "хуйта", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v39, "хуйски", "х****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v40, "хуйрик", "х****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v41, "хуйота", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v42, "хуйовый", "х*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v43, "хуйовые", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v44, "хуйовое", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v45, "хуйово", "х****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v46, "хуйовая", "х*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v47, "хуйова", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v48, "хуйнёт", "х****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v49, "хуйнём", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v50, "хуйнёй", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v51, "хуйняя", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v52, "хуйняшка", "х******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v53, "хуйнях", "х****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v54, "хуйняс", "х****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v55, "хуйняно", "х*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v56, "хуйняне", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v57, "хуйнями", "х*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v58, "хуйняи", "х****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v59, "хуйняв", "х****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v60, "хуйняа", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v61, "хуйня", "х***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v62, "хуйнюя", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v63, "хуйнюю", "х****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v64, "хуйнюшку", "х******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v65, "хуйнюшки", "х******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v66, "хуйнюшка", "х******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v67, "хуйнюша", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v68, "хуйнюну", "х*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v69, "хуйню", "х***ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v70, "хуйнуть", "х*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v71, "хуйнулся", "х******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v72, "хуйнуло", "х*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v73, "хуйнули", "х*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v74, "хуйнула", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v75, "хуйнул", "х****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v76, "хуйну", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v77, "хуйной", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v78, "хуйно", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v79, "хуйнища", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v80, "хуйните", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v81, "хуйни", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v82, "хуйнеё", "х****ё");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v83, "хуйнею", "х****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v84, "хуйнет", "х****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v85, "хуйнем", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v86, "хуйней", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v87, "хуйнее", "х****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v88, "хуйне", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v89, "хуйная", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v90, "хуйнаны", "х*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v91, "хуйнана", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v92, "хуйна", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v93, "хуйль", "х***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v94, "хуйлыга", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v95, "хуйлы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v96, "хуйлу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v97, "хуйлоша", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v98, "хуйлом", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v99, "хуйло", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v100, "хуйлище", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v101, "хуйлион", "х*****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v102, "хуйли", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v103, "хуйле", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v104, "хуйланы", "х*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v105, "хуйлана", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v106, "хуйлан", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v107, "хуйла", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v108, "хуйком", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v109, "хуйки", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v110, "хуйка", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v111, "хуйи", "х**и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v112, "хуйево", "х****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v113, "хуйда", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v114, "хуйво", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v115, "хуйвей", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v116, "хуй-чего", "х******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v117, "хуй", "х*й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v118, "хуисос", "х****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v119, "хуилы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v120, "хуилу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v121, "хуило", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v122, "хуесос", "х****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v123, "хуевый", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v124, "хуевое", "х****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v125, "хуевая", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v126, "хуебля", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v127, "хитровыебанный", "х************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v128, "хер", "х*р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v129, "уёбок", "у***к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v130, "уёбище", "у****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v131, "упиздить", "у******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v132, "уебок", "у***к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v133, "уебище", "у****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v134, "уебать", "у****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v135, "уебаны", "у****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v136, "уебан", "у***н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v137, "трахнуть", "т******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v138, "трахаёб", "т*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v139, "трахать", "т*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v140, "трахатель", "т*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v141, "трахаеб", "т*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v142, "трахае6", "т*****6");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v143, "съебаться", "с*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v144, "съебать", "с*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v145, "сука", "с**а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v146, "страхопиздище", "с***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v147, "спиздиться", "с********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v148, "спиздить", "с******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v149, "спиздит", "с*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v150, "спиздили", "с******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v151, "спиздила", "с******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v152, "спиздил", "с*****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v153, "спиздеть", "с******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v154, "спиздел", "с*****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v155, "распиздяйство", "р***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v156, "распиздяйка", "р*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v157, "распиздяй", "р*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v158, "распиздон", "р*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v159, "распиздеться", "р**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v160, "распиздай", "р*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v161, "разёбанный", "р********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v162, "разъебаться", "р*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v163, "разъебать", "р*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v164, "разебанный", "р********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v165, "пропиздячить", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v166, "пропиздить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v167, "пропиздеть", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v168, "пропизделся", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v169, "проебаться", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v170, "проебать", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v171, "проебанка", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v172, "проблядь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v173, "припиздюлина", "п**********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v174, "припизднутый", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v175, "припиздить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v176, "припиздень", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v177, "приебаться", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v178, "похуй", "п***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v179, "потрахаться", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v180, "попиздовать", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v181, "попиздили", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v182, "попизди", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v183, "попиздеть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v184, "попиздели", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v185, "поебать", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v186, "подъебать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v187, "пиздёшь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v188, "пиздёш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v189, "пиздёныш", "п******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v190, "пиздёнку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v191, "пиздёнкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v192, "пиздёнки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v193, "пиздёнке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v194, "пиздёнка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v195, "пиздёжь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v196, "пиздёжи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v197, "пиздёжа", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v198, "пиздёж", "п****ж");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v199, "пиздящих", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v200, "пиздящим", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v201, "пиздящий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v202, "пиздящие", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v203, "пиздящее", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v204, "пиздящая", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v205, "пиздяшек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v206, "пиздячу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v207, "пиздячку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v208, "пиздячки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v209, "пиздячить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v210, "пиздячит", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v211, "пиздячил", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v212, "пиздячик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v213, "пиздячек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v214, "пиздячат", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v215, "пиздяться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v216, "пиздять", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v217, "пиздятся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v218, "пиздятну", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v219, "пиздятины", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v220, "пиздятиной", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v221, "пиздятинки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v222, "пиздятинка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v223, "пиздятина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v224, "пиздят", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v225, "пиздярить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v226, "пиздянок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v227, "пиздян", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v228, "пиздяк", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v229, "пиздяй", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v230, "пиздя", "п***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v231, "пиздюшонок", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v232, "пиздюшок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v233, "пиздюшня", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v234, "пиздюшный", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v235, "пиздюшник", "п*******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v236, "пиздюшку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v237, "пиздюшкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v238, "пиздюшки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v239, "пиздюшке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v240, "пиздюшка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v241, "пиздюшечка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v242, "пиздюшек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v243, "пиздюша", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v244, "пиздючье", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v245, "пиздючку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v246, "пиздючкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v247, "пиздючки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v248, "пиздючка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v249, "пиздючий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v250, "пиздючие", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v251, "пиздючек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v252, "пиздюху", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v253, "пиздюхой", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v254, "пиздюхи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v255, "пиздюхе", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v256, "пиздюхать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v257, "пиздюха", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v258, "пиздюрить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v259, "пиздюляшек", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v260, "пиздюлях", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v261, "пиздюляторов", "п**********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v262, "пиздюлями", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v263, "пиздюлям", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v264, "пиздюля", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v265, "пиздюлю", "п*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v266, "пиздюльки", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v267, "пиздюлька", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v268, "пиздюль", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v269, "пиздюлины", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v270, "пиздюлину", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v271, "пиздюлинку", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v272, "пиздюлинки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v273, "пиздюлинка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v274, "пиздюлине", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v275, "пиздюлинами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v276, "пиздюлина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v277, "пиздюлин", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v278, "пиздюликов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v279, "пиздюли", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v280, "пиздюлек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v281, "пиздюлей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v282, "пиздюлеи", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v283, "пиздюлеей", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v284, "пиздюку", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v285, "пиздюком", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v286, "пиздюков", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v287, "пиздюки", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v288, "пиздюками", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v289, "пиздюкам", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v290, "пиздюка", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v291, "пиздюк", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v292, "пиздюдей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v293, "пиздюга", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v294, "пиздю", "п***ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v295, "пиздэйшн", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v296, "пиздэйшен", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v297, "пиздь", "п***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v298, "пиздыя", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v299, "пиздыц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v300, "пиздытый", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v301, "пиздык", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v302, "пизды", "п***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v303, "пиздца", "п****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v304, "пиздуя", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v305, "пиздуют", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v306, "пиздую", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v307, "пиздушку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v308, "пиздушка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v309, "пиздуц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v310, "пиздуховные", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v311, "пиздуу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v312, "пиздунья", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v313, "пиздуны", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v314, "пиздуном", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v315, "пиздунов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v316, "пиздуна", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v317, "пиздун", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v318, "пиздуля", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v319, "пиздулей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v320, "пиздула", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v321, "пиздуйте", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v322, "пиздуйка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v323, "пиздуй", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v324, "пиздуешь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v325, "пиздуете", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v326, "пиздует", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v327, "пиздуем", "п*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v328, "пизду", "п***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v329, "пиздтый", "п*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v330, "пиздрячить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v331, "пиздруй", "п*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v332, "пиздравляю", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v333, "пиздою", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v334, "пиздошу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v335, "пиздошить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v336, "пиздошит", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v337, "пиздохаю", "п******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v338, "пиздохаханьки", "п***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v339, "пиздохать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v340, "пиздохай", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v341, "пиздоу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v342, "пиздоты", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v343, "пиздотина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v344, "пиздота", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v345, "пиздося", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v346, "пиздосья", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v347, "пиздострадашки", "п************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v348, "пиздострадашек", "п************к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v349, "пиздострадатель", "п*************ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v350, "пиздостраданиях", "п*************х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v351, "пиздостраданиями", "п**************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v352, "пиздостраданиям", "п*************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v353, "пиздострадания", "п************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v354, "пиздостраданий", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v355, "пиздострадание", "п************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(v356, "пиздострадальческий", "п*****************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(v357, "пиздострадальческие", "п*****************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v358, "пиздострадальцы", "п*************ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v359, "пиздострадальцам", "п**************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v360, "пиздострадалицы", "п*************ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v361, "пиздострадалец", "п************ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v362, "пиздосс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v363, "пиздосов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v364, "пиздосина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v365, "пиздосики", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v366, "пиздосик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v367, "пиздоси", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v368, "пиздосей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v369, "пиздоса", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v370, "пиздос", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v371, "пиздорукий", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v372, "пиздорукая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v373, "пиздорич", "п******ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v374, "пиздорить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v375, "пиздорез", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v376, "пиздорванки", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v377, "пиздорванка", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v378, "пиздорванец", "п*********ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v379, "пиздор", "п****р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v380, "пиздопроёбина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v381, "пиздопроушина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v382, "пиздопротивный", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v383, "пиздопроебины", "п***********ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v384, "пиздопроебина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v385, "пиздоос", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v386, "пиздонуть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v387, "пиздонутые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v388, "пиздони", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v389, "пиздон", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v390, "пиздолить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v391, "пиздолизы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v392, "пиздолизом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v393, "пиздолизов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v394, "пиздолизка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v395, "пиздолизами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v396, "пиздолиза", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v397, "пиздолиз", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v398, "пиздолет", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v399, "пиздокрылая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v400, "пиздокрыл", "п*******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v401, "пиздок", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v402, "пиздой", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v403, "пиздоеб", "п*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v404, "пиздодень", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v405, "пиздодельный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v406, "пиздодельные", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v407, "пиздодельная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v408, "пиздоглазых", "п*********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v409, "пиздоглазыми", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v410, "пиздоглазый", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v411, "пиздоглазые", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v412, "пиздоглазой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v413, "пиздоглазое", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v414, "пиздоглазие", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v415, "пиздоглазая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v416, "пиздоглаз", "п*******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v417, "пиздоган", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v418, "пиздоворот", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v419, "пиздовать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v420, "пиздоватый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v421, "пиздоватые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v422, "пиздоватой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v423, "пиздоватое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v424, "пиздоватая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v425, "пиздовали", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v426, "пиздовала", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v427, "пиздовал", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v428, "пиздов", "п****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v429, "пиздобратия", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v430, "пиздобратию", "п*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v431, "пиздобратии", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v432, "пиздобольством", "п************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v433, "пиздобольство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v434, "пиздобольства", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v435, "пиздоболы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v436, "пиздоболом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v437, "пиздоболов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v438, "пиздоболкой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v439, "пиздоболка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v440, "пиздоболия", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v441, "пиздоболию", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v442, "пиздоболить", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v443, "пиздоболии", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v444, "пиздоболие", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v445, "пиздоболами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v446, "пиздобола", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v447, "пиздобол", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v448, "пиздоблядство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v449, "пиздоблядский", "п***********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v450, "пиздоблядская", "п***********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v451, "пиздоблядина", "п**********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v452, "пиздо", "п***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v453, "пизднц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v454, "пиздлявых", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v455, "пиздлявый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v456, "пиздлявые", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v457, "пиздлявой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v458, "пиздлявая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v459, "пиздлом", "п*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v460, "пиздло", "п****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v461, "пиздливых", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v462, "пиздливым", "п*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v463, "пиздливый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v464, "пиздливые", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v465, "пиздливы", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v466, "пиздливое", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v467, "пиздливая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v468, "пиздлив", "п*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v469, "пиздия", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v470, "пиздиют", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v471, "пиздию", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v472, "пиздищи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v473, "пиздище", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v474, "пиздища", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v475, "пиздишься", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v476, "пиздишь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v477, "пиздиш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v478, "пиздица", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v479, "пиздиц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v480, "пиздиться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v481, "пиздить", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v482, "пиздится", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v483, "пиздити", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v484, "пиздитесь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v485, "пиздите", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v486, "пиздит", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v487, "пиздис", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v488, "пиздиной", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v489, "пиздинг", "п*****г");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v490, "пиздина", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v491, "пиздимся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v492, "пиздим", "п****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v493, "пиздился", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v494, "пиздилок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v495, "пиздилово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v496, "пиздиловки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v497, "пиздиловка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v498, "пиздилку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v499, "пиздилки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v500, "пиздилка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v501, "пиздились", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v502, "пиздили", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v503, "пиздилась", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v504, "пиздила", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v505, "пиздил", "п****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v506, "пиздикулус", "п********с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v507, "пиздика", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v508, "пиздий", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v509, "пиздиишь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v510, "пиздии", "п****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v511, "пиздиет", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v512, "пизди", "п***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v513, "пизджу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v514, "пиздешь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v515, "пиздешн", "п*****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v516, "пиздеш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v517, "пиздечик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v518, "пиздеця", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v519, "пиздецю", "п*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v520, "пиздець", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v521, "пиздецы", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v522, "пиздецъ", "п*****ъ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v523, "пиздецхочу", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v524, "пиздецу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v525, "пиздецты", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v526, "пиздецсижу", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v527, "пиздецс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v528, "пиздецпо", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v529, "пиздецочек", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v530, "пиздецом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v531, "пиздецок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v532, "пиздецовых", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v533, "пиздецовым", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v534, "пиздецовый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v535, "пиздецовые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v536, "пиздецовую", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v537, "пиздецовский", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v538, "пиздецовость", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v539, "пиздецовой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v540, "пиздецовое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v541, "пиздецово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v542, "пиздецович", "п********ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v543, "пиздецовее", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v544, "пиздецовая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v545, "пиздецов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v546, "пиздецный", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v547, "пиздецнадо", "п********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v548, "пиздецмне", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v549, "пиздецменя", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v550, "пиздецкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v551, "пиздецкое", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v552, "пиздецкого", "п********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v553, "пиздецко", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v554, "пиздецких", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v555, "пиздецким", "п*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v556, "пиздецкий", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v557, "пиздецкие", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v558, "пиздецки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v559, "пиздецкая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v560, "пиздеци", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v561, "пиздецесли", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v562, "пиздеце", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v563, "пиздецдаже", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v564, "пиздецда", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v565, "пиздецв", "п*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v566, "пиздецахах", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v567, "пиздецах", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v568, "пиздецами", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v569, "пиздецам", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v570, "пиздеца", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v571, "пиздец", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v572, "пиздеуц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v573, "пиздеться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v574, "пиздеть", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v575, "пиздетц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v576, "пиздетски", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v577, "пиздетс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v578, "пиздет", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v579, "пиздесь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v580, "пиздес", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v581, "пиздень", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v582, "пизденышь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v583, "пизденыши", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v584, "пизденыш", "п******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v585, "пизденочка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v586, "пизденок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v587, "пизденку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v588, "пизденкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v589, "пизденки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v590, "пизденке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v591, "пизденка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v592, "пиздени", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v593, "пиздельники", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v594, "пиздельник", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v595, "пизделся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v596, "пизделово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v597, "пизделовка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v598, "пиздело", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v599, "пизделку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v600, "пизделки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v601, "пизделка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v602, "пизделись", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v603, "пиздели", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v604, "пизделей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v605, "пиздела", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v606, "пиздел", "п****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v607, "пиздек", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v608, "пиздейшн", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v609, "пиздейшин", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v610, "пиздейшен", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v611, "пиздейц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v612, "пиздейро", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v613, "пиздей", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v614, "пиздез", "п****з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v615, "пиздежь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v616, "пиздежу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v617, "пиздежом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v618, "пиздежи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v619, "пиздежем", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v620, "пиздеже", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v621, "пиздежа", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v622, "пиздеж", "п****ж");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v623, "пиздеецц", "п******ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v624, "пиздеец", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v625, "пизде", "п***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v626, "пиздая", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v627, "пиздаче", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v628, "пиздач", "п****ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v629, "пиздация", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v630, "пиздахаханьки", "п***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v631, "пиздахана", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v632, "пиздаускас", "п********с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v633, "пиздать", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v634, "пиздатыый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v635, "пиздатых", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v636, "пиздатыми", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v637, "пиздатым", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v638, "пиздатый", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v639, "пиздатые", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v640, "пиздаты", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v641, "пиздатую", "п******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v642, "пиздатостью", "п*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v643, "пиздатость", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v644, "пиздатости", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v645, "пиздатоо", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v646, "пиздатому", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v647, "пиздатом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v648, "пиздатой", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v649, "пиздатое", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v650, "пиздатого", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v651, "пиздато", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v652, "пиздатни", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v653, "пиздатий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v654, "пиздатенькое", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v655, "пиздатенького", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v656, "пиздатенько", "п*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v657, "пиздатеньких", "п**********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v658, "пиздатенький", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v659, "пиздатенькие", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v660, "пиздатенькая", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v661, "пиздатейший", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v662, "пиздатейшие", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v663, "пиздатейшее", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v664, "пиздатейше", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v665, "пиздатейшая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v666, "пиздатей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v667, "пиздатее", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v668, "пиздатая", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v669, "пиздата", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v670, "пиздат", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v671, "пиздастрадашки", "п************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v672, "пиздастрадания", "п************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v673, "пиздастраданий", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v674, "пиздастрадалец", "п************ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v675, "пиздас", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v676, "пиздарулю", "п*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v677, "пиздарики", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v678, "пиздари", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v679, "пиздарез", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v680, "пиздарваньчик", "п***********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v681, "пиздапроёбина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v682, "пиздапроебины", "п***********ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v683, "пиздапроебина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v684, "пиздапизда", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v685, "пизданёшь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v686, "пизданётся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v687, "пизданёт", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v688, "пизданём", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v689, "пиздануца", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v690, "пиздануться", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v691, "пиздануть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v692, "пизданутых", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v693, "пизданутыми", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v694, "пизданутым", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v695, "пизданутый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v696, "пизданутые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v697, "пизданутую", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v698, "пизданутся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v699, "пизданутость", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v700, "пизданутости", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v701, "пизданутой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v702, "пизданутое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v703, "пизданутого", "п*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v704, "пизданутей", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v705, "пизданутая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v706, "пизданут", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v707, "пизданусь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v708, "пизданулся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v709, "пизданулось", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v710, "пиздануло", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v711, "пизданулись", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v712, "пизданули", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v713, "пизданулась", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v714, "пизданула", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v715, "пизданул", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v716, "пиздану", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v717, "пизданога", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v718, "пиздано", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v719, "пизданите", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v720, "пизданись", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v721, "пиздани", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v722, "пизданешься", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v723, "пизданешь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v724, "пизданется", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v725, "пизданете", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v726, "пизданет", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v727, "пизданем", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v728, "пиздами", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v729, "пиздамба", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v730, "пиздам", "п****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v731, "пиздализ", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v732, "пиздакшионер", "п**********р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v733, "пиздак", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v734, "пиздаебы", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v735, "пиздаебина", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v736, "пиздаеб", "п*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v737, "пиздаджигурда", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v738, "пиздадельный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v739, "пиздадельные", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v740, "пиздадельная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v741, "пиздада", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v742, "пиздаган", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v743, "пиздавать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v744, "пиздаватый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v745, "пиздаватые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v746, "пиздаболят", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v747, "пиздаболю", "п*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v748, "пиздабольству", "п***********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v749, "пиздабольством", "п************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v750, "пиздабольство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v751, "пиздабольстве", "п***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v752, "пиздабольства", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v753, "пиздабольный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v754, "пиздабольная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v755, "пиздаболь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v756, "пиздаболы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v757, "пиздаболу", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v758, "пиздаболом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v759, "пиздаболок", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v760, "пиздаболов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v761, "пиздаболку", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v762, "пиздаболкой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v763, "пиздаболки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v764, "пиздаболке", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v765, "пиздаболками", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v766, "пиздаболка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v767, "пиздаболия", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v768, "пиздаболию", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v769, "пиздаболище", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v770, "пиздаболишь", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v771, "пиздаболить", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v772, "пиздаболит", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v773, "пиздаболина", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v774, "пиздаболии", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v775, "пиздаболией", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v776, "пиздаболие", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v777, "пиздаболами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v778, "пиздаболам", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v779, "пиздабола", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v780, "пиздабол", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v781, "пиздаатыый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v782, "пизда", "п***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v783, "пизд", "п**д");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v784, "пидораска", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v785, "пидорасина", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v786, "пидорас", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v787, "пидор", "п***р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v788, "педрило", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v789, "педрила", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v790, "педик", "п***к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v791, "педерастина", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v792, "педераст", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v793, "охуительный", "о*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v794, "охуительное", "о*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v795, "охуительная", "о*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v796, "охуеть", "о****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v797, "охуенный", "о*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v798, "охуенное", "о*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v799, "охуенная", "о*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v800, "охуел", "о***л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v801, "отъебаться", "о********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v802, "отпиздячить", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v803, "отпиздить", "о*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v804, "остопиздить", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v805, "остопиздеть", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v806, "опиздинительный", "о*************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v807, "опиздинительное", "о*************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v808, "опиздинительная", "о*************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v809, "опизденивающе", "о***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v810, "опизде", "о****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v811, "однохуйственно", "о************о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v812, "обьебать", "о******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v813, "объебать", "о******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v814, "нихуя", "н***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v815, "нехуйственно", "н**********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v816, "нехуй", "н***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v817, "нахуйник", "н******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v818, "нахуй", "н***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v819, "настопиздить", "н**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v820, "настоебать", "н********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v821, "напиздить", "н*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v822, "напиздили", "н*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v823, "напиздело", "н*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v824, "напиздели", "н*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v825, "напиздел", "н******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v826, "наебать", "н*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v827, "мудачка", "м*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v828, "мудак", "м***к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v829, "манда", "м***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v830, "испиздить", "и*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v831, "злоебучий", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v832, "злоебучее", "з*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v833, "злоебучая", "з*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v834, "заёбанный", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v835, "затрахивать", "з*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v836, "затрахать", "з*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v837, "затрахали", "з*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v838, "затрахала", "з*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v839, "запиздячить", "з*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v840, "запиздеть", "з*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v841, "залупа", "з****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v842, "заебись", "з*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v843, "заебаться", "з*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v844, "заебать", "з*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v845, "заебатый", "з******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v846, "заебатая", "з******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v847, "заебанец", "з******ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v848, "заебало", "з*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v849, "заебали", "з*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v850, "заебала", "з*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v851, "заебал", "з****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[12],0>(v852, "заeбанный", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v853, "ебучий", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v854, "ебучее", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v855, "ебучая", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v856, "ебля", "е**я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v857, "ебло", "е**о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v858, "ебланка\n", "е*****\n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v859, "еблан\n", "е***\n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v860, "ебатюшки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v861, "ебатьялох", "е*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v862, "ебатья", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v863, "ебатьты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[18],0>(v864, "ебаться-сраться", "е*************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v865, "ебаться", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v866, "ебатьколотить", "е***********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[15],0>(v867, "ебать-копать", "е**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[17],0>(v868, "ебать-колотить", "е************ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v869, "ебать", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v870, "ебаты", "е***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v871, "ебату", "е***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v872, "ебатся", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v873, "ебатория", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v874, "ебаторию", "е******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v875, "ебаторий", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v876, "ебатня", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v877, "ебатню", "е****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v878, "ебатика", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v879, "ебати", "е***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v880, "ебатень", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v881, "ебате", "е***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v882, "ебата", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v883, "ебат", "е**т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v884, "ебарь", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v885, "ебанёшься", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v886, "ебанёшь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v887, "ебанётся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v888, "ебанёте", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v889, "ебанёт", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v890, "ебанём", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v891, "ебанята", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v892, "ебаням", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v893, "ебаня", "е***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v894, "ебаньтяй", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v895, "ебанькоо", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v896, "ебаньком", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v897, "ебанько", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v898, "ебаньки", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v899, "ебань", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v900, "ебаныый", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v901, "ебаных", "е****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v902, "ебанырот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v903, "ебаными", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v904, "ебаным", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v905, "ебаныйрот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v906, "ебаныйврот", "е********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v907, "ебаный", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v908, "ебаныи", "е****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v909, "ебаные", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v910, "ебаныврот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v911, "ебаны", "е***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v912, "ебаную", "е****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v913, "ебанушку", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v914, "ебанушкой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v915, "ебанушки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v916, "ебанушками", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v917, "ебанушкам", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v918, "ебанушка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v919, "ебанушек", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v920, "ебануцца", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v921, "ебануцо", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v922, "ебануца", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v923, "ебануха", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v924, "ебанууться", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v925, "ебануутая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v926, "ебанутьсяя", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v927, "ебануться", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v928, "ебануть", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v929, "ебанутых", "е******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v930, "ебанутыми", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v931, "ебанутым", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v932, "ебанутый", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v933, "ебанутые", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v934, "ебануты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v935, "ебанутую", "е******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v936, "ебанутся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v937, "ебанутством", "е*********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v938, "ебанутство", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v939, "ебанутства", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v940, "ебанутсво", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v941, "ебанутось", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v942, "ебанутостью", "е*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v943, "ебанутость", "е********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v944, "ебанутости", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v945, "ебанутостей", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v946, "ебанутому", "е*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v947, "ебанутом", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v948, "ебанутой", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v949, "ебанутое", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v950, "ебанутого", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v951, "ебануто", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v952, "ебанутки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v953, "ебанутка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v954, "ебанутики", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v955, "ебанутика", "е*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v956, "ебанутик", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v957, "ебанутий", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v958, "ебанутейший", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v959, "ебанутейшие", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v960, "ебанутейшая", "е*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v961, "ебанутей", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v962, "ебанутее", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v963, "ебануте", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v964, "ебанутаяя", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v965, "ебанутая", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v966, "ебанутаая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v967, "ебанутаЯ", "е******Я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v968, "ебанута", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v969, "ебанут", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v970, "ебанусь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v971, "ебанулся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v972, "ебанулсь", "е******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v973, "ебанулсо", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v974, "ебанулс", "е*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v975, "ебанулось", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v976, "ебануло", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v977, "ебанулисья", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v978, "ебанулись", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v979, "ебанули", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v980, "ебанулась", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v981, "ебанула", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v982, "ебанул", "е****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v983, "ебануй", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v984, "ебану", "е***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v985, "ебантяями", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v986, "ебантяям", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v987, "ебантяя", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v988, "ебантяйство", "е*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v989, "ебантяйства", "е*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v990, "ебантяйское", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v991, "ебантяйские", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v992, "ебантяйки", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v993, "ебантяйка", "е*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v994, "ебантяй", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v995, "ебантяи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v996, "ебантяем", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v997, "ебантяев", "е******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v998, "ебантизм", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v999, "ебантеи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1000, "ебанство", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1001, "ебанско", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1002, "ебанский", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1003, "ебанрот", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1004, "ебаноё", "е****ё");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1005, "ебаному", "е*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1006, "ебаном", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1007, "ебанок", "е****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1008, "ебаной", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1009, "ебаное", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1010, "ебаного", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1011, "ебановрот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1012, "ебанов", "е****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1013, "ебано", "е***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1014, "ебанных", "е*****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1015, "ебанными", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1016, "ебанным", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1017, "ебанныйврот", "е*********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1018, "ебанный", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1019, "ебанныи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1020, "ебанные", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1021, "ебанную", "е*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1022, "ебаннутых", "е*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1023, "ебаннутый", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1024, "ебаннутые", "е*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1025, "ебаннутой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1026, "ебаннутое", "е*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1027, "ебаннутого", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1028, "ебаннутая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1029, "ебанному", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1030, "ебанном", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1031, "ебанной", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1032, "ебанное", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1033, "ебанного", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1034, "ебанно", "е****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1035, "ебанная", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1036, "ебанная", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1037, "ебанна", "е****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1038, "ебанка", "е****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1039, "ебания", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1040, "ебанический", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1041, "ебанические", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1042, "ебанически", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1043, "ебанитовая", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1044, "ебанитесь", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1045, "ебаните", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1046, "ебанись", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1047, "ебанистической", "е************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1048, "ебанистический", "е************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1049, "ебанистические", "е************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v1050, "ебанистически", "е***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1051, "ебанистическая", "е************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1052, "ебанистика", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1053, "ебанины", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1054, "ебанина", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1055, "ебаний", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1056, "ебании", "е****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1057, "ебанизмом", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1058, "ебанизма", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1059, "ебанизм", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1060, "ебание", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1061, "ебанешься", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1062, "ебанешь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1063, "ебанешся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1064, "ебанется", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1065, "ебанете", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1066, "ебанет", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1067, "ебаненько", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1068, "ебаненький", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1069, "ебанемся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1070, "ебанем", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1071, "ебанейший", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1072, "ебаней", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1073, "ебанее", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1074, "ебанврот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1075, "ебанаяя", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1076, "ебаная", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1077, "ебаная", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1078, "ебанашку", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1079, "ебанашкой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1080, "ебанашки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1081, "ебанашке", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1082, "ебанашками", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1083, "ебанашкам", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1084, "ебанашка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1085, "ебанаши", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1086, "ебанашечка", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1087, "ебанашек", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1088, "ебанафт", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1089, "ебанатый", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1090, "ебанаты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1091, "ебанату", "е*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1092, "ебанатство", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1093, "ебанатства", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1094, "ебанатской", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1095, "ебанатский", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1096, "ебанатские", "е********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1097, "ебанатская", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1098, "ебанаторы", "е*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1099, "ебанатор", "е******р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1100, "ебанатом", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1101, "ебанатов", "е******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1102, "ебанатки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1103, "ебанатка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1104, "ебанатиков", "е********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1105, "ебанатики", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1106, "ебанатик", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1107, "ебанатизм", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1108, "ебанатами", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1109, "ебанатам", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1110, "ебаната", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1111, "ебанат", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1112, "ебанарь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1113, "ебанарот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1114, "ебанан", "е****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1115, "ебанами", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1116, "ебанамать", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1117, "ебанай", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1118, "ебанавты", "е******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1119, "ебанавт", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1120, "ебана", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1121, "ебан", "е**н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1122, "ебало", "е***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1123, "ебали", "е***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1124, "ебала", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1125, "ебал", "е**л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1126, "еб твою мать", "е*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1127, "допиздеться", "д*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1128, "долбоёб", "д*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1129, "долбоеб", "д*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1130, "доебаться", "д*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v1131, "до-пизды", "д******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1132, "гребаных", "г******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1133, "гребаную", "г******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1134, "гребаного", "г*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1135, "гребанные", "г*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1136, "гребанную", "г*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1137, "выёбываются", "в*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[14],0>(v1138, "выёбываюсь", "в*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[15],0>(v1139, "выёбываться", "в**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1140, "выёбывайся", "в********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[16],0>(v1141, "выёбываешься", "в***********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[15],0>(v1142, "выёбывается", "в**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1143, "выёбывается", "в*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1144, "выпиздить", "в*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1145, "выпиздеться", "в*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1146, "выебут", "в****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1147, "выебу", "в***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1148, "выебешь", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1149, "выебет", "в****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1150, "выебать", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1151, "выблядыш", "в******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1152, "выблядок", "в******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1153, "въебаться", "в*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1154, "въебать", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1155, "впиздячить", "в********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1156, "бляха", "б***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1157, "блять", "б***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1158, "блятство", "б******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1159, "блятский", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1160, "блятская", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1161, "блянадо", "б*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1162, "бляменя", "б*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1163, "блямба", "б****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1164, "блямб", "б***б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1165, "блякаешь", "б******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1166, "блядях", "б****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1167, "блядями", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1168, "блядюга", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1169, "блядьми", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1170, "блядь", "б***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1171, "блядуют", "б*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1172, "блядушки", "б******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1173, "блядунья", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1174, "блядуны", "б*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1175, "блядун", "б****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1176, "блядуешь", "б******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1177, "блядует", "б*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1178, "блядству", "б******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v1179, "блядствовать", "б**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1180, "блядство", "б******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1181, "блядстве", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1182, "блядства", "б******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1183, "блядскую", "б******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1184, "блядском", "б******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1185, "блядской", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1186, "блядское", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1187, "блядско", "б*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1188, "блядских", "б******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1189, "блядским", "б******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1190, "блядский", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1191, "блядские", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1192, "блядски", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1193, "блядская", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1194, "блядота", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1195, "блядовать", "б*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1196, "блядки", "б****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1197, "блядках", "б*****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1198, "блядищи", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1199, "блядище", "б*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1200, "блядища", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1201, "блядины", "б*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1202, "блядину", "б*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1203, "блядиной", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1204, "блядинка", "б******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1205, "блядине", "б*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1206, "блядина", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1207, "бляди", "б***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1208, "бляд", "б**д");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1209, "блябуду", "б*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1210, "блябу", "б***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1211, "бля", "б*я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1212, "ахуй", "а**й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1213, "архипиздрит", "а*********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v1214, "eбаный", "e****й");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ru(void)::sProfanityData_ru, (uint64_t)v5, 0x4BAuLL);
    for (i = 0; i != -7260; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1214[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ru(void)::sProfanityData_ru, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_ru(void)::sProfanityData_ru[0], unk_1EF581FC8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF581FC8 - GetProfanityFilter_ru(void)::sProfanityData_ru[0]) >> 4));
}

void sub_1BF9DE9CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 58032;
  v4 = -58080;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_ro(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v297[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v5, "﻿cACI", "﻿*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v6, "şobolanule", "ş**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v7, "youporn", "y*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v8, "youjizz", "y*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v9, "xvideos", "x*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v10, "xnxx", "x****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v11, "unguroiule", "u**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v12, "unguroilor", "u**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v13, "târfelor", "t********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "târfele", "t*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v15, "târfa", "t*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v16, "tâmpitule", "t*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v17, "tâmpito", "t*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v18, "tuciuriule", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v19, "trogloditule", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v20, "suge-mi-ai", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v21, "suge-m-ai", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v22, "suge-i-o", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v23, "sifiliticule", "s************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v24, "shit", "s****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v25, "sextv", "s*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v26, "sextube", "s*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v27, "sexfree", "s*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v28, "sexbot", "s******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v29, "retarzilor", "r**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v30, "retarzii", "r********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v31, "retardule", "r*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v32, "retardelor", "r**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v33, "retardatule", "r***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v34, "ratatule", "r********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v35, "ratato", "r******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v36, "rahaţilor", "r*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v37, "putrezitule", "p***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v38, "putregaiule", "p***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v39, "putoareo", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "pulă", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v41, "pulimii", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v42, "pulimea", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v43, "pulime", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v44, "pulii", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v45, "pulifriciule", "p************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v46, "pulifrici", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v47, "pulice", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v48, "pulica", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v49, "pulelor", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v50, "pulea", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v51, "pule", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v52, "pula-n", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v53, "pula", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v54, "prostane", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v55, "prostanacule", "p************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v56, "proasto", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v57, "proastelor", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v58, "porntube", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v59, "porno", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v60, "pornhub", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v61, "porn", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v62, "porcule", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v63, "poponaut", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v64, "poponarilor", "p***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v65, "poponarii", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v66, "poponari", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v67, "poponar", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v68, "pișe", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v69, "pișa-m-aș", "p*******ș");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v70, "piţipoancelor", "p*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v71, "pişăm", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v72, "pişi", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v73, "pişe", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v74, "pişatul", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "pişat", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v76, "piş", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "pizdă", "p***ă");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v78, "pizdulici", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v79, "pizdologii", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v80, "pizdita", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v81, "pizdit", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v82, "pizdilici", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v83, "pizdele", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v84, "pizdeală", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v85, "pizda", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v86, "parazitule", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v87, "pANARAME", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v88, "onaniști", "o******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v89, "onanist", "o*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v90, "oligofrenule", "o************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v91, "oligofrenilor", "o*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v92, "nesimţitule", "n***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v93, "nefutute", "n********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v94, "naşpetule", "n*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v95, "mătărânga", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v96, "mă-tii", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v97, "mă-ta", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v98, "mă-sii", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v99, "muistule", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v100, "muistul", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v101, "muistele", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v102, "muie", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v103, "muian", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v104, "muia", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v105, "mucifer", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v106, "milfhunter", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v107, "milf", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v108, "mUlE", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v109, "mILF", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v110, "linge-mi-ai", "l*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v111, "linge-m-ai", "l********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v112, "lindic", "l****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v113, "limbricule", "l**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v114, "limbistule", "l**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v115, "limbincurism", "l************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v116, "lepădăturilor", "l*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v117, "labă", "l**ă");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v118, "labagiule", "l*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v119, "labagiu", "l*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v120, "labagiilor", "l**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v121, "labagii", "l*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v122, "jizzhut", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v123, "jigodiile", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v124, "jidănesc", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v125, "jidanului", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v126, "jidanilor", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v127, "jidani", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v128, "jidanca", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v129, "jidan", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v130, "jegule", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v131, "jegosule", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v132, "javrelor", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v133, "japiță", "j****ă");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v134, "infectule", "i*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v135, "imbecilo", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v136, "idiotule", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v137, "idioato", "i*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v138, "hardcorsex", "h**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v139, "handicapaţilor", "h**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v140, "handicapatule", "h*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v141, "handicapato", "h***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v142, "hairysex", "h********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v143, "găozari", "g*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v144, "găozar", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v145, "găoaza", "g****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v146, "guramasii", "g*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v147, "gunoiule", "g********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v148, "garoiul", "g*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v149, "fuţi", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v150, "futuţii", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v151, "futută", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v152, "fututul", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v153, "futute", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v154, "futut-o", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v155, "futut", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v156, "futui", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v157, "futu-ţi", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v158, "futu-vă", "f*****ă");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v159, "futu-te", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v160, "futu-m-aș", "f*******ș");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v161, "futu-l", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v162, "futu-i", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v163, "futem", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v164, "futeau", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v165, "fute", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v166, "futaiuri", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v167, "fut", "f***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v168, "fucks", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v169, "fuck", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v170, "fraierilor", "f**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v171, "fraiere", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v172, "fascistule", "f**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v173, "escrocule", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v174, "dumnezăii", "d*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v175, "dobitocule", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v176, "dobitocii", "d*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v177, "dobitoci", "d********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v178, "dobitoc", "d*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v179, "căcănărie", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v180, "căcănăria", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v181, "căcănarul", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v182, "căcănare", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v183, "căcănar", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v184, "căcăcioşi", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v185, "căcăcios", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v186, "căcăcioasă", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v187, "căcăcioase", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v188, "căcaţii", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v189, "căcaţi", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v190, "căcaturile", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v191, "căcatul", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v192, "căcata", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v193, "căcat", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v194, "căcarea", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v195, "căcam", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v196, "cârnăţar", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v197, "curvă", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v198, "curvuştine", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v199, "curvo", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v200, "curviştinele", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v201, "curveta", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v202, "curvet", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v203, "curvesc", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v204, "curvele", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v205, "curvei", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v206, "curvească", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v207, "curve", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v208, "curvarule", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v209, "curvarul", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v210, "curvari", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v211, "curvar", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v212, "curva", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v213, "curva", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v214, "cururilor", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v215, "cururile", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v216, "cururi", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v217, "curului", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v218, "curu-n", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v219, "curu", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v220, "curista", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v221, "cur", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v222, "cunt", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v223, "cumshot", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v224, "cretinule", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v225, "cretinoiule", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v226, "cretino", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v227, "cretinizatule", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v228, "cretinelule", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v229, "coițe", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v230, "coiul", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v231, "coi", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v232, "cocalarule", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v233, "coardo", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v234, "coaielor", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v235, "coaiele", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v236, "coaie", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v237, "ciumpalacului", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v238, "ciumpalacilor", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v239, "cioropinile", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v240, "cioroiule", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v241, "ciochist", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v242, "cacă", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v243, "cace", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v244, "cacau", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v245, "caca", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(v246, "cac", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v247, "băşimea", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v248, "băga-ți-aș", "b********ș");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v249, "băga-ți-ai", "b********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v250, "bulangiule", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v251, "bulangiul", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v252, "bulangiu", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v253, "bulangist", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v254, "bulangioaica", "b************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v255, "bulangiilor", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v256, "bulangiii", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v257, "bulangii", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v258, "buci", "b**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v259, "bozgorului", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v260, "bozgorul", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v261, "bozgoroica", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v262, "bozgoroaice", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v263, "bozgoroaica", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v264, "bozgorime", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v265, "bozgori", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v266, "bozgoresc", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v267, "bozgorel", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v268, "bozgorei", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v269, "bozgor", "b******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v270, "bouleanule", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v271, "boule", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v272, "boschetarule", "b************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v273, "borâţi", "b******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v274, "borfotinele", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v275, "borfelină", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v276, "borfelina", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v277, "bijboaca", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v278, "belitule", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v279, "belite", "b******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v280, "belit-o", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v281, "belim", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v282, "belești", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v283, "bagabonți", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v284, "bagabonţii", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v285, "bagabontul", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v286, "bagabont", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v287, "bagaboante", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v288, "bagaboanta", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v289, "babuinule", "b*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v290, "babuino", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v291, "avortonule", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v292, "aurolacule", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v293, "ampulea", "a*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v294, "alcooliştilor", "a*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v295, "alcoolicule", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v296, "agaricilor", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v297, "agarici", "a*******");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ro(void)::sProfanityData_ro, (uint64_t)v5, 0x125uLL);
    for (i = 0; i != -1758; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v297[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ro(void)::sProfanityData_ro, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_ro(void)::sProfanityData_ro[0], unk_1EF581FE8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF581FE8 - GetProfanityFilter_ro(void)::sProfanityData_ro[0]) >> 4));
}

void sub_1BF9E10EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 14016;
  v4 = -14064;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_pt(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v124[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v5, "xoxotão", "x*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v6, "xoxotinha", "x*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v7, "xoxota", "x****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v8, "xotão", "x***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "xotinha", "x*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v10, "xota", "x**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "xochota", "x*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v12, "xibiu", "x***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v13, "xexeca", "x****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "xerereca", "x******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v15, "xeca", "x**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "xavasca", "x*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "xaninha", "x*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v18, "xana", "x**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "toba", "t**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v20, "tetão", "t***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v21, "tetinha", "t*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v22, "teta", "t**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v23, "tesão", "t***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "tesudo", "t****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v25, "tesuda", "t****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v26, "tesao", "t***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "suruba", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v28, "siririca", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "putona", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v30, "puto", "p**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v31, "putana", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v32, "putamerda", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v33, "puta", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v34, "punhetão", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "punhetas", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v36, "punhetao", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v37, "punheta", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "prexereca", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v39, "prexeca", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v40, "precheca", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v41, "pixirica", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v42, "piroco", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v43, "picão", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v44, "picao", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v45, "pexereca", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v46, "olhota", "o****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v47, "merdoso", "m*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "merdas", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v49, "merda", "m***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "machorra", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v51, "iscroto", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v52, "iscrota", "i*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v53, "furnicar", "f******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v54, "furnica", "f*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v55, "fudeção", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v56, "fudendo", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v57, "fudecao", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v58, "fornica", "f*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v59, "fodida", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v60, "foder", "f***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v61, "fodelança", "f*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "fodedor", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v63, "fode", "f**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v64, "fodao", "f***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v65, "felação", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v66, "felacao", "f*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v67, "esporrear", "e*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "esporrar", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v69, "esporrado", "e*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "esporrada", "e*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "escrota", "e*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "enrabar", "e*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "enrabada", "e******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v74, "desgraçado", "d********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v75, "desgraçada", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v76, "cuzão", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "cuzudo", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v78, "cuzuda", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "cuzinho", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v80, "cuzao", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v81, "currar", "c****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "currada", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "curalho", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v84, "culhões", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v85, "culhão", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v86, "culhao", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v87, "cu", "c*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v88, "colhão", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v89, "ciririca", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v90, "chota", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v91, "chochota", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v92, "chibumbo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v93, "chibumba", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v94, "chereca", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "checheca", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v96, "chana", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v97, "caralhão", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v98, "caralhudo", "c*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "caralho", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v100, "cagão", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v101, "cagalhão", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "cagado", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v103, "cabação", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v104, "cabaçudo", "c******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v105, "cabaçuda", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v106, "cabaço", "c****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v107, "buça", "b**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v108, "busseta", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v109, "bucetão", "b*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v110, "bucetinha", "b*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v111, "buceta", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v112, "brioco", "b****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v113, "bosteiro", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v114, "bosta", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v115, "bolcat", "b****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v116, "bolagato", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v117, "boiola", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v118, "bixa", "b**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v119, "bimbar", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "bimbada", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v121, "bilau", "b***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v122, "bicha", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v123, "bastardo", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "baitola", "b*****a");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_pt(void)::sProfanityData_pt, (uint64_t)v5, 0x78uLL);
    for (i = 0; i != -720; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v124[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_pt(void)::sProfanityData_pt, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_pt(void)::sProfanityData_pt[0], unk_1EF582008, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582008 - GetProfanityFilter_pt(void)::sProfanityData_pt[0]) >> 4));
}

void sub_1BF9E2114(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 5712;
  v4 = -5760;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_uk(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[6];
  _QWORD v556[6];
  _QWORD v557[6];
  _QWORD v558[6];
  _QWORD v559[6];
  _QWORD v560[6];
  _QWORD v561[6];
  _QWORD v562[6];
  _QWORD v563[6];
  _QWORD v564[6];
  _QWORD v565[6];
  _QWORD v566[6];
  _QWORD v567[6];
  _QWORD v568[6];
  _QWORD v569[6];
  _QWORD v570[6];
  _QWORD v571[6];
  _QWORD v572[6];
  _QWORD v573[6];
  _QWORD v574[6];
  _QWORD v575[6];
  _QWORD v576[6];
  _QWORD v577[6];
  _QWORD v578[6];
  _QWORD v579[6];
  _QWORD v580[6];
  _QWORD v581[6];
  _QWORD v582[6];
  _QWORD v583[6];
  _QWORD v584[6];
  _QWORD v585[6];
  _QWORD v586[6];
  _QWORD v587[6];
  _QWORD v588[6];
  _QWORD v589[6];
  _QWORD v590[6];
  _QWORD v591[6];
  _QWORD v592[6];
  _QWORD v593[6];
  _QWORD v594[6];
  _QWORD v595[6];
  _QWORD v596[6];
  _QWORD v597[6];
  _QWORD v598[6];
  _QWORD v599[6];
  _QWORD v600[6];
  _QWORD v601[6];
  _QWORD v602[6];
  _QWORD v603[6];
  _QWORD v604[6];
  _QWORD v605[6];
  _QWORD v606[6];
  _QWORD v607[6];
  _QWORD v608[6];
  _QWORD v609[6];
  _QWORD v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[6];
  _QWORD v622[6];
  _QWORD v623[6];
  _QWORD v624[6];
  _QWORD v625[6];
  _QWORD v626[6];
  _QWORD v627[6];
  _QWORD v628[6];
  _QWORD v629[6];
  _QWORD v630[6];
  _QWORD v631[6];
  _QWORD v632[6];
  _QWORD v633[6];
  _QWORD v634[6];
  _QWORD v635[6];
  _QWORD v636[6];
  _QWORD v637[6];
  _QWORD v638[6];
  _QWORD v639[6];
  _QWORD v640[6];
  _QWORD v641[6];
  _QWORD v642[6];
  _QWORD v643[6];
  _QWORD v644[6];
  _QWORD v645[6];
  _QWORD v646[6];
  _QWORD v647[6];
  _QWORD v648[6];
  _QWORD v649[6];
  _QWORD v650[6];
  _QWORD v651[6];
  _QWORD v652[6];
  _QWORD v653[6];
  _QWORD v654[6];
  _QWORD v655[6];
  _QWORD v656[6];
  _QWORD v657[6];
  _QWORD v658[6];
  _QWORD v659[6];
  _QWORD v660[6];
  _QWORD v661[6];
  _QWORD v662[6];
  _QWORD v663[6];
  _QWORD v664[6];
  _QWORD v665[6];
  _QWORD v666[6];
  _QWORD v667[6];
  _QWORD v668[6];
  _QWORD v669[6];
  _QWORD v670[6];
  _QWORD v671[6];
  _QWORD v672[6];
  _QWORD v673[6];
  _QWORD v674[6];
  _QWORD v675[6];
  _QWORD v676[6];
  _QWORD v677[6];
  _QWORD v678[6];
  _QWORD v679[6];
  _QWORD v680[6];
  _QWORD v681[6];
  _QWORD v682[6];
  _QWORD v683[6];
  _QWORD v684[6];
  _QWORD v685[6];
  _QWORD v686[6];
  _QWORD v687[6];
  _QWORD v688[6];
  _QWORD v689[6];
  _QWORD v690[6];
  _QWORD v691[6];
  _QWORD v692[6];
  _QWORD v693[6];
  _QWORD v694[6];
  _QWORD v695[6];
  _QWORD v696[6];
  _QWORD v697[6];
  _QWORD v698[6];
  _QWORD v699[6];
  _QWORD v700[6];
  _QWORD v701[6];
  _QWORD v702[6];
  _QWORD v703[6];
  _QWORD v704[6];
  _QWORD v705[6];
  _QWORD v706[6];
  _QWORD v707[6];
  _QWORD v708[6];
  _QWORD v709[6];
  _QWORD v710[6];
  _QWORD v711[6];
  _QWORD v712[6];
  _QWORD v713[6];
  _QWORD v714[6];
  _QWORD v715[6];
  _QWORD v716[6];
  _QWORD v717[6];
  _QWORD v718[6];
  _QWORD v719[6];
  _QWORD v720[6];
  _QWORD v721[6];
  _QWORD v722[6];
  _QWORD v723[6];
  _QWORD v724[6];
  _QWORD v725[6];
  _QWORD v726[6];
  _QWORD v727[6];
  _QWORD v728[6];
  _QWORD v729[6];
  _QWORD v730[6];
  _QWORD v731[6];
  _QWORD v732[6];
  _QWORD v733[6];
  _QWORD v734[6];
  _QWORD v735[6];
  _QWORD v736[6];
  _QWORD v737[6];
  _QWORD v738[6];
  _QWORD v739[6];
  _QWORD v740[6];
  _QWORD v741[6];
  _QWORD v742[6];
  _QWORD v743[6];
  _QWORD v744[6];
  _QWORD v745[6];
  _QWORD v746[6];
  _QWORD v747[6];
  _QWORD v748[6];
  _QWORD v749[6];
  _QWORD v750[6];
  _QWORD v751[6];
  _QWORD v752[6];
  _QWORD v753[6];
  _QWORD v754[6];
  _QWORD v755[6];
  _QWORD v756[6];
  _QWORD v757[6];
  _QWORD v758[6];
  _QWORD v759[6];
  _QWORD v760[6];
  _QWORD v761[6];
  _QWORD v762[6];
  _QWORD v763[6];
  _QWORD v764[6];
  _QWORD v765[6];
  _QWORD v766[6];
  _QWORD v767[6];
  _QWORD v768[6];
  _QWORD v769[6];
  _QWORD v770[6];
  _QWORD v771[6];
  _QWORD v772[6];
  _QWORD v773[6];
  _QWORD v774[6];
  _QWORD v775[6];
  _QWORD v776[6];
  _QWORD v777[6];
  _QWORD v778[6];
  _QWORD v779[6];
  _QWORD v780[6];
  _QWORD v781[6];
  _QWORD v782[6];
  _QWORD v783[6];
  _QWORD v784[6];
  _QWORD v785[6];
  _QWORD v786[6];
  _QWORD v787[6];
  _QWORD v788[6];
  _QWORD v789[6];
  _QWORD v790[6];
  _QWORD v791[6];
  _QWORD v792[6];
  _QWORD v793[6];
  _QWORD v794[6];
  _QWORD v795[6];
  _QWORD v796[6];
  _QWORD v797[6];
  _QWORD v798[6];
  _QWORD v799[6];
  _QWORD v800[6];
  _QWORD v801[6];
  _QWORD v802[6];
  _QWORD v803[6];
  _QWORD v804[6];
  _QWORD v805[6];
  _QWORD v806[6];
  _QWORD v807[6];
  _QWORD v808[6];
  _QWORD v809[6];
  _QWORD v810[6];
  _QWORD v811[6];
  _QWORD v812[6];
  _QWORD v813[6];
  _QWORD v814[6];
  _QWORD v815[6];
  _QWORD v816[6];
  _QWORD v817[6];
  _QWORD v818[6];
  _QWORD v819[6];
  _QWORD v820[6];
  _QWORD v821[6];
  _QWORD v822[6];
  _QWORD v823[6];
  _QWORD v824[6];
  _QWORD v825[6];
  _QWORD v826[6];
  _QWORD v827[6];
  _QWORD v828[6];
  _QWORD v829[6];
  _QWORD v830[6];
  _QWORD v831[6];
  _QWORD v832[6];
  _QWORD v833[6];
  _QWORD v834[6];
  _QWORD v835[6];
  _QWORD v836[6];
  _QWORD v837[6];
  _QWORD v838[6];
  _QWORD v839[6];
  _QWORD v840[6];
  _QWORD v841[6];
  _QWORD v842[6];
  _QWORD v843[6];
  _QWORD v844[6];
  _QWORD v845[6];
  _QWORD v846[6];
  _QWORD v847[6];
  _QWORD v848[6];
  _QWORD v849[6];
  _QWORD v850[6];
  _QWORD v851[6];
  _QWORD v852[6];
  _QWORD v853[6];
  _QWORD v854[6];
  _QWORD v855[6];
  _QWORD v856[6];
  _QWORD v857[6];
  _QWORD v858[6];
  _QWORD v859[6];
  _QWORD v860[6];
  _QWORD v861[6];
  _QWORD v862[6];
  _QWORD v863[6];
  _QWORD v864[6];
  _QWORD v865[6];
  _QWORD v866[6];
  _QWORD v867[6];
  _QWORD v868[6];
  _QWORD v869[6];
  _QWORD v870[6];
  _QWORD v871[6];
  _QWORD v872[6];
  _QWORD v873[6];
  _QWORD v874[6];
  _QWORD v875[6];
  _QWORD v876[6];
  _QWORD v877[6];
  _QWORD v878[6];
  _QWORD v879[6];
  _QWORD v880[6];
  _QWORD v881[6];
  _QWORD v882[6];
  _QWORD v883[6];
  _QWORD v884[6];
  _QWORD v885[6];
  _QWORD v886[6];
  _QWORD v887[6];
  _QWORD v888[6];
  _QWORD v889[6];
  _QWORD v890[6];
  _QWORD v891[6];
  _QWORD v892[6];
  _QWORD v893[6];
  _QWORD v894[6];
  _QWORD v895[6];
  _QWORD v896[6];
  _QWORD v897[6];
  _QWORD v898[6];
  _QWORD v899[6];
  _QWORD v900[6];
  _QWORD v901[6];
  _QWORD v902[6];
  _QWORD v903[6];
  _QWORD v904[6];
  _QWORD v905[6];
  _QWORD v906[6];
  _QWORD v907[6];
  _QWORD v908[6];
  _QWORD v909[6];
  _QWORD v910[6];
  _QWORD v911[6];
  _QWORD v912[6];
  _QWORD v913[6];
  _QWORD v914[6];
  _QWORD v915[6];
  _QWORD v916[6];
  _QWORD v917[6];
  _QWORD v918[6];
  _QWORD v919[6];
  _QWORD v920[6];
  _QWORD v921[6];
  _QWORD v922[6];
  _QWORD v923[6];
  _QWORD v924[6];
  _QWORD v925[6];
  _QWORD v926[6];
  _QWORD v927[6];
  _QWORD v928[6];
  _QWORD v929[6];
  _QWORD v930[6];
  _QWORD v931[6];
  _QWORD v932[6];
  _QWORD v933[6];
  _QWORD v934[6];
  _QWORD v935[6];
  _QWORD v936[6];
  _QWORD v937[6];
  _QWORD v938[6];
  _QWORD v939[6];
  _QWORD v940[6];
  _QWORD v941[6];
  _QWORD v942[6];
  _QWORD v943[6];
  _QWORD v944[6];
  _QWORD v945[6];
  _QWORD v946[6];
  _QWORD v947[6];
  _QWORD v948[6];
  _QWORD v949[6];
  _QWORD v950[6];
  _QWORD v951[6];
  _QWORD v952[6];
  _QWORD v953[6];
  _QWORD v954[6];
  _QWORD v955[6];
  _QWORD v956[6];
  _QWORD v957[6];
  _QWORD v958[6];
  _QWORD v959[6];
  _QWORD v960[6];
  _QWORD v961[6];
  _QWORD v962[6];
  _QWORD v963[6];
  _QWORD v964[6];
  _QWORD v965[6];
  _QWORD v966[6];
  _QWORD v967[6];
  _QWORD v968[6];
  _QWORD v969[6];
  _QWORD v970[6];
  _QWORD v971[6];
  _QWORD v972[6];
  _QWORD v973[6];
  _QWORD v974[6];
  _QWORD v975[6];
  _QWORD v976[6];
  _QWORD v977[6];
  _QWORD v978[6];
  _QWORD v979[6];
  _QWORD v980[6];
  _QWORD v981[6];
  _QWORD v982[6];
  _QWORD v983[6];
  _QWORD v984[6];
  _QWORD v985[6];
  _QWORD v986[6];
  _QWORD v987[6];
  _QWORD v988[6];
  _QWORD v989[6];
  _QWORD v990[6];
  _QWORD v991[6];
  _QWORD v992[6];
  _QWORD v993[6];
  _QWORD v994[6];
  _QWORD v995[6];
  _QWORD v996[6];
  _QWORD v997[6];
  _QWORD v998[6];
  _QWORD v999[6];
  _QWORD v1000[6];
  _QWORD v1001[6];
  _QWORD v1002[6];
  _QWORD v1003[6];
  _QWORD v1004[6];
  _QWORD v1005[6];
  _QWORD v1006[6];
  _QWORD v1007[6];
  _QWORD v1008[6];
  _QWORD v1009[6];
  _QWORD v1010[6];
  _QWORD v1011[6];
  _QWORD v1012[6];
  _QWORD v1013[6];
  _QWORD v1014[6];
  _QWORD v1015[6];
  _QWORD v1016[6];
  _QWORD v1017[6];
  _QWORD v1018[6];
  _QWORD v1019[6];
  _QWORD v1020[6];
  _QWORD v1021[6];
  _QWORD v1022[6];
  _QWORD v1023[6];
  _QWORD v1024[6];
  _QWORD v1025[6];
  _QWORD v1026[6];
  _QWORD v1027[6];
  _QWORD v1028[6];
  _QWORD v1029[6];
  _QWORD v1030[6];
  _QWORD v1031[6];
  _QWORD v1032[6];
  _QWORD v1033[6];
  _QWORD v1034[6];
  _QWORD v1035[6];
  _QWORD v1036[6];
  _QWORD v1037[6];
  _QWORD v1038[6];
  _QWORD v1039[6];
  _QWORD v1040[6];
  _QWORD v1041[6];
  _QWORD v1042[6];
  _QWORD v1043[6];
  _QWORD v1044[6];
  _QWORD v1045[6];
  _QWORD v1046[6];
  _QWORD v1047[6];
  _QWORD v1048[6];
  _QWORD v1049[6];
  _QWORD v1050[6];
  _QWORD v1051[6];
  _QWORD v1052[6];
  _QWORD v1053[6];
  _QWORD v1054[6];
  _QWORD v1055[6];
  _QWORD v1056[6];
  _QWORD v1057[6];
  _QWORD v1058[6];
  _QWORD v1059[6];
  _QWORD v1060[6];
  _QWORD v1061[6];
  _QWORD v1062[6];
  _QWORD v1063[6];
  _QWORD v1064[6];
  _QWORD v1065[6];
  _QWORD v1066[6];
  _QWORD v1067[6];
  _QWORD v1068[6];
  _QWORD v1069[6];
  _QWORD v1070[6];
  _QWORD v1071[6];
  _QWORD v1072[6];
  _QWORD v1073[6];
  _QWORD v1074[6];
  _QWORD v1075[6];
  _QWORD v1076[6];
  _QWORD v1077[6];
  _QWORD v1078[6];
  _QWORD v1079[6];
  _QWORD v1080[6];
  _QWORD v1081[6];
  _QWORD v1082[6];
  _QWORD v1083[6];
  _QWORD v1084[6];
  _QWORD v1085[6];
  _QWORD v1086[6];
  _QWORD v1087[6];
  _QWORD v1088[6];
  _QWORD v1089[6];
  _QWORD v1090[6];
  _QWORD v1091[6];
  _QWORD v1092[6];
  _QWORD v1093[6];
  _QWORD v1094[6];
  _QWORD v1095[6];
  _QWORD v1096[6];
  _QWORD v1097[6];
  _QWORD v1098[6];
  _QWORD v1099[6];
  _QWORD v1100[6];
  _QWORD v1101[6];
  _QWORD v1102[6];
  _QWORD v1103[6];
  _QWORD v1104[6];
  _QWORD v1105[6];
  _QWORD v1106[6];
  _QWORD v1107[6];
  _QWORD v1108[6];
  _QWORD v1109[6];
  _QWORD v1110[6];
  _QWORD v1111[6];
  _QWORD v1112[6];
  _QWORD v1113[6];
  _QWORD v1114[6];
  _QWORD v1115[6];
  _QWORD v1116[6];
  _QWORD v1117[6];
  _QWORD v1118[6];
  _QWORD v1119[6];
  _QWORD v1120[6];
  _QWORD v1121[6];
  _QWORD v1122[6];
  _QWORD v1123[6];
  _QWORD v1124[6];
  _QWORD v1125[6];
  _QWORD v1126[6];
  _QWORD v1127[6];
  _QWORD v1128[6];
  _QWORD v1129[6];
  _QWORD v1130[6];
  _QWORD v1131[6];
  _QWORD v1132[6];
  _QWORD v1133[6];
  _QWORD v1134[6];
  _QWORD v1135[6];
  _QWORD v1136[6];
  _QWORD v1137[6];
  _QWORD v1138[6];
  _QWORD v1139[6];
  _QWORD v1140[6];
  _QWORD v1141[6];
  _QWORD v1142[6];
  _QWORD v1143[6];
  _QWORD v1144[6];
  _QWORD v1145[6];
  _QWORD v1146[6];
  _QWORD v1147[6];
  _QWORD v1148[6];
  _QWORD v1149[6];
  _QWORD v1150[6];
  _QWORD v1151[6];
  _QWORD v1152[6];
  _QWORD v1153[6];
  _QWORD v1154[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v1154[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v5, "їбе", "ї*е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v6, "ёбля", "ё**я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v7, "ёбат", "ё**т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v8, "ёбарь", "ё***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v9, "ёбаный", "ё****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v10, "ёбаную", "ё****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v11, "ёбанный", "ё*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v12, "ёбаная", "ё****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v13, "ёбан", "ё**н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v14, "хєр", "х*р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v15, "хуйям", "х***м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v16, "хуйчик", "х****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v17, "хуйцы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v18, "хуйцу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v19, "хуйцом", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v20, "хуйцов", "х****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v21, "хуйцо", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v22, "хуйце", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v23, "хуйцах", "х****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v24, "хуйцам", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v25, "хуйца", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v26, "хуйхуй", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v27, "хуйхаа", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v28, "хуйфон", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v29, "хуйтэн", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v30, "хуйты", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v31, "хуйту", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v32, "хуйто", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v33, "хуйте", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v34, "хуйтам", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v35, "хуйта", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v36, "хуйски", "х****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v37, "хуйрик", "х****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v38, "хуйота", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v39, "хуйовый", "х*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v40, "хуйовые", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v41, "хуйовое", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v42, "хуйово", "х****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v43, "хуйовая", "х*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v44, "хуйова", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v45, "хуйнёт", "х****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v46, "хуйнём", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v47, "хуйнёй", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v48, "хуйняя", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v49, "хуйняшка", "х******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v50, "хуйнях", "х****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v51, "хуйняс", "х****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v52, "хуйняно", "х*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v53, "хуйняне", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v54, "хуйнями", "х*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v55, "хуйняи", "х****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v56, "хуйняв", "х****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v57, "хуйняа", "х****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v58, "хуйня", "х***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v59, "хуйнюя", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v60, "хуйнюю", "х****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v61, "хуйнюшку", "х******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v62, "хуйнюшки", "х******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v63, "хуйнюшка", "х******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v64, "хуйнюша", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v65, "хуйнюну", "х*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v66, "хуйню", "х***ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v67, "хуйнуть", "х*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v68, "хуйнулся", "х******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v69, "хуйнуло", "х*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v70, "хуйнули", "х*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v71, "хуйнула", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v72, "хуйнул", "х****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v73, "хуйну", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v74, "хуйной", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v75, "хуйно", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v76, "хуйнища", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v77, "хуйните", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v78, "хуйни", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v79, "хуйнеё", "х****ё");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v80, "хуйнею", "х****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v81, "хуйнет", "х****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v82, "хуйнем", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v83, "хуйней", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v84, "хуйнее", "х****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v85, "хуйне", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v86, "хуйная", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v87, "хуйнаны", "х*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v88, "хуйнана", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v89, "хуйна", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v90, "хуйль", "х***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v91, "хуйлыга", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v92, "хуйлы", "х***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v93, "хуйлу", "х***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v94, "хуйлоша", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v95, "хуйлом", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v96, "хуйло", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v97, "хуйлище", "х*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v98, "хуйлион", "х*****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v99, "хуйли", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v100, "хуйле", "х***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v101, "хуйланы", "х*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v102, "хуйлана", "х*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v103, "хуйлан", "х****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v104, "хуйла", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v105, "хуйком", "х****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v106, "хуйки", "х***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v107, "хуйка", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v108, "хуйи", "х**и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v109, "хуйево", "х****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v110, "хуйда", "х***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v111, "хуйво", "х***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v112, "хуйвей", "х****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v113, "хуй-чего", "х******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v114, "хуй", "х*й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v115, "хуебля", "х****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v116, "хитровыебанный", "х************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v117, "хер", "х*р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v118, "уродів", "у****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v119, "упиздить", "у******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v120, "уебать", "у****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v121, "уебаны", "у****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v122, "уебан", "у***н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v123, "трахнуть", "т******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v124, "трахаёб", "т*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v125, "трахать", "т*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v126, "трахатель", "т*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v127, "трахаеб", "т*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v128, "трахае6", "т*****6");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v129, "съебаться", "с*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v130, "съебать", "с*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v131, "страхопиздище", "с***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v132, "сраці", "с***і");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v133, "сракою", "с****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v134, "спиздиться", "с********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v135, "спиздить", "с******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v136, "спиздит", "с*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v137, "спиздили", "с******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v138, "спиздила", "с******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v139, "спиздил", "с*****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v140, "спиздеть", "с******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v141, "спиздел", "с*****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v142, "распиздяйство", "р***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v143, "распиздяйка", "р*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v144, "распиздяй", "р*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v145, "распиздон", "р*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v146, "распиздеться", "р**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v147, "распиздай", "р*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v148, "разёбанный", "р********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v149, "разъебаться", "р*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v150, "разъебать", "р*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v151, "разебанный", "р********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v152, "підрахуйство", "п**********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v153, "підарас", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v154, "пропиздячить", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v155, "пропиздить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v156, "пропиздеть", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v157, "пропизделся", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v158, "проебаться", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v159, "проебать", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v160, "проебанка", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v161, "проблядь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v162, "припиздюлина", "п**********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v163, "припизднутый", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v164, "припиздить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v165, "припиздень", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v166, "приебаться", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v167, "придурок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v168, "похуй", "п***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v169, "потрахаться", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v170, "попиздовать", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v171, "попиздили", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v172, "попиздеть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v173, "попиздели", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v174, "поебать", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v175, "подъебать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v176, "пиздёшь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v177, "пиздёш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v178, "пиздёныш", "п******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v179, "пиздёнку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v180, "пиздёнкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v181, "пиздёнки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v182, "пиздёнке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v183, "пиздёнка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v184, "пиздёжь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v185, "пиздёжи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v186, "пиздёжа", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v187, "пиздёж", "п****ж");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v188, "пиздящих", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v189, "пиздящим", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v190, "пиздящий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v191, "пиздящие", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v192, "пиздящее", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v193, "пиздящая", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v194, "пиздяшек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v195, "пиздячу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v196, "пиздячку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v197, "пиздячки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v198, "пиздячить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v199, "пиздячит", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v200, "пиздячил", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v201, "пиздячик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v202, "пиздячек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v203, "пиздячат", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v204, "пиздяться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v205, "пиздять", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v206, "пиздятся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v207, "пиздятну", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v208, "пиздятины", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v209, "пиздятиной", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v210, "пиздятинки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v211, "пиздятинка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v212, "пиздятина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v213, "пиздят", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v214, "пиздярить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v215, "пиздянок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v216, "пиздян", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v217, "пиздяк", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v218, "пиздяй", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v219, "пиздя", "п***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v220, "пиздюшонок", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v221, "пиздюшок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v222, "пиздюшня", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v223, "пиздюшный", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v224, "пиздюшник", "п*******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v225, "пиздюшку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v226, "пиздюшкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v227, "пиздюшки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v228, "пиздюшке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v229, "пиздюшка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v230, "пиздюшечка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v231, "пиздюшек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v232, "пиздюша", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v233, "пиздючье", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v234, "пиздючку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v235, "пиздючкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v236, "пиздючки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v237, "пиздючка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v238, "пиздючий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v239, "пиздючие", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v240, "пиздючек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v241, "пиздюху", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v242, "пиздюхой", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v243, "пиздюхи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v244, "пиздюхе", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v245, "пиздюхать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v246, "пиздюха", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v247, "пиздюрить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v248, "пиздюляшек", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v249, "пиздюлях", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v250, "пиздюляторов", "п**********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v251, "пиздюлями", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v252, "пиздюлям", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v253, "пиздюля", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v254, "пиздюлю", "п*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v255, "пиздюльки", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v256, "пиздюлька", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v257, "пиздюль", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v258, "пиздюлины", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v259, "пиздюлину", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v260, "пиздюлинку", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v261, "пиздюлинки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v262, "пиздюлинка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v263, "пиздюлине", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v264, "пиздюлинами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v265, "пиздюлина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v266, "пиздюлин", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v267, "пиздюликов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v268, "пиздюли", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v269, "пиздюлек", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v270, "пиздюлей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v271, "пиздюлеи", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v272, "пиздюлеей", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v273, "пиздюку", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v274, "пиздюком", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v275, "пиздюков", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v276, "пиздюки", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v277, "пиздюками", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v278, "пиздюкам", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v279, "пиздюка", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v280, "пиздюк", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v281, "пиздюдей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v282, "пиздюга", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v283, "пиздю", "п***ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v284, "пиздэйшн", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v285, "пиздэйшен", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v286, "пиздь", "п***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v287, "пиздыя", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v288, "пиздыц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v289, "пиздытый", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v290, "пиздык", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v291, "пизды", "п***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v292, "пиздца", "п****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v293, "пиздуя", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v294, "пиздуют", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v295, "пиздую", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v296, "пиздушку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v297, "пиздушка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v298, "пиздуц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v299, "пиздуховные", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v300, "пиздуу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v301, "пиздунья", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v302, "пиздуны", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v303, "пиздуном", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v304, "пиздунов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v305, "пиздуна", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v306, "пиздун", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v307, "пиздуля", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v308, "пиздулей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v309, "пиздула", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v310, "пиздуйте", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v311, "пиздуйка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v312, "пиздуй", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v313, "пиздуешь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v314, "пиздуете", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v315, "пиздует", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v316, "пиздуем", "п*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v317, "пизду", "п***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v318, "пиздтый", "п*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v319, "пиздрячить", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v320, "пиздруй", "п*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v321, "пиздравляю", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v322, "пиздою", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v323, "пиздошу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v324, "пиздошить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v325, "пиздошит", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v326, "пиздохаю", "п******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v327, "пиздохаханьки", "п***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v328, "пиздохать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v329, "пиздохай", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v330, "пиздоу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v331, "пиздоты", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v332, "пиздотина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v333, "пиздота", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v334, "пиздося", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v335, "пиздосья", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v336, "пиздострадашки", "п************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v337, "пиздострадашек", "п************к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v338, "пиздострадатель", "п*************ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v339, "пиздостраданиях", "п*************х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v340, "пиздостраданиями", "п**************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v341, "пиздостраданиям", "п*************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v342, "пиздострадания", "п************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v343, "пиздостраданий", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v344, "пиздострадание", "п************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(v345, "пиздострадальческий", "п*****************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(v346, "пиздострадальческие", "п*****************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v347, "пиздострадальцы", "п*************ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(v348, "пиздострадальцам", "п**************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(v349, "пиздострадалицы", "п*************ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v350, "пиздострадалец", "п************ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v351, "пиздосс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v352, "пиздосов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v353, "пиздосина", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v354, "пиздосики", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v355, "пиздосик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v356, "пиздоси", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v357, "пиздосей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v358, "пиздоса", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v359, "пиздос", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v360, "пиздорукий", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v361, "пиздорукая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v362, "пиздорич", "п******ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v363, "пиздорить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v364, "пиздорез", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v365, "пиздорванки", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v366, "пиздорванка", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v367, "пиздорванец", "п*********ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v368, "пиздор", "п****р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v369, "пиздопроёбина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v370, "пиздопроушина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v371, "пиздопротивный", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v372, "пиздопроебины", "п***********ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v373, "пиздопроебина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v374, "пиздоос", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v375, "пиздонуть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v376, "пиздонутые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v377, "пиздони", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v378, "пиздон", "п****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v379, "пиздолить", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v380, "пиздолизы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v381, "пиздолизом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v382, "пиздолизов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v383, "пиздолизка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v384, "пиздолизами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v385, "пиздолиза", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v386, "пиздолиз", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v387, "пиздолет", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v388, "пиздокрылая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v389, "пиздокрыл", "п*******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v390, "пиздок", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v391, "пиздой", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v392, "пиздоеб", "п*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v393, "пиздодень", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v394, "пиздодельный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v395, "пиздодельные", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v396, "пиздодельная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v397, "пиздоглазых", "п*********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v398, "пиздоглазыми", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v399, "пиздоглазый", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v400, "пиздоглазые", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v401, "пиздоглазой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v402, "пиздоглазое", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v403, "пиздоглазие", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v404, "пиздоглазая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v405, "пиздоглаз", "п*******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v406, "пиздоган", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v407, "пиздоворот", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v408, "пиздовать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v409, "пиздоватый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v410, "пиздоватые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v411, "пиздоватой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v412, "пиздоватое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v413, "пиздоватая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v414, "пиздовали", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v415, "пиздовала", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v416, "пиздовал", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v417, "пиздов", "п****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v418, "пиздобратия", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v419, "пиздобратию", "п*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v420, "пиздобратии", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v421, "пиздобольством", "п************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v422, "пиздобольство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v423, "пиздобольства", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v424, "пиздоболы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v425, "пиздоболом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v426, "пиздоболов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v427, "пиздоболкой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v428, "пиздоболка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v429, "пиздоболия", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v430, "пиздоболию", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v431, "пиздоболить", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v432, "пиздоболии", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v433, "пиздоболие", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v434, "пиздоболами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v435, "пиздобола", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v436, "пиздобол", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v437, "пиздоблядство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v438, "пиздоблядский", "п***********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v439, "пиздоблядская", "п***********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v440, "пиздоблядина", "п**********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v441, "пиздо", "п***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v442, "пизднц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v443, "пиздлявых", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v444, "пиздлявый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v445, "пиздлявые", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v446, "пиздлявой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v447, "пиздлявая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v448, "пиздлом", "п*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v449, "пиздло", "п****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v450, "пиздливых", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v451, "пиздливым", "п*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v452, "пиздливый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v453, "пиздливые", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v454, "пиздливы", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v455, "пиздливое", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v456, "пиздливая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v457, "пиздлив", "п*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v458, "пиздия", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v459, "пиздиют", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v460, "пиздию", "п****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v461, "пиздищи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v462, "пиздище", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v463, "пиздища", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v464, "пиздишься", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v465, "пиздишь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v466, "пиздиш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v467, "пиздица", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v468, "пиздиц", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v469, "пиздиться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v470, "пиздить", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v471, "пиздится", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v472, "пиздити", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v473, "пиздитесь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v474, "пиздите", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v475, "пиздит", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v476, "пиздис", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v477, "пиздиной", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v478, "пиздинг", "п*****г");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v479, "пиздина", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v480, "пиздимся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v481, "пиздим", "п****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v482, "пиздился", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v483, "пиздилок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v484, "пиздилово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v485, "пиздиловки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v486, "пиздиловка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v487, "пиздилку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v488, "пиздилки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v489, "пиздилка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v490, "пиздились", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v491, "пиздили", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v492, "пиздилась", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v493, "пиздила", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v494, "пиздил", "п****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v495, "пиздикулус", "п********с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v496, "пиздика", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v497, "пиздий", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v498, "пиздиишь", "п******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v499, "пиздии", "п****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v500, "пиздиет", "п*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v501, "пизди", "п***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v502, "пизджу", "п****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v503, "пиздешь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v504, "пиздешн", "п*****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v505, "пиздеш", "п****ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v506, "пиздечик", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v507, "пиздеця", "п*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v508, "пиздецю", "п*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v509, "пиздець", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v510, "пиздецы", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v511, "пиздецъ", "п*****ъ");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v512, "пиздецхочу", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v513, "пиздецу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v514, "пиздецты", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v515, "пиздецсижу", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v516, "пиздецс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v517, "пиздецпо", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v518, "пиздецочек", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v519, "пиздецом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v520, "пиздецок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v521, "пиздецовых", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v522, "пиздецовым", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v523, "пиздецовый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v524, "пиздецовые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v525, "пиздецовую", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v526, "пиздецовский", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v527, "пиздецовость", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v528, "пиздецовой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v529, "пиздецовое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v530, "пиздецово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v531, "пиздецович", "п********ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v532, "пиздецовее", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v533, "пиздецовая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v534, "пиздецов", "п******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v535, "пиздецный", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v536, "пиздецнадо", "п********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v537, "пиздецмне", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v538, "пиздецменя", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v539, "пиздецкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v540, "пиздецкое", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v541, "пиздецкого", "п********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v542, "пиздецко", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v543, "пиздецких", "п*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v544, "пиздецким", "п*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v545, "пиздецкий", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v546, "пиздецкие", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v547, "пиздецки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v548, "пиздецкая", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v549, "пиздеци", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v550, "пиздецесли", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v551, "пиздеце", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v552, "пиздецдаже", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v553, "пиздецда", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v554, "пиздецв", "п*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v555, "пиздецахах", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v556, "пиздецах", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v557, "пиздецами", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v558, "пиздецам", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v559, "пиздеца", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v560, "пиздец", "п****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v561, "пиздеуц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v562, "пиздеться", "п*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v563, "пиздеть", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v564, "пиздетц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v565, "пиздетски", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v566, "пиздетс", "п*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v567, "пиздет", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v568, "пиздесь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v569, "пиздес", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v570, "пиздень", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v571, "пизденышь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v572, "пизденыши", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v573, "пизденыш", "п******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v574, "пизденочка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v575, "пизденок", "п******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v576, "пизденку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v577, "пизденкой", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v578, "пизденки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v579, "пизденке", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v580, "пизденка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v581, "пиздени", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v582, "пиздельники", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v583, "пиздельник", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v584, "пизделся", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v585, "пизделово", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v586, "пизделовка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v587, "пиздело", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v588, "пизделку", "п******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v589, "пизделки", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v590, "пизделка", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v591, "пизделись", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v592, "пиздели", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v593, "пизделей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v594, "пиздела", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v595, "пиздел", "п****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v596, "пиздек", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v597, "пиздейшн", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v598, "пиздейшин", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v599, "пиздейшен", "п*******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v600, "пиздейц", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v601, "пиздейро", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v602, "пиздей", "п****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v603, "пиздез", "п****з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v604, "пиздежь", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v605, "пиздежу", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v606, "пиздежом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v607, "пиздежи", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v608, "пиздежем", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v609, "пиздеже", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v610, "пиздежа", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v611, "пиздеж", "п****ж");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v612, "пиздеецц", "п******ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v613, "пиздеец", "п*****ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v614, "пизде", "п***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v615, "пиздая", "п****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v616, "пиздаче", "п*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v617, "пиздач", "п****ч");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v618, "пиздация", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v619, "пиздахаханьки", "п***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v620, "пиздахана", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v621, "пиздаускас", "п********с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v622, "пиздать", "п*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v623, "пиздатыый", "п*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v624, "пиздатых", "п******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v625, "пиздатыми", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v626, "пиздатым", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v627, "пиздатый", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v628, "пиздатые", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v629, "пиздаты", "п*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v630, "пиздатую", "п******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v631, "пиздатостью", "п*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v632, "пиздатость", "п********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v633, "пиздатости", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v634, "пиздатоо", "п******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v635, "пиздатому", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v636, "пиздатом", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v637, "пиздатой", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v638, "пиздатое", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v639, "пиздатого", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v640, "пиздато", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v641, "пиздатни", "п******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v642, "пиздатий", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v643, "пиздатенькое", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v644, "пиздатенького", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v645, "пиздатенько", "п*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v646, "пиздатеньких", "п**********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v647, "пиздатенький", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v648, "пиздатенькие", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v649, "пиздатенькая", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v650, "пиздатейший", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v651, "пиздатейшие", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v652, "пиздатейшее", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v653, "пиздатейше", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v654, "пиздатейшая", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v655, "пиздатей", "п******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v656, "пиздатее", "п******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v657, "пиздатая", "п******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v658, "пиздата", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v659, "пиздат", "п****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v660, "пиздастрадашки", "п************и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v661, "пиздастрадания", "п************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v662, "пиздастраданий", "п************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v663, "пиздастрадалец", "п************ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v664, "пиздас", "п****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v665, "пиздарулю", "п*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v666, "пиздарики", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v667, "пиздари", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v668, "пиздарез", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v669, "пиздарваньчик", "п***********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v670, "пиздапроёбина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v671, "пиздапроебины", "п***********ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v672, "пиздапроебина", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v673, "пиздапизда", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v674, "пизданёшь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v675, "пизданётся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v676, "пизданёт", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v677, "пизданём", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v678, "пиздануца", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v679, "пиздануться", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v680, "пиздануть", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v681, "пизданутых", "п********х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v682, "пизданутыми", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v683, "пизданутым", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v684, "пизданутый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v685, "пизданутые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v686, "пизданутую", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v687, "пизданутся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v688, "пизданутость", "п**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v689, "пизданутости", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v690, "пизданутой", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v691, "пизданутое", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v692, "пизданутого", "п*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v693, "пизданутей", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v694, "пизданутая", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v695, "пизданут", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v696, "пизданусь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v697, "пизданулся", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v698, "пизданулось", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v699, "пиздануло", "п*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v700, "пизданулись", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v701, "пизданули", "п*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v702, "пизданулась", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v703, "пизданула", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v704, "пизданул", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v705, "пиздану", "п*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v706, "пизданога", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v707, "пиздано", "п*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v708, "пизданите", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v709, "пизданись", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v710, "пиздани", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v711, "пизданешься", "п*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v712, "пизданешь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v713, "пизданется", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v714, "пизданете", "п*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v715, "пизданет", "п******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v716, "пизданем", "п******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v717, "пиздами", "п*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v718, "пиздамба", "п******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v719, "пиздам", "п****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v720, "пиздализ", "п******з");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v721, "пиздакшионер", "п**********р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v722, "пиздак", "п****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v723, "пиздаебы", "п******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v724, "пиздаебина", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v725, "пиздаеб", "п*****б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v726, "пиздаджигурда", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v727, "пиздадельный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v728, "пиздадельные", "п**********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v729, "пиздадельная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v730, "пиздада", "п*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v731, "пиздаган", "п******н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v732, "пиздавать", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v733, "пиздаватый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v734, "пиздаватые", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v735, "пиздаболят", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v736, "пиздаболю", "п*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v737, "пиздабольству", "п***********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v738, "пиздабольством", "п************м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v739, "пиздабольство", "п***********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v740, "пиздабольстве", "п***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v741, "пиздабольства", "п***********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v742, "пиздабольный", "п**********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v743, "пиздабольная", "п**********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v744, "пиздаболь", "п*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v745, "пиздаболы", "п*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v746, "пиздаболу", "п*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v747, "пиздаболом", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v748, "пиздаболок", "п********к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v749, "пиздаболов", "п********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v750, "пиздаболку", "п********у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v751, "пиздаболкой", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v752, "пиздаболки", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v753, "пиздаболке", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v754, "пиздаболками", "п**********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v755, "пиздаболка", "п********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v756, "пиздаболия", "п********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v757, "пиздаболию", "п********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v758, "пиздаболище", "п*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v759, "пиздаболишь", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v760, "пиздаболить", "п*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v761, "пиздаболит", "п********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v762, "пиздаболина", "п*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v763, "пиздаболии", "п********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v764, "пиздаболией", "п*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v765, "пиздаболие", "п********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v766, "пиздаболами", "п*********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v767, "пиздаболам", "п********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v768, "пиздабола", "п*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v769, "пиздабол", "п******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v770, "пиздаатыый", "п********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v771, "пизда", "п***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v772, "пизд", "п**д");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v773, "отъебаться", "о********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v774, "отпиздячить", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v775, "отпиздить", "о*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v776, "остопиздить", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v777, "остопиздеть", "о*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v778, "опизденивающе", "о***********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v779, "опизде", "о****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v780, "однохуйственно", "о************о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v781, "обьебать", "о******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v782, "объебать", "о******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v783, "нехуйственно", "н**********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v784, "нехуй", "н***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v785, "нахуйник", "н******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v786, "нахуй", "н***й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v787, "настопиздить", "н**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v788, "настоебать", "н********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v789, "напиздить", "н*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v790, "напиздили", "н*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v791, "напиздело", "н*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v792, "напиздели", "н*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v793, "напиздел", "н******л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v794, "наебать", "н*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v795, "мінет", "м***т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v796, "мудаків", "м*****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v797, "манда", "м***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v798, "лохотроном", "л********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v799, "лохами", "л****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v800, "испиздить", "и*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v801, "заёбанный", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v802, "затрахивать", "з*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v803, "затрахать", "з*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v804, "затрахали", "з*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v805, "затрахала", "з*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v806, "запиздячить", "з*********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v807, "запиздеть", "з*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v808, "залупа", "з****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v809, "заебаться", "з*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v810, "заебать", "з*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v811, "заебатый", "з******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v812, "заебатая", "з******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v813, "заебанец", "з******ц");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[12],0>(v814, "заeбанный", "з*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v815, "ебля", "е**я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v816, "ебатюшки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v817, "ебатьялох", "е*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v818, "ебатья", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v819, "ебатьты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[18],0>(v820, "ебаться-сраться", "е*************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v821, "ебаться", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v822, "ебатьколотить", "е***********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[15],0>(v823, "ебать-копать", "е**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[17],0>(v824, "ебать-колотить", "е************ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v825, "ебать", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v826, "ебаты", "е***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v827, "ебату", "е***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v828, "ебатся", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v829, "ебатория", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v830, "ебаторию", "е******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v831, "ебаторий", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v832, "ебатня", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v833, "ебатню", "е****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v834, "ебатика", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v835, "ебати", "е***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v836, "ебатень", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v837, "ебате", "е***е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v838, "ебата", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v839, "ебат", "е**т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v840, "ебарь", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v841, "ебанёшься", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v842, "ебанёшь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v843, "ебанётся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v844, "ебанёте", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v845, "ебанёт", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v846, "ебанём", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v847, "ебанята", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v848, "ебаням", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v849, "ебаня", "е***я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v850, "ебаньтяй", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v851, "ебанькоо", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v852, "ебаньком", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v853, "ебанько", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v854, "ебаньки", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v855, "ебань", "е***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v856, "ебаныый", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v857, "ебаных", "е****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v858, "ебанырот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v859, "ебаными", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v860, "ебаным", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v861, "ебаныйрот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v862, "ебаныйврот", "е********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v863, "ебаный", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v864, "ебаныи", "е****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v865, "ебаные", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v866, "ебаныврот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v867, "ебаны", "е***ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v868, "ебаную", "е****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v869, "ебанушку", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v870, "ебанушкой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v871, "ебанушки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v872, "ебанушками", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v873, "ебанушкам", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v874, "ебанушка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v875, "ебанушек", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v876, "ебануцца", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v877, "ебануцо", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v878, "ебануца", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v879, "ебануха", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v880, "ебанууться", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v881, "ебануутая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v882, "ебанутьсяя", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v883, "ебануться", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v884, "ебануть", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v885, "ебанутых", "е******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v886, "ебанутыми", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v887, "ебанутым", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v888, "ебанутый", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v889, "ебанутые", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v890, "ебануты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v891, "ебанутую", "е******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v892, "ебанутся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v893, "ебанутством", "е*********м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v894, "ебанутство", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v895, "ебанутства", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v896, "ебанутсво", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v897, "ебанутось", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v898, "ебанутостью", "е*********ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v899, "ебанутость", "е********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v900, "ебанутости", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v901, "ебанутостей", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v902, "ебанутому", "е*******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v903, "ебанутом", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v904, "ебанутой", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v905, "ебанутое", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v906, "ебанутого", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v907, "ебануто", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v908, "ебанутки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v909, "ебанутка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v910, "ебанутики", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v911, "ебанутика", "е*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v912, "ебанутик", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v913, "ебанутий", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v914, "ебанутейший", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v915, "ебанутейшие", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v916, "ебанутейшая", "е*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v917, "ебанутей", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v918, "ебанутее", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v919, "ебануте", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v920, "ебанутаяя", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v921, "ебанутая", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v922, "ебанутаая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v923, "ебанутаЯ", "е******Я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v924, "ебанута", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v925, "ебанут", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v926, "ебанусь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v927, "ебанулся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v928, "ебанулсь", "е******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v929, "ебанулсо", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v930, "ебанулс", "е*****с");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v931, "ебанулось", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v932, "ебануло", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v933, "ебанулисья", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v934, "ебанулись", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v935, "ебанули", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v936, "ебанулась", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v937, "ебанула", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v938, "ебанул", "е****л");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v939, "ебануй", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v940, "ебану", "е***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v941, "ебантяями", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v942, "ебантяям", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v943, "ебантяя", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v944, "ебантяйство", "е*********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v945, "ебантяйства", "е*********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v946, "ебантяйское", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v947, "ебантяйские", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v948, "ебантяйки", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v949, "ебантяйка", "е*******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v950, "ебантяй", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v951, "ебантяи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v952, "ебантяем", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v953, "ебантяев", "е******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v954, "ебантизм", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v955, "ебантеи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v956, "ебанство", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v957, "ебанско", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v958, "ебанский", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v959, "ебанрот", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v960, "ебаноё", "е****ё");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v961, "ебаному", "е*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v962, "ебаном", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v963, "ебанок", "е****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v964, "ебаной", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v965, "ебаное", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v966, "ебаного", "е*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v967, "ебановрот", "е*******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v968, "ебанов", "е****в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v969, "ебано", "е***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v970, "ебанных", "е*****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v971, "ебанными", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v972, "ебанным", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v973, "ебанныйврот", "е*********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v974, "ебанный", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v975, "ебанныи", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v976, "ебанные", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v977, "ебанную", "е*****ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v978, "ебаннутых", "е*******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v979, "ебаннутый", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v980, "ебаннутые", "е*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v981, "ебаннутой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v982, "ебаннутое", "е*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v983, "ебаннутого", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v984, "ебаннутая", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v985, "ебанному", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v986, "ебанном", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v987, "ебанной", "е*****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v988, "ебанное", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v989, "ебанного", "е******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v990, "ебанно", "е****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v991, "ебанная", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v992, "ебанна", "е****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v993, "ебанка", "е****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v994, "ебания", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v995, "ебанический", "е*********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v996, "ебанические", "е*********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v997, "ебанически", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v998, "ебанитовая", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v999, "ебанитесь", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1000, "ебаните", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1001, "ебанись", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1002, "ебанистической", "е************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1003, "ебанистический", "е************й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1004, "ебанистические", "е************е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(v1005, "ебанистически", "е***********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(v1006, "ебанистическая", "е************я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1007, "ебанистика", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1008, "ебанины", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1009, "ебанина", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1010, "ебаний", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1011, "ебании", "е****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1012, "ебанизмом", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1013, "ебанизма", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1014, "ебанизм", "е*****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1015, "ебание", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1016, "ебанешься", "е*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1017, "ебанешь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1018, "ебанешся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1019, "ебанется", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1020, "ебанете", "е*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1021, "ебанет", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1022, "ебаненько", "е*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1023, "ебаненький", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1024, "ебанемся", "е******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1025, "ебанем", "е****м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1026, "ебанейший", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1027, "ебаней", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1028, "ебанее", "е****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1029, "ебанврот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1030, "ебанаяя", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1031, "ебаная", "е****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1032, "ебанашку", "е******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1033, "ебанашкой", "е*******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1034, "ебанашки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1035, "ебанашке", "е******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1036, "ебанашками", "е********и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1037, "ебанашкам", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1038, "ебанашка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1039, "ебанаши", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1040, "ебанашечка", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1041, "ебанашек", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1042, "ебанафт", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1043, "ебанатый", "е******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1044, "ебанаты", "е*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1045, "ебанату", "е*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1046, "ебанатство", "е********о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1047, "ебанатства", "е********а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1048, "ебанатской", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1049, "ебанатский", "е********й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1050, "ебанатские", "е********е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1051, "ебанатская", "е********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1052, "ебанаторы", "е*******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1053, "ебанатор", "е******р");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1054, "ебанатом", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1055, "ебанатов", "е******в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1056, "ебанатки", "е******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1057, "ебанатка", "е******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1058, "ебанатиков", "е********в");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1059, "ебанатики", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1060, "ебанатик", "е******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1061, "ебанатизм", "е*******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1062, "ебанатами", "е*******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1063, "ебанатам", "е******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1064, "ебаната", "е*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1065, "ебанат", "е****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1066, "ебанарь", "е*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1067, "ебанарот", "е******т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1068, "ебанан", "е****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1069, "ебанами", "е*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1070, "ебанамать", "е*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1071, "ебанай", "е****й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1072, "ебанавты", "е******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1073, "ебанавт", "е*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1074, "ебанаая", "е*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1075, "ебана", "е***а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1076, "ебан", "е**н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1077, "дрочити", "д*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1078, "допиздеться", "д*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1079, "доебаться", "д*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(v1080, "до-пизды", "д******ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1081, "гівнюк", "г****к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1082, "гівно", "г***о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1083, "гребаных", "г******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1084, "гребаную", "г******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1085, "гребаного", "г*******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1086, "гребанные", "г*******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1087, "гребанную", "г*******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1088, "выпиздить", "в*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1089, "выпиздеться", "в*********я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1090, "выебать", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1091, "выблядыш", "в******ш");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1092, "выблядок", "в******к");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1093, "въебаться", "в*******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1094, "въебать", "в*****ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1095, "всратися", "в******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1096, "всрались", "в******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1097, "впиздячить", "в********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1098, "блять", "б***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1099, "блятство", "б******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1100, "блятский", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1101, "блятская", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1102, "блянадо", "б*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1103, "бляменя", "б*****я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1104, "блямба", "б****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1105, "блямб", "б***б");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1106, "блякаешь", "б******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1107, "блядях", "б****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1108, "блядями", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1109, "блядюга", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1110, "блядьми", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1111, "блядь", "б***ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1112, "блядуют", "б*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1113, "блядушки", "б******и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1114, "блядунья", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1115, "блядуны", "б*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1116, "блядун", "б****н");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1117, "блядуешь", "б******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1118, "блядует", "б*****т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1119, "блядству", "б******у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(v1120, "блядствовать", "б**********ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1121, "блядство", "б******о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1122, "блядстве", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1123, "блядства", "б******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1124, "блядскую", "б******ю");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1125, "блядском", "б******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1126, "блядской", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1127, "блядское", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1128, "блядско", "б*****о");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1129, "блядских", "б******х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1130, "блядским", "б******м");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1131, "блядский", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1132, "блядские", "б******е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1133, "блядски", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1134, "блядская", "б******я");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1135, "блядота", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1136, "блядовать", "б*******ь");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1137, "блядки", "б****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1138, "блядках", "б*****х");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1139, "блядищи", "б*****и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1140, "блядище", "б*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1141, "блядища", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1142, "блядины", "б*****ы");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1143, "блядину", "б*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1144, "блядиной", "б******й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1145, "блядинка", "б******а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1146, "блядине", "б*****е");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1147, "блядина", "б*****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1148, "бляди", "б***и");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1149, "бляд", "б**д");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1150, "блябуду", "б*****у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1151, "блябу", "б***у");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1152, "ахуй", "а**й");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1153, "архипиздрит", "а*********т");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(v1154, "eбаный", "e****й");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_uk(void)::sProfanityData_uk, (uint64_t)v5, 0x47EuLL);
    for (i = 0; i != -6900; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1154[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_uk(void)::sProfanityData_uk, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_uk(void)::sProfanityData_uk[0], unk_1EF582028, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582028 - GetProfanityFilter_uk(void)::sProfanityData_uk[0]) >> 4));
}

void sub_1BF9EB9F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 55152;
  v4 = -55200;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_ar(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[6];
  _QWORD v556[6];
  _QWORD v557[6];
  _QWORD v558[6];
  _QWORD v559[6];
  _QWORD v560[6];
  _QWORD v561[6];
  _QWORD v562[6];
  _QWORD v563[6];
  _QWORD v564[6];
  _QWORD v565[6];
  _QWORD v566[6];
  _QWORD v567[6];
  _QWORD v568[6];
  _QWORD v569[6];
  _QWORD v570[6];
  _QWORD v571[6];
  _QWORD v572[6];
  _QWORD v573[6];
  _QWORD v574[6];
  _QWORD v575[6];
  _QWORD v576[6];
  _QWORD v577[6];
  _QWORD v578[6];
  _QWORD v579[6];
  _QWORD v580[6];
  _QWORD v581[6];
  _QWORD v582[6];
  _QWORD v583[6];
  _QWORD v584[6];
  _QWORD v585[6];
  _QWORD v586[6];
  _QWORD v587[6];
  _QWORD v588[6];
  _QWORD v589[6];
  _QWORD v590[6];
  _QWORD v591[6];
  _QWORD v592[6];
  _QWORD v593[6];
  _QWORD v594[6];
  _QWORD v595[6];
  _QWORD v596[6];
  _QWORD v597[6];
  _QWORD v598[6];
  _QWORD v599[6];
  _QWORD v600[6];
  _QWORD v601[6];
  _QWORD v602[6];
  _QWORD v603[6];
  _QWORD v604[6];
  _QWORD v605[6];
  _QWORD v606[6];
  _QWORD v607[6];
  _QWORD v608[6];
  _QWORD v609[6];
  _QWORD v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[6];
  _QWORD v622[6];
  _QWORD v623[6];
  _QWORD v624[6];
  _QWORD v625[6];
  _QWORD v626[6];
  _QWORD v627[6];
  _QWORD v628[6];
  _QWORD v629[6];
  _QWORD v630[6];
  _QWORD v631[6];
  _QWORD v632[6];
  _QWORD v633[6];
  _QWORD v634[6];
  _QWORD v635[6];
  _QWORD v636[6];
  _QWORD v637[6];
  _QWORD v638[6];
  _QWORD v639[6];
  _QWORD v640[6];
  _QWORD v641[6];
  _QWORD v642[6];
  _QWORD v643[6];
  _QWORD v644[6];
  _QWORD v645[6];
  _QWORD v646[6];
  _QWORD v647[6];
  _QWORD v648[6];
  _QWORD v649[6];
  _QWORD v650[6];
  _QWORD v651[6];
  _QWORD v652[6];
  _QWORD v653[6];
  _QWORD v654[6];
  _QWORD v655[6];
  _QWORD v656[6];
  _QWORD v657[6];
  _QWORD v658[6];
  _QWORD v659[6];
  _QWORD v660[6];
  _QWORD v661[6];
  _QWORD v662[6];
  _QWORD v663[6];
  _QWORD v664[6];
  _QWORD v665[6];
  _QWORD v666[6];
  _QWORD v667[6];
  _QWORD v668[6];
  _QWORD v669[6];
  _QWORD v670[6];
  _QWORD v671[6];
  _QWORD v672[6];
  _QWORD v673[6];
  _QWORD v674[6];
  _QWORD v675[6];
  _QWORD v676[6];
  _QWORD v677[6];
  _QWORD v678[6];
  _QWORD v679[6];
  _QWORD v680[6];
  _QWORD v681[6];
  _QWORD v682[6];
  _QWORD v683[6];
  _QWORD v684[6];
  _QWORD v685[6];
  _QWORD v686[6];
  _QWORD v687[6];
  _QWORD v688[6];
  _QWORD v689[6];
  _QWORD v690[6];
  _QWORD v691[6];
  _QWORD v692[6];
  _QWORD v693[6];
  _QWORD v694[6];
  _QWORD v695[6];
  _QWORD v696[6];
  _QWORD v697[6];
  _QWORD v698[6];
  _QWORD v699[6];
  _QWORD v700[6];
  _QWORD v701[6];
  _QWORD v702[6];
  _QWORD v703[6];
  _QWORD v704[6];
  _QWORD v705[6];
  _QWORD v706[6];
  _QWORD v707[6];
  _QWORD v708[6];
  _QWORD v709[6];
  _QWORD v710[6];
  _QWORD v711[6];
  _QWORD v712[6];
  _QWORD v713[6];
  _QWORD v714[6];
  _QWORD v715[6];
  _QWORD v716[6];
  _QWORD v717[6];
  _QWORD v718[6];
  _QWORD v719[6];
  _QWORD v720[6];
  _QWORD v721[6];
  _QWORD v722[6];
  _QWORD v723[6];
  _QWORD v724[6];
  _QWORD v725[6];
  _QWORD v726[6];
  _QWORD v727[6];
  _QWORD v728[6];
  _QWORD v729[6];
  _QWORD v730[6];
  _QWORD v731[6];
  _QWORD v732[6];
  _QWORD v733[6];
  _QWORD v734[6];
  _QWORD v735[6];
  _QWORD v736[6];
  _QWORD v737[6];
  _QWORD v738[6];
  _QWORD v739[6];
  _QWORD v740[6];
  _QWORD v741[6];
  _QWORD v742[6];
  _QWORD v743[6];
  _QWORD v744[6];
  _QWORD v745[6];
  _QWORD v746[6];
  _QWORD v747[6];
  _QWORD v748[6];
  _QWORD v749[6];
  _QWORD v750[6];
  _QWORD v751[6];
  _QWORD v752[6];
  _QWORD v753[6];
  _QWORD v754[6];
  _QWORD v755[6];
  _QWORD v756[6];
  _QWORD v757[6];
  _QWORD v758[6];
  _QWORD v759[6];
  _QWORD v760[6];
  _QWORD v761[6];
  _QWORD v762[6];
  _QWORD v763[6];
  _QWORD v764[6];
  _QWORD v765[6];
  _QWORD v766[6];
  _QWORD v767[6];
  _QWORD v768[6];
  _QWORD v769[6];
  _QWORD v770[6];
  _QWORD v771[6];
  _QWORD v772[6];
  _QWORD v773[6];
  _QWORD v774[6];
  _QWORD v775[6];
  _QWORD v776[6];
  _QWORD v777[6];
  _QWORD v778[6];
  _QWORD v779[6];
  _QWORD v780[6];
  _QWORD v781[6];
  _QWORD v782[6];
  _QWORD v783[6];
  _QWORD v784[6];
  _QWORD v785[6];
  _QWORD v786[6];
  _QWORD v787[6];
  _QWORD v788[6];
  _QWORD v789[6];
  _QWORD v790[6];
  _QWORD v791[6];
  _QWORD v792[6];
  _QWORD v793[6];
  _QWORD v794[6];
  _QWORD v795[6];
  _QWORD v796[6];
  _QWORD v797[6];
  _QWORD v798[6];
  _QWORD v799[6];
  _QWORD v800[6];
  _QWORD v801[6];
  _QWORD v802[6];
  _QWORD v803[6];
  _QWORD v804[6];
  _QWORD v805[6];
  _QWORD v806[6];
  _QWORD v807[6];
  _QWORD v808[6];
  _QWORD v809[6];
  _QWORD v810[6];
  _QWORD v811[6];
  _QWORD v812[6];
  _QWORD v813[6];
  _QWORD v814[6];
  _QWORD v815[6];
  _QWORD v816[6];
  _QWORD v817[6];
  _QWORD v818[6];
  _QWORD v819[6];
  _QWORD v820[6];
  _QWORD v821[6];
  _QWORD v822[6];
  _QWORD v823[6];
  _QWORD v824[6];
  _QWORD v825[6];
  _QWORD v826[6];
  _QWORD v827[6];
  _QWORD v828[6];
  _QWORD v829[6];
  _QWORD v830[6];
  _QWORD v831[6];
  _QWORD v832[6];
  _QWORD v833[6];
  _QWORD v834[6];
  _QWORD v835[6];
  _QWORD v836[6];
  _QWORD v837[6];
  _QWORD v838[6];
  _QWORD v839[6];
  _QWORD v840[6];
  _QWORD v841[6];
  _QWORD v842[6];
  _QWORD v843[6];
  _QWORD v844[6];
  _QWORD v845[6];
  _QWORD v846[6];
  _QWORD v847[6];
  _QWORD v848[6];
  _QWORD v849[6];
  _QWORD v850[6];
  _QWORD v851[6];
  _QWORD v852[6];
  _QWORD v853[6];
  _QWORD v854[6];
  _QWORD v855[6];
  _QWORD v856[6];
  _QWORD v857[6];
  _QWORD v858[6];
  _QWORD v859[6];
  _QWORD v860[6];
  _QWORD v861[6];
  _QWORD v862[6];
  _QWORD v863[6];
  _QWORD v864[6];
  _QWORD v865[6];
  _QWORD v866[6];
  _QWORD v867[6];
  _QWORD v868[6];
  _QWORD v869[6];
  _QWORD v870[6];
  _QWORD v871[6];
  _QWORD v872[6];
  _QWORD v873[6];
  _QWORD v874[6];
  _QWORD v875[6];
  _QWORD v876[6];
  _QWORD v877[6];
  _QWORD v878[6];
  _QWORD v879[6];
  _QWORD v880[6];
  _QWORD v881[6];
  _QWORD v882[6];
  _QWORD v883[6];
  _QWORD v884[6];
  _QWORD v885[6];
  _QWORD v886[6];
  _QWORD v887[6];
  _QWORD v888[6];
  _QWORD v889[6];
  _QWORD v890[6];
  _QWORD v891[6];
  _QWORD v892[6];
  _QWORD v893[6];
  _QWORD v894[6];
  _QWORD v895[6];
  _QWORD v896[6];
  _QWORD v897[6];
  _QWORD v898[6];
  _QWORD v899[6];
  _QWORD v900[6];
  _QWORD v901[6];
  _QWORD v902[6];
  _QWORD v903[6];
  _QWORD v904[6];
  _QWORD v905[6];
  _QWORD v906[6];
  _QWORD v907[6];
  _QWORD v908[6];
  _QWORD v909[6];
  _QWORD v910[6];
  _QWORD v911[6];
  _QWORD v912[6];
  _QWORD v913[6];
  _QWORD v914[6];
  _QWORD v915[6];
  _QWORD v916[6];
  _QWORD v917[6];
  _QWORD v918[6];
  _QWORD v919[6];
  _QWORD v920[6];
  _QWORD v921[6];
  _QWORD v922[6];
  _QWORD v923[6];
  _QWORD v924[6];
  _QWORD v925[6];
  _QWORD v926[6];
  _QWORD v927[6];
  _QWORD v928[6];
  _QWORD v929[6];
  _QWORD v930[6];
  _QWORD v931[6];
  _QWORD v932[6];
  _QWORD v933[6];
  _QWORD v934[6];
  _QWORD v935[6];
  _QWORD v936[6];
  _QWORD v937[6];
  _QWORD v938[6];
  _QWORD v939[6];
  _QWORD v940[6];
  _QWORD v941[6];
  _QWORD v942[6];
  _QWORD v943[6];
  _QWORD v944[6];
  _QWORD v945[6];
  _QWORD v946[6];
  _QWORD v947[6];
  _QWORD v948[6];
  _QWORD v949[6];
  _QWORD v950[6];
  _QWORD v951[6];
  _QWORD v952[6];
  _QWORD v953[6];
  _QWORD v954[6];
  _QWORD v955[6];
  _QWORD v956[6];
  _QWORD v957[6];
  _QWORD v958[6];
  _QWORD v959[6];
  _QWORD v960[6];
  _QWORD v961[6];
  _QWORD v962[6];
  _QWORD v963[6];
  _QWORD v964[6];
  _QWORD v965[6];
  _QWORD v966[6];
  _QWORD v967[6];
  _QWORD v968[6];
  _QWORD v969[6];
  _QWORD v970[6];
  _QWORD v971[6];
  _QWORD v972[6];
  _QWORD v973[6];
  _QWORD v974[6];
  _QWORD v975[6];
  _QWORD v976[6];
  _QWORD v977[6];
  _QWORD v978[6];
  _QWORD v979[6];
  _QWORD v980[6];
  _QWORD v981[6];
  _QWORD v982[6];
  _QWORD v983[6];
  _QWORD v984[6];
  _QWORD v985[6];
  _QWORD v986[6];
  _QWORD v987[6];
  _QWORD v988[6];
  _QWORD v989[6];
  _QWORD v990[6];
  _QWORD v991[6];
  _QWORD v992[6];
  _QWORD v993[6];
  _QWORD v994[6];
  _QWORD v995[6];
  _QWORD v996[6];
  _QWORD v997[6];
  _QWORD v998[6];
  _QWORD v999[6];
  _QWORD v1000[6];
  _QWORD v1001[6];
  _QWORD v1002[6];
  _QWORD v1003[6];
  _QWORD v1004[6];
  _QWORD v1005[6];
  _QWORD v1006[6];
  _QWORD v1007[6];
  _QWORD v1008[6];
  _QWORD v1009[6];
  _QWORD v1010[6];
  _QWORD v1011[6];
  _QWORD v1012[6];
  _QWORD v1013[6];
  _QWORD v1014[6];
  _QWORD v1015[6];
  _QWORD v1016[6];
  _QWORD v1017[6];
  _QWORD v1018[6];
  _QWORD v1019[6];
  _QWORD v1020[6];
  _QWORD v1021[6];
  _QWORD v1022[6];
  _QWORD v1023[6];
  _QWORD v1024[6];
  _QWORD v1025[6];
  _QWORD v1026[6];
  _QWORD v1027[6];
  _QWORD v1028[6];
  _QWORD v1029[6];
  _QWORD v1030[6];
  _QWORD v1031[6];
  _QWORD v1032[6];
  _QWORD v1033[6];
  _QWORD v1034[6];
  _QWORD v1035[6];
  _QWORD v1036[6];
  _QWORD v1037[6];
  _QWORD v1038[6];
  _QWORD v1039[6];
  _QWORD v1040[6];
  _QWORD v1041[6];
  _QWORD v1042[6];
  _QWORD v1043[6];
  _QWORD v1044[6];
  _QWORD v1045[6];
  _QWORD v1046[6];
  _QWORD v1047[6];
  _QWORD v1048[6];
  _QWORD v1049[6];
  _QWORD v1050[6];
  _QWORD v1051[6];
  _QWORD v1052[6];
  _QWORD v1053[6];
  _QWORD v1054[6];
  _QWORD v1055[6];
  _QWORD v1056[6];
  _QWORD v1057[6];
  _QWORD v1058[6];
  _QWORD v1059[6];
  _QWORD v1060[6];
  _QWORD v1061[6];
  _QWORD v1062[6];
  _QWORD v1063[6];
  _QWORD v1064[6];
  _QWORD v1065[6];
  _QWORD v1066[6];
  _QWORD v1067[6];
  _QWORD v1068[6];
  _QWORD v1069[6];
  _QWORD v1070[6];
  _QWORD v1071[6];
  _QWORD v1072[6];
  _QWORD v1073[6];
  _QWORD v1074[6];
  _QWORD v1075[6];
  _QWORD v1076[6];
  _QWORD v1077[6];
  _QWORD v1078[6];
  _QWORD v1079[6];
  _QWORD v1080[6];
  _QWORD v1081[6];
  _QWORD v1082[6];
  _QWORD v1083[6];
  _QWORD v1084[6];
  _QWORD v1085[6];
  _QWORD v1086[6];
  _QWORD v1087[6];
  _QWORD v1088[6];
  _QWORD v1089[6];
  _QWORD v1090[6];
  _QWORD v1091[6];
  _QWORD v1092[6];
  _QWORD v1093[6];
  _QWORD v1094[6];
  _QWORD v1095[6];
  _QWORD v1096[6];
  _QWORD v1097[6];
  _QWORD v1098[6];
  _QWORD v1099[6];
  _QWORD v1100[6];
  _QWORD v1101[6];
  _QWORD v1102[6];
  _QWORD v1103[6];
  _QWORD v1104[6];
  _QWORD v1105[6];
  _QWORD v1106[6];
  _QWORD v1107[6];
  _QWORD v1108[6];
  _QWORD v1109[6];
  _QWORD v1110[6];
  _QWORD v1111[6];
  _QWORD v1112[6];
  _QWORD v1113[6];
  _QWORD v1114[6];
  _QWORD v1115[6];
  _QWORD v1116[6];
  _QWORD v1117[6];
  _QWORD v1118[6];
  _QWORD v1119[6];
  _QWORD v1120[6];
  _QWORD v1121[6];
  _QWORD v1122[6];
  _QWORD v1123[6];
  _QWORD v1124[6];
  _QWORD v1125[6];
  _QWORD v1126[6];
  _QWORD v1127[6];
  _QWORD v1128[6];
  _QWORD v1129[6];
  _QWORD v1130[6];
  _QWORD v1131[6];
  _QWORD v1132[6];
  _QWORD v1133[6];
  _QWORD v1134[6];
  _QWORD v1135[6];
  _QWORD v1136[6];
  _QWORD v1137[6];
  _QWORD v1138[6];
  _QWORD v1139[6];
  _QWORD v1140[6];
  _QWORD v1141[6];
  _QWORD v1142[6];
  _QWORD v1143[6];
  _QWORD v1144[6];
  _QWORD v1145[6];
  _QWORD v1146[6];
  _QWORD v1147[6];
  _QWORD v1148[6];
  _QWORD v1149[6];
  _QWORD v1150[6];
  _QWORD v1151[6];
  _QWORD v1152[6];
  _QWORD v1153[6];
  _QWORD v1154[6];
  _QWORD v1155[6];
  _QWORD v1156[6];
  _QWORD v1157[6];
  _QWORD v1158[6];
  _QWORD v1159[6];
  _QWORD v1160[6];
  _QWORD v1161[6];
  _QWORD v1162[6];
  _QWORD v1163[6];
  _QWORD v1164[6];
  _QWORD v1165[6];
  _QWORD v1166[6];
  _QWORD v1167[6];
  _QWORD v1168[6];
  _QWORD v1169[6];
  _QWORD v1170[6];
  _QWORD v1171[6];
  _QWORD v1172[6];
  _QWORD v1173[6];
  _QWORD v1174[6];
  _QWORD v1175[6];
  _QWORD v1176[6];
  _QWORD v1177[6];
  _QWORD v1178[6];
  _QWORD v1179[6];
  _QWORD v1180[6];
  _QWORD v1181[6];
  _QWORD v1182[6];
  _QWORD v1183[6];
  _QWORD v1184[6];
  _QWORD v1185[6];
  _QWORD v1186[6];
  _QWORD v1187[6];
  _QWORD v1188[6];
  _QWORD v1189[6];
  _QWORD v1190[6];
  _QWORD v1191[6];
  _QWORD v1192[6];
  _QWORD v1193[6];
  _QWORD v1194[6];
  _QWORD v1195[6];
  _QWORD v1196[6];
  _QWORD v1197[6];
  _QWORD v1198[6];
  _QWORD v1199[6];
  _QWORD v1200[6];
  _QWORD v1201[6];
  _QWORD v1202[6];
  _QWORD v1203[6];
  _QWORD v1204[6];
  _QWORD v1205[6];
  _QWORD v1206[6];
  _QWORD v1207[6];
  _QWORD v1208[6];
  _QWORD v1209[6];
  _QWORD v1210[6];
  _QWORD v1211[6];
  _QWORD v1212[6];
  _QWORD v1213[6];
  _QWORD v1214[6];
  _QWORD v1215[6];
  _QWORD v1216[6];
  _QWORD v1217[6];
  _QWORD v1218[6];
  _QWORD v1219[6];
  _QWORD v1220[6];
  _QWORD v1221[6];
  _QWORD v1222[6];
  _QWORD v1223[6];
  _QWORD v1224[6];
  _QWORD v1225[6];
  _QWORD v1226[6];
  _QWORD v1227[6];
  _QWORD v1228[6];
  _QWORD v1229[6];
  _QWORD v1230[6];
  _QWORD v1231[6];
  _QWORD v1232[6];
  _QWORD v1233[6];
  _QWORD v1234[6];
  _QWORD v1235[6];
  _QWORD v1236[6];
  _QWORD v1237[6];
  _QWORD v1238[6];
  _QWORD v1239[6];
  _QWORD v1240[6];
  _QWORD v1241[6];
  _QWORD v1242[6];
  _QWORD v1243[6];
  _QWORD v1244[6];
  _QWORD v1245[6];
  _QWORD v1246[6];
  _QWORD v1247[6];
  _QWORD v1248[6];
  _QWORD v1249[6];
  _QWORD v1250[6];
  _QWORD v1251[6];
  _QWORD v1252[6];
  _QWORD v1253[6];
  _QWORD v1254[6];
  _QWORD v1255[6];
  _QWORD v1256[6];
  _QWORD v1257[6];
  _QWORD v1258[6];
  _QWORD v1259[6];
  _QWORD v1260[6];
  _QWORD v1261[6];
  _QWORD v1262[6];
  _QWORD v1263[6];
  _QWORD v1264[6];
  _QWORD v1265[6];
  _QWORD v1266[6];
  _QWORD v1267[6];
  _QWORD v1268[6];
  _QWORD v1269[6];
  _QWORD v1270[6];
  _QWORD v1271[6];
  _QWORD v1272[6];
  _QWORD v1273[6];
  _QWORD v1274[6];
  _QWORD v1275[6];
  _QWORD v1276[6];
  _QWORD v1277[6];
  _QWORD v1278[6];
  _QWORD v1279[6];
  _QWORD v1280[6];
  _QWORD v1281[6];
  _QWORD v1282[6];
  _QWORD v1283[6];
  _QWORD v1284[6];
  _QWORD v1285[6];
  _QWORD v1286[6];
  _QWORD v1287[6];
  _QWORD v1288[6];
  _QWORD v1289[6];
  _QWORD v1290[6];
  _QWORD v1291[6];
  _QWORD v1292[6];
  _QWORD v1293[6];
  _QWORD v1294[6];
  _QWORD v1295[6];
  _QWORD v1296[6];
  _QWORD v1297[6];
  _QWORD v1298[6];
  _QWORD v1299[6];
  _QWORD v1300[6];
  _QWORD v1301[6];
  _QWORD v1302[6];
  _QWORD v1303[6];
  _QWORD v1304[6];
  _QWORD v1305[6];
  _QWORD v1306[6];
  _QWORD v1307[6];
  _QWORD v1308[6];
  _QWORD v1309[6];
  _QWORD v1310[6];
  _QWORD v1311[6];
  _QWORD v1312[6];
  _QWORD v1313[6];
  _QWORD v1314[6];
  _QWORD v1315[6];
  _QWORD v1316[6];
  _QWORD v1317[6];
  _QWORD v1318[6];
  _QWORD v1319[6];
  _QWORD v1320[6];
  _QWORD v1321[6];
  _QWORD v1322[6];
  _QWORD v1323[6];
  _QWORD v1324[6];
  _QWORD v1325[6];
  _QWORD v1326[6];
  _QWORD v1327[6];
  _QWORD v1328[6];
  _QWORD v1329[6];
  _QWORD v1330[6];
  _QWORD v1331[6];
  _QWORD v1332[6];
  _QWORD v1333[6];
  _QWORD v1334[6];
  _QWORD v1335[6];
  _QWORD v1336[6];
  _QWORD v1337[6];
  _QWORD v1338[6];
  _QWORD v1339[6];
  _QWORD v1340[6];
  _QWORD v1341[6];
  _QWORD v1342[6];
  _QWORD v1343[6];
  _QWORD v1344[6];
  _QWORD v1345[6];
  _QWORD v1346[6];
  _QWORD v1347[6];
  _QWORD v1348[6];
  _QWORD v1349[6];
  _QWORD v1350[6];
  _QWORD v1351[6];
  _QWORD v1352[6];
  _QWORD v1353[6];
  _QWORD v1354[6];
  _QWORD v1355[6];
  _QWORD v1356[6];
  _QWORD v1357[6];
  _QWORD v1358[6];
  _QWORD v1359[6];
  _QWORD v1360[6];
  _QWORD v1361[6];
  _QWORD v1362[6];
  _QWORD v1363[6];
  _QWORD v1364[6];
  _QWORD v1365[6];
  _QWORD v1366[6];
  _QWORD v1367[6];
  _QWORD v1368[6];
  _QWORD v1369[6];
  _QWORD v1370[6];
  _QWORD v1371[6];
  _QWORD v1372[6];
  _QWORD v1373[6];
  _QWORD v1374[6];
  _QWORD v1375[6];
  _QWORD v1376[6];
  _QWORD v1377[6];
  _QWORD v1378[6];
  _QWORD v1379[6];
  _QWORD v1380[6];
  _QWORD v1381[6];
  _QWORD v1382[6];
  _QWORD v1383[6];
  _QWORD v1384[6];
  _QWORD v1385[6];
  _QWORD v1386[6];
  _QWORD v1387[6];
  _QWORD v1388[6];
  _QWORD v1389[6];
  _QWORD v1390[6];
  _QWORD v1391[6];
  _QWORD v1392[6];
  _QWORD v1393[6];
  _QWORD v1394[6];
  _QWORD v1395[6];
  _QWORD v1396[6];
  _QWORD v1397[6];
  _QWORD v1398[6];
  _QWORD v1399[6];
  _QWORD v1400[6];
  _QWORD v1401[6];
  _QWORD v1402[6];
  _QWORD v1403[6];
  _QWORD v1404[6];
  _QWORD v1405[6];
  _QWORD v1406[6];
  _QWORD v1407[6];
  _QWORD v1408[6];
  _QWORD v1409[6];
  _QWORD v1410[6];
  _QWORD v1411[6];
  _QWORD v1412[6];
  _QWORD v1413[6];
  _QWORD v1414[6];
  _QWORD v1415[6];
  _QWORD v1416[6];
  _QWORD v1417[6];
  _QWORD v1418[6];
  _QWORD v1419[6];
  _QWORD v1420[6];
  _QWORD v1421[6];
  _QWORD v1422[6];
  _QWORD v1423[6];
  _QWORD v1424[6];
  _QWORD v1425[6];
  _QWORD v1426[6];
  _QWORD v1427[6];
  _QWORD v1428[6];
  _QWORD v1429[6];
  _QWORD v1430[6];
  _QWORD v1431[6];
  _QWORD v1432[6];
  _QWORD v1433[6];
  _QWORD v1434[6];
  _QWORD v1435[6];
  _QWORD v1436[6];
  _QWORD v1437[6];
  _QWORD v1438[6];
  _QWORD v1439[6];
  _QWORD v1440[6];
  _QWORD v1441[6];
  _QWORD v1442[6];
  _QWORD v1443[6];
  _QWORD v1444[6];
  _QWORD v1445[6];
  _QWORD v1446[6];
  _QWORD v1447[6];
  _QWORD v1448[6];
  _QWORD v1449[6];
  _QWORD v1450[6];
  _QWORD v1451[6];
  _QWORD v1452[6];
  _QWORD v1453[6];
  _QWORD v1454[6];
  _QWORD v1455[6];
  _QWORD v1456[6];
  _QWORD v1457[6];
  _QWORD v1458[6];
  _QWORD v1459[6];
  _QWORD v1460[6];
  _QWORD v1461[6];
  _QWORD v1462[6];
  _QWORD v1463[6];
  _QWORD v1464[6];
  _QWORD v1465[6];
  _QWORD v1466[6];
  _QWORD v1467[6];
  _QWORD v1468[6];
  _QWORD v1469[6];
  _QWORD v1470[6];
  _QWORD v1471[6];
  _QWORD v1472[6];
  _QWORD v1473[6];
  _QWORD v1474[6];
  _QWORD v1475[6];
  _QWORD v1476[6];
  _QWORD v1477[6];
  _QWORD v1478[6];
  _QWORD v1479[6];
  _QWORD v1480[6];
  _QWORD v1481[6];
  _QWORD v1482[6];
  _QWORD v1483[6];
  _QWORD v1484[6];
  _QWORD v1485[6];
  _QWORD v1486[6];
  _QWORD v1487[6];
  _QWORD v1488[6];
  _QWORD v1489[6];
  _QWORD v1490[6];
  _QWORD v1491[6];
  _QWORD v1492[6];
  _QWORD v1493[6];
  _QWORD v1494[6];
  _QWORD v1495[6];
  _QWORD v1496[6];
  _QWORD v1497[6];
  _QWORD v1498[6];
  _QWORD v1499[6];
  _QWORD v1500[6];
  _QWORD v1501[6];
  _QWORD v1502[6];
  _QWORD v1503[6];
  _QWORD v1504[6];
  _QWORD v1505[6];
  _QWORD v1506[6];
  _QWORD v1507[6];
  _QWORD v1508[6];
  _QWORD v1509[6];
  _QWORD v1510[6];
  _QWORD v1511[6];
  _QWORD v1512[6];
  _QWORD v1513[6];
  _QWORD v1514[6];
  _QWORD v1515[6];
  _QWORD v1516[6];
  _QWORD v1517[6];
  _QWORD v1518[6];
  _QWORD v1519[6];
  _QWORD v1520[6];
  _QWORD v1521[6];
  _QWORD v1522[6];
  _QWORD v1523[6];
  _QWORD v1524[6];
  _QWORD v1525[6];
  _QWORD v1526[6];
  _QWORD v1527[6];
  _QWORD v1528[6];
  _QWORD v1529[6];
  _QWORD v1530[6];
  _QWORD v1531[6];
  _QWORD v1532[6];
  _QWORD v1533[6];
  _QWORD v1534[6];
  _QWORD v1535[6];
  _QWORD v1536[6];
  _QWORD v1537[6];
  _QWORD v1538[6];
  _QWORD v1539[6];
  _QWORD v1540[6];
  _QWORD v1541[6];
  _QWORD v1542[6];
  _QWORD v1543[6];
  _QWORD v1544[6];
  _QWORD v1545[6];
  _QWORD v1546[6];
  _QWORD v1547[6];
  _QWORD v1548[6];
  _QWORD v1549[6];
  _QWORD v1550[6];
  _QWORD v1551[6];
  _QWORD v1552[6];
  _QWORD v1553[6];
  _QWORD v1554[6];
  _QWORD v1555[6];
  _QWORD v1556[6];
  _QWORD v1557[6];
  _QWORD v1558[6];
  _QWORD v1559[6];
  _QWORD v1560[6];
  _QWORD v1561[6];
  _QWORD v1562[6];
  _QWORD v1563[6];
  _QWORD v1564[6];
  _QWORD v1565[6];
  _QWORD v1566[6];
  _QWORD v1567[6];
  _QWORD v1568[6];
  _QWORD v1569[6];
  _QWORD v1570[6];
  _QWORD v1571[6];
  _QWORD v1572[6];
  _QWORD v1573[6];
  _QWORD v1574[6];
  _QWORD v1575[6];
  _QWORD v1576[6];
  _QWORD v1577[6];
  _QWORD v1578[6];
  _QWORD v1579[6];
  _QWORD v1580[6];
  _QWORD v1581[6];
  _QWORD v1582[6];
  _QWORD v1583[6];
  _QWORD v1584[6];
  _QWORD v1585[6];
  _QWORD v1586[6];
  _QWORD v1587[6];
  _QWORD v1588[6];
  _QWORD v1589[6];
  _QWORD v1590[6];
  _QWORD v1591[6];
  _QWORD v1592[6];
  _QWORD v1593[6];
  _QWORD v1594[6];
  _QWORD v1595[6];
  _QWORD v1596[6];
  _QWORD v1597[6];
  _QWORD v1598[6];
  _QWORD v1599[6];
  _QWORD v1600[6];
  _QWORD v1601[6];
  _QWORD v1602[6];
  _QWORD v1603[6];
  _QWORD v1604[6];
  _QWORD v1605[6];
  _QWORD v1606[6];
  _QWORD v1607[6];
  _QWORD v1608[6];
  _QWORD v1609[6];
  _QWORD v1610[6];
  _QWORD v1611[6];
  _QWORD v1612[6];
  _QWORD v1613[6];
  _QWORD v1614[6];
  _QWORD v1615[6];
  _QWORD v1616[6];
  _QWORD v1617[6];
  _QWORD v1618[6];
  _QWORD v1619[6];
  _QWORD v1620[6];
  _QWORD v1621[6];
  _QWORD v1622[6];
  _QWORD v1623[6];
  _QWORD v1624[6];
  _QWORD v1625[6];
  _QWORD v1626[6];
  _QWORD v1627[6];
  _QWORD v1628[6];
  _QWORD v1629[6];
  _QWORD v1630[6];
  _QWORD v1631[6];
  _QWORD v1632[6];
  _QWORD v1633[6];
  _QWORD v1634[6];
  _QWORD v1635[6];
  _QWORD v1636[6];
  _QWORD v1637[6];
  _QWORD v1638[6];
  _QWORD v1639[6];
  _QWORD v1640[6];
  _QWORD v1641[6];
  _QWORD v1642[6];
  _QWORD v1643[6];
  _QWORD v1644[6];
  _QWORD v1645[6];
  _QWORD v1646[6];
  _QWORD v1647[6];
  _QWORD v1648[6];
  _QWORD v1649[6];
  _QWORD v1650[6];
  _QWORD v1651[6];
  _QWORD v1652[6];
  _QWORD v1653[6];
  _QWORD v1654[6];
  _QWORD v1655[6];
  _QWORD v1656[6];
  _QWORD v1657[6];
  _QWORD v1658[6];
  _QWORD v1659[6];
  _QWORD v1660[6];
  _QWORD v1661[6];
  _QWORD v1662[6];
  _QWORD v1663[6];
  _QWORD v1664[6];
  _QWORD v1665[6];
  _QWORD v1666[6];
  _QWORD v1667[6];
  _QWORD v1668[6];
  _QWORD v1669[6];
  _QWORD v1670[6];
  _QWORD v1671[6];
  _QWORD v1672[6];
  _QWORD v1673[6];
  _QWORD v1674[6];
  _QWORD v1675[6];
  _QWORD v1676[6];
  _QWORD v1677[6];
  _QWORD v1678[6];
  _QWORD v1679[6];
  _QWORD v1680[6];
  _QWORD v1681[6];
  _QWORD v1682[6];
  _QWORD v1683[6];
  _QWORD v1684[6];
  _QWORD v1685[6];
  _QWORD v1686[6];
  _QWORD v1687[6];
  _QWORD v1688[6];
  _QWORD v1689[6];
  _QWORD v1690[6];
  _QWORD v1691[6];
  _QWORD v1692[6];
  _QWORD v1693[6];
  _QWORD v1694[6];
  _QWORD v1695[6];
  _QWORD v1696[6];
  _QWORD v1697[6];
  _QWORD v1698[6];
  _QWORD v1699[6];
  _QWORD v1700[6];
  _QWORD v1701[6];
  _QWORD v1702[6];
  _QWORD v1703[6];
  _QWORD v1704[6];
  _QWORD v1705[6];
  _QWORD v1706[6];
  _QWORD v1707[6];
  _QWORD v1708[6];
  _QWORD v1709[6];
  _QWORD v1710[6];
  _QWORD v1711[6];
  _QWORD v1712[6];
  _QWORD v1713[6];
  _QWORD v1714[6];
  _QWORD v1715[6];
  _QWORD v1716[6];
  _QWORD v1717[6];
  _QWORD v1718[6];
  _QWORD v1719[6];
  _QWORD v1720[6];
  _QWORD v1721[6];
  _QWORD v1722[6];
  _QWORD v1723[6];
  _QWORD v1724[6];
  _QWORD v1725[6];
  _QWORD v1726[6];
  _QWORD v1727[6];
  _QWORD v1728[6];
  _QWORD v1729[6];
  _QWORD v1730[6];
  _QWORD v1731[6];
  _QWORD v1732[6];
  _QWORD v1733[6];
  _QWORD v1734[6];
  _QWORD v1735[6];
  _QWORD v1736[6];
  _QWORD v1737[6];
  _QWORD v1738[6];
  _QWORD v1739[6];
  _QWORD v1740[6];
  _QWORD v1741[6];
  _QWORD v1742[6];
  _QWORD v1743[6];
  _QWORD v1744[6];
  _QWORD v1745[6];
  _QWORD v1746[6];
  _QWORD v1747[6];
  _QWORD v1748[6];
  _QWORD v1749[6];
  _QWORD v1750[6];
  _QWORD v1751[6];
  _QWORD v1752[6];
  _QWORD v1753[6];
  _QWORD v1754[6];
  _QWORD v1755[6];
  _QWORD v1756[6];
  _QWORD v1757[6];
  _QWORD v1758[6];
  _QWORD v1759[6];
  _QWORD v1760[6];
  _QWORD v1761[6];
  _QWORD v1762[6];
  _QWORD v1763[6];
  _QWORD v1764[6];
  _QWORD v1765[6];
  _QWORD v1766[6];
  _QWORD v1767[6];
  _QWORD v1768[6];
  _QWORD v1769[6];
  _QWORD v1770[6];
  _QWORD v1771[6];
  _QWORD v1772[6];
  _QWORD v1773[6];
  _QWORD v1774[6];
  _QWORD v1775[6];
  _QWORD v1776[6];
  _QWORD v1777[6];
  _QWORD v1778[6];
  _QWORD v1779[6];
  _QWORD v1780[6];
  _QWORD v1781[6];
  _QWORD v1782[6];
  _QWORD v1783[6];
  _QWORD v1784[6];
  _QWORD v1785[6];
  _QWORD v1786[6];
  _QWORD v1787[6];
  _QWORD v1788[6];
  _QWORD v1789[6];
  _QWORD v1790[6];
  _QWORD v1791[6];
  _QWORD v1792[6];
  _QWORD v1793[6];
  _QWORD v1794[6];
  _QWORD v1795[6];
  _QWORD v1796[6];
  _QWORD v1797[6];
  _QWORD v1798[6];
  _QWORD v1799[6];
  _QWORD v1800[6];
  _QWORD v1801[6];
  _QWORD v1802[6];
  _QWORD v1803[6];
  _QWORD v1804[6];
  _QWORD v1805[6];
  _QWORD v1806[6];
  _QWORD v1807[6];
  _QWORD v1808[6];
  _QWORD v1809[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v1809[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v5, "\u200Fينتاك", "ي***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v6, "\u200Fوللكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v7, "\u200Fوللكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v8, "\u200Fوللكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v9, "\u200Fوللشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v10, "\u200Fوللشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v11, "\u200Fوللزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v12, "\u200Fوللزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v13, "\u200Fوللزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v14, "\u200Fوللخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v15, "\u200Fوللخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v16, "\u200Fولكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v17, "\u200Fولكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v18, "\u200Fولكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v19, "\u200Fولكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v20, "\u200Fولكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v21, "\u200Fولكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v22, "\u200Fولكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v23, "\u200Fولكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v24, "\u200Fولكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v25, "\u200Fولكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v26, "\u200Fولكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v27, "\u200Fولكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v28, "\u200Fولكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v29, "\u200Fولكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v30, "\u200Fولكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v31, "\u200Fولكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v32, "\u200Fولكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v33, "\u200Fولكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v34, "\u200Fولكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v35, "\u200Fولكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v36, "\u200Fولكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v37, "\u200Fولكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v38, "\u200Fولكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v39, "\u200Fولكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v40, "\u200Fولكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v41, "\u200Fولكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v42, "\u200Fولكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v43, "\u200Fولكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v44, "\u200Fولكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v45, "\u200Fولكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v46, "\u200Fولشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v47, "\u200Fولشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v48, "\u200Fولشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v49, "\u200Fولشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v50, "\u200Fولشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v51, "\u200Fولشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v52, "\u200Fولشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v53, "\u200Fولشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v54, "\u200Fولشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v55, "\u200Fولشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v56, "\u200Fولشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v57, "\u200Fولشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v58, "\u200Fولشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v59, "\u200Fولشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v60, "\u200Fولشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v61, "\u200Fولشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v62, "\u200Fولشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v63, "\u200Fولشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v64, "\u200Fولشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v65, "\u200Fولشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v66, "\u200Fولزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v67, "\u200Fولزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v68, "\u200Fولزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v69, "\u200Fولزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v70, "\u200Fولزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v71, "\u200Fولزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v72, "\u200Fولزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v73, "\u200Fولزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v74, "\u200Fولزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v75, "\u200Fولزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v76, "\u200Fولزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v77, "\u200Fولزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v78, "\u200Fولزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v79, "\u200Fولزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v80, "\u200Fولزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v81, "\u200Fولزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v82, "\u200Fولزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v83, "\u200Fولزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v84, "\u200Fولزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v85, "\u200Fولزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v86, "\u200Fولزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v87, "\u200Fولزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v88, "\u200Fولزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v89, "\u200Fولزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v90, "\u200Fولزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v91, "\u200Fولزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v92, "\u200Fولزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v93, "\u200Fولزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v94, "\u200Fولزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v95, "\u200Fولزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v96, "\u200Fولخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v97, "\u200Fولخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v98, "\u200Fولخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v99, "\u200Fولخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v100, "\u200Fولخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v101, "\u200Fولخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v102, "\u200Fولخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v103, "\u200Fولخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v104, "\u200Fولخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v105, "\u200Fولخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v106, "\u200Fولخرتي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v107, "\u200Fولخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v108, "\u200Fولخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v109, "\u200Fولخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v110, "\u200Fولخرته", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v111, "\u200Fولخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v112, "\u200Fولخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v113, "\u200Fولخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v114, "\u200Fولخرتك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v115, "\u200Fولخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v116, "\u200Fوككسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v117, "\u200Fوككسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v118, "\u200Fوككسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v119, "\u200Fوككسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v120, "\u200Fوككسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v121, "\u200Fوككسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v122, "\u200Fوككسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v123, "\u200Fوككسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v124, "\u200Fوككسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v125, "\u200Fوككسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v126, "\u200Fوككسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v127, "\u200Fوككسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v128, "\u200Fوككسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v129, "\u200Fوككسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v130, "\u200Fوككسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v131, "\u200Fوككسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v132, "\u200Fوككسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v133, "\u200Fوككسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v134, "\u200Fوككسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v135, "\u200Fوككساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v136, "\u200Fوككساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v137, "\u200Fوككساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v138, "\u200Fوككساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v139, "\u200Fوككساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v140, "\u200Fوككساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v141, "\u200Fوككساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v142, "\u200Fوككساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v143, "\u200Fوككساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v144, "\u200Fوككساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v145, "\u200Fوككس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v146, "\u200Fوكشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v147, "\u200Fوكشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v148, "\u200Fوكشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v149, "\u200Fوكشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v150, "\u200Fوكشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v151, "\u200Fوكشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v152, "\u200Fوكشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v153, "\u200Fوكشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v154, "\u200Fوكشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v155, "\u200Fوكشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v156, "\u200Fوكشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v157, "\u200Fوكشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v158, "\u200Fوكشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v159, "\u200Fوكشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v160, "\u200Fوكشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v161, "\u200Fوكشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v162, "\u200Fوكشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v163, "\u200Fوكشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v164, "\u200Fوكشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v165, "\u200Fوكشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v166, "\u200Fوكسي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v167, "\u200Fوكسهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v168, "\u200Fوكسهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v169, "\u200Fوكسها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v170, "\u200Fوكسه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v171, "\u200Fوكسنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v172, "\u200Fوكسكوسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v173, "\u200Fوكسكوسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v174, "\u200Fوكسكوسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v175, "\u200Fوكسكوسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v176, "\u200Fوكسكوسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v177, "\u200Fوكسكوسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v178, "\u200Fوكسكوسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v179, "\u200Fوكسكوسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v180, "\u200Fوكسكوسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v181, "\u200Fوكسكوس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v182, "\u200Fوكسكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v183, "\u200Fوكسكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v184, "\u200Fوكسك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v185, "\u200Fوكساسي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v186, "\u200Fوكساسهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v187, "\u200Fوكساسهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v188, "\u200Fوكساسها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v189, "\u200Fوكساسه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v190, "\u200Fوكساسنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v191, "\u200Fوكساسكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v192, "\u200Fوكساسكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v193, "\u200Fوكساسك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v194, "\u200Fوكساس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v195, "\u200Fوكس", "و*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v196, "\u200Fوكزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v197, "\u200Fوكزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v198, "\u200Fوكزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v199, "\u200Fوكزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v200, "\u200Fوكزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v201, "\u200Fوكزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v202, "\u200Fوكزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v203, "\u200Fوكزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v204, "\u200Fوكزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v205, "\u200Fوكزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v206, "\u200Fوكزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v207, "\u200Fوكزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v208, "\u200Fوكزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v209, "\u200Fوكزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v210, "\u200Fوكزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v211, "\u200Fوكزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v212, "\u200Fوكزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v213, "\u200Fوكزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v214, "\u200Fوكزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v215, "\u200Fوكزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v216, "\u200Fوكزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v217, "\u200Fوكزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v218, "\u200Fوكزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v219, "\u200Fوكزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v220, "\u200Fوكزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v221, "\u200Fوكزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v222, "\u200Fوكزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v223, "\u200Fوكزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v224, "\u200Fوكزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v225, "\u200Fوكزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v226, "\u200Fوكخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v227, "\u200Fوكخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v228, "\u200Fوكخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v229, "\u200Fوكخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v230, "\u200Fوكخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v231, "\u200Fوكخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v232, "\u200Fوكخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v233, "\u200Fوكخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v234, "\u200Fوكخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v235, "\u200Fوكخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v236, "\u200Fوكخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v237, "\u200Fوكخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v238, "\u200Fوكخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v239, "\u200Fوكخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v240, "\u200Fوكخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v241, "\u200Fوكخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v242, "\u200Fوكخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v243, "\u200Fوكالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v244, "\u200Fوكالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v245, "\u200Fوكالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v246, "\u200Fوكالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v247, "\u200Fوكالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v248, "\u200Fوكالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v249, "\u200Fوكالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v250, "\u200Fوكالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v251, "\u200Fوكالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v252, "\u200Fوكالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v253, "\u200Fوشرموطتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v254, "\u200Fوشرموطتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v255, "\u200Fوشرموطتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v256, "\u200Fوشرموطتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v257, "\u200Fوشرموطته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v258, "\u200Fوشرموطتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v259, "\u200Fوشرموطتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v260, "\u200Fوشرموطتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v261, "\u200Fوشرموطتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v262, "\u200Fوشرموطة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v263, "\u200Fوشرموطاتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v264, "\u200Fوشرموطاتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v265, "\u200Fوشرموطاتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v266, "\u200Fوشرموطاتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v267, "\u200Fوشرموطاته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v268, "\u200Fوشرموطاتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v269, "\u200Fوشرموطاتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v270, "\u200Fوشرموطاتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v271, "\u200Fوشرموطاتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v272, "\u200Fوشرموطات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v273, "\u200Fوزوبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v274, "\u200Fوزوبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v275, "\u200Fوزوبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v276, "\u200Fوزوبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v277, "\u200Fوزوبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v278, "\u200Fوزوبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v279, "\u200Fوزوبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v280, "\u200Fوزوبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v281, "\u200Fوزوبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v282, "\u200Fوزوب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v283, "\u200Fوزبي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v284, "\u200Fوزبهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v285, "\u200Fوزبهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v286, "\u200Fوزبها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v287, "\u200Fوزبه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v288, "\u200Fوزبنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v289, "\u200Fوزبكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v290, "\u200Fوزبكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v291, "\u200Fوزبك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v292, "\u200Fوزبابي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v293, "\u200Fوزبابهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v294, "\u200Fوزبابهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v295, "\u200Fوزبابها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v296, "\u200Fوزبابه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v297, "\u200Fوزبابنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v298, "\u200Fوزبابكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v299, "\u200Fوزبابكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v300, "\u200Fوزبابك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v301, "\u200Fوزباب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v302, "\u200Fوزب", "و*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v303, "\u200Fوخرواتي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v304, "\u200Fوخرواتهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v305, "\u200Fوخرواتهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v306, "\u200Fوخرواتها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v307, "\u200Fوخرواته", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v308, "\u200Fوخرواتنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v309, "\u200Fوخرواتكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v310, "\u200Fوخرواتكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v311, "\u200Fوخرواتك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v312, "\u200Fوخروات", "و****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v313, "\u200Fوخرتي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v314, "\u200Fوخرته", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v315, "\u200Fوخرتك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v316, "\u200Fوخرة", "و**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v317, "\u200Fوبكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v318, "\u200Fوبكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v319, "\u200Fوبكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v320, "\u200Fوبكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v321, "\u200Fوبكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v322, "\u200Fوبكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v323, "\u200Fوبكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v324, "\u200Fوبكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v325, "\u200Fوبكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v326, "\u200Fوبكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v327, "\u200Fوبكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v328, "\u200Fوبكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v329, "\u200Fوبكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v330, "\u200Fوبكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v331, "\u200Fوبكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v332, "\u200Fوبكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v333, "\u200Fوبكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v334, "\u200Fوبكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v335, "\u200Fوبكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v336, "\u200Fوبكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v337, "\u200Fوبكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v338, "\u200Fوبكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v339, "\u200Fوبكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v340, "\u200Fوبكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v341, "\u200Fوبكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v342, "\u200Fوبكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v343, "\u200Fوبكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v344, "\u200Fوبكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v345, "\u200Fوبكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v346, "\u200Fوبكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v347, "\u200Fوبشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v348, "\u200Fوبشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v349, "\u200Fوبشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v350, "\u200Fوبشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v351, "\u200Fوبشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v352, "\u200Fوبشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v353, "\u200Fوبشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v354, "\u200Fوبشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v355, "\u200Fوبشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v356, "\u200Fوبشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v357, "\u200Fوبشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v358, "\u200Fوبشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v359, "\u200Fوبشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v360, "\u200Fوبشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v361, "\u200Fوبشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v362, "\u200Fوبشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v363, "\u200Fوبشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v364, "\u200Fوبشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v365, "\u200Fوبشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v366, "\u200Fوبشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v367, "\u200Fوبزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v368, "\u200Fوبزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v369, "\u200Fوبزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v370, "\u200Fوبزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v371, "\u200Fوبزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v372, "\u200Fوبزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v373, "\u200Fوبزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v374, "\u200Fوبزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v375, "\u200Fوبزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v376, "\u200Fوبزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v377, "\u200Fوبزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v378, "\u200Fوبزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v379, "\u200Fوبزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v380, "\u200Fوبزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v381, "\u200Fوبزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v382, "\u200Fوبزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v383, "\u200Fوبزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v384, "\u200Fوبزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v385, "\u200Fوبزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v386, "\u200Fوبزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v387, "\u200Fوبزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v388, "\u200Fوبزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v389, "\u200Fوبزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v390, "\u200Fوبزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v391, "\u200Fوبزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v392, "\u200Fوبزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v393, "\u200Fوبزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v394, "\u200Fوبزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v395, "\u200Fوبزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v396, "\u200Fوبزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v397, "\u200Fوبخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v398, "\u200Fوبخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v399, "\u200Fوبخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v400, "\u200Fوبخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v401, "\u200Fوبخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v402, "\u200Fوبخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v403, "\u200Fوبخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v404, "\u200Fوبخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v405, "\u200Fوبخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v406, "\u200Fوبخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v407, "\u200Fوبخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v408, "\u200Fوبخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v409, "\u200Fوبالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v410, "\u200Fوبالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v411, "\u200Fوبالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v412, "\u200Fوبالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v413, "\u200Fوبالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v414, "\u200Fوبالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v415, "\u200Fوبالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v416, "\u200Fوبالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v417, "\u200Fوبالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v418, "\u200Fوبالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v419, "\u200Fوالكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v420, "\u200Fوالكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v421, "\u200Fوالكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v422, "\u200Fوالشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v423, "\u200Fوالشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v424, "\u200Fوالزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v425, "\u200Fوالزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v426, "\u200Fوالزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v427, "\u200Fوالخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v428, "\u200Fوالخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v429, "\u200Fنيكيني", "ن****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v430, "\u200Fنيكني", "ن***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v431, "\u200Fنيك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v432, "\u200Fنياكة", "ن***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v433, "\u200Fللكسكوس", "ل*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v434, "\u200Fللكساس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v435, "\u200Fللكس", "ل**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v436, "\u200Fللشرموطة", "ل******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v437, "\u200Fللشرموطات", "ل*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v438, "\u200Fللزوب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v439, "\u200Fللزباب", "ل****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v440, "\u200Fللزب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v441, "\u200Fللخروات", "ل*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v442, "\u200Fللخرة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v443, "\u200Fلكسي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v444, "\u200Fلكسهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v445, "\u200Fلكسهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v446, "\u200Fلكسها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v447, "\u200Fلكسه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v448, "\u200Fلكسنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v449, "\u200Fلكسكوسي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v450, "\u200Fلكسكوسهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v451, "\u200Fلكسكوسهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v452, "\u200Fلكسكوسها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v453, "\u200Fلكسكوسه", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v454, "\u200Fلكسكوسنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v455, "\u200Fلكسكوسكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v456, "\u200Fلكسكوسكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v457, "\u200Fلكسكوسك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v458, "\u200Fلكسكوس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v459, "\u200Fلكسكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v460, "\u200Fلكسكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v461, "\u200Fلكسك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v462, "\u200Fلكساسي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v463, "\u200Fلكساسهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v464, "\u200Fلكساسهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v465, "\u200Fلكساسها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v466, "\u200Fلكساسه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v467, "\u200Fلكساسنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v468, "\u200Fلكساسكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v469, "\u200Fلكساسكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v470, "\u200Fلكساسك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v471, "\u200Fلكساس", "ل***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v472, "\u200Fلكس", "ل*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v473, "\u200Fلشرموطتي", "ل******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v474, "\u200Fلشرموطتهن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v475, "\u200Fلشرموطتهم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v476, "\u200Fلشرموطتها", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v477, "\u200Fلشرموطته", "ل******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v478, "\u200Fلشرموطتنا", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v479, "\u200Fلشرموطتكن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v480, "\u200Fلشرموطتكم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v481, "\u200Fلشرموطتك", "ل******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v482, "\u200Fلشرموطة", "ل*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v483, "\u200Fلشرموطاتي", "ل*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v484, "\u200Fلشرموطاتهن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v485, "\u200Fلشرموطاتهم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v486, "\u200Fلشرموطاتها", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v487, "\u200Fلشرموطاته", "ل*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v488, "\u200Fلشرموطاتنا", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v489, "\u200Fلشرموطاتكن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v490, "\u200Fلشرموطاتكم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v491, "\u200Fلشرموطاتك", "ل*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v492, "\u200Fلشرموطات", "ل******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v493, "\u200Fلزوبي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v494, "\u200Fلزوبهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v495, "\u200Fلزوبهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v496, "\u200Fلزوبها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v497, "\u200Fلزوبه", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v498, "\u200Fلزوبنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v499, "\u200Fلزوبكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v500, "\u200Fلزوبكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v501, "\u200Fلزوبك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v502, "\u200Fلزوب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v503, "\u200Fلزبي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v504, "\u200Fلزبهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v505, "\u200Fلزبهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v506, "\u200Fلزبها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v507, "\u200Fلزبه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v508, "\u200Fلزبنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v509, "\u200Fلزبكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v510, "\u200Fلزبكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v511, "\u200Fلزبك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v512, "\u200Fلزبابي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v513, "\u200Fلزبابهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v514, "\u200Fلزبابهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v515, "\u200Fلزبابها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v516, "\u200Fلزبابه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v517, "\u200Fلزبابنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v518, "\u200Fلزبابكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v519, "\u200Fلزبابكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v520, "\u200Fلزبابك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v521, "\u200Fلزباب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v522, "\u200Fلزب", "ل*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v523, "\u200Fلخرواتي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v524, "\u200Fلخرواتهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v525, "\u200Fلخرواتهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v526, "\u200Fلخرواتها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v527, "\u200Fلخرواته", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v528, "\u200Fلخرواتنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v529, "\u200Fلخرواتكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v530, "\u200Fلخرواتكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v531, "\u200Fلخرواتك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v532, "\u200Fلخروات", "ل****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v533, "\u200Fلخرتي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v534, "\u200Fلخرتهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v535, "\u200Fلخرتهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v536, "\u200Fلخرتها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v537, "\u200Fلخرته", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v538, "\u200Fلخرتنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v539, "\u200Fلخرتكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v540, "\u200Fلخرتكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v541, "\u200Fلخرتك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v542, "\u200Fلخرة", "ل**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v543, "\u200Fككسي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v544, "\u200Fككسهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v545, "\u200Fككسهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v546, "\u200Fككسها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v547, "\u200Fككسه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v548, "\u200Fككسنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v549, "\u200Fككسكوسي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v550, "\u200Fككسكوسهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v551, "\u200Fككسكوسهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v552, "\u200Fككسكوسها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v553, "\u200Fككسكوسه", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v554, "\u200Fككسكوسنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v555, "\u200Fككسكوسكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v556, "\u200Fككسكوسكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v557, "\u200Fككسكوسك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v558, "\u200Fككسكوس", "ك****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v559, "\u200Fككسكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v560, "\u200Fككسكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v561, "\u200Fككسك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v562, "\u200Fككساسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v563, "\u200Fككساسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v564, "\u200Fككساسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v565, "\u200Fككساسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v566, "\u200Fككساسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v567, "\u200Fككساسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v568, "\u200Fككساسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v569, "\u200Fككساسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v570, "\u200Fككساسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v571, "\u200Fككساس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v572, "\u200Fككس", "ك*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v573, "\u200Fكشرموطتي", "ك******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v574, "\u200Fكشرموطتهن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v575, "\u200Fكشرموطتهم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v576, "\u200Fكشرموطتها", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v577, "\u200Fكشرموطته", "ك******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v578, "\u200Fكشرموطتنا", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v579, "\u200Fكشرموطتكن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v580, "\u200Fكشرموطتكم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v581, "\u200Fكشرموطتك", "ك******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v582, "\u200Fكشرموطة", "ك*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v583, "\u200Fكشرموطاتي", "ك*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v584, "\u200Fكشرموطاتهن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v585, "\u200Fكشرموطاتهم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v586, "\u200Fكشرموطاتها", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v587, "\u200Fكشرموطاته", "ك*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v588, "\u200Fكشرموطاتنا", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v589, "\u200Fكشرموطاتكن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v590, "\u200Fكشرموطاتكم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v591, "\u200Fكشرموطاتك", "ك*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v592, "\u200Fكشرموطات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v593, "\u200Fكسي", "ك*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v594, "\u200Fكسهن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v595, "\u200Fكسهم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v596, "\u200Fكسها", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v597, "\u200Fكسه", "ك*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v598, "\u200Fكسنا", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v599, "\u200Fكسكوسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v600, "\u200Fكسكوسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v601, "\u200Fكسكوسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v602, "\u200Fكسكوسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v603, "\u200Fكسكوسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v604, "\u200Fكسكوسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v605, "\u200Fكسكوسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v606, "\u200Fكسكوسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v607, "\u200Fكسكوسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v608, "\u200Fكسكوس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v609, "\u200Fكسكن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v610, "\u200Fكسكم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v611, "\u200Fكسك", "ك*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v612, "\u200Fكساسي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v613, "\u200Fكساسهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v614, "\u200Fكساسهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v615, "\u200Fكساسها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v616, "\u200Fكساسه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v617, "\u200Fكساسنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v618, "\u200Fكساسكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v619, "\u200Fكساسكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v620, "\u200Fكساسك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v621, "\u200Fكساس", "ك**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v622, "\u200Fكس", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v623, "\u200Fكزوبي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v624, "\u200Fكزوبهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v625, "\u200Fكزوبهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v626, "\u200Fكزوبها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v627, "\u200Fكزوبه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v628, "\u200Fكزوبنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v629, "\u200Fكزوبكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v630, "\u200Fكزوبكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v631, "\u200Fكزوبك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v632, "\u200Fكزوب", "ك**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v633, "\u200Fكزبي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v634, "\u200Fكزبهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v635, "\u200Fكزبهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v636, "\u200Fكزبها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v637, "\u200Fكزبه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v638, "\u200Fكزبنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v639, "\u200Fكزبكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v640, "\u200Fكزبكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v641, "\u200Fكزبك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v642, "\u200Fكزبابي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v643, "\u200Fكزبابهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v644, "\u200Fكزبابهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v645, "\u200Fكزبابها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v646, "\u200Fكزبابه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v647, "\u200Fكزبابنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v648, "\u200Fكزبابكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v649, "\u200Fكزبابكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v650, "\u200Fكزبابك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v651, "\u200Fكزباب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v652, "\u200Fكزب", "ك*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v653, "\u200Fكخرواتي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v654, "\u200Fكخرواتهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v655, "\u200Fكخرواتهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v656, "\u200Fكخرواتها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v657, "\u200Fكخرواته", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v658, "\u200Fكخرواتنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v659, "\u200Fكخرواتكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v660, "\u200Fكخرواتكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v661, "\u200Fكخرواتك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v662, "\u200Fكخروات", "ك****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v663, "\u200Fكخرتي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v664, "\u200Fكخرتهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v665, "\u200Fكخرتهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v666, "\u200Fكخرتها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v667, "\u200Fكخرته", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v668, "\u200Fكخرتنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v669, "\u200Fكخرتكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v670, "\u200Fكخرتكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v671, "\u200Fكخرتك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v672, "\u200Fكخرة", "ك**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v673, "\u200Fكالكسكوس", "ك******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v674, "\u200Fكالكساس", "ك*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v675, "\u200Fكالكس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v676, "\u200Fكالشرموطة", "ك*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v677, "\u200Fكالشرموطات", "ك********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v678, "\u200Fكالزوب", "ك****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v679, "\u200Fكالزباب", "ك*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v680, "\u200Fكالزب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v681, "\u200Fكالخروات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v682, "\u200Fكالخرة", "ك****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v683, "\u200Fقحبه", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v684, "\u200Fقحبة", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v685, "\u200Fقحبات", "ق***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v686, "\u200Fعرصه", "ع**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v687, "\u200Fعرصة", "ع**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v688, "\u200Fعرصات", "ع***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v689, "\u200Fعرص", "ع*ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v690, "\u200Fشلكه", "ش**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v691, "\u200Fشلكة", "ش**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v692, "\u200Fشلكات", "ش***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v693, "\u200Fشرموطه", "ش****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v694, "\u200Fشرموطتي", "ش*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v695, "\u200Fشرموطتهن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v696, "\u200Fشرموطتهم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v697, "\u200Fشرموطتها", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v698, "\u200Fشرموطته", "ش*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v699, "\u200Fشرموطتنا", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v700, "\u200Fشرموطتكن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v701, "\u200Fشرموطتكم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v702, "\u200Fشرموطتك", "ش*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v703, "\u200Fشرموطة", "ش****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v704, "\u200Fشرموطاتي", "ش******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v705, "\u200Fشرموطاتهن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v706, "\u200Fشرموطاتهم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v707, "\u200Fشرموطاتها", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v708, "\u200Fشرموطاته", "ش******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v709, "\u200Fشرموطاتنا", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v710, "\u200Fشرموطاتكن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v711, "\u200Fشرموطاتكم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v712, "\u200Fشرموطاتك", "ش******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v713, "\u200Fشرموطات", "ش*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v714, "\u200Fشرموط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v715, "\u200Fشرجي", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v716, "\u200Fشراميط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v717, "\u200Fشخيتي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v718, "\u200Fشخيت", "ش**ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v719, "\u200Fشخي", "ش*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v720, "\u200Fشخاخي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v721, "\u200Fشخاختي", "ش****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v722, "\u200Fشخاخ", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v723, "\u200Fشخ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v724, "\u200Fزوبي", "ز**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v725, "\u200Fزوبهن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v726, "\u200Fزوبهم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v727, "\u200Fزوبها", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v728, "\u200Fزوبه", "ز**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v729, "\u200Fزوبنا", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v730, "\u200Fزوبكن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v731, "\u200Fزوبكم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v732, "\u200Fزوبك", "ز**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v733, "\u200Fزوب", "ز*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v734, "\u200Fزبي", "ز*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v735, "\u200Fزبهن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v736, "\u200Fزبهم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v737, "\u200Fزبها", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v738, "\u200Fزبه", "ز*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v739, "\u200Fزبنا", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v740, "\u200Fزبكن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v741, "\u200Fزبكم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v742, "\u200Fزبك", "ز*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v743, "\u200Fزبابي", "ز***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v744, "\u200Fزبابهن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v745, "\u200Fزبابهم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v746, "\u200Fزبابها", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v747, "\u200Fزبابه", "ز***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v748, "\u200Fزبابنا", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v749, "\u200Fزبابكن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v750, "\u200Fزبابكم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v751, "\u200Fزبابك", "ز***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v752, "\u200Fزباب", "ز**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v753, "\u200Fزب", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v754, "\u200Fخرواتي", "خ****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v755, "\u200Fخرواتهن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v756, "\u200Fخرواتهم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v757, "\u200Fخرواتها", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v758, "\u200Fخرواته", "خ****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v759, "\u200Fخرواتنا", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v760, "\u200Fخرواتكن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v761, "\u200Fخرواتكم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v762, "\u200Fخرواتك", "خ****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v763, "\u200Fخروات", "خ***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v764, "\u200Fخرتهن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v765, "\u200Fخرتهم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v766, "\u200Fخرتها", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v767, "\u200Fخرتنا", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v768, "\u200Fخرتكن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v769, "\u200Fخرتكم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v770, "\u200Fخرة", "خ*ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v771, "\u200Fتنييك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v772, "\u200Fتنتاك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v773, "\u200Fبورنو", "ب***و");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v774, "\u200Fبكسي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v775, "\u200Fبكسهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v776, "\u200Fبكسهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v777, "\u200Fبكسها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v778, "\u200Fبكسه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v779, "\u200Fبكسنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v780, "\u200Fبكسكوسي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v781, "\u200Fبكسكوسهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v782, "\u200Fبكسكوسهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v783, "\u200Fبكسكوسها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v784, "\u200Fبكسكوسه", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v785, "\u200Fبكسكوسنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v786, "\u200Fبكسكوسكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v787, "\u200Fبكسكوسكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v788, "\u200Fبكسكوسك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v789, "\u200Fبكسكوس", "ب****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v790, "\u200Fبكسكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v791, "\u200Fبكسكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v792, "\u200Fبكسك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v793, "\u200Fبكساسي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v794, "\u200Fبكساسهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v795, "\u200Fبكساسهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v796, "\u200Fبكساسها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v797, "\u200Fبكساسه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v798, "\u200Fبكساسنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v799, "\u200Fبكساسكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v800, "\u200Fبكساسكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v801, "\u200Fبكساسك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v802, "\u200Fبكساس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v803, "\u200Fبكس", "ب*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v804, "\u200Fبشرموطتي", "ب******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v805, "\u200Fبشرموطتهن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v806, "\u200Fبشرموطتهم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v807, "\u200Fبشرموطتها", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v808, "\u200Fبشرموطته", "ب******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v809, "\u200Fبشرموطتنا", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v810, "\u200Fبشرموطتكن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v811, "\u200Fبشرموطتكم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v812, "\u200Fبشرموطتك", "ب******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v813, "\u200Fبشرموطة", "ب*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v814, "\u200Fبشرموطاتي", "ب*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v815, "\u200Fبشرموطاتهن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v816, "\u200Fبشرموطاتهم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v817, "\u200Fبشرموطاتها", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v818, "\u200Fبشرموطاته", "ب*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v819, "\u200Fبشرموطاتنا", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v820, "\u200Fبشرموطاتكن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v821, "\u200Fبشرموطاتكم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v822, "\u200Fبشرموطاتك", "ب*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v823, "\u200Fبشرموطات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v824, "\u200Fبزوبي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v825, "\u200Fبزوبهن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v826, "\u200Fبزوبهم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v827, "\u200Fبزوبها", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v828, "\u200Fبزوبه", "ب***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v829, "\u200Fبزوبنا", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v830, "\u200Fبزوبكن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v831, "\u200Fبزوبكم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v832, "\u200Fبزوبك", "ب***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v833, "\u200Fبزوب", "ب**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v834, "\u200Fبزبي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v835, "\u200Fبزبهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v836, "\u200Fبزبهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v837, "\u200Fبزبها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v838, "\u200Fبزبه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v839, "\u200Fبزبنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v840, "\u200Fبزبكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v841, "\u200Fبزبكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v842, "\u200Fبزبك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v843, "\u200Fبزبابي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v844, "\u200Fبزبابهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v845, "\u200Fبزبابهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v846, "\u200Fبزبابها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v847, "\u200Fبزبابه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v848, "\u200Fبزبابنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v849, "\u200Fبزبابكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v850, "\u200Fبزبابكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v851, "\u200Fبزبابك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v852, "\u200Fبزباب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v853, "\u200Fبزب", "ب*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v854, "\u200Fبزاز", "ب**ز");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v855, "\u200Fبز", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v856, "\u200Fبخرواتي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v857, "\u200Fبخرواتهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v858, "\u200Fبخرواتهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v859, "\u200Fبخرواتها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v860, "\u200Fبخرواته", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v861, "\u200Fبخرواتنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v862, "\u200Fبخرواتكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v863, "\u200Fبخرواتكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v864, "\u200Fبخرواتك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v865, "\u200Fبخروات", "ب****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v866, "\u200Fبخرتي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v867, "\u200Fبخرة", "ب**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v868, "\u200Fبالكسكوس", "ب******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v869, "\u200Fبالكساس", "ب*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v870, "\u200Fبالكس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v871, "\u200Fبالشرموطة", "ب*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v872, "\u200Fبالشرموطات", "ب********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v873, "\u200Fبالزوب", "ب****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v874, "\u200Fبالزباب", "ب*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v875, "\u200Fبالزب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v876, "\u200Fبالخروات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v877, "\u200Fبالخرة", "ب****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v878, "\u200Fايري", "ا**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v879, "\u200Fايرك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v880, "\u200Fاير", "ا*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v881, "\u200Fانيكك", "ا***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v882, "\u200Fانيك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v883, "\u200Fالكسكوس", "ا*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v884, "\u200Fالكساس", "ا****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v885, "\u200Fالكس", "ا**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v886, "\u200Fالشرموطة", "ا******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v887, "\u200Fالشرموطات", "ا*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v888, "\u200Fالزوب", "ا***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v889, "\u200Fالزباب", "ا****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v890, "\u200Fالزب", "ا**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v891, "\u200Fالخروات", "ا*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v892, "\u200Fالخرة", "ا***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v893, "\u200Fإيري", "إ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v894, "\u200Fإيرك", "إ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v895, "\u200Fإير", "إ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v896, "\u200Fأيري", "أ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v897, "\u200Fأيرك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v898, "\u200Fأير", "أ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v899, "\u200Fأنيكك", "أ***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v900, "\u200Fأنيك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v901, "ينتاك", "ي***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v902, "وللكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v903, "وللكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v904, "وللكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v905, "وللشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v906, "وللشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v907, "وللزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v908, "وللزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v909, "وللزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v910, "وللخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v911, "وللخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v912, "ولكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v913, "ولكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v914, "ولكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v915, "ولكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v916, "ولكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v917, "ولكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v918, "ولكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v919, "ولكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v920, "ولكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v921, "ولكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v922, "ولكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v923, "ولكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v924, "ولكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v925, "ولكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v926, "ولكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v927, "ولكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v928, "ولكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v929, "ولكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v930, "ولكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v931, "ولكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v932, "ولكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v933, "ولكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v934, "ولكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v935, "ولكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v936, "ولكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v937, "ولكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v938, "ولكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v939, "ولكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v940, "ولكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v941, "ولكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v942, "ولشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v943, "ولشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v944, "ولشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v945, "ولشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v946, "ولشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v947, "ولشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v948, "ولشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v949, "ولشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v950, "ولشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v951, "ولشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v952, "ولشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v953, "ولشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v954, "ولشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v955, "ولشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v956, "ولشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v957, "ولشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v958, "ولشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v959, "ولشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v960, "ولشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v961, "ولشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v962, "ولزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v963, "ولزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v964, "ولزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v965, "ولزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v966, "ولزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v967, "ولزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v968, "ولزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v969, "ولزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v970, "ولزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v971, "ولزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v972, "ولزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v973, "ولزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v974, "ولزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v975, "ولزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v976, "ولزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v977, "ولزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v978, "ولزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v979, "ولزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v980, "ولزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v981, "ولزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v982, "ولزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v983, "ولزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v984, "ولزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v985, "ولزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v986, "ولزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v987, "ولزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v988, "ولزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v989, "ولزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v990, "ولزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v991, "ولزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v992, "ولخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v993, "ولخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v994, "ولخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v995, "ولخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v996, "ولخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v997, "ولخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v998, "ولخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v999, "ولخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1000, "ولخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1001, "ولخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1002, "ولخرتي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1003, "ولخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1004, "ولخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1005, "ولخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1006, "ولخرته", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1007, "ولخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1008, "ولخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1009, "ولخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1010, "ولخرتك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1011, "ولخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1012, "وككسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1013, "وككسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1014, "وككسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1015, "وككسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1016, "وككسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1017, "وككسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1018, "وككسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1019, "وككسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1020, "وككسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1021, "وككسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1022, "وككسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1023, "وككسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1024, "وككسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1025, "وككسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1026, "وككسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1027, "وككسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1028, "وككسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1029, "وككسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1030, "وككسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1031, "وككساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1032, "وككساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1033, "وككساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1034, "وككساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1035, "وككساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1036, "وككساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1037, "وككساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1038, "وككساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1039, "وككساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1040, "وككساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1041, "وككس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1042, "وكشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1043, "وكشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1044, "وكشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1045, "وكشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1046, "وكشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1047, "وكشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1048, "وكشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1049, "وكشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1050, "وكشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1051, "وكشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1052, "وكشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1053, "وكشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1054, "وكشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1055, "وكشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1056, "وكشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1057, "وكشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1058, "وكشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1059, "وكشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1060, "وكشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1061, "وكشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1062, "وكسي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1063, "وكسهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1064, "وكسهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1065, "وكسها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1066, "وكسه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1067, "وكسنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1068, "وكسكوسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1069, "وكسكوسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1070, "وكسكوسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1071, "وكسكوسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1072, "وكسكوسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1073, "وكسكوسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1074, "وكسكوسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1075, "وكسكوسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1076, "وكسكوسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1077, "وكسكوس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1078, "وكسكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1079, "وكسكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1080, "وكسك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1081, "وكساسي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1082, "وكساسهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1083, "وكساسهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1084, "وكساسها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1085, "وكساسه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1086, "وكساسنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1087, "وكساسكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1088, "وكساسكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1089, "وكساسك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1090, "وكساس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1091, "وكس", "و*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1092, "وكزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1093, "وكزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1094, "وكزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1095, "وكزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1096, "وكزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1097, "وكزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1098, "وكزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1099, "وكزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1100, "وكزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1101, "وكزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1102, "وكزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1103, "وكزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1104, "وكزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1105, "وكزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1106, "وكزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1107, "وكزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1108, "وكزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1109, "وكزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1110, "وكزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1111, "وكزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1112, "وكزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1113, "وكزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1114, "وكزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1115, "وكزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1116, "وكزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1117, "وكزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1118, "وكزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1119, "وكزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1120, "وكزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1121, "وكزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1122, "وكخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1123, "وكخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1124, "وكخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1125, "وكخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1126, "وكخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1127, "وكخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1128, "وكخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1129, "وكخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1130, "وكخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1131, "وكخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1132, "وكخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1133, "وكخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1134, "وكخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1135, "وكخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1136, "وكخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1137, "وكخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1138, "وكخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1139, "وكالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1140, "وكالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1141, "وكالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1142, "وكالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1143, "وكالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1144, "وكالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1145, "وكالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1146, "وكالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1147, "وكالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1148, "وكالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1149, "وشرموطتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1150, "وشرموطتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1151, "وشرموطتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1152, "وشرموطتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1153, "وشرموطته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1154, "وشرموطتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1155, "وشرموطتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1156, "وشرموطتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1157, "وشرموطتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1158, "وشرموطة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1159, "وشرموطاتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1160, "وشرموطاتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1161, "وشرموطاتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1162, "وشرموطاتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1163, "وشرموطاته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1164, "وشرموطاتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1165, "وشرموطاتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1166, "وشرموطاتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1167, "وشرموطاتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1168, "وشرموطات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1169, "وزوبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1170, "وزوبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1171, "وزوبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1172, "وزوبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1173, "وزوبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1174, "وزوبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1175, "وزوبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1176, "وزوبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1177, "وزوبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1178, "وزوب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1179, "وزبي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1180, "وزبهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1181, "وزبهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1182, "وزبها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1183, "وزبه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1184, "وزبنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1185, "وزبكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1186, "وزبكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1187, "وزبك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1188, "وزبابي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1189, "وزبابهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1190, "وزبابهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1191, "وزبابها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1192, "وزبابه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1193, "وزبابنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1194, "وزبابكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1195, "وزبابكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1196, "وزبابك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1197, "وزباب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1198, "وزب", "و*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1199, "وخرواتي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1200, "وخرواتهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1201, "وخرواتهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1202, "وخرواتها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1203, "وخرواته", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1204, "وخرواتنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1205, "وخرواتكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1206, "وخرواتكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1207, "وخرواتك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1208, "وخروات", "و****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1209, "وخرتي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1210, "وخرته", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1211, "وخرتك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1212, "وخرة", "و**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1213, "وبكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1214, "وبكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1215, "وبكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1216, "وبكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1217, "وبكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1218, "وبكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1219, "وبكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1220, "وبكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1221, "وبكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1222, "وبكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1223, "وبكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1224, "وبكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1225, "وبكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1226, "وبكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1227, "وبكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1228, "وبكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1229, "وبكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1230, "وبكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1231, "وبكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1232, "وبكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1233, "وبكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1234, "وبكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1235, "وبكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1236, "وبكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1237, "وبكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1238, "وبكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1239, "وبكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1240, "وبكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1241, "وبكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1242, "وبكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1243, "وبشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1244, "وبشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1245, "وبشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1246, "وبشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1247, "وبشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1248, "وبشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1249, "وبشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1250, "وبشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1251, "وبشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1252, "وبشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1253, "وبشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1254, "وبشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1255, "وبشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1256, "وبشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1257, "وبشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1258, "وبشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1259, "وبشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1260, "وبشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1261, "وبشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1262, "وبشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1263, "وبزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1264, "وبزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1265, "وبزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1266, "وبزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1267, "وبزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1268, "وبزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1269, "وبزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1270, "وبزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1271, "وبزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1272, "وبزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1273, "وبزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1274, "وبزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1275, "وبزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1276, "وبزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1277, "وبزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1278, "وبزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1279, "وبزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1280, "وبزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1281, "وبزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1282, "وبزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1283, "وبزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1284, "وبزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1285, "وبزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1286, "وبزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1287, "وبزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1288, "وبزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1289, "وبزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1290, "وبزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1291, "وبزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1292, "وبزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1293, "وبخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1294, "وبخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1295, "وبخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1296, "وبخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1297, "وبخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1298, "وبخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1299, "وبخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1300, "وبخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1301, "وبخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1302, "وبخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1303, "وبخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1304, "وبخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1305, "وبالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1306, "وبالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1307, "وبالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1308, "وبالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1309, "وبالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1310, "وبالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1311, "وبالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1312, "وبالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1313, "وبالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1314, "وبالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1315, "والكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1316, "والكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1317, "والكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1318, "والشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1319, "والشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1320, "والزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1321, "والزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1322, "والزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1323, "والخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1324, "والخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1325, "نيكيني", "ن****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1326, "نيكني", "ن***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1327, "نيك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1328, "نياكة", "ن***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1329, "ناك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1330, "مومس", "م**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1331, "مهبل", "م**ل");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1332, "للكسكوس", "ل*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1333, "للكساس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1334, "للكس", "ل**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1335, "للعنة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1336, "للشرموطة", "ل******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1337, "للشرموطات", "ل*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1338, "للزوب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1339, "للزباب", "ل****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1340, "للزب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1341, "للخروات", "ل*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1342, "للخرة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1343, "لكسي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1344, "لكسهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1345, "لكسهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1346, "لكسها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1347, "لكسه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1348, "لكسنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1349, "لكسكوسي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1350, "لكسكوسهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1351, "لكسكوسهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1352, "لكسكوسها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1353, "لكسكوسه", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1354, "لكسكوسنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1355, "لكسكوسكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1356, "لكسكوسكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1357, "لكسكوسك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1358, "لكسكوس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1359, "لكسكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1360, "لكسكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1361, "لكسك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1362, "لكساسي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1363, "لكساسهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1364, "لكساسهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1365, "لكساسها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1366, "لكساسه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1367, "لكساسنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1368, "لكساسكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1369, "لكساسكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1370, "لكساسك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1371, "لكساس", "ل***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1372, "لكس", "ل*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1373, "لشرموطتي", "ل******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1374, "لشرموطتهن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1375, "لشرموطتهم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1376, "لشرموطتها", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1377, "لشرموطته", "ل******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1378, "لشرموطتنا", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1379, "لشرموطتكن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1380, "لشرموطتكم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1381, "لشرموطتك", "ل******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1382, "لشرموطة", "ل*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1383, "لشرموطاتي", "ل*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1384, "لشرموطاتهن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1385, "لشرموطاتهم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1386, "لشرموطاتها", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1387, "لشرموطاته", "ل*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1388, "لشرموطاتنا", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1389, "لشرموطاتكن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1390, "لشرموطاتكم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1391, "لشرموطاتك", "ل*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1392, "لشرموطات", "ل******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1393, "لزوبي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1394, "لزوبهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1395, "لزوبهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1396, "لزوبها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1397, "لزوبه", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1398, "لزوبنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1399, "لزوبكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1400, "لزوبكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1401, "لزوبك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1402, "لزوب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1403, "لزبي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1404, "لزبهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1405, "لزبهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1406, "لزبها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1407, "لزبه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1408, "لزبنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1409, "لزبكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1410, "لزبكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1411, "لزبك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1412, "لزبابي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1413, "لزبابهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1414, "لزبابهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1415, "لزبابها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1416, "لزبابه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1417, "لزبابنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1418, "لزبابكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1419, "لزبابكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1420, "لزبابك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1421, "لزباب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1422, "لزب", "ل*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1423, "لخرواتي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1424, "لخرواتهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1425, "لخرواتهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1426, "لخرواتها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1427, "لخرواته", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1428, "لخرواتنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1429, "لخرواتكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1430, "لخرواتكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1431, "لخرواتك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1432, "لخروات", "ل****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1433, "لخرتي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1434, "لخرتهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1435, "لخرتهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1436, "لخرتها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1437, "لخرته", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1438, "لخرتنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1439, "لخرتكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1440, "لخرتكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1441, "لخرتك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1442, "لخرة", "ل**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1443, "ككسي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1444, "ككسهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1445, "ككسهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1446, "ككسها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1447, "ككسه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1448, "ككسنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1449, "ككسكوسي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1450, "ككسكوسهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1451, "ككسكوسهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1452, "ككسكوسها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1453, "ككسكوسه", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1454, "ككسكوسنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1455, "ككسكوسكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1456, "ككسكوسكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1457, "ككسكوسك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1458, "ككسكوس", "ك****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1459, "ككسكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1460, "ككسكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1461, "ككسك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1462, "ككساسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1463, "ككساسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1464, "ككساسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1465, "ككساسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1466, "ككساسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1467, "ككساسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1468, "ككساسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1469, "ككساسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1470, "ككساسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1471, "ككساس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1472, "ككس", "ك*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1473, "كشرموطتي", "ك******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1474, "كشرموطتهن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1475, "كشرموطتهم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1476, "كشرموطتها", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1477, "كشرموطته", "ك******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1478, "كشرموطتنا", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1479, "كشرموطتكن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1480, "كشرموطتكم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1481, "كشرموطتك", "ك******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1482, "كشرموطة", "ك*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1483, "كشرموطاتي", "ك*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1484, "كشرموطاتهن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1485, "كشرموطاتهم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1486, "كشرموطاتها", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1487, "كشرموطاته", "ك*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1488, "كشرموطاتنا", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1489, "كشرموطاتكن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1490, "كشرموطاتكم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1491, "كشرموطاتك", "ك*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1492, "كشرموطات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1493, "كسي", "ك*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1494, "كسهن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1495, "كسهم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1496, "كسها", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1497, "كسه", "ك*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1498, "كسنا", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1499, "كسكوسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1500, "كسكوسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1501, "كسكوسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1502, "كسكوسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1503, "كسكوسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1504, "كسكوسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1505, "كسكوسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1506, "كسكوسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1507, "كسكوسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1508, "كسكوس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1509, "كسكن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1510, "كسكم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1511, "كسك", "ك*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1512, "كساسي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1513, "كساسهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1514, "كساسهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1515, "كساسها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1516, "كساسه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1517, "كساسنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1518, "كساسكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1519, "كساسكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1520, "كساسك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1521, "كساس", "ك**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1522, "كس", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1523, "كزوبي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1524, "كزوبهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1525, "كزوبهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1526, "كزوبها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1527, "كزوبه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1528, "كزوبنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1529, "كزوبكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1530, "كزوبكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1531, "كزوبك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1532, "كزوب", "ك**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1533, "كزبي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1534, "كزبهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1535, "كزبهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1536, "كزبها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1537, "كزبه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1538, "كزبنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1539, "كزبكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1540, "كزبكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1541, "كزبك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1542, "كزبابي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1543, "كزبابهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1544, "كزبابهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1545, "كزبابها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1546, "كزبابه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1547, "كزبابنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1548, "كزبابكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1549, "كزبابكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1550, "كزبابك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1551, "كزباب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1552, "كزب", "ك*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1553, "كخرواتي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1554, "كخرواتهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1555, "كخرواتهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1556, "كخرواتها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1557, "كخرواته", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1558, "كخرواتنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1559, "كخرواتكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1560, "كخرواتكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1561, "كخرواتك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1562, "كخروات", "ك****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1563, "كخرتي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1564, "كخرتهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1565, "كخرتهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1566, "كخرتها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1567, "كخرته", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1568, "كخرتنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1569, "كخرتكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1570, "كخرتكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1571, "كخرتك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1572, "كخرة", "ك**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1573, "كالكسكوس", "ك******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1574, "كالكساس", "ك*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1575, "كالكس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1576, "كالشرموطة", "ك*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1577, "كالشرموطات", "ك********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1578, "كالزوب", "ك****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1579, "كالزباب", "ك*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1580, "كالزب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1581, "كالخروات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1582, "كالخرة", "ك****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1583, "قحبه", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1584, "قحبة", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1585, "قحبات", "ق***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1586, "عيري", "ع**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1587, "عرصه", "ع**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1588, "عرصة", "ع**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1589, "عرصات", "ع***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1590, "عرص", "ع*ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1591, "عاهرة", "ع***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1592, "شلكه", "ش**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1593, "شلكة", "ش**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1594, "شلكات", "ش***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1595, "شرموطه", "ش****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1596, "شرموطتي", "ش*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1597, "شرموطتهن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1598, "شرموطتهم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1599, "شرموطتها", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1600, "شرموطته", "ش*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1601, "شرموطتنا", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1602, "شرموطتكن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1603, "شرموطتكم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1604, "شرموطتك", "ش*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1605, "شرموطة", "ش****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1606, "شرموطاتي", "ش******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1607, "شرموطاتهن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1608, "شرموطاتهم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1609, "شرموطاتها", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1610, "شرموطاته", "ش******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1611, "شرموطاتنا", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1612, "شرموطاتكن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1613, "شرموطاتكم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1614, "شرموطاتك", "ش******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1615, "شرموطات", "ش*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1616, "شرموط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1617, "شرجي", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v1618, "شراميط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1619, "شخيتي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1620, "شخيت", "ش**ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1621, "شخي", "ش*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1622, "شخاخي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1623, "شخاختي", "ش****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1624, "شخاخ", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1625, "شخ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1626, "ساقطة", "س***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1627, "سأضاجع", "س****ع");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1628, "زوبي", "ز**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1629, "زوبهن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1630, "زوبهم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1631, "زوبها", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1632, "زوبه", "ز**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1633, "زوبنا", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1634, "زوبكن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1635, "زوبكم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1636, "زوبك", "ز**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1637, "زوب", "ز*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1638, "زبي", "ز*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1639, "زبهن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1640, "زبهم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1641, "زبها", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1642, "زبه", "ز*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1643, "زبنا", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1644, "زبكن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1645, "زبكم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1646, "زبك", "ز*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1647, "زبابي", "ز***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1648, "زبابهن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1649, "زبابهم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1650, "زبابها", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1651, "زبابه", "ز***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1652, "زبابنا", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1653, "زبابكن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1654, "زبابكم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1655, "زبابك", "ز***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1656, "زباب", "ز**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1657, "زب", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1658, "تبا", "ت*ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1659, "خرواتي", "خ****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1660, "خرواتهن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1661, "خرواتهم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1662, "خرواتها", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1663, "خرواته", "خ****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1664, "خرواتنا", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1665, "خرواتكن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1666, "خرواتكم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1667, "خرواتك", "خ****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1668, "خروات", "خ***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1669, "خرتهن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1670, "خرتهم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1671, "خرتها", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1672, "خرتنا", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1673, "خرتكن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1674, "خرتكم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1675, "خرة", "خ*ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1676, "تنييك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1677, "تنتاك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1678, "بورنو", "ب***و");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1679, "بكسي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1680, "بكسهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1681, "بكسهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1682, "بكسها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1683, "بكسه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1684, "بكسنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1685, "بكسكوسي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1686, "بكسكوسهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1687, "بكسكوسهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1688, "بكسكوسها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1689, "بكسكوسه", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1690, "بكسكوسنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1691, "بكسكوسكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1692, "بكسكوسكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1693, "بكسكوسك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1694, "بكسكوس", "ب****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1695, "بكسكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1696, "بكسكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1697, "بكسك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1698, "بكساسي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1699, "بكساسهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1700, "بكساسهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1701, "بكساسها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1702, "بكساسه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1703, "بكساسنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1704, "بكساسكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1705, "بكساسكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1706, "بكساسك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1707, "بكساس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1708, "بكس", "ب*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1709, "بشرموطتي", "ب******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1710, "بشرموطتهن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1711, "بشرموطتهم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1712, "بشرموطتها", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1713, "بشرموطته", "ب******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1714, "بشرموطتنا", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1715, "بشرموطتكن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1716, "بشرموطتكم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1717, "بشرموطتك", "ب******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1718, "بشرموطة", "ب*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1719, "بشرموطاتي", "ب*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1720, "بشرموطاتهن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1721, "بشرموطاتهم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1722, "بشرموطاتها", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1723, "بشرموطاته", "ب*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1724, "بشرموطاتنا", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1725, "بشرموطاتكن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1726, "بشرموطاتكم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1727, "بشرموطاتك", "ب*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1728, "بشرموطات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1729, "بزوبي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1730, "بزوبهن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1731, "بزوبهم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1732, "بزوبها", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1733, "بزوبه", "ب***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1734, "بزوبنا", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1735, "بزوبكن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1736, "بزوبكم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1737, "بزوبك", "ب***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1738, "بزوب", "ب**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1739, "بزبي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1740, "بزبهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1741, "بزبهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1742, "بزبها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1743, "بزبه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1744, "بزبنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1745, "بزبكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1746, "بزبكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1747, "بزبك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1748, "بزبابي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1749, "بزبابهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1750, "بزبابهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1751, "بزبابها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1752, "بزبابه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1753, "بزبابنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1754, "بزبابكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1755, "بزبابكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1756, "بزبابك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1757, "بزباب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1758, "بزب", "ب*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1759, "بزاز", "ب**ز");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1760, "بز", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1761, "بخرواتي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1762, "بخرواتهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1763, "بخرواتهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1764, "بخرواتها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1765, "بخرواته", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1766, "بخرواتنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1767, "بخرواتكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1768, "بخرواتكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1769, "بخرواتك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1770, "بخروات", "ب****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1771, "بخرتي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1772, "بخرة", "ب**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1773, "بالكسكوس", "ب******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1774, "بالكساس", "ب*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1775, "بالكس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1776, "بالشرموطة", "ب*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1777, "بالشرموطات", "ب********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1778, "بالزوب", "ب****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1779, "بالزباب", "ب*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1780, "بالزب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1781, "بالخروات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1782, "بالخرة", "ب****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1783, "ايري", "ا**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1784, "ايرك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1785, "اير", "ا*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1786, "انيكك", "ا***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1787, "انيك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1788, "اللعين", "ا****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1789, "الكسكوس", "ا*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1790, "الكساس", "ا****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1791, "الكس", "ا**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1792, "العرص", "ا***ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1793, "العاهرة", "ا*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1794, "الشرموطة", "ا******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1795, "الشرموطات", "ا*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1796, "الزوب", "ا***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1797, "الزباب", "ا****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1798, "الزب", "ا**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1799, "الخروات", "ا*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1800, "الخرة", "ا***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1801, "الاستنماء", "ا*******ء");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1802, "إيري", "إ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1803, "إيرك", "إ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1804, "إير", "إ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1805, "أيري", "أ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1806, "أيرك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1807, "أير", "أ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1808, "أنيكك", "أ***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1809, "أنيك", "أ**ك");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ar(void)::sProfanityData_ar, (uint64_t)v5, 0x70DuLL);
    for (i = 0; i != -10830; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1809[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ar(void)::sProfanityData_ar, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_ar(void)::sProfanityData_ar[0], unk_1EF582048, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582048 - GetProfanityFilter_ar(void)::sProfanityData_ar[0]) >> 4));
}

void sub_1BF9FA9D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 86592;
  v4 = -86640;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_hr(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[6];
  _QWORD v556[6];
  _QWORD v557[6];
  _QWORD v558[6];
  _QWORD v559[6];
  _QWORD v560[6];
  _QWORD v561[6];
  _QWORD v562[6];
  _QWORD v563[6];
  _QWORD v564[6];
  _QWORD v565[6];
  _QWORD v566[6];
  _QWORD v567[6];
  _QWORD v568[6];
  _QWORD v569[6];
  _QWORD v570[6];
  _QWORD v571[6];
  _QWORD v572[6];
  _QWORD v573[6];
  _QWORD v574[6];
  _QWORD v575[6];
  _QWORD v576[6];
  _QWORD v577[6];
  _QWORD v578[6];
  _QWORD v579[6];
  _QWORD v580[6];
  _QWORD v581[6];
  _QWORD v582[6];
  _QWORD v583[6];
  _QWORD v584[6];
  _QWORD v585[6];
  _QWORD v586[6];
  _QWORD v587[6];
  _QWORD v588[6];
  _QWORD v589[6];
  _QWORD v590[6];
  _QWORD v591[6];
  _QWORD v592[6];
  _QWORD v593[6];
  _QWORD v594[6];
  _QWORD v595[6];
  _QWORD v596[6];
  _QWORD v597[6];
  _QWORD v598[6];
  _QWORD v599[6];
  _QWORD v600[6];
  _QWORD v601[6];
  _QWORD v602[6];
  _QWORD v603[6];
  _QWORD v604[6];
  _QWORD v605[6];
  _QWORD v606[6];
  _QWORD v607[6];
  _QWORD v608[6];
  _QWORD v609[6];
  _QWORD v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[6];
  _QWORD v622[6];
  _QWORD v623[6];
  _QWORD v624[6];
  _QWORD v625[6];
  _QWORD v626[6];
  _QWORD v627[6];
  _QWORD v628[6];
  _QWORD v629[6];
  _QWORD v630[6];
  _QWORD v631[6];
  _QWORD v632[6];
  _QWORD v633[6];
  _QWORD v634[6];
  _QWORD v635[6];
  _QWORD v636[6];
  _QWORD v637[6];
  _QWORD v638[6];
  _QWORD v639[6];
  _QWORD v640[6];
  _QWORD v641[6];
  _QWORD v642[6];
  _QWORD v643[6];
  _QWORD v644[6];
  _QWORD v645[6];
  _QWORD v646[6];
  _QWORD v647[6];
  _QWORD v648[6];
  _QWORD v649[6];
  _QWORD v650[6];
  _QWORD v651[6];
  _QWORD v652[6];
  _QWORD v653[6];
  _QWORD v654[6];
  _QWORD v655[6];
  _QWORD v656[6];
  _QWORD v657[6];
  _QWORD v658[6];
  _QWORD v659[6];
  _QWORD v660[6];
  _QWORD v661[6];
  _QWORD v662[6];
  _QWORD v663[6];
  _QWORD v664[6];
  _QWORD v665[6];
  _QWORD v666[6];
  _QWORD v667[6];
  _QWORD v668[6];
  _QWORD v669[6];
  _QWORD v670[6];
  _QWORD v671[6];
  _QWORD v672[6];
  _QWORD v673[6];
  _QWORD v674[6];
  _QWORD v675[6];
  _QWORD v676[6];
  _QWORD v677[6];
  _QWORD v678[6];
  _QWORD v679[6];
  _QWORD v680[6];
  _QWORD v681[6];
  _QWORD v682[6];
  _QWORD v683[6];
  _QWORD v684[6];
  _QWORD v685[6];
  _QWORD v686[6];
  _QWORD v687[6];
  _QWORD v688[6];
  _QWORD v689[6];
  _QWORD v690[6];
  _QWORD v691[6];
  _QWORD v692[6];
  _QWORD v693[6];
  _QWORD v694[6];
  _QWORD v695[6];
  _QWORD v696[6];
  _QWORD v697[6];
  _QWORD v698[6];
  _QWORD v699[6];
  _QWORD v700[6];
  _QWORD v701[6];
  _QWORD v702[6];
  _QWORD v703[6];
  _QWORD v704[6];
  _QWORD v705[6];
  _QWORD v706[6];
  _QWORD v707[6];
  _QWORD v708[6];
  _QWORD v709[6];
  _QWORD v710[6];
  _QWORD v711[6];
  _QWORD v712[6];
  _QWORD v713[6];
  _QWORD v714[6];
  _QWORD v715[6];
  _QWORD v716[6];
  _QWORD v717[6];
  _QWORD v718[6];
  _QWORD v719[6];
  _QWORD v720[6];
  _QWORD v721[6];
  _QWORD v722[6];
  _QWORD v723[6];
  _QWORD v724[6];
  _QWORD v725[6];
  _QWORD v726[6];
  _QWORD v727[6];
  _QWORD v728[6];
  _QWORD v729[6];
  _QWORD v730[6];
  _QWORD v731[6];
  _QWORD v732[6];
  _QWORD v733[6];
  _QWORD v734[6];
  _QWORD v735[6];
  _QWORD v736[6];
  _QWORD v737[6];
  _QWORD v738[6];
  _QWORD v739[6];
  _QWORD v740[6];
  _QWORD v741[6];
  _QWORD v742[6];
  _QWORD v743[6];
  _QWORD v744[6];
  _QWORD v745[6];
  _QWORD v746[6];
  _QWORD v747[6];
  _QWORD v748[6];
  _QWORD v749[6];
  _QWORD v750[6];
  _QWORD v751[6];
  _QWORD v752[6];
  _QWORD v753[6];
  _QWORD v754[6];
  _QWORD v755[6];
  _QWORD v756[6];
  _QWORD v757[6];
  _QWORD v758[6];
  _QWORD v759[6];
  _QWORD v760[6];
  _QWORD v761[6];
  _QWORD v762[6];
  _QWORD v763[6];
  _QWORD v764[6];
  _QWORD v765[6];
  _QWORD v766[6];
  _QWORD v767[6];
  _QWORD v768[6];
  _QWORD v769[6];
  _QWORD v770[6];
  _QWORD v771[6];
  _QWORD v772[6];
  _QWORD v773[6];
  _QWORD v774[6];
  _QWORD v775[6];
  _QWORD v776[6];
  _QWORD v777[6];
  _QWORD v778[6];
  _QWORD v779[6];
  _QWORD v780[6];
  _QWORD v781[6];
  _QWORD v782[6];
  _QWORD v783[6];
  _QWORD v784[6];
  _QWORD v785[6];
  _QWORD v786[6];
  _QWORD v787[6];
  _QWORD v788[6];
  _QWORD v789[6];
  _QWORD v790[6];
  _QWORD v791[6];
  _QWORD v792[6];
  _QWORD v793[6];
  _QWORD v794[6];
  _QWORD v795[6];
  _QWORD v796[6];
  _QWORD v797[6];
  _QWORD v798[6];
  _QWORD v799[6];
  _QWORD v800[6];
  _QWORD v801[6];
  _QWORD v802[6];
  _QWORD v803[6];
  _QWORD v804[6];
  _QWORD v805[6];
  _QWORD v806[6];
  _QWORD v807[6];
  _QWORD v808[6];
  _QWORD v809[6];
  _QWORD v810[6];
  _QWORD v811[6];
  _QWORD v812[6];
  _QWORD v813[6];
  _QWORD v814[6];
  _QWORD v815[6];
  _QWORD v816[6];
  _QWORD v817[6];
  _QWORD v818[6];
  _QWORD v819[6];
  _QWORD v820[6];
  _QWORD v821[6];
  _QWORD v822[6];
  _QWORD v823[6];
  _QWORD v824[6];
  _QWORD v825[6];
  _QWORD v826[6];
  _QWORD v827[6];
  _QWORD v828[6];
  _QWORD v829[6];
  _QWORD v830[6];
  _QWORD v831[6];
  _QWORD v832[6];
  _QWORD v833[6];
  _QWORD v834[6];
  _QWORD v835[6];
  _QWORD v836[6];
  _QWORD v837[6];
  _QWORD v838[6];
  _QWORD v839[6];
  _QWORD v840[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v840[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v5, "šupčinu", "š*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v6, "šupčino", "š*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v7, "šupčine", "š*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v8, "šupčina", "š*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v9, "šupčanom", "š******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "šupku", "š***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v11, "šupke", "š***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v12, "šupka", "š***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v13, "šupak", "š***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v14, "šit", "š*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v15, "šiptarska", "š*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "šiptari", "š*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v17, "šiptara", "š*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "šiptar", "š****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v19, "šipci", "š***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "ševiš", "š***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v21, "ševiti", "š****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "ševit", "š***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "ševio", "š***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v24, "ševili", "š****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v25, "ševica", "š****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v26, "ševi", "š**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "ševca", "š***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "Šupci", "Š***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v29, "Šiptarima", "Š*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "Šiptari", "Š*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "Šiptar", "Š****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v32, "đubretarski", "đ*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "đubradi", "đ*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "đubrad", "đ****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "đankoze", "đ*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v36, "čifut", "č***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v37, "četnikušo", "č*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v38, "Čifuti", "Č****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v39, "ćuna", "ć**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "zasro", "z***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v41, "zasrati", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v42, "zasrao", "z****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v43, "zasranih", "z******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v44, "zasrana", "z*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v45, "zasran", "z****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v46, "zasrali", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v47, "zasrala", "z*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "zaseru", "z****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v49, "zasereš", "z*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "zaseremo", "z******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v51, "zaseravanje", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v52, "zapišavanje", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v53, "zapišavanja", "z*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v54, "zapišavaju", "z********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v55, "zapišava", "z******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v56, "zapišati", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v57, "zapišanog", "z*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v58, "zapišani", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v59, "zapišan", "z*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v60, "zapišali", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v61, "zajebu", "z****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "zajebite", "z******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v63, "zajebi", "z****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "zajebeš", "z*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v65, "zajebe", "z****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v66, "zajebavljati", "z**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v67, "zajebavaš", "z*******š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v68, "zajebavati", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v69, "zajebavate", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "zajebavat", "z*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v71, "zajebavao", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v72, "zajebavanje", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v73, "zajebavamo", "z********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v74, "zajebavali", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v75, "zajebavajući", "z**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v76, "zajebavaju", "z********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v77, "zajebavajte", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v78, "zajebavaj", "z*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v79, "zajebava", "z******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "zajebat", "z*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v81, "zajebantski", "z*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v82, "zajebantske", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v83, "zajebanti", "z*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v84, "zajebanta", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v85, "zajebant", "z******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "zajebanog", "z*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v87, "zajebanim", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v88, "zajebaniji", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v89, "zajebanijeg", "z*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v90, "zajebanija", "z********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v91, "zajebanih", "z*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v92, "zajebani", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v93, "zajebancijom", "z**********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v94, "zajebanciji", "z*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v95, "zajebancije", "z*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v96, "zajebancijama", "z***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v97, "zajebancija", "z*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v98, "zajeban", "z*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v99, "zajebali", "z******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v100, "zajebale", "z******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "zajebala", "z******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v102, "zajebajem", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v103, "zajeb", "z***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v104, "vukojеbinu", "v********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v105, "vukojebinu", "v********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v106, "vukojebinom", "v*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v107, "vukojebini", "v********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v108, "vukojebine", "v********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v109, "vukojebinama", "v**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v110, "vukojebina", "v********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v111, "vrtiguza", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "vritnjak", "v******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v113, "uzjebali", "u******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v114, "uzasrali", "u******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v115, "usrati", "u****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v116, "usrat", "u***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v117, "usrao", "u***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "usranoj", "u*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v119, "usranog", "u*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "usranko", "u*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v121, "usranim", "u*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v122, "usranih", "u*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v123, "usrani", "u****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "usranci", "u*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v125, "usrana", "u****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v126, "usran", "u***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v127, "usrali", "u****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v128, "usrale", "u****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "usrala", "u****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v130, "uskoguzaca", "u********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v131, "useru", "u***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v132, "usereš", "u****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v133, "userete", "u*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v134, "upišanih", "u******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v135, "upišana", "u*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v136, "upišala", "u*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v137, "uparađena", "u*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v138, "ukenjalo", "u******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v139, "ukenjaju", "u******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v140, "ukakila", "u*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v141, "ukakao", "u****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v142, "ukakanom", "u******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v143, "ukakanim", "u******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "ukakane", "u*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v145, "ukakaju", "u*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v146, "uguziti", "u*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v147, "uguzit", "u****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v148, "uguzio", "u****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v149, "uguzili", "u*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v150, "tovarčići", "t*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v151, "tovarčino", "t*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v152, "tariguz", "t*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v153, "starkeljom", "s********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v154, "starkelje", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v155, "srbadija", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v156, "sraćke", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v157, "srati", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v158, "srat", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v159, "srao", "s**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v160, "sranju", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v161, "sranjima", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v162, "sranjem", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v163, "sranja", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v164, "sralo", "s***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v165, "srali", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v166, "sprdne", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v167, "sprdaš", "s****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v168, "sprdačini", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v169, "sprdačine", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v170, "sprdanja", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v171, "sprdancije", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v172, "spičkati", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v173, "spizdio", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v174, "spickat", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v175, "sotonjaru", "s*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v176, "sotonjare", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v177, "skotova", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v178, "skot", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v179, "skorojevići", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v180, "sjebu", "s***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v181, "sjebi", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v182, "sjebete", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v183, "sjebemo", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v184, "sjebe", "s***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v185, "sjebavao", "s******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v186, "sjebati", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v187, "sjebat", "s****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v188, "sjebanosti", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v189, "sjebanom", "s******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v190, "sjebanoj", "s******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v191, "sjebanih", "s******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v192, "sjebani", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v193, "sjebana", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v194, "sjebali", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v195, "sjebala", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v196, "sjebal", "s****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v197, "sisom", "s***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v198, "sisica", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v199, "sise", "s**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v200, "sisatu", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v201, "sisatome", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "sisatom", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v203, "sisatoj", "s*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v204, "sisata", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v205, "sisat", "s***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v206, "sisa", "s**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v207, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v208, "serući", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v209, "seruckati", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v210, "seruckate", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v211, "seruckanjima", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v212, "seruckanje", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v213, "seruckanja", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v214, "seruckalo", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v215, "seruckaj", "s******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v216, "seru", "s**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v217, "seronju", "s*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v218, "seronji", "s*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v219, "seronjama", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v220, "seronja", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v221, "serite", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v222, "seri", "s**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v223, "sereš", "s***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v224, "serete", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v225, "seremo", "s****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v226, "serem", "s***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v227, "sere", "s**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v228, "seratore", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v229, "seljoberu", "s*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v230, "seljobera", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v231, "seljober", "s******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v232, "seljačića", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v233, "seljačinu", "s*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v234, "seljačino", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v235, "seljačine", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v236, "seksanju", "s******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v237, "seksanja", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v238, "seksam", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v239, "seksaj", "s****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v240, "retarda", "r*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v241, "redaljku", "r******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v242, "redaljci", "r******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v243, "razjebu", "r*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v244, "razjebe", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v245, "razjebati", "r*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v246, "razjebao", "r******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v247, "razjebali", "r*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v248, "razguzit", "r******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v249, "razguzio", "r******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v250, "razguzili", "r*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v251, "raspizdio", "r*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v252, "raspizdim", "r*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v253, "raspizdilo", "r********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v254, "raspizdi", "r******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v255, "radodajka", "r*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v256, "pušikuraca", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v257, "purgerčići", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v258, "prđenje", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v259, "prčimo", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v260, "prčimir", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v261, "prčila", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v262, "prči", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v263, "prčevitim", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v264, "prčenje", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v265, "prćiju", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v266, "prosrat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v267, "prosrali", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v268, "proseravat", "p********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v269, "proseravanju", "p**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v270, "proseravanje", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v271, "proseravam", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v272, "proseravali", "p*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v273, "prisere", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v274, "pripišali", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v275, "pripizdini", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v276, "pripizdine", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v277, "pripizdina", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v278, "preseravaš", "p********š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v279, "preseravati", "p*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v280, "preseravanjem", "p***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v281, "preseravanja", "p**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v282, "preseravam", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v283, "preseravaju", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v284, "preserava", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v285, "preseratorskih", "p************h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v286, "prejebeno", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v287, "prejebeni", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v288, "prejeben", "p******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v289, "prdu", "p**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v290, "prdonje", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v291, "prdonjama", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v292, "prdonja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v293, "prdnuti", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v294, "prdnut", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v295, "prdnuo", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v296, "prdnula", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v297, "prdiš", "p***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v298, "prditi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v299, "prdite", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v300, "prdit", "p***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v301, "prdio", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v302, "prdila", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v303, "prdi", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v304, "prdežom", "p*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v305, "prdež", "p***ž");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v306, "prdenja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v307, "prdekani", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v308, "prdaca", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v309, "prcao", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v310, "prcala", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v311, "poševiti", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v312, "poševila", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v313, "poševi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v314, "posrati", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v315, "posrat", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v316, "posrao", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v317, "posranu", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v318, "posranom", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v319, "posranog", "p******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v320, "posrano", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v321, "posrani", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v322, "posrane", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v323, "posranci", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v324, "posrana", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v325, "posran", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v326, "posrali", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v327, "posrala", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v328, "poseru", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v329, "poserotinama", "p**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v330, "posereš", "p*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v331, "posere", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v332, "poseksaš", "p******š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v333, "poseksati", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v334, "poseksao", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v335, "poseksam", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v336, "poseksala", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v337, "poseksaju", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v338, "poseksa", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v339, "pornjavu", "p******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v340, "pornjave", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v341, "pornjava", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v342, "poprcaju", "p******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v343, "popiškio", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v344, "popišaš", "p*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v345, "popišat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v346, "popišanije", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v347, "popišani", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v348, "popišana", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v349, "popišam", "p*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v350, "popišali", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v351, "popišale", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v352, "popiša", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v353, "popizditi", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v354, "popizdit", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v355, "popizdio", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v356, "popizdim", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v357, "popizdila", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v358, "popizdi", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v359, "poluretardiranih", "p**************h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v360, "poluretardirani", "p*************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v361, "poluidiote", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v362, "poludebil", "p*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v363, "pokenjati", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v364, "pokenjao", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v365, "pokenja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v366, "pokarale", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v367, "pokaka", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v368, "pojebo", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v369, "pojebi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v370, "pojebeš", "p*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v371, "pojebe", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v372, "pojebati", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v373, "pojebat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v374, "pojebao", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v375, "pofukat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v376, "pofukao", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v377, "pofukaj", "p*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v378, "podjebavat", "p********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v379, "podjebavanju", "p**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v380, "podjebavanje", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v381, "podjebavanja", "p**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v382, "podjebavam", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v383, "podjebavali", "p*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v384, "podjebavaju", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v385, "podjebava", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v386, "plačipičko", "p********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v387, "plačipičkicu", "p**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v388, "plačipičke", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v389, "plačipička", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v390, "pišurija", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v391, "piškite", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v392, "pišati", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v393, "pišate", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v394, "pišanjem", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v395, "pišanje", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v396, "pišanja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v397, "pišalinu", "p******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v398, "pišaka", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v399, "pišaju", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v400, "piša", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v401, "pičku", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v402, "pičkom", "p****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v403, "pičko", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v404, "pičkice", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v405, "pički", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v406, "pičketino", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v407, "pičketina", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v408, "pičke", "p***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v409, "pičkastog", "p*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v410, "pičkasti", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v411, "pička", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v412, "pičci", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v413, "pičaka", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v414, "pizdunčić", "p*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v415, "pizdunu", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v416, "pizdunom", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v417, "pizdunima", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v418, "pizduni", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v419, "pizdune", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v420, "pizduna", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v421, "pizdun", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v422, "pizdiš", "p****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v423, "pizdite", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v424, "pizdio", "p****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v425, "pizdica", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v426, "pizdi", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v427, "pizdeku", "p*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v428, "pizdeke", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v429, "pizdeka", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v430, "pizdek", "p****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v431, "pizdarijom", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v432, "pizdarijica", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v433, "pizdarije", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v434, "pizdarijama", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v435, "pizdarija", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v436, "pizdama", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v437, "pizda", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v438, "pimpekom", "p******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v439, "pimpeki", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v440, "pimpeka", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v441, "pimpek", "p****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v442, "picolovke", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v443, "pico", "p**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v444, "pice", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v445, "pica", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v446, "pedofilčinu", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v447, "pedofilčinom", "p**********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v448, "pederčićima", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v449, "pederčići", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v450, "pederčićem", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v451, "pederčiće", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v452, "pederčića", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v453, "pederčić", "p******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v454, "pederčinu", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v455, "pederčinom", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v456, "pederčino", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v457, "pederčine", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v458, "pederčina", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v459, "pederu", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v460, "pedersku", "p******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v461, "pederskom", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v462, "pederskoj", "p*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v463, "pederskog", "p*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v464, "pederskim", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v465, "pederski", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v466, "pederom", "p*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v467, "pederluku", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v468, "pederluka", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v469, "pederluk", "p******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v470, "pederko", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v471, "pederizam", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v472, "pederima", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v473, "pederi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v474, "pedere", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v475, "pederastog", "p********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v476, "pederastim", "p********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v477, "pederastiju", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v478, "pedera", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v479, "partizančine", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v480, "partizančinama", "p************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v481, "paksu", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v482, "opizdilo", "o******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v483, "opizdii", "o*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v484, "opizdi", "o****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v485, "odjebo", "o****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v486, "odjebite", "o******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v487, "odjebi", "o****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v488, "odjebeš", "o*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v489, "odjebete", "o******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v490, "odjebemo", "o******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v491, "odjebe", "o****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v492, "odjebana", "o******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v493, "odjebali", "o******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v494, "odjebale", "o******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v495, "nepojebana", "n********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v496, "nenadjebivi", "n*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v497, "nejebici", "n******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v498, "nedojebani", "n********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v499, "nedojebana", "n********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v500, "nedojeban", "n*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v501, "nasrao", "n****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v502, "naserem", "n*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v503, "nasere", "n****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v504, "narajcane", "n*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v505, "nakurac", "n*****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v506, "najretardiraniji", "n**************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v507, "najnadrkaniji", "n***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v508, "najkurčevitije", "n************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v509, "najjebenijeg", "n**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v510, "najebo", "n****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v511, "najebeš", "n*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v512, "najebemo", "n******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v513, "najebe", "n****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v514, "najebati", "n******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v515, "najebat", "n*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v516, "najebao", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v517, "najebah", "n*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v518, "najdebilniji", "n**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v519, "najdebilnije", "n**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v520, "naguženima", "n********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v521, "naguziš", "n*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v522, "naguzio", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v523, "naguzimo", "n******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v524, "naguzim", "n*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v525, "naguzili", "n******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v526, "naguzi", "n****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v527, "nadrkao", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v528, "nadrkano", "n******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v529, "nadrkani", "n******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v530, "nadrkana", "n******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v531, "nadjebavanje", "n**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v532, "muDa", "m**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v533, "morončinu", "m*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v534, "moronu", "m****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v535, "moronskom", "m*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v536, "moronima", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v537, "moroni", "m****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v538, "moron", "m***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v539, "mikropenisom", "m**********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v540, "ljakse", "l****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v541, "lizoguzca", "l*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v542, "lezbu", "l***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v543, "lezbom", "l****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v544, "lezbo", "l***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v545, "lezbijska", "l*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v546, "lezbi", "l***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v547, "lezbejke", "l******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v548, "lezbe", "l***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v549, "lezbačenju", "l********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v550, "lezbačenjem", "l*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v551, "lezbačenja", "l********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v552, "lezbača", "l*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v553, "lezbama", "l*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v554, "kučko", "k***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v555, "kučkinih", "k******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v556, "kučkice", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v557, "kučki", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v558, "kučke", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v559, "kučkama", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v560, "kučka", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v561, "kurčiti", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v562, "kurčite", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v563, "kurčine", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v564, "kurčina", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v565, "kurčim", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v566, "kurčili", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v567, "kurčenje", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v568, "kurvu", "k***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v569, "kurvom", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v570, "kurviš", "k****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v571, "kurvinski", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v572, "kurvinske", "k*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v573, "kurvinoga", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v574, "kurvinim", "k******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v575, "kurvinih", "k******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v576, "kurvini", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v577, "kurvin", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v578, "kurvice", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v579, "kurvi", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v580, "kurveština", "k********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v581, "kurvetinom", "k********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v582, "kurvetino", "k*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v583, "kurvetini", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v584, "kurvetine", "k*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v585, "kurvetina", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v586, "kurverajima", "k*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v587, "kurve", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v588, "kurvati", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v589, "kurvanjska", "k********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v590, "kurvama", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v591, "kurva", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v592, "kurcu", "k***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v593, "kurci", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v594, "kurcem", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v595, "kurce", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v596, "kurca", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v597, "kurac", "k***c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v598, "kosookih", "k******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v599, "kosooke", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v600, "kopile", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v601, "kopilani", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v602, "kmice", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v603, "kmicama", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v604, "klimakteruše", "k**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v605, "kiturinu", "k******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v606, "kenjuckanje", "k*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v607, "kenjkaš", "k*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v608, "kenjkavih", "k*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v609, "kenjkati", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v610, "kenjka", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v611, "kenjci", "k****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v612, "kenjatori", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v613, "kenjator", "k******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v614, "kenjati", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v615, "kenjat", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v616, "kenjao", "k****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v617, "kenjam", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v618, "kenjali", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v619, "kenjala", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v620, "kenjajte", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v621, "kenjac", "k****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v622, "karina", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v623, "karani", "k****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v624, "karam", "k***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v625, "karaju", "k****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v626, "jеbеnа", "j****а");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v627, "junfera", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v628, "jebu", "j**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v629, "jebote", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v630, "jebo", "j**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v631, "jebivjetra", "j********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v632, "jebimo", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v633, "jebiga", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v634, "jebi", "j**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v635, "jebeš", "j***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v636, "jebete", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v637, "jebenoj", "j*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v638, "jebenoga", "j******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v639, "jebeno", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v640, "jebenim", "j*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v641, "jebenih", "j*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v642, "jebeni", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v643, "jebene", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v644, "jebena", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v645, "jeben", "j***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v646, "jebemu", "j****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v647, "jebemo", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v648, "jebem", "j***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v649, "jebe", "j**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v650, "jebaču", "j****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v651, "jebačku", "j*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v652, "jebači", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v653, "jebače", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v654, "jebač", "j***č");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v655, "jebavati", "j******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v656, "jebavat", "j*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v657, "jebavao", "j*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v658, "jebavali", "j******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v659, "jebavala", "j******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v660, "jebava", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v661, "jebate", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v662, "jebat", "j***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v663, "jebao", "j***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v664, "jebanjem", "j******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v665, "jebanje", "j*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v666, "jebanja", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v667, "jebalo", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v668, "jebali", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v669, "jebale", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v670, "jebala", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v671, "jebal", "j***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v672, "jbg", "j*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v673, "izjebu", "i****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v674, "izjebo", "i****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v675, "izjebite", "i******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v676, "izjebem", "i*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v677, "izjebe", "i****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v678, "izjebao", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v679, "izjeban", "i*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v680, "izjebalo", "i******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v681, "izjebali", "i******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v682, "izdrkotine", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v683, "izdrkavanje", "i*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v684, "izdrkavanja", "i*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v685, "izdrkavaju", "i********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v686, "izdrkat", "i*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v687, "izdrkao", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v688, "izdrkan", "i*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v689, "izdrka", "i****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v690, "izasrao", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v691, "izasrala", "i******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v692, "isprdku", "i*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v693, "isprdiš", "i*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v694, "isprdio", "i*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v695, "isprdili", "i******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v696, "isprdcima", "i*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v697, "isprdali", "i******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v698, "isprdaka", "i******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v699, "isprdak", "i*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v700, "ispišaš", "i*****š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v701, "homiću", "h****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v702, "homićima", "h******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v703, "homićem", "h*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v704, "homiće", "h****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v705, "homića", "h****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v706, "homić", "h***ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v707, "heil", "h**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v708, "guženje", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v709, "guzovima", "g******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v710, "guzonjice", "g*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v711, "guzonje", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v712, "guzonjama", "g*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v713, "guzonja", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v714, "guzom", "g***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v715, "guzoljublje", "g*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v716, "guzolizaca", "g********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v717, "guznih", "g****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v718, "guziš", "g***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v719, "guzičetini", "g********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v720, "guzičetine", "g********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v721, "guzičari", "g******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v722, "guzite", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v723, "guzimo", "g****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v724, "guzim", "g***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v725, "guzili", "g****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v726, "guzile", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v727, "guzila", "g****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v728, "guzicu", "g****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v729, "guzatu", "g****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v730, "guzatim", "g*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v731, "guzata", "g****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v732, "guz", "g*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v733, "govnu", "g***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v734, "govno", "g***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v735, "govnima", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v736, "govneta", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v737, "govnastog", "g*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v738, "govnaru", "g*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v739, "govnari", "g*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v740, "govnare", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v741, "govnara", "g*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v742, "govna", "g***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v743, "govance", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v744, "govana", "g****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v745, "gologuzim", "g*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v746, "gologuzi", "g******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v747, "fukare", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v748, "fukara", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v749, "fukao", "f***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v750, "fukam", "f***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v751, "fukajte", "f*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v752, "fufice", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v753, "fufica", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v754, "fucking", "f*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v755, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v756, "flundru", "f*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v757, "fificama", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v758, "fakeri", "f****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v759, "dupetu", "d****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v760, "dupeta", "d****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v761, "dupeljubac", "d********c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v762, "dupelizaca", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v763, "dupeliscima", "d*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v764, "dupelisci", "d*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v765, "dupeglavca", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v766, "dupeglavaca", "d*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v767, "dupeglavac", "d********c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v768, "dupe", "d**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v769, "drolju", "d****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v770, "droljo", "d****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v771, "droljicom", "d*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v772, "droljice", "d******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v773, "droljicama", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v774, "droljica", "d******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v775, "droljetinu", "d********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v776, "droljetina", "d********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v777, "drolje", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v778, "droljastu", "d*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v779, "droljasti", "d*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v780, "droljama", "d******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v781, "drolja", "d****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v782, "drkice", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v783, "drkaš", "d***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v784, "drkati", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v785, "drkate", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v786, "drkao", "d***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v787, "drkanju", "d*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v788, "drkanjem", "d******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v789, "drkam", "d***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v790, "drkali", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v791, "drkaju", "d****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v792, "drkajte", "d*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v793, "drkaj", "d***j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v794, "drkadžije", "d*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v795, "drkadžija", "d*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v796, "drka", "d**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v797, "dreku", "d***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v798, "drekovi", "d*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v799, "drekec", "d****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v800, "drek", "d**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v801, "dovraga", "d*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v802, "dopizdio", "d******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v803, "dopizdili", "d*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v804, "dopizdi", "d*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v805, "degenom", "d*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v806, "debeloguzost", "d**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v807, "debeloguzih", "d*********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v808, "debeloguzi", "d********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v809, "debeloguze", "d********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v810, "debeloguzac", "d*********c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v811, "crnčugo", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v812, "crnčuge", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v813, "crnčuga", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v814, "crnjo", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v815, "cigu", "c**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v816, "cigo", "c**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v817, "cigići", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v818, "cigićem", "c*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v819, "cige", "c**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v820, "ciganu", "c****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v821, "cigansku", "c******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v822, "ciganskoj", "c*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v823, "ciganskih", "c*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v824, "ciganske", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v825, "ciganom", "c*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v826, "ciganluka", "c*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v827, "ciganluk", "c******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v828, "ciganko", "c*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v829, "ciganke", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v830, "ciganka", "c*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v831, "ciganinom", "c*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v832, "ciganin", "c*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v833, "ciganima", "c******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v834, "cigani", "c****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v835, "cigane", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v836, "cigana", "c****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v837, "cice", "c**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v838, "bosančerosa", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v839, "babunčino", "b*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v840, "ass", "a*s");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_hr(void)::sProfanityData_hr, (uint64_t)v5, 0x344uLL);
    for (i = 0; i != -5016; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v840[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_hr(void)::sProfanityData_hr, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_hr(void)::sProfanityData_hr[0], unk_1EF582068, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582068 - GetProfanityFilter_hr(void)::sProfanityData_hr[0]) >> 4));
}

void sub_1BFA01910(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 40080;
  v4 = -40128;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_hu(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v555[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v5, "összeszarja", "ö*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v6, "összeokádott", "ö**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v7, "összehugyoz", "ö*********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v8, "átkúrták", "á******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v9, "átbaszás", "á******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v10, "átbaszta", "á******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v11, "átbaszott", "á*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v12, "átbaszni", "á******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v13, "átbaszarintva", "á***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "átbasz", "á****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "ánusza", "á****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v16, "álbuzikat", "á*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v17, "valagával", "v*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v18, "valagát", "v*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v19, "valagunkba", "v********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "valaga", "v****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v21, "valag", "v***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v22, "teleszarnak", "t*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v23, "tehénszar", "t*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v24, "szófosást", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[12],0>(v25, "szófosásból", "s*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v26, "szófosásba", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v27, "szétkúrták", "s********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v28, "szétkúrni", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v29, "szétbaszott", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v30, "szétbaszni", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v31, "szétbasszuk", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v32, "szájbabaszott", "s***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v33, "szopós", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v34, "szopó", "s***ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v35, "szopás", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "szopunk", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v37, "szoptam", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v38, "szopta", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v39, "szopok", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v40, "szopod", "s****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v41, "szopnánk", "s******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v42, "szopni", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "szopkodja", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v44, "szopjál", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v45, "szopják", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v46, "szopjak", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v47, "szophattok", "s********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v48, "szopatás", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v49, "szopatva", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "szopatni", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v51, "szopatnak", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v52, "szarért", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v53, "szarát", "s****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v54, "szarás", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v55, "szarunk", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v56, "szarul", "s****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v57, "szartál-e", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v58, "szarták", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v59, "szartok", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v60, "szartam", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "szartak", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "szarta", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v63, "szart", "s***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v64, "szarságra", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v65, "szarságokra", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v66, "szarságokat", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v67, "szarsággal", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v68, "szarság", "s*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "szarszag", "s******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v70, "szarsz", "s****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v71, "szarrágó", "s******ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "szarrá", "s****á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v73, "szarral", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v74, "szarrakás", "s*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "szarra", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v76, "szaroztak", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v77, "szaroznak", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v78, "szarosoknál", "s*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v79, "szaros", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v80, "szaron", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v81, "szarom", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v82, "szarokért", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v83, "szarokra", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v84, "szaroknál", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v85, "szarokat", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v86, "szarok", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v87, "szarod", "s****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "szarná", "s****á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v89, "szarni", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v90, "szarkupac", "s*******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v91, "szarkeverés", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "szarjuk", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "szarjak", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v94, "szarj", "s***j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v95, "szarintámadás", "s***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v96, "szarig", "s****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v97, "szarházit", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v98, "szarházinak", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v99, "szarházi", "s******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "szarhoz", "s*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v101, "szarhasson", "s********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v102, "szarhalmot", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v103, "szardobálással", "s************l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v104, "szardarab", "s*******b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v105, "szarcsimbókokat", "s*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v106, "szarból", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v107, "szarban", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "szarba", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v109, "szarató", "s*****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v110, "szarakodásra", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v111, "szarakodás", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v112, "szarakodtak", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v113, "szarakodni", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v114, "szarakodnak", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v115, "szarakodjunk", "s**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v116, "szarabbul", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v117, "szarabbat", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "szarabb", "s*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v119, "szar", "s**r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v120, "sunázásról", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v121, "sunáznám", "s******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v122, "sunázhatna", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v123, "sunát", "s***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v124, "strihelni", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v125, "stricit", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v126, "stricinek", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "strichelt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v128, "seggünket", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v129, "seggünkből", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v130, "seggükön", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v131, "seggüket", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v132, "seggükbe", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v133, "seggével", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v134, "seggénél", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v135, "seggének", "s******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v136, "seggén", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v137, "seggéből", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v138, "seggében", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v139, "seggébe", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v140, "seggvakarását", "s***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v141, "seggtörlő", "s*******ő");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v142, "seggtörlésre", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v143, "seggtapogatás", "s***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v144, "seggrepacsi", "s*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v145, "seggnyalónak", "s**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v146, "seggnyalókra", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v147, "seggnyalókat", "s**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v148, "seggnyalók", "s********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v149, "seggnyalója", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v150, "seggnyalói", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v151, "seggnyaló", "s*******ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v152, "seggnyalás", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v153, "segglyuka", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v154, "seggibe", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v155, "segghülye", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v156, "seggformájú", "s*********ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v157, "seggfejre", "s*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v158, "seggfejjel", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v159, "seggfejezik", "s*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v160, "seggfejet", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v161, "seggfejek", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v162, "seggfejei", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v163, "seggfej", "s*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v164, "seggetekre", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v165, "segget", "s****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v166, "seggen", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v167, "seggemet", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v168, "seggembe", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v169, "seggem", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v170, "seggel", "s****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v171, "seggek", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v172, "seggedet", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v173, "seggeden", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v174, "seggedben", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v175, "seggedbe", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v176, "segged", "s****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v177, "segge", "s***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v178, "seggberúgjátok", "s************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v179, "seggben", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v180, "seggbe", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v181, "segg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v182, "ringyó", "r****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v183, "ribancrendszám", "r************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v184, "ribanckodik", "r*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v185, "ribanc", "r****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v186, "reklámbuzi", "r********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v187, "ratyik", "r****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v188, "pöcsöltem", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v189, "pöcsöknek", "p*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v190, "pöcsöket", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v191, "pöcst", "p***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v192, "pöcsirigy", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v193, "pöcsfejek", "p*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v194, "pöcsfej", "p*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v195, "pöcs", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v196, "pöccsel", "p*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v197, "puncival", "p******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v198, "puncijuk", "p******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v199, "puncija", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v200, "punci", "p***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v201, "puhapöcs", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v202, "prostikról", "p********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v203, "prostik", "p*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v204, "porbafingó", "p********ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v205, "popóját", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v206, "popójába", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v207, "popódat", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v208, "popó", "p**ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v209, "pináját", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v210, "pina", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v211, "picsázni", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v212, "picsának", "p******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v213, "picsáját", "p******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v214, "picsába", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v215, "picsa", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v216, "pederaszta", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v217, "orálszex", "o******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v218, "odabaszták", "o********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v219, "odabaszok", "o*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v220, "odabasznak", "o********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v221, "nyomoronc", "n*******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v222, "nyomi", "n***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v223, "nyasgem", "n*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v224, "niggerre", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v225, "niggerekkel", "n*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v226, "niggerek", "n******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v227, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v228, "nagyseggű", "n*******ű");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v229, "mozibuzikkal", "m**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v230, "mozibuzik", "m*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v231, "mozibuzi", "m******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v232, "megkúrja", "m******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v233, "megfingatni", "m*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v234, "megdugják", "m*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v235, "megdughassa", "m*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v236, "megbaszott", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v237, "megbaszott", "m********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v238, "megbaszhatod", "m**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v239, "megbasz", "m*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v240, "lószart", "l*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v241, "lószarral", "l*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v242, "lószarban", "l*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v243, "lószar", "l****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v244, "lófaszt", "l*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v245, "lófaszból", "l*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v246, "lófasz", "l****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v247, "lócsöcs", "l*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v248, "lóbaszó", "l*****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v249, "leturházni", "l********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v250, "leszoptad", "l*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v251, "leszbi", "l****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v252, "leszaró", "l*****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v253, "leszarásnak", "l*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v254, "leszarva", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v255, "leszartak", "l*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v256, "leszarta", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v257, "leszarom", "l******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v258, "leszarnám", "l*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v259, "leszarni", "l******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v260, "leszarna", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v261, "leszarlak", "l*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v262, "leszarják", "l*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v263, "leszarjuk", "l*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v264, "leszarja", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v265, "lepisál", "l*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v266, "lekurvázta", "l********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[16],0>(v267, "lehülyepicsázta", "l*************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v268, "lebaszás", "l******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v269, "lebaszta", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v270, "kúródott", "k******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v271, "kúró", "k**ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v272, "kúrom", "k***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v273, "kúrok", "k***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v274, "kúrni", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v275, "kúrnak", "k****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v276, "kúrna", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v277, "kúrjátok", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v278, "köcsögség", "k*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v279, "kutyaszart", "k********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v280, "kutyaszarról", "k**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v281, "kutyaszaros", "k*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v282, "kutyaszar", "k*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v283, "kurvázó", "k*****ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v284, "kurvázott", "k*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v285, "kurvázik", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v286, "kurvával", "k******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v287, "kurvát", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v288, "kurvás", "k****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v289, "kurvára", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v290, "kurvának", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v291, "kurválkodás", "k*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v292, "kurvákat", "k******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v293, "kurvák", "k****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v294, "kurvája", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v295, "kurvult", "k*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v296, "kurvaszar", "k*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v297, "kurvaország", "k*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v298, "kurva", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v299, "kula", "k**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v300, "kisköcsög", "k*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v301, "kipicsáznám", "k*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v302, "kicsesztetek", "k**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v303, "kicsesztek", "k********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v304, "kicseszni", "k*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v305, "kicseszett", "k********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v306, "kibaszta", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v307, "kibaszottul", "k*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v308, "kibaszott", "k*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v309, "kibasznék", "k*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v310, "kibaszni", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v311, "kibasznak", "k*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v312, "kibaszik", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v313, "kibasszanak", "k*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v314, "keményfaszú", "k*********ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v315, "kakálásnál", "k********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v316, "kakából", "k*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v317, "kaksit", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v318, "kakiról", "k*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v319, "kakil", "k***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v320, "kaka", "k**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v321, "húgyozták", "h*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v322, "hangyafing", "h********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v323, "gólyafos", "g******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v324, "genyók", "g****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v325, "genyó", "g***ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v326, "genyának", "g******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v327, "genya", "g***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v328, "gennyláda", "g*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v329, "gecizésre", "g*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v330, "geciségnek", "g********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v331, "geciláda", "g******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v332, "geciknek", "g******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v333, "gecik", "g***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v334, "gecigránátot", "g**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v335, "gecifos", "g*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v336, "gecibe", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v337, "geci", "g**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v338, "fütyijük", "f******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v339, "fütyijének", "f********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v340, "fütyi", "f***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v341, "félrekúró", "f*******ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v342, "fosás", "f***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v343, "fosunk", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v344, "fostalicska", "f*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v345, "fost", "f**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v346, "fosszínü", "f******ü");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v347, "fossanak", "f******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v348, "fossal", "f****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v349, "foss", "f**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v350, "fospumpa", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v351, "fosni", "f***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v352, "fosnak", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v353, "fosik", "f***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v354, "fosfej", "f****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v355, "fosból", "f****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v356, "fosarcúak", "f*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v357, "fos", "f*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v358, "fingós", "f****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v359, "fingásaidról", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v360, "finguk", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v361, "fingod", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v362, "fingjuk", "f*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v363, "fingjam", "f*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v364, "fingja", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v365, "fingik", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v366, "finghatnak", "f********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v367, "fingatni", "f******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v368, "fingania", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v369, "fing", "f**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v370, "filmbuzikkal", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v371, "filmbuzi", "f******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v372, "fenéknyalása", "f**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v373, "felkúrják", "f*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v374, "fekák", "f***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v375, "feka", "f**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v376, "faszával", "f******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v377, "faszát", "f****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v378, "faszára", "f*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v379, "faszán", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v380, "fasztól", "f*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v381, "faszt", "f***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v382, "faszságukhoz", "f**********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v383, "faszságukat", "f*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v384, "faszságra", "f*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v385, "faszságot", "f*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v386, "faszságokra", "f*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v387, "faszságokkal", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v388, "faszságokat", "f*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v389, "faszságodnál", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v390, "faszságaik", "f********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v391, "faszság", "f*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v392, "faszszopó", "f*******ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v393, "faszról", "f*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v394, "faszparaszt", "f*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v395, "faszom", "f****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v396, "faszoknak", "f*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v397, "faszok", "f****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v398, "faszod", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v399, "fasznak", "f*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v400, "faszkodás", "f*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v401, "faszkalappal", "f**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v402, "faszkalapok", "f*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v403, "faszkalap", "f*******p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v404, "faszfejű", "f******ű");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v405, "faszfej", "f*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v406, "faszból", "f*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v407, "faszban", "f*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v408, "faszba", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v409, "fasz", "f**z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v410, "fapinával", "f*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v411, "fapina", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v412, "elszarni", "e******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v413, "elqrva", "e****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v414, "elkúródott", "e********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v415, "elkúrásai", "e*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v416, "elkúrták", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v417, "elkúrtuk", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v418, "elkúrtam", "e******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v419, "elkúrtak", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v420, "elkúrtad", "e******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v421, "elkúrta", "e*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v422, "elkúrt", "e****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v423, "elkúrni", "e*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v424, "elkúrnak", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v425, "elkúrják", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v426, "elkúrjuk", "e******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v427, "elkúrja", "e*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v428, "elkurvázza", "e********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v429, "elkurvulni", "e********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v430, "elkurva", "e*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v431, "elbaszása", "e*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v432, "elbasztátok", "e*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v433, "elbaszták", "e*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v434, "elbasztam", "e*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v435, "elbasztak", "e*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v436, "elbasztad", "e*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v437, "elbaszta", "e******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v438, "elbaszottak", "e*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v439, "elbaszott", "e*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v440, "elbaszni", "e******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v441, "egérszar", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v442, "divatbuzikról", "d***********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v443, "disznószar", "d********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v444, "csöcsöst", "c******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v445, "csöcsök", "c*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v446, "csöcsre", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v447, "csöcs", "c***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v448, "csokifaszt", "c********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v449, "cseszett", "c******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v450, "csesszétek", "c********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v451, "cigókat", "c*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v452, "cigók", "c***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v453, "cigó", "c**ó");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v454, "cicim", "c***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v455, "cicikkel", "c******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v456, "cicik", "c***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v457, "cicije", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v458, "cici", "c**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v459, "buzulást", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v460, "buzulni", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v461, "buzuljanak", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v462, "buzul", "b***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v463, "buzizós", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v464, "buzizás", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v465, "buzizott", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v466, "buzizni", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v467, "buziznak", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v468, "buzizik", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v469, "buzivonulás", "b*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v470, "buzivonaglás", "b**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v471, "buziverő", "b******ő");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v472, "buziverést", "b********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v473, "buzit", "b***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v474, "buziság", "b*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v475, "buzisan", "b*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v476, "buzis", "b***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v477, "buziparádéra", "b**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v478, "buzinak", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v479, "buzikról", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v480, "buzikon", "b*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v481, "buziknak", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v482, "buzikkal", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v483, "buzikat", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v484, "buzik", "b***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v485, "buzifesztivál", "b***********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v486, "buzifelvonulást", "b*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(v487, "buzifelvonulásnak", "b***************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v488, "buzifelvonulás", "b************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v489, "buzibárról", "b********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v490, "buzibárként", "b*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v491, "buzi", "b**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v492, "buzeránsok", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v493, "buzeráns", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v494, "beszopása", "b*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v495, "beszoptuk", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v496, "beszopják", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v497, "beszopja", "b******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v498, "beszarás", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v499, "beszartam", "b*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v500, "beszartak", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v501, "beszart", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v502, "beszarsz", "b******z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v503, "beszarok", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v504, "beszarni", "b******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v505, "beszarik", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v506, "beszari", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v507, "beleszarva", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v508, "beleszarna", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v509, "becseszett", "b********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v510, "bebuzultok", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v511, "bebuzul", "b*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v512, "bebaszott", "b*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v513, "bazmeg", "b****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v514, "bazdmeg", "b*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v515, "baszáson", "b******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v516, "baszáshoz", "b*******z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v517, "baszva", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v518, "basztál", "b*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v519, "baszták", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v520, "basztatásból", "b**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v521, "basztatás", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v522, "basztatni", "b*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v523, "basztatnak", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v524, "basztatják", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v525, "basztassuk", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v526, "basztak", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v527, "baszottul", "b*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v528, "baszott", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v529, "baszok", "b****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v530, "baszogatása", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v531, "baszogattak", "b*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v532, "baszogatta", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v533, "baszogatni", "b********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v534, "baszogatja", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v535, "baszogassa", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v536, "basznák", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v537, "basznia", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v538, "baszni", "b****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v539, "basznak", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v540, "baszkodom", "b*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v541, "baszhatom", "b*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v542, "baszdmeg", "b******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v543, "baszd", "b***d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v544, "baszatlan", "b*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v545, "baszakszik", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v546, "baszakodnak", "b*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v547, "basz", "b**z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v548, "basszátok", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v549, "basszák", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v550, "bassza", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v551, "baromarcú", "b*******ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v552, "balfasz", "b*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v553, "anál", "a**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v554, "anyádba", "a*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v555, "agyonbassza", "a*********a");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_hu(void)::sProfanityData_hu, (uint64_t)v5, 0x227uLL);
    for (i = 0; i != -3306; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v555[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_hu(void)::sProfanityData_hu, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_hu(void)::sProfanityData_hu[0], unk_1EF582088, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582088 - GetProfanityFilter_hu(void)::sProfanityData_hu[0]) >> 4));
}

void sub_1BFA06270(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 26400;
  v4 = -26448;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

#error "1BFA062D4: too big function (funcsize=0)"

void sub_1BFA2EB94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 234576;
  v4 = -234624;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_nb(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[7];

  v58[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v5, "utpult", "u****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v6, "svartinger", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v7, "svartingene", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v8, "svarting", "s******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v9, "ståkuk", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "satans", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v11, "rasshøl", "r*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v12, "rævpult", "r*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v13, "rævkjørt", "r******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v14, "purkejævler", "p*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "pakkiser", "p******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "niggere", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v18, "negerjævler", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v19, "negerjævel", "n********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v20, "mongo", "m***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "ludder", "l****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "kukker", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v23, "kukk", "k**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v24, "kuker", "k***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v25, "kuk", "k*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "knulles", "k*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "knuller", "k*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "knulle", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "knulla", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v30, "jævlig", "j****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v31, "jævla", "j***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "horunge", "h*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "horebukk", "h******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "helvetes", "h******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "fuckings", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v36, "fucka", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v37, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v38, "fittetryne", "f********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v39, "fitter", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v40, "fitten", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v41, "fittelandet", "f*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v42, "fitte", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v43, "fitta", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v44, "faens", "f***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v45, "faen", "f**n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v46, "føkkings", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v47, "føkker", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v48, "føkka", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v49, "føkk", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v50, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v51, "barnesexen", "b********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v52, "barnesex", "b******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v53, "barnepornoen", "b**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v54, "barneporno", "b********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v55, "babysexen", "b*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v56, "babysex", "b*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v57, "babypornoen", "b*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v58, "babyporno", "b*******o");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_nb(void)::sProfanityData_nb, (uint64_t)v5, 0x36uLL);
    for (i = 318; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_nb(void)::sProfanityData_nb, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_nb(void)::sProfanityData_nb[0], unk_1EF5820C8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF5820C8 - GetProfanityFilter_nb(void)::sProfanityData_nb[0]) >> 4));
}

void sub_1BFA2F350(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 2544; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_hi(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v362[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v5, "teri maa ki chut", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v6, "teri maa ki chut", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[14],0>(v7, "teri maa ki choot", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[14],0>(v8, "teri maa ki choot", "t************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v9, "teri maa ki", "t********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v10, "teri maa ki", "t********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v11, "tattu", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v12, "tatte", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v13, "rundi", "r****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v14, "randi", "r****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v15, "rand", "r***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v16, "raandi", "r****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v17, "raand", "r***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v18, "porkistan", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v19, "mutth", "म***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(v20, "muth", "म***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v21, "motherchoot", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v22, "motherchod", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v23, "mother choot", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v24, "mother chhod", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v25, "mooth", "म***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v26, "mammey", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v27, "mamme", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v28, "madarchut", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v29, "madarchood", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v30, "madarchodd", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v31, "madarchod", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v32, "madar chut", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v33, "madar chod", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v34, "maa ki chut", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v35, "maa ki chut", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v36, "maa ki choot", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v37, "maa ki choot", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v38, "lund", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v39, "lun", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v40, "lulli", "l***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v41, "luli", "l***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v42, "loru", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v43, "lodu", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v44, "lode", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v45, "loda", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v46, "laudu", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v47, "laudey", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v48, "laude", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v49, "lauda", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v50, "jhatu", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v51, "jhat", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v52, "jhantu", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v53, "jhant", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v54, "jhaatu", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v55, "jhaat", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v56, "jhaantu", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v57, "jhaant", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v58, "gottey", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v59, "gotte", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v60, "gotey", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v61, "gote", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v62, "gasti", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v63, "gandu", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v64, "gandfut", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v65, "gandfat", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v66, "gand", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v67, "gadhalund", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v68, "gadhalun", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v69, "gaandu", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v70, "gaand", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v71, "fattu", "f***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v72, "dalley", "d***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v73, "dalle", "d***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v74, "chutiya", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v75, "chutia", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v76, "chut", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v77, "chudwane", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v78, "chudwana", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v79, "chudwaane", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v80, "chudwaana", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v81, "chudwaa", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v82, "chudwa", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v83, "chudvane", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v84, "chudvana", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v85, "chudvaane", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v86, "chudvaana", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v87, "chudvaa", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v88, "chudva", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v89, "chudney", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v90, "chudne", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v91, "chuchi", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v92, "chuche", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v93, "chootiya", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v94, "chootia", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v95, "choot", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v96, "choochi", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v97, "chooche", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v98, "chodd", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v99, "chod", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v100, "chhod", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v101, "bubey", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v102, "bube", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v103, "bubbey", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v104, "bubbe", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v105, "bosdiwali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v106, "bosdiwale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v107, "bosdiwala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v108, "bosdivali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v109, "bosdivale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v110, "bosdivala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v111, "bosdiki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v112, "bosdike", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v113, "bosdika", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v114, "bosdi wali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v115, "bosdi wali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v116, "bosdi wale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v117, "bosdi wale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v118, "bosdi wala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v119, "bosdi wala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v120, "bosdi vali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v121, "bosdi vali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v122, "bosdi vale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v123, "bosdi vale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v124, "bosdi vala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v125, "bosdi vala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v126, "bosdi ki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v127, "bosdi ki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v128, "bosdi ke", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v129, "bosdi ke", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v130, "bosdi ka", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v131, "bosdi ka", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v132, "bosdi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v133, "bosadiwali", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v134, "bosadiwale", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v135, "bosadiwala", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v136, "bosadivali", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v137, "bosadivale", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v138, "bosadivala", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v139, "bosadiki", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v140, "bosadike", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v141, "bosadika", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v142, "bosadi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v143, "bhosdiwali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v144, "bhosdiwale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v145, "bhosdiwala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v146, "bhosdivali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v147, "bhosdivale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v148, "bhosdivala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v149, "bhosdiki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v150, "bhosdike", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v151, "bhosdika", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v152, "bhosdi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v153, "bhosdaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v154, "bhosda", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v155, "bhosadiwali", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v156, "bhosadiwale", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v157, "bhosadivali", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v158, "bhosadivale", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v159, "bhosadivala", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v160, "bhosadiki", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v161, "bhosadike", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v162, "bhosadika", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v163, "bhosadi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v164, "bhosadaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v165, "bhosada", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v166, "bhonsdiwali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v167, "bhonsdiwale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v168, "bhonsdiwala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v169, "bhonsdivali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v170, "bhonsdivale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(v171, "bhonsdivala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v172, "bhonsdiki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v173, "bhonsdike", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v174, "bhonsdika", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v175, "bhonsdi wali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v176, "bhonsdi wale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v177, "bhonsdi wala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v178, "bhonsdi vali", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v179, "bhonsdi vale", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v180, "bhonsdi vala", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v181, "bhonsdi ki", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v182, "bhonsdi ke", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v183, "bhonsdi ka", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v184, "bhenchodd", "b****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v185, "bhenchod", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v186, "bhencho", "b****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(v187, "bhen ke takke", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v188, "bhen ke take", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v189, "bhainchod", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v190, "bhain ke takke", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(v191, "bhain ke take", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v192, "bhadwaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v193, "bhadwa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v194, "bhadvaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v195, "bhadva", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(v196, "bhaduaa", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v197, "bhadua", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v198, "betichodd", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v199, "betichod", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(v200, "beti chodd", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v201, "beti chod", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v202, "behenchod", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v203, "behen ke takke", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(v204, "behen ke take", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v205, "bbhosadiwala", "b********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(v206, "bakchodi", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(v207, "bakchodd", "b****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v208, "bakchod", "b****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v209, "babbey", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v210, "babbe", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v211, "aand", "a***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v212, "लौडे", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v213, "लौडा", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v214, "लौड़े", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v215, "लौड़ा", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v216, "लोडे", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v217, "लोडा", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v218, "लोड़े", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v219, "लोड़ू", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v220, "लोड़ा", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[7],0>(v221, "लुल्ली", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v222, "लुली", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v223, "लन", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v224, "लण", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v225, "लंड", "ल***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v226, "राण्ड", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v227, "रांड", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v228, "राँड", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v229, "रण्डी", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v230, "रंडी", "र***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v231, "रँडी", "र****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v232, "मूठ", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v233, "मूट्ठ", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v234, "मुठ", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v235, "मुट्ठ", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[9],0>(v236, "मादरचोद", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[9],0>(v237, "मादरचूत", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[9],0>(v238, "मादरचुत", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[9],0>(v239, "मादर चोद", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[9],0>(v240, "मादर चूत", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[9],0>(v241, "मादर चुत", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[9],0>(v242, "मां की चूत", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[36],char const(&)[9],0>(v243, "मां का भोसड़ा", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[9],0>(v244, "माँ की चूत", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[36],char const(&)[9],0>(v245, "माँ का भोसड़ा", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v246, "मम्मे", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v247, "ममे", "म*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v248, "भोसड़ीवाले", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v249, "भोसड़ीवाली", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v250, "भोसड़ीवाला", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v251, "भोसड़ीके", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v252, "भोसड़ीकी", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v253, "भोसड़ीका", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v254, "भोसड़ी वाले", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v255, "भोसड़ी वाली", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v256, "भोसड़ी वाला", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v257, "भोसड़ी के", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v258, "भोसड़ी की", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v259, "भोसड़ी का", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v260, "भोसड़ी", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v261, "भोसड़िवाले", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v262, "भोसड़िवाली", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v263, "भोसड़िवाला", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v264, "भोसड़िके", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v265, "भोसड़िकी", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v266, "भोसड़िका", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v267, "भोसड़ि", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v268, "भोसड़ा", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(v269, "भेंचोड़", "भ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v270, "भाइनचोड़", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v271, "भाइन के टके", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v272, "भड़ुआ", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v273, "भड़वा", "भ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[9],0>(v274, "बोसाड़िके", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v275, "बोसड़ीवाले", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v276, "बोसड़ीवाली", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v277, "बोसड़ीवाला", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v278, "बोसड़ीके", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v279, "बोसड़ीका", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v280, "बोसड़ी वाले", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v281, "बोसड़ी वाली", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(v282, "बोसड़ी वाला", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v283, "बोसड़ी के", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v284, "बोसड़ी की", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(v285, "बोसड़ी का", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v286, "बोसड़ी", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v287, "बोसड़िवाले", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v288, "बोसड़िवाली", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(v289, "बोसड़िवाला", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v290, "बोसड़िके", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v291, "बोसड़िकी", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(v292, "बोसड़िका", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v293, "बोसड़ि", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[7],0>(v294, "बेहेनचोद", "ब***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[7],0>(v295, "बेहेन के टके", "ब***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(v296, "बेटीचोद", "भ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[8],0>(v297, "बेटी चोद", "भ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v298, "बूब्बे", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v299, "बूबे", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v300, "बुब्बे", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v301, "बहनचोद", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[9],0>(v302, "बहन के टके", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v303, "बब्बे", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v304, "बकचोदी", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v305, "बकचोद", "ब*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v306, "फट्टू", "फ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[7],0>(v307, "पोरकिस्तान", "प***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v308, "दल्ले", "द***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v309, "दलले", "द***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[40],char const(&)[9],0>(v310, "तेरी मां की चूत", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v311, "तेरी मां की", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[49],char const(&)[9],0>(v312, "तेरी मां का भोसड़ा", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v313, "तेरी मां का", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[40],char const(&)[9],0>(v314, "तेरी माँ की चूत", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v315, "तेरी माँ की", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[49],char const(&)[9],0>(v316, "तेरी माँ का भोसड़ा", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(v317, "तेरी माँ का", "त*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v318, "टट्टे", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v319, "टट्टू", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v320, "टट्टु", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v321, "टटे", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v322, "टटू", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v323, "टटु", "ट***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v324, "झाटू", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v325, "झाटु", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v326, "झाट", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v327, "झांटू", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v328, "झांटु", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v329, "झाँटू", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v330, "झाँटु", "झ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v331, "चोद", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v332, "चूतीया", "च*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v333, "चूतिया", "च*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v334, "चूत", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v335, "चूचे", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v336, "चूची", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[7],0>(v337, "चुदवाने", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[7],0>(v338, "चुदवाना", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v339, "चुदवा", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v340, "चुदने", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v341, "चुटीया", "च*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v342, "चुटिया", "च*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v343, "चुचे", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v344, "चुची", "च***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[8],0>(v345, "गोट्टे", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v346, "गोटे", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v347, "गांडू", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v348, "गांडु", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[8],0>(v349, "गांडफट", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v350, "गांड", "ग***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v351, "गाँडू", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v352, "गाँडु", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[8],0>(v353, "गाँडफट", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v354, "गाँड", "ग***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v355, "गस्ती", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v356, "गसती", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v357, "गधालन", "ग***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[7],0>(v358, "गधालंड", "ग***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v359, "गंडफट", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v360, "गँडफट", "ग****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v361, "आंड", "आ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v362, "आँड", "आ*****");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_hi(void)::sProfanityData_hi, (uint64_t)v5, 0x166uLL);
    for (i = 0; i != -2148; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v362[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_hi(void)::sProfanityData_hi, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_hi(void)::sProfanityData_hi[0], unk_1EF5820E8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF5820E8 - GetProfanityFilter_hi(void)::sProfanityData_hi[0]) >> 4));
}

void sub_1BFA3230C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 17136;
  v4 = -17184;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_de(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v159[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v5, "wixer", "w***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v6, "wixen", "w**en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v7, "wixe", "w**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "wichser", "w*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "wichsen", "w****en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "wichse", "w****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v11, "votzen", "v***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v12, "votze", "v***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v13, "tittenlutscher", "t************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v14, "tittenheft", "t********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v15, "tittenfick", "t********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v16, "titten", "t***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v17, "titte", "t***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v18, "spermakehle", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v19, "spaghettifresser", "s**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v20, "spagettifresser", "s*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v21, "schänden", "s*****en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v22, "schwuchtel", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v23, "schwanzlutscher", "s*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v24, "schluckluder", "s**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v25, "schlitzauge", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v26, "schlampe", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v27, "scheißen", "s******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v28, "scheiße", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v29, "scheiß", "s****ß");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v30, "scheissen", "s******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v31, "scheisse", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "scheiss", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v33, "schaenden", "s******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v34, "sacklutscher", "s**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v35, "sackgesicht", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v36, "russki", "r****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v37, "rosettenschlemmer", "r***************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v38, "rosettenhengst", "r************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v39, "querfotze", "q*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v40, "pötern", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v41, "punani", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v42, "pollacke", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "pissnelke", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v44, "pissetrinker", "p**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v45, "pimmellutscher", "p************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v46, "pimmelkopf", "p********f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v47, "pimmel", "p****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v48, "onkelficker", "o*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v49, "ochsenficker", "o**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v50, "nutte", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v51, "nillenkäse", "n********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v52, "nille", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v53, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v54, "niggas", "n***as");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v55, "neger", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v56, "nabelficker", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v57, "mösensaft", "m*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v58, "möse", "m**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v59, "moesensaft", "m********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v60, "moese", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v61, "makkaronifresserin", "m**************rin");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v62, "makkaronifresser", "m**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v63, "kümmeltürkin", "k***********in");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[11],0>(v64, "kümmeltürken", "k*******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v65, "kümmeltürke", "k*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v66, "kuemmeltuerken", "k***********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v67, "kuemmeltuerke", "k***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v68, "knieficker", "k********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v69, "knackarsch", "k********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v70, "klöten", "k***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "kloeten", "k****en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v72, "kinderschändern", "k************rn");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v73, "kinderschänder", "k************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v74, "kinderschaender", "k*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v75, "kinderficker", "k**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v76, "kanake", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "kacken", "k***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v78, "kacke", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v79, "judensäue", "j******ue");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v80, "judenschweine", "j**********ne");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v81, "judenschwein", "j**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v82, "judensau", "j******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v83, "judennutten", "j********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v84, "judennutte", "j********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v85, "judenhuren", "j*******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "judenhure", "j*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v87, "judaverrecke", "j**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v88, "japsen", "j***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v89, "japse", "j***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v90, "itakerschweine", "i*********ne");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v91, "itakerschwein", "i*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v92, "itakernutten", "i*********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v93, "itakernutte", "i*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v94, "itakerhure", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v95, "itaker", "i****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v96, "hühnerficker", "h**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v97, "hurensöhne", "h******ne");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v98, "hurensohn", "h*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v99, "huren", "h**en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v100, "hure", "h**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v101, "huehnerficker", "h***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v102, "heilhitler", "h********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v103, "gebumst", "g*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v104, "fucksticks", "f*******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v105, "fuckstick", "f*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v106, "fucking", "f***ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "fuckin", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v108, "fuckhead", "f******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v109, "fuckem", "f****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v110, "fucked", "f***ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v111, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v112, "fotzensaft", "f********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v113, "fotzenlecker", "f**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "fotzen", "f***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v115, "fotze", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v116, "flachwichser", "f**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v117, "fisten", "f***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v118, "fickt", "f***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v119, "fickpisse", "f*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v120, "ficker", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v121, "ficken", "f***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v122, "fickdich", "f******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v123, "fick", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v124, "fettärsche", "f********he");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v125, "fettsäcke", "f*******ke");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v126, "fettsack", "f******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "fettarsch", "f*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v128, "ferkelwämser", "f**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v129, "ferkelwaemser", "f***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v130, "ferkelficker", "f**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v131, "eselficker", "e********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v132, "durchgefickt", "d**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v133, "durchficken", "d********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v134, "bumsen", "b***en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v135, "bullenklöten", "b*********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v136, "bullenkloeten", "b**********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v137, "beschissen", "b*******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v138, "bescheißt", "b*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v139, "bescheißen", "b*******en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v140, "bescheissen", "b********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v141, "ausländervotzen", "a************en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v142, "ausländervotze", "a************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v143, "ausländerfotzen", "a************en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v144, "ausländerfotze", "a************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v145, "arschlöcher", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v146, "arschloecher", "a**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "arschloch", "a*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v148, "arschlecker", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[17],0>(v149, "arschkriecherin", "a*************in");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v150, "arschkriecher", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v151, "arschkekse", "a*******se");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v152, "arschkeks", "a******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v153, "arschkatheter", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v154, "arschintruder", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v155, "arschficker", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v156, "arschficken", "a********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v157, "arsch", "a***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v158, "analschlampe", "a**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v159, "abgefuckt", "a*******t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_de(void)::sProfanityData_de, (uint64_t)v5, 0x9BuLL);
    for (i = 0; i != -930; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v159[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_de(void)::sProfanityData_de, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_de(void)::sProfanityData_de[0], unk_1EF582108, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582108 - GetProfanityFilter_de(void)::sProfanityData_de[0]) >> 4));
}

void sub_1BFA337DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 7392;
  v4 = -7440;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_ko(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v355[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v5, "후릴놈", "후**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v6, "후릴년", "후**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v7, "호모자식", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v8, "호모새끼", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v9, "호모놈", "호**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v10, "호모년", "호**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v11, "호로잡놈", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v12, "호로잡년", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v13, "호로잡것", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v14, "호로자식", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v15, "호로새끼", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v16, "호로개잡놈", "호****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v17, "호로개잡년", "호****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v18, "호로개자식", "호****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v19, "호구새끼", "호***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v20, "허접새끼", "허***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v21, "허접들", "허**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v22, "코쟁이", "코**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v23, "쳐먹어", "쳐**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v24, "처먹어", "처**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v25, "창놈", "창*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v26, "창년", "창*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v27, "창녀", "창*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v28, "창남", "창*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v29, "쪽발이", "쪽**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v30, "쪽바리", "쪽**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v31, "짱깨", "짱*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v32, "지랄하네", "지***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v33, "지랄발광", "지***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v34, "지랄", "지*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v35, "즐쳐드셈", "즐***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v36, "쥐좆만한", "쥐***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v37, "쥐새끼", "쥐**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v38, "죽일새끼", "죽***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v39, "죽일놈", "죽**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v40, "죽일년", "죽**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v41, "좇까라", "좇**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v42, "좆빠지게", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v43, "좆빠구리", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v44, "좆밥", "좆*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v45, "좆맹구", "좆**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v46, "좆만한새끼", "좆****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v47, "좆만한놈", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v48, "좆만한년", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v49, "좆만한것", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v50, "좆만아", "좆**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v51, "좆됐다", "좆**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v52, "좆대가리", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v53, "좆나씨팔", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v54, "좆나", "*나");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v55, "좆까", "좆*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v56, "좆같은새끼", "좆****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v57, "좆같은놈", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v58, "좆같은년", "좆***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v59, "좆같다", "좆**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v60, "좆", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v61, "좃빠지게", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v62, "좃빠구리", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v63, "좃밥", "좃*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v64, "좃맹구", "좃**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v65, "좃만한새끼", "좃****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v66, "좃만한놈", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v67, "좃만한년", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v68, "좃만한것", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v69, "좃만아", "좃**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v70, "좃됐다", "좃**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v71, "좃대가리", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v72, "좃나씹팔", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v73, "좃나씨팔", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v74, "좃나씨발", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v75, "좃나십팔", "좃***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v76, "졸라게", "졸**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v77, "졸라", "졸*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v78, "존나게", "존**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v79, "존나", "존*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v80, "재수없는새끼", "재*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v81, "재수없는놈", "재****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v82, "재수없는년", "재****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v83, "잡새끼", "잡**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v84, "잡놈", "잡*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v85, "잡년", "잡*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v86, "잡것", "잡*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v87, "자지새끼", "자***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v88, "자지놈", "자**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v89, "자지년", "자**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v90, "육시럴", "육**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v91, "육시랄놈", "육***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v92, "육시랄년", "육***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v93, "육시랄", "육**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v94, "육봉대가리", "육****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v95, "우라질", "우**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v96, "엿먹어", "엿**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v97, "엿같은새끼", "엿****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v98, "엿같은놈", "엿***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v99, "엿같은년", "엿***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v100, "염병할새끼", "염****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v101, "염병할놈", "염***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v102, "염병할년", "염***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v103, "염병할것", "염***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v104, "염병할", "염**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v105, "염병", "염*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v106, "에미보지", "에***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v107, "양년", "양*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v108, "양공주", "양**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v109, "양갈보", "양**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v110, "아갈통", "아**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v111, "아갈빡", "아**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v112, "씹팔좆나", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v113, "씹팔좆", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v114, "씹팔놈의새끼", "씨*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v115, "씹팔놈", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v116, "씹팔년", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v117, "씹팔것", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v118, "씹팔개새끼", "씨****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v119, "씹팔", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v120, "씹탱구리", "씹***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v121, "씹장생", "씹**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v122, "씹새야", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(v123, "씹새끼", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v124, "씹놈", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v125, "씹년", "씹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v126, "씹구멍", "씹**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v127, "씨팔좆나", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v128, "씨팔좆", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v129, "씨팔놈의새끼", "씨*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v130, "씨팔놈", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v131, "씨팔년", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v132, "씨팔것", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v133, "씨팔개새끼", "씨****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v134, "씨팔", "씨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v135, "씨불탱", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v136, "씨부랄놈", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v137, "씨부랄년", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v138, "씨부랄", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v139, "씨방새끼", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v140, "씨방새", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v141, "씨발좆나", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v142, "씨발좆", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v143, "씨발새끼", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v144, "씨발놈의새끼", "씨*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v145, "씨발놈", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v146, "씨발년", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v147, "씨발것", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v148, "씨발개새끼", "씨****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v149, "씨발", "씨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v150, "씨댕아", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v151, "씨댕새끼", "씨***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v152, "씨댕놈", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v153, "씨댕년", "씨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v154, "씨댕", "씨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v155, "쓰레기년", "쓰***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v156, "썩을놈의새끼", "썩*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v157, "썩을놈", "썩**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v158, "썩을년", "썩**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v159, "썅놈의새끼", "썅****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v160, "썅놈", "썅*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v161, "썅년", "썅*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v162, "썅", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v163, "쌍판", "쌍*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v164, "쌍놈의새끼", "쌍****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v165, "쌍놈", "쌍*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v166, "쌍년", "쌍*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v167, "쌍", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v168, "십팔", "십*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v169, "십딱", "십*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v170, "소새끼", "소**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v171, "섹파", "섹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v172, "섹마", "섹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v173, "섹녀", "섹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v174, "섹남", "섹*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v175, "서양이쁜이", "서****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v176, "색마", "색*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v177, "색놈", "색*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v178, "색년", "색*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v179, "새대가리", "새***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v180, "상놈의새끼", "상****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v181, "상놈", "상*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v182, "상년", "상*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v183, "삽질", "삽*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v184, "사까시", "사**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v185, "빨통", "빨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v186, "빨갱이", "빨**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v187, "빠순이", "빠**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v188, "빠돌이", "빠**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v189, "빠구리", "빠**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v190, "빌어먹을새끼", "빌*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v191, "빌어먹을놈", "빌****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v192, "빌어먹을년", "빌****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v193, "불알", "불*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v194, "보지털", "보**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v195, "보지새끼", "보***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v196, "보지구멍", "보***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v197, "보지", "보*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v198, "병신씹새", "병***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v199, "병신새끼", "병***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v200, "병신개자식", "병****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v201, "병신같은놈", "병****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v202, "병신같은년", "병****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v203, "병신", "병*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v204, "변태새끼", "변***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v205, "변태", "변*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v206, "변섹", "변*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v207, "변녀", "변*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v208, "변남", "변*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v209, "반병신", "반**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v210, "미친씹새끼", "미****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v211, "미친썅놈", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v212, "미친썅년", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v213, "미친쌍놈", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v214, "미친쌍년", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v215, "미친새끼", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v216, "미친상놈", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v217, "미친상년", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v218, "미친놈", "미**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v219, "미친년", "미**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v220, "미친개잡", "미***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v221, "미친개새끼", "미****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v222, "미친개보지", "미****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v223, "멍텅구리", "멍***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v224, "멍청한새끼", "멍****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v225, "멍청한놈", "멍***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v226, "멍청한년", "멍***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v227, "망할새끼", "망***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v228, "망할놈", "망**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v229, "망할년", "망**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v230, "맛간새끼", "맛***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v231, "맛간놈", "맛**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v232, "맛간년", "맛**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v233, "막간놈", "막**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v234, "막간년", "막**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v235, "뚱보새끼", "뚱***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v236, "똥대가리", "똥***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v237, "또라이새끼", "또****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v238, "또라이", "또**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v239, "딸딸이", "딸**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v240, "등신새끼", "등***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v241, "뒈질새끼", "뒈***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v242, "뒈질놈", "뒈**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v243, "뒈질년", "뒈**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v244, "뒈질", "뒈*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v245, "돌아이새끼", "돌****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v246, "돌아이", "돌**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v247, "돌대가리", "돌***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v248, "대갈빡", "대**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v249, "닥쳐", "닥*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v250, "니자지", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v251, "니보지", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v252, "니미좃", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v253, "니미애미", "니***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v254, "니미씹", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v255, "니미씨팔놈아", "니*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v256, "니미씨팔", "니***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v257, "니미럴새끼", "니****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v258, "니미럴", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v259, "니미", "니*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v260, "니기미씨댕", "니****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v261, "니기미", "니**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v262, "니기리좆도", "닝****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v263, "남창", "남*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v264, "나쁜새끼", "나***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v265, "나쁜놈", "나**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v266, "나쁜년", "나**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v267, "꼴통새끼", "꼴***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v268, "껌둥이", "껌**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v269, "깜둥이", "깜**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v270, "까진년", "까**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v271, "그지좆밥", "그***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v272, "구멍질", "구**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v273, "고자새끼", "고***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v274, "고자놈", "고**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v275, "걸레놈", "걸**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v276, "걸레년", "걸**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v277, "걸레같은놈", "걸****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v278, "걸레같은년", "걸****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v279, "거지좃밥", "거***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v280, "거지새끼", "거***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v281, "거지발싸개", "거****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v282, "거지놈", "거**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v283, "거지년", "거**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v284, "개호로새끼", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v285, "개호로놈", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v286, "개호로년", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v287, "개호로", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v288, "개허접", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v289, "개찌질이", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v290, "개쪼다", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v291, "개지랄", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v292, "개좆만아", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v293, "개좆같은놈", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v294, "개좆같은년", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v295, "개좆같은것", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v296, "개좆같은", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v297, "개잡놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v298, "개잡년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v299, "개잡것", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v300, "개작살", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v301, "개자지", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v302, "개자식", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v303, "개염병", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v304, "개씹창", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v305, "개씹새끼", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v306, "개씹새", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v307, "개씹보지", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v308, "개씨팔좆밥", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[6],0>(v309, "개씨팔놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[6],0>(v310, "개씨팔년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v311, "개씨팔", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v312, "개씨부랄", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v313, "개쓰레기", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v314, "개썅놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v315, "개썅년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v316, "개쌍놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v317, "개쌍년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v318, "개싸이코", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v319, "개소리", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v320, "개새끼", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v321, "개상놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v322, "개상년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v323, "개뼈다귀", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v324, "개빠구리", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v325, "개불알", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v326, "개보지털", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v327, "개보지놈", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v328, "개보지년", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v329, "개보지", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v330, "개병신", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v331, "개발싸개", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v332, "개발새끼", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v333, "개발놈", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v334, "개발년", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v335, "개망나니", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v336, "개또라이", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v337, "개돌아이", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v338, "개놈의새끼", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v339, "개놈아", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v340, "개놈", "개*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v341, "개년아", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v342, "개년", "개*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v343, "개걸레", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v344, "개같은자식", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v345, "개같은새끼", "개****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v346, "개같은놈", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v347, "개같은년", "개***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v348, "개같은", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v349, "개갈보", "개**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v350, "갈보자식", "갈***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v351, "갈보새끼", "갈***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v352, "갈보놈", "갈**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v353, "갈보년", "갈**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v354, "갈보", "갈*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v355, "간나새끼", "간***");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ko(void)::sProfanityData_ko, (uint64_t)v5, 0x15FuLL);
    for (i = 0; i != -2106; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v355[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ko(void)::sProfanityData_ko, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_ko(void)::sProfanityData_ko[0], unk_1EF582128, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582128 - GetProfanityFilter_ko(void)::sProfanityData_ko[0]) >> 4));
}

void sub_1BFA366B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 16800;
  v4 = -16848;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_fi(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v92[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v5, "vitut", "v***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "vitusta", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "vitussa", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "vitun", "v***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "vitulta", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v10, "vitulle", "v*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "vitulla", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v12, "vituksi", "v*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "vituista", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "vituissa", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "vituilta", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "vituille", "v******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v17, "vituilla", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v18, "vituiksi", "v******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "vittuun", "v*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "vittuna", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v21, "vittujen", "v******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v22, "vittuja", "v*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v23, "vittuina", "v******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v24, "vittuihin", "v*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v25, "vittua", "v****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v26, "vittu", "v***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "pilluun", "p*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "pillut", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v29, "pillusta", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "pillussa", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "pilluna", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v32, "pillun", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "pillulta", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "pillulle", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "pillulla", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v36, "pilluksi", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v37, "pillujen", "p******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v38, "pilluja", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v39, "pilluista", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v40, "pilluissa", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v41, "pilluina", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "pilluilta", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "pilluille", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v44, "pilluilla", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v45, "pilluiksi", "p*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v46, "pilluihin", "p*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v47, "pillua", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v48, "pillu", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v49, "kyrvät", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v50, "kyrvästä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v51, "kyrvässä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v52, "kyrvän", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v53, "kyrvältä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v54, "kyrvällä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v55, "kyrvälle", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v56, "kyrväksi", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v57, "kyrvistä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v58, "kyrvissä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v59, "kyrviltä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v60, "kyrvillä", "k******ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "kyrville", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "kyrviksi", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v63, "kyrpään", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v64, "kyrpää", "k****ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v65, "kyrpänä", "k*****ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v66, "kyrpä", "k***ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v67, "kyrpiä", "k****ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "kyrpinä", "k*****ä");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v69, "kyrpiin", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "kyrpien", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v71, "kullit", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "kullista", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "kullissa", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v74, "kullina", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "kullin", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "kullilta", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "kullille", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v78, "kullilla", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v79, "kulliksi", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "kulliin", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "kullien", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v82, "kullia", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v83, "kulli", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "kulleja", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v85, "kulleista", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "kulleissa", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v87, "kulleina", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "kulleilta", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v89, "kulleille", "k*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v90, "kulleilla", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v91, "kulleiksi", "k******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v92, "kulleihin", "k*******n");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_fi(void)::sProfanityData_fi, (uint64_t)v5, 0x58uLL);
    for (i = 0; i != -528; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v92[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_fi(void)::sProfanityData_fi, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_fi(void)::sProfanityData_fi[0], unk_1EF582148, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582148 - GetProfanityFilter_fi(void)::sProfanityData_fi[0]) >> 4));
}

void sub_1BFA37298(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 4176;
  v4 = -4224;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_id(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[7];

  v9[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v5, "toket", "t***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "keparat", "k*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "dientot", "d*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "binal", "b***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "bangsat", "b*****t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_id(void)::sProfanityData_id, (uint64_t)v5, 5uLL);
    for (i = 24; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_id(void)::sProfanityData_id, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_id(void)::sProfanityData_id[0], unk_1EF582168, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582168 - GetProfanityFilter_id(void)::sProfanityData_id[0]) >> 4));
}

void sub_1BFA37494(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 192; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_fr(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v289[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v5, "écouillé", "é******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v6, "éburné", "é****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "zob", "z*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v8, "zguègue", "z*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "zboube", "z****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v10, "zboob", "z***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "weeaboo", "w*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v12, "vide-couilles", "v***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v13, "turluchon", "t*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v14, "troufignon", "t********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v15, "troufignoliser", "t************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v16, "troufignolerie", "t************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v17, "troufignoler", "t**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v18, "trouducune", "t********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "trouduc", "t*****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v20, "troncher", "t******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "tocard", "t****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v22, "tire-au-cul", "t*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "teucha", "t****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v24, "teuch", "t***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v25, "teubé", "t***é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v26, "teub", "t**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v27, "techa", "t***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v28, "tassepé", "t*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "taspé", "t***é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v30, "taré", "t**é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "tarlouze", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "tarlouse", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "tantouze", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v34, "tantouserie", "t*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "tafiole", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v36, "taffioles", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v37, "taffiole", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v38, "tabarnak", "t******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v39, "tabarnac", "t******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "sucer", "s***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v41, "suce-boules", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v42, "sous-merde", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v43, "souchienne", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v44, "souchien", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v45, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v46, "sent-la-pisse", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v47, "schnouf", "s*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v48, "schnoque", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v49, "schnock", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v50, "schnek", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v51, "schleus", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v52, "schleuhs", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v53, "schleuh", "s*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "schleues", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v55, "schleue", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v56, "schleu", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v57, "scheiße", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v58, "sans-couilles", "s***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v59, "salopes", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v60, "salope", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "salopard", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v62, "salop", "s***p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v63, "salauds", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "salaud", "s****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v65, "sagouin", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v66, "s'archifoutre", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v67, "réenculer", "r*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "refucker", "r******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v69, "ras-les-fesses", "r************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v70, "ras-le-bonbon", "r***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v71, "ras-la-moule", "r**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v72, "pétasses", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v73, "pétasse", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v74, "péquenaud", "p*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v75, "pédés", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v76, "pédé", "p**é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v77, "putes", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v78, "pute", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "putains", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v80, "putain", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v81, "poufiasses", "p********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v82, "poufiasse", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v83, "pouffiasse", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "poivrot", "p*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v85, "pogne-cul", "p*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v86, "pochtron", "p******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v87, "pochetron", "p*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "pochard", "p*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v89, "pissou", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v90, "pisseur", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v91, "pisser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v92, "pisse-au-lit", "p**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v93, "papier-cul", "p********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v94, "pakis", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v95, "paki", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v96, "ostie", "o***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v97, "négros", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v98, "négro", "n***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v99, "négresses", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v100, "négresse", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v101, "nègres", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v102, "nègre", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v103, "niquer", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v104, "nichons", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v105, "nichon", "n****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v106, "nibard", "n****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v107, "niaks", "n***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v108, "niak", "n**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v109, "merdouillard", "m**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v110, "merdogène", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v111, "merdique", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v112, "merdier", "m*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v113, "merdicité", "m*******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v114, "merdeux", "m*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v115, "merdes", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v116, "merderie", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v117, "merder", "m****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v118, "merde", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v119, "merdasse", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v120, "merdaillon", "m********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v121, "merdaille", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v122, "mauviette", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v123, "mange-merde", "m*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v124, "lèche-cul", "l*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v125, "lopette", "l*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v126, "jean-foutre", "j*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "imbitable", "i*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v128, "imbitabilité", "i**********é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v129, "imbaisable", "i********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v130, "gueuler", "g*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v131, "gouines", "g*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v132, "gouine", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v133, "gogol", "g***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v134, "glaoui", "g****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v135, "glandu", "g****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v136, "glandouillou", "g**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v137, "glandeuse", "g*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v138, "glandeur", "g******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v139, "garce", "g***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v140, "fucker", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v141, "foutriquer", "f********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v142, "foutre", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v143, "foutoir", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "fouteur", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v145, "fouille-merde", "f***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v146, "foufounette", "f*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "foufounes", "f*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "foufoune", "f******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v149, "foufe", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v150, "foirade", "f*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "fister", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v152, "fiotte", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v153, "filsdeputerie", "f***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v154, "fils-de-puterie", "f*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v155, "enflure", "e*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v156, "enculés", "e*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v157, "enculées", "e******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v158, "enculée", "e*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v159, "enculé", "e****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v160, "enculeuse", "e*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v161, "enculeur", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v162, "enculette", "e*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v163, "enculerie", "e*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v164, "enculer", "e*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v165, "enculement", "e********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v166, "encule", "e****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v167, "enculatoire", "e*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v168, "enculailleur", "e**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v169, "enculage", "e******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v170, "enculagailler", "e***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v171, "enculade", "e******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v172, "enculable", "e*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v173, "emmerdé", "e*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v174, "emmerdeuse", "e********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v175, "emmerdeur", "e*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v176, "emmerdes", "e******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v177, "emmerder", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v178, "emmerde", "e*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v179, "dégueulassement", "d*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v180, "déconnage", "d*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v181, "déconnade", "d*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v182, "débile", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v183, "duschnock", "d*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v184, "dugland", "d*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v185, "ducon", "d***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v186, "doigter", "d*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v187, "derche", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v188, "demi-molle", "d********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v189, "câlice", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v190, "crétins", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v191, "crétines", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v192, "crétine", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v193, "crétin", "c****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v194, "crotté", "c****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v195, "crisse", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v196, "crevure", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v197, "couillu", "c*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v198, "couilles", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v199, "couille", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v200, "cons", "c**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v201, "connes", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v202, "conneries", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v203, "connerie", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v204, "conne", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v205, "connasse", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v206, "connards", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v207, "connarde", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v208, "connard", "c*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v209, "conchier", "c******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v210, "conasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v211, "cocu", "c**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v212, "clito", "c***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v213, "claque-merde", "c**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v214, "chnoque", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v215, "chleuhs", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v216, "chleuh", "c****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v217, "chiée", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v218, "chiure", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v219, "chiottes", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v220, "chiotte", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v221, "chintok", "c*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v222, "chinetoque", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v223, "chinetok", "c******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v224, "chinetoc", "c******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v225, "chieur", "c****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v226, "chier", "c***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v227, "chiennasse", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v228, "chibre", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v229, "chiatique", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v230, "chiasser", "c******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v231, "chiasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v232, "chiant", "c****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v233, "cherche-merde", "c***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v234, "chaude-pisse", "c**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v235, "chat-bite", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v236, "catins", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v237, "catin", "c***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v238, "casse-couilles", "c************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v239, "casse-couille", "c***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v240, "casse-burette", "c***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v241, "casse-bonbon", "c**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v242, "bâtards", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v243, "bâtarde", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v244, "bâtard", "b****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v245, "bâtard", "b****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v246, "burnes", "b****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v247, "burne", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v248, "brêle", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v249, "broute-minou", "b**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v250, "brise-burnes", "b**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v251, "branlée", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v252, "branlotter", "b********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v253, "branlo", "b****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v254, "branleurs", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v255, "branleur", "b******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v256, "branlette", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v257, "branler", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v258, "branle-couille", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v259, "bounioule", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v260, "bounioul", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v261, "boukaks", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v262, "boukak", "b****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v263, "bougnouliser", "b**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v264, "bougnoulisation", "b*************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v265, "bougnoules", "b********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v266, "bougnoule", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v267, "bougnoul", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v268, "bordel", "b****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v269, "bonnasse", "b******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v270, "bonasse", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v271, "bitembois", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v272, "bite", "b**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v273, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v274, "bifler", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v275, "bifle", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v276, "biffler", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v277, "biffle", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v278, "bicots", "b****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v279, "bicot", "b***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v280, "bibite", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v281, "biatch", "b****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v282, "batards", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v283, "batard", "b****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v284, "baiseur", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v285, "baise", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v286, "baisable", "b******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v287, "archifoutre", "a*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v288, "alboches", "a******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v289, "alboche", "a*****e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_fr(void)::sProfanityData_fr, (uint64_t)v5, 0x11DuLL);
    for (i = 0; i != -1710; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v289[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_fr(void)::sProfanityData_fr, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_fr(void)::sProfanityData_fr[0], unk_1EF582188, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582188 - GetProfanityFilter_fr(void)::sProfanityData_fr[0]) >> 4));
}

void sub_1BFA39AA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 13632;
  v4 = -13680;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_en(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v353[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v5, "wops'", "w***'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v6, "wops", "w*ps");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v7, "wop's", "w**'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v8, "whore", "w**re");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "whops", "w**ps");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v10, "whop", "w**p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "whiteys", "w****ys");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v12, "whitey's", "w*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v13, "wetbacks'", "w*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "wetbacks", "w*****ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v15, "wetback's", "w******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "wetback", "w*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v17, "wanks", "w**ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "wanking", "w***ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v19, "wankers'", "w******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "wankers", "w***ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v21, "wanker's", "w*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "wanker", "w***er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "wanked", "w***ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v24, "wank", "w**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v25, "vags", "v*gs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v26, "vag", "v*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v27, "unfucking", "u*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v28, "unfucked", "u******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v29, "unfuck", "u****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "twats'", "t****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v31, "twats", "t**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v32, "twat's", "t***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v33, "twat", "t**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v34, "thots'", "t**ts'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v35, "thots", "t**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v36, "thot's", "t**t's");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v37, "thot", "t**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v38, "suck my dick", "s**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v39, "spics'", "s****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "spics", "s**cs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v41, "spic's", "s***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v42, "spic", "s**c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v43, "sluts", "s***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v44, "slut", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v45, "shitty", "s****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v46, "shitting", "s****ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v47, "shittiest", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v48, "shittier", "s*****er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v49, "shitters'", "s*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "shitters", "s****ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v51, "shitter's", "s******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v52, "shitter", "s****er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v53, "shitted", "s****ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v54, "shitstorms'", "s*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v55, "shitstorms", "s*******ms");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v56, "shitstorm's", "s********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v57, "shitstorm", "s*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v58, "shits'", "s****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v59, "shits", "s**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v60, "shitloads'", "s********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v61, "shitloads", "s******ds");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v62, "shitload's", "s*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "shitload", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "shitless", "s*****ss");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v65, "shitholes", "s******es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v66, "shithole", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v67, "shithead", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v68, "shitfuckers'", "s**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v69, "shitfuckers", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v70, "shitfucker's", "s**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v71, "shitfucker", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v72, "shitfaced", "s******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "shitface", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "shit's", "s***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v75, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v76, "shat", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v77, "sambos'", "s*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v78, "sambos", "s***os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "sambo's", "s****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v80, "sambo", "s***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v81, "rimjobs'", "r******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "rimjobs", "r****bs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v83, "rimjob's", "r*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v84, "rimjob", "r****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v85, "ragheads'", "r*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v86, "ragheads", "r*****ds");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v87, "raghead's", "r******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "raghead", "r*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v89, "queerfuckers'", "q***********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v90, "queerfuckers", "q**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v91, "queerfucker's", "q***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v92, "queerfucker", "q*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "pussy's", "p****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v94, "pussy", "p***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "pussies'", "p******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v96, "pussies", "p****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v97, "penises", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v98, "penis", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v99, "penes", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v100, "pakis'", "p****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v101, "pakis", "p**is");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "paki's", "p***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v103, "paki", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v104, "niggers'", "n******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v105, "niggers", "n***ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v106, "nigger's", "n*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "nigger", "n***er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v108, "nigga", "n***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v109, "motherfucks'", "m**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v110, "motherfucks", "m********ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v111, "motherfucking", "m*********ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v112, "motherfuckers'", "m************'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v113, "motherfuckers", "m*********ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v114, "motherfucker's", "m***********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v115, "motherfucker", "m*********er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v116, "motherfucked", "m*********ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v117, "motherfuck's", "m*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v118, "motherfuck", "m********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v119, "mother fucker", "m*********er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v120, "mofo", "m**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v121, "mindfucks'", "m********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v122, "mindfucks", "m******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v123, "mindfucking", "m*******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v124, "mindfuckers'", "m**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v125, "mindfuckers", "m*******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v126, "mindfucker's", "m*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v127, "mindfucker", "m*******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v128, "mindfucked", "m*******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v129, "mindfuck's", "m*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "mindfuck", "m******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v131, "lesbos'", "l*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v132, "lesbos", "l***os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v133, "lesbo's", "l****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v134, "lesbo", "l***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v135, "krauts", "k***ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v136, "kraut", "k***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v137, "kikes'", "k****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v138, "kikes", "k**es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v139, "kike's", "k***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v140, "kike", "k**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v141, "kaffirs'", "k******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v142, "kaffirs", "k****rs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v143, "kaffir's", "k*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v144, "kaffir", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v145, "jizz", "j**z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v146, "jerkoffs'", "j*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v147, "jerkoffs", "j*****fs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v148, "jerkoff's", "j******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v149, "jerkoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v150, "japs'", "j***'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v151, "japs", "j*ps");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v152, "jap's", "j**'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v153, "jap", "j*p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v154, "injuns'", "i*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v155, "injuns", "i***ns");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v156, "injun's", "i****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v157, "injun", "i***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v158, "hymies'", "h*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v159, "hymies", "h***es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v160, "hymie's", "h****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v161, "hymie", "h***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v162, "horseshits", "h*******ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v163, "horseshit's", "h********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v164, "horseshit", "h*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v165, "honky's", "h****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v166, "honkies", "h****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v167, "homos'", "h****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v168, "homos", "h**os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v169, "homo's", "h***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v170, "handjobs'", "h*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v171, "handjobs", "h*****bs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v172, "handjob's", "h******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v173, "handjob", "h*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v174, "gringos", "g****os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v175, "gringo", "g****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v176, "gooks'", "g****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v177, "gooks", "g**ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v178, "gook's", "g***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v179, "gook", "g**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v180, "goddamnit", "g*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v181, "goddamned", "g******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v182, "goddamn", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v183, "goddammit", "g*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v184, "goddam", "g****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v185, "gangbangs'", "g********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v186, "gangbangs", "g******gs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v187, "gangbangers'", "g**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v188, "gangbangers", "g*******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v189, "gangbanger's", "g*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v190, "gangbanger", "g*******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v191, "gangbang's", "g*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v192, "gangbang", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v193, "fuckwad", "f*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v194, "fucks'", "f****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v195, "fucks", "f**ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v196, "fucking", "f***ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v197, "fuckin", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v198, "fuckfaces'", "f********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v199, "fuckfaces", "f******es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v200, "fuckface's", "f*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v201, "fuckface", "f******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "fuckers", "f***ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v203, "fucker", "f***er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v204, "fucked", "f***ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v205, "fuckable", "f******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v206, "fuck's", "f***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v207, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v208, "fags", "f*gs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v209, "faggots'", "f******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v210, "faggots", "f****ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v211, "faggot's", "f*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v212, "faggot", "f****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v213, "fag", "f*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v214, "dicksuckers", "d*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v215, "dicksucker'", "d*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v216, "dicksucker", "d********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v217, "dickheads", "d*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v218, "dickhead", "d******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v219, "dickfuckers'", "d**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v220, "dickfuckers", "d*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v221, "dickfucker's", "d**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v222, "dickfucker", "d********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v223, "darky's", "d****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v224, "darky", "d***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v225, "darkies'", "d******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v226, "darkies", "d****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v227, "darkie's", "d*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v228, "darkie", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v229, "dagos'", "d****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v230, "dagos", "d**os");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v231, "dagoes", "d***es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v232, "dago's", "d***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v233, "dago", "d**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v234, "cunty", "c***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v235, "cunts'", "c****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v236, "cunts", "c**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v237, "cunt's", "c***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v238, "cunt", "c**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v239, "cums'", "c***'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v240, "cums", "c*ms");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v241, "cumming", "c***ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v242, "cum's", "c**'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v243, "cum", "c*m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v244, "coons'", "c****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v245, "coons", "c**ns");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v246, "coon's", "c***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v247, "coon", "c**n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v248, "coolies'", "c******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v249, "coolies", "c****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v250, "coolie's", "c*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v251, "coolie", "c****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v252, "cocksuckers'", "c**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v253, "cocksuckers", "c*******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v254, "cocksucker's", "c*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v255, "cocksucker", "c*******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v256, "cocks", "c***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v257, "cockfuckers'", "c**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v258, "cockfuckers", "c*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v259, "cockfucker's", "c**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v260, "cockfucker", "c********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v261, "cock suckers'", "c***********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v262, "cock suckers", "c********ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v263, "cock sucker's", "c**********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v264, "cock sucker", "c********er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v265, "cock", "c**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v266, "clusterfucks", "c**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v267, "clusterfuck", "c*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v268, "clits'", "c****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v269, "clits", "c**ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v270, "clit's", "c***'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v271, "clit", "c**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v272, "chode", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v273, "choad", "c***d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v274, "chinky", "c****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v275, "chinks'", "c*****'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v276, "chinks", "c***ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v277, "chink's", "c****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v278, "chink", "c***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v279, "chinamen", "c*****en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v280, "chinaman", "c******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v281, "chickenshits", "c*********ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v282, "chickenshit", "c*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v283, "buttfucks'", "b********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v284, "buttfucks", "b******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v285, "buttfucking", "b*******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v286, "buttfuckers'", "b**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v287, "buttfuckers", "b*******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v288, "buttfucker's", "b*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v289, "buttfucker", "b*******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v290, "buttfucked", "b*******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v291, "buttfuck's", "b*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v292, "buttfuck", "b******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v293, "bullshitting", "b********ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v294, "bullshitted", "b********ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v295, "bullshits", "b******ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v296, "bullshit", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v297, "brainfucks'", "b*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v298, "brainfucks", "b*******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v299, "brainfucking", "b********ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v300, "brainfuckers'", "b***********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v301, "brainfuckers", "b********ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v302, "brainfucker's", "b**********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v303, "brainfucker", "b********er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v304, "brainfucked", "b********ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v305, "brainfuck's", "b********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v306, "brainfuck", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v307, "blowjobs'", "b*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v308, "blowjobs", "b*****bs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v309, "blowjob's", "b******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v310, "blowjob", "b*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v311, "blow job", "b*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v312, "bitches", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v313, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v314, "beefcurtains", "b**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v315, "beef curtains", "b**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v316, "beaners'", "b******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v317, "beaners", "b***ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v318, "beaner's", "b*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v319, "beaner", "b***er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v320, "batshits", "b*****ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v321, "batshit", "b*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v322, "bastards", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v323, "bastard's", "b*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v324, "bastard", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v325, "assholes'", "a*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v326, "assholes", "a*****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v327, "asshole's", "a******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v328, "asshole", "a*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v329, "assfucks'", "a*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v330, "assfucks", "a*****ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v331, "assfucking", "a******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v332, "assfuckers'", "a*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v333, "assfuckers", "a******ers");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v334, "assfucker's", "a********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v335, "assfucker", "a******er");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v336, "assfucked", "a******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v337, "assfuck's", "a******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v338, "assfuck", "a*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v339, "arseholes'", "a********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v340, "arseholes", "a*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v341, "arsehole's", "a*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v342, "arsehole", "a******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v343, "arsefucks'", "a********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v344, "arsefucks", "a*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v345, "arsefucking", "a*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v346, "arsefuckers'", "a**********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v347, "arsefuckers", "a*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v348, "arsefucker's", "a*********'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v349, "arsefucker", "a********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v350, "arsefucked", "a********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v351, "arsefuck's", "a*******'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v352, "arsefuck", "a******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v353, "apeshit", "a*****t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en(void)::sProfanityData_en, (uint64_t)v5, 0x15DuLL);
    for (i = 0; i != -2094; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v353[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en(void)::sProfanityData_en, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_en(void)::sProfanityData_en[0], unk_1EF5821A8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF5821A8 - GetProfanityFilter_en(void)::sProfanityData_en[0]) >> 4));
}

void sub_1BFA3C930(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 16704;
  v4 = -16752;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_th(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v132[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v5, "ไอ้ไพร่", "ไ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v6, "ไอ้เห็ดสด", "ไ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v7, "ไอ้เหี้ย", "ไ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v8, "ไอ้เชี่ย", "ไ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v9, "ไอ้เชรี่ย", "ไ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v10, "ไอ้ห่า", "ไ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v11, "ไอ้สัตว์", "ไ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v12, "ไอ้สัด", "ไ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v13, "ไอ้ดอกทอง", "ไ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v14, "ไอ้จู๋", "ไ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(v15, "ไอสัศ", "ไ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v16, "โม๊ก", "โ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v17, "โครตแม่ง", "โ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[43],char const(&)[17],0>(v18, "โครตพ่อโครตแม่", "โ*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v19, "โครตพ่อ", "โ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v20, "โคตรแม่", "โ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v21, "โคตรพ่อ", "โ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v22, "โคตร", "โ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v23, "โคดพ่อ", "โ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v24, "แย่เม็ด", "แ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v25, "แม่เมิงตาย", "แ*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v26, "แม่เมิง", "แ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v27, "แม่มึงตาย", "แ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v28, "แม่มรึงสิ", "แ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v29, "แม่มรึงตาย", "แ*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v30, "แม่งตาย", "แ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v31, "แม่ง", "แ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v32, "แตด", "แ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v33, "แดก", "แ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v34, "เหี้ยๆ", "เ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v35, "เหี้ย", "เ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v36, "เหียก", "เ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v37, "เสือก", "เ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v38, "เวรตะไล", "เ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v39, "เย๊ด", "เ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v40, "เย้ด", "เ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v41, "เย็ท", "เ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v42, "เย็ดโด้", "เ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v43, "เย็ดแม่ง", "เ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v44, "เย็ดแม่", "เ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v45, "เย็ดเด็ก", "เ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v46, "เย็ด", "เ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v47, "เชี่ยๆ", "เ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v48, "เชี่ย", "เ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v49, "เชรี่ยๆ", "เ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v50, "เชรี่ย", "เ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v51, "เงี่ยน", "เ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v52, "อีไพร่", "อ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v53, "อีเห็ดสด", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v54, "อีเวร", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v55, "อีเวน", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v56, "อีเลว", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v57, "อีห่าราก", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v58, "อีห่า", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v59, "อีสัส", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v60, "อีสัตว์", "อ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v61, "อีบ้า", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v62, "อีตุ๊ด", "อ*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v63, "อีตัว", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v64, "อีดำ", "อ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v65, "อีดอกทอง", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v66, "อีดอก", "อ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v67, "อีกะหรี่", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v68, "อิ่เหี้ย", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v69, "อิ่เชี่ย", "อ*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v70, "อิ่เชรี่ย", "อ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v71, "ห่าราก", "ห*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v72, "หีแตด", "ห****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v73, "หีระเบิด", "ห*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v74, "หีบาน", "ห****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v75, "หี", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v76, "หำ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v77, "หัวควย", "ห*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v78, "หอยรุงรัง", "ห********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v79, "หมาสี้แม่ง", "ห*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v80, "หมอย", "ห***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v81, "หน้าเหี้ย", "ห********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v82, "หน้าเหรี้ย", "ห*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v83, "หน้าเม็ด", "ห*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v84, "หน้าเชี่ย", "ห********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v85, "หน้าเชรี่ย", "ห*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v86, "หน้าหี", "ห*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v87, "หน้าหรี", "ห******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[34],char const(&)[14],0>(v88, "หน้าตัวเมีย", "ห**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[46],char const(&)[18],0>(v89, "หน้าควายตัวเมีย", "ห**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v90, "หงี่", "ห***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v91, "ส้นตีน", "ส*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v92, "สาดเอ๊ย", "ส******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v93, "สาดเอ้ย", "ส******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v94, "สาดหมา", "ส*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v95, "สัส", "ส**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v96, "สันดานไพร่", "ส*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v97, "สันดานหมา", "ส********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[50],char const(&)[20],0>(v98, "สมองหมา ปัญญาควาย", "ส****************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v99, "ยัดแม่", "ย*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v100, "ยักสุเน็ต", "ย********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v101, "มึง", "ม**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v102, "ฟักยู", "ฟ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v103, "พ่อเมิงตาย", "พ*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v104, "พ่อเมิง", "พ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v105, "พ่อมึงตาย", "พ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v106, "พ่อมรึงสิ", "พ********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v107, "พ่อมรึงตาย", "พ*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v108, "พ่องตาย", "พ******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v109, "พ่อง", "พ***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v110, "ปี้", "ป**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v111, "ปิ๊", "ป**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v112, "ตัวเหี้ย", "ต*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v113, "ตัวเชี่ย", "ต*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v114, "ตัวเชรี่ย", "ต********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v115, "ดาก", "ด**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v116, "ชิบหาย", "ช*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(v117, "ชิงหมาเกิด", "ช*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v118, "ชาติหมา", "ช******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(v119, "ชาติชั่ว", "ช*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v120, "จู๋", "จ**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v121, "จันไร", "จ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v122, "จัญไร", "จ****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v123, "คุณตัว", "ค*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v124, "ควยถอก", "ค*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v125, "ควย", "ค**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v126, "ขี้ตีน", "ข*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v127, "ขี้ดากหมา", "ข********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v128, "กู", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v129, "กวย", "ก**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(v130, "กวนส้นตีน", "ก********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(v131, "กระเด้า", "ก******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[13],0>(v132, "กรรมของกู", "ก*********");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_th(void)::sProfanityData_th, (uint64_t)v5, 0x80uLL);
    for (i = 0; i != -768; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v132[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_th(void)::sProfanityData_th, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_th(void)::sProfanityData_th[0], unk_1EF5821C8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF5821C8 - GetProfanityFilter_th(void)::sProfanityData_th[0]) >> 4));
}

void sub_1BFA3DA68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 6096;
  v4 = -6144;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_tr(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v138[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v5, "yavşak", "y****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v6, "yarrak", "y****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v7, "yarak", "y***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "siktir", "s****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "siktin", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "siktim", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v11, "siktikleri", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v12, "siktik", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v13, "siktiğiniz", "s********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v14, "siktiğin", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v15, "siktiğimiz", "s********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v16, "siktiğimin", "s********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v17, "siktiğim", "s******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v18, "siktiği", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v19, "sikti", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "siksin", "s****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v21, "sikiyim", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v22, "sikinin", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "sikini", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "sikine", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v25, "sikin", "s***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "sikimin", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "sikimi", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "sikime", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v29, "sikim", "s***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v30, "sikik", "s***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v31, "siki", "s**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "sikeyim", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "sikersin", "s******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "sikerler", "s******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "sikeriz", "s*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "sikerim", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v37, "siker", "s***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v38, "sike", "s**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v39, "sik", "s*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v40, "sıçtığımın", "s********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(v41, "sıçtığım", "s******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v42, "sıçayım", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v43, "sıçarım", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v44, "sürtük", "s****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v45, "sürtüğü", "s*****ü");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v46, "puştu", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v47, "puştsun", "p*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v48, "puştsan", "p*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v49, "puştluk", "p*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v50, "puşta", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v51, "puşt", "p**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v52, "piçsin", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v53, "piçsen", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v54, "piçlik", "p****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v55, "piçler", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v56, "piçi", "p**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v57, "piçe", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v58, "piç", "p*ç");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v59, "pezevenk", "p******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v60, "orospu evladı", "o***********ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v61, "orospu çocuğu", "o***********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "orospu", "o****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v63, "lavuk", "l***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "kaltak", "k****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v65, "kaltağı", "k*****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v66, "ibne", "i**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v67, "götveren", "g******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v68, "götsen", "g****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v69, "götsem", "g****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v70, "götsün", "g****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v71, "götüne", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[17],0>(v72, "götünden sikeyim", "g**************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(v73, "götünüze", "g******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v74, "götünüzü", "g******ü");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v75, "götünüz", "g*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[15],0>(v76, "götünü sikeyim", "g************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[15],0>(v77, "götünü sikerim", "g************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v78, "götünü", "g****ü");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v79, "göt", "g*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v80, "ebeni sikeyim", "e***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v81, "ebeni sikerim", "e***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v82, "dübüründen", "d********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v83, "boku", "b**u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v84, "bokta", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "boksun", "b****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "boklardan", "b*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v87, "boklarda", "b******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "boklara", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v89, "boklarından", "b*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v90, "boklarında", "b********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v91, "boklarınızı", "b*********ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v92, "boklarının", "b********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v93, "boklarını", "b*******ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v94, "bokların", "b******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v95, "boklarımızda", "b**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v96, "boklarımıza", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[13],0>(v97, "boklarımızın", "b**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v98, "boklarımızı", "b*********ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v99, "boklarımız", "b********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v100, "bokları", "b*****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v101, "boklar", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "bok ye", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v103, "bok", "b*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v104, "bacını sikeyim", "b************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v105, "bacını sikerim", "b************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[17],0>(v106, "avradını sikeyim", "a**************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[17],0>(v107, "avradını sikerim", "a**************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v108, "ananı sikeyim", "a***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v109, "ananı sikerim", "a***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[21],0>(v110, "ananı bacını sikeyim", "b******************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[21],0>(v111, "ananı bacını sikerim", "b******************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[23],0>(v112, "ananı avradını sikeyim", "a********************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[23],0>(v113, "ananı avradını sikerim", "a********************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[16],0>(v114, "ananı avradını", "a************ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v115, "amları", "a****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v116, "amlar", "a***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v117, "amdan", "a***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v118, "amcık", "a***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(v119, "amcığından", "a********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v120, "amcığında", "a*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v121, "amcığına", "a******ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v122, "amcığını", "a******ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v123, "amcığın", "a*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v124, "amcığı", "a****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v125, "amından", "a*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v126, "amında", "a****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v127, "amına koyduğum", "a************m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v128, "amına koyayım", "a***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v129, "amına koyarım", "a***********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v130, "amına", "a***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v131, "amınıza", "a*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v132, "amınızı", "a*****ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v133, "amınız", "a****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v134, "amını", "a***ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v135, "amın", "a**n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v136, "amı", "a*ı");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v137, "am", "a*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[15],0>(v138, "ağzına sıçayım", "a************m");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_tr(void)::sProfanityData_tr, (uint64_t)v5, 0x86uLL);
    for (i = 0; i != -804; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v138[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_tr(void)::sProfanityData_tr, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_tr(void)::sProfanityData_tr[0], unk_1EF5821E8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF5821E8 - GetProfanityFilter_tr(void)::sProfanityData_tr[0]) >> 4));
}

void sub_1BFA3EC6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 6384;
  v4 = -6432;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[23],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3ED04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[19],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3ED54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3EDA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3EDF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[23],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3EE44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3EE94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3EEE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3EF34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3EF84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[20],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3EFD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F024(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F074(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F0C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F114(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F164(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F1B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F204(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F254(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F2A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F2F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F344(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F394(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F3E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F434(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F484(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F4D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F524(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F574(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F5C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F614(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F664(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA3F6B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *GetProfanityFilter_zh_HK(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v152[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(v5, "up乜春", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v6, "on9", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v7, "黑鬼", "黑*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v8, "黐鰈筋", "**筋");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v9, "鳩", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v10, "食撚屎", "食**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v11, "食屎", "食*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v12, "顏射", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v13, "頂你個肺", "****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v14, "雜種", "*種");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v15, "閪頭", "*頭");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v16, "閪", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v17, "躝癱", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v18, "賤精", "*精");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v19, "賤種", "*種");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v20, "賤格", "*格");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v21, "賤", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v22, "豬閪", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v23, "豬兜", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v24, "豬乸", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v25, "西頭", "*頭");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v26, "臭閪", "臭*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v27, "臭西", "臭*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v28, "腳交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v29, "肛交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v30, "粉腸", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v31, "粉皮", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v32, "笨柒", "笨*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v33, "碌柒", "碌*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v34, "白鬼", "白*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v35, "痴鳩線", "**線");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v36, "痴撚線", "**線");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v37, "生仔無屎窟", "生仔***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v38, "生仔無屎忽", "生仔***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v39, "生仔冇屎忽", "生仔***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v40, "玩撚完", "玩*完");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v41, "死柒頭", "**頭");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v42, "條條揈", "**揈");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v43, "柒頭", "*頭");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v44, "晏晝屌你屎忽窿", "晏晝*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v45, "晏晝屌你屎忽", "晏晝****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v46, "晏晝叼你屎忽窿", "晏晝*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v47, "晏晝叼你屎忽", "晏晝****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v48, "是撚旦", "是**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v49, "是尻旦", "是**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v50, "春袋", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v51, "收皮啦", "**啦");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v52, "收皮", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v53, "收皮", "收*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v54, "攪嘢", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v55, "攔坦", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v56, "操你媽", "**媽");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v57, "撲街女", "**女");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v58, "撲街仔", "**仔");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v59, "撲街", "*街");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v60, "撲晒街", "**街");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v61, "撚樣", "*樣");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v62, "撚屌", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v63, "撚嘢", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v64, "撚", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v65, "援交妹", "援*妹");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v66, "援交", "援*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v67, "指交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v68, "把撚", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v69, "扯旗", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v70, "打飛機", "打**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v71, "打靶仔", "**仔");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v72, "打潛艇", "打**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v73, "打柒佢", "**佢");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v74, "打手槍", "打**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v75, "扑嘢", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v76, "戇鳩鳩", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v77, "戇鳩", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v78, "戇膠", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v79, "戇撚鳩", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v80, "戇居", "戇*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v81, "廢柴", "*柴");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v82, "幹你娘", "**娘");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v83, "屎忽鬼", "**鬼");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v84, "屌那星", "**星");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v85, "屌那媽", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v86, "屌柒", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v87, "屌搵你", "**你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v88, "屌屌揈", "**揈");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v89, "屌尻你", "**你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v90, "屌尻", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v91, "屌佢", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v92, "屌你老母閪", "*你***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v93, "屌你老母臭閪", "*你****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v94, "屌你老母", "*你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v95, "屌你老味閪", "*你***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v96, "屌你老味", "*你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v97, "屌你老味", "*你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v98, "屌你", "*你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v99, "屌", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v100, "屄", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v101, "尻", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v102, "射精", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v103, "孤鳩寒", "孤*寒");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v104, "妖", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v105, "好on9", "好**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v106, "好撚柒", "好**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v107, "好撚 oN9", "好****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v108, "好撚", "好*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v109, "大鳩鑊", "大**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v110, "大波", "大*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v111, "大撚鑊", "大*鑊");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v112, "多鳩餘", "多*餘");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v113, "含撚", "含*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v114, "叼那媽", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v115, "叼柒", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v116, "叼搵你", "**你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v117, "叼尻", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v118, "叼叼揈", "**揈");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v119, "叼你老母", "*你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v120, "叼你", "*你");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v121, "叼", "*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v122, "叫鴨", "叫*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v123, "叫雞", "叫*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v124, "口爆", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v125, "口交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v126, "冚家鏟", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v127, "冚家拎", "**拎");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v128, "冚家富貴", "冚家**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v129, "冚家剷", "***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v130, "冚家剷", "**剷");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v131, "八婆", "*婆");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v132, "八公", "*公");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v133, "做咩撚", "做咩*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v134, "做乜撚嘢", "做乜**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v135, "做乜撚", "做乜*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v136, "你鹵味", "你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v137, "你老尾", "你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v138, "你老味", "你**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v139, "你好on9", "你好**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v140, "他媽的", "他*的");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v141, "今朝拮你籮柚", "今朝****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v142, "仆街女", "**女");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v143, "仆街仔", "**仔");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v144, "仆街", "*街");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v145, "仆晒街", "**街");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v146, "仆你個街", "**個*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v147, "仆你個臭街", "**個**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v148, "乸型", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v149, "乳交", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v150, "乜鳩", "乜*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v151, "一樓一", "一*一");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v152, "SM", "**");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_zh_HK(void)::sProfanityData_zh_HK, (uint64_t)v5, 0x94uLL);
    for (i = 0; i != -888; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v152[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_zh_HK(void)::sProfanityData_zh_HK, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_zh_HK(void)::sProfanityData_zh_HK[0], unk_1EF582288, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582288 - GetProfanityFilter_zh_HK(void)::sProfanityData_zh_HK[0]) >> 4));
}

void sub_1BFA40A4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 7056;
  v4 = -7104;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_ar_AE(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[6];
  _QWORD v451[6];
  _QWORD v452[6];
  _QWORD v453[6];
  _QWORD v454[6];
  _QWORD v455[6];
  _QWORD v456[6];
  _QWORD v457[6];
  _QWORD v458[6];
  _QWORD v459[6];
  _QWORD v460[6];
  _QWORD v461[6];
  _QWORD v462[6];
  _QWORD v463[6];
  _QWORD v464[6];
  _QWORD v465[6];
  _QWORD v466[6];
  _QWORD v467[6];
  _QWORD v468[6];
  _QWORD v469[6];
  _QWORD v470[6];
  _QWORD v471[6];
  _QWORD v472[6];
  _QWORD v473[6];
  _QWORD v474[6];
  _QWORD v475[6];
  _QWORD v476[6];
  _QWORD v477[6];
  _QWORD v478[6];
  _QWORD v479[6];
  _QWORD v480[6];
  _QWORD v481[6];
  _QWORD v482[6];
  _QWORD v483[6];
  _QWORD v484[6];
  _QWORD v485[6];
  _QWORD v486[6];
  _QWORD v487[6];
  _QWORD v488[6];
  _QWORD v489[6];
  _QWORD v490[6];
  _QWORD v491[6];
  _QWORD v492[6];
  _QWORD v493[6];
  _QWORD v494[6];
  _QWORD v495[6];
  _QWORD v496[6];
  _QWORD v497[6];
  _QWORD v498[6];
  _QWORD v499[6];
  _QWORD v500[6];
  _QWORD v501[6];
  _QWORD v502[6];
  _QWORD v503[6];
  _QWORD v504[6];
  _QWORD v505[6];
  _QWORD v506[6];
  _QWORD v507[6];
  _QWORD v508[6];
  _QWORD v509[6];
  _QWORD v510[6];
  _QWORD v511[6];
  _QWORD v512[6];
  _QWORD v513[6];
  _QWORD v514[6];
  _QWORD v515[6];
  _QWORD v516[6];
  _QWORD v517[6];
  _QWORD v518[6];
  _QWORD v519[6];
  _QWORD v520[6];
  _QWORD v521[6];
  _QWORD v522[6];
  _QWORD v523[6];
  _QWORD v524[6];
  _QWORD v525[6];
  _QWORD v526[6];
  _QWORD v527[6];
  _QWORD v528[6];
  _QWORD v529[6];
  _QWORD v530[6];
  _QWORD v531[6];
  _QWORD v532[6];
  _QWORD v533[6];
  _QWORD v534[6];
  _QWORD v535[6];
  _QWORD v536[6];
  _QWORD v537[6];
  _QWORD v538[6];
  _QWORD v539[6];
  _QWORD v540[6];
  _QWORD v541[6];
  _QWORD v542[6];
  _QWORD v543[6];
  _QWORD v544[6];
  _QWORD v545[6];
  _QWORD v546[6];
  _QWORD v547[6];
  _QWORD v548[6];
  _QWORD v549[6];
  _QWORD v550[6];
  _QWORD v551[6];
  _QWORD v552[6];
  _QWORD v553[6];
  _QWORD v554[6];
  _QWORD v555[6];
  _QWORD v556[6];
  _QWORD v557[6];
  _QWORD v558[6];
  _QWORD v559[6];
  _QWORD v560[6];
  _QWORD v561[6];
  _QWORD v562[6];
  _QWORD v563[6];
  _QWORD v564[6];
  _QWORD v565[6];
  _QWORD v566[6];
  _QWORD v567[6];
  _QWORD v568[6];
  _QWORD v569[6];
  _QWORD v570[6];
  _QWORD v571[6];
  _QWORD v572[6];
  _QWORD v573[6];
  _QWORD v574[6];
  _QWORD v575[6];
  _QWORD v576[6];
  _QWORD v577[6];
  _QWORD v578[6];
  _QWORD v579[6];
  _QWORD v580[6];
  _QWORD v581[6];
  _QWORD v582[6];
  _QWORD v583[6];
  _QWORD v584[6];
  _QWORD v585[6];
  _QWORD v586[6];
  _QWORD v587[6];
  _QWORD v588[6];
  _QWORD v589[6];
  _QWORD v590[6];
  _QWORD v591[6];
  _QWORD v592[6];
  _QWORD v593[6];
  _QWORD v594[6];
  _QWORD v595[6];
  _QWORD v596[6];
  _QWORD v597[6];
  _QWORD v598[6];
  _QWORD v599[6];
  _QWORD v600[6];
  _QWORD v601[6];
  _QWORD v602[6];
  _QWORD v603[6];
  _QWORD v604[6];
  _QWORD v605[6];
  _QWORD v606[6];
  _QWORD v607[6];
  _QWORD v608[6];
  _QWORD v609[6];
  _QWORD v610[6];
  _QWORD v611[6];
  _QWORD v612[6];
  _QWORD v613[6];
  _QWORD v614[6];
  _QWORD v615[6];
  _QWORD v616[6];
  _QWORD v617[6];
  _QWORD v618[6];
  _QWORD v619[6];
  _QWORD v620[6];
  _QWORD v621[6];
  _QWORD v622[6];
  _QWORD v623[6];
  _QWORD v624[6];
  _QWORD v625[6];
  _QWORD v626[6];
  _QWORD v627[6];
  _QWORD v628[6];
  _QWORD v629[6];
  _QWORD v630[6];
  _QWORD v631[6];
  _QWORD v632[6];
  _QWORD v633[6];
  _QWORD v634[6];
  _QWORD v635[6];
  _QWORD v636[6];
  _QWORD v637[6];
  _QWORD v638[6];
  _QWORD v639[6];
  _QWORD v640[6];
  _QWORD v641[6];
  _QWORD v642[6];
  _QWORD v643[6];
  _QWORD v644[6];
  _QWORD v645[6];
  _QWORD v646[6];
  _QWORD v647[6];
  _QWORD v648[6];
  _QWORD v649[6];
  _QWORD v650[6];
  _QWORD v651[6];
  _QWORD v652[6];
  _QWORD v653[6];
  _QWORD v654[6];
  _QWORD v655[6];
  _QWORD v656[6];
  _QWORD v657[6];
  _QWORD v658[6];
  _QWORD v659[6];
  _QWORD v660[6];
  _QWORD v661[6];
  _QWORD v662[6];
  _QWORD v663[6];
  _QWORD v664[6];
  _QWORD v665[6];
  _QWORD v666[6];
  _QWORD v667[6];
  _QWORD v668[6];
  _QWORD v669[6];
  _QWORD v670[6];
  _QWORD v671[6];
  _QWORD v672[6];
  _QWORD v673[6];
  _QWORD v674[6];
  _QWORD v675[6];
  _QWORD v676[6];
  _QWORD v677[6];
  _QWORD v678[6];
  _QWORD v679[6];
  _QWORD v680[6];
  _QWORD v681[6];
  _QWORD v682[6];
  _QWORD v683[6];
  _QWORD v684[6];
  _QWORD v685[6];
  _QWORD v686[6];
  _QWORD v687[6];
  _QWORD v688[6];
  _QWORD v689[6];
  _QWORD v690[6];
  _QWORD v691[6];
  _QWORD v692[6];
  _QWORD v693[6];
  _QWORD v694[6];
  _QWORD v695[6];
  _QWORD v696[6];
  _QWORD v697[6];
  _QWORD v698[6];
  _QWORD v699[6];
  _QWORD v700[6];
  _QWORD v701[6];
  _QWORD v702[6];
  _QWORD v703[6];
  _QWORD v704[6];
  _QWORD v705[6];
  _QWORD v706[6];
  _QWORD v707[6];
  _QWORD v708[6];
  _QWORD v709[6];
  _QWORD v710[6];
  _QWORD v711[6];
  _QWORD v712[6];
  _QWORD v713[6];
  _QWORD v714[6];
  _QWORD v715[6];
  _QWORD v716[6];
  _QWORD v717[6];
  _QWORD v718[6];
  _QWORD v719[6];
  _QWORD v720[6];
  _QWORD v721[6];
  _QWORD v722[6];
  _QWORD v723[6];
  _QWORD v724[6];
  _QWORD v725[6];
  _QWORD v726[6];
  _QWORD v727[6];
  _QWORD v728[6];
  _QWORD v729[6];
  _QWORD v730[6];
  _QWORD v731[6];
  _QWORD v732[6];
  _QWORD v733[6];
  _QWORD v734[6];
  _QWORD v735[6];
  _QWORD v736[6];
  _QWORD v737[6];
  _QWORD v738[6];
  _QWORD v739[6];
  _QWORD v740[6];
  _QWORD v741[6];
  _QWORD v742[6];
  _QWORD v743[6];
  _QWORD v744[6];
  _QWORD v745[6];
  _QWORD v746[6];
  _QWORD v747[6];
  _QWORD v748[6];
  _QWORD v749[6];
  _QWORD v750[6];
  _QWORD v751[6];
  _QWORD v752[6];
  _QWORD v753[6];
  _QWORD v754[6];
  _QWORD v755[6];
  _QWORD v756[6];
  _QWORD v757[6];
  _QWORD v758[6];
  _QWORD v759[6];
  _QWORD v760[6];
  _QWORD v761[6];
  _QWORD v762[6];
  _QWORD v763[6];
  _QWORD v764[6];
  _QWORD v765[6];
  _QWORD v766[6];
  _QWORD v767[6];
  _QWORD v768[6];
  _QWORD v769[6];
  _QWORD v770[6];
  _QWORD v771[6];
  _QWORD v772[6];
  _QWORD v773[6];
  _QWORD v774[6];
  _QWORD v775[6];
  _QWORD v776[6];
  _QWORD v777[6];
  _QWORD v778[6];
  _QWORD v779[6];
  _QWORD v780[6];
  _QWORD v781[6];
  _QWORD v782[6];
  _QWORD v783[6];
  _QWORD v784[6];
  _QWORD v785[6];
  _QWORD v786[6];
  _QWORD v787[6];
  _QWORD v788[6];
  _QWORD v789[6];
  _QWORD v790[6];
  _QWORD v791[6];
  _QWORD v792[6];
  _QWORD v793[6];
  _QWORD v794[6];
  _QWORD v795[6];
  _QWORD v796[6];
  _QWORD v797[6];
  _QWORD v798[6];
  _QWORD v799[6];
  _QWORD v800[6];
  _QWORD v801[6];
  _QWORD v802[6];
  _QWORD v803[6];
  _QWORD v804[6];
  _QWORD v805[6];
  _QWORD v806[6];
  _QWORD v807[6];
  _QWORD v808[6];
  _QWORD v809[6];
  _QWORD v810[6];
  _QWORD v811[6];
  _QWORD v812[6];
  _QWORD v813[6];
  _QWORD v814[6];
  _QWORD v815[6];
  _QWORD v816[6];
  _QWORD v817[6];
  _QWORD v818[6];
  _QWORD v819[6];
  _QWORD v820[6];
  _QWORD v821[6];
  _QWORD v822[6];
  _QWORD v823[6];
  _QWORD v824[6];
  _QWORD v825[6];
  _QWORD v826[6];
  _QWORD v827[6];
  _QWORD v828[6];
  _QWORD v829[6];
  _QWORD v830[6];
  _QWORD v831[6];
  _QWORD v832[6];
  _QWORD v833[6];
  _QWORD v834[6];
  _QWORD v835[6];
  _QWORD v836[6];
  _QWORD v837[6];
  _QWORD v838[6];
  _QWORD v839[6];
  _QWORD v840[6];
  _QWORD v841[6];
  _QWORD v842[6];
  _QWORD v843[6];
  _QWORD v844[6];
  _QWORD v845[6];
  _QWORD v846[6];
  _QWORD v847[6];
  _QWORD v848[6];
  _QWORD v849[6];
  _QWORD v850[6];
  _QWORD v851[6];
  _QWORD v852[6];
  _QWORD v853[6];
  _QWORD v854[6];
  _QWORD v855[6];
  _QWORD v856[6];
  _QWORD v857[6];
  _QWORD v858[6];
  _QWORD v859[6];
  _QWORD v860[6];
  _QWORD v861[6];
  _QWORD v862[6];
  _QWORD v863[6];
  _QWORD v864[6];
  _QWORD v865[6];
  _QWORD v866[6];
  _QWORD v867[6];
  _QWORD v868[6];
  _QWORD v869[6];
  _QWORD v870[6];
  _QWORD v871[6];
  _QWORD v872[6];
  _QWORD v873[6];
  _QWORD v874[6];
  _QWORD v875[6];
  _QWORD v876[6];
  _QWORD v877[6];
  _QWORD v878[6];
  _QWORD v879[6];
  _QWORD v880[6];
  _QWORD v881[6];
  _QWORD v882[6];
  _QWORD v883[6];
  _QWORD v884[6];
  _QWORD v885[6];
  _QWORD v886[6];
  _QWORD v887[6];
  _QWORD v888[6];
  _QWORD v889[6];
  _QWORD v890[6];
  _QWORD v891[6];
  _QWORD v892[6];
  _QWORD v893[6];
  _QWORD v894[6];
  _QWORD v895[6];
  _QWORD v896[6];
  _QWORD v897[6];
  _QWORD v898[6];
  _QWORD v899[6];
  _QWORD v900[6];
  _QWORD v901[6];
  _QWORD v902[6];
  _QWORD v903[6];
  _QWORD v904[6];
  _QWORD v905[6];
  _QWORD v906[6];
  _QWORD v907[6];
  _QWORD v908[6];
  _QWORD v909[6];
  _QWORD v910[6];
  _QWORD v911[6];
  _QWORD v912[6];
  _QWORD v913[6];
  _QWORD v914[6];
  _QWORD v915[6];
  _QWORD v916[6];
  _QWORD v917[6];
  _QWORD v918[6];
  _QWORD v919[6];
  _QWORD v920[6];
  _QWORD v921[6];
  _QWORD v922[6];
  _QWORD v923[6];
  _QWORD v924[6];
  _QWORD v925[6];
  _QWORD v926[6];
  _QWORD v927[6];
  _QWORD v928[6];
  _QWORD v929[6];
  _QWORD v930[6];
  _QWORD v931[6];
  _QWORD v932[6];
  _QWORD v933[6];
  _QWORD v934[6];
  _QWORD v935[6];
  _QWORD v936[6];
  _QWORD v937[6];
  _QWORD v938[6];
  _QWORD v939[6];
  _QWORD v940[6];
  _QWORD v941[6];
  _QWORD v942[6];
  _QWORD v943[6];
  _QWORD v944[6];
  _QWORD v945[6];
  _QWORD v946[6];
  _QWORD v947[6];
  _QWORD v948[6];
  _QWORD v949[6];
  _QWORD v950[6];
  _QWORD v951[6];
  _QWORD v952[6];
  _QWORD v953[6];
  _QWORD v954[6];
  _QWORD v955[6];
  _QWORD v956[6];
  _QWORD v957[6];
  _QWORD v958[6];
  _QWORD v959[6];
  _QWORD v960[6];
  _QWORD v961[6];
  _QWORD v962[6];
  _QWORD v963[6];
  _QWORD v964[6];
  _QWORD v965[6];
  _QWORD v966[6];
  _QWORD v967[6];
  _QWORD v968[6];
  _QWORD v969[6];
  _QWORD v970[6];
  _QWORD v971[6];
  _QWORD v972[6];
  _QWORD v973[6];
  _QWORD v974[6];
  _QWORD v975[6];
  _QWORD v976[6];
  _QWORD v977[6];
  _QWORD v978[6];
  _QWORD v979[6];
  _QWORD v980[6];
  _QWORD v981[6];
  _QWORD v982[6];
  _QWORD v983[6];
  _QWORD v984[6];
  _QWORD v985[6];
  _QWORD v986[6];
  _QWORD v987[6];
  _QWORD v988[6];
  _QWORD v989[6];
  _QWORD v990[6];
  _QWORD v991[6];
  _QWORD v992[6];
  _QWORD v993[6];
  _QWORD v994[6];
  _QWORD v995[6];
  _QWORD v996[6];
  _QWORD v997[6];
  _QWORD v998[6];
  _QWORD v999[6];
  _QWORD v1000[6];
  _QWORD v1001[6];
  _QWORD v1002[6];
  _QWORD v1003[6];
  _QWORD v1004[6];
  _QWORD v1005[6];
  _QWORD v1006[6];
  _QWORD v1007[6];
  _QWORD v1008[6];
  _QWORD v1009[6];
  _QWORD v1010[6];
  _QWORD v1011[6];
  _QWORD v1012[6];
  _QWORD v1013[6];
  _QWORD v1014[6];
  _QWORD v1015[6];
  _QWORD v1016[6];
  _QWORD v1017[6];
  _QWORD v1018[6];
  _QWORD v1019[6];
  _QWORD v1020[6];
  _QWORD v1021[6];
  _QWORD v1022[6];
  _QWORD v1023[6];
  _QWORD v1024[6];
  _QWORD v1025[6];
  _QWORD v1026[6];
  _QWORD v1027[6];
  _QWORD v1028[6];
  _QWORD v1029[6];
  _QWORD v1030[6];
  _QWORD v1031[6];
  _QWORD v1032[6];
  _QWORD v1033[6];
  _QWORD v1034[6];
  _QWORD v1035[6];
  _QWORD v1036[6];
  _QWORD v1037[6];
  _QWORD v1038[6];
  _QWORD v1039[6];
  _QWORD v1040[6];
  _QWORD v1041[6];
  _QWORD v1042[6];
  _QWORD v1043[6];
  _QWORD v1044[6];
  _QWORD v1045[6];
  _QWORD v1046[6];
  _QWORD v1047[6];
  _QWORD v1048[6];
  _QWORD v1049[6];
  _QWORD v1050[6];
  _QWORD v1051[6];
  _QWORD v1052[6];
  _QWORD v1053[6];
  _QWORD v1054[6];
  _QWORD v1055[6];
  _QWORD v1056[6];
  _QWORD v1057[6];
  _QWORD v1058[6];
  _QWORD v1059[6];
  _QWORD v1060[6];
  _QWORD v1061[6];
  _QWORD v1062[6];
  _QWORD v1063[6];
  _QWORD v1064[6];
  _QWORD v1065[6];
  _QWORD v1066[6];
  _QWORD v1067[6];
  _QWORD v1068[6];
  _QWORD v1069[6];
  _QWORD v1070[6];
  _QWORD v1071[6];
  _QWORD v1072[6];
  _QWORD v1073[6];
  _QWORD v1074[6];
  _QWORD v1075[6];
  _QWORD v1076[6];
  _QWORD v1077[6];
  _QWORD v1078[6];
  _QWORD v1079[6];
  _QWORD v1080[6];
  _QWORD v1081[6];
  _QWORD v1082[6];
  _QWORD v1083[6];
  _QWORD v1084[6];
  _QWORD v1085[6];
  _QWORD v1086[6];
  _QWORD v1087[6];
  _QWORD v1088[6];
  _QWORD v1089[6];
  _QWORD v1090[6];
  _QWORD v1091[6];
  _QWORD v1092[6];
  _QWORD v1093[6];
  _QWORD v1094[6];
  _QWORD v1095[6];
  _QWORD v1096[6];
  _QWORD v1097[6];
  _QWORD v1098[6];
  _QWORD v1099[6];
  _QWORD v1100[6];
  _QWORD v1101[6];
  _QWORD v1102[6];
  _QWORD v1103[6];
  _QWORD v1104[6];
  _QWORD v1105[6];
  _QWORD v1106[6];
  _QWORD v1107[6];
  _QWORD v1108[6];
  _QWORD v1109[6];
  _QWORD v1110[6];
  _QWORD v1111[6];
  _QWORD v1112[6];
  _QWORD v1113[6];
  _QWORD v1114[6];
  _QWORD v1115[6];
  _QWORD v1116[6];
  _QWORD v1117[6];
  _QWORD v1118[6];
  _QWORD v1119[6];
  _QWORD v1120[6];
  _QWORD v1121[6];
  _QWORD v1122[6];
  _QWORD v1123[6];
  _QWORD v1124[6];
  _QWORD v1125[6];
  _QWORD v1126[6];
  _QWORD v1127[6];
  _QWORD v1128[6];
  _QWORD v1129[6];
  _QWORD v1130[6];
  _QWORD v1131[6];
  _QWORD v1132[6];
  _QWORD v1133[6];
  _QWORD v1134[6];
  _QWORD v1135[6];
  _QWORD v1136[6];
  _QWORD v1137[6];
  _QWORD v1138[6];
  _QWORD v1139[6];
  _QWORD v1140[6];
  _QWORD v1141[6];
  _QWORD v1142[6];
  _QWORD v1143[6];
  _QWORD v1144[6];
  _QWORD v1145[6];
  _QWORD v1146[6];
  _QWORD v1147[6];
  _QWORD v1148[6];
  _QWORD v1149[6];
  _QWORD v1150[6];
  _QWORD v1151[6];
  _QWORD v1152[6];
  _QWORD v1153[6];
  _QWORD v1154[6];
  _QWORD v1155[6];
  _QWORD v1156[6];
  _QWORD v1157[6];
  _QWORD v1158[6];
  _QWORD v1159[6];
  _QWORD v1160[6];
  _QWORD v1161[6];
  _QWORD v1162[6];
  _QWORD v1163[6];
  _QWORD v1164[6];
  _QWORD v1165[6];
  _QWORD v1166[6];
  _QWORD v1167[6];
  _QWORD v1168[6];
  _QWORD v1169[6];
  _QWORD v1170[6];
  _QWORD v1171[6];
  _QWORD v1172[6];
  _QWORD v1173[6];
  _QWORD v1174[6];
  _QWORD v1175[6];
  _QWORD v1176[6];
  _QWORD v1177[6];
  _QWORD v1178[6];
  _QWORD v1179[6];
  _QWORD v1180[6];
  _QWORD v1181[6];
  _QWORD v1182[6];
  _QWORD v1183[6];
  _QWORD v1184[6];
  _QWORD v1185[6];
  _QWORD v1186[6];
  _QWORD v1187[6];
  _QWORD v1188[6];
  _QWORD v1189[6];
  _QWORD v1190[6];
  _QWORD v1191[6];
  _QWORD v1192[6];
  _QWORD v1193[6];
  _QWORD v1194[6];
  _QWORD v1195[6];
  _QWORD v1196[6];
  _QWORD v1197[6];
  _QWORD v1198[6];
  _QWORD v1199[6];
  _QWORD v1200[6];
  _QWORD v1201[6];
  _QWORD v1202[6];
  _QWORD v1203[6];
  _QWORD v1204[6];
  _QWORD v1205[6];
  _QWORD v1206[6];
  _QWORD v1207[6];
  _QWORD v1208[6];
  _QWORD v1209[6];
  _QWORD v1210[6];
  _QWORD v1211[6];
  _QWORD v1212[6];
  _QWORD v1213[6];
  _QWORD v1214[6];
  _QWORD v1215[6];
  _QWORD v1216[6];
  _QWORD v1217[6];
  _QWORD v1218[6];
  _QWORD v1219[6];
  _QWORD v1220[6];
  _QWORD v1221[6];
  _QWORD v1222[6];
  _QWORD v1223[6];
  _QWORD v1224[6];
  _QWORD v1225[6];
  _QWORD v1226[6];
  _QWORD v1227[6];
  _QWORD v1228[6];
  _QWORD v1229[6];
  _QWORD v1230[6];
  _QWORD v1231[6];
  _QWORD v1232[6];
  _QWORD v1233[6];
  _QWORD v1234[6];
  _QWORD v1235[6];
  _QWORD v1236[6];
  _QWORD v1237[6];
  _QWORD v1238[6];
  _QWORD v1239[6];
  _QWORD v1240[6];
  _QWORD v1241[6];
  _QWORD v1242[6];
  _QWORD v1243[6];
  _QWORD v1244[6];
  _QWORD v1245[6];
  _QWORD v1246[6];
  _QWORD v1247[6];
  _QWORD v1248[6];
  _QWORD v1249[6];
  _QWORD v1250[6];
  _QWORD v1251[6];
  _QWORD v1252[6];
  _QWORD v1253[6];
  _QWORD v1254[6];
  _QWORD v1255[6];
  _QWORD v1256[6];
  _QWORD v1257[6];
  _QWORD v1258[6];
  _QWORD v1259[6];
  _QWORD v1260[6];
  _QWORD v1261[6];
  _QWORD v1262[6];
  _QWORD v1263[6];
  _QWORD v1264[6];
  _QWORD v1265[6];
  _QWORD v1266[6];
  _QWORD v1267[6];
  _QWORD v1268[6];
  _QWORD v1269[6];
  _QWORD v1270[6];
  _QWORD v1271[6];
  _QWORD v1272[6];
  _QWORD v1273[6];
  _QWORD v1274[6];
  _QWORD v1275[6];
  _QWORD v1276[6];
  _QWORD v1277[6];
  _QWORD v1278[6];
  _QWORD v1279[6];
  _QWORD v1280[6];
  _QWORD v1281[6];
  _QWORD v1282[6];
  _QWORD v1283[6];
  _QWORD v1284[6];
  _QWORD v1285[6];
  _QWORD v1286[6];
  _QWORD v1287[6];
  _QWORD v1288[6];
  _QWORD v1289[6];
  _QWORD v1290[6];
  _QWORD v1291[6];
  _QWORD v1292[6];
  _QWORD v1293[6];
  _QWORD v1294[6];
  _QWORD v1295[6];
  _QWORD v1296[6];
  _QWORD v1297[6];
  _QWORD v1298[6];
  _QWORD v1299[6];
  _QWORD v1300[6];
  _QWORD v1301[6];
  _QWORD v1302[6];
  _QWORD v1303[6];
  _QWORD v1304[6];
  _QWORD v1305[6];
  _QWORD v1306[6];
  _QWORD v1307[6];
  _QWORD v1308[6];
  _QWORD v1309[6];
  _QWORD v1310[6];
  _QWORD v1311[6];
  _QWORD v1312[6];
  _QWORD v1313[6];
  _QWORD v1314[6];
  _QWORD v1315[6];
  _QWORD v1316[6];
  _QWORD v1317[6];
  _QWORD v1318[6];
  _QWORD v1319[6];
  _QWORD v1320[6];
  _QWORD v1321[6];
  _QWORD v1322[6];
  _QWORD v1323[6];
  _QWORD v1324[6];
  _QWORD v1325[6];
  _QWORD v1326[6];
  _QWORD v1327[6];
  _QWORD v1328[6];
  _QWORD v1329[6];
  _QWORD v1330[6];
  _QWORD v1331[6];
  _QWORD v1332[6];
  _QWORD v1333[6];
  _QWORD v1334[6];
  _QWORD v1335[6];
  _QWORD v1336[6];
  _QWORD v1337[6];
  _QWORD v1338[6];
  _QWORD v1339[6];
  _QWORD v1340[6];
  _QWORD v1341[6];
  _QWORD v1342[6];
  _QWORD v1343[6];
  _QWORD v1344[6];
  _QWORD v1345[6];
  _QWORD v1346[6];
  _QWORD v1347[6];
  _QWORD v1348[6];
  _QWORD v1349[6];
  _QWORD v1350[6];
  _QWORD v1351[6];
  _QWORD v1352[6];
  _QWORD v1353[6];
  _QWORD v1354[6];
  _QWORD v1355[6];
  _QWORD v1356[6];
  _QWORD v1357[6];
  _QWORD v1358[6];
  _QWORD v1359[6];
  _QWORD v1360[6];
  _QWORD v1361[6];
  _QWORD v1362[6];
  _QWORD v1363[6];
  _QWORD v1364[6];
  _QWORD v1365[6];
  _QWORD v1366[6];
  _QWORD v1367[6];
  _QWORD v1368[6];
  _QWORD v1369[6];
  _QWORD v1370[6];
  _QWORD v1371[6];
  _QWORD v1372[6];
  _QWORD v1373[6];
  _QWORD v1374[6];
  _QWORD v1375[6];
  _QWORD v1376[6];
  _QWORD v1377[6];
  _QWORD v1378[6];
  _QWORD v1379[6];
  _QWORD v1380[6];
  _QWORD v1381[6];
  _QWORD v1382[6];
  _QWORD v1383[6];
  _QWORD v1384[6];
  _QWORD v1385[6];
  _QWORD v1386[6];
  _QWORD v1387[6];
  _QWORD v1388[6];
  _QWORD v1389[6];
  _QWORD v1390[6];
  _QWORD v1391[6];
  _QWORD v1392[6];
  _QWORD v1393[6];
  _QWORD v1394[6];
  _QWORD v1395[6];
  _QWORD v1396[6];
  _QWORD v1397[6];
  _QWORD v1398[6];
  _QWORD v1399[6];
  _QWORD v1400[6];
  _QWORD v1401[6];
  _QWORD v1402[6];
  _QWORD v1403[6];
  _QWORD v1404[6];
  _QWORD v1405[6];
  _QWORD v1406[6];
  _QWORD v1407[6];
  _QWORD v1408[6];
  _QWORD v1409[6];
  _QWORD v1410[6];
  _QWORD v1411[6];
  _QWORD v1412[6];
  _QWORD v1413[6];
  _QWORD v1414[6];
  _QWORD v1415[6];
  _QWORD v1416[6];
  _QWORD v1417[6];
  _QWORD v1418[6];
  _QWORD v1419[6];
  _QWORD v1420[6];
  _QWORD v1421[6];
  _QWORD v1422[6];
  _QWORD v1423[6];
  _QWORD v1424[6];
  _QWORD v1425[6];
  _QWORD v1426[6];
  _QWORD v1427[6];
  _QWORD v1428[6];
  _QWORD v1429[6];
  _QWORD v1430[6];
  _QWORD v1431[6];
  _QWORD v1432[6];
  _QWORD v1433[6];
  _QWORD v1434[6];
  _QWORD v1435[6];
  _QWORD v1436[6];
  _QWORD v1437[6];
  _QWORD v1438[6];
  _QWORD v1439[6];
  _QWORD v1440[6];
  _QWORD v1441[6];
  _QWORD v1442[6];
  _QWORD v1443[6];
  _QWORD v1444[6];
  _QWORD v1445[6];
  _QWORD v1446[6];
  _QWORD v1447[6];
  _QWORD v1448[6];
  _QWORD v1449[6];
  _QWORD v1450[6];
  _QWORD v1451[6];
  _QWORD v1452[6];
  _QWORD v1453[6];
  _QWORD v1454[6];
  _QWORD v1455[6];
  _QWORD v1456[6];
  _QWORD v1457[6];
  _QWORD v1458[6];
  _QWORD v1459[6];
  _QWORD v1460[6];
  _QWORD v1461[6];
  _QWORD v1462[6];
  _QWORD v1463[6];
  _QWORD v1464[6];
  _QWORD v1465[6];
  _QWORD v1466[6];
  _QWORD v1467[6];
  _QWORD v1468[6];
  _QWORD v1469[6];
  _QWORD v1470[6];
  _QWORD v1471[6];
  _QWORD v1472[6];
  _QWORD v1473[6];
  _QWORD v1474[6];
  _QWORD v1475[6];
  _QWORD v1476[6];
  _QWORD v1477[6];
  _QWORD v1478[6];
  _QWORD v1479[6];
  _QWORD v1480[6];
  _QWORD v1481[6];
  _QWORD v1482[6];
  _QWORD v1483[6];
  _QWORD v1484[6];
  _QWORD v1485[6];
  _QWORD v1486[6];
  _QWORD v1487[6];
  _QWORD v1488[6];
  _QWORD v1489[6];
  _QWORD v1490[6];
  _QWORD v1491[6];
  _QWORD v1492[6];
  _QWORD v1493[6];
  _QWORD v1494[6];
  _QWORD v1495[6];
  _QWORD v1496[6];
  _QWORD v1497[6];
  _QWORD v1498[6];
  _QWORD v1499[6];
  _QWORD v1500[6];
  _QWORD v1501[6];
  _QWORD v1502[6];
  _QWORD v1503[6];
  _QWORD v1504[6];
  _QWORD v1505[6];
  _QWORD v1506[6];
  _QWORD v1507[6];
  _QWORD v1508[6];
  _QWORD v1509[6];
  _QWORD v1510[6];
  _QWORD v1511[6];
  _QWORD v1512[6];
  _QWORD v1513[6];
  _QWORD v1514[6];
  _QWORD v1515[6];
  _QWORD v1516[6];
  _QWORD v1517[6];
  _QWORD v1518[6];
  _QWORD v1519[6];
  _QWORD v1520[6];
  _QWORD v1521[6];
  _QWORD v1522[6];
  _QWORD v1523[6];
  _QWORD v1524[6];
  _QWORD v1525[6];
  _QWORD v1526[6];
  _QWORD v1527[6];
  _QWORD v1528[6];
  _QWORD v1529[6];
  _QWORD v1530[6];
  _QWORD v1531[6];
  _QWORD v1532[6];
  _QWORD v1533[6];
  _QWORD v1534[6];
  _QWORD v1535[6];
  _QWORD v1536[6];
  _QWORD v1537[6];
  _QWORD v1538[6];
  _QWORD v1539[6];
  _QWORD v1540[6];
  _QWORD v1541[6];
  _QWORD v1542[6];
  _QWORD v1543[6];
  _QWORD v1544[6];
  _QWORD v1545[6];
  _QWORD v1546[6];
  _QWORD v1547[6];
  _QWORD v1548[6];
  _QWORD v1549[6];
  _QWORD v1550[6];
  _QWORD v1551[6];
  _QWORD v1552[6];
  _QWORD v1553[6];
  _QWORD v1554[6];
  _QWORD v1555[6];
  _QWORD v1556[6];
  _QWORD v1557[6];
  _QWORD v1558[6];
  _QWORD v1559[6];
  _QWORD v1560[6];
  _QWORD v1561[6];
  _QWORD v1562[6];
  _QWORD v1563[6];
  _QWORD v1564[6];
  _QWORD v1565[6];
  _QWORD v1566[6];
  _QWORD v1567[6];
  _QWORD v1568[6];
  _QWORD v1569[6];
  _QWORD v1570[6];
  _QWORD v1571[6];
  _QWORD v1572[6];
  _QWORD v1573[6];
  _QWORD v1574[6];
  _QWORD v1575[6];
  _QWORD v1576[6];
  _QWORD v1577[6];
  _QWORD v1578[6];
  _QWORD v1579[6];
  _QWORD v1580[6];
  _QWORD v1581[6];
  _QWORD v1582[6];
  _QWORD v1583[6];
  _QWORD v1584[6];
  _QWORD v1585[6];
  _QWORD v1586[6];
  _QWORD v1587[6];
  _QWORD v1588[6];
  _QWORD v1589[6];
  _QWORD v1590[6];
  _QWORD v1591[6];
  _QWORD v1592[6];
  _QWORD v1593[6];
  _QWORD v1594[6];
  _QWORD v1595[6];
  _QWORD v1596[6];
  _QWORD v1597[6];
  _QWORD v1598[6];
  _QWORD v1599[6];
  _QWORD v1600[6];
  _QWORD v1601[6];
  _QWORD v1602[6];
  _QWORD v1603[6];
  _QWORD v1604[6];
  _QWORD v1605[6];
  _QWORD v1606[6];
  _QWORD v1607[6];
  _QWORD v1608[6];
  _QWORD v1609[6];
  _QWORD v1610[6];
  _QWORD v1611[6];
  _QWORD v1612[6];
  _QWORD v1613[6];
  _QWORD v1614[6];
  _QWORD v1615[6];
  _QWORD v1616[6];
  _QWORD v1617[6];
  _QWORD v1618[6];
  _QWORD v1619[6];
  _QWORD v1620[6];
  _QWORD v1621[6];
  _QWORD v1622[6];
  _QWORD v1623[6];
  _QWORD v1624[6];
  _QWORD v1625[6];
  _QWORD v1626[6];
  _QWORD v1627[6];
  _QWORD v1628[6];
  _QWORD v1629[6];
  _QWORD v1630[6];
  _QWORD v1631[6];
  _QWORD v1632[6];
  _QWORD v1633[6];
  _QWORD v1634[6];
  _QWORD v1635[6];
  _QWORD v1636[6];
  _QWORD v1637[6];
  _QWORD v1638[6];
  _QWORD v1639[6];
  _QWORD v1640[6];
  _QWORD v1641[6];
  _QWORD v1642[6];
  _QWORD v1643[6];
  _QWORD v1644[6];
  _QWORD v1645[6];
  _QWORD v1646[6];
  _QWORD v1647[6];
  _QWORD v1648[6];
  _QWORD v1649[6];
  _QWORD v1650[6];
  _QWORD v1651[6];
  _QWORD v1652[6];
  _QWORD v1653[6];
  _QWORD v1654[6];
  _QWORD v1655[6];
  _QWORD v1656[6];
  _QWORD v1657[6];
  _QWORD v1658[6];
  _QWORD v1659[6];
  _QWORD v1660[6];
  _QWORD v1661[6];
  _QWORD v1662[6];
  _QWORD v1663[6];
  _QWORD v1664[6];
  _QWORD v1665[6];
  _QWORD v1666[6];
  _QWORD v1667[6];
  _QWORD v1668[6];
  _QWORD v1669[6];
  _QWORD v1670[6];
  _QWORD v1671[6];
  _QWORD v1672[6];
  _QWORD v1673[6];
  _QWORD v1674[6];
  _QWORD v1675[6];
  _QWORD v1676[6];
  _QWORD v1677[6];
  _QWORD v1678[6];
  _QWORD v1679[6];
  _QWORD v1680[6];
  _QWORD v1681[6];
  _QWORD v1682[6];
  _QWORD v1683[6];
  _QWORD v1684[6];
  _QWORD v1685[6];
  _QWORD v1686[6];
  _QWORD v1687[6];
  _QWORD v1688[6];
  _QWORD v1689[6];
  _QWORD v1690[6];
  _QWORD v1691[6];
  _QWORD v1692[6];
  _QWORD v1693[6];
  _QWORD v1694[6];
  _QWORD v1695[6];
  _QWORD v1696[6];
  _QWORD v1697[6];
  _QWORD v1698[6];
  _QWORD v1699[6];
  _QWORD v1700[6];
  _QWORD v1701[6];
  _QWORD v1702[6];
  _QWORD v1703[6];
  _QWORD v1704[6];
  _QWORD v1705[6];
  _QWORD v1706[6];
  _QWORD v1707[6];
  _QWORD v1708[6];
  _QWORD v1709[6];
  _QWORD v1710[6];
  _QWORD v1711[6];
  _QWORD v1712[6];
  _QWORD v1713[6];
  _QWORD v1714[6];
  _QWORD v1715[6];
  _QWORD v1716[6];
  _QWORD v1717[6];
  _QWORD v1718[6];
  _QWORD v1719[6];
  _QWORD v1720[6];
  _QWORD v1721[6];
  _QWORD v1722[6];
  _QWORD v1723[6];
  _QWORD v1724[6];
  _QWORD v1725[6];
  _QWORD v1726[6];
  _QWORD v1727[6];
  _QWORD v1728[6];
  _QWORD v1729[6];
  _QWORD v1730[6];
  _QWORD v1731[6];
  _QWORD v1732[6];
  _QWORD v1733[6];
  _QWORD v1734[6];
  _QWORD v1735[6];
  _QWORD v1736[6];
  _QWORD v1737[6];
  _QWORD v1738[6];
  _QWORD v1739[6];
  _QWORD v1740[6];
  _QWORD v1741[6];
  _QWORD v1742[6];
  _QWORD v1743[6];
  _QWORD v1744[6];
  _QWORD v1745[6];
  _QWORD v1746[6];
  _QWORD v1747[6];
  _QWORD v1748[6];
  _QWORD v1749[6];
  _QWORD v1750[6];
  _QWORD v1751[6];
  _QWORD v1752[6];
  _QWORD v1753[6];
  _QWORD v1754[6];
  _QWORD v1755[6];
  _QWORD v1756[6];
  _QWORD v1757[6];
  _QWORD v1758[6];
  _QWORD v1759[6];
  _QWORD v1760[6];
  _QWORD v1761[6];
  _QWORD v1762[6];
  _QWORD v1763[6];
  _QWORD v1764[6];
  _QWORD v1765[6];
  _QWORD v1766[6];
  _QWORD v1767[6];
  _QWORD v1768[6];
  _QWORD v1769[6];
  _QWORD v1770[6];
  _QWORD v1771[6];
  _QWORD v1772[6];
  _QWORD v1773[6];
  _QWORD v1774[6];
  _QWORD v1775[6];
  _QWORD v1776[6];
  _QWORD v1777[6];
  _QWORD v1778[6];
  _QWORD v1779[6];
  _QWORD v1780[6];
  _QWORD v1781[6];
  _QWORD v1782[6];
  _QWORD v1783[6];
  _QWORD v1784[6];
  _QWORD v1785[6];
  _QWORD v1786[6];
  _QWORD v1787[6];
  _QWORD v1788[6];
  _QWORD v1789[6];
  _QWORD v1790[6];
  _QWORD v1791[6];
  _QWORD v1792[6];
  _QWORD v1793[6];
  _QWORD v1794[6];
  _QWORD v1795[6];
  _QWORD v1796[6];
  _QWORD v1797[6];
  _QWORD v1798[6];
  _QWORD v1799[6];
  _QWORD v1800[6];
  _QWORD v1801[6];
  _QWORD v1802[6];
  _QWORD v1803[6];
  _QWORD v1804[6];
  _QWORD v1805[6];
  _QWORD v1806[6];
  _QWORD v1807[6];
  _QWORD v1808[6];
  _QWORD v1809[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v1809[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v5, "\u200Fينتاك", "ي***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v6, "\u200Fوللكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v7, "\u200Fوللكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v8, "\u200Fوللكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v9, "\u200Fوللشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v10, "\u200Fوللشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v11, "\u200Fوللزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v12, "\u200Fوللزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v13, "\u200Fوللزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v14, "\u200Fوللخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v15, "\u200Fوللخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v16, "\u200Fولكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v17, "\u200Fولكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v18, "\u200Fولكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v19, "\u200Fولكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v20, "\u200Fولكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v21, "\u200Fولكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v22, "\u200Fولكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v23, "\u200Fولكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v24, "\u200Fولكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v25, "\u200Fولكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v26, "\u200Fولكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v27, "\u200Fولكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v28, "\u200Fولكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v29, "\u200Fولكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v30, "\u200Fولكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v31, "\u200Fولكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v32, "\u200Fولكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v33, "\u200Fولكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v34, "\u200Fولكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v35, "\u200Fولكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v36, "\u200Fولكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v37, "\u200Fولكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v38, "\u200Fولكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v39, "\u200Fولكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v40, "\u200Fولكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v41, "\u200Fولكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v42, "\u200Fولكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v43, "\u200Fولكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v44, "\u200Fولكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v45, "\u200Fولكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v46, "\u200Fولشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v47, "\u200Fولشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v48, "\u200Fولشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v49, "\u200Fولشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v50, "\u200Fولشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v51, "\u200Fولشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v52, "\u200Fولشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v53, "\u200Fولشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v54, "\u200Fولشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v55, "\u200Fولشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v56, "\u200Fولشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v57, "\u200Fولشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v58, "\u200Fولشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v59, "\u200Fولشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v60, "\u200Fولشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v61, "\u200Fولشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v62, "\u200Fولشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v63, "\u200Fولشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v64, "\u200Fولشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v65, "\u200Fولشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v66, "\u200Fولزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v67, "\u200Fولزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v68, "\u200Fولزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v69, "\u200Fولزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v70, "\u200Fولزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v71, "\u200Fولزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v72, "\u200Fولزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v73, "\u200Fولزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v74, "\u200Fولزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v75, "\u200Fولزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v76, "\u200Fولزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v77, "\u200Fولزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v78, "\u200Fولزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v79, "\u200Fولزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v80, "\u200Fولزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v81, "\u200Fولزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v82, "\u200Fولزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v83, "\u200Fولزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v84, "\u200Fولزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v85, "\u200Fولزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v86, "\u200Fولزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v87, "\u200Fولزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v88, "\u200Fولزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v89, "\u200Fولزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v90, "\u200Fولزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v91, "\u200Fولزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v92, "\u200Fولزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v93, "\u200Fولزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v94, "\u200Fولزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v95, "\u200Fولزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v96, "\u200Fولخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v97, "\u200Fولخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v98, "\u200Fولخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v99, "\u200Fولخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v100, "\u200Fولخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v101, "\u200Fولخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v102, "\u200Fولخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v103, "\u200Fولخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v104, "\u200Fولخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v105, "\u200Fولخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v106, "\u200Fولخرتي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v107, "\u200Fولخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v108, "\u200Fولخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v109, "\u200Fولخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v110, "\u200Fولخرته", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v111, "\u200Fولخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v112, "\u200Fولخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v113, "\u200Fولخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v114, "\u200Fولخرتك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v115, "\u200Fولخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v116, "\u200Fوككسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v117, "\u200Fوككسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v118, "\u200Fوككسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v119, "\u200Fوككسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v120, "\u200Fوككسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v121, "\u200Fوككسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v122, "\u200Fوككسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v123, "\u200Fوككسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v124, "\u200Fوككسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v125, "\u200Fوككسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v126, "\u200Fوككسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v127, "\u200Fوككسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v128, "\u200Fوككسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v129, "\u200Fوككسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v130, "\u200Fوككسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v131, "\u200Fوككسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v132, "\u200Fوككسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v133, "\u200Fوككسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v134, "\u200Fوككسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v135, "\u200Fوككساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v136, "\u200Fوككساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v137, "\u200Fوككساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v138, "\u200Fوككساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v139, "\u200Fوككساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v140, "\u200Fوككساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v141, "\u200Fوككساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v142, "\u200Fوككساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v143, "\u200Fوككساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v144, "\u200Fوككساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v145, "\u200Fوككس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v146, "\u200Fوكشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v147, "\u200Fوكشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v148, "\u200Fوكشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v149, "\u200Fوكشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v150, "\u200Fوكشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v151, "\u200Fوكشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v152, "\u200Fوكشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v153, "\u200Fوكشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v154, "\u200Fوكشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v155, "\u200Fوكشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v156, "\u200Fوكشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v157, "\u200Fوكشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v158, "\u200Fوكشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v159, "\u200Fوكشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v160, "\u200Fوكشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v161, "\u200Fوكشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v162, "\u200Fوكشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v163, "\u200Fوكشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v164, "\u200Fوكشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v165, "\u200Fوكشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v166, "\u200Fوكسي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v167, "\u200Fوكسهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v168, "\u200Fوكسهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v169, "\u200Fوكسها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v170, "\u200Fوكسه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v171, "\u200Fوكسنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v172, "\u200Fوكسكوسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v173, "\u200Fوكسكوسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v174, "\u200Fوكسكوسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v175, "\u200Fوكسكوسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v176, "\u200Fوكسكوسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v177, "\u200Fوكسكوسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v178, "\u200Fوكسكوسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v179, "\u200Fوكسكوسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v180, "\u200Fوكسكوسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v181, "\u200Fوكسكوس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v182, "\u200Fوكسكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v183, "\u200Fوكسكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v184, "\u200Fوكسك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v185, "\u200Fوكساسي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v186, "\u200Fوكساسهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v187, "\u200Fوكساسهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v188, "\u200Fوكساسها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v189, "\u200Fوكساسه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v190, "\u200Fوكساسنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v191, "\u200Fوكساسكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v192, "\u200Fوكساسكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v193, "\u200Fوكساسك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v194, "\u200Fوكساس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v195, "\u200Fوكس", "و*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v196, "\u200Fوكزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v197, "\u200Fوكزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v198, "\u200Fوكزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v199, "\u200Fوكزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v200, "\u200Fوكزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v201, "\u200Fوكزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v202, "\u200Fوكزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v203, "\u200Fوكزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v204, "\u200Fوكزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v205, "\u200Fوكزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v206, "\u200Fوكزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v207, "\u200Fوكزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v208, "\u200Fوكزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v209, "\u200Fوكزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v210, "\u200Fوكزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v211, "\u200Fوكزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v212, "\u200Fوكزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v213, "\u200Fوكزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v214, "\u200Fوكزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v215, "\u200Fوكزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v216, "\u200Fوكزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v217, "\u200Fوكزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v218, "\u200Fوكزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v219, "\u200Fوكزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v220, "\u200Fوكزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v221, "\u200Fوكزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v222, "\u200Fوكزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v223, "\u200Fوكزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v224, "\u200Fوكزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v225, "\u200Fوكزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v226, "\u200Fوكخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v227, "\u200Fوكخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v228, "\u200Fوكخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v229, "\u200Fوكخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v230, "\u200Fوكخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v231, "\u200Fوكخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v232, "\u200Fوكخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v233, "\u200Fوكخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v234, "\u200Fوكخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v235, "\u200Fوكخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v236, "\u200Fوكخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v237, "\u200Fوكخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v238, "\u200Fوكخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v239, "\u200Fوكخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v240, "\u200Fوكخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v241, "\u200Fوكخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v242, "\u200Fوكخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v243, "\u200Fوكالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v244, "\u200Fوكالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v245, "\u200Fوكالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v246, "\u200Fوكالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v247, "\u200Fوكالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v248, "\u200Fوكالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v249, "\u200Fوكالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v250, "\u200Fوكالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v251, "\u200Fوكالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v252, "\u200Fوكالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v253, "\u200Fوشرموطتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v254, "\u200Fوشرموطتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v255, "\u200Fوشرموطتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v256, "\u200Fوشرموطتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v257, "\u200Fوشرموطته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v258, "\u200Fوشرموطتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v259, "\u200Fوشرموطتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v260, "\u200Fوشرموطتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v261, "\u200Fوشرموطتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v262, "\u200Fوشرموطة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v263, "\u200Fوشرموطاتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v264, "\u200Fوشرموطاتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v265, "\u200Fوشرموطاتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v266, "\u200Fوشرموطاتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v267, "\u200Fوشرموطاته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v268, "\u200Fوشرموطاتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v269, "\u200Fوشرموطاتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v270, "\u200Fوشرموطاتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v271, "\u200Fوشرموطاتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v272, "\u200Fوشرموطات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v273, "\u200Fوزوبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v274, "\u200Fوزوبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v275, "\u200Fوزوبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v276, "\u200Fوزوبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v277, "\u200Fوزوبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v278, "\u200Fوزوبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v279, "\u200Fوزوبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v280, "\u200Fوزوبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v281, "\u200Fوزوبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v282, "\u200Fوزوب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v283, "\u200Fوزبي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v284, "\u200Fوزبهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v285, "\u200Fوزبهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v286, "\u200Fوزبها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v287, "\u200Fوزبه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v288, "\u200Fوزبنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v289, "\u200Fوزبكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v290, "\u200Fوزبكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v291, "\u200Fوزبك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v292, "\u200Fوزبابي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v293, "\u200Fوزبابهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v294, "\u200Fوزبابهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v295, "\u200Fوزبابها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v296, "\u200Fوزبابه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v297, "\u200Fوزبابنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v298, "\u200Fوزبابكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v299, "\u200Fوزبابكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v300, "\u200Fوزبابك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v301, "\u200Fوزباب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v302, "\u200Fوزب", "و*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v303, "\u200Fوخرواتي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v304, "\u200Fوخرواتهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v305, "\u200Fوخرواتهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v306, "\u200Fوخرواتها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v307, "\u200Fوخرواته", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v308, "\u200Fوخرواتنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v309, "\u200Fوخرواتكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v310, "\u200Fوخرواتكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v311, "\u200Fوخرواتك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v312, "\u200Fوخروات", "و****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v313, "\u200Fوخرتي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v314, "\u200Fوخرته", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v315, "\u200Fوخرتك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v316, "\u200Fوخرة", "و**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v317, "\u200Fوبكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v318, "\u200Fوبكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v319, "\u200Fوبكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v320, "\u200Fوبكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v321, "\u200Fوبكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v322, "\u200Fوبكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v323, "\u200Fوبكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v324, "\u200Fوبكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v325, "\u200Fوبكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v326, "\u200Fوبكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v327, "\u200Fوبكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v328, "\u200Fوبكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v329, "\u200Fوبكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v330, "\u200Fوبكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v331, "\u200Fوبكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v332, "\u200Fوبكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v333, "\u200Fوبكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v334, "\u200Fوبكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v335, "\u200Fوبكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v336, "\u200Fوبكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v337, "\u200Fوبكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v338, "\u200Fوبكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v339, "\u200Fوبكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v340, "\u200Fوبكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v341, "\u200Fوبكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v342, "\u200Fوبكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v343, "\u200Fوبكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v344, "\u200Fوبكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v345, "\u200Fوبكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v346, "\u200Fوبكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v347, "\u200Fوبشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v348, "\u200Fوبشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v349, "\u200Fوبشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v350, "\u200Fوبشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v351, "\u200Fوبشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v352, "\u200Fوبشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v353, "\u200Fوبشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v354, "\u200Fوبشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v355, "\u200Fوبشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v356, "\u200Fوبشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v357, "\u200Fوبشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v358, "\u200Fوبشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v359, "\u200Fوبشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v360, "\u200Fوبشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v361, "\u200Fوبشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v362, "\u200Fوبشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v363, "\u200Fوبشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v364, "\u200Fوبشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v365, "\u200Fوبشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v366, "\u200Fوبشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v367, "\u200Fوبزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v368, "\u200Fوبزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v369, "\u200Fوبزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v370, "\u200Fوبزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v371, "\u200Fوبزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v372, "\u200Fوبزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v373, "\u200Fوبزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v374, "\u200Fوبزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v375, "\u200Fوبزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v376, "\u200Fوبزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v377, "\u200Fوبزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v378, "\u200Fوبزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v379, "\u200Fوبزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v380, "\u200Fوبزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v381, "\u200Fوبزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v382, "\u200Fوبزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v383, "\u200Fوبزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v384, "\u200Fوبزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v385, "\u200Fوبزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v386, "\u200Fوبزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v387, "\u200Fوبزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v388, "\u200Fوبزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v389, "\u200Fوبزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v390, "\u200Fوبزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v391, "\u200Fوبزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v392, "\u200Fوبزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v393, "\u200Fوبزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v394, "\u200Fوبزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v395, "\u200Fوبزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v396, "\u200Fوبزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v397, "\u200Fوبخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v398, "\u200Fوبخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v399, "\u200Fوبخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v400, "\u200Fوبخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v401, "\u200Fوبخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v402, "\u200Fوبخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v403, "\u200Fوبخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v404, "\u200Fوبخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v405, "\u200Fوبخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v406, "\u200Fوبخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v407, "\u200Fوبخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v408, "\u200Fوبخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v409, "\u200Fوبالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v410, "\u200Fوبالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v411, "\u200Fوبالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v412, "\u200Fوبالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(v413, "\u200Fوبالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v414, "\u200Fوبالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v415, "\u200Fوبالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v416, "\u200Fوبالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v417, "\u200Fوبالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v418, "\u200Fوبالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v419, "\u200Fوالكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v420, "\u200Fوالكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v421, "\u200Fوالكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v422, "\u200Fوالشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v423, "\u200Fوالشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v424, "\u200Fوالزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v425, "\u200Fوالزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v426, "\u200Fوالزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v427, "\u200Fوالخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v428, "\u200Fوالخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v429, "\u200Fنيكيني", "ن****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v430, "\u200Fنيكني", "ن***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v431, "\u200Fنيك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v432, "\u200Fنياكة", "ن***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v433, "\u200Fللكسكوس", "ل*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v434, "\u200Fللكساس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v435, "\u200Fللكس", "ل**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v436, "\u200Fللشرموطة", "ل******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v437, "\u200Fللشرموطات", "ل*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v438, "\u200Fللزوب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v439, "\u200Fللزباب", "ل****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v440, "\u200Fللزب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v441, "\u200Fللخروات", "ل*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v442, "\u200Fللخرة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v443, "\u200Fلكسي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v444, "\u200Fلكسهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v445, "\u200Fلكسهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v446, "\u200Fلكسها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v447, "\u200Fلكسه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v448, "\u200Fلكسنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v449, "\u200Fلكسكوسي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v450, "\u200Fلكسكوسهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v451, "\u200Fلكسكوسهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v452, "\u200Fلكسكوسها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v453, "\u200Fلكسكوسه", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v454, "\u200Fلكسكوسنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v455, "\u200Fلكسكوسكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v456, "\u200Fلكسكوسكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v457, "\u200Fلكسكوسك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v458, "\u200Fلكسكوس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v459, "\u200Fلكسكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v460, "\u200Fلكسكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v461, "\u200Fلكسك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v462, "\u200Fلكساسي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v463, "\u200Fلكساسهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v464, "\u200Fلكساسهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v465, "\u200Fلكساسها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v466, "\u200Fلكساسه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v467, "\u200Fلكساسنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v468, "\u200Fلكساسكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v469, "\u200Fلكساسكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v470, "\u200Fلكساسك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v471, "\u200Fلكساس", "ل***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v472, "\u200Fلكس", "ل*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v473, "\u200Fلشرموطتي", "ل******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v474, "\u200Fلشرموطتهن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v475, "\u200Fلشرموطتهم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v476, "\u200Fلشرموطتها", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v477, "\u200Fلشرموطته", "ل******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v478, "\u200Fلشرموطتنا", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v479, "\u200Fلشرموطتكن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v480, "\u200Fلشرموطتكم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v481, "\u200Fلشرموطتك", "ل******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v482, "\u200Fلشرموطة", "ل*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v483, "\u200Fلشرموطاتي", "ل*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v484, "\u200Fلشرموطاتهن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v485, "\u200Fلشرموطاتهم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v486, "\u200Fلشرموطاتها", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v487, "\u200Fلشرموطاته", "ل*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v488, "\u200Fلشرموطاتنا", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v489, "\u200Fلشرموطاتكن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v490, "\u200Fلشرموطاتكم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v491, "\u200Fلشرموطاتك", "ل*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v492, "\u200Fلشرموطات", "ل******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v493, "\u200Fلزوبي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v494, "\u200Fلزوبهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v495, "\u200Fلزوبهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v496, "\u200Fلزوبها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v497, "\u200Fلزوبه", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v498, "\u200Fلزوبنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v499, "\u200Fلزوبكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v500, "\u200Fلزوبكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v501, "\u200Fلزوبك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v502, "\u200Fلزوب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v503, "\u200Fلزبي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v504, "\u200Fلزبهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v505, "\u200Fلزبهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v506, "\u200Fلزبها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v507, "\u200Fلزبه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v508, "\u200Fلزبنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v509, "\u200Fلزبكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v510, "\u200Fلزبكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v511, "\u200Fلزبك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v512, "\u200Fلزبابي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v513, "\u200Fلزبابهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v514, "\u200Fلزبابهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v515, "\u200Fلزبابها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v516, "\u200Fلزبابه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v517, "\u200Fلزبابنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v518, "\u200Fلزبابكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v519, "\u200Fلزبابكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v520, "\u200Fلزبابك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v521, "\u200Fلزباب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v522, "\u200Fلزب", "ل*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v523, "\u200Fلخرواتي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v524, "\u200Fلخرواتهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v525, "\u200Fلخرواتهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v526, "\u200Fلخرواتها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v527, "\u200Fلخرواته", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v528, "\u200Fلخرواتنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v529, "\u200Fلخرواتكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v530, "\u200Fلخرواتكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v531, "\u200Fلخرواتك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v532, "\u200Fلخروات", "ل****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v533, "\u200Fلخرتي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v534, "\u200Fلخرتهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v535, "\u200Fلخرتهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v536, "\u200Fلخرتها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v537, "\u200Fلخرته", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v538, "\u200Fلخرتنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v539, "\u200Fلخرتكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v540, "\u200Fلخرتكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v541, "\u200Fلخرتك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v542, "\u200Fلخرة", "ل**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v543, "\u200Fككسي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v544, "\u200Fككسهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v545, "\u200Fككسهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v546, "\u200Fككسها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v547, "\u200Fككسه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v548, "\u200Fككسنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v549, "\u200Fككسكوسي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v550, "\u200Fككسكوسهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v551, "\u200Fككسكوسهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v552, "\u200Fككسكوسها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v553, "\u200Fككسكوسه", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v554, "\u200Fككسكوسنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v555, "\u200Fككسكوسكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v556, "\u200Fككسكوسكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v557, "\u200Fككسكوسك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v558, "\u200Fككسكوس", "ك****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v559, "\u200Fككسكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v560, "\u200Fككسكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v561, "\u200Fككسك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v562, "\u200Fككساسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v563, "\u200Fككساسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v564, "\u200Fككساسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v565, "\u200Fككساسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v566, "\u200Fككساسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v567, "\u200Fككساسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v568, "\u200Fككساسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v569, "\u200Fككساسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v570, "\u200Fككساسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v571, "\u200Fككساس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v572, "\u200Fككس", "ك*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v573, "\u200Fكشرموطتي", "ك******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v574, "\u200Fكشرموطتهن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v575, "\u200Fكشرموطتهم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v576, "\u200Fكشرموطتها", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v577, "\u200Fكشرموطته", "ك******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v578, "\u200Fكشرموطتنا", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v579, "\u200Fكشرموطتكن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v580, "\u200Fكشرموطتكم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v581, "\u200Fكشرموطتك", "ك******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v582, "\u200Fكشرموطة", "ك*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v583, "\u200Fكشرموطاتي", "ك*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v584, "\u200Fكشرموطاتهن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v585, "\u200Fكشرموطاتهم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v586, "\u200Fكشرموطاتها", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v587, "\u200Fكشرموطاته", "ك*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v588, "\u200Fكشرموطاتنا", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v589, "\u200Fكشرموطاتكن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v590, "\u200Fكشرموطاتكم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v591, "\u200Fكشرموطاتك", "ك*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v592, "\u200Fكشرموطات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v593, "\u200Fكسي", "ك*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v594, "\u200Fكسهن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v595, "\u200Fكسهم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v596, "\u200Fكسها", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v597, "\u200Fكسه", "ك*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v598, "\u200Fكسنا", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v599, "\u200Fكسكوسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v600, "\u200Fكسكوسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v601, "\u200Fكسكوسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v602, "\u200Fكسكوسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v603, "\u200Fكسكوسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v604, "\u200Fكسكوسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v605, "\u200Fكسكوسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v606, "\u200Fكسكوسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v607, "\u200Fكسكوسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v608, "\u200Fكسكوس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v609, "\u200Fكسكن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v610, "\u200Fكسكم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v611, "\u200Fكسك", "ك*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v612, "\u200Fكساسي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v613, "\u200Fكساسهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v614, "\u200Fكساسهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v615, "\u200Fكساسها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v616, "\u200Fكساسه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v617, "\u200Fكساسنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v618, "\u200Fكساسكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v619, "\u200Fكساسكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v620, "\u200Fكساسك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v621, "\u200Fكساس", "ك**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v622, "\u200Fكس", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v623, "\u200Fكزوبي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v624, "\u200Fكزوبهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v625, "\u200Fكزوبهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v626, "\u200Fكزوبها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v627, "\u200Fكزوبه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v628, "\u200Fكزوبنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v629, "\u200Fكزوبكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v630, "\u200Fكزوبكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v631, "\u200Fكزوبك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v632, "\u200Fكزوب", "ك**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v633, "\u200Fكزبي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v634, "\u200Fكزبهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v635, "\u200Fكزبهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v636, "\u200Fكزبها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v637, "\u200Fكزبه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v638, "\u200Fكزبنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v639, "\u200Fكزبكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v640, "\u200Fكزبكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v641, "\u200Fكزبك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v642, "\u200Fكزبابي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v643, "\u200Fكزبابهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v644, "\u200Fكزبابهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v645, "\u200Fكزبابها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v646, "\u200Fكزبابه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v647, "\u200Fكزبابنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v648, "\u200Fكزبابكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v649, "\u200Fكزبابكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v650, "\u200Fكزبابك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v651, "\u200Fكزباب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v652, "\u200Fكزب", "ك*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v653, "\u200Fكخرواتي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v654, "\u200Fكخرواتهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v655, "\u200Fكخرواتهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v656, "\u200Fكخرواتها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v657, "\u200Fكخرواته", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v658, "\u200Fكخرواتنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v659, "\u200Fكخرواتكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v660, "\u200Fكخرواتكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v661, "\u200Fكخرواتك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v662, "\u200Fكخروات", "ك****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v663, "\u200Fكخرتي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v664, "\u200Fكخرتهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v665, "\u200Fكخرتهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v666, "\u200Fكخرتها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v667, "\u200Fكخرته", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v668, "\u200Fكخرتنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v669, "\u200Fكخرتكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v670, "\u200Fكخرتكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v671, "\u200Fكخرتك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v672, "\u200Fكخرة", "ك**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v673, "\u200Fكالكسكوس", "ك******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v674, "\u200Fكالكساس", "ك*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v675, "\u200Fكالكس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v676, "\u200Fكالشرموطة", "ك*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v677, "\u200Fكالشرموطات", "ك********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v678, "\u200Fكالزوب", "ك****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v679, "\u200Fكالزباب", "ك*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v680, "\u200Fكالزب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v681, "\u200Fكالخروات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v682, "\u200Fكالخرة", "ك****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v683, "\u200Fقحبه", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v684, "\u200Fقحبة", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v685, "\u200Fقحبات", "ق***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v686, "\u200Fعرصه", "ع**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v687, "\u200Fعرصة", "ع**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v688, "\u200Fعرصات", "ع***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v689, "\u200Fعرص", "ع*ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v690, "\u200Fشلكه", "ش**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v691, "\u200Fشلكة", "ش**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v692, "\u200Fشلكات", "ش***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v693, "\u200Fشرموطه", "ش****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v694, "\u200Fشرموطتي", "ش*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v695, "\u200Fشرموطتهن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v696, "\u200Fشرموطتهم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v697, "\u200Fشرموطتها", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v698, "\u200Fشرموطته", "ش*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v699, "\u200Fشرموطتنا", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v700, "\u200Fشرموطتكن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v701, "\u200Fشرموطتكم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v702, "\u200Fشرموطتك", "ش*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v703, "\u200Fشرموطة", "ش****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v704, "\u200Fشرموطاتي", "ش******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v705, "\u200Fشرموطاتهن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v706, "\u200Fشرموطاتهم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v707, "\u200Fشرموطاتها", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v708, "\u200Fشرموطاته", "ش******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v709, "\u200Fشرموطاتنا", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v710, "\u200Fشرموطاتكن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v711, "\u200Fشرموطاتكم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v712, "\u200Fشرموطاتك", "ش******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v713, "\u200Fشرموطات", "ش*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v714, "\u200Fشرموط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v715, "\u200Fشرجي", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v716, "\u200Fشراميط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v717, "\u200Fشخيتي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v718, "\u200Fشخيت", "ش**ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v719, "\u200Fشخي", "ش*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v720, "\u200Fشخاخي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v721, "\u200Fشخاختي", "ش****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v722, "\u200Fشخاخ", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v723, "\u200Fشخ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v724, "\u200Fزوبي", "ز**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v725, "\u200Fزوبهن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v726, "\u200Fزوبهم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v727, "\u200Fزوبها", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v728, "\u200Fزوبه", "ز**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v729, "\u200Fزوبنا", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v730, "\u200Fزوبكن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v731, "\u200Fزوبكم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v732, "\u200Fزوبك", "ز**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v733, "\u200Fزوب", "ز*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v734, "\u200Fزبي", "ز*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v735, "\u200Fزبهن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v736, "\u200Fزبهم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v737, "\u200Fزبها", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v738, "\u200Fزبه", "ز*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v739, "\u200Fزبنا", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v740, "\u200Fزبكن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v741, "\u200Fزبكم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v742, "\u200Fزبك", "ز*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v743, "\u200Fزبابي", "ز***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v744, "\u200Fزبابهن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v745, "\u200Fزبابهم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v746, "\u200Fزبابها", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v747, "\u200Fزبابه", "ز***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v748, "\u200Fزبابنا", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v749, "\u200Fزبابكن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v750, "\u200Fزبابكم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v751, "\u200Fزبابك", "ز***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v752, "\u200Fزباب", "ز**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v753, "\u200Fزب", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v754, "\u200Fخرواتي", "خ****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v755, "\u200Fخرواتهن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v756, "\u200Fخرواتهم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v757, "\u200Fخرواتها", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v758, "\u200Fخرواته", "خ****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v759, "\u200Fخرواتنا", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v760, "\u200Fخرواتكن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v761, "\u200Fخرواتكم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v762, "\u200Fخرواتك", "خ****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v763, "\u200Fخروات", "خ***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v764, "\u200Fخرتهن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v765, "\u200Fخرتهم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v766, "\u200Fخرتها", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v767, "\u200Fخرتنا", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v768, "\u200Fخرتكن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v769, "\u200Fخرتكم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v770, "\u200Fخرة", "خ*ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v771, "\u200Fتنييك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v772, "\u200Fتنتاك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v773, "\u200Fبورنو", "ب***و");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v774, "\u200Fبكسي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v775, "\u200Fبكسهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v776, "\u200Fبكسهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v777, "\u200Fبكسها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v778, "\u200Fبكسه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v779, "\u200Fبكسنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v780, "\u200Fبكسكوسي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v781, "\u200Fبكسكوسهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v782, "\u200Fبكسكوسهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v783, "\u200Fبكسكوسها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v784, "\u200Fبكسكوسه", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v785, "\u200Fبكسكوسنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v786, "\u200Fبكسكوسكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v787, "\u200Fبكسكوسكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v788, "\u200Fبكسكوسك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v789, "\u200Fبكسكوس", "ب****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v790, "\u200Fبكسكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v791, "\u200Fبكسكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v792, "\u200Fبكسك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v793, "\u200Fبكساسي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v794, "\u200Fبكساسهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v795, "\u200Fبكساسهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v796, "\u200Fبكساسها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v797, "\u200Fبكساسه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v798, "\u200Fبكساسنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v799, "\u200Fبكساسكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v800, "\u200Fبكساسكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v801, "\u200Fبكساسك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v802, "\u200Fبكساس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v803, "\u200Fبكس", "ب*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v804, "\u200Fبشرموطتي", "ب******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v805, "\u200Fبشرموطتهن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v806, "\u200Fبشرموطتهم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v807, "\u200Fبشرموطتها", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v808, "\u200Fبشرموطته", "ب******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v809, "\u200Fبشرموطتنا", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v810, "\u200Fبشرموطتكن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v811, "\u200Fبشرموطتكم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v812, "\u200Fبشرموطتك", "ب******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v813, "\u200Fبشرموطة", "ب*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v814, "\u200Fبشرموطاتي", "ب*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v815, "\u200Fبشرموطاتهن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v816, "\u200Fبشرموطاتهم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v817, "\u200Fبشرموطاتها", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v818, "\u200Fبشرموطاته", "ب*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v819, "\u200Fبشرموطاتنا", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v820, "\u200Fبشرموطاتكن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v821, "\u200Fبشرموطاتكم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v822, "\u200Fبشرموطاتك", "ب*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v823, "\u200Fبشرموطات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v824, "\u200Fبزوبي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v825, "\u200Fبزوبهن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v826, "\u200Fبزوبهم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v827, "\u200Fبزوبها", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v828, "\u200Fبزوبه", "ب***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v829, "\u200Fبزوبنا", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v830, "\u200Fبزوبكن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v831, "\u200Fبزوبكم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v832, "\u200Fبزوبك", "ب***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v833, "\u200Fبزوب", "ب**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v834, "\u200Fبزبي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v835, "\u200Fبزبهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v836, "\u200Fبزبهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v837, "\u200Fبزبها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v838, "\u200Fبزبه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v839, "\u200Fبزبنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v840, "\u200Fبزبكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v841, "\u200Fبزبكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v842, "\u200Fبزبك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v843, "\u200Fبزبابي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v844, "\u200Fبزبابهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v845, "\u200Fبزبابهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v846, "\u200Fبزبابها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v847, "\u200Fبزبابه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v848, "\u200Fبزبابنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v849, "\u200Fبزبابكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v850, "\u200Fبزبابكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v851, "\u200Fبزبابك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v852, "\u200Fبزباب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v853, "\u200Fبزب", "ب*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v854, "\u200Fبزاز", "ب**ز");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(v855, "\u200Fبز", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v856, "\u200Fبخرواتي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v857, "\u200Fبخرواتهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v858, "\u200Fبخرواتهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v859, "\u200Fبخرواتها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v860, "\u200Fبخرواته", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v861, "\u200Fبخرواتنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v862, "\u200Fبخرواتكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v863, "\u200Fبخرواتكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v864, "\u200Fبخرواتك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v865, "\u200Fبخروات", "ب****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v866, "\u200Fبخرتي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v867, "\u200Fبخرة", "ب**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v868, "\u200Fبالكسكوس", "ب******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v869, "\u200Fبالكساس", "ب*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v870, "\u200Fبالكس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v871, "\u200Fبالشرموطة", "ب*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(v872, "\u200Fبالشرموطات", "ب********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v873, "\u200Fبالزوب", "ب****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v874, "\u200Fبالزباب", "ب*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v875, "\u200Fبالزب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v876, "\u200Fبالخروات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v877, "\u200Fبالخرة", "ب****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v878, "\u200Fايري", "ا**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v879, "\u200Fايرك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v880, "\u200Fاير", "ا*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v881, "\u200Fانيكك", "ا***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v882, "\u200Fانيك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v883, "\u200Fالكسكوس", "ا*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v884, "\u200Fالكساس", "ا****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v885, "\u200Fالكس", "ا**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(v886, "\u200Fالشرموطة", "ا******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v887, "\u200Fالشرموطات", "ا*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v888, "\u200Fالزوب", "ا***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(v889, "\u200Fالزباب", "ا****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v890, "\u200Fالزب", "ا**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v891, "\u200Fالخروات", "ا*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v892, "\u200Fالخرة", "ا***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v893, "\u200Fإيري", "إ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v894, "\u200Fإيرك", "إ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v895, "\u200Fإير", "إ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v896, "\u200Fأيري", "أ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v897, "\u200Fأيرك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v898, "\u200Fأير", "أ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(v899, "\u200Fأنيكك", "أ***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(v900, "\u200Fأنيك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v901, "ينتاك", "ي***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v902, "وللكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v903, "وللكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v904, "وللكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v905, "وللشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v906, "وللشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v907, "وللزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v908, "وللزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v909, "وللزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v910, "وللخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v911, "وللخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v912, "ولكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v913, "ولكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v914, "ولكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v915, "ولكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v916, "ولكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v917, "ولكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v918, "ولكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v919, "ولكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v920, "ولكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v921, "ولكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v922, "ولكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v923, "ولكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v924, "ولكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v925, "ولكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v926, "ولكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v927, "ولكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v928, "ولكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v929, "ولكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v930, "ولكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v931, "ولكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v932, "ولكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v933, "ولكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v934, "ولكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v935, "ولكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v936, "ولكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v937, "ولكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v938, "ولكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v939, "ولكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v940, "ولكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v941, "ولكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v942, "ولشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v943, "ولشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v944, "ولشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v945, "ولشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v946, "ولشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v947, "ولشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v948, "ولشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v949, "ولشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v950, "ولشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v951, "ولشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v952, "ولشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v953, "ولشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v954, "ولشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v955, "ولشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v956, "ولشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v957, "ولشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v958, "ولشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v959, "ولشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v960, "ولشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v961, "ولشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v962, "ولزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v963, "ولزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v964, "ولزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v965, "ولزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v966, "ولزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v967, "ولزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v968, "ولزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v969, "ولزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v970, "ولزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v971, "ولزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v972, "ولزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v973, "ولزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v974, "ولزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v975, "ولزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v976, "ولزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v977, "ولزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v978, "ولزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v979, "ولزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v980, "ولزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v981, "ولزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v982, "ولزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v983, "ولزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v984, "ولزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v985, "ولزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v986, "ولزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v987, "ولزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v988, "ولزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v989, "ولزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v990, "ولزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v991, "ولزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v992, "ولخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v993, "ولخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v994, "ولخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v995, "ولخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v996, "ولخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v997, "ولخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v998, "ولخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v999, "ولخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1000, "ولخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1001, "ولخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1002, "ولخرتي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1003, "ولخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1004, "ولخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1005, "ولخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1006, "ولخرته", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1007, "ولخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1008, "ولخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1009, "ولخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1010, "ولخرتك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1011, "ولخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1012, "وككسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1013, "وككسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1014, "وككسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1015, "وككسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1016, "وككسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1017, "وككسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1018, "وككسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1019, "وككسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1020, "وككسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1021, "وككسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1022, "وككسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1023, "وككسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1024, "وككسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1025, "وككسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1026, "وككسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1027, "وككسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1028, "وككسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1029, "وككسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1030, "وككسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1031, "وككساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1032, "وككساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1033, "وككساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1034, "وككساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1035, "وككساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1036, "وككساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1037, "وككساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1038, "وككساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1039, "وككساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1040, "وككساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1041, "وككس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1042, "وكشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1043, "وكشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1044, "وكشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1045, "وكشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1046, "وكشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1047, "وكشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1048, "وكشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1049, "وكشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1050, "وكشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1051, "وكشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1052, "وكشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1053, "وكشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1054, "وكشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1055, "وكشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1056, "وكشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1057, "وكشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1058, "وكشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1059, "وكشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1060, "وكشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1061, "وكشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1062, "وكسي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1063, "وكسهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1064, "وكسهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1065, "وكسها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1066, "وكسه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1067, "وكسنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1068, "وكسكوسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1069, "وكسكوسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1070, "وكسكوسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1071, "وكسكوسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1072, "وكسكوسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1073, "وكسكوسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1074, "وكسكوسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1075, "وكسكوسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1076, "وكسكوسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1077, "وكسكوس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1078, "وكسكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1079, "وكسكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1080, "وكسك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1081, "وكساسي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1082, "وكساسهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1083, "وكساسهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1084, "وكساسها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1085, "وكساسه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1086, "وكساسنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1087, "وكساسكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1088, "وكساسكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1089, "وكساسك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1090, "وكساس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1091, "وكس", "و*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1092, "وكزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1093, "وكزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1094, "وكزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1095, "وكزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1096, "وكزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1097, "وكزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1098, "وكزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1099, "وكزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1100, "وكزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1101, "وكزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1102, "وكزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1103, "وكزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1104, "وكزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1105, "وكزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1106, "وكزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1107, "وكزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1108, "وكزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1109, "وكزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1110, "وكزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1111, "وكزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1112, "وكزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1113, "وكزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1114, "وكزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1115, "وكزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1116, "وكزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1117, "وكزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1118, "وكزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1119, "وكزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1120, "وكزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1121, "وكزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1122, "وكخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1123, "وكخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1124, "وكخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1125, "وكخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1126, "وكخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1127, "وكخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1128, "وكخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1129, "وكخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1130, "وكخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1131, "وكخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1132, "وكخرتهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1133, "وكخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1134, "وكخرتها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1135, "وكخرتنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1136, "وكخرتكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1137, "وكخرتكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1138, "وكخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1139, "وكالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1140, "وكالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1141, "وكالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1142, "وكالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1143, "وكالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1144, "وكالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1145, "وكالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1146, "وكالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1147, "وكالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1148, "وكالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1149, "وشرموطتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1150, "وشرموطتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1151, "وشرموطتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1152, "وشرموطتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1153, "وشرموطته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1154, "وشرموطتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1155, "وشرموطتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1156, "وشرموطتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1157, "وشرموطتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1158, "وشرموطة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1159, "وشرموطاتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1160, "وشرموطاتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1161, "وشرموطاتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1162, "وشرموطاتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1163, "وشرموطاته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1164, "وشرموطاتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1165, "وشرموطاتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1166, "وشرموطاتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1167, "وشرموطاتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1168, "وشرموطات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1169, "وزوبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1170, "وزوبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1171, "وزوبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1172, "وزوبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1173, "وزوبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1174, "وزوبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1175, "وزوبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1176, "وزوبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1177, "وزوبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1178, "وزوب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1179, "وزبي", "و**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1180, "وزبهن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1181, "وزبهم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1182, "وزبها", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1183, "وزبه", "و**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1184, "وزبنا", "و***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1185, "وزبكن", "و***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1186, "وزبكم", "و***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1187, "وزبك", "و**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1188, "وزبابي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1189, "وزبابهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1190, "وزبابهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1191, "وزبابها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1192, "وزبابه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1193, "وزبابنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1194, "وزبابكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1195, "وزبابكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1196, "وزبابك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1197, "وزباب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1198, "وزب", "و*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1199, "وخرواتي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1200, "وخرواتهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1201, "وخرواتهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1202, "وخرواتها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1203, "وخرواته", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1204, "وخرواتنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1205, "وخرواتكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1206, "وخرواتكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1207, "وخرواتك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1208, "وخروات", "و****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1209, "وخرتي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1210, "وخرته", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1211, "وخرتك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1212, "وخرة", "و**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1213, "وبكسي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1214, "وبكسهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1215, "وبكسهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1216, "وبكسها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1217, "وبكسه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1218, "وبكسنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1219, "وبكسكوسي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1220, "وبكسكوسهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1221, "وبكسكوسهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1222, "وبكسكوسها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1223, "وبكسكوسه", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1224, "وبكسكوسنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1225, "وبكسكوسكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1226, "وبكسكوسكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1227, "وبكسكوسك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1228, "وبكسكوس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1229, "وبكسكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1230, "وبكسكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1231, "وبكسك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1232, "وبكساسي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1233, "وبكساسهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1234, "وبكساسهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1235, "وبكساسها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1236, "وبكساسه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1237, "وبكساسنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1238, "وبكساسكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1239, "وبكساسكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1240, "وبكساسك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1241, "وبكساس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1242, "وبكس", "و**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1243, "وبشرموطتي", "و*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1244, "وبشرموطتهن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1245, "وبشرموطتهم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1246, "وبشرموطتها", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1247, "وبشرموطته", "و*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1248, "وبشرموطتنا", "و********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1249, "وبشرموطتكن", "و********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1250, "وبشرموطتكم", "و********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1251, "وبشرموطتك", "و*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1252, "وبشرموطة", "و******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1253, "وبشرموطاتي", "و********ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1254, "وبشرموطاتهن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1255, "وبشرموطاتهم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1256, "وبشرموطاتها", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1257, "وبشرموطاته", "و********ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1258, "وبشرموطاتنا", "و*********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1259, "وبشرموطاتكن", "و*********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1260, "وبشرموطاتكم", "و*********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1261, "وبشرموطاتك", "و********ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1262, "وبشرموطات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1263, "وبزوبي", "و****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1264, "وبزوبهن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1265, "وبزوبهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1266, "وبزوبها", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1267, "وبزوبه", "و****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1268, "وبزوبنا", "و*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1269, "وبزوبكن", "و*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1270, "وبزوبكم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1271, "وبزوبك", "و****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1272, "وبزوب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1273, "وبزبي", "و***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1274, "وبزبهن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1275, "وبزبهم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1276, "وبزبها", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1277, "وبزبه", "و***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1278, "وبزبنا", "و****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1279, "وبزبكن", "و****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1280, "وبزبكم", "و****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1281, "وبزبك", "و***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1282, "وبزبابي", "و*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1283, "وبزبابهن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1284, "وبزبابهم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1285, "وبزبابها", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1286, "وبزبابه", "و*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1287, "وبزبابنا", "و******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1288, "وبزبابكن", "و******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1289, "وبزبابكم", "و******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1290, "وبزبابك", "و*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1291, "وبزباب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1292, "وبزب", "و**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1293, "وبخرواتي", "و******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1294, "وبخرواتهن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1295, "وبخرواتهم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1296, "وبخرواتها", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1297, "وبخرواته", "و******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1298, "وبخرواتنا", "و*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1299, "وبخرواتكن", "و*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1300, "وبخرواتكم", "و*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1301, "وبخرواتك", "و******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1302, "وبخروات", "و*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1303, "وبخرتهم", "و*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1304, "وبخرة", "و***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1305, "وبالكسكوس", "و*******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1306, "وبالكساس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1307, "وبالكس", "و****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1308, "وبالشرموطة", "و********ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v1309, "وبالشرموطات", "و*********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1310, "وبالزوب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1311, "وبالزباب", "و******ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1312, "وبالزب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1313, "وبالخروات", "و*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1314, "وبالخرة", "و*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1315, "والكسكوس", "و******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1316, "والكساس", "و*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1317, "والكس", "و***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1318, "والشرموطة", "و*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1319, "والشرموطات", "و********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1320, "والزوب", "و****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1321, "والزباب", "و*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1322, "والزب", "و***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1323, "والخروات", "و******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1324, "والخرة", "و****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1325, "نيكيني", "ن****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1326, "نيكني", "ن***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1327, "نيك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1328, "نياكة", "ن***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1329, "ناك", "ن*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1330, "مومس", "م**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1331, "مهبل", "م**ل");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1332, "للكسكوس", "ل*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1333, "للكساس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1334, "للكس", "ل**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1335, "للعنة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1336, "للشرموطة", "ل******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1337, "للشرموطات", "ل*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1338, "للزوب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1339, "للزباب", "ل****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1340, "للزب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1341, "للخروات", "ل*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1342, "للخرة", "ل***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1343, "لكسي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1344, "لكسهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1345, "لكسهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1346, "لكسها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1347, "لكسه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1348, "لكسنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1349, "لكسكوسي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1350, "لكسكوسهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1351, "لكسكوسهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1352, "لكسكوسها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1353, "لكسكوسه", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1354, "لكسكوسنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1355, "لكسكوسكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1356, "لكسكوسكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1357, "لكسكوسك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1358, "لكسكوس", "ل****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1359, "لكسكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1360, "لكسكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1361, "لكسك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1362, "لكساسي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1363, "لكساسهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1364, "لكساسهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1365, "لكساسها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1366, "لكساسه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1367, "لكساسنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1368, "لكساسكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1369, "لكساسكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1370, "لكساسك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1371, "لكساس", "ل***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1372, "لكس", "ل*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1373, "لشرموطتي", "ل******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1374, "لشرموطتهن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1375, "لشرموطتهم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1376, "لشرموطتها", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1377, "لشرموطته", "ل******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1378, "لشرموطتنا", "ل*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1379, "لشرموطتكن", "ل*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1380, "لشرموطتكم", "ل*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1381, "لشرموطتك", "ل******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1382, "لشرموطة", "ل*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1383, "لشرموطاتي", "ل*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1384, "لشرموطاتهن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1385, "لشرموطاتهم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1386, "لشرموطاتها", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1387, "لشرموطاته", "ل*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1388, "لشرموطاتنا", "ل********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1389, "لشرموطاتكن", "ل********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1390, "لشرموطاتكم", "ل********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1391, "لشرموطاتك", "ل*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1392, "لشرموطات", "ل******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1393, "لزوبي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1394, "لزوبهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1395, "لزوبهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1396, "لزوبها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1397, "لزوبه", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1398, "لزوبنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1399, "لزوبكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1400, "لزوبكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1401, "لزوبك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1402, "لزوب", "ل**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1403, "لزبي", "ل**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1404, "لزبهن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1405, "لزبهم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1406, "لزبها", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1407, "لزبه", "ل**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1408, "لزبنا", "ل***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1409, "لزبكن", "ل***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1410, "لزبكم", "ل***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1411, "لزبك", "ل**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1412, "لزبابي", "ل****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1413, "لزبابهن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1414, "لزبابهم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1415, "لزبابها", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1416, "لزبابه", "ل****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1417, "لزبابنا", "ل*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1418, "لزبابكن", "ل*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1419, "لزبابكم", "ل*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1420, "لزبابك", "ل****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1421, "لزباب", "ل***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1422, "لزب", "ل*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1423, "لخرواتي", "ل*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1424, "لخرواتهن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1425, "لخرواتهم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1426, "لخرواتها", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1427, "لخرواته", "ل*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1428, "لخرواتنا", "ل******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1429, "لخرواتكن", "ل******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1430, "لخرواتكم", "ل******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1431, "لخرواتك", "ل*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1432, "لخروات", "ل****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1433, "لخرتي", "ل***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1434, "لخرتهن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1435, "لخرتهم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1436, "لخرتها", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1437, "لخرته", "ل***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1438, "لخرتنا", "ل****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1439, "لخرتكن", "ل****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1440, "لخرتكم", "ل****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1441, "لخرتك", "ل***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1442, "لخرة", "ل**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1443, "ككسي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1444, "ككسهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1445, "ككسهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1446, "ككسها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1447, "ككسه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1448, "ككسنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1449, "ككسكوسي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1450, "ككسكوسهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1451, "ككسكوسهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1452, "ككسكوسها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1453, "ككسكوسه", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1454, "ككسكوسنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1455, "ككسكوسكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1456, "ككسكوسكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1457, "ككسكوسك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1458, "ككسكوس", "ك****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1459, "ككسكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1460, "ككسكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1461, "ككسك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1462, "ككساسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1463, "ككساسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1464, "ككساسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1465, "ككساسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1466, "ككساسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1467, "ككساسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1468, "ككساسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1469, "ككساسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1470, "ككساسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1471, "ككساس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1472, "ككس", "ك*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1473, "كشرموطتي", "ك******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1474, "كشرموطتهن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1475, "كشرموطتهم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1476, "كشرموطتها", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1477, "كشرموطته", "ك******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1478, "كشرموطتنا", "ك*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1479, "كشرموطتكن", "ك*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1480, "كشرموطتكم", "ك*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1481, "كشرموطتك", "ك******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1482, "كشرموطة", "ك*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1483, "كشرموطاتي", "ك*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1484, "كشرموطاتهن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1485, "كشرموطاتهم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1486, "كشرموطاتها", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1487, "كشرموطاته", "ك*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1488, "كشرموطاتنا", "ك********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1489, "كشرموطاتكن", "ك********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1490, "كشرموطاتكم", "ك********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1491, "كشرموطاتك", "ك*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1492, "كشرموطات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1493, "كسي", "ك*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1494, "كسهن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1495, "كسهم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1496, "كسها", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1497, "كسه", "ك*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1498, "كسنا", "ك**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1499, "كسكوسي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1500, "كسكوسهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1501, "كسكوسهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1502, "كسكوسها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1503, "كسكوسه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1504, "كسكوسنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1505, "كسكوسكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1506, "كسكوسكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1507, "كسكوسك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1508, "كسكوس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1509, "كسكن", "ك**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1510, "كسكم", "ك**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1511, "كسك", "ك*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1512, "كساسي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1513, "كساسهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1514, "كساسهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1515, "كساسها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1516, "كساسه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1517, "كساسنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1518, "كساسكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1519, "كساسكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1520, "كساسك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1521, "كساس", "ك**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1522, "كس", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1523, "كزوبي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1524, "كزوبهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1525, "كزوبهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1526, "كزوبها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1527, "كزوبه", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1528, "كزوبنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1529, "كزوبكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1530, "كزوبكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1531, "كزوبك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1532, "كزوب", "ك**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1533, "كزبي", "ك**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1534, "كزبهن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1535, "كزبهم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1536, "كزبها", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1537, "كزبه", "ك**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1538, "كزبنا", "ك***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1539, "كزبكن", "ك***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1540, "كزبكم", "ك***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1541, "كزبك", "ك**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1542, "كزبابي", "ك****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1543, "كزبابهن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1544, "كزبابهم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1545, "كزبابها", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1546, "كزبابه", "ك****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1547, "كزبابنا", "ك*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1548, "كزبابكن", "ك*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1549, "كزبابكم", "ك*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1550, "كزبابك", "ك****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1551, "كزباب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1552, "كزب", "ك*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1553, "كخرواتي", "ك*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1554, "كخرواتهن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1555, "كخرواتهم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1556, "كخرواتها", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1557, "كخرواته", "ك*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1558, "كخرواتنا", "ك******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1559, "كخرواتكن", "ك******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1560, "كخرواتكم", "ك******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1561, "كخرواتك", "ك*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1562, "كخروات", "ك****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1563, "كخرتي", "ك***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1564, "كخرتهن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1565, "كخرتهم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1566, "كخرتها", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1567, "كخرته", "ك***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1568, "كخرتنا", "ك****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1569, "كخرتكن", "ك****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1570, "كخرتكم", "ك****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1571, "كخرتك", "ك***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1572, "كخرة", "ك**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1573, "كالكسكوس", "ك******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1574, "كالكساس", "ك*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1575, "كالكس", "ك***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1576, "كالشرموطة", "ك*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1577, "كالشرموطات", "ك********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1578, "كالزوب", "ك****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1579, "كالزباب", "ك*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1580, "كالزب", "ك***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1581, "كالخروات", "ك******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1582, "كالخرة", "ك****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1583, "قحبه", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1584, "قحبة", "ق**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1585, "قحبات", "ق***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1586, "عيري", "ع**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1587, "عرصه", "ع**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1588, "عرصة", "ع**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1589, "عرصات", "ع***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1590, "عرص", "ع*ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1591, "عاهرة", "ع***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1592, "شلكه", "ش**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1593, "شلكة", "ش**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1594, "شلكات", "ش***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1595, "شرموطه", "ش****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1596, "شرموطتي", "ش*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1597, "شرموطتهن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1598, "شرموطتهم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1599, "شرموطتها", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1600, "شرموطته", "ش*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1601, "شرموطتنا", "ش******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1602, "شرموطتكن", "ش******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1603, "شرموطتكم", "ش******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1604, "شرموطتك", "ش*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1605, "شرموطة", "ش****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1606, "شرموطاتي", "ش******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1607, "شرموطاتهن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1608, "شرموطاتهم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1609, "شرموطاتها", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1610, "شرموطاته", "ش******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1611, "شرموطاتنا", "ش*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1612, "شرموطاتكن", "ش*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1613, "شرموطاتكم", "ش*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1614, "شرموطاتك", "ش******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1615, "شرموطات", "ش*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1616, "شرموط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1617, "شرجي", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v1618, "شراميط", "ش***ط");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1619, "شخيتي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1620, "شخيت", "ش**ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1621, "شخي", "ش*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1622, "شخاخي", "ش***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1623, "شخاختي", "ش****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1624, "شخاخ", "ش**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1625, "شخ", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1626, "ساقطة", "س***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1627, "سأضاجع", "س****ع");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1628, "زوبي", "ز**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1629, "زوبهن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1630, "زوبهم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1631, "زوبها", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1632, "زوبه", "ز**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1633, "زوبنا", "ز***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1634, "زوبكن", "ز***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1635, "زوبكم", "ز***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1636, "زوبك", "ز**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1637, "زوب", "ز*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1638, "زبي", "ز*ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1639, "زبهن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1640, "زبهم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1641, "زبها", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1642, "زبه", "ز*ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1643, "زبنا", "ز**ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1644, "زبكن", "ز**ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1645, "زبكم", "ز**م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1646, "زبك", "ز*ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1647, "زبابي", "ز***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1648, "زبابهن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1649, "زبابهم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1650, "زبابها", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1651, "زبابه", "ز***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1652, "زبابنا", "ز****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1653, "زبابكن", "ز****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1654, "زبابكم", "ز****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1655, "زبابك", "ز***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1656, "زباب", "ز**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1657, "زب", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1658, "تبا", "ت*ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1659, "خرواتي", "خ****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1660, "خرواتهن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1661, "خرواتهم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1662, "خرواتها", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1663, "خرواته", "خ****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1664, "خرواتنا", "خ*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1665, "خرواتكن", "خ*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1666, "خرواتكم", "خ*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1667, "خرواتك", "خ****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1668, "خروات", "خ***ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1669, "خرتهن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1670, "خرتهم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1671, "خرتها", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1672, "خرتنا", "خ***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1673, "خرتكن", "خ***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1674, "خرتكم", "خ***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1675, "خرة", "خ*ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1676, "تنييك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1677, "تنتاك", "ت***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1678, "بورنو", "ب***و");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1679, "بكسي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1680, "بكسهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1681, "بكسهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1682, "بكسها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1683, "بكسه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1684, "بكسنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1685, "بكسكوسي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1686, "بكسكوسهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1687, "بكسكوسهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1688, "بكسكوسها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1689, "بكسكوسه", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1690, "بكسكوسنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1691, "بكسكوسكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1692, "بكسكوسكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1693, "بكسكوسك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1694, "بكسكوس", "ب****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1695, "بكسكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1696, "بكسكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1697, "بكسك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1698, "بكساسي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1699, "بكساسهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1700, "بكساسهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1701, "بكساسها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1702, "بكساسه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1703, "بكساسنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1704, "بكساسكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1705, "بكساسكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1706, "بكساسك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1707, "بكساس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1708, "بكس", "ب*س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1709, "بشرموطتي", "ب******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1710, "بشرموطتهن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1711, "بشرموطتهم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1712, "بشرموطتها", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1713, "بشرموطته", "ب******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1714, "بشرموطتنا", "ب*******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1715, "بشرموطتكن", "ب*******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1716, "بشرموطتكم", "ب*******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1717, "بشرموطتك", "ب******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1718, "بشرموطة", "ب*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1719, "بشرموطاتي", "ب*******ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1720, "بشرموطاتهن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1721, "بشرموطاتهم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1722, "بشرموطاتها", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1723, "بشرموطاته", "ب*******ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1724, "بشرموطاتنا", "ب********ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1725, "بشرموطاتكن", "ب********ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1726, "بشرموطاتكم", "ب********م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1727, "بشرموطاتك", "ب*******ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1728, "بشرموطات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1729, "بزوبي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1730, "بزوبهن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1731, "بزوبهم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1732, "بزوبها", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1733, "بزوبه", "ب***ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1734, "بزوبنا", "ب****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1735, "بزوبكن", "ب****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1736, "بزوبكم", "ب****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1737, "بزوبك", "ب***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1738, "بزوب", "ب**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1739, "بزبي", "ب**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1740, "بزبهن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1741, "بزبهم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1742, "بزبها", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1743, "بزبه", "ب**ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1744, "بزبنا", "ب***ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1745, "بزبكن", "ب***ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1746, "بزبكم", "ب***م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1747, "بزبك", "ب**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1748, "بزبابي", "ب****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1749, "بزبابهن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1750, "بزبابهم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1751, "بزبابها", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1752, "بزبابه", "ب****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1753, "بزبابنا", "ب*****ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1754, "بزبابكن", "ب*****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1755, "بزبابكم", "ب*****م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1756, "بزبابك", "ب****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1757, "بزباب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1758, "بزب", "ب*ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1759, "بزاز", "ب**ز");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v1760, "بز", "**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1761, "بخرواتي", "ب*****ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1762, "بخرواتهن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1763, "بخرواتهم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1764, "بخرواتها", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1765, "بخرواته", "ب*****ه");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1766, "بخرواتنا", "ب******ا");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1767, "بخرواتكن", "ب******ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1768, "بخرواتكم", "ب******م");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1769, "بخرواتك", "ب*****ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1770, "بخروات", "ب****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1771, "بخرتي", "ب***ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1772, "بخرة", "ب**ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1773, "بالكسكوس", "ب******س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1774, "بالكساس", "ب*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1775, "بالكس", "ب***س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1776, "بالشرموطة", "ب*******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(v1777, "بالشرموطات", "ب********ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1778, "بالزوب", "ب****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1779, "بالزباب", "ب*****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1780, "بالزب", "ب***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1781, "بالخروات", "ب******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1782, "بالخرة", "ب****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1783, "ايري", "ا**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1784, "ايرك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1785, "اير", "ا*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1786, "انيكك", "ا***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1787, "انيك", "ا**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1788, "اللعين", "ا****ن");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1789, "الكسكوس", "ا*****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1790, "الكساس", "ا****س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1791, "الكس", "ا**س");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1792, "العرص", "ا***ص");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1793, "العاهرة", "ا*****ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(v1794, "الشرموطة", "ا******ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1795, "الشرموطات", "ا*******ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1796, "الزوب", "ا***ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v1797, "الزباب", "ا****ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1798, "الزب", "ا**ب");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v1799, "الخروات", "ا*****ت");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1800, "الخرة", "ا***ة");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(v1801, "الاستنماء", "ا*******ء");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1802, "إيري", "إ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1803, "إيرك", "إ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1804, "إير", "إ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1805, "أيري", "أ**ي");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1806, "أيرك", "أ**ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v1807, "أير", "أ*ر");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v1808, "أنيكك", "أ***ك");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v1809, "أنيك", "أ**ك");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ar_AE(void)::sProfanityData_ar_AE, (uint64_t)v5, 0x70DuLL);
    for (i = 0; i != -10830; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v1809[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ar_AE(void)::sProfanityData_ar_AE, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_ar_AE(void)::sProfanityData_ar_AE[0], unk_1EF5822E8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF5822E8 - GetProfanityFilter_ar_AE(void)::sProfanityData_ar_AE[0]) >> 4));
}

void sub_1BFA4FA2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 86592;
  v4 = -86640;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_nl_NL(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[7];

  v8[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v5, "darmtouristjes", "d************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v6, "darmtouristje", "d***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v7, "darmtouristen", "d***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v8, "darmtourist", "d*********t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_nl_NL(void)::sProfanityData_nl_NL, (uint64_t)v5, 4uLL);
    for (i = 18; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_nl_NL(void)::sProfanityData_nl_NL, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_nl_NL(void)::sProfanityData_nl_NL[0], unk_1EF582328, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582328 - GetProfanityFilter_nl_NL(void)::sProfanityData_nl_NL[0]) >> 4));
}

void sub_1BFA4FC0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 144; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_de_CH(_QWORD *a1)
{
  unsigned __int8 v2;
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v4, "arschtrompeter", "a************r");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_de_CH(void)::sProfanityData_de_CH, (uint64_t)v4, 1uLL);
    std::pair<std::string const,std::string>::~pair((uint64_t)v4);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_de_CH(void)::sProfanityData_de_CH, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_de_CH(void)::sProfanityData_de_CH[0], unk_1EF582348, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582348 - GetProfanityFilter_de_CH(void)::sProfanityData_de_CH[0]) >> 4));
}

void sub_1BFA4FD6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_de_AT(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[7];

  v57[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v5, "tschuschenschlampe", "T****************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[17],0>(v6, "tschuschenfotze", "T**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v7, "tschuschenficker", "T*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v8, "tschusch", "t****sch");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v9, "tschurifetzen", "t**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v10, "tschuri", "t****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v11, "schnackseln", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v12, "scheisstürke", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v13, "scheissjugo", "s*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v14, "schancksln", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "saubeidl", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v16, "saubeidel", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[9],0>(v17, "pudern", "p******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[12],0>(v18, "puderant", "p*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v19, "polacke", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v20, "oaschloch", "o*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v21, "oaschficker", "o**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v22, "oasch", "o*sch");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v23, "oarschtrompeter", "a************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v24, "oarschpuderant", "o**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v25, "oarschpartie", "o**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v26, "oarschloecher", "a**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v27, "oarschloch", "a*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v28, "oarschlecker", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v29, "oarschlöcher", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v30, "oarschkriecherin", "a*************in");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v31, "oarschkriecher", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v32, "oarschkekse", "a*******se");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v33, "oarschkeks", "a******ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v34, "oarschkatheter", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v35, "oarschintruder", "a***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v36, "oarschficker", "a*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v37, "oarschficken", "a********en");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v38, "oarschbeidl", "o**********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v39, "oarsch", "o***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "mongo", "m***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(v41, "jugoschlampe", "j*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v42, "gschissener", "g********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "gschissen", "g*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v44, "futtlappen", "f*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(v45, "futt", "f***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v46, "futlapperl", "f********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[13],0>(v47, "futlappen", "f**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v48, "fut", "f*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v49, "funsn", "f***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v50, "dutteln", "d****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v51, "brunzen", "b*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v52, "bimboschlampe", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v53, "bimbo", "b***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v54, "beidl", "b****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v55, "beidel", "b****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v56, "arschpartie", "a*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v57, "arschbeidel", "a*********l");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_de_AT(void)::sProfanityData_de_AT, (uint64_t)v5, 0x35uLL);
    for (i = 312; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_de_AT(void)::sProfanityData_de_AT, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_de_AT(void)::sProfanityData_de_AT[0], unk_1EF582368, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582368 - GetProfanityFilter_de_AT(void)::sProfanityData_de_AT[0]) >> 4));
}

void sub_1BFA504D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 2496; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_de_DE(_QWORD *a1)
{
  unsigned __int8 v2;
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v4, "arschtrompeter", "a************r");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_de_DE(void)::sProfanityData_de_DE, (uint64_t)v4, 1uLL);
    std::pair<std::string const,std::string>::~pair((uint64_t)v4);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_de_DE(void)::sProfanityData_de_DE, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_de_DE(void)::sProfanityData_de_DE[0], unk_1EF582388, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582388 - GetProfanityFilter_de_DE(void)::sProfanityData_de_DE[0]) >> 4));
}

void sub_1BFA50634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_fr_BE(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v208[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v5, "zobs", "z**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v6, "zguegs", "z****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v7, "zgueg", "z***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v8, "zguègues", "z******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v9, "zguègue", "z*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v10, "zgegs", "z***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v11, "zgeg", "z**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v12, "youpins", "y*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "youpines", "y******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "youpine", "y*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v15, "youpin", "y****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "trouducs", "t******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "trouduc", "t*****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v18, "troncher", "t******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v19, "tichs", "t***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "tiches", "t****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v21, "tiche", "t***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v22, "tich", "t**h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v23, "teubs", "t***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v24, "tarlouzes", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v25, "tarlouses", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v26, "tarés", "t***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v27, "tapioles", "t******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v28, "tapiole", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v29, "tantouzes", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "tantouze", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v31, "tantouses", "t*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "tantouse", "t******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v33, "têts", "t**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v34, "têt", "t*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v35, "tèts", "t**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v36, "tèt", "t*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "strons", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v38, "stron", "s***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v39, "sinssis", "s*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v40, "sinssi", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v41, "sguegs", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v42, "sgueg", "s***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v43, "sguègues", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v44, "sguègue", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v45, "sgegs", "s***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v46, "sgeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v47, "salops", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v48, "salopards", "s*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v49, "salopard", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "saligots", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v51, "saligot", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v52, "saisis", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v53, "saisi", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "roustons", "r******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v55, "rouston", "r*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v56, "roupettes", "r*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v57, "roupette", "r******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v58, "ritals", "r****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v59, "rital", "r***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "radasses", "r******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "radasse", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "quettes", "q*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v63, "quetter", "q*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "quette", "q****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v65, "quéquettes", "q********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v66, "quéquette", "q*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v67, "putasses", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v68, "putasseries", "p*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v69, "putasserie", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "putasse", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v71, "pourchas", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "pourcha", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "poivrots", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v74, "pochtrons", "p*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v75, "pochetrons", "p********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v76, "pochards", "p*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "pisseurs", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v78, "pisseur", "p*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v79, "pisser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v80, "pines", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v81, "piner", "p***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v82, "pine", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v83, "peys", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v84, "peyes", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v85, "peye", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v86, "pey", "p*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v87, "peïs", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v88, "peï", "p*ï");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v89, "nibards", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v90, "mijolles", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v91, "mijolle", "m*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "mijoles", "m*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v93, "mijole", "m****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v94, "migeolles", "m*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "migeolle", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v96, "migeoles", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v97, "migeole", "m*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v98, "merdiers", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "merdier", "m*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v100, "merdasses", "m*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "merdasse", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v102, "lesbiches", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v103, "lesbiche", "l******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v104, "klettes", "k*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v105, "klette", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v106, "klets", "k***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v107, "klet", "k**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "kettes", "k****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v109, "ketter", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v110, "kette", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v111, "kets", "k**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v112, "ket", "k*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "kakkes", "k****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "kakker", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v115, "kakke", "k***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v116, "kakes", "k***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v117, "kaker", "k***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v118, "kake", "k**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v119, "godiches", "g******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "godiche", "g*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v121, "founes", "f****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v122, "foune", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v123, "foufounettes", "f**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v124, "fouffes", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v125, "fouffe", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v126, "foufes", "f****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v127, "fister", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v128, "fiottes", "f*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "fiotte", "f****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v130, "fions", "f***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v131, "fion", "f**n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v132, "enfoirées", "e*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v133, "enfoirée", "e******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v134, "enculeurs", "e*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v135, "enculeur", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v136, "empaffer", "e******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v137, "empaffés", "e*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v138, "empaffées", "e********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v139, "empaffée", "e******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v140, "empaffé", "e*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v141, "emmerdeuses", "e*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v142, "emmerdeuse", "e********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v143, "emmerdeurs", "e********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v144, "emmerdeur", "e*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v145, "djondus", "d*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v146, "djondu", "d****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v147, "derches", "d*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v148, "culs", "c**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v149, "cul", "c*l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v150, "cucuches", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v151, "cucuche", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v152, "crailles", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v153, "craille", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v154, "couillons", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v155, "couillon", "c******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v156, "cougner", "c*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v157, "connasses", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v158, "connasse", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(v159, "conasses", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v160, "conasse", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v161, "conards", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v162, "conard", "c****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v163, "clitos", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v164, "chouannes", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v165, "chouanne", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v166, "chouanes", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v167, "chouane", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v168, "chintoks", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v169, "chinetoques", "c********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v170, "chinetoks", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v171, "chieurs", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v172, "chieur", "c****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v173, "chieries", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v174, "chierie", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v175, "chiennasses", "c*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v176, "chiennasse", "c********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v177, "chiatique", "c*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v178, "chiasses", "c******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v179, "chiasser", "c******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v180, "chiées", "c****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v181, "chiée", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v182, "chagattes", "c*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v183, "chagatte", "c******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v184, "burne", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v185, "branlotter", "b********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v186, "branlettes", "b********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v187, "branler", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v188, "branlées", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v189, "branlée", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v190, "bouniouls", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v191, "bounioules", "b********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v192, "bounioule", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "bounioul", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v194, "boches", "b****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v195, "boche", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v196, "bites", "b***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v197, "biesses", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v198, "biesse", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v199, "bauyards", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v200, "bauyard", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v201, "baraquis", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "baraqui", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v203, "baraquîs", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v204, "baraquî", "b*****î");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v205, "barakis", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v206, "baraki", "b****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v207, "barakîs", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v208, "barakî", "b****î");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_fr_BE(void)::sProfanityData_fr_BE, (uint64_t)v5, 0xCCuLL);
    for (i = 0; i != -1224; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v208[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_fr_BE(void)::sProfanityData_fr_BE, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_fr_BE(void)::sProfanityData_fr_BE[0], unk_1EF5823A8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF5823A8 - GetProfanityFilter_fr_BE(void)::sProfanityData_fr_BE[0]) >> 4));
}

void sub_1BFA52150(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 9744;
  v4 = -9792;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_fr_CA(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[7];

  v32[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v5, "zouf", "z**f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v6, "twit", "t**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v7, "trou du cul", "t*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v8, "trou de cul", "t*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "toton", "t***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "ti cul", "t****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v11, "taouin", "t****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v12, "tabernak", "t******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v13, "téteux", "t****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v14, "quétaine", "q******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v15, "pogne-cul", "p*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v16, "plein de marde", "p************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "pissou", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "niochon", "n*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v19, "niaiseux", "n******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "newfie", "n****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v21, "naiseuse", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v22, "moumoune", "m******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v23, "moron", "m***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "mongol", "m****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v25, "mangeux de marde", "m**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v26, "lâcheux", "l*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "gnochon", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v28, "fif", "f*f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v29, "crotter", "c*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v30, "crotté", "c****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v31, "bloke", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[26],0>(v32, "épais dans le plus mince", "é**********************e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_fr_CA(void)::sProfanityData_fr_CA, (uint64_t)v5, 0x1CuLL);
    for (i = 162; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_fr_CA(void)::sProfanityData_fr_CA, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_fr_CA(void)::sProfanityData_fr_CA[0], unk_1EF5823C8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF5823C8 - GetProfanityFilter_fr_CA(void)::sProfanityData_fr_CA[0]) >> 4));
}

void sub_1BFA525FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 1296; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_es_US(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v158[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v5, "verguitas", "v********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v6, "verguita", "v*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "vergudo", "v******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v8, "vergotas", "v*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "vergota", "v******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "vergas", "v*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v11, "verga", "v****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v12, "tetas", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v13, "teta", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "rechinga", "r*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v15, "putos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "putones", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "putonas", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v18, "putona", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "puto", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "putito", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "putita", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "putero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v23, "putazos", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "putazo", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v25, "puta", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v26, "putón", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v27, "puñetas", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v28, "pitos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v29, "pito", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "pitero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "pinches", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v32, "pinche", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v33, "pepa", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "pendejo", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v35, "pendejitos", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v36, "pendejito", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v37, "pendejitas", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "pendejita", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v39, "pendejadita", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v40, "pendejadas", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "pendejada", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v42, "pendeja", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "pelotudos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v44, "pelotudo", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v45, "pedos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v46, "pedo", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v47, "panochas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v48, "panocha", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v49, "ojetes", "o*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v50, "ojete", "o****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v51, "mierdero", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v52, "mierda", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v53, "maricones", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "maricona", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v55, "marica", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v56, "maricón", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "mames", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v58, "mamar", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v59, "mamaditas", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "mamadita", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "mamadas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "mamada", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v63, "mamón", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "madriza", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v65, "madrazo", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v66, "lamehuevos", "l*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v67, "joto", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "jotito", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v69, "jotete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v70, "jotísimo", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "jodimos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "jodieron", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v73, "jodido", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v74, "jodidas", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "jodida", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v76, "jodió", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v77, "jodes", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v78, "joder", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v79, "joda", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v80, "jodón", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v81, "jódete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v82, "imbéciles", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v83, "imbécil", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "idiotas", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "idiota", "i*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v86, "huevón", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "güeyes", "gü****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v88, "güey", "gü**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v89, "estúpidos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v90, "estúpido", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v91, "estúpidas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v92, "estúpida", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v93, "encularse", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v94, "enculados", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "enculado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v96, "encabronar", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v97, "encabronado", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v98, "encabronada", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "emputas", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "emputar", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "emputado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v102, "emputada", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v103, "emputadísimo", "e***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v104, "emputa", "e*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v105, "culote", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v106, "culo", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "culito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "culero", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v109, "culera", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "cojones", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v111, "cojón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v112, "coños", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v113, "coño", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v114, "coñitos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v115, "coñito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v116, "chingos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v117, "chingonería", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v118, "chingo", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v119, "chingarse", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v120, "chingaron", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v121, "chingar", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v122, "chingaquedito", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v123, "chingando", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "chingan", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v125, "chingados", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v126, "chingado", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v127, "chingaderota", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v128, "chingaderita", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v129, "chingadera", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "chingada", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v131, "chingón", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "chaqueto", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v133, "chaqueta", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v134, "chúpamela", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v135, "calientahuevos", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v136, "cagotiza", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v137, "cagaron", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v138, "cagarla", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v139, "cagados", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v140, "cagado", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v141, "cagadas", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v142, "cagada", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v143, "cabronzuelo", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v144, "cabronzuela", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v145, "cabrones", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v146, "cabronazos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "cabronazo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "cabronas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v149, "cabrona", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v150, "cabrón", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "boludo", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v152, "boluda", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v153, "bastardo", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v154, "bastarda", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v155, "amariconados", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v156, "amariconado", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v157, "amariconadas", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v158, "amariconada", "a**********");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_es_US(void)::sProfanityData_es_US, (uint64_t)v5, 0x9AuLL);
    for (i = 0; i != -924; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v158[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_es_US(void)::sProfanityData_es_US, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_es_US(void)::sProfanityData_es_US[0], unk_1EF5823E8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF5823E8 - GetProfanityFilter_es_US(void)::sProfanityData_es_US[0]) >> 4));
}

void sub_1BFA53AA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 7344;
  v4 = -7392;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_es_MX(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v158[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v5, "verguitas", "v********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v6, "verguita", "v*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "vergudo", "v******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v8, "vergotas", "v*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "vergota", "v******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "vergas", "v*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v11, "verga", "v****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v12, "tetas", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v13, "teta", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "rechinga", "r*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v15, "putos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "putones", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v17, "putonas", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v18, "putona", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "puto", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "putito", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v21, "putita", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "putero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v23, "putazos", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v24, "putazo", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v25, "puta", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v26, "putón", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v27, "puñetas", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v28, "pitos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v29, "pito", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "pitero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v31, "pinches", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v32, "pinche", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v33, "pepa", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "pendejo", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v35, "pendejitos", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v36, "pendejito", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v37, "pendejitas", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "pendejita", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v39, "pendejadita", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v40, "pendejadas", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "pendejada", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v42, "pendeja", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v43, "pelotudos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v44, "pelotudo", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v45, "pedos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v46, "pedo", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v47, "panochas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v48, "panocha", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v49, "ojetes", "o*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v50, "ojete", "o****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v51, "mierdero", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v52, "mierda", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v53, "maricones", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "maricona", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v55, "marica", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v56, "maricón", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "mames", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v58, "mamar", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v59, "mamaditas", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "mamadita", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v61, "mamadas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "mamada", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v63, "mamón", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "madriza", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v65, "madrazo", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v66, "lamehuevos", "l*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v67, "joto", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "jotito", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v69, "jotete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v70, "jotísimo", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "jodimos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "jodieron", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v73, "jodido", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v74, "jodidas", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "jodida", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v76, "jodió", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v77, "jodes", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v78, "joder", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v79, "joda", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v80, "jodón", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v81, "jódete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v82, "imbéciles", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v83, "imbécil", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "idiotas", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "idiota", "i*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v86, "huevón", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "güeyes", "gü****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v88, "güey", "gü**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v89, "estúpidos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v90, "estúpido", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v91, "estúpidas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v92, "estúpida", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v93, "encularse", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v94, "enculados", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "enculado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v96, "encabronar", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v97, "encabronado", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v98, "encabronada", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "emputas", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "emputar", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "emputado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v102, "emputada", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v103, "emputadísimo", "e***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v104, "emputa", "e*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v105, "culote", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v106, "culo", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "culito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "culero", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v109, "culera", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "cojones", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v111, "cojón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v112, "coños", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v113, "coño", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v114, "coñitos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v115, "coñito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v116, "chingos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v117, "chingonería", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v118, "chingo", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v119, "chingarse", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v120, "chingaron", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v121, "chingar", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v122, "chingaquedito", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v123, "chingando", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "chingan", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v125, "chingados", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v126, "chingado", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v127, "chingaderota", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v128, "chingaderita", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v129, "chingadera", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "chingada", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v131, "chingón", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "chaqueto", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v133, "chaqueta", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v134, "chúpamela", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v135, "calientahuevos", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v136, "cagotiza", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v137, "cagaron", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v138, "cagarla", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v139, "cagados", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v140, "cagado", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v141, "cagadas", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v142, "cagada", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v143, "cabronzuelo", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v144, "cabronzuela", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v145, "cabrones", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v146, "cabronazos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "cabronazo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "cabronas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v149, "cabrona", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v150, "cabrón", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "boludo", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v152, "boluda", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v153, "bastardo", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v154, "bastarda", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v155, "amariconados", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v156, "amariconado", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v157, "amariconadas", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v158, "amariconada", "a**********");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_es_MX(void)::sProfanityData_es_MX, (uint64_t)v5, 0x9AuLL);
    for (i = 0; i != -924; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v158[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_es_MX(void)::sProfanityData_es_MX, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_es_MX(void)::sProfanityData_es_MX[0], unk_1EF582408, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582408 - GetProfanityFilter_es_MX(void)::sProfanityData_es_MX[0]) >> 4));
}

void sub_1BFA54F50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 7344;
  v4 = -7392;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_es_ES(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v334[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v5, "zorrones", "z*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v6, "zorronas", "z*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "zorrona", "z******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "zorras", "z*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "zorra", "z****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v10, "zorrón", "z*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v11, "vergas", "v*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v12, "verga", "v****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v13, "tragasables", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v14, "tortilleras", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v15, "tortillera", "t*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v16, "tonto", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v17, "tetas", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v18, "teta", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "sudacas", "s******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "sudaca", "s*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v21, "subnormal", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v22, "soplapollas", "s**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v23, "soplanucas", "s*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v24, "sodomitas", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v25, "sodomita", "s*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v26, "rameras", "r******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "ramera", "r*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v28, "putos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v29, "putonas", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "putona", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v31, "puto", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v32, "putas", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v33, "puta", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v34, "putón", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v35, "porongas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "poronga", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "pollas", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v38, "polla", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v39, "pinche", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v40, "pijotero", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v41, "pijo", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v42, "pendejos", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v43, "pendejo", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v44, "pendejas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v45, "pendeja", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v46, "pendón", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v47, "pelotudos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v48, "pelotudo", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v49, "parrusa", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v50, "parrús", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v51, "pajilleros", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v52, "pajillero", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v53, "pajilleras", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v54, "pajillera", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v55, "pajearse", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v56, "pajearnos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v57, "pajear", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v58, "pajéame", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v59, "ojetes", "o*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v60, "ojete", "o****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "negratas", "n*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "negrata", "n******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v63, "negracos", "n******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v64, "negraco", "n*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v65, "mierdoso", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v66, "mierdosa", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v67, "mierdas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "mierda", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v69, "marimacho", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "marimacha", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v71, "maricones", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v72, "mariconazos", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v73, "mariconazo", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v74, "mariconazas", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v75, "mariconaza", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v76, "mariconas", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "maricona", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v78, "maricas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v79, "marica", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v80, "maricón", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "maracos", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v82, "maraco", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v83, "manflora", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "manflor", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v85, "mamavergas", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v86, "mamapollas", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v87, "mamapingas", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "mamapinga", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v89, "mamabichos", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v90, "mamabicho", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v91, "malparidas", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v92, "malparida", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "lefarte", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v94, "lefarse", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v95, "lefaros", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v96, "lefarnos", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v97, "lefarme", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v98, "lefarles", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v99, "lefarle", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "lefarla", "l******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v101, "lefar", "l****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "lefada", "l*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v103, "lefa", "l***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v104, "lamepollas", "l*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v105, "lameculos", "l********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v106, "lameculo", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v107, "jotos", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v108, "joto", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v109, "jodisteis", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "jodiste", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v111, "jodimos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "jodieses", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v113, "jodiesen", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v114, "jodiese", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v115, "jodieron", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v116, "jodieras", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v117, "jodierais", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "jodiera", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v119, "jodiendo", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v120, "jodienda", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v121, "jodidos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v122, "jodido", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v123, "jodidas", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v124, "jodida", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v125, "jodió", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v126, "jodiésemos", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v127, "jodiéramos", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v128, "jodes", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v129, "joderme", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v130, "joderemos", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v131, "joderías", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v132, "joderían", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v133, "joderíamos", "j*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v134, "joderíais", "j********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v135, "jodería", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v136, "joderéis", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v137, "joderé", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v138, "joderás", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v139, "joderán", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v140, "joderá", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v141, "joder", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v142, "jodeos", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v143, "joden", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "jodemos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v145, "jode", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v146, "jodas", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v147, "jodan", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v148, "jodamos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v149, "joda", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v150, "jodías", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v151, "jodían", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v152, "jodíamos", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v153, "jodíais", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v154, "jodía", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v155, "jodí", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v156, "jodéis", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v157, "jodáis", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v158, "jódete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v159, "imbéciles", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v160, "imbécil", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v161, "idiotas", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v162, "idiota", "i*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v163, "huevones", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v164, "huevón", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v165, "hijoputas", "h********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v166, "hijoputa", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v167, "hijaputas", "h********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v168, "hijaputa", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v169, "guachupinos", "g**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v170, "guachupino", "g*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v171, "guachupinas", "g**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v172, "guachupina", "g*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v173, "golfo", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v174, "golfa", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v175, "gilipolleces", "g***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v176, "gilipollas", "g*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v177, "garchas", "g******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v178, "garcha", "g*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v179, "furcias", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v180, "furcia", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v181, "folleteo", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v182, "folles", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v183, "follen", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v184, "follemos", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v185, "folle", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v186, "follasteis", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v187, "follaste", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "follases", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v189, "follasen", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v190, "follase", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v191, "follas", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v192, "follarte", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "follarse", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v194, "follaros", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v195, "follaron", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v196, "follarnos", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v197, "follarme", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v198, "follarles", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v199, "follarle", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v200, "follarla", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v201, "follaremos", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v202, "follaras", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v203, "follaran", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v204, "follarais", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v205, "follara", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v206, "follarías", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v207, "follarían", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v208, "follaríamos", "f**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v209, "follaríais", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v210, "follaría", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v211, "follaréis", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v212, "follaré", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v213, "follarás", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v214, "follarán", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v215, "follará", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v216, "follar", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v217, "follando", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v218, "follan", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v219, "follamos", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v220, "follados", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v221, "follador", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v222, "follado", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v223, "folladas", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v224, "follada", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v225, "follad", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v226, "follabas", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v227, "follaban", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v228, "follabais", "f********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v229, "follaba", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v230, "folléis", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v231, "follé", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v232, "follásemos", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v233, "folláramos", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v234, "folláis", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v235, "follábamos", "f*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v236, "estúpidos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v237, "estúpido", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v238, "estúpidas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v239, "estúpida", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v240, "enculas", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v241, "encularte", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v242, "encularse", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v243, "encularos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v244, "encularon", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v245, "encularnos", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v246, "encularme", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v247, "encularles", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v248, "encularle", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v249, "encularla", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v250, "encularemos", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v251, "encularas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v252, "encularan", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v253, "encularais", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v254, "encularías", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v255, "encularían", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v256, "encularíamos", "e***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v257, "encularíais", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v258, "encularía", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v259, "encularéis", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v260, "encularé", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v261, "encularás", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v262, "encularán", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v263, "enculará", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v264, "encular", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v265, "enculando", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v266, "enculan", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v267, "enculamos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v268, "enculados", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v269, "enculadora", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v270, "enculador", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v271, "enculado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v272, "enculadas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v273, "enculada", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v274, "enculad", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v275, "enculabas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v276, "enculaban", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v277, "enculabais", "e*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v278, "enculaba", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v279, "enculáramos", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v280, "enculáis", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v281, "enculábamos", "e**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v282, "desgraciado", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v283, "desgraciada", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v284, "cometrancas", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v285, "comerrabos", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v286, "comepollas", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v287, "cojones", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v288, "cojón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v289, "coños", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v290, "coño", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v291, "coñitos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v292, "coñito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v293, "cipote", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v294, "chupapollas", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v295, "chupapenes", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v296, "chupaculos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v297, "chuminos", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v298, "chumino", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v299, "chuminacos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v300, "chuminaco", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v301, "chocho", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v302, "chingada", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v303, "chinacos", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v304, "chinaco", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v305, "chinacas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v306, "chinaca", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v307, "cascársela", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v308, "carapolla", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v309, "caramierda", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v310, "caraculo", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v311, "capullo", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v312, "calientarrabos", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v313, "calientapollas", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v314, "cabrones", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v315, "cabronazos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v316, "cabronazo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v317, "cabronazas", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v318, "cabronaza", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v319, "cabronas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v320, "cabrona", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v321, "cabrón", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v322, "cáscamela", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v323, "bujarra", "b******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v324, "bujarrón", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v325, "boludo", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v326, "boluda", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v327, "bocachancla", "b**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v328, "bobo", "b***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v329, "bastardo", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v330, "bastarda", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v331, "amariconados", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v332, "amariconado", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v333, "amariconadas", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v334, "amariconada", "a**********");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_es_ES(void)::sProfanityData_es_ES, (uint64_t)v5, 0x14AuLL);
    for (i = 0; i != -1980; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v334[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_es_ES(void)::sProfanityData_es_ES, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_es_ES(void)::sProfanityData_es_ES[0], unk_1EF582428, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582428 - GetProfanityFilter_es_ES(void)::sProfanityData_es_ES[0]) >> 4));
}

void sub_1BFA57B58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 15792;
  v4 = -15840;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_es_CL(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v301[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v5, "zorrones", "z*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v6, "zorronas", "z*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v7, "zorrona", "z******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "zorras", "z*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "zorra", "z****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "vergas", "v*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v11, "verga", "v****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v12, "valescallampa", "v************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v13, "valícallampa", "v***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v14, "unamierda", "u******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "unahuea", "u******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v16, "tula", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v17, "tragasables", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v18, "tortilleras", "t**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v19, "tortillera", "t*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "tontos", "t*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v21, "tonto", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "tontas", "t*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v23, "tonta", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v24, "tetas", "t****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v25, "teta", "t***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v26, "sonrisavertical", "s**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v27, "sapoculiao", "s*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v28, "sapo", "s***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v29, "sapaculiá", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v30, "sapa", "s***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v31, "sacohueas", "s********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "sacohuea", "s*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v33, "reculiao", "r*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v34, "reculiado", "r********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v35, "rechuchetumadre", "r**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "rameras", "r******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "ramera", "r*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v38, "rajas", "r****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v39, "raja", "r***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v40, "putos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v41, "putonas", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v42, "putona", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v43, "puto", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v44, "putito", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v45, "putita", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v46, "putero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v47, "putazos", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "putazo", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v49, "puta", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v50, "putón", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v51, "porlamierda", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v52, "porlacresta", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v53, "porlachucha", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v54, "pinche", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v55, "picos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v56, "pico", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v57, "pichulas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v58, "pichula", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v59, "perroculiao", "p**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v60, "perraculiá", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v61, "perra", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v62, "perkin", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "pendejos", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "pendejo", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v65, "pendejas", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v66, "pendeja", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v67, "penétrame", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v68, "pelotudos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "pelotudo", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v70, "paralahueá", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v71, "paradehuear", "p*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v72, "palpico", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v73, "palacallampa", "p***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "pajero", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v75, "pajera", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "pajearse", "p*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v77, "pajearnos", "p********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v78, "pajear", "p*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v79, "pajéame", "p******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v80, "pacos", "p****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v81, "paco", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v82, "paca", "p***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v83, "monoculiao", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v84, "mongólico", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v85, "mongólica", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v86, "monaculiá", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v87, "mierda", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "marimacho", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v89, "marimacha", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v90, "mariconesculeaos", "m***************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v91, "maricones", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v92, "mariconazos", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v93, "mariconazo", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v94, "mariconazas", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v95, "mariconaza", "m*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v96, "maricona", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v97, "marica", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v98, "maricónculeao", "m************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v99, "maricón", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v100, "maracoreculiao", "m*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v101, "maracoculiao", "m***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v102, "maraco", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v103, "maracas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v104, "maracareculiá", "m************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v105, "maracaculiá", "m**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v106, "maracaconchetumadre", "m******************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "maraca", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v108, "manguaco", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v109, "mamasán", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v110, "mamar", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v111, "mamaditas", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "mamadita", "m*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v113, "mamadas", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "mamada", "m*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v115, "mamón", "m****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v116, "malparido", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v117, "malparida", "m********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v118, "méteteloenlaraja", "m***************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v119, "métemela", "m******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v120, "lamepico", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v121, "lameculos", "l********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v122, "lameculo", "l*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v123, "lámelo", "l*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v124, "lámela", "l*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v125, "joto", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v126, "jodimos", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v127, "jodieron", "j*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v128, "jodido", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v129, "jodidas", "j******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v130, "jodida", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v131, "jodió", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v132, "jodes", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v133, "joder", "j****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v134, "joda", "j***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v135, "jódete", "j*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v136, "imbéciles", "i********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v137, "imbécil", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v138, "idiotas", "i******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v139, "idiota", "i*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v140, "huevona", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v141, "huevear", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v142, "huevada", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(v143, "huevóón", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v144, "huevá", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v145, "hueones", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v146, "hueonas", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v147, "hueona", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v148, "hueco", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v149, "hueca", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v150, "huear", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v151, "hueón", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v152, "hueás", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v153, "hueás", "h****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v154, "hueá", "h***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v155, "hueá", "h***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v156, "hociconear", "h*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v157, "hociconeando", "h***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v158, "hocicona", "h*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v159, "hocico", "h*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v160, "hocicón", "h******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v161, "hijosdeputa", "h**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v162, "hijodeputa", "h*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v163, "hijasdeputa", "h**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v164, "hijadeputa", "h*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v165, "guachosculiaos", "g**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v166, "guachoculiao", "g***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v167, "guacho", "g*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v168, "guachasculiás", "g************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v169, "guachaculiá", "g**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v170, "guacha", "g*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v171, "giles", "g****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v172, "gila", "g***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v173, "gil", "g**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v174, "follemos", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v175, "follas", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v176, "follarte", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v177, "follara", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v178, "follar", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v179, "follando", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v180, "follamos", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v181, "follaba", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v182, "follón", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v183, "follé", "f****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v184, "flaites", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v185, "flaite", "f*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v186, "feoculiao", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v187, "feaculiá", "f*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v188, "fóllame", "f******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v189, "estúpidos", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v190, "estúpido", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v191, "estúpidas", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v192, "estúpida", "e******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v193, "encularse", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v194, "enculados", "e********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v195, "enculado", "e*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v196, "desgraciado", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v197, "desgraciada", "d**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v198, "culote", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v199, "culo", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v200, "culito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v201, "culiemos", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v202, "culiao", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v203, "culiado", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v204, "culiada", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v205, "culión", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v206, "culié", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v207, "culiá", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v208, "culear", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v209, "culéame", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v210, "ctm", "c**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v211, "csm", "c**");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v212, "cresta", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v213, "conchetumadre", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v214, "conchesumadre", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v215, "conchemimare", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v216, "concha", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v217, "comolashuevas", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v218, "comolashueas", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v219, "comolapichula", "c************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v220, "comolamierda", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v221, "comolacallampa", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v222, "comoelpico", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v223, "cojones", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v224, "cojón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v225, "coños", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v226, "coño", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v227, "coñitos", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v228, "coñito", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v229, "chupapicos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v230, "chupapico", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v231, "chupapenes", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v232, "chupandopico", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v233, "chupamelsapo", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v234, "chupamelpico", "c***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v235, "chupalaquecuelga", "c***************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v236, "chupaelpico", "c**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v237, "chupaculos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v238, "chupa", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v239, "chucha", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v240, "chuchá", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v241, "chota", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v242, "choros", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v243, "choro", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v244, "choreo", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v245, "chorearon", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v246, "chorear", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v247, "chingada", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v248, "chetumare", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v249, "chapalapachala", "c*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v250, "chúpamela", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v251, "chúpalo", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v252, "chúpala", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v253, "camboyanas", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v254, "camboyana", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v255, "callampa", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v256, "cagué", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v257, "cagaron", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v258, "cagarla", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v259, "cagar", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v260, "cagao", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v261, "cagados", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v262, "cagado", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v263, "cagadas", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v264, "cagada", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v265, "cagón", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v266, "cagás", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v267, "cagás", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v268, "cagá", "c***");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v269, "cachondo", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v270, "cachondeo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v271, "cachonda", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v272, "cachita", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v273, "cacha", "c****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v274, "cabrones", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v275, "cabronazos", "c*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v276, "cabronazo", "c********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v277, "cabronas", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v278, "cabrona", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v279, "cabrear", "c******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v280, "cabrón", "c*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v281, "cabréate", "c*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v282, "buenapalpico", "b***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v283, "boludo", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v284, "boluda", "b*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v285, "bastardo", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v286, "bastarda", "b*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v287, "amariconados", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v288, "amariconado", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v289, "amariconadas", "a***********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v290, "amariconada", "a**********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v291, "alamierda", "a********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v292, "alachucha", "a*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v293, "ahuevonado", "a*********");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v294, "ahueonao", "a*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v295, "ándatealamierda", "a**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v296, "ándatealacresta", "a*************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v297, "ándatealachucha", "a**************");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v298, "Agilao", "a*****");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v299, "Agilados", "a*******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v300, "Agilada", "a******");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v301, "Agilá", "a****");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_es_CL(void)::sProfanityData_es_CL, (uint64_t)v5, 0x129uLL);
    for (i = 0; i != -1782; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v301[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_es_CL(void)::sProfanityData_es_CL, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_es_CL(void)::sProfanityData_es_CL[0], unk_1EF582448, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582448 - GetProfanityFilter_es_CL(void)::sProfanityData_es_CL[0]) >> 4));
}

void sub_1BFA5A300(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 14208;
  v4 = -14256;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_en_US(_QWORD *a1)
{
  unsigned __int8 v2;
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v4, "ape shit", "a*****t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_US(void)::sProfanityData_en_US, (uint64_t)v4, 1uLL);
    std::pair<std::string const,std::string>::~pair((uint64_t)v4);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_US(void)::sProfanityData_en_US, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_US(void)::sProfanityData_en_US[0], unk_1EF582468, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582468 - GetProfanityFilter_en_US(void)::sProfanityData_en_US[0]) >> 4));
}

void sub_1BFA5A464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_en_NZ(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[7];

  v22[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v9, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v10, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v11, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v12, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v13, "horis", "h***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v14, "hories", "h***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v15, "hori", "h**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v19, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v21, "abo", "a*o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v22, "abbo", "a**o");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_NZ(void)::sProfanityData_en_NZ, (uint64_t)v5, 0x12uLL);
    for (i = 102; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_NZ(void)::sProfanityData_en_NZ, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_NZ(void)::sProfanityData_en_NZ[0], unk_1EF582488, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582488 - GetProfanityFilter_en_NZ(void)::sProfanityData_en_NZ[0]) >> 4));
}

void sub_1BFA5A7B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 816; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_en_IN(_QWORD *a1)
{
  unsigned __int8 v2;
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v4, "ape shit", "a*****t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_IN(void)::sProfanityData_en_IN, (uint64_t)v4, 1uLL);
    std::pair<std::string const,std::string>::~pair((uint64_t)v4);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_IN(void)::sProfanityData_en_IN, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_IN(void)::sProfanityData_en_IN[0], unk_1EF5824A8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF5824A8 - GetProfanityFilter_en_IN(void)::sProfanityData_en_IN[0]) >> 4));
}

void sub_1BFA5A910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_en_CA(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[7];

  v39[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v5, "stfo", "s**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v6, "skankasses", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v7, "skankass's", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v8, "skankass", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v9, "queer", "q***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v10, "queef", "q***f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v11, "peckerwood", "p********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v12, "nutsacks'", "n*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "nutsacks", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v14, "nutsack's", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "nutsack", "n*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v16, "muffdivers'", "m*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v17, "muffdivers", "m********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v18, "muffdiver's", "m*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v19, "muffdiver", "m*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "koochie", "k*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v21, "kooch", "k***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v22, "jackoffs'", "j*******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v23, "jackoff's", "j*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v24, "hooha", "h***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v25, "hoochies", "h******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v26, "hoochie's", "h*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "hoochie", "h*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v28, "douchebag", "d*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v29, "dbags", "d***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "dbag's", "d****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v31, "dbag", "d**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "bumholes", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v33, "bumhole's", "b*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "bumhole", "b*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v35, "buggars", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v36, "buggar's", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v37, "bitchfaces'", "b*********'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v38, "bitchfaces", "b********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v39, "bitchface", "b*******e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_CA(void)::sProfanityData_en_CA, (uint64_t)v5, 0x23uLL);
    for (i = 204; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_CA(void)::sProfanityData_en_CA, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_CA(void)::sProfanityData_en_CA[0], unk_1EF5824C8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF5824C8 - GetProfanityFilter_en_CA(void)::sProfanityData_en_CA[0]) >> 4));
}

void sub_1BFA5AE5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 1632; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_en_ZA(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v134[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v5, "wog’s", "w**’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "wogs’", "w***’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v7, "wogs", "w*gs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v8, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v9, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v10, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v11, "unfucking", "u*****ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v12, "unfuckable", "u********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v13, "skullfucked", "s********ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v14, "skullfuck", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v15, "shyster’s", "s******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v16, "shysters’", "s*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v17, "shysters", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "shyster", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "quim", "q**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v20, "poes", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v21, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v22, "naai", "n**i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v23, "mong’s", "m***’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v24, "mongs’", "m****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v25, "mongs", "m***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v26, "mongoloid’s", "m********’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v27, "mongoloids’", "m*********’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v28, "mongoloids", "m*******ds");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v29, "mongoloid", "m*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v30, "mong", "m**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v31, "mofo’s", "m***’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "mofos’", "m****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v33, "mofos", "m***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v34, "moffie’s", "m*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v35, "moffies’", "m******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "moffies", "m*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "moffie", "m***ie");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "kraut’s", "k****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v39, "krauts’", "k*****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v40, "kak", "k*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v41, "kaffirs'", "k******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v42, "kaffirs", "k****rs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v43, "kaffir's", "k*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v44, "kaffir", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v45, "kaffers'", "k******'");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v46, "kaffers", "k****rs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v47, "kaffer's", "k*****'s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v48, "kaffer", "k****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v49, "jizzes", "j***es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v50, "jizzed", "j***ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v51, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v52, "jackoff’s", "j******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v53, "jackoffs’", "j*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v54, "jackoffs", "j******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v55, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v56, "honkies’", "h******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v57, "gringo’s", "g*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v58, "gringos’", "g******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v59, "golliwog’s", "g*******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v60, "golliwogs’", "g********’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v61, "golliwogs", "g*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v62, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v63, "gicker’s", "g*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v64, "gickers’", "g******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v65, "gickers", "g*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v66, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v67, "fuckwit’s", "f******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v68, "fuckwits’", "f*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "fuckwits", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v70, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v71, "fuckwad’s", "f******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v72, "fuckwads’", "f*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "fuckwads", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v74, "fucker’s", "f*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v75, "fuckers’", "f******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v76, "foks", "f*ks");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "fokken", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v78, "fok", "f*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v79, "felching", "f****ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "felches", "f****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v81, "felcher’s", "f******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v82, "felchers’", "f*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v83, "felchers", "f*****rs");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "felcher", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v85, "felched", "f****ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v86, "felch", "f***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "fag’s", "f**’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "fags’", "f***’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v89, "facefucks", "f*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v90, "facefucking", "f*******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v91, "facefucked", "f*******ed");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v92, "facefuck", "f******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v93, "cunted", "c****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v94, "cock’s", "c***’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "cocks’", "c****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v96, "cocks", "c***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v97, "cock", "c**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v98, "chinamen’s", "c*******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v99, "chinaman’s", "c*******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v100, "chickenshit’s", "c**********’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v101, "chickenshits’", "c***********’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v102, "boong’s", "b****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v103, "boongs’", "b*****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v104, "boongs", "b****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v105, "boonga’s", "b*****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v106, "boongas’", "b******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v107, "boongas", "b*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "boonga", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v109, "boong", "b***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v110, "bollock’s", "b******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v111, "bollocks’", "b*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v113, "bollock", "b*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v114, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v115, "blow job’s", "b******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v116, "blow jobs’", "b*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v117, "blow jobs", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v118, "bitch’s", "b****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v119, "bitches’", "b******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v120, "bitches", "b****es");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v121, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v122, "bellend’s", "b******’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v123, "bellends’", "b*******’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v124, "bellends", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v125, "bellend", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v126, "arsefucking", "a*******ing");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "argie’s", "a****’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v128, "argies’", "a*****’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "argies", "a****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v130, "argie", "a***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v131, "Hottentot’s", "H********’s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v132, "Hottentots’", "H*********’");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v133, "Hottentots", "H*******ts");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v134, "Hottentot", "H*******t");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_ZA(void)::sProfanityData_en_ZA, (uint64_t)v5, 0x82uLL);
    for (i = 0; i != -780; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v134[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_ZA(void)::sProfanityData_en_ZA, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_en_ZA(void)::sProfanityData_en_ZA[0], unk_1EF5824E8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF5824E8 - GetProfanityFilter_en_ZA(void)::sProfanityData_en_ZA[0]) >> 4));
}

void sub_1BFA5BFD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 6192;
  v4 = -6240;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_en_SG(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v9, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v10, "shyster", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v11, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v12, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v13, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v14, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v15, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v16, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "boonga", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v18, "boong", "b***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v19, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v20, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v21, "argie", "a***e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_SG(void)::sProfanityData_en_SG, (uint64_t)v5, 0x11uLL);
    for (i = 96; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_SG(void)::sProfanityData_en_SG, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_SG(void)::sProfanityData_en_SG[0], unk_1EF582508, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582508 - GetProfanityFilter_en_SG(void)::sProfanityData_en_SG[0]) >> 4));
}

void sub_1BFA5C338(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 768; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_en_GB(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[7];

  v34[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v9, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v10, "slag", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "shyster", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v12, "quim", "q**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v13, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v14, "mongoloid", "m*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v15, "mong", "m**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v16, "minge", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v17, "knobheads", "k******ds");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v18, "knobhead", "k******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v20, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v21, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v22, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v23, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v24, "felcher", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v25, "felch", "f***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v26, "fanny", "f***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v27, "cunted", "c****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "boonga", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v29, "boong", "b***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v31, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v32, "bint", "b**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v33, "bellend", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v34, "argie", "a***e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_GB(void)::sProfanityData_en_GB, (uint64_t)v5, 0x1EuLL);
    for (i = 174; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_GB(void)::sProfanityData_en_GB, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_GB(void)::sProfanityData_en_GB[0], unk_1EF582528, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582528 - GetProfanityFilter_en_GB(void)::sProfanityData_en_GB[0]) >> 4));
}

void sub_1BFA5C81C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 1392; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_en_AU(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[7];

  v19[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v8, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v9, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v10, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v11, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v12, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v14, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v16, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v17, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v18, "abo", "a*o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v19, "abbo", "a**o");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_AU(void)::sProfanityData_en_AU, (uint64_t)v5, 0xFuLL);
    for (i = 84; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_AU(void)::sProfanityData_en_AU, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_AU(void)::sProfanityData_en_AU[0], unk_1EF582548, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582548 - GetProfanityFilter_en_AU(void)::sProfanityData_en_AU[0]) >> 4));
}

void sub_1BFA5CB40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 672; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_en_IE(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[7];

  v45[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v5, "wog", "w*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v6, "waz", "w*z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v7, "wab", "w*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "tosspot", "t*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v9, "tosser", "t****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v10, "squits", "s****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v11, "spastic", "s*****c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v12, "smeg", "s**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v13, "shyster", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v14, "scrote", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v15, "quim", "q**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v16, "pox", "p*x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v17, "poe", "p*e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v18, "munter", "m****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v19, "mongoloid", "m*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v20, "mong", "m**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v21, "mong", "m**g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v22, "langered", "l******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v23, "langer", "l****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v24, "jism", "j**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v25, "jackoff", "j*****f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v26, "gowl", "g**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v27, "gombeen", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v28, "golliwog", "g******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v29, "gobshite", "g******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v30, "gicker", "g****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v31, "geebag", "g****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "fuckwit", "f*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v33, "fucked", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v34, "felcher", "f*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v35, "felch", "f***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v36, "cuntish", "c*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "cunted", "c****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v38, "boonga", "b****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v39, "boong", "b***g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v40, "bollocks", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v41, "bollocked", "b*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v42, "bollixed", "b******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v43, "bollix", "b****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v44, "bellend", "b*****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v45, "argie", "a***e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_en_IE(void)::sProfanityData_en_IE, (uint64_t)v5, 0x29uLL);
    for (i = 240; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_en_IE(void)::sProfanityData_en_IE, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_en_IE(void)::sProfanityData_en_IE[0], unk_1EF582568, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF582568 - GetProfanityFilter_en_IE(void)::sProfanityData_en_IE[0]) >> 4));
}

void sub_1BFA5D170(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 1920; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D204(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D254(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D2A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D2F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D344(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D394(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D3E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D434(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D484(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D4D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[26],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D524(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D574(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D5C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D614(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D664(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D6B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D704(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D754(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D7A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D7F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D844(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D894(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D8E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D934(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D984(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5D9D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DA24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DA74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DAC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DB14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DB64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DBB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DC04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DC54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DCA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DCF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DD44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DD94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DDE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DE34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DE84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DED4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DF24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DF74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5DFC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E014(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E064(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E0B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E104(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E154(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E1A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E1F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E244(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E294(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E2E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[21],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E334(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[23],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E384(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E3D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E424(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E474(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E4C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E514(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E564(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[43],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E5B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E604(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[34],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E654(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[46],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E6A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[50],char const(&)[20],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E6F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E744(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E794(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E7E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E834(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E884(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E8D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E924(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E974(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5E9C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EA14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EA64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EAB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EB04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EB54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EBA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EBF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EC44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EC94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[36],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5ECE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5ED34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5ED84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EDD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EE24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EE74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EEC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EF14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EF64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5EFB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F004(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[40],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F054(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[49],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F0A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F0F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F144(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[20],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F194(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[19],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F1E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[21],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F234(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[22],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F284(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[23],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F2D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[24],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F324(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[25],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F374(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F3C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F414(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F464(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F4B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F504(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F554(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[28],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F5A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[26],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F5F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[29],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F644(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[27],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F694(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F6E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F734(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F784(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F7D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F824(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F874(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F8C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F914(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[31],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F964(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[33],char const(&)[19],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5F9B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[39],char const(&)[22],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FA04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FA54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FAA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FAF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FB44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FB94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FBE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FC34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FC84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[37],char const(&)[21],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FCD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[35],char const(&)[20],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FD24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FD74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FDC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[22],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FE14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FE64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[25],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FEB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[21],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FF04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[20],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FF54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FFA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[19],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA5FFF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[18],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA60044(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[22],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA60094(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

uint64_t siri::dialogengine::FileInfoCache::FileInfoCache(uint64_t a1, __int128 *a2, double a3)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = (std::string *)(a1 + 64);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(double *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  return a1;
}

void sub_1BFA601CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::FileInfoCache::FileExists(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _BOOL4 v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  const void **v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  double v17;
  _BOOL8 v18;
  std::string *v19;
  __int128 v20;
  char *v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  timeval v25;
  void *v27[2];
  unsigned __int8 v28;
  std::string v29;
  std::string __p;
  timeval v31;
  std::string::size_type v32;

  std::mutex::lock((std::mutex *)a1);
  v4 = *(_QWORD *)(a1 + 104);
  if (!v4)
    goto LABEL_8;
  v5 = (uint64_t *)(a1 + 104);
  do
  {
    v6 = std::less<std::string>::operator()[abi:ne180100](a1 + 112, (const void **)(v4 + 32), (const void **)a2);
    v7 = (uint64_t *)(v4 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v4;
      v5 = (uint64_t *)v4;
    }
    v4 = *v7;
  }
  while (*v7);
  if (v5 == (uint64_t *)(a1 + 104)
    || std::less<std::string>::operator()[abi:ne180100](a1 + 112, (const void **)a2, (const void **)v5 + 4))
  {
LABEL_8:
    siri::dialogengine::JoinPath(a2, a1 + 64, (uint64_t)&__p);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = (uint64_t **)(a1 + 104);
    v10 = (uint64_t **)(a1 + 104);
    if (!v8)
      goto LABEL_17;
    v9 = (uint64_t **)(a1 + 104);
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v8;
        v11 = (const void **)(v8 + 4);
        if (!std::less<std::string>::operator()[abi:ne180100](a1 + 112, (const void **)a2, (const void **)v8 + 4))
          break;
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_17;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](a1 + 112, v11, (const void **)a2))
        break;
      v9 = v10 + 1;
      v8 = v10[1];
      if (!v8)
        goto LABEL_17;
    }
    v5 = *v9;
    if (!*v9)
    {
LABEL_17:
      v12 = (char *)operator new(0x68uLL);
      v5 = (uint64_t *)v12;
      v31.tv_sec = (__darwin_time_t)v12;
      *(_QWORD *)&v31.tv_usec = a1 + 104;
      LOBYTE(v32) = 0;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v12 + 32), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *((_OWORD *)v12 + 2) = *(_OWORD *)a2;
        *((_QWORD *)v12 + 6) = *(_QWORD *)(a2 + 16);
      }
      v13 = (std::string *)(v5 + 7);
      v14 = *(_QWORD *)(a1 + 88);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v5[9] = __p.__r_.__value_.__r.__words[2];
      }
      v5[10] = v14;
      *((_BYTE *)v5 + 88) = 0;
      v5[12] = 0;
      LOBYTE(v32) = 1;
      *v5 = 0;
      v5[1] = 0;
      v5[2] = (uint64_t)v10;
      *v9 = v5;
      v15 = **(_QWORD **)(a1 + 96);
      v16 = v5;
      if (v15)
      {
        *(_QWORD *)(a1 + 96) = v15;
        v16 = *v9;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 104), v16);
      ++*(_QWORD *)(a1 + 112);
      v31.tv_sec = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v31);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  gettimeofday(&v31, 0);
  v17 = (double)v31.tv_usec / 1000000.0 + (double)v31.tv_sec;
  if (*((double *)v5 + 12) >= v17 - *((double *)v5 + 10))
  {
    v18 = *((_BYTE *)v5 + 88) != 0;
  }
  else
  {
    *((double *)v5 + 12) = v17;
    v18 = siri::dialogengine::FileExists(v5 + 7);
    if (*((_BYTE *)v5 + 88) != v18)
    {
      std::operator+<char>();
      v19 = std::string::append(&v29, "' exists: ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (*((_BYTE *)v5 + 88))
        v21 = "true";
      else
        v21 = "false";
      std::string::basic_string[abi:ne180100]<0>(v27, v21);
      if ((v28 & 0x80u) == 0)
        v22 = v27;
      else
        v22 = (void **)v27[0];
      if ((v28 & 0x80u) == 0)
        v23 = v28;
      else
        v23 = (std::string::size_type)v27[1];
      v24 = std::string::append(&__p, (const std::string::value_type *)v22, v23);
      v25 = *(timeval *)&v24->__r_.__value_.__l.__data_;
      v32 = v24->__r_.__value_.__r.__words[2];
      v31 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::Debug((siri::dialogengine *)&v31);
      if (SHIBYTE(v32) < 0)
        operator delete((void *)v31.tv_sec);
      if ((char)v28 < 0)
        operator delete(v27[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      *((_BYTE *)v5 + 88) = v18;
    }
  }
  std::mutex::unlock((std::mutex *)a1);
  return v18;
}

void sub_1BFA60540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::mutex *v33;

  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FileInfoCache::Clear(std::mutex *this)
{
  std::mutex::lock(this);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)&this[1].__m_.__opaque[32]);
  *(_QWORD *)&this[1].__m_.__opaque[24] = (char *)this + 104;
  *(_QWORD *)&this[1].__m_.__opaque[40] = 0;
  *(_QWORD *)&this[1].__m_.__opaque[32] = 0;
  std::mutex::unlock(this);
}

void siri::dialogengine::ValidateXmlElementVersion(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  __int128 v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  _QWORD *v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;

  if (!a1)
    goto LABEL_15;
  v6 = *(_QWORD *)(a1 + 504);
  v7 = *(std::__shared_weak_count **)(a1 + 512);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v6)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a2 + 8);
    v11 = v10 == 0;
    if (!v7)
      goto LABEL_14;
  }
  else
  {
    v11 = 1;
    if (!v7)
      goto LABEL_14;
  }
  v12 = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v11)
      goto LABEL_15;
    goto LABEL_17;
  }
LABEL_14:
  if (v11)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    return;
  }
LABEL_17:
  if ((v14 & 1) == 0
  {
    v37 = (_QWORD *)operator new();
    *v37 = 0;
    siri::dialogengine::GetXmlElementVersionsMap(void)::flag = (uint64_t)v37;
  }
  v15 = atomic_load((unint64_t *)siri::dialogengine::GetXmlElementVersionsMap(void)::flag);
  if (v15 != -1)
  {
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetXmlElementVersionsMap(void)::flag, &v41, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetXmlElementVersionsMap(void)::$_0 &&>>);
  }
  v16 = siri::dialogengine::GetXmlElementVersionsMap(void)::xmlElementVersionsMap;
  siri::dialogengine::StringToLower(a2, (uint64_t)&v42);
  v17 = std::__tree<std::string>::find<std::string>(v16, (const void **)&v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (v16 + 8 == v17)
    goto LABEL_59;
  v18 = *(_QWORD *)(a1 + 504);
  v19 = *(std::__shared_weak_count **)(a1 + 512);
  v41.__r_.__value_.__r.__words[0] = v18;
  v41.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (*(char *)(v18 + 175) < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(v18 + 152), *(_QWORD *)(v18 + 160));
  else
    v42 = *(std::string *)(v18 + 152);
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (!siri::dialogengine::IsFeatureVersionGreaterThanFileVersion(v17 + 56, (uint64_t)&v42))
  {
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
LABEL_59:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    return;
  }
  std::operator+<char>();
  v24 = std::string::append(&v38, "' requires format version ");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = *(char *)(v17 + 79);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)(v17 + 56);
  else
    v27 = *(const std::string::value_type **)(v17 + 56);
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(v17 + 79);
  else
    v28 = *(_QWORD *)(v17 + 64);
  v29 = std::string::append(&v39, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v40, " but CAT file has version ");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v42;
  else
    v33 = (std::string *)v42.__r_.__value_.__r.__words[0];
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  else
    size = v42.__r_.__value_.__l.__size_;
  v35 = std::string::append(&v41, (const std::string::value_type *)v33, size);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a3[2] = *((_QWORD *)&v35->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
}

void sub_1BFA609B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetXmlElementVersionsMap(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  const void **v2;
  const void *v3[3];
  _QWORD v4[3];
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v3, "full");
  std::string::basic_string[abi:ne180100]<0>(v4, "2.4");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[4],0>(v5, "supporting", "2.4");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[4],0>(v6, "sub-condition");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[4],0>(v7, "visual", "2.0");
  std::string::basic_string[abi:ne180100]<0>(v8, "param");
  std::string::basic_string[abi:ne180100]<0>(v9, "2.0");
  std::string::basic_string[abi:ne180100]<0>(v10, "sub");
  std::string::basic_string[abi:ne180100]<0>(v11, "1.4");
  std::map<std::string,std::string>::map[abi:ne180100](v0, v3, 6);
  siri::dialogengine::GetXmlElementVersionsMap(void)::xmlElementVersionsMap = v0;
  v1 = 36;
  do
  {
    v2 = &v3[v1];
    if (SHIBYTE(v3[v1 - 1]) < 0)
      operator delete((void *)*(v2 - 3));
    if (*((char *)v2 - 25) < 0)
      operator delete((void *)*(v2 - 6));
    v1 -= 6;
  }
  while (v1 * 8);
}

void sub_1BFA60BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;

  v54 = 288;
  while (1)
  {
    v55 = v52 + v54;
    if (*(char *)(v52 + v54 - 1) < 0)
      operator delete(*(void **)(v55 - 24));
    if (*(char *)(v55 - 25) < 0)
      operator delete(*(void **)(v55 - 48));
    v54 -= 48;
    if (!v54)
    {
      MEMORY[0x1C3B8D890](v51, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t siri::dialogengine::IsFeatureVersionGreaterThanFileVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    return siri::dialogengine::VersionGreaterThan(a1, a2);
  else
    return 0;
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA60D30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[4],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "2.0");
  return a1;
}

void sub_1BFA60D80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA60DD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ValidateXmlAttributeVersion(_QWORD *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  size_t *v14;
  const void *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  unsigned __int8 v19;
  unint64_t v20;
  _QWORD *v21;
  size_t v22;
  std::string *v23;
  const void *v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::value_type *v29;
  std::string::size_type size;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  BOOL v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::string *v46;
  std::string *v47;
  __int128 v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  int v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  _QWORD *v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string *v75;
  std::__shared_weak_count *v76;
  std::string v77;
  _DWORD v78[2];
  std::string v79;
  int v80;

  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(a4, "");
    return;
  }
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v79, (const siri::dialogengine::RequestInfo *)(a1 + 1));
  v8 = v80;
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&v79.__r_.__value_.__l.__data_);
  if ((v8 & 0x80) == 0)
    goto LABEL_3;
  v9 = a1[63];
  v10 = (std::__shared_weak_count *)a1[64];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    if (!v9)
    {
      v35 = (unint64_t *)&v10->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      goto LABEL_3;
    }
    v13 = (char *)a2 + 23;
    v14 = (size_t *)(a2 + 1);
    if (*((char *)a2 + 23) >= 0)
      v15 = (const void *)*((unsigned __int8 *)a2 + 23);
    else
      v15 = a2[1];
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (!v15)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(a4, "");
      return;
    }
  }
  else
  {
    if (!v9)
      goto LABEL_3;
    v13 = (char *)a2 + 23;
    v18 = (const void *)*((unsigned __int8 *)a2 + 23);
    v14 = (size_t *)(a2 + 1);
    if ((char)v18 < 0)
      v18 = a2[1];
    if (!v18)
      goto LABEL_3;
  }
  if ((v19 & 1) == 0
  {
    v67 = (_QWORD *)operator new();
    *v67 = 0;
    siri::dialogengine::GetXmlAttributeVersionsMap(void)::flag = (uint64_t)v67;
  }
  v20 = atomic_load((unint64_t *)siri::dialogengine::GetXmlAttributeVersionsMap(void)::flag);
  if (v20 != -1)
  {
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
    v75 = &v79;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetXmlAttributeVersionsMap(void)::flag, &v75, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetXmlAttributeVersionsMap(void)::$_0 &&>>);
  }
  v21 = (_QWORD *)siri::dialogengine::GetXmlAttributeVersionsMap(void)::xmlAttributeVersionsMap;
  if (*v13 >= 0)
    v22 = *v13;
  else
    v22 = *v14;
  v23 = &v79;
  std::string::basic_string[abi:ne180100]((uint64_t)&v79, v22 + 1);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if (v22)
  {
    if (*((char *)a2 + 23) >= 0)
      v24 = a2;
    else
      v24 = *a2;
    memmove(v23, v24, v22);
  }
  *(_WORD *)((char *)&v23->__r_.__value_.__l.__data_ + v22) = 47;
  v25 = *(char *)(a3 + 23);
  if (v25 >= 0)
    v26 = (const std::string::value_type *)a3;
  else
    v26 = *(const std::string::value_type **)a3;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 23);
  else
    v27 = *(_QWORD *)(a3 + 8);
  v28 = std::string::append(&v79, v26, v27);
  v29 = (std::string::value_type *)v28->__r_.__value_.__r.__words[0];
  size = v28->__r_.__value_.__l.__size_;
  v78[0] = v28->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v78 + 3) = *(_DWORD *)((char *)&v28->__r_.__value_.__r.__words[2] + 3);
  v31 = SHIBYTE(v28->__r_.__value_.__r.__words[2]);
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v34 = (_QWORD *)*v21;
  v33 = v21 + 1;
  v32 = v34;
  if (v31 < 0)
  {
    std::string::__init_copy_ctor_external(&v77, v29, size);
  }
  else
  {
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    v77.__r_.__value_.__l.__size_ = size;
    LODWORD(v77.__r_.__value_.__r.__words[2]) = v78[0];
    *(_DWORD *)((char *)&v77.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v78 + 3);
    *((_BYTE *)&v77.__r_.__value_.__s + 23) = v31;
  }
  if (v32 != v33)
  {
    while (!siri::dialogengine::StringsEqual((uint64_t)&v77, (uint64_t)(v32 + 4)))
    {
      v37 = (_QWORD *)v32[1];
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = (_QWORD *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (_QWORD *)v32[2];
          v39 = *v38 == (_QWORD)v32;
          v32 = v38;
        }
        while (!v39);
      }
      v32 = v38;
      if (v38 == v33)
      {
        v32 = v33;
        break;
      }
    }
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (v32 != v33)
  {
    v40 = a1[63];
    v41 = (std::__shared_weak_count *)a1[64];
    v75 = (std::string *)v40;
    v76 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    if (*(char *)(v40 + 175) < 0)
      std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)(v40 + 152), *(_QWORD *)(v40 + 160));
    else
      v79 = *(std::string *)(v40 + 152);
    if (v41)
    {
      v44 = (unint64_t *)&v41->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (siri::dialogengine::IsFeatureVersionGreaterThanFileVersion((uint64_t)(v32 + 7), (uint64_t)&v79))
    {
      siri::dialogengine::StringSplit((unsigned __int8 *)v32 + 32, "/", &v75);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v75) >> 3) <= 1)
        v46 = (std::string *)a3;
      else
        v46 = v75 + 1;
      if (SHIBYTE(v46->__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v74, v46->__r_.__value_.__l.__data_, v46->__r_.__value_.__l.__size_);
      else
        v74 = *v46;
      std::operator+<char>();
      v47 = std::string::append(&v68, "' on element '");
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      v49 = *((char *)a2 + 23);
      if (v49 >= 0)
        v50 = (const std::string::value_type *)a2;
      else
        v50 = (const std::string::value_type *)*a2;
      if (v49 >= 0)
        v51 = *((unsigned __int8 *)a2 + 23);
      else
        v51 = (std::string::size_type)a2[1];
      v52 = std::string::append(&v69, v50, v51);
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      v54 = std::string::append(&v70, "' requires format version ");
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      v56 = *((char *)v32 + 79);
      if (v56 >= 0)
        v57 = (const std::string::value_type *)(v32 + 7);
      else
        v57 = (const std::string::value_type *)v32[7];
      if (v56 >= 0)
        v58 = *((unsigned __int8 *)v32 + 79);
      else
        v58 = v32[8];
      v59 = std::string::append(&v71, v57, v58);
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v72.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      v61 = std::string::append(&v72, " but CAT file has version ");
      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &v79;
      else
        v63 = (std::string *)v79.__r_.__value_.__r.__words[0];
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
      else
        v64 = v79.__r_.__value_.__l.__size_;
      v65 = std::string::append(&v73, (const std::string::value_type *)v63, v64);
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      a4[2] = *((_QWORD *)&v65->__r_.__value_.__l + 2);
      *(_OWORD *)a4 = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      goto LABEL_118;
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(a4, "");
LABEL_118:
  if (v31 < 0)
    operator delete(v29);
}

void sub_1BFA61430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetXmlAttributeVersionsMap(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  const void **v2;
  const void *v3[6];
  _QWORD v4[6];
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[6];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[6];
  _QWORD v27[7];

  v27[6] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[4],0>(v3, "dialog/keywords", "3.4");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[4],0>(v4, "var/iterator", "3.0");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[4],0>(v5, "var/formatPhrase", "3.0");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[4],0>(v6, "dialog/type", "2.4");
  std::string::basic_string[abi:ne180100]<0>(v7, "var/semanticConcept");
  std::string::basic_string[abi:ne180100]<0>(v8, "2.0");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[4],0>(v9, "dialog/weight");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[4],0>(v10, "text/weight", "2.0");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[4],0>(v11, "random/weight");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[4],0>(v12, "first/weight", "2.0");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[4],0>(v13, "switch/weight");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[4],0>(v14, "all/weight", "2.0");
  std::string::basic_string[abi:ne180100]<0>(v15, "phrase/id");
  std::string::basic_string[abi:ne180100]<0>(v16, "1.4");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(v17, "tts/play");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[4],0>(v18, "var/id", "1.4");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[4],0>(v19, "expression/note", "1.4");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(v20, "and/note");
  std::string::basic_string[abi:ne180100]<0>(v21, "or/note");
  std::string::basic_string[abi:ne180100]<0>(v22, "1.4");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(v23, "not/note");
  std::string::basic_string[abi:ne180100]<0>(v24, "break/strength");
  std::string::basic_string[abi:ne180100]<0>(v25, "1.4");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[4],0>(v26, "dialog/printonly", "1.1");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[4],0>(v27, "quantity/inflect", "4.0");
  std::map<std::string,std::string>::map[abi:ne180100](v0, v3, 21);
  siri::dialogengine::GetXmlAttributeVersionsMap(void)::xmlAttributeVersionsMap = v0;
  v1 = 126;
  do
  {
    v2 = &v3[v1];
    if (SHIBYTE(v3[v1 - 1]) < 0)
      operator delete((void *)*(v2 - 3));
    if (*((char *)v2 - 25) < 0)
      operator delete((void *)*(v2 - 6));
    v1 -= 6;
  }
  while (v1 * 8);
}

void sub_1BFA618A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = 1008;
  while (1)
  {
    v5 = v2 + v4;
    if (*(char *)(v2 + v4 - 1) < 0)
      operator delete(*(void **)(v5 - 24));
    if (*(char *)(v5 - 25) < 0)
      operator delete(*(void **)(v5 - 48));
    v4 -= 48;
    if (!v4)
    {
      MEMORY[0x1C3B8D890](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA619BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA61A0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA61A5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BFA61AAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "1.4");
  return a1;
}

void sub_1BFA61AFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ValidateVariableVersion(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unint64_t *v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::string::size_type size;
  uint64_t v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  unint64_t v25;
  std::string::size_type v26;
  std::string::size_type v27;
  char v28;
  int v29;
  int v30;
  std::string *v31;
  char v32;
  char v33;
  std::string::size_type v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  size_t v40;
  std::string *v41;
  const void *v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  char v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  void *__p;
  char v62;
  _BYTE __s1[96];
  std::string v64;
  char v65;
  std::string v66;
  std::string v67;
  uint64_t v68;
  uint64_t v69;

  if (!a1)
    goto LABEL_15;
  v6 = *(_QWORD *)(a1 + 504);
  v7 = *(std::__shared_weak_count **)(a1 + 512);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v6)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a2 + 8);
    v11 = v10 == 0;
    if (!v7)
      goto LABEL_14;
  }
  else
  {
    v11 = 1;
    if (!v7)
      goto LABEL_14;
  }
  v12 = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v11)
      goto LABEL_15;
    goto LABEL_17;
  }
LABEL_14:
  if (v11)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    return;
  }
LABEL_17:
  siri::dialogengine::GetLiteralType((std::string *)a2, __s1);
  v14 = strlen(siri::dialogengine::TYPE_UNKNOWN);
  if ((__s1[23] & 0x80000000) == 0)
  {
    if (v14 == __s1[23] && !memcmp(__s1, siri::dialogengine::TYPE_UNKNOWN, v14))
      goto LABEL_24;
LABEL_90:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    return;
  }
  if (v14 != *(_QWORD *)&__s1[8])
  {
    operator delete(*(void **)__s1);
    goto LABEL_90;
  }
  if (v14 == -1)
    std::string::__throw_out_of_range[abi:ne180100]();
  v15 = *(void **)__s1;
  v16 = memcmp(*(const void **)__s1, siri::dialogengine::TYPE_UNKNOWN, v14);
  operator delete(v15);
  if (v16)
    goto LABEL_90;
LABEL_24:
  siri::dialogengine::StringSplit((unsigned __int8 *)a2, ".", &v68);
  memset(&v67, 0, sizeof(v67));
  memset(&v66, 0, sizeof(v66));
  v17 = v68;
  if (v69 != v68)
  {
    v18 = 0;
    v19 = 0;
    v55 = 0;
    while (1)
    {
      size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v67.__r_.__value_.__l.__size_;
      if (size)
      {
        std::string::append(&v67, ".");
        v17 = v68;
      }
      v21 = v17 + v18;
      v22 = *(char *)(v21 + 23);
      if (v22 >= 0)
        v23 = (const std::string::value_type *)v21;
      else
        v23 = *(const std::string::value_type **)v21;
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(v21 + 23);
      else
        v24 = *(_QWORD *)(v21 + 8);
      std::string::append(&v67, v23, v24);
      __s1[0] = 0;
      v65 = 0;
      v25 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 3) - 1;
      siri::dialogengine::ResolveType((void **)__s1, a1, (uint64_t)&v67, v19 == v25, (uint64_t)&__p);
      if (v62 < 0)
        operator delete(__p);
      if (!v65)
        goto LABEL_87;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v60, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
      else
        v60 = v64;
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      else
        v26 = v60.__r_.__value_.__l.__size_;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v60.__r_.__value_.__l.__data_);
        if (!v26)
          goto LABEL_85;
      }
      else if (!v26)
      {
        goto LABEL_85;
      }
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      else
        v27 = v66.__r_.__value_.__l.__size_;
      v28 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      if (!v27)
        goto LABEL_61;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v60, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
      else
        v60 = v64;
      v29 = siri::dialogengine::VersionGreaterThan((uint64_t)&v60, (uint64_t)&v66);
      v30 = v29;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v60.__r_.__value_.__l.__data_);
        if (!v30)
          goto LABEL_85;
LABEL_60:
        v28 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
LABEL_61:
        if (v28 < 0)
          std::string::__init_copy_ctor_external(&v60, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
        else
          v60 = v64;
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
        v66 = v60;
        if (v19 != v25)
          goto LABEL_73;
        if ((__s1[31] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)&__s1[8], *(std::string::size_type *)&__s1[16]);
        else
          v60 = *(std::string *)&__s1[8];
        if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) == 8)
          {
            v31 = &v60;
            goto LABEL_75;
          }
LABEL_73:
          v32 = 0;
LABEL_84:
          v55 |= v32;
          goto LABEL_85;
        }
        v31 = (std::string *)v60.__r_.__value_.__r.__words[0];
        if (v60.__r_.__value_.__l.__size_ == 8)
        {
LABEL_75:
          if (v31->__r_.__value_.__r.__words[0] == 0x676E697274536F74)
          {
            std::string::basic_string[abi:ne180100]<0>(&v59, "toString");
            v33 = siri::dialogengine::StringContains((char **)a2, (char *)&v59);
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v59.__r_.__value_.__l.__data_);
            v32 = v33 ^ 1;
            if ((*((_BYTE *)&v60.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_84;
          }
          else
          {
            v32 = 0;
            if ((*((_BYTE *)&v60.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_84;
          }
          v31 = (std::string *)v60.__r_.__value_.__r.__words[0];
        }
        else
        {
          v32 = 0;
        }
        operator delete(v31);
        goto LABEL_84;
      }
      if (v29)
        goto LABEL_60;
LABEL_85:
      if (v65)
        siri::dialogengine::ObjectProperty::~ObjectProperty((void **)__s1);
LABEL_87:
      ++v19;
      v17 = v68;
      v18 += 24;
      if (0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 3) <= v19)
        goto LABEL_92;
    }
  }
  v55 = 0;
LABEL_92:
  if (*(_DWORD *)(a1 + 8) != 1)
  {
    v34 = *(_QWORD *)(a1 + 504);
    v35 = *(std::__shared_weak_count **)(a1 + 512);
    v60.__r_.__value_.__r.__words[0] = v34;
    v60.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    if (*(char *)(v34 + 175) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__s1, *(const std::string::value_type **)(v34 + 152), *(_QWORD *)(v34 + 160));
    }
    else
    {
      *(_OWORD *)__s1 = *(_OWORD *)(v34 + 152);
      *(_QWORD *)&__s1[16] = *(_QWORD *)(v34 + 168);
    }
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (siri::dialogengine::IsFeatureVersionGreaterThanFileVersion((uint64_t)&v66, (uint64_t)__s1))
    {
      if ((v55 & 1) != 0)
      {
        if (*(char *)(a2 + 23) >= 0)
          v40 = *(unsigned __int8 *)(a2 + 23);
        else
          v40 = *(_QWORD *)(a2 + 8);
        v41 = &v60;
        std::string::basic_string[abi:ne180100]((uint64_t)&v60, v40 + 29);
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v41 = (std::string *)v60.__r_.__value_.__r.__words[0];
        if (v40)
        {
          if (*(char *)(a2 + 23) >= 0)
            v42 = (const void *)a2;
          else
            v42 = *(const void **)a2;
          memmove(v41, v42, v40);
        }
        strcpy((char *)v41 + v40, " (toString called implicitly)");
      }
      else if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v60 = *(std::string *)a2;
      }
      std::operator+<char>();
      v43 = std::string::append(&v56, "' requires format version ");
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v66;
      else
        v45 = (std::string *)v66.__r_.__value_.__r.__words[0];
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      else
        v46 = v66.__r_.__value_.__l.__size_;
      v47 = std::string::append(&v57, (const std::string::value_type *)v45, v46);
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      v49 = std::string::append(&v58, " but CAT file has version ");
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      if (__s1[23] >= 0)
        v51 = __s1;
      else
        v51 = *(const std::string::value_type **)__s1;
      if (__s1[23] >= 0)
        v52 = __s1[23];
      else
        v52 = *(_QWORD *)&__s1[8];
      v53 = std::string::append(&v59, v51, v52);
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      a3[2] = *((_QWORD *)&v53->__r_.__value_.__l + 2);
      *(_OWORD *)a3 = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if ((__s1[23] & 0x80000000) != 0)
        operator delete(*(void **)__s1);
      goto LABEL_120;
    }
    if ((__s1[23] & 0x80000000) != 0)
      operator delete(*(void **)__s1);
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
LABEL_120:
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  *(_QWORD *)__s1 = &v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s1);
}

void sub_1BFA622AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a38 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 153) < 0)
    operator delete(*(void **)(v38 - 176));
  if (*(char *)(v38 - 121) < 0)
    operator delete(*(void **)(v38 - 144));
  __p = (void *)(v38 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

siri::dialogengine::CATExecutionDialogResult *siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult(siri::dialogengine::CATExecutionDialogResult *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_DWORD *)(v2 + 335) = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_DWORD *)(v2 + 335) = 0;
  *(_QWORD *)this = v2;
  return this;
}

siri::dialogengine::CATExecutionDialogResult *siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult(siri::dialogengine::CATExecutionDialogResult *this, const siri::dialogengine::CATExecutionDialogResult *a2)
{
  std::string *v4;
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  __int16 v22;

  v4 = (std::string *)operator new();
  v5 = v4;
  v6 = *(__int128 **)a2;
  if (*(char *)(*(_QWORD *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)v6 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 1, *((const std::string::value_type **)v6 + 3), *((_QWORD *)v6 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)v6 + 24);
    v5[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 5);
    *(_OWORD *)&v5[1].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)v6 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 2, *((const std::string::value_type **)v6 + 6), *((_QWORD *)v6 + 7));
  }
  else
  {
    v9 = v6[3];
    v5[2].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 8);
    *(_OWORD *)&v5[2].__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)v6 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 3, *((const std::string::value_type **)v6 + 9), *((_QWORD *)v6 + 10));
  }
  else
  {
    v10 = *(__int128 *)((char *)v6 + 72);
    v5[3].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 11);
    *(_OWORD *)&v5[3].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)v6 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 4, *((const std::string::value_type **)v6 + 12), *((_QWORD *)v6 + 13));
  }
  else
  {
    v11 = v6[6];
    v5[4].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 14);
    *(_OWORD *)&v5[4].__r_.__value_.__l.__data_ = v11;
  }
  if (*((char *)v6 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 5, *((const std::string::value_type **)v6 + 15), *((_QWORD *)v6 + 16));
  }
  else
  {
    v12 = *(__int128 *)((char *)v6 + 120);
    v5[5].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 17);
    *(_OWORD *)&v5[5].__r_.__value_.__l.__data_ = v12;
  }
  if (*((char *)v6 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 6, *((const std::string::value_type **)v6 + 18), *((_QWORD *)v6 + 19));
  }
  else
  {
    v13 = v6[9];
    v5[6].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 20);
    *(_OWORD *)&v5[6].__r_.__value_.__l.__data_ = v13;
  }
  if (*((char *)v6 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 7, *((const std::string::value_type **)v6 + 21), *((_QWORD *)v6 + 22));
  }
  else
  {
    v14 = *(__int128 *)((char *)v6 + 168);
    v5[7].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 23);
    *(_OWORD *)&v5[7].__r_.__value_.__l.__data_ = v14;
  }
  if (*((char *)v6 + 215) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 8, *((const std::string::value_type **)v6 + 24), *((_QWORD *)v6 + 25));
  }
  else
  {
    v15 = v6[12];
    v5[8].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 26);
    *(_OWORD *)&v5[8].__r_.__value_.__l.__data_ = v15;
  }
  if (*((char *)v6 + 239) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 9, *((const std::string::value_type **)v6 + 27), *((_QWORD *)v6 + 28));
  }
  else
  {
    v16 = *(__int128 *)((char *)v6 + 216);
    v5[9].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 29);
    *(_OWORD *)&v5[9].__r_.__value_.__l.__data_ = v16;
  }
  if (*((char *)v6 + 263) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 10, *((const std::string::value_type **)v6 + 30), *((_QWORD *)v6 + 31));
  }
  else
  {
    v17 = v6[15];
    v5[10].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 32);
    *(_OWORD *)&v5[10].__r_.__value_.__l.__data_ = v17;
  }
  if (*((char *)v6 + 287) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 11, *((const std::string::value_type **)v6 + 33), *((_QWORD *)v6 + 34));
  }
  else
  {
    v18 = *(__int128 *)((char *)v6 + 264);
    v5[11].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 35);
    *(_OWORD *)&v5[11].__r_.__value_.__l.__data_ = v18;
  }
  if (*((char *)v6 + 311) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 12, *((const std::string::value_type **)v6 + 36), *((_QWORD *)v6 + 37));
  }
  else
  {
    v19 = v6[18];
    v5[12].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 38);
    *(_OWORD *)&v5[12].__r_.__value_.__l.__data_ = v19;
  }
  v20 = v5 + 13;
  if (*((char *)v6 + 335) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *((const std::string::value_type **)v6 + 39), *((_QWORD *)v6 + 40));
  }
  else
  {
    v21 = *(__int128 *)((char *)v6 + 312);
    v5[13].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 41);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  v22 = *((_WORD *)v6 + 168);
  v5[14].__r_.__value_.__s.__data_[2] = *((_BYTE *)v6 + 338);
  LOWORD(v5[14].__r_.__value_.__l.__data_) = v22;
  *(_QWORD *)this = v5;
  return this;
}

void sub_1BFA627E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14)
{
  uint64_t v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;

  if (*(char *)(v14 + 311) < 0)
    operator delete(*v18);
  if (*(char *)(v14 + 287) < 0)
    operator delete(*v17);
  if (*(char *)(v14 + 263) < 0)
    operator delete(*v16);
  if (*(char *)(v14 + 239) < 0)
    operator delete(*v15);
  if (*(char *)(v14 + 215) < 0)
    operator delete(*v21);
  if (*(char *)(v14 + 191) < 0)
    operator delete(*v20);
  if (*(char *)(v14 + 167) < 0)
    operator delete(*v19);
  if (*(char *)(v14 + 143) < 0)
    operator delete(*a10);
  if (*(char *)(v14 + 119) < 0)
    operator delete(*a11);
  if (*(char *)(v14 + 95) < 0)
    operator delete(*a12);
  if (*(char *)(v14 + 71) < 0)
    operator delete(*a13);
  if (*(char *)(v14 + 47) < 0)
    operator delete(*a14);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  MEMORY[0x1C3B8D890](v14, 0x1012C401D9AEBE6);
  _Unwind_Resume(a1);
}

void sub_1BFA62930()
{
  JUMPOUT(0x1BFA628C4);
}

void sub_1BFA62938()
{
  JUMPOUT(0x1BFA628D8);
}

void sub_1BFA62940()
{
  JUMPOUT(0x1BFA628ECLL);
}

void sub_1BFA62948()
{
  JUMPOUT(0x1BFA62900);
}

void sub_1BFA62950()
{
  JUMPOUT(0x1BFA62910);
}

void siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult(siri::dialogengine::CATExecutionDialogResult *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if (*(char *)(v1 + 335) < 0)
      operator delete(*(void **)(v1 + 312));
    if (*(char *)(v1 + 311) < 0)
      operator delete(*(void **)(v1 + 288));
    if (*(char *)(v1 + 287) < 0)
      operator delete(*(void **)(v1 + 264));
    if (*(char *)(v1 + 263) < 0)
      operator delete(*(void **)(v1 + 240));
    if (*(char *)(v1 + 239) < 0)
      operator delete(*(void **)(v1 + 216));
    if (*(char *)(v1 + 215) < 0)
      operator delete(*(void **)(v1 + 192));
    if (*(char *)(v1 + 191) < 0)
      operator delete(*(void **)(v1 + 168));
    if (*(char *)(v1 + 167) < 0)
      operator delete(*(void **)(v1 + 144));
    if (*(char *)(v1 + 143) < 0)
      operator delete(*(void **)(v1 + 120));
    if (*(char *)(v1 + 119) < 0)
      operator delete(*(void **)(v1 + 96));
    if (*(char *)(v1 + 95) < 0)
      operator delete(*(void **)(v1 + 72));
    if (*(char *)(v1 + 71) < 0)
      operator delete(*(void **)(v1 + 48));
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    MEMORY[0x1C3B8D890](v1, 0x1012C401D9AEBE6);
  }
}

uint64_t *siri::dialogengine::CATExecutionDialogResult::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
    siri::dialogengine::CATExecutionDialogResult::Impl::operator=(*a1, *a2);
  return a1;
}

uint64_t siri::dialogengine::CATExecutionDialogResult::Impl::operator=(uint64_t a1, uint64_t a2)
{
  char v4;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a2 + 240));
  std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a2 + 264));
  std::string::operator=((std::string *)(a1 + 288), (const std::string *)(a2 + 288));
  std::string::operator=((std::string *)(a1 + 312), (const std::string *)(a2 + 312));
  v4 = *(_BYTE *)(a2 + 338);
  *(_WORD *)(a1 + 336) = *(_WORD *)(a2 + 336);
  *(_BYTE *)(a1 + 338) = v4;
  return a1;
}

void siri::dialogengine::CATExecutionDialogResult::GetId(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = *(__int128 **)this;
  if (*(char *)(*(_QWORD *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetId(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetType(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 24), *(_QWORD *)(v2 + 32));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 24);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 40);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetType(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 1, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetFullPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 48), *(_QWORD *)(v2 + 56));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 48);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 64);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetFullPrint(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 2, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetRedactedFullPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 263) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 240), *(_QWORD *)(v2 + 248));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 240);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 256);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetRedactedFullPrint(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 10, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetFullSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 72), *(_QWORD *)(v2 + 80));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 72);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 88);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetFullSpeak(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 3, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetRedactedFullSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 287) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 264), *(_QWORD *)(v2 + 272));
  }
  else
  {
    v3 = (__int128 *)(v2 + 264);
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetRedactedFullSpeak(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 11, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetSupportingPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 96), *(_QWORD *)(v2 + 104));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 96);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 112);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetSupportingPrint(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 4, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetRedactedSupportingPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 311) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 288), *(_QWORD *)(v2 + 296));
  }
  else
  {
    v3 = (__int128 *)(v2 + 288);
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetRedactedSupportingPrint(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 12, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetSupportingSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 120), *(_QWORD *)(v2 + 128));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 120);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 136);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetSupportingSpeak(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 5, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetRedactedSupportingSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 335) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 312), *(_QWORD *)(v2 + 320));
  }
  else
  {
    v3 = (__int128 *)(v2 + 312);
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetRedactedSupportingSpeak(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 13, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetUnfilteredFullPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 167) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 144), *(_QWORD *)(v2 + 152));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 144);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 160);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetUnfilteredFullPrint(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 6, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetUnfilteredFullSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 191) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 168), *(_QWORD *)(v2 + 176));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 168);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 184);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetUnfilteredFullSpeak(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 7, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetUnfilteredSupportingPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 215) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 192), *(_QWORD *)(v2 + 200));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 192);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 208);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetUnfilteredSupportingPrint(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 8, a2);
}

void siri::dialogengine::CATExecutionDialogResult::GetUnfilteredSupportingSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 239) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 216), *(_QWORD *)(v2 + 224));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 216);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 232);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionDialogResult::SetUnfilteredSupportingSpeak(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 9, a2);
}

uint64_t siri::dialogengine::CATExecutionDialogResult::GetSpokenOnly(siri::dialogengine::CATExecutionDialogResult *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 336);
}

uint64_t siri::dialogengine::CATExecutionDialogResult::SetSpokenOnly(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 336) = a2;
  return this;
}

uint64_t siri::dialogengine::CATExecutionDialogResult::GetPrintOnly(siri::dialogengine::CATExecutionDialogResult *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 337);
}

uint64_t siri::dialogengine::CATExecutionDialogResult::SetPrintOnly(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 337) = a2;
  return this;
}

uint64_t siri::dialogengine::CATExecutionDialogResult::IsApprovedForGrading(siri::dialogengine::CATExecutionDialogResult *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 338);
}

uint64_t siri::dialogengine::CATExecutionDialogResult::SetApprovedForGrading(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 338) = a2;
  return this;
}

void siri::dialogengine::CATExecutionDialogResult::GetContentPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;

  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"CATExecutionDialogResult::GetContentPrint() is deprecated. Use GetFullPrint() instead.", a2);
  v5 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v5 + 48), *(_QWORD *)(v5 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 48);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 64);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::CATExecutionDialogResult::GetContentSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;

  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"CATExecutionDialogResult::GetContentSpeak() is deprecated. Use GetFullSpeak() instead.", a2);
  v5 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v5 + 72), *(_QWORD *)(v5 + 80));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 72);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 88);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::CATExecutionDialogResult::GetCaptionPrint(siri::dialogengine::CATExecutionDialogResult *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;

  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"CATExecutionDialogResult::GetCaptionPrint() is deprecated. Use GetSupportingPrint() instead.", a2);
  v5 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v5 + 96), *(_QWORD *)(v5 + 104));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 96);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 112);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::CATExecutionDialogResult::GetCaptionSpeak(siri::dialogengine::CATExecutionDialogResult *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;

  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"CATExecutionDialogResult::GetCaptionSpeak() is deprecated. Use GetSupportingSpeak() instead.", a2);
  v5 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v5 + 120), *(_QWORD *)(v5 + 128));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 120);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 136);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

siri::dialogengine::CATExecutionResult *siri::dialogengine::CATExecutionResult::CATExecutionResult(siri::dialogengine::CATExecutionResult *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 96) = v2 + 104;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 96) = v2 + 104;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)this = v2;
  return this;
}

std::string **siri::dialogengine::CATExecutionResult::CATExecutionResult(std::string **a1, const std::string *a2, const std::string *a3, const std::string *a4)
{
  uint64_t v8;

  v8 = operator new();
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 96) = v8 + 104;
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = 0;
  *a1 = (std::string *)v8;
  std::string::operator=((std::string *)v8, a2);
  std::string::operator=(*a1 + 1, a3);
  std::string::operator=(*a1 + 2, a4);
  return a1;
}

siri::dialogengine::CATExecutionResult *siri::dialogengine::CATExecutionResult::CATExecutionResult(siri::dialogengine::CATExecutionResult *this, const siri::dialogengine::CATExecutionResult *a2)
{
  std::string *v4;
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;

  v4 = (std::string *)operator new();
  v5 = v4;
  v6 = *(__int128 **)a2;
  if (*(char *)(*(_QWORD *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)v6 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 1, *((const std::string::value_type **)v6 + 3), *((_QWORD *)v6 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)v6 + 24);
    v5[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 5);
    *(_OWORD *)&v5[1].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)v6 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5 + 2, *((const std::string::value_type **)v6 + 6), *((_QWORD *)v6 + 7));
  }
  else
  {
    v9 = v6[3];
    v5[2].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 8);
    *(_OWORD *)&v5[2].__r_.__value_.__l.__data_ = v9;
  }
  v5[3].__r_.__value_.__r.__words[0] = 0;
  v5[3].__r_.__value_.__l.__size_ = 0;
  v5[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<siri::dialogengine::CATExecutionDialogResult>::__init_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(v5[3].__r_.__value_.__r.__words, *((_QWORD *)v6 + 9), *((_QWORD *)v6 + 10), (uint64_t)(*((_QWORD *)v6 + 10) - *((_QWORD *)v6 + 9)) >> 3);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v5[4], (const void ***)v6 + 12);
  v10 = v5 + 5;
  if (*((char *)v6 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)v6 + 15), *((_QWORD *)v6 + 16));
  }
  else
  {
    v11 = *(__int128 *)((char *)v6 + 120);
    v5[5].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 17);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_QWORD *)this = v5;
  return this;
}

void sub_1BFA632F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v2 + 104));
  std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 71) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 47) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  MEMORY[0x1C3B8D890](v2, 0x1032C405EBDC386);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<siri::dialogengine::CATExecutionDialogResult>::__init_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<double>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::CATExecutionDialogResult>,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BFA633E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::CATExecutionDialogResult>,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)(a3 + v6), (const siri::dialogengine::CATExecutionDialogResult *)(a1 + v6));
      v6 += 8;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void siri::dialogengine::CATExecutionResult::~CATExecutionResult(siri::dialogengine::CATExecutionResult *this)
{
  uint64_t v1;
  void **v2;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if (*(char *)(v1 + 143) < 0)
      operator delete(*(void **)(v1 + 120));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v1 + 104));
    v2 = (void **)(v1 + 72);
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (*(char *)(v1 + 71) < 0)
      operator delete(*(void **)(v1 + 48));
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    MEMORY[0x1C3B8D890](v1, 0x1032C405EBDC386);
  }
}

std::string **siri::dialogengine::CATExecutionResult::operator=(std::string **a1, const std::string **a2)
{
  const std::string *v3;
  std::string *v4;

  if (a1 != (std::string **)a2)
  {
    v3 = *a2;
    v4 = *a1;
    std::string::operator=(*a1, *a2);
    std::string::operator=(v4 + 1, v3 + 1);
    std::string::operator=(v4 + 2, v3 + 2);
    if (v4 != v3)
    {
      std::vector<siri::dialogengine::CATExecutionDialogResult>::__assign_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>((uint64_t **)&v4[3], (uint64_t *)v3[3].__r_.__value_.__l.__data_, v3[3].__r_.__value_.__l.__size_, (uint64_t)(v3[3].__r_.__value_.__l.__size_ - v3[3].__r_.__value_.__r.__words[0]) >> 3);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v4[4], (__int128 *)v3[4].__r_.__value_.__l.__data_, (__int128 *)&v3[4].__r_.__value_.__r.__words[1]);
    }
    std::string::operator=(v4 + 5, v3 + 5);
  }
  return a1;
}

void std::vector<siri::dialogengine::CATExecutionDialogResult>::__assign_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(uint64_t **a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (a4 > (v8 - (uint64_t)*a1) >> 3)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = v9;
      if (v10 != v9)
      {
        do
          siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)(v10 - 1));
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v12 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v12 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    std::vector<double>::__vallocate[abi:ne180100](a1, v13);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::CATExecutionDialogResult>,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>((uint64_t)v6, a3, (uint64_t)a1[1]);
LABEL_22:
    a1[1] = (uint64_t *)v14;
    return;
  }
  v15 = a1[1];
  v16 = v15 - v9;
  if (v16 < a4)
  {
    v17 = (uint64_t)&a2[v16];
    if (v15 != v9)
    {
      v18 = 8 * v16;
      do
      {
        if (v6 != v9)
          siri::dialogengine::CATExecutionDialogResult::Impl::operator=(*v9, *v6);
        ++v6;
        ++v9;
        v18 -= 8;
      }
      while (v18);
      v9 = a1[1];
    }
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::CATExecutionDialogResult>,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(v17, a3, (uint64_t)v9);
    goto LABEL_22;
  }
  if (a2 != (uint64_t *)a3)
  {
    do
    {
      if (v6 != v9)
        siri::dialogengine::CATExecutionDialogResult::Impl::operator=(*v9, *v6);
      ++v6;
      ++v9;
    }
    while (v6 != (uint64_t *)a3);
    v15 = a1[1];
  }
  while (v15 != v9)
    siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)(v15 - 1));
  a1[1] = v9;
}

void sub_1BFA63754(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void siri::dialogengine::CATExecutionResult::GetStatus(siri::dialogengine::CATExecutionResult *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = *(__int128 **)this;
  if (*(char *)(*(_QWORD *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionResult::SetStatus(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1, a2);
}

void siri::dialogengine::CATExecutionResult::GetError(siri::dialogengine::CATExecutionResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 24), *(_QWORD *)(v2 + 32));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 24);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 40);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionResult::SetError(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 1, a2);
}

void siri::dialogengine::CATExecutionResult::GetCatId(siri::dialogengine::CATExecutionResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 48), *(_QWORD *)(v2 + 56));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 48);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 64);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionResult::SetCatId(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 2, a2);
}

_QWORD *siri::dialogengine::CATExecutionResult::GetResults@<X0>(siri::dialogengine::CATExecutionResult *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return std::vector<siri::dialogengine::CATExecutionDialogResult>::__init_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(a2, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), (uint64_t)(*(_QWORD *)(v2 + 80) - *(_QWORD *)(v2 + 72)) >> 3);
}

void siri::dialogengine::CATExecutionResult::SetResults(_QWORD *a1, uint64_t a2)
{
  uint64_t **v2;

  v2 = (uint64_t **)(*a1 + 72);
  if (v2 != (uint64_t **)a2)
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__assign_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(v2, *(uint64_t **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
}

uint64_t siri::dialogengine::CATExecutionResult::GetMetaElements@<X0>(siri::dialogengine::CATExecutionResult *this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, (const void ***)(*(_QWORD *)this + 96));
}

void siri::dialogengine::CATExecutionResult::SetMetaElements(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1 + 96;
  if (v2 != a2)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(__int128 **)a2, (__int128 *)(a2 + 8));
}

void siri::dialogengine::CATExecutionResult::GetVisual(siri::dialogengine::CATExecutionResult *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 120), *(_QWORD *)(v2 + 128));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 120);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 136);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::dialogengine::CATExecutionResult::SetVisual(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 5, a2);
}

uint64_t siri::dialogengine::CATExecutionResult::FromJSON@<X0>(std::string::size_type a1@<X0>, const std::string *a2@<X1>, std::string **a3@<X8>)
{
  std::string *v6;
  std::string::size_type v7;
  const char *v8;
  uint64_t v9;
  unsigned int i;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int j;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t String;
  char *v36;
  _OWORD *v37;
  std::string *v38;
  std::string **v40;
  void *v41[2];
  char v42;
  std::string __p;
  std::string __str;
  std::string *v45;
  unsigned int v46[26];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = (std::string *)operator new();
  v6[4].__r_.__value_.__r.__words[2] = 0;
  v6[5].__r_.__value_.__r.__words[0] = 0;
  v6[4].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&v6->__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&v6->__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v6[1].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v6[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v6[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v6[2].__r_.__value_.__l.__data_ = 0u;
  v6[4].__r_.__value_.__r.__words[0] = (std::string::size_type)&v6[4].__r_.__value_.__l.__size_;
  v6[5].__r_.__value_.__l.__size_ = 0;
  v6[5].__r_.__value_.__r.__words[2] = 0;
  v40 = a3;
  *a3 = v6;
  std::string::operator=(v6 + 2, a2);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)v46);
  if (*(char *)(a1 + 23) >= 0)
    v7 = a1;
  else
    v7 = *(_QWORD *)a1;
  __str.__r_.__value_.__r.__words[0] = v7;
  __str.__r_.__value_.__l.__size_ = v7;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<0u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>((uint64_t)v46, (uint64_t)&__str);
  if (v46[22])
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to parse JSON result from CATExecutor", v8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "status");
    siri::dialogengine::ParseJSONString(v46, (const char *)&__p, &__str);
    std::string::operator=(v6, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "error");
    siri::dialogengine::ParseJSONString(v46, (const char *)&__p, &__str);
    std::string::operator=(v6 + 1, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    memset(&__str, 0, sizeof(__str));
    if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v46, "response"))
    {
      v9 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v46, "response");
      if (*(_WORD *)(v9 + 22) == 4)
      {
        for (i = 0; i < *(_DWORD *)v9; ++i)
        {
          v11 = operator new();
          *(_OWORD *)(v11 + 304) = 0u;
          *(_OWORD *)(v11 + 320) = 0u;
          *(_OWORD *)(v11 + 272) = 0u;
          *(_OWORD *)(v11 + 288) = 0u;
          *(_OWORD *)(v11 + 240) = 0u;
          *(_OWORD *)(v11 + 256) = 0u;
          *(_OWORD *)(v11 + 208) = 0u;
          *(_OWORD *)(v11 + 224) = 0u;
          *(_OWORD *)(v11 + 176) = 0u;
          *(_OWORD *)(v11 + 192) = 0u;
          *(_OWORD *)(v11 + 144) = 0u;
          *(_OWORD *)(v11 + 160) = 0u;
          *(_OWORD *)(v11 + 112) = 0u;
          *(_OWORD *)(v11 + 128) = 0u;
          *(_OWORD *)(v11 + 80) = 0u;
          *(_OWORD *)(v11 + 96) = 0u;
          *(_OWORD *)(v11 + 48) = 0u;
          *(_OWORD *)(v11 + 64) = 0u;
          *(_OWORD *)(v11 + 16) = 0u;
          *(_OWORD *)(v11 + 32) = 0u;
          *(_OWORD *)v11 = 0u;
          *(_DWORD *)(v11 + 335) = 0;
          v45 = (std::string *)v11;
          v12 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](v9, i);
          if (*(_WORD *)(v12 + 22) == 3)
          {
            std::string::basic_string[abi:ne180100]<0>(v41, "id");
            siri::dialogengine::ParseJSONString((unsigned int *)v12, (const char *)v41, &__p);
            std::string::operator=(v45, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v42 < 0)
              operator delete(v41[0]);
            std::string::basic_string[abi:ne180100]<0>(v41, "type");
            siri::dialogengine::ParseJSONString((unsigned int *)v12, (const char *)v41, &__p);
            std::string::operator=(v45 + 1, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v42 < 0)
              operator delete(v41[0]);
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v12, "content")&& *(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "content")+ 22) == 3)
            {
              v13 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "content");
              std::string::basic_string[abi:ne180100]<0>(v41, "print");
              siri::dialogengine::ParseJSONString(v13, (const char *)v41, &__p);
              std::string::operator=(v45 + 2, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
              std::string::basic_string[abi:ne180100]<0>(v41, "speak");
              siri::dialogengine::ParseJSONString(v13, (const char *)v41, &__p);
              std::string::operator=(v45 + 3, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
              std::string::basic_string[abi:ne180100]<0>(v41, "redactedPrint");
              siri::dialogengine::ParseJSONString(v13, (const char *)v41, &__p);
              std::string::operator=(v45 + 10, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
              std::string::basic_string[abi:ne180100]<0>(v41, "redactedSpeak");
              siri::dialogengine::ParseJSONString(v13, (const char *)v41, &__p);
              std::string::operator=(v45 + 11, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
            }
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v12, "caption")&& *(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "caption")+ 22) == 3)
            {
              v14 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "caption");
              std::string::basic_string[abi:ne180100]<0>(v41, "print");
              siri::dialogengine::ParseJSONString(v14, (const char *)v41, &__p);
              std::string::operator=(v45 + 4, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
              std::string::basic_string[abi:ne180100]<0>(v41, "speak");
              siri::dialogengine::ParseJSONString(v14, (const char *)v41, &__p);
              std::string::operator=(v45 + 5, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
              std::string::basic_string[abi:ne180100]<0>(v41, "redactedPrint");
              siri::dialogengine::ParseJSONString(v14, (const char *)v41, &__p);
              std::string::operator=(v45 + 12, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
              std::string::basic_string[abi:ne180100]<0>(v41, "redactedSpeak");
              siri::dialogengine::ParseJSONString(v14, (const char *)v41, &__p);
              std::string::operator=(v45 + 13, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
            }
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v12, "unfilteredContent")&& *(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "unfilteredContent")+ 22) == 3)
            {
              v15 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "unfilteredContent");
              std::string::basic_string[abi:ne180100]<0>(v41, "print");
              siri::dialogengine::ParseJSONString(v15, (const char *)v41, &__p);
              std::string::operator=(v45 + 6, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
              v16 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "unfilteredContent");
              std::string::basic_string[abi:ne180100]<0>(v41, "speak");
              siri::dialogengine::ParseJSONString(v16, (const char *)v41, &__p);
              std::string::operator=(v45 + 7, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
            }
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v12, "unfilteredCaption")&& *(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "unfilteredCaption")+ 22) == 3)
            {
              v17 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "unfilteredCaption");
              std::string::basic_string[abi:ne180100]<0>(v41, "print");
              siri::dialogengine::ParseJSONString(v17, (const char *)v41, &__p);
              std::string::operator=(v45 + 8, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
              v18 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "unfilteredCaption");
              std::string::basic_string[abi:ne180100]<0>(v41, "speak");
              siri::dialogengine::ParseJSONString(v18, (const char *)v41, &__p);
              std::string::operator=(v45 + 9, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
            }
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v12, "spokenOnly")&& (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "spokenOnly")+ 22) & 8) != 0)
            {
              v19 = *(unsigned __int16 *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "spokenOnly")+ 22);
              if ((v19 & 8) == 0)
                goto LABEL_161;
              v45[14].__r_.__value_.__s.__data_[0] = v19 == 10;
            }
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v12, "printOnly")&& (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "printOnly")+ 22) & 8) != 0)
            {
              v20 = *(unsigned __int16 *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "printOnly")+ 22);
              if ((v20 & 8) == 0)
                goto LABEL_161;
              v45[14].__r_.__value_.__s.__data_[1] = v20 == 10;
            }
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v12, "isApprovedForGrading")&& (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "isApprovedForGrading")+ 22) & 8) != 0)
            {
              v21 = *(unsigned __int16 *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v12, "isApprovedForGrading")+ 22);
              if ((v21 & 8) == 0)
LABEL_161:
                __assert_rtn("GetBool", "document.h", 1078, "IsBool()");
              v45[14].__r_.__value_.__s.__data_[2] = v21 == 10;
            }
          }
          std::vector<siri::dialogengine::CATExecutionDialogResult>::push_back[abi:ne180100]((uint64_t *)&__str, (siri::dialogengine::CATExecutionDialogResult *)&v45);
          siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)&v45);
          if (*(_WORD *)(v9 + 22) != 4)
            __assert_rtn("Size", "document.h", 1557, "IsArray()");
        }
      }
    }
    if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v46, "dialog"))
    {
      v22 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v46, "dialog");
      if (*(_WORD *)(v22 + 22) == 4)
      {
        for (j = 0; j < *(_DWORD *)v22; ++j)
        {
          v24 = operator new();
          *(_OWORD *)(v24 + 304) = 0u;
          *(_OWORD *)(v24 + 320) = 0u;
          *(_OWORD *)(v24 + 272) = 0u;
          *(_OWORD *)(v24 + 288) = 0u;
          *(_OWORD *)(v24 + 240) = 0u;
          *(_OWORD *)(v24 + 256) = 0u;
          *(_OWORD *)(v24 + 208) = 0u;
          *(_OWORD *)(v24 + 224) = 0u;
          *(_OWORD *)(v24 + 176) = 0u;
          *(_OWORD *)(v24 + 192) = 0u;
          *(_OWORD *)(v24 + 144) = 0u;
          *(_OWORD *)(v24 + 160) = 0u;
          *(_OWORD *)(v24 + 112) = 0u;
          *(_OWORD *)(v24 + 128) = 0u;
          *(_OWORD *)(v24 + 80) = 0u;
          *(_OWORD *)(v24 + 96) = 0u;
          *(_OWORD *)(v24 + 48) = 0u;
          *(_OWORD *)(v24 + 64) = 0u;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_OWORD *)v24 = 0u;
          *(_DWORD *)(v24 + 335) = 0;
          v45 = (std::string *)v24;
          v25 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](v22, j);
          if (*(_WORD *)(v25 + 22) == 3)
          {
            std::string::basic_string[abi:ne180100]<0>(v41, "dialogId");
            siri::dialogengine::ParseJSONString((unsigned int *)v25, (const char *)v41, &__p);
            std::string::operator=(v45, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v42 < 0)
              operator delete(v41[0]);
            std::string::basic_string[abi:ne180100]<0>(&__p, "dialog");
            std::string::operator=(v45 + 1, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v25, "fullPrint"))
            {
              std::string::basic_string[abi:ne180100]<0>(v41, "fullPrint");
              siri::dialogengine::ParseJSONString((unsigned int *)v25, (const char *)v41, &__p);
              std::string::operator=(v45 + 2, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
            }
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v25, "fullSpeak"))
            {
              std::string::basic_string[abi:ne180100]<0>(v41, "fullSpeak");
              siri::dialogengine::ParseJSONString((unsigned int *)v25, (const char *)v41, &__p);
              std::string::operator=(v45 + 3, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
            }
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v25, "supportingPrint"))
            {
              std::string::basic_string[abi:ne180100]<0>(v41, "supportingPrint");
              siri::dialogengine::ParseJSONString((unsigned int *)v25, (const char *)v41, &__p);
              std::string::operator=(v45 + 4, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
            }
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v25, "supportingSpeak"))
            {
              std::string::basic_string[abi:ne180100]<0>(v41, "supportingSpeak");
              siri::dialogengine::ParseJSONString((unsigned int *)v25, (const char *)v41, &__p);
              std::string::operator=(v45 + 5, &__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v42 < 0)
                operator delete(v41[0]);
            }
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v25, "spokenOnly"))
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "spokenOnly");
              v26 = siri::dialogengine::ParseJSONBool((unsigned int *)v25, (const char *)&__p, 0);
              v45[14].__r_.__value_.__s.__data_[0] = v26;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v25, "printOnly"))
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "printOnly");
              v27 = siri::dialogengine::ParseJSONBool((unsigned int *)v25, (const char *)&__p, 0);
              v45[14].__r_.__value_.__s.__data_[1] = v27;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v25, "isApprovedForGrading"))
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "isApprovedForGrading");
              v28 = siri::dialogengine::ParseJSONBool((unsigned int *)v25, (const char *)&__p, 0);
              v45[14].__r_.__value_.__s.__data_[2] = v28;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          std::vector<siri::dialogengine::CATExecutionDialogResult>::push_back[abi:ne180100]((uint64_t *)&__str, (siri::dialogengine::CATExecutionDialogResult *)&v45);
          siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)&v45);
          if (*(_WORD *)(v22 + 22) != 4)
            __assert_rtn("Size", "document.h", 1557, "IsArray()");
        }
        v6 = *v40;
      }
    }
    if (&v6[3] != &__str)
      std::vector<siri::dialogengine::CATExecutionDialogResult>::__assign_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>((uint64_t **)&v6[3], (uint64_t *)__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3);
    if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v46, "visual"))
    {
      v29 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v46, "visual");
      v30 = (unsigned int *)v29;
      if (*(_WORD *)(v29 + 22) == 3
        && rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v29, "data"))
      {
        std::string::basic_string[abi:ne180100]<0>(v41, "data");
        siri::dialogengine::ParseJSONString(v30, (const char *)v41, &__p);
        std::string::operator=(*v40 + 5, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v42 < 0)
          operator delete(v41[0]);
      }
    }
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v46, "meta")&& *(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v46, "meta")+ 22) == 3)
    {
      v31 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v46, "meta");
      if (*((_WORD *)v31 + 11) != 3)
        __assert_rtn("GetObject", "document.h", 1544, "IsObject()");
      v32 = *v31;
      if ((_DWORD)v32)
      {
        v33 = *((_QWORD *)v31 + 1);
        v34 = 48 * v32;
        do
        {
          String = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v33 + 24);
          v36 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v33);
          std::string::basic_string[abi:ne180100]<0>(v41, v36);
          v45 = (std::string *)v41;
          v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, (const void **)v41, (_OWORD **)&v45);
          MEMORY[0x1C3B8D53C]((char *)v37 + 56, String);
          if (v42 < 0)
            operator delete(v41[0]);
          v33 += 48;
          v34 -= 48;
        }
        while (v34);
      }
    }
    v38 = *v40 + 4;
    if (v38 != &__p)
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)v38, (__int128 *)__p.__r_.__value_.__l.__data_, (__int128 *)&__p.__r_.__value_.__r.__words[1]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)v46);
}

void sub_1BFA647DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, siri::dialogengine::CATExecutionResult *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  __p = &a22;
  std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100](&__p);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&a30);
  siri::dialogengine::CATExecutionResult::~CATExecutionResult(a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<siri::dialogengine::CATExecutionDialogResult>::push_back[abi:ne180100](uint64_t *a1, siri::dialogengine::CATExecutionDialogResult *a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  const siri::dialogengine::CATExecutionDialogResult *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE v24[24];
  uint64_t *v25;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = (uint64_t)(v6 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v25 = v4;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v12);
    else
      v13 = 0;
    v23 = v12;
    *(_QWORD *)v24 = v12 + 8 * v9;
    *(_QWORD *)&v24[16] = v12 + 8 * v13;
    siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult(*(siri::dialogengine::CATExecutionDialogResult **)v24, a2);
    *(_QWORD *)&v24[8] = *(_QWORD *)v24 + 8;
    v15 = *a1;
    v14 = a1[1];
    for (i = 8; ; i -= 8)
    {
      v17 = *(_QWORD *)v24 + i;
      if (v14 + i - 8 == v15)
        break;
      v18 = (const siri::dialogengine::CATExecutionDialogResult *)(v14 + i - 16);
      siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)(v17 - 16), v18);
    }
    v19 = a1[2];
    v20 = *(_OWORD *)&v24[8];
    v22 = *(_QWORD *)&v24[8];
    v21 = *(_OWORD *)a1;
    *a1 = v17 - 8;
    *(_OWORD *)v24 = v21;
    *(_OWORD *)(a1 + 1) = v20;
    *(_QWORD *)&v24[16] = v19;
    v23 = v21;
    result = std::__split_buffer<siri::dialogengine::CATExecutionDialogResult>::~__split_buffer((uint64_t)&v23);
    v8 = v22;
  }
  else
  {
    result = (uint64_t)siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)a1[1], a2);
    v8 = v6 + 8;
    a1[1] = v6 + 8;
  }
  a1[1] = v8;
  return result;
}

void sub_1BFA64B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<siri::dialogengine::CATExecutionDialogResult>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<siri::dialogengine::CATExecutionDialogResult>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *siri::dialogengine::Duration::Duration(_QWORD *this, const uint64_t *a2)
{
  *this = *a2;
  return this;
}

{
  *this = *a2;
  return this;
}

uint64_t siri::dialogengine::Duration::ToMinutes(siri::dialogengine::Duration *this)
{
  return *(_QWORD *)this / 60;
}

uint64_t siri::dialogengine::Duration::ToHours(siri::dialogengine::Duration *this)
{
  return *(_QWORD *)this / 3600;
}

uint64_t siri::dialogengine::Duration::ToDays(siri::dialogengine::Duration *this)
{
  return *(_QWORD *)this / 86400;
}

uint64_t siri::dialogengine::Duration::ToWeeks(siri::dialogengine::Duration *this)
{
  return *(_QWORD *)this / 604800;
}

uint64_t siri::dialogengine::Duration::ToMonths(siri::dialogengine::Duration *this)
{
  return *(_QWORD *)this / 2629746;
}

uint64_t siri::dialogengine::Duration::ToYears(siri::dialogengine::Duration *this)
{
  return *(_QWORD *)this / 31556952;
}

uint64_t siri::dialogengine::Duration::GetSeconds(siri::dialogengine::Duration *this)
{
  return *(_QWORD *)this;
}

void InitDefaultsscc_info_SystemText_ClarificationTitle_SystemText_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SystemText.pb.cc", a4);
  SnippetUI::SystemText_ClarificationTitle::SystemText_ClarificationTitle((SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SystemText_ClarificationTitle_default_instance_, v4);
  qword_1ED1D4958 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4960 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SystemText_ClarificationTitle *SnippetUI::SystemText_ClarificationTitle::SystemText_ClarificationTitle(SnippetUI::SystemText_ClarificationTitle *this)
{
  *(_QWORD *)this = &off_1E7930EA0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_SystemText_ClarificationTitle_SystemText_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SystemText_ClarificationTitle_SystemText_2eproto);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFA64DF0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SystemText_ClarificationTitle::~SystemText_ClarificationTitle(SnippetUI::SystemText_ClarificationTitle *this)
{
  SnippetUI::SystemText_ClarificationTitle::~SystemText_ClarificationTitle(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7930EA0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SystemText_ClarificationTitle *SnippetUI::SystemText_ClarificationTitle::New(SnippetUI::SystemText_ClarificationTitle *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SystemText_ClarificationTitle>(0);
}

SnippetUI::SystemText_ClarificationTitle *SnippetUI::SystemText_ClarificationTitle::New(SnippetUI::SystemText_ClarificationTitle *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SystemText_ClarificationTitle>(a2);
}

void SnippetUI::SystemText_ClarificationTitle::Clear(SnippetUI::SystemText_ClarificationTitle *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArena *v5;
  char v6;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = *((_BYTE *)this + 8);
  v5 = (SnippetUI::SystemText_ClarificationTitle *)((char *)this + 8);
  *((_QWORD *)v5 + 3) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
}

uint64_t SnippetUI::SystemText_ClarificationTitle::IsInitialized(SnippetUI::SystemText_ClarificationTitle *this)
{
  return 1;
}

char *SnippetUI::SystemText_ClarificationTitle::ByteSizeLong(SnippetUI::SystemText_ClarificationTitle *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::ActionProperty *v8;
  char *v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SystemText_ClarificationTitle *)((char *)this + 8), v5, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SystemText_ClarificationTitle::GetCachedSize(SnippetUI::SystemText_ClarificationTitle *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::SystemText_ClarificationTitle::_InternalParse(SnippetUI::SystemText_ClarificationTitle *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  unsigned int v10;
  char *v13;
  std::string *v14;
  SnippetUI::ActionProperty *v15;
  SnippetUI::TextProperty *v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v18;
    TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
    v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    v18 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.SystemText_ClarificationTitle.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 4) = v15;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
      if (!v16)
      {
        v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v16;
        TagFallback = v18;
      }
      v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v16, TagFallback);
      goto LABEL_29;
    }
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      break;
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    v18 = (google::protobuf::internal *)v13;
    if (!v13)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::SystemText_ClarificationTitle::InternalSerializeWithCachedSizesToArray(SnippetUI::SystemText_ClarificationTitle *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::ActionProperty *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  google::protobuf::internal *v24;
  const char *v25;
  uint64_t v26;

  v5 = (char *)a2;
  if (this == (SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_)
    goto LABEL_25;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((_QWORD *)v24 + 1);
    if (!v25)
      goto LABEL_31;
    v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((_BYTE *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.SystemText_ClarificationTitle.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 2), v5);
  }
LABEL_31:
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SystemText_ClarificationTitle::CopyFrom(SnippetUI::SystemText_ClarificationTitle *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SystemText_ClarificationTitle::Clear(this);
    SnippetUI::SystemText_ClarificationTitle::MergeFrom(this, a2);
  }
}

void SnippetUI::SystemText_ClarificationTitle::MergeFrom(SnippetUI::SystemText_ClarificationTitle *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SystemText_ClarificationTitle *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SystemText.pb.cc", 325);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SystemText_ClarificationTitle::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFA6547C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SystemText_ClarificationTitle::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::SystemText_ClarificationTitle::GetMetadata(SnippetUI::SystemText_ClarificationTitle *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SystemText_2eproto);
  return file_level_metadata_SystemText_2eproto;
}

void *SnippetUI::SystemText_ClarificationTitle::default_instance(SnippetUI::SystemText_ClarificationTitle *this)
{
  if (atomic_load(scc_info_SystemText_ClarificationTitle_SystemText_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SystemText_ClarificationTitle_SystemText_2eproto);
  return &SnippetUI::_SystemText_ClarificationTitle_default_instance_;
}

void SnippetUI::SystemText_ClarificationTitle::MergeFrom(SnippetUI::SystemText_ClarificationTitle *this, const SnippetUI::SystemText_ClarificationTitle *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SystemText.pb.cc", 340);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SystemText_ClarificationTitle *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1BFA6563C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SystemText_ClarificationTitle *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SystemText_ClarificationTitle>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SystemText_ClarificationTitle *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SystemText_ClarificationTitle *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SystemText_ClarificationTitle>);
    SnippetUI::SystemText_ClarificationTitle::SystemText_ClarificationTitle(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SystemText_ClarificationTitle *)operator new();
    SnippetUI::SystemText_ClarificationTitle::SystemText_ClarificationTitle(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFA656D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SystemText_ClarificationTitle>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::SystemText_ClarificationTitle::InitAsDefaultInstance(SnippetUI::SystemText_ClarificationTitle *this)
{
  qword_1ED1D4958 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4960 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SystemText_ClarificationTitle::_Internal::text_1(SnippetUI::SystemText_ClarificationTitle::_Internal *this, const SnippetUI::SystemText_ClarificationTitle *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::SystemText_ClarificationTitle::_Internal::action(SnippetUI::SystemText_ClarificationTitle::_Internal *this, const SnippetUI::SystemText_ClarificationTitle *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SystemText_ClarificationTitle::clear_text_1(SnippetUI::SystemText_ClarificationTitle *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::SystemText_ClarificationTitle::clear_action(SnippetUI::SystemText_ClarificationTitle *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

SnippetUI::SystemText_ClarificationTitle *SnippetUI::SystemText_ClarificationTitle::SystemText_ClarificationTitle(SnippetUI::SystemText_ClarificationTitle *this, const SnippetUI::SystemText_ClarificationTitle *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;

  *(_QWORD *)this = &off_1E7930EA0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SystemText_ClarificationTitle *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::SystemText_ClarificationTitle *)&SnippetUI::_SystemText_ClarificationTitle_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 4));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 4) = v9;
  return this;
}

void sub_1BFA6596C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SystemText_ClarificationTitle::CopyFrom(SnippetUI::SystemText_ClarificationTitle *this, const SnippetUI::SystemText_ClarificationTitle *a2)
{
  if (a2 != this)
  {
    SnippetUI::SystemText_ClarificationTitle::Clear(this);
    SnippetUI::SystemText_ClarificationTitle::MergeFrom(this, a2);
  }
}

void SnippetUI::SystemText_ClarificationTitle::InternalSwap(SnippetUI::SystemText_ClarificationTitle *this, SnippetUI::SystemText_ClarificationTitle *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::SystemText_ClarificationTitle *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
}

void siri::dialogengine::GetLocationComponentOrder(const std::string *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  siri::dialogengine *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  unsigned int v24;
  unsigned __int8 v25;
  __int128 *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t i;
  siri::dialogengine *v30;
  uint64_t v31;
  std::string v32;
  void *__dst;
  void *v34;
  uint64_t v35;
  std::string v36;
  void *__p[2];
  char v38;
  uint64_t v39[3];
  uint64_t v40[3];
  uint64_t v41[3];
  uint64_t v42[3];
  uint64_t v43[3];
  uint64_t v44[3];
  uint64_t v45[3];
  _QWORD v46[5];

  v46[3] = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0)
  {
    if ((_DWORD)v30)
    {
      siri::dialogengine::GetComponentOrderings(v30);
      siri::dialogengine::GetLocationComponentOrder(std::string const&)::componentOrderings = (uint64_t)&siri::dialogengine::GetComponentOrderings(void)::orderings;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  siri::dialogengine::GetCanonicalLocale(a1, 0, &v36);
  siri::dialogengine::GetDefaultOrder(v5);
  __dst = 0;
  v34 = 0;
  v35 = 0;
  std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(&__dst, (const void *)siri::dialogengine::GetDefaultOrder(void)::defaultOrder[0], unk_1EF582660, (unk_1EF582660 - siri::dialogengine::GetDefaultOrder(void)::defaultOrder[0]) >> 2);
  v6 = siri::dialogengine::GetLocationComponentOrder(std::string const&)::componentOrderings;
  siri::dialogengine::StringToLower((uint64_t)&v36, (uint64_t)__p);
  v7 = std::__tree<std::string>::find<std::string>(v6, (const void **)__p);
  if (v38 < 0)
    operator delete(__p[0]);
  v8 = siri::dialogengine::GetLocationComponentOrder(std::string const&)::componentOrderings;
  if (siri::dialogengine::GetLocationComponentOrder(std::string const&)::componentOrderings + 8 == v7)
  {
    siri::dialogengine::GetLocaleCountry(&v32);
    siri::dialogengine::StringToLower((uint64_t)&v32, (uint64_t)__p);
    v7 = std::__tree<std::string>::find<std::string>(v8, (const void **)__p);
    if (v38 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    v8 = siri::dialogengine::GetLocationComponentOrder(std::string const&)::componentOrderings;
  }
  v9 = v8 + 8;
  v10 = (char *)__dst;
  if (v7 == v9)
  {
    v18 = (char *)v34;
    goto LABEL_31;
  }
  v11 = *(char **)(v7 + 56);
  v12 = *(_BYTE **)(v7 + 64);
  v13 = v12 - v11;
  v14 = (v12 - v11) >> 2;
  v15 = v35;
  if (v14 <= (v35 - (uint64_t)__dst) >> 2)
  {
    v19 = (char *)v34;
    v20 = ((_BYTE *)v34 - (_BYTE *)__dst) >> 2;
    if (v20 < v14)
    {
      v21 = &v11[4 * v20];
      if (v34 != __dst)
      {
        memmove(__dst, v11, (_BYTE *)v34 - (_BYTE *)__dst);
        v10 = v19;
      }
      v13 = v12 - v21;
      if (v12 == v21)
        goto LABEL_30;
      v22 = v10;
      v23 = v21;
      goto LABEL_29;
    }
  }
  else
  {
    if (__dst)
    {
      operator delete(__dst);
      v15 = 0;
      __dst = 0;
      v34 = 0;
      v35 = 0;
    }
    if ((v13 & 0x8000000000000000) != 0)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v16 = v15 >> 1;
    if (v15 >> 1 <= v14)
      v16 = (v12 - v11) >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    std::vector<siri::dialogengine::LocationComponents>::__vallocate[abi:ne180100](&__dst, v17);
    v10 = (char *)v34;
  }
  if (v12 != v11)
  {
    v22 = v10;
    v23 = v11;
LABEL_29:
    memmove(v22, v23, v13);
  }
LABEL_30:
  v18 = &v10[v13];
  v34 = v18;
  v10 = (char *)__dst;
LABEL_31:
  if (v10 != v18)
  {
    do
    {
      v24 = *(_DWORD *)v10;
      if ((v25 & 1) == 0
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "fullThoroughfare");
        std::string::basic_string[abi:ne180100]<0>(v39, "subThoroughfare");
        std::string::basic_string[abi:ne180100]<0>(v40, "thoroughfare");
        std::string::basic_string[abi:ne180100]<0>(v41, "locality");
        std::string::basic_string[abi:ne180100]<0>(v42, "subAdministrativeArea");
        std::string::basic_string[abi:ne180100]<0>(v43, "administrativeArea");
        std::string::basic_string[abi:ne180100]<0>(v44, "postCode");
        std::string::basic_string[abi:ne180100]<0>(v45, "country");
        std::string::basic_string[abi:ne180100]<0>(v46, "LINE_SEPARATOR");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&siri::dialogengine::GetLocationComponentNames(void)::names, (__int128 *)__p, 9uLL);
        for (i = 0; i != -216; i -= 24)
        {
          if (*((char *)&v46[2] + i + 7) < 0)
          {
            v31 = i;
            operator delete(*(void **)((char *)v46 + i));
            i = v31;
          }
        }
        __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &siri::dialogengine::GetLocationComponentNames(void)::names, &dword_1BF794000);
      }
      v26 = (__int128 *)(siri::dialogengine::GetLocationComponentNames(void)::names + 24 * v24);
      v27 = a2[1];
      if (v27 >= a2[2])
      {
        v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v26);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v26);
        v28 = v27 + 24;
      }
      a2[1] = v28;
      v10 += 4;
    }
    while (v10 != v18);
    v18 = (char *)__dst;
  }
  if (v18)
  {
    v34 = v18;
    operator delete(v18);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_1BFA65F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetComponentOrderings(siri::dialogengine *this)
{
  unsigned __int8 v1;
  siri::dialogengine *v2;
  siri::dialogengine *v3;
  siri::dialogengine *v4;
  siri::dialogengine *v5;
  siri::dialogengine *v6;
  siri::dialogengine *v7;
  siri::dialogengine *v8;
  std::string *v9;
  siri::dialogengine *v10;
  siri::dialogengine *v11;
  siri::dialogengine *v12;
  std::string *v13;
  siri::dialogengine *v14;
  std::string *v15;
  std::string *v16;
  siri::dialogengine *v17;
  siri::dialogengine *v18;
  siri::dialogengine *v19;
  uint64_t i;
  void *__p[3];
  void *v22[2];
  char v23;
  void *v24[3];
  void *v25[2];
  char v26;
  void *v27[3];
  void *v28[2];
  char v29;
  void *v30[3];
  void *v31[2];
  char v32;
  void *v33[3];
  void *v34[2];
  char v35;
  void *v36[3];
  void *v37[2];
  char v38;
  void *v39[3];
  void *v40[2];
  char v41;
  void *v42[3];
  void *v43[2];
  char v44;
  _OWORD v45[3];
  __int128 v46;
  _OWORD v47[2];
  _OWORD v48[2];
  _OWORD v49[2];
  _OWORD v50[3];
  uint64_t v51;
  _OWORD v52[3];
  uint64_t v53;
  __int128 v54;
  _OWORD v55[2];
  _OWORD v56[3];
  uint64_t v57;
  _OWORD v58[3];
  __int128 v59[3];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  std::string v66[2];
  std::string v67[2];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  std::string v72[2];
  _QWORD v73[6];
  _QWORD v74[6];
  std::string v75[2];
  std::string v76[2];
  _QWORD v77[6];
  std::string v78[2];
  std::string v79[2];
  std::string v80[2];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[7];

  v84[6] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      siri::dialogengine::GetDefaultOrder(v2);
      v3 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v59, "ar", (uint64_t)siri::dialogengine::GetDefaultOrder(void)::defaultOrder);
      siri::dialogengine::GetDefaultNorthernEuropeanOrder(v3);
      v4 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v60, "da", (uint64_t)siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder);
      siri::dialogengine::GetDefaultNorthernEuropeanOrder(v4);
      v5 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v61, "de", (uint64_t)siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder);
      siri::dialogengine::GetDefaultOrder(v5);
      v6 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v62, "en", (uint64_t)siri::dialogengine::GetDefaultOrder(void)::defaultOrder);
      siri::dialogengine::GetDefaultOrder(v6);
      v7 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[6],std::vector<siri::dialogengine::LocationComponents> const&,0>(v63, "es_US", (uint64_t)siri::dialogengine::GetDefaultOrder(void)::defaultOrder);
      siri::dialogengine::GetDefaultSouthernEuropeanOrder(v7);
      v8 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v64, "es", (uint64_t)siri::dialogengine::GetDefaultSouthernEuropeanOrder(void)::defaultSoutherEurpeanOrder);
      siri::dialogengine::GetDefaultNorthernEuropeanOrder(v8);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v65, "fi", (uint64_t)siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder);
      std::string::basic_string[abi:ne180100]<0>(v43, "fr");
      v58[0] = xmmword_1BFCC2564;
      v58[1] = unk_1BFCC2574;
      v58[2] = xmmword_1BFCC2584;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v42, v58, 0xCuLL);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v66, (__int128 *)v43, (uint64_t)v42);
      std::string::basic_string[abi:ne180100]<0>(v40, "he");
      v56[0] = xmmword_1BFCC2594;
      v56[1] = unk_1BFCC25A4;
      v56[2] = xmmword_1BFCC25B4;
      v57 = 0x700000008;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v39, v56, 0xEuLL);
      v9 = std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v67, (__int128 *)v40, (uint64_t)v39);
      siri::dialogengine::GetDefaultOrder((siri::dialogengine *)v9);
      v10 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v68, "hi", (uint64_t)siri::dialogengine::GetDefaultOrder(void)::defaultOrder);
      siri::dialogengine::GetDefaultSouthernEuropeanOrder(v10);
      v11 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v69, "it", (uint64_t)siri::dialogengine::GetDefaultSouthernEuropeanOrder(void)::defaultSoutherEurpeanOrder);
      siri::dialogengine::GetDefaultAsianOrder(v11);
      v12 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v70, "ja", (uint64_t)siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder);
      siri::dialogengine::GetDefaultAsianOrder(v12);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v71, "ko", (uint64_t)siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder);
      std::string::basic_string[abi:ne180100]<0>(v37, "ms");
      v54 = xmmword_1BFCC25CC;
      v55[0] = unk_1BFCC25DC;
      *(_OWORD *)((char *)v55 + 12) = unk_1BFCC25E8;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v36, &v54, 0xBuLL);
      v13 = std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v72, (__int128 *)v37, (uint64_t)v36);
      siri::dialogengine::GetDefaultNorthernEuropeanOrder((siri::dialogengine *)v13);
      v14 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v73, "nb", (uint64_t)siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder);
      siri::dialogengine::GetDefaultNorthernEuropeanOrder(v14);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v74, "nl", (uint64_t)siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder);
      std::string::basic_string[abi:ne180100]<0>(v34, "pt");
      v52[0] = xmmword_1BFCC26F8;
      v52[1] = unk_1BFCC2708;
      v52[2] = xmmword_1BFCC2718;
      v53 = 0x700000008;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v33, v52, 0xEuLL);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v75, (__int128 *)v34, (uint64_t)v33);
      std::string::basic_string[abi:ne180100]<0>(v31, "ru");
      v50[0] = xmmword_1BFCC25F8;
      v50[1] = unk_1BFCC2608;
      v50[2] = xmmword_1BFCC2618;
      v51 = 0x700000008;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v30, v50, 0xEuLL);
      v15 = std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v76, (__int128 *)v31, (uint64_t)v30);
      siri::dialogengine::GetDefaultNorthernEuropeanOrder((siri::dialogengine *)v15);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v77, "sv", (uint64_t)siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder);
      std::string::basic_string[abi:ne180100]<0>(v28, "th");
      v48[0] = xmmword_1BFCC2630;
      v48[1] = unk_1BFCC2640;
      v49[0] = xmmword_1BFCC2650;
      *(_OWORD *)((char *)v49 + 12) = *(__int128 *)((char *)&xmmword_1BFCC2650 + 12);
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v27, v48, 0xFuLL);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v78, (__int128 *)v28, (uint64_t)v27);
      std::string::basic_string[abi:ne180100]<0>(v25, "tr");
      v46 = xmmword_1BFCC266C;
      v47[0] = *(_OWORD *)algn_1BFCC267C;
      *(_OWORD *)((char *)v47 + 12) = unk_1BFCC2688;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](v24, &v46, 0xBuLL);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v79, (__int128 *)v25, (uint64_t)v24);
      std::string::basic_string[abi:ne180100]<0>(v22, "vi");
      v45[0] = xmmword_1BFCC2698;
      v45[1] = unk_1BFCC26A8;
      v45[2] = xmmword_1BFCC26B8;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](__p, v45, 0xCuLL);
      v16 = std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(v80, (__int128 *)v22, (uint64_t)__p);
      siri::dialogengine::GetDefaultAsianOrder((siri::dialogengine *)v16);
      v17 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[4],std::vector<siri::dialogengine::LocationComponents> const&,0>(v81);
      siri::dialogengine::GetDefaultAsianOrder(v17);
      v18 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(v82, "zh", (uint64_t)siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder);
      siri::dialogengine::GetDefaultAsianOrder(v18);
      v19 = (siri::dialogengine *)std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[6],std::vector<siri::dialogengine::LocationComponents> const&,0>(v83, "zh_cn", (uint64_t)siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder);
      siri::dialogengine::GetDefaultAsianOrder(v19);
      std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[6],std::vector<siri::dialogengine::LocationComponents> const&,0>(v84, "zh_tw", (uint64_t)siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder);
      std::map<std::string,std::vector<siri::dialogengine::LocationComponents>>::map[abi:ne180100](v59, 26);
      for (i = 75; i != -3; i -= 3)
        std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::~pair((uint64_t)&v59[i]);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v23 < 0)
        operator delete(v22[0]);
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      if (v26 < 0)
        operator delete(v25[0]);
      if (v27[0])
      {
        v27[1] = v27[0];
        operator delete(v27[0]);
      }
      if (v29 < 0)
        operator delete(v28[0]);
      if (v30[0])
      {
        v30[1] = v30[0];
        operator delete(v30[0]);
      }
      if (v32 < 0)
        operator delete(v31[0]);
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      if (v35 < 0)
        operator delete(v34[0]);
      if (v36[0])
      {
        v36[1] = v36[0];
        operator delete(v36[0]);
      }
      if (v38 < 0)
        operator delete(v37[0]);
      if (v39[0])
      {
        v39[1] = v39[0];
        operator delete(v39[0]);
      }
      if (v41 < 0)
        operator delete(v40[0]);
      if (v42[0])
      {
        v42[1] = v42[0];
        operator delete(v42[0]);
      }
      if (v44 < 0)
        operator delete(v43[0]);
      __cxa_atexit((void (*)(void *))std::map<std::string,std::vector<siri::dialogengine::LocationComponents>>::~map[abi:ne180100], &siri::dialogengine::GetComponentOrderings(void)::orderings, &dword_1BF794000);
    }
  }
}

void sub_1BFA66738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  void *a66;
  char a71;
  void *a72;
  void *a73;
  char a74;
  uint64_t v74;
  uint64_t i;

  for (i = 1200; i != -48; i -= 48)
    std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::~pair(v74 + i);
  if (__p)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a18)
    operator delete(a18);
  if (a26 < 0)
    operator delete(a21);
  if (a27)
    operator delete(a27);
  if (a35 < 0)
    operator delete(a30);
  if (a36)
    operator delete(a36);
  if (a44 < 0)
    operator delete(a39);
  if (a45)
    operator delete(a45);
  if (a53 < 0)
    operator delete(a48);
  if (a54)
    operator delete(a54);
  if (a62 < 0)
    operator delete(a57);
  if (a63)
    operator delete(a63);
  if (a71 < 0)
    operator delete(a66);
  if (a72)
    operator delete(a72);
  if (a74 < 0)
    operator delete(a73);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetDefaultOrder(siri::dialogengine *this)
{
  unsigned __int8 v1;
  __int128 v2;
  _OWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0)
  {
    {
      v2 = xmmword_1BFCC2758;
      v3[0] = unk_1BFCC2768;
      *(_OWORD *)((char *)v3 + 12) = unk_1BFCC2774;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](siri::dialogengine::GetDefaultOrder(void)::defaultOrder, &v2, 0xBuLL);
      __cxa_atexit((void (*)(void *))std::vector<siri::dialogengine::LocationComponents>::~vector[abi:ne180100], siri::dialogengine::GetDefaultOrder(void)::defaultOrder, &dword_1BF794000);
    }
  }
}

void sub_1BFA66A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<siri::dialogengine::LocationComponents>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BFA66ABC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

char *std::vector<siri::dialogengine::LocationComponents>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 62)
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(4 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

_QWORD *std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<siri::dialogengine::LocationComponents>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_1BFA66BB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<siri::dialogengine::LocationComponents>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[3],std::vector<siri::dialogengine::LocationComponents> const&,0>(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v5[3] = 0;
  v5[4] = 0;
  v5 += 3;
  v5[2] = 0;
  std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(v5, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return a1;
}

void sub_1BFA66C3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDefaultNorthernEuropeanOrder(siri::dialogengine *this)
{
  unsigned __int8 v1;
  _OWORD v2[3];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0)
  {
    {
      v2[0] = xmmword_1BFCC26C8;
      v2[1] = unk_1BFCC26D8;
      v2[2] = xmmword_1BFCC26E8;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder, v2, 0xCuLL);
      __cxa_atexit((void (*)(void *))std::vector<siri::dialogengine::LocationComponents>::~vector[abi:ne180100], siri::dialogengine::GetDefaultNorthernEuropeanOrder(void)::defaultNorthernEuropeanOrder, &dword_1BF794000);
    }
  }
}

void sub_1BFA66D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[6],std::vector<siri::dialogengine::LocationComponents> const&,0>(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v5[3] = 0;
  v5[4] = 0;
  v5 += 3;
  v5[2] = 0;
  std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(v5, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return a1;
}

void sub_1BFA66D74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDefaultSouthernEuropeanOrder(siri::dialogengine *this)
{
  unsigned __int8 v1;
  _OWORD v2[3];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0)
  {
    {
      v3 = 0x700000008;
      v2[0] = xmmword_1BFCC26F8;
      v2[1] = unk_1BFCC2708;
      v2[2] = xmmword_1BFCC2718;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](siri::dialogengine::GetDefaultSouthernEuropeanOrder(void)::defaultSoutherEurpeanOrder, v2, 0xEuLL);
      __cxa_atexit((void (*)(void *))std::vector<siri::dialogengine::LocationComponents>::~vector[abi:ne180100], siri::dialogengine::GetDefaultSouthernEuropeanOrder(void)::defaultSoutherEurpeanOrder, &dword_1BF794000);
    }
  }
}

void sub_1BFA66E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(this[1].__r_.__value_.__r.__words, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return this;
}

void sub_1BFA66EE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDefaultAsianOrder(siri::dialogengine *this)
{
  unsigned __int8 v1;
  _OWORD v2[2];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0)
  {
    {
      v2[0] = xmmword_1BFCC2730;
      v2[1] = unk_1BFCC2740;
      v3 = 1;
      std::vector<siri::dialogengine::LocationComponents>::vector[abi:ne180100](siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder, v2, 0xAuLL);
      __cxa_atexit((void (*)(void *))std::vector<siri::dialogengine::LocationComponents>::~vector[abi:ne180100], siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder, &dword_1BF794000);
    }
  }
}

void sub_1BFA66FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::pair[abi:ne180100]<char const(&)[4],std::vector<siri::dialogengine::LocationComponents> const&,0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "yue");
  v2[3] = 0;
  v2[4] = 0;
  v2 += 3;
  v2[2] = 0;
  std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(v2, (const void *)siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder[0], unk_1EF582640, (unk_1EF582640 - siri::dialogengine::GetDefaultAsianOrder(void)::defaultAsianOrder[0]) >> 2);
  return a1;
}

void sub_1BFA67028(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::map<std::string,std::vector<siri::dialogengine::LocationComponents>>::map[abi:ne180100](__int128 *a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  _BOOL4 v9;
  uint64_t *v10;
  const void **v11;
  char *v12;
  uint64_t *v13;
  __int128 v14;
  _QWORD v15[2];
  char v16;

  qword_1EF5825E8 = 0;
  qword_1EF5825E0 = 0;
  siri::dialogengine::GetComponentOrderings(void)::orderings = (uint64_t)&qword_1EF5825E0;
  if (a2)
  {
    v2 = a1;
    v3 = 0;
    v4 = &a1[3 * a2];
    v5 = &qword_1EF5825E0;
    while (v5 != &qword_1EF5825E0)
    {
      if (v3)
      {
        do
        {
          v6 = (uint64_t *)v3;
          v3 = *(_QWORD *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        v7 = &qword_1EF5825E0;
        do
        {
          v6 = (uint64_t *)v7[2];
          v8 = *v6 == (_QWORD)v7;
          v7 = v6;
        }
        while (v8);
      }
      v9 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF5825E8, (const void **)v6 + 4, (const void **)v2);
      v3 = qword_1EF5825E0;
      if (v9)
        goto LABEL_11;
      if (qword_1EF5825E0)
      {
        v10 = &qword_1EF5825E0;
        while (1)
        {
          while (1)
          {
            v6 = (uint64_t *)v3;
            v11 = (const void **)(v3 + 32);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF5825E8, (const void **)v2, (const void **)(v3 + 32)))break;
            v3 = *v6;
            v10 = v6;
            if (!*v6)
              goto LABEL_24;
          }
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF5825E8, v11, (const void **)v2))
            break;
          v10 = v6 + 1;
          v3 = v6[1];
          if (!v3)
            goto LABEL_24;
        }
LABEL_13:
        if (*v10)
          goto LABEL_30;
        goto LABEL_24;
      }
LABEL_23:
      v6 = &qword_1EF5825E0;
      v10 = &qword_1EF5825E0;
LABEL_24:
      v12 = (char *)operator new(0x50uLL);
      v13 = (uint64_t *)v12;
      v15[0] = v12;
      v15[1] = &qword_1EF5825E0;
      v16 = 0;
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v12 + 32), *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
      }
      else
      {
        v14 = *v2;
        *((_QWORD *)v12 + 6) = *((_QWORD *)v2 + 2);
        *((_OWORD *)v12 + 2) = v14;
      }
      v13[7] = 0;
      v13[8] = 0;
      v13[9] = 0;
      std::vector<siri::dialogengine::LocationComponents>::__init_with_size[abi:ne180100]<siri::dialogengine::LocationComponents*,siri::dialogengine::LocationComponents*>(v13 + 7, *((const void **)v2 + 3), *((_QWORD *)v2 + 4), (uint64_t)(*((_QWORD *)v2 + 4) - *((_QWORD *)v2 + 3)) >> 2);
      v16 = 1;
      *v13 = 0;
      v13[1] = 0;
      v13[2] = (uint64_t)v6;
      *v10 = (uint64_t)v13;
      if (*(_QWORD *)siri::dialogengine::GetComponentOrderings(void)::orderings)
      {
        siri::dialogengine::GetComponentOrderings(void)::orderings = *(_QWORD *)siri::dialogengine::GetComponentOrderings(void)::orderings;
        v13 = (uint64_t *)*v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EF5825E0, v13);
      ++qword_1EF5825E8;
      v15[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
LABEL_30:
      v2 += 3;
      if (v2 == v4)
        return;
      v5 = (uint64_t *)siri::dialogengine::GetComponentOrderings(void)::orderings;
      v3 = qword_1EF5825E0;
    }
    v6 = &qword_1EF5825E0;
LABEL_11:
    if (v3)
    {
      v10 = v6 + 1;
      goto LABEL_13;
    }
    goto LABEL_23;
  }
}

void sub_1BFA6724C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>>>::destroy((_QWORD *)qword_1EF5825E0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::map<std::string,std::vector<siri::dialogengine::LocationComponents>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void std::__tree<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<siri::dialogengine::LocationComponents>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<siri::dialogengine::LocationComponents>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void sub_1BFA67458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BFA67634(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BFA67844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BFA679C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BFA67BB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BFA68034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BFA68144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BFA681C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFA68594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{

  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1BFA687BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BFA688BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BFA68960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFA68A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BFA68B18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFA68DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BFA68EA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *CATPatternExecute(std::string::size_type a1)
{
  uint64_t v2;
  char *v3;
  std::string::size_type v4;
  char v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v8;
  int v9;
  __n128 v10;
  std::string::size_type v11;
  int v12;
  int v13;
  int v14;
  void *v15;
  void *v16;
  void **v17;
  int v18;
  int v19;
  dispatch_semaphore_t v21;
  NSObject *v22;
  NSObject *v23;
  id v24;
  void **v25;
  unsigned int v26;
  std::string *p_p;
  unsigned int v28;
  void *v29;
  void *v30;
  BOOL v31;
  id v32;
  const char *v33;
  unsigned int v34;
  void *v35;
  BOOL v36;
  id v37;
  const char *v38;
  unsigned int v39;
  void *v40;
  BOOL v41;
  void *v42;
  void *v43;
  void *v44;
  BOOL v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  void *v50;
  id v51;
  const char *v52;
  unsigned int v53;
  id v54;
  const char *v55;
  unsigned int v56;
  id v57;
  const char *v58;
  unsigned int v59;
  id v60;
  const char *v61;
  unsigned int v62;
  id v63;
  const char *v64;
  unsigned int v65;
  id v66;
  const char *v67;
  unsigned int v68;
  id v69;
  const char *v70;
  unsigned int v71;
  id v72;
  const char *v73;
  unsigned int v74;
  id v75;
  const char *v76;
  unsigned int v77;
  id v78;
  const char *v79;
  unsigned int v80;
  id v81;
  const char *v82;
  unsigned int v83;
  id v84;
  const char *v85;
  unsigned int v86;
  id v87;
  const char *v88;
  unsigned int v89;
  id v90;
  const char *v91;
  unsigned int v92;
  void *v93;
  int v94;
  int v95;
  void *v96;
  int v97;
  int v98;
  int v99;
  int v100;
  void *v101;
  void *v102;
  BOOL v103;
  void *v104;
  void *v105;
  id v106;
  const char *v107;
  unsigned int v108;
  char **v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t j;
  id v115;
  const char *v116;
  unsigned int v117;
  void *v118;
  id v119;
  const char *v120;
  unsigned int v121;
  char *String;
  char *v123;
  char *v124;
  uint64_t v126;
  int v127;
  int v128;
  id v129;
  int v130;
  void *v131;
  id v132;
  void *v133;
  char v134;
  std::string::value_type *__s;
  void *v136;
  id obj;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  char v143;
  char *__s1[2];
  unsigned __int8 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  std::string v150;
  __int128 v151;
  id v152;
  uint64_t v153;
  int v154;
  __int16 v155;
  uint64_t v156;
  void *v157[2];
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD block[4];
  id v162;
  id v163;
  NSObject *v164;
  std::string *v165;
  std::string *v166;
  std::string v167;
  std::string v168;
  std::string v169;
  uint64_t (*v170)(uint64_t, uint64_t);
  void (*v171)(uint64_t);
  id v172;
  id v173;
  _DWORD v174[2];
  std::string __sz;
  std::string __p;
  void *v177[2];
  char v178;
  _BYTE v179[128];
  _BYTE v180[128];
  unsigned int v181[22];
  unsigned int v182;
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v177, "success");
  memset(&__p, 0, sizeof(__p));
  memset(&__sz, 0, sizeof(__sz));
  *(_DWORD *)((char *)v174 + 3) = 0;
  v174[0] = 0;
  v2 = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)v181);
  v150.__r_.__value_.__r.__words[0] = a1;
  v150.__r_.__value_.__l.__size_ = a1;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<128u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(v2, (uint64_t)&v150);
  if (v182)
  {
    if (v182 > 0x11)
      v3 = "Unknown error.";
    else
      v3 = off_1E7931C38[v182];
    std::string::basic_string[abi:ne180100]<0>(&v150, v3);
    MEMORY[0x1C3B8D53C](v177, "request-error");
    std::operator+<char>();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v169;
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
  }
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v181, "templateDir"))
  {
    std::string::basic_string[abi:ne180100]<0>(&v169, "templateDir");
    siri::dialogengine::ParseJSONString(v181, (const char *)&v169, &v150);
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__sz.__r_.__value_.__l.__data_);
    __sz = v150;
    *((_BYTE *)&v150.__r_.__value_.__s + 23) = 0;
    v150.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v169.__r_.__value_.__l.__data_);
  }
  v4 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
  v5 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
  size = __sz.__r_.__value_.__l.__size_;
  if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
  else
    v7 = __sz.__r_.__value_.__l.__size_;
  if (!v7)
  {
    MEMORY[0x1C3B8D53C](v177, "request-error");
    MEMORY[0x1C3B8D53C](&__p, "Template dir not specified in JSON request");
    v4 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
    size = __sz.__r_.__value_.__l.__size_;
    v5 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
  }
  if (v5 < 0)
    v4 = size;
  if (v4 && !siri::dialogengine::DirExists((uint64_t *)&__sz))
  {
    MEMORY[0x1C3B8D53C](v177, "request-error");
    std::operator+<char>();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v150;
  }
  if (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v181, "patternId"))
  {
    LOBYTE(v9) = 0;
    v8 = 0;
    __s = 0;
    goto LABEL_31;
  }
  std::string::basic_string[abi:ne180100]<0>(&v169, "patternId");
  siri::dialogengine::ParseJSONString(v181, (const char *)&v169, &v150);
  v8 = v150.__r_.__value_.__l.__size_;
  __s = (std::string::value_type *)v150.__r_.__value_.__r.__words[0];
  v174[0] = v150.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v174 + 3) = *(_DWORD *)((char *)&v150.__r_.__value_.__r.__words[2] + 3);
  v9 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
  *((_BYTE *)&v150.__r_.__value_.__s + 23) = 0;
  v150.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v169.__r_.__value_.__l.__data_);
    if (v9 < 0)
      goto LABEL_34;
LABEL_31:
    v130 = 0;
    v134 = v9;
    if ((_BYTE)v9)
      goto LABEL_35;
    goto LABEL_32;
  }
  if ((v9 & 0x80000000) == 0)
    goto LABEL_31;
LABEL_34:
  v134 = v9;
  v130 = 1;
  if (!v8)
  {
LABEL_32:
    MEMORY[0x1C3B8D53C](v177, "request-error");
    MEMORY[0x1C3B8D53C](&__p, "Pattern ID not specified in JSON request");
  }
LABEL_35:
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v181, "locale"))
  {
    std::string::basic_string[abi:ne180100]<0>(v157, "locale");
    siri::dialogengine::ParseJSONString(v181, (const char *)v157, &v169);
    v10.n128_f64[0] = siri::dialogengine::GetCanonicalLocale(&v169, 0, &v150);
    v11 = v150.__r_.__value_.__l.__size_;
    v136 = (void *)v150.__r_.__value_.__r.__words[0];
    v12 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
    *((_BYTE *)&v150.__r_.__value_.__s + 23) = 0;
    v150.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    {
      v13 = v12;
      operator delete(v169.__r_.__value_.__l.__data_);
      v12 = v13;
    }
    if (SBYTE7(v158) < 0)
    {
      v14 = v12;
      operator delete(v157[0]);
      LOBYTE(v12) = v14;
      if (v14 < 0)
        goto LABEL_45;
    }
    else if (v12 < 0)
    {
LABEL_45:
      HIDWORD(v126) = 1;
      if (v11)
        goto LABEL_46;
      goto LABEL_43;
    }
  }
  else
  {
    LOBYTE(v12) = 0;
    v136 = 0;
  }
  HIDWORD(v126) = 0;
  if (!(_BYTE)v12)
  {
LABEL_43:
    MEMORY[0x1C3B8D53C](v177, "request-error", v10);
    MEMORY[0x1C3B8D53C](&__p, "Locale not specified in JSON request");
  }
LABEL_46:
  if (os_variant_has_internal_diagnostics()
    && rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v181, "debug"))
  {
    std::string::basic_string[abi:ne180100]<0>(&v150, "debug");
    LODWORD(v126) = siri::dialogengine::ParseJSONBool(v181, (const char *)&v150, 0);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
  }
  else
  {
    LODWORD(v126) = 0;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1, v126);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "dataUsingEncoding:", 4);
  v133 = (void *)objc_claimAutoreleasedReturnValue();

  v173 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v133, 0, &v173);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v129 = v173;
  v131 = v16;
  objc_msgSend(v16, "objectForKey:", CFSTR("parameters"));
  v132 = (id)objc_claimAutoreleasedReturnValue();
  if (!v132)
    v132 = objc_alloc_init(MEMORY[0x1E0C99D80]);
  v169.__r_.__value_.__r.__words[0] = 0;
  v169.__r_.__value_.__l.__size_ = (std::string::size_type)&v169;
  v169.__r_.__value_.__r.__words[2] = 0x3032000000;
  v170 = __Block_byref_object_copy__21979;
  v171 = __Block_byref_object_dispose__21980;
  v172 = 0;
  if (v178 < 0)
  {
    if (v177[1] != (void *)7)
      goto LABEL_76;
    v17 = (void **)v177[0];
  }
  else
  {
    if (v178 != 7)
      goto LABEL_76;
    v17 = v177;
  }
  v18 = *(_DWORD *)v17;
  v19 = *(_DWORD *)((char *)v17 + 3);
  if (v18 == 1667462515 && v19 == 1936942435)
  {
    v150.__r_.__value_.__r.__words[0] = 0;
    v150.__r_.__value_.__l.__size_ = (std::string::size_type)&v150;
    v150.__r_.__value_.__r.__words[2] = 0x3032000000;
    *(_QWORD *)&v151 = __Block_byref_object_copy__21979;
    *((_QWORD *)&v151 + 1) = __Block_byref_object_dispose__21980;
    v152 = 0;
    v21 = dispatch_semaphore_create(0);
    dispatch_get_global_queue(0, 0);
    v22 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3321888768;
    block[2] = __CATPatternExecute_block_invoke;
    block[3] = &unk_1E7930FC0;
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v167, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    else
      v167 = __sz;
    if ((v130 & 1) != 0)
    {
      std::string::__init_copy_ctor_external(&v168, __s, v8);
    }
    else
    {
      v168.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
      v168.__r_.__value_.__l.__size_ = v8;
      LODWORD(v168.__r_.__value_.__r.__words[2]) = v174[0];
      *(_DWORD *)((char *)&v168.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v174 + 3);
      *((_BYTE *)&v168.__r_.__value_.__s + 23) = v134;
    }
    v162 = v132;
    v163 = v16;
    v165 = &v169;
    v166 = &v150;
    v23 = v21;
    v164 = v23;
    dispatch_async(v22, block);

    dispatch_semaphore_wait(v23, 0xFFFFFFFFFFFFFFFFLL);
    if (*(_QWORD *)(v150.__r_.__value_.__l.__size_ + 40))
    {
      MEMORY[0x1C3B8D53C](v177, "load-failed");
      objc_msgSend(*(id *)(v150.__r_.__value_.__l.__size_ + 40), "localizedDescription");
      v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      MEMORY[0x1C3B8D53C](&__p, objc_msgSend(v24, "UTF8String"));

    }
    if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v168.__r_.__value_.__l.__data_);
    if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v167.__r_.__value_.__l.__data_);

    _Block_object_dispose(&v150, 8);
  }
LABEL_76:
  *(_OWORD *)v157 = 0u;
  v158 = 0u;
  v159 = 0;
  v160 = 256;
  *(_OWORD *)&v150.__r_.__value_.__r.__words[1] = 0u;
  v151 = 0u;
  v150.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
  v152 = 0;
  v153 = 512;
  v154 = 324;
  v155 = 0x2000;
  v156 = 4;
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v150);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"status", 6u);
  if (v178 >= 0)
    v25 = v177;
  else
    v25 = (void **)v177[0];
  v26 = strlen((const char *)v25);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v25, v26);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"error", 5u);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v28 = strlen((const char *)p_p);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)p_p, v28);
  v29 = *(void **)(v169.__r_.__value_.__l.__size_ + 40);
  if (v29)
  {
    objc_msgSend(v29, "patternId");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v30 == 0;

    if (!v31)
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"patternId", 9u);
      objc_msgSend(*(id *)(v169.__r_.__value_.__l.__size_ + 40), "patternId");
      v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v33 = (const char *)objc_msgSend(v32, "UTF8String");
      v34 = strlen(v33);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v33, v34);

    }
    if (objc_msgSend(*(id *)(v169.__r_.__value_.__l.__size_ + 40), "patternType"))
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"patternType", 0xBu);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int((uint64_t **)&v150, (rapidjson::internal *)objc_msgSend(*(id *)(v169.__r_.__value_.__l.__size_ + 40), "patternType"));
    }
    objc_msgSend(*(id *)(v169.__r_.__value_.__l.__size_ + 40), "responseMode");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = v35 == 0;

    if (!v36)
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"responseMode", 0xCu);
      objc_msgSend(*(id *)(v169.__r_.__value_.__l.__size_ + 40), "responseMode");
      v37 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v38 = (const char *)objc_msgSend(v37, "UTF8String");
      v39 = strlen(v38);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v38, v39);

    }
    objc_msgSend(*(id *)(v169.__r_.__value_.__l.__size_ + 40), "printSupportingDialog");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = v40 == 0;

    if (!v41)
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"printSupportingDialog", 0x15u);
      objc_msgSend(*(id *)(v169.__r_.__value_.__l.__size_ + 40), "printSupportingDialog");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int((uint64_t **)&v150, (rapidjson::internal *)objc_msgSend(v42, "intValue"));

    }
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"dialog", 6u);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)&v150);
  v43 = *(void **)(v169.__r_.__value_.__l.__size_ + 40);
  if (v43)
  {
    objc_msgSend(v43, "dialog");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = v44 == 0;

    if (!v45)
    {
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      objc_msgSend(*(id *)(v169.__r_.__value_.__l.__size_ + 40), "dialog");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      obj = v46;
      v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v146, v180, 16);
      if (v47)
      {
        v48 = *(_QWORD *)v147;
        do
        {
          for (i = 0; i != v47; ++i)
          {
            if (*(_QWORD *)v147 != v48)
              objc_enumerationMutation(obj);
            v50 = *(void **)(*((_QWORD *)&v146 + 1) + 8 * i);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v150);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"dialogId", 8u);
            objc_msgSend(v50, "dialogId");
            v51 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v52 = (const char *)objc_msgSend(v51, "UTF8String");
            v53 = strlen(v52);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v52, v53);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"groupName", 9u);
            objc_msgSend(v50, "groupName");
            v54 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v55 = (const char *)objc_msgSend(v54, "UTF8String");
            v56 = strlen(v55);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v55, v56);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"fullPrint", 9u);
            objc_msgSend(v50, "fullPrint");
            v57 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v58 = (const char *)objc_msgSend(v57, "UTF8String");
            v59 = strlen(v58);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v58, v59);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"fullSpeak", 9u);
            objc_msgSend(v50, "fullSpeak");
            v60 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v61 = (const char *)objc_msgSend(v60, "UTF8String");
            v62 = strlen(v61);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v61, v62);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"supportingPrint", 0xFu);
            objc_msgSend(v50, "supportingPrint");
            v63 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v64 = (const char *)objc_msgSend(v63, "UTF8String");
            v65 = strlen(v64);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v64, v65);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"supportingSpeak", 0xFu);
            objc_msgSend(v50, "supportingSpeak");
            v66 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v67 = (const char *)objc_msgSend(v66, "UTF8String");
            v68 = strlen(v67);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v67, v68);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"unfilteredFullPrint", 0x13u);
            objc_msgSend(v50, "unfilteredFullPrint");
            v69 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v70 = (const char *)objc_msgSend(v69, "UTF8String");
            v71 = strlen(v70);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v70, v71);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"unfilteredFullSpeak", 0x13u);
            objc_msgSend(v50, "unfilteredFullSpeak");
            v72 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v73 = (const char *)objc_msgSend(v72, "UTF8String");
            v74 = strlen(v73);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v73, v74);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"unfilteredSupportingPrint", 0x19u);
            objc_msgSend(v50, "unfilteredSupportingPrint");
            v75 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v76 = (const char *)objc_msgSend(v75, "UTF8String");
            v77 = strlen(v76);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v76, v77);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"unfilteredSupportingSpeak", 0x19u);
            objc_msgSend(v50, "unfilteredSupportingSpeak");
            v78 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v79 = (const char *)objc_msgSend(v78, "UTF8String");
            v80 = strlen(v79);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v79, v80);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"redactedFullPrint", 0x11u);
            objc_msgSend(v50, "redactedFullPrint");
            v81 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v82 = (const char *)objc_msgSend(v81, "UTF8String");
            v83 = strlen(v82);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v82, v83);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"redactedFullSpeak", 0x11u);
            objc_msgSend(v50, "redactedFullSpeak");
            v84 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v85 = (const char *)objc_msgSend(v84, "UTF8String");
            v86 = strlen(v85);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v85, v86);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"redactedSupportingPrint", 0x17u);
            objc_msgSend(v50, "redactedSupportingPrint");
            v87 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v88 = (const char *)objc_msgSend(v87, "UTF8String");
            v89 = strlen(v88);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v88, v89);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"redactedSupportingSpeak", 0x17u);
            objc_msgSend(v50, "redactedSupportingSpeak");
            v90 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v91 = (const char *)objc_msgSend(v90, "UTF8String");
            v92 = strlen(v91);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v91, v92);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"printOnly", 9u);
            objc_msgSend(v50, "printOnly");
            v93 = (void *)objc_claimAutoreleasedReturnValue();
            v94 = objc_msgSend(v93, "BOOLValue");
            if (v94)
              v95 = 2;
            else
              v95 = 1;
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, v95);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool((uint64_t *)&v150, v94);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"spokenOnly", 0xAu);
            objc_msgSend(v50, "spokenOnly");
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            v97 = objc_msgSend(v96, "BOOLValue");
            if (v97)
              v98 = 2;
            else
              v98 = 1;
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, v98);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool((uint64_t *)&v150, v97);

            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"isApprovedForGrading", 0x14u);
            v99 = objc_msgSend(v50, "isApprovedForGrading");
            if (v99)
              v100 = 2;
            else
              v100 = 1;
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, v100);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool((uint64_t *)&v150, v99);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v150);
          }
          v46 = obj;
          v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v146, v180, 16);
        }
        while (v47);
      }

    }
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)&v150);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"visual", 6u);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v150);
  v101 = *(void **)(v169.__r_.__value_.__l.__size_ + 40);
  if (v101)
  {
    objc_msgSend(v101, "visual");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    v103 = v102 == 0;

    if (!v103)
    {
      objc_msgSend(*(id *)(v169.__r_.__value_.__l.__size_ + 40), "visual");
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v104, "base64EncodedStringWithOptions:", 0);
      v105 = (void *)objc_claimAutoreleasedReturnValue();

      if (v105)
      {
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"data", 4u);
        v106 = objc_retainAutorelease(v105);
        v107 = (const char *)objc_msgSend(v106, "UTF8String");
        v108 = strlen(v107);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v107, v108);
        if (v127)
        {
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"json", 4u);
          std::string::basic_string[abi:ne180100]<0>(v142, (char *)objc_msgSend(objc_retainAutorelease(v106), "UTF8String"));
          siri::dialogengine::JsonFromResponseMessage((std::string::size_type)v142, __s1);
          if (v143 < 0)
            operator delete(v142[0]);
          if ((v145 & 0x80u) == 0)
            v109 = __s1;
          else
            v109 = (char **)__s1[0];
          if ((v145 & 0x80u) == 0)
            v110 = v145;
          else
            v110 = (uint64_t)__s1[1];
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::RawValue((uint64_t *)&v150, (uint64_t)v109, v110);
          if ((char)v145 < 0)
            operator delete(__s1[0]);
        }
      }

    }
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v150);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v150, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v150, (uint64_t)"meta", 4u);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v150);
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  objc_msgSend(*(id *)(v169.__r_.__value_.__l.__size_ + 40), "meta");
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  v112 = objc_msgSend(v111, "countByEnumeratingWithState:objects:count:", &v138, v179, 16);
  if (v112)
  {
    v113 = *(_QWORD *)v139;
    do
    {
      for (j = 0; j != v112; ++j)
      {
        if (*(_QWORD *)v139 != v113)
          objc_enumerationMutation(v111);
        v115 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v138 + 1) + 8 * j));
        v116 = (const char *)objc_msgSend(v115, "UTF8String");
        v117 = strlen(v116);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v116, v117);
        objc_msgSend(*(id *)(v169.__r_.__value_.__l.__size_ + 40), "meta");
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v118, "valueForKey:", v115);
        v119 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v120 = (const char *)objc_msgSend(v119, "UTF8String");
        v121 = strlen(v120);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v150, (uint64_t)v120, v121);

      }
      v112 = objc_msgSend(v111, "countByEnumeratingWithState:objects:count:", &v138, v179, 16);
    }
    while (v112);
  }

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v150);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v150);
  String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)v157);
  std::string::basic_string[abi:ne180100]<0>(__s1, String);
  if ((char)v145 < 0)
  {
    v124 = __s1[0];
    v123 = strdup(__s1[0]);
    operator delete(v124);
  }
  else
  {
    v123 = strdup((const char *)__s1);
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&v150.__r_.__value_.__l.__size_);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v157);
  _Block_object_dispose(&v169, 8);

  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)v181);
  if (v128)
    operator delete(v136);
  if (v130)
    operator delete(__s);
  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__sz.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v178 < 0)
    operator delete(v177[0]);
  return v123;
}

void sub_1BFA6A2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, int a16, void *a17, int a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  void *v49;
  void *v50;
  uint64_t v51;

  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&STACK[0x210], 8);

  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(v51 - 208);
  if (a18 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a17);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21979(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21980(uint64_t a1)
{

}

void sub_1BFA6A7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 3, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&a1[3].__r_.__value_.__l.__data_ = v4;
  }
  v5 = a1 + 4;
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 96);
    a1[4].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 112);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1BFA6A854(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 95) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
}

void siri::dialogengine::Context::~Context(siri::dialogengine::Context *this)
{
  siri::dialogengine::Context::~Context(this);
  JUMPOUT(0x1C3B8D890);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7931000;
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 3496);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 3464);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 3448);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 912);
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(*((_QWORD **)this + 109));
  std::__tree<std::string>::destroy((uint64_t)this + 840, *((char **)this + 106));
  std::__tree<std::string>::destroy((uint64_t)this + 816, *((char **)this + 103));
  if (*((char *)this + 735) < 0)
    operator delete(*((void **)this + 89));
  if (*((char *)this + 711) < 0)
    operator delete(*((void **)this + 86));
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(*((_QWORD **)this + 84));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 81));
  v2 = (void **)((char *)this + 616);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 592);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(*((_QWORD **)this + 72));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)this + 69));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)this + 66));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 504);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)this + 1);
}

siri::dialogengine::Context *siri::dialogengine::Context::Context(siri::dialogengine::Context *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E7931000;
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::Context *)((char *)this + 8));
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 65) = (char *)this + 528;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 68) = (char *)this + 552;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 71) = (char *)this + 576;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_QWORD *)this + 80) = (char *)this + 648;
  *((_QWORD *)this + 84) = 0;
  *((_QWORD *)this + 83) = (char *)this + 672;
  *((_QWORD *)this + 85) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 86, "not-loaded");
  *((_BYTE *)this + 736) = 0;
  *((_QWORD *)this + 91) = 0;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((_BYTE *)this + 784) = 0;
  *((_QWORD *)this + 93) = 0;
  *((_OWORD *)this + 47) = 0u;
  *((_BYTE *)this + 768) = 0;
  siri::dialogengine::ElapsedTimer::Reset((siri::dialogengine::Context *)((char *)this + 744));
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_QWORD *)this + 99) = 0;
  *((_OWORD *)this + 50) = 0u;
  *((_QWORD *)this + 102) = (char *)this + 824;
  *((_OWORD *)this + 53) = 0u;
  *((_QWORD *)this + 105) = (char *)this + 848;
  *(_OWORD *)((char *)this + 872) = 0u;
  *((_QWORD *)this + 108) = (char *)this + 872;
  *((_OWORD *)this + 57) = 0u;
  *((_BYTE *)this + 928) = 0;
  *(_DWORD *)((char *)this + 903) = 0;
  *(_OWORD *)((char *)this + 888) = 0u;
  siri::dialogengine::RandomNumberGenerator::RandomNumberGenerator((siri::dialogengine::Context *)((char *)this + 936), 0);
  v2 = (char *)operator new(0x48uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  v2[24] = 0;
  *(_QWORD *)v2 = &off_1E7931030;
  *((_OWORD *)v2 + 2) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *((_QWORD *)v2 + 6) = v2 + 56;
  *((_QWORD *)this + 431) = v2 + 24;
  *((_QWORD *)this + 432) = v2;
  *(_OWORD *)((char *)this + 3464) = 0u;
  *(_OWORD *)((char *)this + 3480) = 0u;
  std::allocate_shared[abi:ne180100]<siri::dialogengine::SemanticModelCache,std::allocator<siri::dialogengine::SemanticModelCache>,char const(&)[8],void>((_QWORD *)this + 437);
  siri::dialogengine::Context::CheckTemplateDirs(this);
  siri::dialogengine::Context::AddCatGlobalVariables(this);
  return this;
}

void sub_1BFA6ABFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void **v10;
  uint64_t v11;
  void **v12;
  siri::dialogengine::DialogStateUseCase *v13;
  uint64_t v14;
  void **v15;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v11 + 3448);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v11 + 912);
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase(v13);
  if (*(char *)(v11 + 735) < 0)
    operator delete(*v15);
  if (*(char *)(v11 + 711) < 0)
    operator delete(*v12);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(*(_QWORD **)(v11 + 672));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v11 + 648));
  a10 = (void **)(v11 + 616);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v11 + 592);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(*(_QWORD **)(v11 + 576));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(v11 + 552));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(v11 + 528));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v11 + 504);
  siri::dialogengine::RequestInfo::~RequestInfo(v10);
  _Unwind_Resume(a1);
}

double std::allocate_shared[abi:ne180100]<siri::dialogengine::SemanticModelCache,std::allocator<siri::dialogengine::SemanticModelCache>,char const(&)[8],void>(_QWORD *a1)
{
  char *v2;
  double result;
  __int128 v4;
  uint64_t v5;

  v2 = (char *)operator new(0x88uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E7931080;
  std::string::basic_string[abi:ne180100]<0>(&v4, "context");
  *(_OWORD *)(v2 + 24) = v4;
  *((_QWORD *)v2 + 5) = v5;
  *((_QWORD *)v2 + 6) = 850045863;
  result = 0.0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((_QWORD *)v2 + 16) = 0;
  *((_QWORD *)v2 + 15) = 0;
  *((_QWORD *)v2 + 13) = 0;
  *((_QWORD *)v2 + 14) = v2 + 120;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1BFA6AD78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::CheckTemplateDirs(siri::dialogengine::Context *this)
{
  uint64_t v1;
  uint64_t v2;
  std::string **v3;
  std::string *v4;
  std::string *v5;
  void *__p[2];
  char v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  std::string **v11;

  v1 = *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  v3 = (std::string **)((char *)this + 16);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v8, v1, v2, 0xAAAAAAAAAAAAAAABLL * ((v2 - v1) >> 5));
  v5 = v8;
  v4 = v9;
  __p[0] = &v8;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v4 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    siri::dialogengine::GetTemplateDirs((uint64_t)__p, 0, (uint64_t)&v8);
    if (v3 != &v8)
      std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)v3, v8, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 5));
    v11 = &v8;
    std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_1BFA6AE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  *(_QWORD *)(v16 - 40) = &a16;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 40));
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::AddCatGlobalVariables(siri::dialogengine::Context *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *size;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  siri::dialogengine *v62;
  uint64_t v63[2];
  uint64_t v64[2];
  uint64_t v65[2];
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  std::string __str;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string __p[10];
  void *v84[8];
  void (**v85)(siri::dialogengine::ValidationBase *__hidden);
  _QWORD *v86;
  __int128 v87;
  std::string v88;

  v2 = (std::__shared_weak_count *)operator new(0x78uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7936190;
  std::string::basic_string[abi:ne180100]<0>(__p, "device");
  siri::dialogengine::VariableObject::VariableObject(&v2[1].__vftable, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v2[1];
  v88.__r_.__value_.__l.__size_ = (std::string::size_type)v2;
  v87 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::Context::AddVariable((uint64_t)this, (uint64_t *)&v87);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  size = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
  if (v88.__r_.__value_.__l.__size_)
  {
    v6 = (unint64_t *)(v88.__r_.__value_.__l.__size_ + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v88, "device");
  std::string::basic_string[abi:ne180100]<0>(&v82, "sirikit.DeviceState");
  std::string::basic_string[abi:ne180100]<0>(&v81, "");
  std::string::basic_string[abi:ne180100]<0>(&v80, "");
  std::string::basic_string[abi:ne180100]<0>(&v79, "");
  std::string::basic_string[abi:ne180100]<0>(&v78, "");
  std::string::basic_string[abi:ne180100]<0>(&v77, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::Parameter::Parameter((uint64_t)__p, &v88, &v82, &v81, &v80, &v79, &v78, &v77, &__str, 1, 0, 0, 1);
  siri::dialogengine::Context::AddGlobalParameter(this, (const siri::dialogengine::Parameter *)__p);
  v85 = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v86);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v84);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  v8 = (std::__shared_weak_count *)operator new(0x78uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7936190;
  std::string::basic_string[abi:ne180100]<0>(__p, "user");
  siri::dialogengine::VariableObject::VariableObject(&v8[1].__vftable, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8[1];
  v88.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
  v75 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::Context::AddVariable((uint64_t)this, (uint64_t *)&v75);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
  if (v88.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v88.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v88, "user");
  std::string::basic_string[abi:ne180100]<0>(&v82, "dialog.User");
  std::string::basic_string[abi:ne180100]<0>(&v81, "");
  std::string::basic_string[abi:ne180100]<0>(&v80, "");
  std::string::basic_string[abi:ne180100]<0>(&v79, "");
  std::string::basic_string[abi:ne180100]<0>(&v78, "");
  std::string::basic_string[abi:ne180100]<0>(&v77, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::Parameter::Parameter((uint64_t)__p, &v88, &v82, &v81, &v80, &v79, &v78, &v77, &__str, 1, 0, 0, 1);
  siri::dialogengine::Context::AddGlobalParameter(this, (const siri::dialogengine::Parameter *)__p);
  v85 = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v86);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v84);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if ((v14 & 1) == 0)
  {
    if ((_DWORD)v62)
    {
      siri::dialogengine::GetDialogEngineVersionMajorMinor(v62);
      __cxa_atexit(MEMORY[0x1E0DE44D0], &siri::dialogengine::Context::AddCatGlobalVariables(void)::versionMajorMinor, &dword_1BF794000);
    }
  }
  v15 = (std::__shared_weak_count *)operator new(0x108uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A548;
  std::string::basic_string[abi:ne180100]<0>(__p, "version_dialogengine");
  siri::dialogengine::VariableString::VariableString((uint64_t)&v15[1], __p, (uint64_t)&siri::dialogengine::Context::AddCatGlobalVariables(void)::versionMajorMinor);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15[1];
  v88.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
  v74 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::Context::AddVariable((uint64_t)this, (uint64_t *)&v74);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
  if (v88.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v88.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v88, "version_dialogengine");
  std::string::basic_string[abi:ne180100]<0>(&v82, "dialog.String");
  std::string::basic_string[abi:ne180100]<0>(&v81, "");
  std::string::basic_string[abi:ne180100]<0>(&v80, "");
  std::string::basic_string[abi:ne180100]<0>(&v79, "");
  std::string::basic_string[abi:ne180100]<0>(&v78, "");
  std::string::basic_string[abi:ne180100]<0>(&v77, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::Parameter::Parameter((uint64_t)__p, &v88, &v82, &v81, &v80, &v79, &v78, &v77, &__str, 1, 0, 0, 1);
  siri::dialogengine::Context::AddGlobalParameter(this, (const siri::dialogengine::Parameter *)__p);
  v85 = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v86);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v84);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  v21 = (std::__shared_weak_count *)operator new(0x78uLL);
  v21->__shared_owners_ = 0;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7936190;
  std::string::basic_string[abi:ne180100]<0>(__p, "dialogState");
  siri::dialogengine::VariableObject::VariableObject(&v21[1].__vftable, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21[1];
  v88.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
  v73 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::Context::AddVariable((uint64_t)this, (uint64_t *)&v73);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
  if (v88.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v88.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v88, "dialogState");
  std::string::basic_string[abi:ne180100]<0>(&v82, "dialog.State");
  std::string::basic_string[abi:ne180100]<0>(&v81, "");
  std::string::basic_string[abi:ne180100]<0>(&v80, "");
  std::string::basic_string[abi:ne180100]<0>(&v79, "");
  std::string::basic_string[abi:ne180100]<0>(&v78, "");
  std::string::basic_string[abi:ne180100]<0>(&v77, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::Parameter::Parameter((uint64_t)__p, &v88, &v82, &v81, &v80, &v79, &v78, &v77, &__str, 1, 0, 0, 1);
  siri::dialogengine::Context::AddGlobalParameter(this, (const siri::dialogengine::Parameter *)__p);
  v85 = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v86);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v84);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  v27 = (std::__shared_weak_count *)operator new(0x108uLL);
  v27->__shared_owners_ = 0;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A548;
  std::string::basic_string[abi:ne180100]<0>(__p, "deviceLocale");
  std::string::basic_string[abi:ne180100]<0>(&v88, "");
  siri::dialogengine::VariableString::VariableString((uint64_t)&v27[1], __p, (uint64_t)&v88);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1];
  v82.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
  v72 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::Context::AddVariable((uint64_t)this, (uint64_t *)&v72);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
  if (v82.__r_.__value_.__l.__size_)
  {
    v31 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v88, "deviceLocale");
  std::string::basic_string[abi:ne180100]<0>(&v82, "dialog.String");
  std::string::basic_string[abi:ne180100]<0>(&v81, "");
  std::string::basic_string[abi:ne180100]<0>(&v80, "");
  std::string::basic_string[abi:ne180100]<0>(&v79, "");
  std::string::basic_string[abi:ne180100]<0>(&v78, "");
  std::string::basic_string[abi:ne180100]<0>(&v77, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::Parameter::Parameter((uint64_t)__p, &v88, &v82, &v81, &v80, &v79, &v78, &v77, &__str, 1, 0, 0, 1);
  siri::dialogengine::Context::AddGlobalParameter(this, (const siri::dialogengine::Parameter *)__p);
  v85 = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v86);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v84);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  v33 = operator new(0x78uLL);
  v33[1] = 0;
  v33[2] = 0;
  *v33 = &off_1E7936190;
  std::string::basic_string[abi:ne180100]<0>(__p, "now");
  v34 = (uint64_t)(v33 + 3);
  siri::dialogengine::VariableObject::VariableObject(v33 + 3, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v70 = (uint64_t)(v33 + 3);
  v71 = (uint64_t)v33;
  gettimeofday((timeval *)__p, 0);
  v35 = __p[0].__r_.__value_.__r.__words[1];
  v36 = __p[0].__r_.__value_.__r.__words[0];
  v37 = (std::__shared_weak_count *)operator new(0x68uLL);
  v37->__shared_owners_ = 0;
  v38 = (unint64_t *)&v37->__shared_owners_;
  v37->__shared_weak_owners_ = 0;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A4E0;
  std::string::basic_string[abi:ne180100]<0>(__p, "secs");
  siri::dialogengine::VariableNumber::VariableNumber((uint64_t)&v37[1], __p, (double)v35 / 1000000.0 + (double)v36);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v68 = v37 + 1;
  v69 = v37;
  siri::dialogengine::GetICUHostTimeZone(&v88);
  v39 = operator new(0x108uLL);
  v39[1] = 0;
  v39[2] = 0;
  *v39 = &off_1E793A548;
  std::string::basic_string[abi:ne180100]<0>(__p, "timeZone");
  siri::dialogengine::VariableString::VariableString((uint64_t)(v39 + 3), __p, (uint64_t)&v88);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v66 = (uint64_t)(v39 + 3);
  v67 = (uint64_t)v39;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  v65[0] = (uint64_t)&v37[1];
  v65[1] = (uint64_t)v37;
  do
    v40 = __ldxr(v38);
  while (__stxr(v40 + 1, v38));
  siri::dialogengine::VariableObject::AddProperty(v34, v65);
  do
    v41 = __ldaxr(v38);
  while (__stlxr(v41 - 1, v38));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  v42 = v70;
  v43 = (std::__shared_weak_count *)v67;
  v64[0] = v66;
  v64[1] = v67;
  if (v67)
  {
    v44 = (unint64_t *)(v67 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  siri::dialogengine::VariableObject::AddProperty(v42, v64);
  if (v43)
  {
    v46 = (unint64_t *)&v43->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v48 = (std::__shared_weak_count *)v71;
  v63[0] = v70;
  v63[1] = v71;
  if (v71)
  {
    v49 = (unint64_t *)(v71 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  siri::dialogengine::Context::AddVariable((uint64_t)this, v63);
  if (v48)
  {
    v51 = (unint64_t *)&v48->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v88, "now");
  std::string::basic_string[abi:ne180100]<0>(&v82, "dialog.Calendar");
  std::string::basic_string[abi:ne180100]<0>(&v81, "");
  std::string::basic_string[abi:ne180100]<0>(&v80, "");
  std::string::basic_string[abi:ne180100]<0>(&v79, "");
  std::string::basic_string[abi:ne180100]<0>(&v78, "");
  std::string::basic_string[abi:ne180100]<0>(&v77, "");
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::Parameter::Parameter((uint64_t)__p, &v88, &v82, &v81, &v80, &v79, &v78, &v77, &__str, 1, 0, 0, 1);
  siri::dialogengine::Context::AddGlobalParameter(this, (const siri::dialogengine::Parameter *)__p);
  v85 = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v86);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v84);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  v53 = (std::__shared_weak_count *)v67;
  if (v67)
  {
    v54 = (unint64_t *)(v67 + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v69;
  if (v69)
  {
    v57 = (unint64_t *)&v69->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)v71;
  if (v71)
  {
    v60 = (unint64_t *)(v71 + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_1BFA6BEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::AddVariable(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  __int128 v7;
  _OWORD *v8;
  std::string __p;
  std::string *p_p;

  v4 = a1 + 552;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(a1 + 552));
  *(_QWORD *)(a1 + 544) = v4;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  v5 = *a2;
  if (*a2)
  {
    v6 = (uint64_t **)(a1 + 520);
    if (*(char *)(v5 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
    }
    else
    {
      v7 = *(_OWORD *)(v5 + 8);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
    }
    p_p = &__p;
    v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
    std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)v8 + 7, *a2, a2[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_QWORD *)(*a2 + 56) = 0;
  }
}

void sub_1BFA6C37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::AddGlobalParameter(siri::dialogengine::Context *this, const siri::dialogengine::Parameter *a2)
{
  uint64_t **v4;
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string::size_type v8;
  std::string __p;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v4 = (uint64_t **)((char *)this + 568);
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    __p = *(std::string *)((char *)a2 + 8);
  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)v4, &v12, (const void **)&__p.__r_.__value_.__l.__data_);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x188uLL);
    v10[1] = (char *)this + 576;
    *((_OWORD *)v6 + 2) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_OWORD *)v6 + 12) = 0u;
    *((_OWORD *)v6 + 13) = 0u;
    *((_OWORD *)v6 + 16) = 0u;
    *((_OWORD *)v6 + 17) = 0u;
    *(_WORD *)(v6 + 209) = 257;
    *((_QWORD *)v6 + 36) = 0;
    *(_OWORD *)(v6 + 274) = 0u;
    *(_OWORD *)(v6 + 264) = 0u;
    *((_QWORD *)v6 + 46) = v6 + 376;
    *((_QWORD *)v6 + 47) = 0;
    v8 = __p.__r_.__value_.__r.__words[2];
    memset(&__p, 0, sizeof(__p));
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 10) = 0u;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + 14) = 0u;
    *((_OWORD *)v6 + 15) = 0u;
    *(_OWORD *)(v6 + 248) = 0u;
    *(_OWORD *)(v6 + 232) = 0u;
    *(_OWORD *)(v6 + 216) = 0u;
    *((_OWORD *)v6 + 20) = 0u;
    *((_OWORD *)v6 + 21) = 0u;
    *((_OWORD *)v6 + 19) = 0u;
    *((_QWORD *)v6 + 48) = 0;
    *((_QWORD *)v6 + 6) = v8;
    *((_QWORD *)v6 + 7) = &off_1E793AE30;
    *((_QWORD *)v6 + 37) = &unk_1E793AE60;
    *((_QWORD *)v6 + 44) = 0;
    *((_QWORD *)v6 + 45) = &unk_1E793AE80;
    v11 = 1;
    std::__tree<std::string>::__insert_node_at(v4, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)v10);
  }
  siri::dialogengine::Parameter::operator=((uint64_t)(v6 + 56), (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BFA6C4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDialogEngineVersionMajorMinor(siri::dialogengine *this)
{
  std::string::size_type v1;
  void *__p[2];
  char v3;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "3400.54.1");
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  v1 = siri::dialogengine::StringRFind((uint64_t)&__str, (uint64_t)__p, 0xFFFFFFFFFFFFFFFFLL);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string(&siri::dialogengine::Context::AddCatGlobalVariables(void)::versionMajorMinor, &__str, 0, v1, (std::allocator<char> *)__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFA6C5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::Parameter>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<siri::dialogengine::TraceWriter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::TraceWriter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

void std::__shared_ptr_emplace<siri::dialogengine::TraceWriter>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  std::__tree<std::string>::destroy(a1 + 48, *(char **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

siri::dialogengine::Context *siri::dialogengine::Context::Context(siri::dialogengine::Context *a1, std::string **a2)
{
  std::string **v4;

  v4 = (std::string **)((char *)siri::dialogengine::Context::Context(a1) + 16);
  if (v4 != a2)
    std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 5));
  siri::dialogengine::Context::CheckTemplateDirs(a1);
  return a1;
}

{
  std::string **v4;

  v4 = (std::string **)((char *)siri::dialogengine::Context::Context(a1) + 16);
  if (v4 != a2)
    std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 5));
  siri::dialogengine::Context::CheckTemplateDirs(a1);
  return a1;
}

void sub_1BFA6C72C(_Unwind_Exception *a1)
{
  siri::dialogengine::Context *v1;

  siri::dialogengine::Context::~Context(v1);
  _Unwind_Resume(a1);
}

void sub_1BFA6C798(_Unwind_Exception *a1)
{
  siri::dialogengine::Context *v1;

  siri::dialogengine::Context::~Context(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::LoadFiles(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  int v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  void *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  std::string::size_type v75;
  const char *v76;
  double CanonicalLocale;
  uint64_t v78;
  char v79;
  std::string::size_type v80;
  std::string::size_type v81;
  std::string *p_str;
  std::string *v83;
  std::string *v84;
  std::string *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::string *v90;
  __int128 v91;
  std::string::size_type v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::string v101;
  std::string v102;
  __int128 v103;
  std::string v104;
  std::string v105;
  std::string __str;

  std::string::operator=((std::string *)(a1 + 88), (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 264), (const std::string *)a3);
  std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(a1 + 504), 0, 0);
  v6 = a1 + 688;
  MEMORY[0x1C3B8D53C](a1 + 688, "load-failed");
  v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  if (!v8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "No path provided for CAT file... nothing to load.");
    siri::dialogengine::Context::SetError(a1, (uint64_t)&__str);
    goto LABEL_48;
  }
  v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 8);
  if (!v9 || !siri::dialogengine::FileExists((uint64_t *)a2))
  {
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"CAT params file not found... continuing without any parameters.", v7);
    goto LABEL_27;
  }
  v103 = 0uLL;
  if (siri::dialogengine::HasCATExtension((std::string *)a2, 0))
  {
    v10 = *(_QWORD *)(a1 + 3448);
    v11 = *(std::__shared_weak_count **)(a1 + 3456);
    __str.__r_.__value_.__r.__words[0] = v10;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    siri::dialogengine::TraceWriter::CopyParamsFile(v10, (const void **)a2);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    siri::dialogengine::ParseXmlFile((Context *)a1, a2, (uint64_t)&__str);
    v16 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    v103 = v16;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      goto LABEL_105;
    }
  }
  else if (siri::dialogengine::HasCATExtension((std::string *)a2, 1))
  {
    v56 = *(_QWORD *)(a1 + 3448);
    v57 = *(std::__shared_weak_count **)(a1 + 3456);
    __str.__r_.__value_.__r.__words[0] = v56;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    siri::dialogengine::TraceWriter::CopyParamsFile(v56, (const void **)a2);
    if (v57)
    {
      v60 = (unint64_t *)&v57->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    siri::dialogengine::ParseBinaryFile((uint64_t *)a1, a2, (__int128 *)&__str);
    v62 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    v103 = v62;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v66 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v66);
      while (__stlxr(v22 - 1, v66));
LABEL_105:
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  if (!(_QWORD)v103)
  {
    v73 = (_OWORD *)(a1 + 712);
    if (*(char *)(a1 + 735) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 712), *(_QWORD *)(a1 + 720));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v73;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 728);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      v92 = __str.__r_.__value_.__l.__size_;
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v92)
        goto LABEL_172;
    }
    else if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
    {
LABEL_172:
      std::operator+<char>();
      v90 = std::string::append(&v104, ": ");
      v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a1 + 735) < 0)
      {
        std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)(a1 + 712), *(_QWORD *)(a1 + 720));
      }
      else
      {
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = *v73;
        v102.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 728);
      }
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v93 = &v102;
      else
        v93 = (std::string *)v102.__r_.__value_.__r.__words[0];
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v94 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      else
        v94 = v102.__r_.__value_.__l.__size_;
      v95 = std::string::append(&v105, (const std::string::value_type *)v93, v94);
      v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v96;
      v95->__r_.__value_.__l.__size_ = 0;
      v95->__r_.__value_.__r.__words[2] = 0;
      v95->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::SetError(a1, (uint64_t)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_196;
      v97 = (void *)v104.__r_.__value_.__r.__words[0];
      goto LABEL_195;
    }
LABEL_116:
    std::operator+<char>();
    siri::dialogengine::Context::SetError(a1, (uint64_t)&__str);
    goto LABEL_193;
  }
  v68 = *(_QWORD *)(v103 + 224);
  v67 = *(std::__shared_weak_count **)(v103 + 232);
  if (v67)
  {
    v69 = (unint64_t *)&v67->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    v71 = (unint64_t *)&v67->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (v68)
    goto LABEL_116;
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::operator=((std::string *)(v103 + 32), (const std::string *)a2);
  if (*(char *)(v103 + 127) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v103 + 104), *(_QWORD *)(v103 + 112));
  else
    __str = *(std::string *)(v103 + 104);
  std::string::operator=((std::string *)(v103 + 616), &__str);
LABEL_193:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v97 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_195:
    operator delete(v97);
  }
LABEL_196:
  v98 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
LABEL_27:
  if (!siri::dialogengine::FileExists((uint64_t *)a3))
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "Could not load a CAT locale file - aborting...");
    siri::dialogengine::Context::SetError(a1, (uint64_t)&__str);
LABEL_48:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    return 0;
  }
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = 0uLL;
  if (siri::dialogengine::HasCATExtension((std::string *)a3, 0))
  {
    v23 = *(_QWORD *)(a1 + 3448);
    v24 = *(std::__shared_weak_count **)(a1 + 3456);
    __str.__r_.__value_.__r.__words[0] = v23;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    siri::dialogengine::TraceWriter::CopyLocaleFile(v23, (const void **)a3);
    if (v24)
    {
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    siri::dialogengine::ParseXmlFile((Context *)a1, a3, (uint64_t)&__str);
    v29 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
    v30 = (std::__shared_weak_count *)v102.__r_.__value_.__l.__size_;
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v29;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v34 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      goto LABEL_67;
    }
  }
  else if (siri::dialogengine::HasCATExtension((std::string *)a3, 1))
  {
    v36 = *(_QWORD *)(a1 + 3448);
    v37 = *(std::__shared_weak_count **)(a1 + 3456);
    __str.__r_.__value_.__r.__words[0] = v36;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    siri::dialogengine::TraceWriter::CopyLocaleFile(v36, (const void **)a3);
    if (v37)
    {
      v40 = (unint64_t *)&v37->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    siri::dialogengine::ParseBinaryFile((uint64_t *)a1, a3, (__int128 *)&__str);
    v42 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
    v43 = (std::__shared_weak_count *)v102.__r_.__value_.__l.__size_;
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v42;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v33 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v46 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v35 = __ldaxr(v46);
      while (__stlxr(v35 - 1, v46));
LABEL_67:
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  v47 = v102.__r_.__value_.__r.__words[0];
  if (v102.__r_.__value_.__r.__words[0])
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 0);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (*(char *)(a1 + 239) < 0)
      std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)(a1 + 216), *(_QWORD *)(a1 + 224));
    else
      v101 = *(std::string *)(a1 + 216);
    v74 = *(unsigned __int8 *)(a3 + 23);
    if ((v74 & 0x80u) != 0)
      v74 = *(_QWORD *)(a3 + 8);
    if (!v74)
      goto LABEL_154;
    v75 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v75 = v101.__r_.__value_.__l.__size_;
    if (!v75)
      goto LABEL_154;
    siri::dialogengine::GetCanonicalLocale(&v101, 0, &__str);
    siri::dialogengine::CatLocalePathToLocale(a3, &v104);
    CanonicalLocale = siri::dialogengine::GetCanonicalLocale(&v104, 0, &v105);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    v78 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    v79 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v80 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    else
      v80 = v105.__r_.__value_.__l.__size_;
    v81 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      p_str = &__str;
    }
    else
    {
      v81 = __str.__r_.__value_.__l.__size_;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (v80 == v81)
    {
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      {
        v85 = (std::string *)v105.__r_.__value_.__r.__words[0];
        if (!memcmp(v105.__r_.__value_.__l.__data_, p_str, v105.__r_.__value_.__l.__size_))
        {
LABEL_151:
          operator delete(v85);
LABEL_152:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
LABEL_154:
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v101.__r_.__value_.__l.__data_);
          std::string::operator=((std::string *)(v47 + 56), (const std::string *)a3);
          goto LABEL_157;
        }
LABEL_148:
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Loaded CAT locale file (%s) does not exactly match the requested locale (%s)", v76, CanonicalLocale, v85, p_str, v101.__r_.__value_.__r.__words[0]);
        v79 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
LABEL_149:
        if ((v79 & 0x80) == 0)
          goto LABEL_152;
        v85 = (std::string *)v105.__r_.__value_.__r.__words[0];
        goto LABEL_151;
      }
      if (!*((_BYTE *)&v105.__r_.__value_.__s + 23))
        goto LABEL_152;
      v83 = &v105;
      v84 = p_str;
      while (v83->__r_.__value_.__s.__data_[0] == v84->__r_.__value_.__s.__data_[0])
      {
        v83 = (std::string *)((char *)v83 + 1);
        v84 = (std::string *)((char *)v84 + 1);
        if (!--v78)
          goto LABEL_149;
      }
    }
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v85 = &v105;
    else
      v85 = (std::string *)v105.__r_.__value_.__r.__words[0];
    goto LABEL_148;
  }
  if ((*(char *)(a1 + 735) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 735))
      goto LABEL_76;
LABEL_166:
    std::operator+<char>();
    siri::dialogengine::Context::SetError(a1, (uint64_t)&__str);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_157;
    v55 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_168:
    operator delete(v55);
    goto LABEL_157;
  }
  if (!*(_QWORD *)(a1 + 720))
    goto LABEL_166;
LABEL_76:
  std::operator+<char>();
  v48 = std::string::append(&v104, ": ");
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = *(char *)(a1 + 735);
  if (v50 >= 0)
    v51 = (const std::string::value_type *)(a1 + 712);
  else
    v51 = *(const std::string::value_type **)(a1 + 712);
  if (v50 >= 0)
    v52 = *(unsigned __int8 *)(a1 + 735);
  else
    v52 = *(_QWORD *)(a1 + 720);
  v53 = std::string::append(&v105, v51, v52);
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::SetError(a1, (uint64_t)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
  {
    v55 = (void *)v104.__r_.__value_.__r.__words[0];
    goto LABEL_168;
  }
LABEL_157:
  v86 = (std::__shared_weak_count *)v102.__r_.__value_.__l.__size_;
  if (!v102.__r_.__value_.__l.__size_)
    goto LABEL_161;
  v87 = (unint64_t *)(v102.__r_.__value_.__l.__size_ + 8);
  do
    v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (!v88)
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
    if (v47)
      goto LABEL_162;
  }
  else
  {
LABEL_161:
    if (v47)
    {
LABEL_162:
      MEMORY[0x1C3B8D53C](v6, "success");
      return 1;
    }
  }
  return 0;
}

void sub_1BFA6D244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::SetError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  std::string::operator=((std::string *)(a1 + 712), (const std::string *)a2);
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    siri::dialogengine::Log::LogWithLevel(a2, 3u);
}

_QWORD *siri::dialogengine::Context::SetFile(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(a1 + 504), *a2, a2[1]);
}

uint64_t siri::dialogengine::Context::GetTraceWriter@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 3456);
  *a2 = *(_QWORD *)(this + 3448);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t siri::dialogengine::Context::LoadVisualFiles(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v7;
  char *v8;
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  void *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string v19;
  std::string v20;
  void *v21;
  void *v22;
  void *__p[2];
  std::string::size_type v24;

  std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(a1 + 504), 0, 0);
  MEMORY[0x1C3B8D53C](a1 + 688, "load-failed");
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (siri::dialogengine::FileExists((uint64_t *)a2))
    {
      *(_DWORD *)(a1 + 8) = 1;
      v21 = 0;
      v22 = 0;
      if (siri::dialogengine::HasVisualCATExtension((std::string *)a2, 0))
      {
        siri::dialogengine::ParseXmlFile((Context *)a1, a2, (uint64_t)__p);
      }
      else
      {
        if (!siri::dialogengine::HasVisualCATExtension((std::string *)a2, 1))
        {
          v7 = 0;
          goto LABEL_21;
        }
        siri::dialogengine::ParseBinaryFile((uint64_t *)a1, a2, (__int128 *)__p);
      }
      v8 = (char *)__p[0];
      v7 = (std::__shared_weak_count *)__p[1];
      v21 = __p[0];
      v22 = __p[1];
      if (__p[0])
      {
        std::operator+<char>();
        siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 0);
        if (SHIBYTE(v24) < 0)
          operator delete(__p[0]);
        std::string::operator=((std::string *)(v8 + 80), (const std::string *)a2);
        MEMORY[0x1C3B8D53C](a1 + 688, "success");
        v5 = 1;
        if (!v7)
          return v5;
LABEL_40:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return v5;
      }
LABEL_21:
      if (*(char *)(a1 + 735) < 0)
      {
        if (*(_QWORD *)(a1 + 720))
          goto LABEL_23;
      }
      else if (*(_BYTE *)(a1 + 735))
      {
LABEL_23:
        std::operator+<char>();
        v9 = std::string::append(&v19, ": ");
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        v11 = *(char *)(a1 + 735);
        if (v11 >= 0)
          v12 = (const std::string::value_type *)(a1 + 712);
        else
          v12 = *(const std::string::value_type **)(a1 + 712);
        if (v11 >= 0)
          v13 = *(unsigned __int8 *)(a1 + 735);
        else
          v13 = *(_QWORD *)(a1 + 720);
        v14 = std::string::append(&v20, v12, v13);
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v24 = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::SetError(a1, (uint64_t)__p);
        if (SHIBYTE(v24) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v20.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_39:
          v5 = 0;
          if (!v7)
            return v5;
          goto LABEL_40;
        }
        v16 = (void *)v19.__r_.__value_.__r.__words[0];
LABEL_38:
        operator delete(v16);
        goto LABEL_39;
      }
      std::operator+<char>();
      siri::dialogengine::Context::SetError(a1, (uint64_t)__p);
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        goto LABEL_39;
      v16 = __p[0];
      goto LABEL_38;
    }
    std::operator+<char>();
    siri::dialogengine::Context::SetError(a1, (uint64_t)__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "No path provided for Visual CAT file... nothing to load.");
    siri::dialogengine::Context::SetError(a1, (uint64_t)__p);
  }
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1BFA6D768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::LoadStrings(uint64_t a1, const std::string *a2, const std::string *a3)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p;
  std::__shared_weak_count *v28;
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v6 = *(void **)(a1 + 3448);
  v7 = *(std::__shared_weak_count **)(a1 + 3456);
  __p = v6;
  v28 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  siri::dialogengine::TraceWriter::WriteParamsString((uint64_t)v6, (const char *)a2);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v12 = *(void **)(a1 + 3448);
  v13 = *(std::__shared_weak_count **)(a1 + 3456);
  __p = v12;
  v28 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  siri::dialogengine::TraceWriter::WriteLocaleString((uint64_t)v12, (const char *)a3);
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::string::operator=((std::string *)(a1 + 64), a2);
  std::string::operator=((std::string *)(a1 + 192), a3);
  std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(a1 + 504), 0, 0);
  MEMORY[0x1C3B8D53C](a1 + 688, "load-failed");
  std::string::basic_string[abi:ne180100]<0>(&__p, "_params.cat.xml");
  siri::dialogengine::ParseXmlString((Context *)a1, (uint64_t)a2, (uint64_t)&__p, (uint64_t)&v30);
  v19 = v30;
  v18 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if ((v29 & 0x80000000) == 0)
  {
    if (v19)
      goto LABEL_24;
LABEL_33:
    std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot parse CAT params string.");
    siri::dialogengine::Context::SetError(a1, (uint64_t)&__p);
    goto LABEL_36;
  }
  operator delete(__p);
  if (!v19)
    goto LABEL_33;
LABEL_24:
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ParseXmlString((Context *)a1, (uint64_t)a3, (uint64_t)&__p, (uint64_t)&v30);
  v23 = v30;
  v22 = v31;
  if (v31)
  {
    v24 = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v29 < 0)
  {
    operator delete(__p);
    if (v23)
      goto LABEL_31;
  }
  else if (v23)
  {
LABEL_31:
    MEMORY[0x1C3B8D53C](a1 + 688, "success");
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot parse CAT locale string.");
  siri::dialogengine::Context::SetError(a1, (uint64_t)&__p);
LABEL_36:
  if (v29 < 0)
    operator delete(__p);
  return 0;
}

void sub_1BFA6DA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::Context::LoadVisualStrings(uint64_t a1, const std::string *a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = *(void **)(a1 + 3448);
  v5 = *(std::__shared_weak_count **)(a1 + 3456);
  __p[0] = v4;
  __p[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  siri::dialogengine::TraceWriter::WriteVisualString((uint64_t)v4, (const char *)a2);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string::operator=((std::string *)(a1 + 376), a2);
  std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(a1 + 504), 0, 0);
  MEMORY[0x1C3B8D53C](a1 + 688, "load-failed");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::ParseXmlString((Context *)a1, (uint64_t)a2, (uint64_t)__p, (uint64_t)&v17);
  v11 = v17;
  v10 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v11)
      goto LABEL_16;
  }
  else if (v11)
  {
LABEL_16:
    MEMORY[0x1C3B8D53C](a1 + 688, "success");
    return v11 != 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Cannot parse Visual CAT String.");
  siri::dialogengine::Context::SetError(a1, (uint64_t)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  return v11 != 0;
}

void sub_1BFA6DC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Context::Load(siri::dialogengine::Context *this)
{
  const char *v2;
  int v3;
  std::string::size_type v4;
  uint64_t Files;
  std::string::size_type v6;
  char v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  void *__p[2];
  std::string::size_type v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  __int128 *v43[3];

  memset(v43, 0, sizeof(v43));
  std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v43, *((_QWORD *)this + 2), *((_QWORD *)this + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 5));
  if (*((char *)this + 87) < 0)
    std::string::__init_copy_ctor_external(&v42, *((const std::string::value_type **)this + 8), *((_QWORD *)this + 9));
  else
    v42 = *(std::string *)((char *)this + 64);
  if (*((char *)this + 215) < 0)
    std::string::__init_copy_ctor_external(&v41, *((const std::string::value_type **)this + 24), *((_QWORD *)this + 25));
  else
    v41 = *(std::string *)((_BYTE *)this + 8);
  if (*((char *)this + 239) < 0)
    std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)this + 27), *((_QWORD *)this + 28));
  else
    v40 = *(std::string *)((_BYTE *)this + 9);
  if (*((char *)this + 63) < 0)
    std::string::__init_copy_ctor_external(&v39, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  else
    v39 = *(std::string *)((char *)this + 40);
  if (*((char *)this + 111) < 0)
    std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  else
    v38 = *(std::string *)((char *)this + 88);
  if (*((char *)this + 287) < 0)
    std::string::__init_copy_ctor_external(&v37, *((const std::string::value_type **)this + 33), *((_QWORD *)this + 34));
  else
    v37 = *(std::string *)((_BYTE *)this + 11);
  if (*((char *)this + 423) < 0)
    std::string::__init_copy_ctor_external(&v36, *((const std::string::value_type **)this + 50), *((_QWORD *)this + 51));
  else
    v36 = *(std::string *)((char *)this + 400);
  if (*((char *)this + 399) < 0)
    std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)this + 47), *((_QWORD *)this + 48));
  else
    v35 = *(std::string *)((char *)this + 376);
  v3 = *((_DWORD *)this + 2);
  if (!v3)
  {
    v6 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    v7 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    size = v37.__r_.__value_.__l.__size_;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v9 = v37.__r_.__value_.__l.__size_;
    if (v9)
    {
      v10 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v10 = v42.__r_.__value_.__l.__size_;
      if (v10)
      {
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Ignoring CAT 'path' parameter - using specified CAT param string", v2);
        v6 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        size = v37.__r_.__value_.__l.__size_;
        v7 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
    }
    if (v7 < 0)
      v6 = size;
    if (v6)
      goto LABEL_45;
    v11 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = v41.__r_.__value_.__l.__size_;
    if (v11)
    {
LABEL_45:
      v12 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = v42.__r_.__value_.__l.__size_;
      if (v12)
        goto LABEL_51;
      v13 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v13 = v41.__r_.__value_.__l.__size_;
      if (v13)
LABEL_51:
        Files = siri::dialogengine::Context::LoadStrings((uint64_t)this, &v42, &v41);
      else
        Files = siri::dialogengine::Context::LoadFiles((uint64_t)this, (uint64_t)&v38, (uint64_t)&v37);
      goto LABEL_81;
    }
    std::operator+<char>();
    v15 = std::string::append(&v29, "' for '");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v40;
    else
      v17 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v18 = v40.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v30, (const std::string::value_type *)v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v31, "' in ");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::GetBaseDir(v43, &v28);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v28;
    else
      v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    else
      v24 = v28.__r_.__value_.__l.__size_;
    v25 = std::string::append(&v32, (const std::string::value_type *)v23, v24);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::SetError((uint64_t)this, (uint64_t)__p);
    if (SHIBYTE(v34) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    MEMORY[0x1C3B8D53C]((char *)this + 688, "request-error");
LABEL_53:
    v14 = 0;
    goto LABEL_82;
  }
  if (v3 != 1)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Request type is not dialog or visual", v2);
    goto LABEL_53;
  }
  v4 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v4 = v35.__r_.__value_.__l.__size_;
  if (v4)
    Files = siri::dialogengine::Context::LoadVisualStrings((uint64_t)this, &v35);
  else
    Files = siri::dialogengine::Context::LoadVisualFiles((uint64_t)this, (uint64_t)&v36);
LABEL_81:
  v14 = Files;
LABEL_82:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  return v14;
}

void sub_1BFA6E150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  char a68;
  uint64_t v68;

  if (a47 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (a54 < 0)
    operator delete(a49);
  if (a61 < 0)
    operator delete(a56);
  if (a68 < 0)
    operator delete(a63);
  if (*(char *)(v68 - 185) < 0)
    operator delete(*(void **)(v68 - 208));
  if (*(char *)(v68 - 153) < 0)
    operator delete(*(void **)(v68 - 176));
  if (*(char *)(v68 - 121) < 0)
    operator delete(*(void **)(v68 - 144));
  if (*(char *)(v68 - 89) < 0)
    operator delete(*(void **)(v68 - 112));
  if (*(char *)(v68 - 57) < 0)
    operator delete(*(void **)(v68 - 80));
  *(_QWORD *)(v68 - 80) = v68 - 56;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)(v68 - 80));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::GetRequestType(siri::dialogengine::Context *this)
{
  return *((unsigned int *)this + 2);
}

BOOL siri::dialogengine::Context::Save(uint64_t a1, uint64_t a2, const void **a3, int a4, siri::dialogengine::CatBinary::condition_entry *a5)
{
  uint64_t v5;
  int HasVisualCATExtension;
  int v12;
  const void *v13;
  char *v14;
  int v15;
  std::string *v16;
  __int128 v17;
  int v18;
  std::string *v19;
  __int128 v20;
  _BOOL8 v21;
  const char *v23;
  size_t v24;
  std::string *v25;
  const void *v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  size_t v30;
  std::string *p_p;
  const void *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string __p;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;

  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
  {
    v14 = "Unable to Save CAT file to empty path.";
LABEL_27:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v14, (const char *)a2);
    return 0;
  }
  HasVisualCATExtension = siri::dialogengine::HasVisualCATExtension((std::string *)a2, 1);
  v12 = siri::dialogengine::HasVisualCATExtension((std::string *)a2, 0);
  if ((HasVisualCATExtension & 1) == 0 && !v12)
  {
    v13 = (const void *)*((unsigned __int8 *)a3 + 23);
    if ((char)v13 < 0)
      v13 = a3[1];
    if (v13)
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v41 = *(std::string *)a2;
      if ((siri::dialogengine::CreateDir(&v41, 504) & 1) != 0)
      {
        memset(&v40, 0, sizeof(v40));
        memset(&v39, 0, sizeof(v39));
        if (a4 == 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "_params.cat.bin");
          siri::dialogengine::JoinPath((uint64_t)&v41, (uint64_t)&__p, (uint64_t)&v38);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40.__r_.__value_.__l.__data_);
          v40 = v38;
          *((_BYTE *)&v38.__r_.__value_.__s + 23) = 0;
          v38.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (*((char *)a3 + 23) >= 0)
            v30 = *((unsigned __int8 *)a3 + 23);
          else
            v30 = (size_t)a3[1];
          p_p = &__p;
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v30 + 8);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (v30)
          {
            if (*((char *)a3 + 23) >= 0)
              v32 = a3;
            else
              v32 = *a3;
            memmove(p_p, v32, v30);
          }
          strcpy((char *)p_p + v30, ".cat.bin");
          siri::dialogengine::JoinPath((uint64_t)&v41, (uint64_t)&__p, (uint64_t)&v38);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v39.__r_.__value_.__l.__data_);
          v39 = v38;
          *((_BYTE *)&v38.__r_.__value_.__s + 23) = 0;
          v38.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (siri::dialogengine::WriteParametersBinary(*(siri::dialogengine::File **)(a1 + 504), (uint64_t)&v40, a5))
          {
            v27 = siri::dialogengine::WriteCatBinary(*(_QWORD *)(a1 + 504), (uint64_t)&v39, a5);
            goto LABEL_80;
          }
        }
        else if (a4)
        {
          std::to_string(&__p, a4);
          v33 = std::string::insert(&__p, 0, "Unexpected CAT file format: ");
          v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          v38.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v38, 3u);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v38.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "_params.cat.xml");
          siri::dialogengine::JoinPath((uint64_t)&v41, (uint64_t)&__p, (uint64_t)&v38);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40.__r_.__value_.__l.__data_);
          v40 = v38;
          *((_BYTE *)&v38.__r_.__value_.__s + 23) = 0;
          v38.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (*((char *)a3 + 23) >= 0)
            v24 = *((unsigned __int8 *)a3 + 23);
          else
            v24 = (size_t)a3[1];
          v25 = &__p;
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v24 + 8);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (v24)
          {
            if (*((char *)a3 + 23) >= 0)
              v26 = a3;
            else
              v26 = *a3;
            memmove(v25, v26, v24);
          }
          strcpy((char *)v25 + v24, ".cat.xml");
          siri::dialogengine::JoinPath((uint64_t)&v41, (uint64_t)&__p, (uint64_t)&v38);
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v39.__r_.__value_.__l.__data_);
          v39 = v38;
          *((_BYTE *)&v38.__r_.__value_.__s + 23) = 0;
          v38.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (siri::dialogengine::WriteParametersXml(*(siri::dialogengine::File **)(a1 + 504), (uint64_t)&v40))
          {
            v27 = siri::dialogengine::WriteLocaleXml(*(_QWORD *)(a1 + 504), (char *)&v39);
LABEL_80:
            v21 = v27;
LABEL_86:
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v39.__r_.__value_.__l.__data_);
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v40.__r_.__value_.__l.__data_);
            goto LABEL_97;
          }
        }
        v21 = 0;
        goto LABEL_86;
      }
      goto LABEL_58;
    }
    v14 = "Unable to Save CAT file to empty locale.";
    goto LABEL_27;
  }
  if (a4)
    v15 = 0;
  else
    v15 = HasVisualCATExtension;
  if (v15 == 1)
  {
    siri::dialogengine::BaseName(a2, &v40);
    v16 = std::string::insert(&v40, 0, "Cannot save Visual CAT XML to file with binary extension: ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v41, 3u);
LABEL_22:
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    return 0;
  }
  if (a4 == 1)
    v18 = v12;
  else
    v18 = 0;
  if (v18 == 1)
  {
    siri::dialogengine::BaseName(a2, &v40);
    v19 = std::string::insert(&v40, 0, "Cannot save Visual CAT binary to file with XML extension: ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v41, 3u);
    goto LABEL_22;
  }
  siri::dialogengine::DirName((std::string *)a2, (uint64_t)&v41);
  if ((siri::dialogengine::CreateDir(&v41, 504) & 1) == 0)
  {
LABEL_58:
    std::operator+<char>();
    v28 = std::string::append(&v39, "'");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v40, 3u);
LABEL_92:
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    goto LABEL_96;
  }
  if (a4 == 1)
  {
    v21 = siri::dialogengine::WriteCatBinary(*(_QWORD *)(a1 + 504), a2, a5);
    goto LABEL_97;
  }
  if (a4)
  {
    std::to_string(&v39, a4);
    v35 = std::string::insert(&v39, 0, "Unexpected CAT file format: ");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v40, 3u);
    goto LABEL_92;
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Saving Visual CAT to XML is not yet supported", v23);
LABEL_96:
  v21 = 0;
LABEL_97:
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  return v21;
}

void sub_1BFA6E908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::GetLoadStatus(siri::dialogengine::Context *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 711) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 86), *((_QWORD *)this + 87));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 43);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 88);
  }
}

void siri::dialogengine::Context::SetLoadStatus(uint64_t a1, const std::string *a2, uint64_t a3)
{
  std::string::operator=((std::string *)(a1 + 688), a2);
  siri::dialogengine::Context::SetError(a1, a3);
}

uint64_t siri::dialogengine::Context::UpgradeAndSave(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int HasCATExtension;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  std::string v29;
  std::string v30;
  _QWORD v31[2];
  std::string v32;
  std::string v33;
  std::string __p;
  void *v35[2];
  unsigned __int8 v36;
  std::string v37;
  void *v38[2];
  char v39;

  if (!*(_QWORD *)(a1 + 504))
    return 0;
  HasCATExtension = siri::dialogengine::HasCATExtension((std::string *)a2, 0);
  siri::dialogengine::DirName((std::string *)a2, (uint64_t)v38);
  v7 = *(_QWORD *)(a1 + 504);
  if (*(char *)(v7 + 175) < 0)
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)(v7 + 152), *(_QWORD *)(v7 + 160));
  else
    v37 = *(std::string *)(v7 + 152);
  siri::dialogengine::GetValidVersion(a3, (uint64_t)v35);
  if (siri::dialogengine::VersionEqual((unsigned __int8 *)&v37, (unsigned __int8 *)v35))
  {
    std::operator+<char>();
    v9 = std::string::append(&v32, " - version is already ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((v36 & 0x80u) == 0)
      v11 = (const std::string::value_type *)v35;
    else
      v11 = (const std::string::value_type *)v35[0];
    if ((v36 & 0x80u) == 0)
      v12 = v36;
    else
      v12 = (std::string::size_type)v35[1];
    v13 = std::string::append(&v33, v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
    v15 = (void *)v32.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }
  v16 = *(std::__shared_weak_count **)(a1 + 512);
  v31[0] = *(_QWORD *)(a1 + 504);
  v31[1] = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = siri::dialogengine::UpgradeVersion(v31, (unsigned __int8 *)v35);
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v19 == 2)
    v22 = HasCATExtension;
  else
    v22 = 0;
  if (v22 != 1)
  {
    if (v19 != 3)
      goto LABEL_56;
    v23 = *(_QWORD *)(a1 + 504);
    if (*(char *)(v23 + 151) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v23 + 128), *(_QWORD *)(v23 + 136));
    else
      __p = *(std::string *)(v23 + 128);
    v26 = siri::dialogengine::Context::Save(a1, (uint64_t)v38, (const void **)&__p.__r_.__value_.__l.__data_, HasCATExtension ^ 1, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v26)
      goto LABEL_56;
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
LABEL_59:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v8 = 0;
    goto LABEL_62;
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v30 = *(std::string *)a2;
  v24 = siri::dialogengine::ChangeVersionForCATXML(&v30, (uint64_t)v35);
  v25 = v24;
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v24)
      goto LABEL_40;
    goto LABEL_45;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
  if (!v25)
  {
LABEL_45:
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    goto LABEL_59;
  }
LABEL_40:
  std::string::basic_string[abi:ne180100]<0>(&v33, "_params.cat.xml");
  siri::dialogengine::JoinPath((uint64_t)v38, (uint64_t)&v33, (uint64_t)&__p);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v29 = __p;
  v27 = siri::dialogengine::ChangeVersionForCATXML(&v29, (uint64_t)v35);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (!v27)
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v33, 3u);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    goto LABEL_59;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_56;
  v15 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_19:
  operator delete(v15);
LABEL_56:
  v8 = 1;
LABEL_62:
  if ((char)v36 < 0)
    operator delete(v35[0]);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (v39 < 0)
    operator delete(v38[0]);
  return v8;
}

void sub_1BFA6EE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 97) < 0)
    operator delete(*(void **)(v42 - 120));
  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  if (*(char *)(v42 - 49) < 0)
    operator delete(*(void **)(v42 - 72));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::GetError(siri::dialogengine::Context *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 735) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 89), *((_QWORD *)this + 90));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 712);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 91);
  }
}

uint64_t siri::dialogengine::Context::GetFile@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 512);
  *a2 = *(_QWORD *)(this + 504);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *siri::dialogengine::Context::GetRequestTypeString@<X0>(siri::dialogengine::Context *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  const char *v3;
  char *v4;

  v2 = *((_DWORD *)this + 2);
  v3 = "";
  if (v2 == 1)
    v3 = "visual";
  if (v2)
    v4 = (char *)v3;
  else
    v4 = "dialog";
  return std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

void siri::dialogengine::Context::GetLocale(siri::dialogengine::Context *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type size;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  const char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string v15;
  std::string v16;
  std::string v17;

  if (*((char *)this + 239) < 0)
    std::string::__init_copy_ctor_external(&v17, *((const std::string::value_type **)this + 27), *((_QWORD *)this + 28));
  else
    v17 = *(std::string *)((_BYTE *)this + 9);
  size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v17.__r_.__value_.__l.__size_;
  if (size)
  {
    *(std::string *)a3 = v17;
    memset(&v17, 0, sizeof(v17));
  }
  else
  {
    v6 = *((_QWORD *)this + 63);
    if (v6)
    {
      if (*(char *)(v6 + 151) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)(v6 + 128), *(_QWORD *)(v6 + 136));
      }
      else
      {
        v7 = *(_OWORD *)(v6 + 128);
        *(_QWORD *)(a3 + 16) = *(_QWORD *)(v6 + 144);
        *(_OWORD *)a3 = v7;
      }
      v8 = *(unsigned __int8 *)(a3 + 23);
      if ((v8 & 0x80u) != 0)
        v8 = *(_QWORD *)(a3 + 8);
      if (!v8)
      {
        v9 = *((_QWORD *)this + 63);
        if (*(char *)(v9 + 79) < 0)
          std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v9 + 56), *(_QWORD *)(v9 + 64));
        else
          v16 = *(std::string *)(v9 + 56);
        v10 = &v16;
        if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"File '%s' does not declare a locale", a2, v10);
        siri::dialogengine::CatLocalePathToLocale((uint64_t)&v16, &v15);
        if (*(char *)(a3 + 23) < 0)
          operator delete(*(void **)a3);
        *(_OWORD *)a3 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
        v12 = v15.__r_.__value_.__r.__words[2];
        *(_QWORD *)(a3 + 16) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
        v13 = HIBYTE(v12);
        if ((v13 & 0x80u) != 0)
          v13 = *(_QWORD *)(a3 + 8);
        if (!v13)
        {
          v14 = &v16;
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v14 = (std::string *)v16.__r_.__value_.__r.__words[0];
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Could not get locale from CAT locale file name '%s'", v11, v14);
        }
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v16.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Locale not specified in request and not available from locale file", a2);
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "");
    }
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1BFA6F1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  if (*(char *)(v18 + 23) < 0)
    operator delete(*(void **)v18);
  if (*(char *)(v19 - 25) < 0)
    operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::GetDeviceLocale(siri::dialogengine::Context *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  const char *v10;
  char *v11;
  _OWORD *v12;
  __n128 v13;
  std::string::size_type v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string v18;
  std::string lpsrc;
  std::string __p;
  char *v21;
  std::string::size_type size;

  std::string::basic_string[abi:ne180100]<0>(&__p, "deviceLocale");
  siri::dialogengine::Context::FindVariable(&lpsrc, this, &__p);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    v21 = v4;
    size = lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v5 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    v21 = 0;
    size = 0;
  }
  v7 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v8 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "userInputLocale");
  siri::dialogengine::RequestInfo::GetUserSetting((uint64_t)this + 8, (const void **)&lpsrc.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
    operator delete(lpsrc.__r_.__value_.__l.__data_);
  v11 = v21;
  if (!v21)
    goto LABEL_33;
  v12 = v21 + 72;
  if (v21[95] < 0)
  {
    std::string::__init_copy_ctor_external(&lpsrc, *((const std::string::value_type **)v21 + 9), *((_QWORD *)v21 + 10));
  }
  else
  {
    *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = *v12;
    lpsrc.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 11);
  }
  if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!lpsrc.__r_.__value_.__l.__size_)
    {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
LABEL_33:
      v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = __p.__r_.__value_.__l.__size_;
      if (v14)
        v13.n128_f64[0] = siri::dialogengine::GetCanonicalLocale(&__p, 0, a2);
      else
        siri::dialogengine::Context::GetLocale(this, v10, (uint64_t)a2);
      goto LABEL_38;
    }
  }
  else if (!*((_BYTE *)&lpsrc.__r_.__value_.__s + 23))
  {
    goto LABEL_33;
  }
  if (v11[95] < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *((const std::string::value_type **)v11 + 9), *((_QWORD *)v11 + 10));
  }
  else
  {
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *v12;
    v18.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 11);
  }
  v13.n128_f64[0] = siri::dialogengine::GetCanonicalLocale(&v18, 0, a2);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
    operator delete(lpsrc.__r_.__value_.__l.__data_);
LABEL_38:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = (std::__shared_weak_count *)size;
  if (size)
  {
    v16 = (unint64_t *)(size + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v13);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BFA6F47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v27 - 48);
  _Unwind_Resume(a1);
}

void sub_1BFA6F4F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  JUMPOUT(0x1BFA6F4E8);
}

void siri::dialogengine::Context::FindVariable(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::string::size_type v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t Parameter;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::string::size_type size;
  _BOOL4 IsArrayType;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45[2];
  std::string v46;
  __int128 v47;
  std::string v48;

  v6 = a1 + 520;
  v7 = *(_QWORD **)(a1 + 520);
  v8 = (_QWORD *)(a1 + 528);
  if (v7 == (_QWORD *)(a1 + 528))
  {
LABEL_24:
    v18 = 1;
    goto LABEL_26;
  }
  while (1)
  {
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v7[7] + 40))(v7[7]))
      goto LABEL_18;
    v9 = *((unsigned __int8 *)v7 + 55);
    if ((v9 & 0x80u) == 0)
      v10 = *((unsigned __int8 *)v7 + 55);
    else
      v10 = v7[5];
    v11 = *(unsigned __int8 *)(a2 + 23);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(a2 + 8);
    if (v10 != v11)
      goto LABEL_25;
    v13 = (const void **)(v7 + 4);
    v14 = v12 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((v9 & 0x80) == 0)
      break;
    if (memcmp(*v13, v14, v7[5]))
      goto LABEL_25;
LABEL_18:
    v15 = (_QWORD *)v7[1];
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (_QWORD *)v7[2];
        v17 = *v16 == (_QWORD)v7;
        v7 = v16;
      }
      while (!v17);
    }
    v7 = v16;
    if (v16 == v8)
      goto LABEL_24;
  }
  if (!*((_BYTE *)v7 + 55))
    goto LABEL_18;
  while (*(unsigned __int8 *)v13 == *v14)
  {
    v13 = (const void **)((char *)v13 + 1);
    ++v14;
    if (!--v9)
      goto LABEL_18;
  }
LABEL_25:
  v18 = 0;
LABEL_26:
  v19 = std::__tree<std::string>::find<std::string>(v6, (const void **)a2);
  if (v8 == (_QWORD *)v19)
  {
LABEL_46:
    *a3 = 0;
    a3[1] = 0;
    v30 = *(_QWORD *)(a1 + 504);
    if (v30)
    {
      if (*(_DWORD *)(a1 + 8) == 1)
      {
        Parameter = siri::dialogengine::File::GetParameter(v30, (unsigned __int8 **)a2);
        v32 = Parameter;
        if (Parameter)
        {
          v33 = (_OWORD *)(Parameter + 184);
          if (*(char *)(Parameter + 207) < 0)
          {
            std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(Parameter + 184), *(_QWORD *)(Parameter + 192));
          }
          else
          {
            *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *v33;
            v48.__r_.__value_.__r.__words[2] = *(_QWORD *)(Parameter + 200);
          }
          if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
          else
            size = v48.__r_.__value_.__l.__size_;
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);
          if (size)
          {
            if (*(char *)(v32 + 55) < 0)
              std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v32 + 32), *(_QWORD *)(v32 + 40));
            else
              v48 = *(std::string *)(v32 + 32);
            IsArrayType = siri::dialogengine::IsArrayType(&v48);
            if (*(char *)(v32 + 207) < 0)
            {
              std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v32 + 184), *(_QWORD *)(v32 + 192));
            }
            else
            {
              *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *v33;
              v46.__r_.__value_.__r.__words[2] = *(_QWORD *)(v32 + 200);
            }
            siri::dialogengine::ExecuteParamCat(a1, (const std::string *)a2, IsArrayType, (uint64_t)&v46, &v47);
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)a3, &v47);
            v39 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
            if (*((_QWORD *)&v47 + 1))
            {
              v40 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v46.__r_.__value_.__l.__data_);
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v48.__r_.__value_.__l.__data_);
            if (*a3)
            {
              if ((v18 & 1) != 0)
              {
                v42 = a3[1];
                v45[0] = *a3;
                v45[1] = v42;
                if (v42)
                {
                  v43 = (unint64_t *)(v42 + 8);
                  do
                    v44 = __ldxr(v43);
                  while (__stxr(v44 + 1, v43));
                }
                siri::dialogengine::Context::AddVariable(a1, v45);
                std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v45);
              }
              else
              {
                *(_BYTE *)(*a3 + 64) = 1;
              }
            }
          }
        }
      }
    }
    return;
  }
  v20 = v19;
  v21 = *(_QWORD *)(a1 + 504);
  if (!v21)
  {
    *a3 = *(_QWORD *)(v20 + 56);
    v23 = *(_QWORD *)(v20 + 64);
    a3[1] = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    return;
  }
  v22 = siri::dialogengine::File::GetParameter(v21, (unsigned __int8 **)a2);
  if (!v22)
    goto LABEL_52;
  if (*(char *)(v22 + 207) < 0)
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v22 + 184), *(_QWORD *)(v22 + 192));
  else
    v48 = *(std::string *)(v22 + 184);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  else
    v26 = v48.__r_.__value_.__l.__size_;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!v26)
      goto LABEL_52;
LABEL_41:
    if (v18)
    {
      *a3 = *(_QWORD *)(v20 + 56);
      v27 = *(_QWORD *)(v20 + 64);
      a3[1] = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      return;
    }
    goto LABEL_46;
  }
  if (v26)
    goto LABEL_41;
LABEL_52:
  *a3 = *(_QWORD *)(v20 + 56);
  v34 = *(_QWORD *)(v20 + 64);
  a3[1] = v34;
  if (v34)
  {
    v35 = (unint64_t *)(v34 + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
}

void sub_1BFA6F8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::GetLocaleWithUserCalendar(siri::dialogengine::Context *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type size;
  size_t v6;
  std::string *v7;
  const std::string::value_type *v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string __p;
  std::string v15;

  siri::dialogengine::Context::GetLocale(this, a2, a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "userCalendar");
  siri::dialogengine::RequestInfo::GetUserSetting((uint64_t)this + 8, (const void **)&__p.__r_.__value_.__l.__data_, &v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  if (size)
  {
    if (*(char *)(a3 + 23) >= 0)
      v6 = *(unsigned __int8 *)(a3 + 23);
    else
      v6 = *(_QWORD *)(a3 + 8);
    v7 = &v13;
    std::string::basic_string[abi:ne180100]((uint64_t)&v13, v6 + 10);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if (v6)
    {
      if (*(char *)(a3 + 23) >= 0)
        v8 = (const std::string::value_type *)a3;
      else
        v8 = *(const std::string::value_type **)a3;
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, "@calendar=");
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v15;
    else
      v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    else
      v10 = v15.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v13, (const std::string::value_type *)v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
  }
  else if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    __p = *(std::string *)a3;
  }
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(std::string *)a3 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (size && SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1BFA6FAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Context::GetValueCache(siri::dialogengine::Context *this)
{
  return (uint64_t)this + 544;
}

uint64_t siri::dialogengine::Context::GetVariables@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100](a2, this + 65);
}

void siri::dialogengine::Context::SetVariables(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  _OWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  std::string __p;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::string *p_p;

  v4 = a1 + 528;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(a1 + 528));
  *(_QWORD *)(a1 + 520) = v4;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(a1 + 552));
  *(_QWORD *)(a1 + 544) = a1 + 552;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v7 = (uint64_t **)(a1 + 520);
    do
    {
      v9 = *v5;
      v8 = (std::__shared_weak_count *)v5[1];
      v17 = *v5;
      v18 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (v9)
      {
        if (*(char *)(v9 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
        }
        else
        {
          v12 = *(_OWORD *)(v9 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
        }
        p_p = &__p;
        v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)v13 + 7, v9, (uint64_t)v8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_QWORD *)(v9 + 56) = 0;
      }
      if (v8)
      {
        v14 = (unint64_t *)&v8->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_1BFA6FC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::RemoveVariable(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  size_t size;
  void **v9;
  std::string *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  void *__p[2];
  char v17;
  std::string v18;

  v2 = *a2;
  if (*a2)
  {
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
    }
    else
    {
      v4 = *(_OWORD *)(v2 + 8);
      v18.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v4;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__erase_unique<std::string>((uint64_t **)(a1 + 520), (const void **)&v18.__r_.__value_.__l.__data_);
    v5 = *(uint64_t **)(a1 + 544);
    v6 = (uint64_t *)(a1 + 552);
    if (v5 != (uint64_t *)(a1 + 552))
    {
      v7 = (uint64_t **)(a1 + 544);
      do
      {
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        else
          size = v18.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
        if (v17 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        if (size)
        {
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v10 = &v18;
          else
            v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
          memmove(v9, v10, size);
        }
        *(_WORD *)((char *)v9 + size) = 35;
        v11 = siri::dialogengine::StringStartsWith((std::string *)(v5 + 4), (unsigned __int8 *)__p);
        v12 = v11;
        if (v17 < 0)
        {
          operator delete(__p[0]);
          if (!v12)
          {
LABEL_22:
            v14 = (uint64_t *)v5[1];
            if (v14)
            {
              do
              {
                v13 = v14;
                v14 = (uint64_t *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                v13 = (uint64_t *)v5[2];
                v15 = *v13 == (_QWORD)v5;
                v5 = v13;
              }
              while (!v15);
            }
            goto LABEL_27;
          }
        }
        else if (!v11)
        {
          goto LABEL_22;
        }
        v13 = std::__tree<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::pair<google::protobuf::Descriptor const*,int>,std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::less<std::pair<google::protobuf::Descriptor const*,int>>,true>,std::allocator<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>>>::__remove_node_pointer(v7, v5);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>,0>((uint64_t)(v5 + 4));
        operator delete(v5);
LABEL_27:
        v5 = v13;
      }
      while (v13 != v6);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1BFA6FE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::string>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    v4 = v3;
    std::__tree<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::pair<google::protobuf::Descriptor const*,int>,std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::less<std::pair<google::protobuf::Descriptor const*,int>>,true>,std::allocator<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>>>::__remove_node_pointer(a1, v3);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

double siri::dialogengine::Context::GetCurrentTime(siri::dialogengine::Context *this)
{
  double v1;
  const char *v3;
  char *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *v14;
  unint64_t v15;
  double *v16;
  char v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  timeval __p;
  char v25;
  void *lpsrc;
  std::__shared_weak_count *v27;
  char *v28;
  std::__shared_weak_count *v29;

  std::string::basic_string[abi:ne180100]<0>(&__p, "now");
  siri::dialogengine::Context::FindVariable(&lpsrc, this, &__p);
  if (lpsrc
  {
    v28 = v4;
    v29 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v28 = 0;
    v29 = 0;
  }
  v7 = v27;
  if (v27)
  {
    v8 = (unint64_t *)&v27->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v25 < 0)
    operator delete((void *)__p.tv_sec);
  v10 = v28;
  if (!v28)
    goto LABEL_34;
  std::string::basic_string[abi:ne180100]<0>(&__p, "secs");
  v11 = std::__tree<std::string>::find<std::string>((uint64_t)(v10 + 72), (const void **)&__p);
  if (v10 + 80 == (char *)v11)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v13 = *(const void **)(v11 + 56);
    v12 = *(std::__shared_weak_count **)(v11 + 64);
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  if (v25 < 0)
  {
    operator delete((void *)__p.tv_sec);
    if (!v13)
      goto LABEL_29;
  }
  else if (!v13)
  {
    goto LABEL_29;
  }
  if (v16)
  {
    v17 = 0;
    v1 = v16[9];
    if (!v12)
      goto LABEL_33;
    goto LABEL_30;
  }
LABEL_29:
  v17 = 1;
  if (!v12)
    goto LABEL_33;
LABEL_30:
  v18 = (unint64_t *)&v12->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((v17 & 1) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_33:
  if ((v17 & 1) != 0)
  {
LABEL_34:
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Using system time instead of global variable 'now'", v3);
    gettimeofday(&__p, 0);
    v1 = (double)__p.tv_usec / 1000000.0 + (double)__p.tv_sec;
  }
LABEL_35:
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v1;
}

void sub_1BFA7011C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

double siri::dialogengine::Context::GetCurrentUTCOffset(siri::dialogengine::Context *this)
{
  double UTCOffsetSecs;
  double *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  double *v9;
  std::__shared_weak_count *v10;
  const void *v11;
  unint64_t *v12;
  unint64_t v13;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  char v22;
  void *lpsrc;
  std::__shared_weak_count *v24;
  double *v25;
  std::__shared_weak_count *v26;

  std::string::basic_string[abi:ne180100]<0>(__p, "now");
  siri::dialogengine::Context::FindVariable((uint64_t)this, (uint64_t)__p, &lpsrc);
  v3 = (double *)lpsrc;
  if (lpsrc
  {
    v25 = v3;
    v26 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v6 = v24;
  if (v24)
  {
    v7 = (unint64_t *)&v24->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v22 < 0)
    operator delete(__p[0]);
  v9 = v25;
  if (!v25)
    goto LABEL_34;
  std::string::basic_string[abi:ne180100]<0>(__p, "utcOffsetSecs");
  v3 = (double *)std::__tree<std::string>::find<std::string>((uint64_t)(v9 + 9), (const void **)__p);
  if (v9 + 10 == v3)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    v11 = (const void *)*((_QWORD *)v3 + 7);
    v10 = (std::__shared_weak_count *)*((_QWORD *)v3 + 8);
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  if (v22 < 0)
  {
    operator delete(__p[0]);
    if (!v11)
      goto LABEL_29;
  }
  else if (!v11)
  {
    goto LABEL_29;
  }
  if (v3)
  {
    v14 = 0;
    UTCOffsetSecs = v3[9];
    if (!v10)
      goto LABEL_33;
    goto LABEL_30;
  }
LABEL_29:
  v14 = 1;
  if (!v10)
    goto LABEL_33;
LABEL_30:
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if ((v14 & 1) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_33:
  if ((v14 & 1) != 0)
LABEL_34:
    UTCOffsetSecs = siri::dialogengine::GetUTCOffsetSecs((siri::dialogengine *)v3);
LABEL_35:
  v17 = v26;
  if (v26)
  {
    v18 = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return UTCOffsetSecs;
}

void sub_1BFA70358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::GetCurrentTimeZone(siri::dialogengine::Context *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p[2];
  char v26;
  void *lpsrc;
  std::__shared_weak_count *v28;
  char *v29;
  std::__shared_weak_count *v30;

  std::string::basic_string[abi:ne180100]<0>(__p, "now");
  siri::dialogengine::Context::FindVariable(&lpsrc, this, __p);
  if (lpsrc
  {
    v29 = v4;
    v30 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v29 = 0;
    v30 = 0;
  }
  v7 = v28;
  if (v28)
  {
    v8 = (unint64_t *)&v28->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v26 < 0)
    operator delete(__p[0]);
  v10 = v29;
  if (!v29)
    goto LABEL_34;
  std::string::basic_string[abi:ne180100]<0>(__p, "timeZone");
  v11 = std::__tree<std::string>::find<std::string>((uint64_t)(v10 + 72), (const void **)__p);
  if (v10 + 80 == (char *)v11)
  {
    v12 = 0;
    v13 = 0;
    lpsrc = 0;
    v28 = 0;
  }
  else
  {
    v13 = *(void **)(v11 + 56);
    v12 = *(std::__shared_weak_count **)(v11 + 64);
    lpsrc = v13;
    v28 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if (!v13)
    {
LABEL_29:
      if (v12)
      {
        v18 = (unint64_t *)&v12->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
LABEL_34:
      siri::dialogengine::GetICUHostTimeZone(a2);
      goto LABEL_35;
    }
  }
  else if (!v13)
  {
    goto LABEL_29;
  }
  if (!v16)
    goto LABEL_29;
  if (v16[95] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)v16 + 9), *((_QWORD *)v16 + 10));
  }
  else
  {
    v17 = *(_OWORD *)(v16 + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 11);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v17;
  }
  if (v12)
  {
    v23 = (unint64_t *)&v12->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_35:
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1BFA705E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::GetGlobalParameter(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 576;
  v3 = *(_QWORD *)(a1 + 576);
  if (!v3)
    goto LABEL_8;
  v5 = a1 + 584;
  v6 = a1 + 576;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
LABEL_8:
    v6 = v2;
  if (v2 == v6)
    return 0;
  else
    return v6 + 56;
}

void siri::dialogengine::Context::GetGlobalParameters(siri::dialogengine::Context *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  const void ***v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t **v11;
  const void **v12;
  const void ***v13;
  uint64_t *v14[2];
  char v15;
  uint64_t v16;

  *(_QWORD *)(a2 + 8) = 0;
  v2 = (uint64_t *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = (const void **)*((_QWORD *)this + 71);
  v4 = (const void ***)((char *)this + 576);
  if (v3 != (const void **)((char *)this + 576))
  {
    v6 = a2 + 16;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + 8);
      if (*(uint64_t **)a2 == v2)
        break;
      v8 = (uint64_t)v2;
      if (v7)
      {
        do
        {
          v9 = v7;
          v7 = *(_QWORD *)(v7 + 8);
        }
        while (v7);
      }
      else
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 16);
          v10 = *(_QWORD *)v9 == v8;
          v8 = v9;
        }
        while (v10);
      }
      if (std::less<std::string>::operator()[abi:ne180100](v6, (const void **)(v9 + 32), v3 + 4))
      {
        if (!*v2)
          goto LABEL_10;
LABEL_12:
        v16 = v9;
        v11 = (uint64_t **)(v9 + 8);
        goto LABEL_14;
      }
      v11 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a2, &v16, v3 + 4);
LABEL_14:
      if (!*v11)
        goto LABEL_15;
LABEL_16:
      v12 = (const void **)v3[1];
      if (v12)
      {
        do
        {
          v13 = (const void ***)v12;
          v12 = (const void **)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (const void ***)v3[2];
          v10 = *v13 == v3;
          v3 = (const void **)v13;
        }
        while (!v10);
      }
      v3 = (const void **)v13;
      if (v13 == v4)
        return;
    }
    v9 = (uint64_t)v2;
    if (!v7)
    {
LABEL_10:
      v16 = (uint64_t)v2;
      v11 = (uint64_t **)v2;
LABEL_15:
      v14[0] = (uint64_t *)operator new(0x188uLL);
      v14[1] = v2;
      v15 = 0;
      std::pair<std::string const,siri::dialogengine::Parameter>::pair[abi:ne180100]((std::string *)(v14[0] + 4), (__int128 *)v3 + 2);
      v15 = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)a2, v16, v11, v14[0]);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      goto LABEL_16;
    }
    goto LABEL_12;
  }
}

void sub_1BFA70824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD **v9;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(*v9);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,siri::dialogengine::Parameter>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  siri::dialogengine::Parameter::Parameter((siri::dialogengine::Parameter *)&this[1], (const siri::dialogengine::Parameter *)((char *)a2 + 24));
  return this;
}

void sub_1BFA708A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

siri::dialogengine::RequestInfo *siri::dialogengine::Context::GetRequestInfo@<X0>(siri::dialogengine::Context *this@<X0>, siri::dialogengine::RequestInfo *a2@<X8>)
{
  return siri::dialogengine::RequestInfo::RequestInfo(a2, (siri::dialogengine::Context *)((char *)this + 8));
}

siri::dialogengine::RequestInfo *siri::dialogengine::RequestInfo::RequestInfo(siri::dialogengine::RequestInfo *this, const siri::dialogengine::RequestInfo *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;

  *(_DWORD *)this = *(_DWORD *)a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((_QWORD *)this + 1, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 5));
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v4 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v4;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v5;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 5);
    *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
    *((_OWORD *)this + 5) = v6;
  }
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 104);
    *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
    *(_OWORD *)((char *)this + 104) = v7;
  }
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 128), *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 8);
    *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
    *((_OWORD *)this + 8) = v8;
  }
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)this + 160, (const void ***)a2 + 20);
  if (*((char *)a2 + 207) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 184), *((const std::string::value_type **)a2 + 23), *((_QWORD *)a2 + 24));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 184);
    *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
    *(_OWORD *)((char *)this + 184) = v9;
  }
  if (*((char *)a2 + 231) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 208), *((const std::string::value_type **)a2 + 26), *((_QWORD *)a2 + 27));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 13);
    *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
    *((_OWORD *)this + 13) = v10;
  }
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 232), *((__int128 **)a2 + 29), *((__int128 **)a2 + 30), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 30) - *((_QWORD *)a2 + 29)) >> 3));
  if (*((char *)a2 + 279) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 256), *((const std::string::value_type **)a2 + 32), *((_QWORD *)a2 + 33));
  }
  else
  {
    v11 = *((_OWORD *)a2 + 16);
    *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
    *((_OWORD *)this + 16) = v11;
  }
  v12 = *((_QWORD *)a2 + 35);
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  *((_QWORD *)this + 35) = v12;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)this + 296, (const void ***)a2 + 37);
  if (*((char *)a2 + 343) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 320), *((const std::string::value_type **)a2 + 40), *((_QWORD *)a2 + 41));
  }
  else
  {
    v13 = *((_OWORD *)a2 + 20);
    *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
    *((_OWORD *)this + 20) = v13;
  }
  if (*((char *)a2 + 367) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 344), *((const std::string::value_type **)a2 + 43), *((_QWORD *)a2 + 44));
  }
  else
  {
    v14 = *(_OWORD *)((char *)a2 + 344);
    *((_QWORD *)this + 45) = *((_QWORD *)a2 + 45);
    *(_OWORD *)((char *)this + 344) = v14;
  }
  if (*((char *)a2 + 391) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 368), *((const std::string::value_type **)a2 + 46), *((_QWORD *)a2 + 47));
  }
  else
  {
    v15 = *((_OWORD *)a2 + 23);
    *((_QWORD *)this + 48) = *((_QWORD *)a2 + 48);
    *((_OWORD *)this + 23) = v15;
  }
  if (*((char *)a2 + 415) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 392), *((const std::string::value_type **)a2 + 49), *((_QWORD *)a2 + 50));
  }
  else
  {
    v16 = *(_OWORD *)((char *)a2 + 392);
    *((_QWORD *)this + 51) = *((_QWORD *)a2 + 51);
    *(_OWORD *)((char *)this + 392) = v16;
  }
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((_QWORD *)this + 52, *((_QWORD *)a2 + 52), *((_QWORD *)a2 + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 53) - *((_QWORD *)a2 + 52)) >> 4));
  if (*((char *)a2 + 463) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 440), *((const std::string::value_type **)a2 + 55), *((_QWORD *)a2 + 56));
  }
  else
  {
    v17 = *(_OWORD *)((char *)a2 + 440);
    *((_QWORD *)this + 57) = *((_QWORD *)a2 + 57);
    *(_OWORD *)((char *)this + 440) = v17;
  }
  v18 = (std::string *)((char *)this + 464);
  if (*((char *)a2 + 487) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *((const std::string::value_type **)a2 + 58), *((_QWORD *)a2 + 59));
  }
  else
  {
    v19 = *((_OWORD *)a2 + 29);
    *((_QWORD *)this + 60) = *((_QWORD *)a2 + 60);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  *((_BYTE *)this + 488) = *((_BYTE *)a2 + 488);
  return this;
}

void sub_1BFA70C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18)
{
  void **v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;

  if (*(char *)(v19 + 463) < 0)
    operator delete(*v24);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (*(char *)(v19 + 415) < 0)
    operator delete(*v18);
  if (*(char *)(v19 + 391) < 0)
    operator delete(*v23);
  if (*(char *)(v19 + 367) < 0)
    operator delete(*v22);
  if (*(char *)(v19 + 343) < 0)
    operator delete(*v21);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v19 + 304));
  if (*(char *)(v19 + 279) < 0)
    operator delete(*v20);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (*(char *)(v19 + 231) < 0)
    operator delete(*a10);
  if (*(char *)(v19 + 207) < 0)
    operator delete(*a11);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v19 + 168));
  if (*(char *)(v19 + 151) < 0)
    operator delete(*a12);
  if (*(char *)(v19 + 127) < 0)
    operator delete(*a13);
  if (*(char *)(v19 + 103) < 0)
    operator delete(*a14);
  if (*(char *)(v19 + 79) < 0)
    operator delete(*a15);
  if (*(char *)(v19 + 55) < 0)
    operator delete(*a16);
  a18 = a17;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void sub_1BFA70E40()
{
  JUMPOUT(0x1BFA70D94);
}

void sub_1BFA70E48()
{
  JUMPOUT(0x1BFA70DC4);
}

void siri::dialogengine::Context::SetRequestInfo(siri::dialogengine::Context *this, const siri::dialogengine::RequestInfo *a2)
{
  const siri::dialogengine::RequestInfo *v4;
  int v5;

  *((_DWORD *)this + 2) = *(_DWORD *)a2;
  v4 = (siri::dialogengine::Context *)((char *)this + 8);
  if ((siri::dialogengine::Context *)((char *)this + 8) != a2)
    std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)this + 16, *((std::string **)a2 + 1), *((std::string **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 5));
  std::string::operator=((std::string *)((char *)this + 40), (const std::string *)((char *)a2 + 32));
  std::string::operator=((std::string *)((char *)this + 64), (const std::string *)((char *)a2 + 56));
  std::string::operator=((std::string *)((char *)this + 88), (const std::string *)((char *)a2 + 80));
  std::string::operator=((std::string *)((char *)this + 112), (const std::string *)((char *)a2 + 104));
  std::string::operator=((std::string *)((char *)this + 136), (const std::string *)((char *)a2 + 128));
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 19);
  if (v4 == a2)
  {
    std::string::operator=((std::string *)this + 8, (const std::string *)((char *)a2 + 184));
    std::string::operator=((std::string *)this + 9, (const std::string *)((char *)a2 + 208));
  }
  else
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)this + 168, *((__int128 **)a2 + 20), (__int128 *)((char *)a2 + 168));
    std::string::operator=((std::string *)this + 8, (const std::string *)((char *)a2 + 184));
    std::string::operator=((std::string *)this + 9, (const std::string *)((char *)a2 + 208));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)this + 10, *((std::string **)a2 + 29), *((__int128 **)a2 + 30), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 30) - *((_QWORD *)a2 + 29)) >> 3));
  }
  std::string::operator=((std::string *)this + 11, (const std::string *)((char *)a2 + 256));
  v5 = *((_DWORD *)a2 + 72);
  *((_QWORD *)this + 36) = *((_QWORD *)a2 + 35);
  *((_DWORD *)this + 74) = v5;
  if (v4 != a2)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)this + 304, *((__int128 **)a2 + 37), (__int128 *)a2 + 19);
  std::string::operator=((std::string *)((char *)this + 328), (const std::string *)((char *)a2 + 320));
  std::string::operator=((std::string *)((char *)this + 352), (const std::string *)((char *)a2 + 344));
  std::string::operator=((std::string *)((char *)this + 376), (const std::string *)((char *)a2 + 368));
  std::string::operator=((std::string *)((char *)this + 400), (const std::string *)((char *)a2 + 392));
  if (v4 != a2)
    std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((std::vector<std::pair<std::string, std::string>> *)((char *)this + 424), *((std::string **)a2 + 52), *((std::string **)a2 + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 53) - *((_QWORD *)a2 + 52)) >> 4));
  std::string::operator=((std::string *)((char *)this + 448), (const std::string *)((char *)a2 + 440));
  std::string::operator=((std::string *)((char *)this + 472), (const std::string *)((char *)a2 + 464));
  *((_BYTE *)this + 496) = *((_BYTE *)a2 + 488);
  siri::dialogengine::Context::CheckTemplateDirs(this);
}

void siri::dialogengine::Context::SetRequestInfo(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  void **v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  void **v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  void **v18;
  __int128 v19;
  uint64_t v20;
  void **v21;
  __int128 v22;
  void **v23;
  __int128 v24;
  void **v25;
  __int128 v26;
  void **v27;
  __int128 v28;
  void **v29;
  __int128 v30;
  void **v31;
  __int128 v32;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  std::vector<siri::dialogengine::UpdatableDir>::__vdeallocate((void **)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 55) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  v6 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v6);
  v7 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(a2 + 79) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  v8 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v8);
  v9 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a2 + 103) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  v10 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*v10);
  v11 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a2 + 127) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  v12 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*v12);
  v13 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)v12 = v13;
  *(_BYTE *)(a2 + 151) = 0;
  *(_BYTE *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 152);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((_QWORD *)(a1 + 168), (_QWORD *)(a2 + 160));
  v14 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
    operator delete(*v14);
  v15 = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)v14 = v15;
  *(_BYTE *)(a2 + 207) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  v16 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v16);
  v17 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)v16 = v17;
  *(_BYTE *)(a2 + 231) = 0;
  *(_BYTE *)(a2 + 208) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 240));
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  v18 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0)
    operator delete(*v18);
  v19 = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 272);
  *(_OWORD *)v18 = v19;
  *(_BYTE *)(a2 + 279) = 0;
  *(_BYTE *)(a2 + 256) = 0;
  v20 = *(_QWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 288) = v20;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign((_QWORD *)(a1 + 304), (_QWORD *)(a2 + 296));
  v21 = (void **)(a1 + 328);
  if (*(char *)(a1 + 351) < 0)
    operator delete(*v21);
  v22 = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 336);
  *(_OWORD *)v21 = v22;
  *(_BYTE *)(a2 + 343) = 0;
  *(_BYTE *)(a2 + 320) = 0;
  v23 = (void **)(a1 + 352);
  if (*(char *)(a1 + 375) < 0)
    operator delete(*v23);
  v24 = *(_OWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 360);
  *(_OWORD *)v23 = v24;
  *(_BYTE *)(a2 + 367) = 0;
  *(_BYTE *)(a2 + 344) = 0;
  v25 = (void **)(a1 + 376);
  if (*(char *)(a1 + 399) < 0)
    operator delete(*v25);
  v26 = *(_OWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 384);
  *(_OWORD *)v25 = v26;
  *(_BYTE *)(a2 + 391) = 0;
  *(_BYTE *)(a2 + 368) = 0;
  v27 = (void **)(a1 + 400);
  if (*(char *)(a1 + 423) < 0)
    operator delete(*v27);
  v28 = *(_OWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 408);
  *(_OWORD *)v27 = v28;
  *(_BYTE *)(a2 + 415) = 0;
  *(_BYTE *)(a2 + 392) = 0;
  std::vector<siri::dialogengine::DatabaseField>::__vdeallocate((std::vector<std::pair<std::string, std::string>> *)(a1 + 424));
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a2 + 416) = 0;
  *(_QWORD *)(a2 + 424) = 0;
  *(_QWORD *)(a2 + 432) = 0;
  v29 = (void **)(a1 + 448);
  if (*(char *)(a1 + 471) < 0)
    operator delete(*v29);
  v30 = *(_OWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 456);
  *(_OWORD *)v29 = v30;
  *(_BYTE *)(a2 + 463) = 0;
  *(_BYTE *)(a2 + 440) = 0;
  v31 = (void **)(a1 + 472);
  if (*(char *)(a1 + 495) < 0)
    operator delete(*v31);
  v32 = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 480);
  *(_OWORD *)v31 = v32;
  *(_BYTE *)(a2 + 487) = 0;
  *(_BYTE *)(a2 + 464) = 0;
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 488);
  siri::dialogengine::Context::CheckTemplateDirs((siri::dialogengine::Context *)a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + 1;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)a1[1]);
  *a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  a1[2] = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *a1 = v4;
  }
}

uint64_t siri::dialogengine::Context::GetExecutionState@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 920);
  *a2 = *(_QWORD *)(this + 912);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void siri::dialogengine::Context::ResetExecutionState(siri::dialogengine::Context *this)
{
  _QWORD *v2;
  _QWORD *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  void **v9;

  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  v3 = (_QWORD *)operator new();
  *v3 = &off_1E79310D0;
  v3[1] = 0;
  v3[2] = 0;
  v3[3] = v2;
  *(_QWORD *)&v4 = v2;
  *((_QWORD *)&v4 + 1) = v3;
  v8 = v4;
  v9 = 0;
  std::unique_ptr<siri::dialogengine::ExecutionState>::reset[abi:ne180100](&v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 115);
  *((_OWORD *)this + 57) = v8;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BFA714E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<siri::dialogengine::ExecutionState>::reset[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<siri::dialogengine::ExecutionState>::reset[abi:ne180100](void ***result)
{
  void **v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    return (void ***)MEMORY[0x1C3B8D890](v1, 0x20C40960023A9);
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ExecutionState *,std::shared_ptr<siri::dialogengine::ExecutionState>::__shared_ptr_default_delete<siri::dialogengine::ExecutionState,siri::dialogengine::ExecutionState>,std::allocator<siri::dialogengine::ExecutionState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ExecutionState *,std::shared_ptr<siri::dialogengine::ExecutionState>::__shared_ptr_default_delete<siri::dialogengine::ExecutionState,siri::dialogengine::ExecutionState>,std::allocator<siri::dialogengine::ExecutionState>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  void **v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void ***)(result + 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x1C3B8D890](v1, 0x20C40960023A9);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ExecutionState *,std::shared_ptr<siri::dialogengine::ExecutionState>::__shared_ptr_default_delete<siri::dialogengine::ExecutionState,siri::dialogengine::ExecutionState>,std::allocator<siri::dialogengine::ExecutionState>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t siri::dialogengine::Context::SetApprovedForGrading(uint64_t this, char a2)
{
  *(_BYTE *)(this + 736) = a2;
  return this;
}

uint64_t siri::dialogengine::Context::IsApprovedForGrading(siri::dialogengine::Context *this)
{
  return *((unsigned __int8 *)this + 736);
}

__n128 siri::dialogengine::Context::SetTimer(siri::dialogengine::Context *this, const siri::dialogengine::ElapsedTimer *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 760) = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 776) = v3;
  *(__n128 *)((char *)this + 744) = result;
  return result;
}

__n128 siri::dialogengine::Context::GetTimer@<Q0>(siri::dialogengine::Context *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)((char *)this + 760);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 744);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)((char *)this + 776);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t siri::dialogengine::Context::GetUseCaseState@<X0>(siri::dialogengine::Context *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string __p;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;
  char **v24;
  char *v25;
  uint64_t v26;
  char **v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  if (!*((_BYTE *)this + 904))
  {
    if (*((_QWORD *)this + 63))
    {
      siri::dialogengine::DialogStateBase::Get(&v21);
      v5 = v21;
      v6 = *((_QWORD *)this + 63);
      if (*(char *)(v6 + 127) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 104), *(_QWORD *)(v6 + 112));
      else
        __p = *(std::string *)(v6 + 104);
      (*(void (**)(__int128 *__return_ptr, uint64_t, siri::dialogengine::Context *, std::string *))(*(_QWORD *)v5 + 16))(&v23, v5, this, &__p);
      *((_OWORD *)this + 50) = v23;
      v7 = (char *)this + 824;
      std::__tree<std::string>::destroy((uint64_t)this + 816, *((char **)this + 103));
      v8 = v25;
      *((_QWORD *)this + 102) = v24;
      *((_QWORD *)this + 103) = v8;
      v9 = v26;
      *((_QWORD *)this + 104) = v26;
      if (v9)
      {
        *((_QWORD *)v8 + 2) = v7;
        v24 = &v25;
        v25 = 0;
        v26 = 0;
      }
      else
      {
        *((_QWORD *)this + 102) = v7;
      }
      v10 = (char *)this + 848;
      std::__tree<std::string>::destroy((uint64_t)this + 840, *((char **)this + 106));
      v11 = v28;
      *((_QWORD *)this + 105) = v27;
      *((_QWORD *)this + 106) = v11;
      v12 = v29;
      *((_QWORD *)this + 107) = v29;
      if (v12)
      {
        *((_QWORD *)v11 + 2) = v10;
        v27 = &v28;
        v28 = 0;
        v29 = 0;
      }
      else
      {
        *((_QWORD *)this + 105) = v10;
      }
      v13 = (char *)this + 872;
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(*((_QWORD **)this + 109));
      v14 = v31;
      *((_QWORD *)this + 108) = v30;
      *((_QWORD *)this + 109) = v14;
      v15 = v32;
      *((_QWORD *)this + 110) = v32;
      if (v15)
      {
        v14[2] = v13;
        v30 = &v31;
        v31 = 0;
        v32 = 0;
        v14 = 0;
      }
      else
      {
        *((_QWORD *)this + 108) = v13;
      }
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v14);
      std::__tree<std::string>::destroy((uint64_t)&v27, v28);
      std::__tree<std::string>::destroy((uint64_t)&v24, v25);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v16 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      *((_BYTE *)this + 904) = 1;
    }
    else
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Calling GetUseCaseState() before CAT file is loaded", a2);
    }
  }
  *(_OWORD *)a3 = *((_OWORD *)this + 50);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a3 + 16), (const void ***)this + 102);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a3 + 40), (const void ***)this + 105);
  return std::map<std::string,siri::dialogengine::GroundingInfo>::map[abi:ne180100](a3 + 64, (const void ***)this + 108);
}

void sub_1BFA71870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,siri::dialogengine::GroundingInfo>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  uint64_t **v3;
  const void ***v4;
  const void **v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  BOOL v9;
  uint64_t **v10;
  const void **v11;
  const void ***v12;
  uint64_t *v14[3];
  _QWORD *v15;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3)
        break;
      v7 = v3;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t)v7[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v7;
          v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v8 + 32), v5 + 4))
      {
        if (!*v3)
          goto LABEL_9;
LABEL_11:
        v15 = (_QWORD *)v8;
        v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      v10 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v15, v5 + 4);
LABEL_13:
      if (!*v10)
        goto LABEL_14;
LABEL_15:
      v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          v12 = (const void ***)v11;
          v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const void ***)v5[2];
          v9 = *v12 == v5;
          v5 = (const void **)v12;
        }
        while (!v9);
      }
      v5 = (const void **)v12;
      if (v12 == v4)
        return a1;
    }
    v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      v15 = v3;
      v10 = v3;
LABEL_14:
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__construct_node<std::pair<std::string const,siri::dialogengine::GroundingInfo> const&>((uint64_t)v14, a1, (__int128 *)v5 + 2);
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v10, v14[0]);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_1BFA71A24(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__construct_node<std::pair<std::string const,siri::dialogengine::GroundingInfo> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  result = std::pair<std::string const,siri::dialogengine::GroundingInfo>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1BFA71A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::GetFamilyState(siri::dialogengine::Context *this, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string __p;
  uint64_t v11;
  std::__shared_weak_count *v12;

  if (!*((_BYTE *)this + 905))
  {
    if (*((_QWORD *)this + 63))
    {
      siri::dialogengine::DialogStateBase::Get(&v11);
      v3 = v11;
      v4 = *((_QWORD *)this + 63);
      if (*(char *)(v4 + 127) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 104), *(_QWORD *)(v4 + 112));
      else
        __p = *(std::string *)(v4 + 104);
      *((_QWORD *)this + 111) = (*(uint64_t (**)(uint64_t, siri::dialogengine::Context *, std::string *))(*(_QWORD *)v3 + 24))(v3, this, &__p);
      *((_QWORD *)this + 112) = v5;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      *((_BYTE *)this + 905) = 1;
    }
    else
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Calling GetFamilyState() before CAT file is loaded", a2);
    }
  }
  return *((_QWORD *)this + 111);
}

void sub_1BFA71B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::GetPatternState(siri::dialogengine::Context *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v8[16];
  std::string v9;
  std::string v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  if (!*((_BYTE *)this + 906))
  {
    siri::dialogengine::DialogStateBase::Get(&v11);
    v2 = v11;
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v8, (siri::dialogengine::Context *)((char *)this + 8));
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    else
      v10 = v9;
    *((_QWORD *)this + 435) = (*(uint64_t (**)(uint64_t, siri::dialogengine::Context *, std::string *))(*(_QWORD *)v2 + 32))(v2, this, &v10);
    *((_QWORD *)this + 436) = v3;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    siri::dialogengine::RequestInfo::~RequestInfo(v8);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    *((_BYTE *)this + 906) = 1;
  }
  return *((_QWORD *)this + 435);
}

void sub_1BFA71CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  siri::dialogengine::RequestInfo::~RequestInfo(&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v9 - 48);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::UpdatePatternState(siri::dialogengine::Context *this, uint64_t a2, char a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[16];
  std::string v9;
  std::string v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  if ((a3 & 1) == 0)
    siri::dialogengine::Context::GetPatternState(this);
  siri::dialogengine::DialogStateBase::Get(&v11);
  v4 = v11;
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v8, (siri::dialogengine::Context *)((char *)this + 8));
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    v10 = v9;
  (*(void (**)(uint64_t, siri::dialogengine::Context *, std::string *, char *, double))(*(_QWORD *)v4 + 48))(v4, this, &v10, (char *)this + 3480, 0.0);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  siri::dialogengine::RequestInfo::~RequestInfo(v8);
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BFA71DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  siri::dialogengine::RequestInfo::~RequestInfo(&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v9 - 48);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Context::UpdateState(siri::dialogengine::Context *this, const char *a2, char a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  siri::dialogengine::Node *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  BOOL v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  _BYTE v27[16];
  char *v28[3];
  char *v29[6];
  std::string __p;
  char **v31;
  char *v32[2];

  if (*((_QWORD *)this + 63))
  {
    v32[0] = 0;
    v32[1] = 0;
    v31 = v32;
    v6 = (char *)*((_QWORD *)this + 83);
    v7 = (char *)this + 672;
    if (v6 != (char *)this + 672)
    {
      do
      {
        v8 = *((_QWORD *)v6 + 7);
        v9 = *((_QWORD *)v6 + 8);
        while (v8 != v9)
        {
          v11 = *(siri::dialogengine::Node **)v8;
          v10 = *(std::__shared_weak_count **)(v8 + 8);
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v13 = __ldxr(p_shared_owners);
            while (__stxr(v13 + 1, p_shared_owners));
          }
          while (v11)
          {
            siri::dialogengine::Node::GetGlobalId(v11, this, &__p);
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v31, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v11 = (siri::dialogengine::Node *)*((_QWORD *)v11 + 25);
          }
          if (v10)
          {
            v14 = (unint64_t *)&v10->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v8 += 16;
        }
        v16 = (char *)*((_QWORD *)v6 + 1);
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = *(char **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (char *)*((_QWORD *)v6 + 2);
            v18 = *(_QWORD *)v17 == (_QWORD)v6;
            v6 = v17;
          }
          while (!v18);
        }
        v6 = v17;
      }
      while (v17 != v7);
    }
    if ((a3 & 1) == 0)
    {
      siri::dialogengine::Context::GetUseCaseState(this, a2, (uint64_t)v27);
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((_QWORD *)v29[4]);
      std::__tree<std::string>::destroy((uint64_t)v29, v29[1]);
      std::__tree<std::string>::destroy((uint64_t)v28, v28[1]);
      siri::dialogengine::Context::GetFamilyState(this, v19);
    }
    siri::dialogengine::DialogStateBase::Get(&v25);
    v20 = v25;
    v21 = *((_QWORD *)this + 63);
    if (*(char *)(v21 + 127) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v21 + 104), *(_QWORD *)(v21 + 112));
    else
      __p = *(std::string *)(v21 + 104);
    (*(void (**)(uint64_t, siri::dialogengine::Context *, std::string *, char ***, const char *, char *, char *, double))(*(_QWORD *)v20 + 40))(v20, this, &__p, &v31, a2, (char *)this + 800, (char *)this + 888, 0.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v22 = v26;
    if (v26)
    {
      v23 = (unint64_t *)&v26->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    std::__tree<std::string>::destroy((uint64_t)&v31, v32[0]);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Calling UpdateState() before CAT file is loaded", a2);
  }
}

void sub_1BFA72088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::__tree<std::string>::destroy(v28 - 104, *(char **)(v28 - 96));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::GetGroundings@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 80);
}

void siri::dialogengine::Context::SetGroundings(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1 + 640;
  if (v2 != a2)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(__int128 **)a2, (__int128 *)(a2 + 8));
}

std::string *siri::dialogengine::Context::AddGrounding(uint64_t a1, __int128 *a2, const std::string *a3)
{
  uint64_t *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 640), (const void **)a2, &v6);
  return std::string::operator=((std::string *)(v4 + 7), a3);
}

uint64_t siri::dialogengine::Context::Validate(siri::dialogengine::Context *this)
{
  std::string::size_type v2;
  _BOOL4 v3;
  std::string::size_type size;
  _BOOL4 v5;
  std::string::size_type v6;
  std::string::size_type v7;
  uint64_t v8;
  std::string __p;
  std::string v11;
  void *v12[23];
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v12, (siri::dialogengine::Context *)((char *)this + 8));
  if (LODWORD(v12[0]) == 1)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v11, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
    else
      v11 = v16;
    size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v11.__r_.__value_.__l.__size_;
    if (size)
    {
      v5 = 0;
      if ((*((_BYTE *)&v11.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_19;
    }
    else
    {
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      else
        __p = v15;
      v7 = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v5 = v7 == 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((_BYTE *)&v11.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_19:
        if (!v5)
          goto LABEL_44;
LABEL_40:
        std::string::basic_string[abi:ne180100]<0>(&v11, "No path or string in visual request info");
        siri::dialogengine::Context::AddValidationError((uint64_t)this, (__int128 *)&v11, 0);
        goto LABEL_41;
      }
    }
    operator delete(v11.__r_.__value_.__l.__data_);
    if (!v5)
      goto LABEL_44;
    goto LABEL_40;
  }
  if (LODWORD(v12[0]))
    goto LABEL_44;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v11, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    v11 = v14;
  v2 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v2 = v11.__r_.__value_.__l.__size_;
  if (v2)
  {
    v3 = 0;
    if ((*((_BYTE *)&v11.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_12;
  }
  else
  {
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    else
      __p = v13;
    v6 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v3 = v6 == 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&v11.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_12:
      if (!v3)
        goto LABEL_44;
      goto LABEL_32;
    }
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (!v3)
  {
LABEL_44:
    v8 = 1;
    goto LABEL_45;
  }
LABEL_32:
  std::string::basic_string[abi:ne180100]<0>(&v11, "No path or string in dialog request info");
  siri::dialogengine::Context::AddValidationError((uint64_t)this, (__int128 *)&v11, 0);
LABEL_41:
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v8 = 0;
LABEL_45:
  siri::dialogengine::RequestInfo::~RequestInfo(v12);
  return v8;
}

void sub_1BFA723BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20)
{
  if (a18 < 0)
    operator delete(__p);
  siri::dialogengine::RequestInfo::~RequestInfo(&a20);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Context::AddValidationError(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  void *__p;
  char v6;

  v3 = *(_QWORD *)(a1 + 504);
  if (v3)
  {
    siri::dialogengine::File::AddValidationError(v3, a2, a3);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (v6 < 0)
      operator delete(__p);
  }
  return 0;
}

void sub_1BFA72460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Context::AddValidationWarning(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  void *__p;
  char v6;

  v3 = *(_QWORD *)(a1 + 504);
  if (v3)
  {
    siri::dialogengine::File::AddValidationWarning(v3, a2, a3);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (v6 < 0)
      operator delete(__p);
  }
  return 0;
}

void sub_1BFA724DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Context::ClearSchemaErrors(siri::dialogengine::Context *this)
{
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 77);
}

uint64_t siri::dialogengine::Context::AddSchemaError(uint64_t *a1, __int128 *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1 + 77;
  v5 = a1[78];
  if (v5 >= a1[79])
  {
    v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, a2);
    v6 = v5 + 24;
  }
  a1[78] = v6;
  siri::dialogengine::Log::LogWithLevel((uint64_t)a2, 3u);
  return 0;
}

uint64_t siri::dialogengine::Context::AddSchemaWarning(uint64_t *a1, __int128 *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1 + 77;
  v5 = a1[78];
  if (v5 >= a1[79])
  {
    v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, a2);
    v6 = v5 + 24;
  }
  a1[78] = v6;
  siri::dialogengine::Log::LogWithLevel((uint64_t)a2, 1u);
  return 0;
}

std::string *siri::dialogengine::Context::GetSchemaErrors@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[77], this[78], 0xAAAAAAAAAAAAAAABLL * (((char *)this[78] - (char *)this[77]) >> 3));
}

uint64_t siri::dialogengine::Context::SetVariableCallback(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 792) = a2;
  return result;
}

BOOL siri::dialogengine::Context::HasVariableCallback(siri::dialogengine::Context *this)
{
  return *((_QWORD *)this + 99) != 0;
}

uint64_t siri::dialogengine::Context::InvokeVariableCallback@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 792);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t siri::dialogengine::Context::GetVariableCallback(siri::dialogengine::Context *this)
{
  return *((_QWORD *)this + 99);
}

uint64_t siri::dialogengine::Context::SetMorphunDataRegistered(uint64_t this, char a2)
{
  *(_BYTE *)(this + 928) = a2;
  return this;
}

uint64_t siri::dialogengine::Context::IsMorphunDataRegistered(siri::dialogengine::Context *this)
{
  return *((unsigned __int8 *)this + 928);
}

void *siri::dialogengine::Context::SetRandomNumberGenerator(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 936), a2, 0x9D0uLL);
}

uint64_t siri::dialogengine::Context::GetRandomSeed(siri::dialogengine::Context *this)
{
  return *((unsigned int *)this + 234);
}

unint64_t siri::dialogengine::Context::GetRandomNumber(siri::dialogengine::Context *this, uint64_t a2)
{
  return siri::dialogengine::RandomNumberGenerator::GenerateRandomNumber((siri::dialogengine::Context *)((char *)this + 936), a2);
}

uint64_t siri::dialogengine::Context::AddRandomMatch(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  std::string *v10;
  uint64_t result;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (uint64_t **)(a1 + 664);
  v7 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1 + 664, &v14, (const void **)a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    v8 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v8;
    v12[1] = a1 + 672;
    v13 = 0;
    v10 = (std::string *)(v8 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v8[6] = *(_QWORD *)(a2 + 16);
    }
    v8[7] = 0;
    v8[8] = 0;
    v8[9] = 0;
    v13 = 1;
    std::__tree<std::string>::__insert_node_at(v6, v14, v9, v8);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  result = (uint64_t)(v8 + 7);
  if (v8 + 7 != (uint64_t *)a3)
    return std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(result, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return result;
}

void sub_1BFA7274C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_24:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      do
      {
        v19 = *v6;
        v20 = v6[1];
        v6 += 2;
        result = (uint64_t)std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v8, v19, v20);
        v8 += 2;
      }
      while (v6 != v18);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v21 = v18[1];
        *v13 = *v18;
        v13[1] = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_24;
  }
  if (a2 != a3)
  {
    do
    {
      v24 = *v6;
      v25 = v6[1];
      v6 += 2;
      std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v8, v24, v25);
      v8 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v8)
    result = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](result - 16);
  *(_QWORD *)(a1 + 8) = v8;
  return result;
}

char *siri::dialogengine::Context::GetRandomMatch@<X0>(char *result@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;

  v4 = *((_QWORD *)result + 84);
  if (!v4)
    goto LABEL_8;
  v6 = result + 672;
  v7 = (uint64_t)(result + 680);
  v8 = result + 672;
  do
  {
    result = (char *)std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v4 + 32), a2);
    v9 = (uint64_t *)(v4 + 8);
    if (!(_DWORD)result)
    {
      v9 = (uint64_t *)v4;
      v8 = (char *)v4;
    }
    v4 = *v9;
  }
  while (*v9);
  if (v8 == v6
    || (result = (char *)std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)v8 + 4), (_DWORD)result))
  {
LABEL_8:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)a3, *((_QWORD **)v8 + 7), *((_QWORD **)v8 + 8), (uint64_t)(*((_QWORD *)v8 + 8) - *((_QWORD *)v8 + 7)) >> 4);
  }
  return result;
}

uint64_t siri::dialogengine::Context::GetRandomMatches@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>::map[abi:ne180100](a2, this + 83);
}

void siri::dialogengine::Context::SetRandomMatches(_QWORD *a1, _QWORD *a2)
{
  uint64_t **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t **leaf_high;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t **v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v2 = (uint64_t **)(a1 + 83);
  if (a1 + 83 != a2)
  {
    v3 = a2 + 1;
    v4 = (_QWORD *)*a2;
    if (a1[85])
    {
      v5 = (_QWORD *)a1[83];
      a1[83] = a1 + 84;
      *(_QWORD *)(a1[84] + 16) = 0;
      a1[84] = 0;
      a1[85] = 0;
      if (v5[1])
        v6 = (_QWORD *)v5[1];
      else
        v6 = v5;
      v17 = a1 + 83;
      v18 = v6;
      v19 = v6;
      if (!v6 || (v18 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v6), v4 == v3))
      {
        v10 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v6 + 4), (const std::string *)(v4 + 4));
          if (v6 != v4)
            std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((uint64_t)(v6 + 7), (uint64_t *)v4[7], (uint64_t *)v4[8], (uint64_t)(v4[8] - v4[7]) >> 4);
          v7 = v19;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v16, (const void **)v19 + 4);
          std::__tree<std::string>::__insert_node_at(v2, v16, leaf_high, v7);
          v6 = v18;
          v19 = v18;
          if (v18)
            v18 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v18);
          v9 = (_QWORD *)v4[1];
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v4[2];
              v11 = *v10 == (_QWORD)v4;
              v4 = v10;
            }
            while (!v11);
          }
          if (!v6)
            break;
          v4 = v10;
        }
        while (v10 != v3);
      }
      std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v17);
      v4 = v10;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<siri::dialogengine::Node>>> const&>((uint64_t)&v17, (uint64_t)v2, (uint64_t)(v4 + 4));
        v12 = v17;
        v13 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v16, (const void **)v17 + 4);
        std::__tree<std::string>::__insert_node_at(v2, v16, v13, v12);
        v17 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v17);
        v14 = (_QWORD *)v4[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v4[2];
            v11 = *v15 == (_QWORD)v4;
            v4 = v15;
          }
          while (!v11);
        }
        v4 = v15;
      }
      while (v15 != v3);
    }
  }
}

void sub_1BFA72B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<siri::dialogengine::Node>>>>>::destroy(v2);
  }
  return a1;
}

uint64_t siri::dialogengine::Context::GetPatternContext@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 3472);
  *a2 = *(_QWORD *)(this + 3464);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *siri::dialogengine::Context::SetPatternContext(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(a1 + 3464), *a2, a2[1]);
}

_QWORD *siri::dialogengine::Context::GetSemanticModelCache@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = this[433];
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 72);
    v3 = *(_QWORD *)(v2 + 80);
  }
  else
  {
    v4 = this[437];
    v3 = this[438];
  }
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void siri::dialogengine::Context::SetSemanticModelCache(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  if (*(_QWORD *)a2)
  {
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100](a1 + 3496, a2);
  }
  else
  {
    std::allocate_shared[abi:ne180100]<siri::dialogengine::SemanticModelCache,std::allocator<siri::dialogengine::SemanticModelCache>,char const(&)[8],void>(&v6);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100](a1 + 3496, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void siri::dialogengine::ValidateNumber(siri::dialogengine::Context *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::string *v11;
  _QWORD *v12;
  __int128 v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::string *v32;
  std::vector<std::string>::pointer end;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::string *v38;
  std::string *v39;
  void *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::vector<std::string>::pointer v44;
  std::vector<std::string>::pointer begin;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  std::string *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  std::string *v68;
  std::string *v69;
  std::string::size_type v70;
  std::__split_buffer<std::string>::pointer end_high;
  char v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  std::string v76;
  std::string v77;
  std::vector<std::string> v78;
  std::string *v79;
  std::string *v80;
  void *__p[2];
  unsigned __int8 v82;
  std::__split_buffer<std::string> v83;
  _BYTE v84[15];
  char v85;
  _QWORD v86[5];

  v86[2] = *MEMORY[0x1E0C80C00];
  if ((v6 & 1) == 0
  {
    v75 = (_QWORD *)operator new();
    *v75 = 0;
    siri::dialogengine::ValidateNumber(siri::dialogengine::Context *,std::string const&)::flag = (uint64_t)v75;
  }
  v7 = atomic_load((unint64_t *)siri::dialogengine::ValidateNumber(siri::dialogengine::Context *,std::string const&)::flag);
  if (v7 != -1)
  {
    v83.__first_ = (std::__split_buffer<std::string>::pointer)&v79;
    __p[0] = &v83;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::ValidateNumber(siri::dialogengine::Context *,std::string const&)::flag, __p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ValidateNumber(siri::dialogengine::Context *,std::string const&)::$_0 &&>>);
  }
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    if (this)
      siri::dialogengine::Context::GetLocale(this, (const char *)a2, (uint64_t)__p);
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "");
    v9 = v82;
    if ((v82 & 0x80u) != 0)
      v9 = (unint64_t)__p[1];
    if (v9)
    {
      siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)this, (unsigned __int8 *)a2, (uint64_t *)&v79);
      memset(&v78, 0, sizeof(v78));
      v10 = v79;
      v11 = v80;
      if (v79 != v80)
      {
        while (1)
        {
          v12 = (_QWORD *)siri::dialogengine::ValidateNumber(siri::dialogengine::Context *,std::string const&)::validOperations;
          if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v83, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
          }
          else
          {
            v13 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
            v83.__end_ = (std::__split_buffer<std::string>::pointer)v10->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v83.__first_ = v13;
          }
          v14 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v12, (unsigned __int8 *)&v83);
          v15 = v14;
          if (SHIBYTE(v83.__end_) < 0)
          {
            operator delete(v83.__first_);
            if (!v15)
            {
LABEL_22:
              if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v76, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
              }
              else
              {
                v17 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
                v76.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v17;
              }
              v20 = std::string::insert(&v76, 0, "Unsupported number concept operation: '");
              v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
              v77.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v21;
              v20->__r_.__value_.__l.__size_ = 0;
              v20->__r_.__value_.__r.__words[2] = 0;
              v20->__r_.__value_.__r.__words[0] = 0;
              v22 = std::string::append(&v77, "'");
              v23 = v22->__r_.__value_.__r.__words[0];
              *(_QWORD *)v84 = v22->__r_.__value_.__l.__size_;
              *(_QWORD *)&v84[7] = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
              v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
              v22->__r_.__value_.__l.__size_ = 0;
              v22->__r_.__value_.__r.__words[2] = 0;
              v22->__r_.__value_.__r.__words[0] = 0;
              v25 = *(_QWORD *)(a3 + 8);
              v26 = *(_QWORD *)(a3 + 16);
              if (v25 >= v26)
              {
                v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *(_QWORD *)a3) >> 3);
                v29 = v28 + 1;
                if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(_QWORD *)a3) >> 3);
                if (2 * v30 > v29)
                  v29 = 2 * v30;
                if (v30 >= 0x555555555555555)
                  v31 = 0xAAAAAAAAAAAAAAALL;
                else
                  v31 = v29;
                v83.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
                if (v31)
                  v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v31);
                else
                  v32 = 0;
                v39 = v32 + v28;
                v83.__first_ = v32;
                v83.__begin_ = v39;
                v83.__end_cap_.__value_ = &v32[v31];
                v39->__r_.__value_.__r.__words[0] = v23;
                v39->__r_.__value_.__l.__size_ = *(_QWORD *)v84;
                *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v84[7];
                *((_BYTE *)&v39->__r_.__value_.__s + 23) = v24;
                v83.__end_ = v39 + 1;
                std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &v83);
                v27 = *(_QWORD *)(a3 + 8);
                std::__split_buffer<std::string>::~__split_buffer(&v83);
              }
              else
              {
                *(_QWORD *)v25 = v23;
                *(_QWORD *)(v25 + 8) = *(_QWORD *)v84;
                *(_QWORD *)(v25 + 15) = *(_QWORD *)&v84[7];
                *(_BYTE *)(v25 + 23) = v24;
                v27 = v25 + 24;
                *(_QWORD *)(a3 + 8) = v25 + 24;
              }
              *(_QWORD *)(a3 + 8) = v27;
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v77.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_64;
              v40 = (void *)v76.__r_.__value_.__r.__words[0];
LABEL_63:
              operator delete(v40);
              goto LABEL_64;
            }
          }
          else if (!v14)
          {
            goto LABEL_22;
          }
          if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v83, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
          }
          else
          {
            v16 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
            v83.__end_ = (std::__split_buffer<std::string>::pointer)v10->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v83.__first_ = v16;
          }
          v18 = siri::dialogengine::NumberOperationFromFeature((unsigned __int8 *)&v83);
          if (SHIBYTE(v83.__end_) < 0)
            operator delete(v83.__first_);
          if (v18 == -1 || (v18 + 1) <= 0x11 && ((0x3FFE0u >> (v18 + 1)) & 1) != 0)
            goto LABEL_64;
          if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v77, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
          }
          else
          {
            v19 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
            v77.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v19;
          }
          end = v78.__end_;
          if (v78.__end_ >= v78.__end_cap_.__value_)
          {
            v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v78.__end_ - (char *)v78.__begin_) >> 3);
            v36 = v35 + 1;
            if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v78.__end_cap_.__value_ - (char *)v78.__begin_) >> 3) > v36)
              v36 = 0x5555555555555556 * (((char *)v78.__end_cap_.__value_ - (char *)v78.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v78.__end_cap_.__value_ - (char *)v78.__begin_) >> 3) >= 0x555555555555555)
              v37 = 0xAAAAAAAAAAAAAAALL;
            else
              v37 = v36;
            v83.__end_cap_.__value_ = (std::allocator<std::string> *)&v78.__end_cap_;
            if (v37)
              v38 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v78.__end_cap_, v37);
            else
              v38 = 0;
            v41 = v38 + v35;
            v83.__first_ = v38;
            v83.__begin_ = v41;
            v83.__end_cap_.__value_ = &v38[v37];
            v42 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
            v41->__r_.__value_.__r.__words[2] = v77.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
            memset(&v77, 0, sizeof(v77));
            v83.__end_ = v41 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v78, &v83);
            v43 = v78.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&v83);
            v78.__end_ = v43;
            if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_64;
            v40 = (void *)v77.__r_.__value_.__r.__words[0];
            goto LABEL_63;
          }
          v34 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
          v78.__end_->__r_.__value_.__r.__words[2] = v77.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v34;
          v78.__end_ = end + 1;
LABEL_64:
          v10 = (std::string *)((char *)v10 + 56);
          if (v10 == v11)
          {
            begin = v78.__begin_;
            v44 = v78.__end_;
            goto LABEL_69;
          }
        }
      }
      begin = 0;
      v44 = 0;
LABEL_69:
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (char *)begin) >> 3) > 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v84, ", ");
        siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v76, (uint64_t)v78.__begin_, (uint64_t)v78.__end_, (uint64_t)v84);
        v49 = std::string::insert(&v76, 0, "Multiple number concept output operations (");
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        v51 = std::string::append(&v77, ").  Only the first will be used.");
        v52 = v51->__r_.__value_.__r.__words[0];
        v86[0] = v51->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v86 + 7) = *(std::string::size_type *)((char *)&v51->__r_.__value_.__r.__words[1] + 7);
        v53 = HIBYTE(v51->__r_.__value_.__r.__words[2]);
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        v54 = *(_QWORD *)(a3 + 40);
        v55 = *(_QWORD *)(a3 + 32);
        if (v55 >= v54)
        {
          v63 = *(_QWORD *)(a3 + 24);
          v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - v63) >> 3);
          v65 = v64 + 1;
          if (v64 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - v63) >> 3);
          if (2 * v66 > v65)
            v65 = 2 * v66;
          if (v66 >= 0x555555555555555)
            v67 = 0xAAAAAAAAAAAAAAALL;
          else
            v67 = v65;
          v83.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 40);
          if (v67)
            v68 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 40, v67);
          else
            v68 = 0;
          v69 = v68 + v64;
          v83.__first_ = v68;
          v83.__begin_ = v69;
          v83.__end_cap_.__value_ = &v68[v67];
          v70 = v86[0];
          v69->__r_.__value_.__r.__words[0] = v52;
          v69->__r_.__value_.__l.__size_ = v70;
          *(std::string::size_type *)((char *)&v69->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v86 + 7);
          *((_BYTE *)&v69->__r_.__value_.__s + 23) = v53;
          v83.__end_ = v69 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a3 + 24), &v83);
          v57 = *(_QWORD *)(a3 + 32);
          std::__split_buffer<std::string>::~__split_buffer(&v83);
        }
        else
        {
          v56 = v86[0];
          *(_QWORD *)v55 = v52;
          *(_QWORD *)(v55 + 8) = v56;
          *(_QWORD *)(v55 + 15) = *(_QWORD *)((char *)v86 + 7);
          *(_BYTE *)(v55 + 23) = v53;
          v57 = v55 + 24;
          *(_QWORD *)(a3 + 32) = v55 + 24;
        }
        *(_QWORD *)(a3 + 32) = v57;
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
        if (v85 < 0)
          operator delete(*(void **)v84);
      }
      if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8) && *(_QWORD *)(a3 + 24) == *(_QWORD *)(a3 + 32))
      {
        siri::dialogengine::ValidateNumberConceptRuleSet((uint64_t)__p, &v79, (uint64_t)&v83);
        end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v83.__end_);
        v72 = HIBYTE(v83.__end_);
        if (SHIBYTE(v83.__end_) < 0)
          end_high = v83.__begin_;
        if (end_high)
        {
          v73 = *(_QWORD *)(a3 + 8);
          if (v73 >= *(_QWORD *)(a3 + 16))
          {
            v74 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)a3, (__int128 *)&v83);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, (__int128 *)&v83);
            v74 = v73 + 24;
          }
          *(_QWORD *)(a3 + 8) = v74;
          v72 = HIBYTE(v83.__end_);
        }
        if (v72 < 0)
          operator delete(v83.__first_);
      }
      v83.__first_ = (std::__split_buffer<std::string>::pointer)&v78;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
      v83.__first_ = (std::__split_buffer<std::string>::pointer)&v79;
      std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    }
    else
    {
      v46 = *(_QWORD *)(a3 + 16);
      v47 = *(_QWORD *)(a3 + 8);
      if (v47 >= v46)
      {
        v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - *(_QWORD *)a3) >> 3);
        if (v58 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - *(_QWORD *)a3) >> 3);
        v60 = 2 * v59;
        if (2 * v59 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x555555555555555)
          v61 = 0xAAAAAAAAAAAAAAALL;
        else
          v61 = v60;
        v83.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v61)
          v62 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v61);
        else
          v62 = 0;
        v83.__first_ = v62;
        v83.__begin_ = v62 + v58;
        v83.__end_ = v83.__begin_;
        v83.__end_cap_.__value_ = &v62[v61];
        std::string::basic_string[abi:ne180100]<0>(v83.__begin_->__r_.__value_.__r.__words, "No locale defined for number concept format.");
        ++v83.__end_;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &v83);
        v48 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&v83);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(*(_QWORD **)(a3 + 8), "No locale defined for number concept format.");
        v48 = v47 + 24;
        *(_QWORD *)(a3 + 8) = v47 + 24;
      }
      *(_QWORD *)(a3 + 8) = v48;
    }
    if ((char)v82 < 0)
      operator delete(__p[0]);
  }
}

void sub_1BFA73578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ValidateNumber(siri::dialogengine::Context *,std::string const&)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[3];
  _QWORD v3[3];
  _QWORD v4[3];
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v2, "asDigits");
  std::string::basic_string[abi:ne180100]<0>(v3, "asOrdinalDigits");
  std::string::basic_string[abi:ne180100]<0>(v4, "asSpokenWords");
  std::string::basic_string[abi:ne180100]<0>(v5, "asWords");
  std::string::basic_string[abi:ne180100]<0>(v6, "getAbsolute");
  std::string::basic_string[abi:ne180100]<0>(v7, "grouping");
  std::string::basic_string[abi:ne180100]<0>(v8, "maxFractionDigits");
  std::string::basic_string[abi:ne180100]<0>(v9, "maxFractionDigitsAboveOne");
  std::string::basic_string[abi:ne180100]<0>(v10, "maxIntegerDigits");
  std::string::basic_string[abi:ne180100]<0>(v11, "minFractionDigits");
  std::string::basic_string[abi:ne180100]<0>(v12, "minIntegerDigits");
  std::string::basic_string[abi:ne180100]<0>(v13, "roundCeiling");
  std::string::basic_string[abi:ne180100]<0>(v14, "roundDown");
  std::string::basic_string[abi:ne180100]<0>(v15, "roundFloor");
  std::string::basic_string[abi:ne180100]<0>(v16, "roundHalfDown");
  std::string::basic_string[abi:ne180100]<0>(v17, "roundHalfUp");
  std::string::basic_string[abi:ne180100]<0>(v18, "roundUp");
  std::unordered_set<std::string>::unordered_set(v0, (unsigned __int8 *)v2, 17);
  siri::dialogengine::ValidateNumber(siri::dialogengine::Context *,std::string const&)::validOperations = v0;
  v1 = 51;
  do
  {
    if (SHIBYTE(v2[v1 - 1]) < 0)
      operator delete((void *)v2[v1 - 3]);
    v1 -= 3;
  }
  while (v1 * 8);
}

void sub_1BFA73944(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 408;
  while (1)
  {
    if (*(char *)(v2 + v4 - 1) < 0)
      operator delete(*(void **)(v2 + v4 - 24));
    v4 -= 24;
    if (!v4)
    {
      MEMORY[0x1C3B8D890](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1BFA73AC4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void **std::pair<std::vector<std::string>,std::vector<std::string>>::~pair(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void siri::dialogengine::FormatNumber(siri::dialogengine *a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, uint64_t a4@<X8>)
{
  siri::dialogengine::Context *v8;
  std::string::size_type size;
  uint64_t v10;
  uint64_t v11;
  morphun::dialog::NumberConcept *v12;
  double v13;
  double v14;
  std::string *v15;
  __int128 v16;
  void *__p[2];
  std::string::size_type v18;
  std::string v19;
  char v20;
  _BYTE v21[128];
  char v22;
  _BYTE v23[128];
  char v24;
  std::string v25;
  std::string v26;

  siri::dialogengine::StringTrim(" \t\n\r", a2, &v26);
  siri::dialogengine::RegisterMorphunData(a1, v8);
  siri::dialogengine::StringTrim(" \t\n\r", a3, &v25);
  size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v25.__r_.__value_.__l.__size_;
  if (size)
  {
    siri::dialogengine::CreateLanguageLocale((siri::dialogengine *)v23, a1);
    if (v24)
    {
      siri::dialogengine::CreateRegionLocale((siri::dialogengine *)v21, a1);
      if (!v22)
        std::__optional_storage_base<morphun::util::ULocale,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<morphun::util::ULocale,false> const&>((morphun::util::ULocale *)v21, (uint64_t)v23);
      v20 = 0;
      v10 = siri::dialogengine::StringToInt64(a2, &v20, 1);
      if (v20)
      {
        v11 = v10;
        v12 = (morphun::dialog::NumberConcept *)operator new();
        morphun::dialog::NumberConcept::NumberConcept(v12, v11, (const morphun::util::ULocale *)v23, (const morphun::util::ULocale *)v21);
        goto LABEL_13;
      }
      v13 = siri::dialogengine::StringToDouble(a2, &v20);
      if (v20)
      {
        v14 = v13;
        v12 = (morphun::dialog::NumberConcept *)operator new();
        morphun::dialog::NumberConcept::NumberConcept(v12, v14, (const morphun::util::ULocale *)v23, (const morphun::util::ULocale *)v21);
LABEL_13:
        siri::dialogengine::FormatNumberConcept((uint64_t)a1, (uint64_t)v12, (uint64_t)&v25);
        (*((void (**)(void **))__p[0] + 4))(__p);
        (*((void (**)(void **))__p[0] + 5))(__p);
        siri::dialogengine::SpeakableStringFromMorphun(a4);
      }
      std::operator+<char>();
      v15 = std::string::append(&v19, "'");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v18 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      siri::dialogengine::SpeakableString::SpeakableString(a4, (uint64_t)&v26);
      if (v22)
        morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v21);
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString(a4, (uint64_t)&v26);
    }
    if (v24)
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v23);
  }
  else
  {
    siri::dialogengine::SpeakableString::SpeakableString(a4, (uint64_t)&v26);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1BFA73DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  if (a14 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a41)
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a25);
  if (a61)
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a43);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (*(char *)(v61 - 65) < 0)
    operator delete(*(void **)(v61 - 88));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CreateLanguageLocale(siri::dialogengine *this, siri::dialogengine::Context *a2)
{
  unint64_t v3;
  unsigned __int8 v4;
  _BYTE v5[128];
  void *v6[2];
  unsigned __int8 v7;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 128) = 0;
  if (a2)
  {
    siri::dialogengine::Context::GetLocale(a2, (const char *)a2, (uint64_t)v6);
    v3 = v7;
    v4 = v7;
    if ((v7 & 0x80u) != 0)
      v3 = (unint64_t)v6[1];
    if (v3)
    {
      morphun::util::ULocale::ULocale();
      std::optional<morphun::util::ULocale>::operator=[abi:ne180100]<morphun::util::ULocale,void>((uint64_t)this);
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v5);
      v4 = v7;
    }
    if ((v4 & 0x80) != 0)
      operator delete(v6[0]);
  }
}

void sub_1BFA73F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  morphun::util::ULocale *v27;
  uint64_t v28;

  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  if (*((_BYTE *)v27 + 128))
    morphun::util::ULocale::~ULocale(v27);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CreateRegionLocale(siri::dialogengine *this, siri::dialogengine::Context *a2)
{
  std::string::size_type size;
  char v4;
  _BYTE v5[128];
  std::string v6;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 128) = 0;
  if (a2)
  {
    siri::dialogengine::Context::GetDeviceLocale(a2, &v6);
    size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
    v4 = HIBYTE(v6.__r_.__value_.__r.__words[2]);
    if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v6.__r_.__value_.__l.__size_;
    if (size)
    {
      morphun::util::ULocale::ULocale();
      std::optional<morphun::util::ULocale>::operator=[abi:ne180100]<morphun::util::ULocale,void>((uint64_t)this);
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v5);
      v4 = HIBYTE(v6.__r_.__value_.__r.__words[2]);
    }
    if (v4 < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1BFA740E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  morphun::util::ULocale *v27;
  uint64_t v28;

  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a27);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  if (*((_BYTE *)v27 + 128))
    morphun::util::ULocale::~ULocale(v27);
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<morphun::util::ULocale,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<morphun::util::ULocale,false> const&>(morphun::util::ULocale *a1, uint64_t a2)
{
  uint64_t v2;

  if (*((unsigned __int8 *)a1 + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (*((_BYTE *)a1 + 128))
      morphun::util::ULocale::operator=();
  }
  else if (*((_BYTE *)a1 + 128))
  {
    morphun::util::ULocale::~ULocale(a1);
    *(_BYTE *)(v2 + 128) = 0;
  }
  else
  {
    *(_BYTE *)(morphun::util::ULocale::ULocale() + 128) = 1;
  }
}

uint64_t std::optional<morphun::util::ULocale>::operator=[abi:ne180100]<morphun::util::ULocale,void>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 128))
  {
    morphun::util::ULocale::operator=();
  }
  else
  {
    morphun::util::ULocale::ULocale();
    *(_BYTE *)(a1 + 128) = 1;
  }
  return a1;
}

void siri::dialogengine::FormatNumber(siri::dialogengine *a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, uint64_t a4@<X8>)
{
  siri::dialogengine::Context *v8;
  std::string::size_type size;
  double v10;
  morphun::dialog::NumberConcept *v11;
  _QWORD v12[5];
  _BYTE v13[136];
  _BYTE v14[128];
  char v15;
  std::string v16;
  void *v17[2];
  char v18;

  if (a2)
  {
    siri::dialogengine::StringFromDouble((siri::dialogengine *)0xFFFFFFFFLL, (uint64_t)v17);
    siri::dialogengine::RegisterMorphunData(a1, v8);
    siri::dialogengine::StringTrim(" \t\n\r", a3, &v16);
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v16.__r_.__value_.__l.__size_;
    if (size)
    {
      siri::dialogengine::CreateLanguageLocale((siri::dialogengine *)v14, a1);
      if (v15)
      {
        siri::dialogengine::CreateRegionLocale((siri::dialogengine *)v13, a1);
        if (!v13[128])
          std::__optional_storage_base<morphun::util::ULocale,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<morphun::util::ULocale,false> const&>((morphun::util::ULocale *)v13, (uint64_t)v14);
        v10 = *(double *)(a2 + 72);
        v11 = (morphun::dialog::NumberConcept *)operator new();
        morphun::dialog::NumberConcept::NumberConcept(v11, v10, (const morphun::util::ULocale *)v14, (const morphun::util::ULocale *)v13);
        siri::dialogengine::FormatNumberConcept(v12, a1, v11, &v16, v17);
        (*(void (**)(_QWORD *))(v12[0] + 32))(v12);
        (*(void (**)(_QWORD *))(v12[0] + 40))(v12);
        siri::dialogengine::SpeakableStringFromMorphun(a4);
      }
      siri::dialogengine::SpeakableString::SpeakableString(a4, (uint64_t)v17);
      if (v15)
        morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v14);
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString(a4, (uint64_t)v17);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (v18 < 0)
      operator delete(v17[0]);
  }
  else
  {
    *(_QWORD *)(a4 + 160) = 0;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
}

void sub_1BFA743BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  if (a31)
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a15);
  if (a51)
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a33);
  if (*(char *)(v51 - 89) < 0)
    operator delete(*(void **)(v51 - 112));
  if (*(char *)(v51 - 65) < 0)
    operator delete(*(void **)(v51 - 88));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ClearLocalSettingsCache(siri::dialogengine *this)
{
  uint64_t SettingsCache;
  siri::dialogengine *v2;
  std::mutex *PreferXMLFileCache;
  siri::dialogengine *v4;
  std::mutex *DisableUpdatesFileCache;

  SettingsCache = siri::dialogengine::GetSettingsCache(this);
  std::mutex::lock((std::mutex *)SettingsCache);
  std::__tree<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>>>::destroy(*(_QWORD **)(SettingsCache + 72));
  *(_QWORD *)(SettingsCache + 64) = SettingsCache + 72;
  *(_QWORD *)(SettingsCache + 80) = 0;
  *(_QWORD *)(SettingsCache + 72) = 0;
  std::mutex::unlock((std::mutex *)SettingsCache);
  PreferXMLFileCache = (std::mutex *)siri::dialogengine::GetPreferXMLFileCache(v2);
  siri::dialogengine::FileInfoCache::Clear(PreferXMLFileCache);
  DisableUpdatesFileCache = (std::mutex *)siri::dialogengine::GetDisableUpdatesFileCache(v4);
  siri::dialogengine::FileInfoCache::Clear(DisableUpdatesFileCache);
}

uint64_t siri::dialogengine::GetSettingsCache(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetSettingsCache(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetSettingsCache(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetSettingsCache(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSettingsCache(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetSettingsCache(void)::sCache;
}

void sub_1BFA74574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetPreferXMLFileCache(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetPreferXMLFileCache(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetPreferXMLFileCache(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetPreferXMLFileCache(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetPreferXMLFileCache(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetPreferXMLFileCache(void)::sCache;
}

void sub_1BFA74638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetDisableUpdatesFileCache(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  if ((v1 & 1) == 0
  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetDisableUpdatesFileCache(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetDisableUpdatesFileCache(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetDisableUpdatesFileCache(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDisableUpdatesFileCache(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetDisableUpdatesFileCache(void)::sCache;
}

void sub_1BFA746FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDisableUpdatesFileCache(void)::$_0 &&>>()
{
  uint64_t v0;
  void *__p[2];
  char v2;

  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, ".disableUpdates");
  siri::dialogengine::FileInfoCache::FileInfoCache(v0, (__int128 *)__p, 1.0);
  siri::dialogengine::GetDisableUpdatesFileCache(void)::sCache = v0;
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_1BFA74788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x1032C40845E3388);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetPreferXMLFileCache(void)::$_0 &&>>()
{
  uint64_t v0;
  void *__p[2];
  char v2;

  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, ".preferXML");
  siri::dialogengine::FileInfoCache::FileInfoCache(v0, (__int128 *)__p, 1.0);
  siri::dialogengine::GetPreferXMLFileCache(void)::sCache = v0;
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_1BFA74838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x1032C40845E3388);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<siri::dialogengine::Setting>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<siri::dialogengine::Setting>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSettingsCache(void)::$_0 &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = v0 + 72;
  siri::dialogengine::GetSettingsCache(void)::sCache = v0;
  return result;
}

BOOL siri::dialogengine::PreferXMLFiles(uint64_t a1)
{
  uint64_t SettingsCache;
  _BOOL8 v3;
  BOOL v4;
  uint64_t v6;
  uint64_t PreferXMLFileCache;
  char v8;
  void *__p[2];
  char v10;

  SettingsCache = siri::dialogengine::GetSettingsCache((siri::dialogengine *)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "preferXML");
  v8 = 0;
  v3 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (uint64_t)__p, &v8);
  v4 = v3;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v4)
      return 1;
  }
  else if (v3)
  {
    return 1;
  }
  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    return 0;
  PreferXMLFileCache = siri::dialogengine::GetPreferXMLFileCache((siri::dialogengine *)v3);
  return siri::dialogengine::FileInfoCache::FileExists(PreferXMLFileCache, a1);
}

void sub_1BFA749FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::SettingsCache::GetValue<BOOL>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  _BOOL8 v16;
  __int128 *v18;

  std::mutex::lock((std::mutex *)a1);
  v6 = std::__tree<std::string>::find<std::string>(a1 + 64, (const void **)a2);
  if (a1 + 72 == v6
    || (v7 = *(const void **)(v6 + 56)) == 0
  {
    v8 = operator new();
    *(_QWORD *)v8 = off_1E79311A0;
    v9 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)v8 = &off_1E7931170;
    *(_QWORD *)(v8 + 8) = v10;
    *(_BYTE *)(v8 + 32) = 0;
    v18 = (__int128 *)a2;
    v11 = std::__tree<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 64), (const void **)a2, &v18);
    v12 = v11[7];
    v11[7] = v8;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  siri::dialogengine::Setting::UpdateValue((siri::dialogengine::Setting *)v8);
  v13 = *(_BYTE *)(v8 + 32);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v15 = *a3;
  if (v14)
    v15 = v13;
  v16 = v15 != 0;
  std::mutex::unlock((std::mutex *)a1);
  return v16;
}

void sub_1BFA74B68(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  const void **v10;
  uint64_t *v11;
  std::string *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD v18[2];
  char v19;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (!v5)
    goto LABEL_10;
  v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v10 = (const void **)(v5 + 4);
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a2, (const void **)v5 + 4))
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v10, a2))
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v18[0] = v11;
    v18[1] = v6;
    v19 = 0;
    v12 = (std::string *)(v11 + 4);
    v13 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      v11[6] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
    }
    v11[7] = 0;
    v19 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v7 = v11;
    v15 = (uint64_t *)**a1;
    v16 = v11;
    if (v15)
    {
      *a1 = v15;
      v16 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1BFA74D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Setting::UpdateValue(siri::dialogengine::Setting *this)
{
  double v2;
  void *v3;
  void *v4;
  timeval v5;

  gettimeofday(&v5, 0);
  v2 = (double)v5.tv_usec / 1000000.0 + (double)v5.tv_sec;
  if (v2 - *((double *)this + 3) > 1.0)
  {
    +[DEBundle frameworkInternalUserSettings](DEBundle, "frameworkInternalUserSettings");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKey:", *((_QWORD *)this + 1));
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      *((_BYTE *)this + 16) = 1;
      (*(void (**)(siri::dialogengine::Setting *))(*(_QWORD *)this + 24))(this);
    }
    else
    {
      *((_BYTE *)this + 16) = 0;
    }
    *((double *)this + 3) = v2;
  }
}

void sub_1BFA74DE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<siri::dialogengine::Setting>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void siri::dialogengine::BoolSetting::~BoolSetting(id *this)
{

}

{

  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::Setting::HasValue(siri::dialogengine::Setting *this)
{
  siri::dialogengine::Setting::UpdateValue(this);
  return *((unsigned __int8 *)this + 16);
}

void siri::dialogengine::BoolSetting::ReadValue(id *this)
{
  id v2;
  id v3;

  +[DEBundle frameworkInternalUserSettings](DEBundle, "frameworkInternalUserSettings");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v2 = this[1];
  *((_BYTE *)this + 32) = objc_msgSend(v3, "BOOLForKey:", v2);

}

void sub_1BFA74F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::PreferSSML(siri::dialogengine *this)
{
  uint64_t SettingsCache;
  _BOOL8 v2;
  char v4;
  void *__p[2];
  char v6;

  SettingsCache = siri::dialogengine::GetSettingsCache(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "preferSSML");
  v4 = 0;
  v2 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (uint64_t)__p, &v4);
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BFA74F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::AllowEmptyPhrases(siri::dialogengine *this)
{
  uint64_t SettingsCache;
  _BOOL8 v2;
  char v4;
  void *__p[2];
  char v6;

  SettingsCache = siri::dialogengine::GetSettingsCache(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "allowEmptyPhrases");
  v4 = 1;
  v2 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (uint64_t)__p, &v4);
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BFA7501C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::DisableUpdates(uint64_t a1)
{
  uint64_t SettingsCache;
  _BOOL8 v3;
  BOOL v4;
  uint64_t v6;
  uint64_t DisableUpdatesFileCache;
  char v8;
  void *__p[2];
  char v10;

  SettingsCache = siri::dialogengine::GetSettingsCache((siri::dialogengine *)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "disableUpdates");
  v8 = 0;
  v3 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (uint64_t)__p, &v8);
  v4 = v3;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v4)
      return 1;
  }
  else if (v3)
  {
    return 1;
  }
  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    return 0;
  DisableUpdatesFileCache = siri::dialogengine::GetDisableUpdatesFileCache((siri::dialogengine *)v3);
  return siri::dialogengine::FileInfoCache::FileExists(DisableUpdatesFileCache, a1);
}

void sub_1BFA750D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::EnableDebug(siri::dialogengine *this)
{
  uint64_t SettingsCache;
  _BOOL8 v2;
  char v4;
  void *__p[2];
  char v6;

  SettingsCache = siri::dialogengine::GetSettingsCache(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "debug");
  v4 = 0;
  v2 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (uint64_t)__p, &v4);
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BFA75158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::UpdaterHostname(siri::dialogengine *a1@<X0>, std::string *a2@<X8>)
{
  std::mutex *SettingsCache;
  void *__p[2];
  char v6;

  SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "hostname");
  siri::dialogengine::SettingsCache::GetValue<std::string>(a2, SettingsCache, (std::string::size_type)__p, (uint64_t)a1);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1BFA751E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SettingsCache::GetValue<std::string>(std::string *a1, std::mutex *this, std::string::size_type a3, uint64_t a4)
{
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::string __p;

  std::mutex::lock(this);
  v8 = std::__tree<std::string>::find<std::string>((uint64_t)&this[1], (const void **)a3);
  if (this[1].__m_.__opaque == (char *)v8
    || (v9 = *(const void **)(v8 + 56)) == 0
  {
    v10 = operator new();
    *(_QWORD *)v10 = off_1E79311A0;
    v11 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11);
    v12 = objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)v10 = off_1E79311E8;
    *(_QWORD *)(v10 + 8) = v12;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    __p.__r_.__value_.__r.__words[0] = a3;
    v13 = std::__tree<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<siri::dialogengine::Setting>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&this[1], (const void **)a3, (__int128 **)&__p);
    v14 = v13[7];
    v13[7] = v10;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  siri::dialogengine::Setting::UpdateValue((siri::dialogengine::Setting *)v10);
  if (*(char *)(v10 + 55) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 32), *(_QWORD *)(v10 + 40));
  else
    __p = *(std::string *)(v10 + 32);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10))
  {
    *a1 = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 16);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::mutex::unlock(this);
}

void sub_1BFA753BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex *v14;
  uint64_t v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void siri::dialogengine::StringSetting::~StringSetting(void **this)
{
  *this = off_1E79311E8;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);

}

{
  *this = off_1E79311E8;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);

  JUMPOUT(0x1C3B8D890);
}

BOOL siri::dialogengine::StringSetting::HasValue(siri::dialogengine::StringSetting *this)
{
  uint64_t v2;

  siri::dialogengine::Setting::UpdateValue(this);
  if (!*((_BYTE *)this + 16))
    return 0;
  if (*((char *)this + 55) < 0)
    v2 = *((_QWORD *)this + 5);
  else
    v2 = *((unsigned __int8 *)this + 55);
  return v2 != 0;
}

void siri::dialogengine::StringSetting::ReadValue(siri::dialogengine::StringSetting *this)
{
  void *v2;
  id v3;

  +[DEBundle frameworkInternalUserSettings](DEBundle, "frameworkInternalUserSettings");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringForKey:", *((_QWORD *)this + 1));
  v3 = (id)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    MEMORY[0x1C3B8D53C]((char *)this + 32, objc_msgSend(objc_retainAutorelease(v3), "UTF8String"));
  }
  else if (*((char *)this + 55) < 0)
  {
    **((_BYTE **)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    *((_BYTE *)this + 32) = 0;
    *((_BYTE *)this + 55) = 0;
  }

}

void sub_1BFA7559C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void siri::dialogengine::UpdaterCategory(siri::dialogengine *a1@<X0>, std::string *a2@<X8>)
{
  std::mutex *SettingsCache;
  void *__p[2];
  char v6;

  SettingsCache = (std::mutex *)siri::dialogengine::GetSettingsCache(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "category");
  siri::dialogengine::SettingsCache::GetValue<std::string>(a2, SettingsCache, (std::string::size_type)__p, (uint64_t)a1);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1BFA7561C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::TraceEnabled(siri::dialogengine *this)
{
  uint64_t SettingsCache;
  _BOOL8 v2;
  char v4;
  void *__p[2];
  char v6;

  SettingsCache = siri::dialogengine::GetSettingsCache(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "trace");
  v4 = 0;
  v2 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (uint64_t)__p, &v4);
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BFA7569C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsDeterministic(siri::dialogengine *this)
{
  uint64_t SettingsCache;
  _BOOL8 v2;
  char v4;
  void *__p[2];
  char v6;

  SettingsCache = siri::dialogengine::GetSettingsCache(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "deterministic");
  v4 = 0;
  v2 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (uint64_t)__p, &v4);
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BFA7571C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ShouldValidateAttrs(siri::dialogengine *this)
{
  uint64_t SettingsCache;
  _BOOL8 v2;
  char v4;
  void *__p[2];
  char v6;

  SettingsCache = siri::dialogengine::GetSettingsCache(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "validateAttrs");
  v4 = 0;
  v2 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (uint64_t)__p, &v4);
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BFA7579C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ShouldLogCATParameters(siri::dialogengine *this, const char *a2)
{
  siri::dialogengine *v2;
  uint64_t SettingsCache;
  _BOOL8 v4;
  void *__p[2];
  char v7;
  char v8;

  v8 = 1;
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CAT parameters %s logged by default on this platform. This can be overridden by the user defaults key com.apple.siri.DialogEngine/logCATParameters.", a2, "are");
  SettingsCache = siri::dialogengine::GetSettingsCache(v2);
  std::string::basic_string[abi:ne180100]<0>(__p, "logCATParameters");
  v4 = siri::dialogengine::SettingsCache::GetValue<BOOL>(SettingsCache, (uint64_t)__p, &v8);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1BFA75838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BFA75B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t YAML::BuildGraphOfNextDocument(YAML::Scanner **a1, uint64_t a2)
{
  int Document;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _OWORD v7[3];
  void *__p[2];
  __int128 v9;
  uint64_t v10;

  v6[0] = &off_1E7935320;
  v6[1] = a2;
  memset(v7, 0, sizeof(v7));
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  v10 = 0;
  Document = YAML::Parser::HandleNextDocument(a1, (uint64_t)v6);
  v6[0] = &off_1E7935320;
  v3 = *((_QWORD *)&v9 + 1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (Document)
    v4 = v3;
  else
    v4 = 0;
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::~deque[abi:ne180100]((uint64_t)v7);
  return v4;
}

void sub_1BFA75E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::GraphBuilderAdapter::~GraphBuilderAdapter((YAML::GraphBuilderAdapter *)va);
  _Unwind_Resume(a1);
}

void YAML::GraphBuilderAdapter::~GraphBuilderAdapter(YAML::GraphBuilderAdapter *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E7935320;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::~deque[abi:ne180100]((uint64_t)this + 16);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E7935320;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::~deque[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::deque<YAML::GraphBuilderAdapter::ContainerFrame>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 256;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL siri::dialogengine::ValidateXmlFile(Context *a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  xmlDoc *v6;

  if (*(char *)(a2 + 23) >= 0)
    v5 = (const char *)a2;
  else
    v5 = *(const char **)a2;
  v6 = xmlParseFile(v5);
  return siri::dialogengine::ValidateXmlDoc(a1, v6, a3);
}

BOOL siri::dialogengine::ValidateXmlDoc(Context *a1, xmlDocPtr cur, uint64_t a3)
{
  xmlDoc *v3;
  _BOOL8 v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  const char *v13;
  const std::string::value_type *v14;
  unsigned __int8 v15;
  unint64_t v16;
  unsigned __int8 v17;
  const char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _BOOL4 v22;
  _QWORD *v23;
  uint64_t v24;
  siri::dialogengine *v25;
  const char *v26;
  unint64_t v27;
  std::string *p_p;
  int v29;
  xmlParserInputBuffer *Mem;
  const char *v31;
  xmlDtd *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t *v36;
  uint64_t **v37;
  _QWORD *v38;
  uint64_t **v39;
  const char *v40;
  uint64_t *v41;
  std::string *v42;
  xmlDtd *v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  const char *v47;
  xmlValidCtxt *v48;
  _QWORD *v50;
  _BYTE v51[32];
  xmlDocPtr v52;
  std::string v53;
  xmlDtd *v54;
  std::string __p;
  void *v56[2];
  unsigned __int8 v57;

  v3 = cur;
  v52 = cur;
  v4 = 1;
  if (a1 && cur)
  {
    v8 = *((_QWORD *)a1 + 63);
    v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 64);
    if (!v7)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
      {
LABEL_10:
        siri::dialogengine::XmlErrorHandler::XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)v51, a1);
        if (*(char *)(a3 + 23) >= 0)
          v14 = (const std::string::value_type *)a3;
        else
          v14 = *(const std::string::value_type **)a3;
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Parse DTD (or get cached version) with filename '%s'", v13, v14);
        if ((v15 & 1) == 0
        {
          v50 = (_QWORD *)operator new();
          *v50 = 0;
          siri::dialogengine::ParseDtd(std::string const&)::flag = (uint64_t)v50;
        }
        v16 = atomic_load((unint64_t *)siri::dialogengine::ParseDtd(std::string const&)::flag);
        if (v16 != -1)
        {
          v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          v56[0] = &v53;
          std::__call_once((std::once_flag::_State_type *)siri::dialogengine::ParseDtd(std::string const&)::flag, v56, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ParseDtd(std::string const&)::$_0 &&>>);
        }
        if ((v17 & 1) == 0
        {
          __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &siri::dialogengine::GetParseDtdMutexRef(void)::parseDtdMutex, &dword_1BF794000);
        }
        std::mutex::lock(&siri::dialogengine::GetParseDtdMutexRef(void)::parseDtdMutex);
        v19 = siri::dialogengine::ParseDtd(std::string const&)::cache + 8;
        v20 = *(_QWORD **)(siri::dialogengine::ParseDtd(std::string const&)::cache + 8);
        if (!v20)
          goto LABEL_24;
        v21 = siri::dialogengine::ParseDtd(std::string const&)::cache + 8;
        do
        {
          v22 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v20 + 4, (_QWORD *)a3);
          v23 = v20 + 1;
          if (!v22)
          {
            v23 = v20;
            v21 = (uint64_t)v20;
          }
          v20 = (_QWORD *)*v23;
        }
        while (*v23);
        if (v21 == v19
          || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((_QWORD *)a3, (_QWORD *)(v21 + 32)))
        {
LABEL_24:
          if (*(char *)(a3 + 23) >= 0)
            v24 = a3;
          else
            v24 = *(_QWORD *)a3;
        }
        else
        {
          if (*(char *)(a3 + 23) >= 0)
            v24 = a3;
          else
            v24 = *(_QWORD *)a3;
          if (v19 != v21)
          {
            siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Returning cached DTD for filename '%s'", v18, v24);
            v32 = *(xmlDtd **)(v21 + 56);
LABEL_80:
            std::mutex::unlock(&siri::dialogengine::GetParseDtdMutexRef(void)::parseDtdMutex);
            if (v32)
            {
              siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Validating document against DTD", v47);
              v53.__r_.__value_.__r.__words[0] = (std::string::size_type)xmlNewValidCtxt();
              v4 = xmlValidateDtd((xmlValidCtxtPtr)v53.__r_.__value_.__l.__data_, v3, v32) == 1;
              v48 = (xmlValidCtxt *)v53.__r_.__value_.__r.__words[0];
              v53.__r_.__value_.__r.__words[0] = 0;
              if (v48)
                xmlFreeValidCtxt(v48);
            }
            else
            {
              v4 = 1;
            }
            siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)v51);
            goto LABEL_85;
          }
        }
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"No cached DTD for filename '%s'", v18, v24);
        siri::dialogengine::GetDtdSearchPaths(v25, &v53);
        siri::dialogengine::FindFileInPaths(a3, &v53, (uint64_t)v56);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v27 = v57;
        if ((v57 & 0x80u) != 0)
          v27 = (unint64_t)v56[1];
        if (v27)
        {
          siri::dialogengine::ReadFileToString((uint64_t)v56, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v29 = __p.__r_.__value_.__r.__words[1];
          Mem = xmlParserInputBufferCreateMem((const char *)p_p, v29, XML_CHAR_ENCODING_UTF8);
          v32 = xmlIOParseDTD(0, Mem, XML_CHAR_ENCODING_UTF8);
          if (v32)
          {
            v33 = siri::dialogengine::ParseDtd(std::string const&)::cache;
            if (*(char *)(a3 + 23) < 0)
              std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
            else
              v53 = *(std::string *)a3;
            v54 = v32;
            v37 = (uint64_t **)(v33 + 8);
            v36 = *(uint64_t **)(v33 + 8);
            if (v36)
            {
              while (1)
              {
                while (1)
                {
                  v37 = (uint64_t **)v36;
                  v38 = v36 + 4;
                  if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&v53, v36 + 4))
                    break;
                  v36 = *v37;
                  v39 = v37;
                  if (!*v37)
                    goto LABEL_62;
                }
                if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v38, &v53))
                  break;
                v39 = v37 + 1;
                v36 = v37[1];
                if (!v36)
                  goto LABEL_62;
              }
            }
            else
            {
              v39 = (uint64_t **)(v33 + 8);
LABEL_62:
              v41 = (uint64_t *)operator new(0x40uLL);
              v42 = (std::string *)(v41 + 4);
              if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v42, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
                v43 = v54;
              }
              else
              {
                *(_OWORD *)&v42->__r_.__value_.__l.__data_ = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
                v41[6] = v53.__r_.__value_.__r.__words[2];
                v43 = v32;
              }
              v41[7] = (uint64_t)v43;
              *v41 = 0;
              v41[1] = 0;
              v41[2] = (uint64_t)v37;
              *v39 = v41;
              v44 = **(_QWORD **)v33;
              if (v44)
              {
                *(_QWORD *)v33 = v44;
                v41 = *v39;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v33 + 8), v41);
              ++*(_QWORD *)(v33 + 16);
            }
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v53.__r_.__value_.__l.__data_);
            if (*(char *)(a3 + 23) >= 0)
              v45 = a3;
            else
              v45 = *(_QWORD *)a3;
            v46 = v56;
            if ((v57 & 0x80u) != 0)
              v46 = (void **)v56[0];
            siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Cached DTD for filename '%s' (full path: '%s')", v40, v45, v46);
          }
          else
          {
            v35 = v56;
            if ((v57 & 0x80u) != 0)
              v35 = (void **)v56[0];
            siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Unable to parse DTD file '%s'; Skipping DTD validation",
              v31,
              v35);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          if (*(char *)(a3 + 23) >= 0)
            v34 = a3;
          else
            v34 = *(_QWORD *)a3;
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Unable to find DTD file '%s'; Skipping DTD validation",
            v26,
            v34);
          v32 = 0;
        }
        if ((char)v57 < 0)
          operator delete(v56[0]);
        goto LABEL_80;
      }
    }
    else
    {
LABEL_9:
      if (v8)
        goto LABEL_10;
    }
    v4 = 1;
LABEL_85:
    v3 = v52;
  }
  v52 = 0;
  if (v3)
    xmlFreeDoc(v3);
  return v4;
}

void sub_1BFA7646C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, xmlDoc *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  siri::dialogengine::XmlErrorHandler::~XmlErrorHandler((siri::dialogengine::XmlErrorHandler *)&a12);
  std::unique_ptr<_xmlDoc,siri::dialogengine::xmlDocDeleter>::reset[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ParseDtd(std::string const&)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  siri::dialogengine::ParseDtd(std::string const&)::cache = (uint64_t)result;
  return result;
}

void std::unique_ptr<_xmlValidCtxt,siri::dialogengine::xmlValidCtxtDeleter>::reset[abi:ne180100](xmlValidCtxt **a1)
{
  xmlValidCtxt *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    xmlFreeValidCtxt(v2);
}

void std::unique_ptr<_xmlDoc,siri::dialogengine::xmlDocDeleter>::reset[abi:ne180100](xmlDoc **a1)
{
  xmlDoc *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    xmlFreeDoc(v2);
}

BOOL siri::dialogengine::ValidateXmlString(Context *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  const char *v6;
  int v7;
  xmlDoc *v8;

  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_DWORD *)(a2 + 8);
  v8 = xmlParseMemory(v6, v7);
  return siri::dialogengine::ValidateXmlDoc(a1, v8, a3);
}

void sub_1BFA76760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BFA768A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BFA7694C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFA76B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a9);

  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)va);
  _Unwind_Resume(a1);
}

void sub_1BFA76D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a9);

  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)va);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::IsSSMLTag(siri::dialogengine *this, const siri::dialogengine::ChunkTag *a2)
{
  unsigned __int8 v3;
  void *v4;
  uint64_t i;
  std::string v7;
  void *__p[2];
  char v9;
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  if ((v3 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "say-as");
    std::string::basic_string[abi:ne180100]<0>(v10, "prosody");
    std::string::basic_string[abi:ne180100]<0>(v11, "phoneme");
    std::string::basic_string[abi:ne180100]<0>(v12, "break");
    std::string::basic_string[abi:ne180100]<0>(v13, "emphasis");
    std::string::basic_string[abi:ne180100]<0>(v14, "w");
    std::string::basic_string[abi:ne180100]<0>(v15, "sub");
    std::string::basic_string[abi:ne180100]<0>(v16, "audio");
    std::set<std::string>::set[abi:ne180100](&siri::dialogengine::IsSSMLTag(siri::dialogengine::ChunkTag const*)::sSSMLTags, (const void **)__p, 8);
    for (i = 0; i != -24; i -= 3)
    {
      if (SHIBYTE(v16[i + 2]) < 0)
        operator delete((void *)v16[i]);
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &siri::dialogengine::IsSSMLTag(siri::dialogengine::ChunkTag const*)::sSSMLTags, &dword_1BF794000);
  }
  if (*((char *)this + 223) < 0)
    std::string::__init_copy_ctor_external(&v7, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
  else
    v7 = *(std::string *)((char *)this + 200);
  siri::dialogengine::StringToLower((uint64_t)&v7, (uint64_t)__p);
  v4 = (void *)std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::IsSSMLTag(siri::dialogengine::ChunkTag const*)::sSSMLTags, (const void **)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v4 != &unk_1EF580EC0;
}

void sub_1BFA76FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v22;

  v22 = 0;
  while (1)
  {
    if (*(char *)(v20 + v22 + 191) < 0)
      operator delete(*(void **)(v20 + v22 + 168));
    v22 -= 24;
    if (v22 == -192)
    {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t siri::dialogengine::ContainsTTSCodes(uint64_t a1)
{
  uint64_t TTSRegex;
  uint64_t v3;
  std::sub_match<const char *> *v4;
  uint64_t v5;
  std::vector<std::csub_match> __p[2];
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  TTSRegex = siri::dialogengine::GetTTSRegex((siri::dialogengine *)a1);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  memset(__p, 0, 41);
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (std::sub_match<const char *> *)a1;
  else
    v4 = *(std::sub_match<const char *> **)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  v5 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(TTSRegex, v4, (std::sub_match<const char *> *)((char *)v4 + v3), __p, 0);
  if (__p[0].__begin_)
    operator delete(__p[0].__begin_);
  return v5;
}

void sub_1BFA77104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetTTSRegex(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetTTSRegex(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetTTSRegex(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetTTSRegex(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTTSRegex(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetTTSRegex(void)::sRegex;
}

void sub_1BFA771C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::regex_traits<char> *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTTSRegex(void)::$_0 &&>>()
{
  std::regex_traits<char> *v0;
  std::regex_traits<char> *result;

  v0 = (std::regex_traits<char> *)operator new();
  result = std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v0, "\\x1b\\\\(.*?)\\\\");
  siri::dialogengine::GetTTSRegex(void)::sRegex = (uint64_t)v0;
  return result;
}

void sub_1BFA77228(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x1060C4040BE2400);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ContainsTTStoiCodes(char **a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "\x1B\\toi=");
  v2 = siri::dialogengine::StringContains(a1, (char *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void siri::dialogengine::ExtractSpeechCodesFromString(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  siri::dialogengine *v4;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *SSMLRegex;
  std::regex_constants::match_flag_type v6;
  siri::dialogengine *v7;
  uint64_t v8;
  std::__wrap_iter<const char *> v9;
  std::__wrap_iter<const char *> v10;
  std::vector<std::ssub_match>::pointer begin;
  std::vector<std::ssub_match>::pointer end;
  unint64_t v13;
  std::sub_match<std::__wrap_iter<const char *>> *v14;
  uint64_t v15;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v16;
  BOOL *p_matched;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::__wrap_iter<const char *> *p_second;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  void *__p[2];
  std::string::size_type v33;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v34;
  std::regex_iterator<std::__wrap_iter<const char *>, char> __x;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v36;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (siri::dialogengine *)siri::dialogengine::ContainsSSMLCodes(a1);
  if ((_DWORD)v4)
  {
    SSMLRegex = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetSSMLRegex(v4);
  }
  else
  {
    v7 = (siri::dialogengine *)siri::dialogengine::ContainsTTSCodes(a1);
    if (!(_DWORD)v7)
      return;
    SSMLRegex = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetTTSRegex(v7);
  }
  v8 = *(unsigned __int8 *)(a1 + 23);
  if ((v8 & 0x80u) == 0)
    v9.__i_ = (std::__wrap_iter<const char *>::iterator_type)a1;
  else
    v9.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a1;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  v10.__i_ = &v9.__i_[v8];
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v36, v9, v10, SSMLRegex, v6);
  memset(&__x.__match_.__prefix_, 0, 17);
  memset(&__x.__match_.__suffix_, 0, 17);
  __x.__match_.__ready_ = 0;
  __x.__match_.__position_start_.__i_ = 0;
  memset(&__x.__match_, 0, 41);
  memset(&__x, 0, 28);
  *(_OWORD *)&v34.__begin_.__i_ = *(_OWORD *)&v36.__begin_.__i_;
  *(_OWORD *)((char *)&v34.__end_.__i_ + 4) = *(_OWORD *)((char *)&v36.__end_.__i_ + 4);
  memset(&v34.__match_, 0, 24);
  begin = v36.__match_.__matches_.__begin_;
  end = v36.__match_.__matches_.__end_;
  if (v36.__match_.__matches_.__end_ != v36.__match_.__matches_.__begin_)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL
        * (((char *)v36.__match_.__matches_.__end_ - (char *)v36.__match_.__matches_.__begin_) >> 3);
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v14 = (std::sub_match<std::__wrap_iter<const char *>> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::string>>>(v13);
    v34.__match_.__matches_.__begin_ = v14;
    v34.__match_.__matches_.__end_cap_.__value_ = &v14[v15];
    do
    {
      v16 = begin->std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
      *(_QWORD *)&v14->matched = *(_QWORD *)&begin->matched;
      v14->std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v16;
      ++v14;
      ++begin;
    }
    while (begin != end);
    v34.__match_.__matches_.__end_ = v14;
  }
  *(_OWORD *)&v34.__match_.__prefix_.second.__i_ = *(_OWORD *)&v36.__match_.__prefix_.second.__i_;
  v34.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v36.__match_.__suffix_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_OWORD *)&v34.__match_.__suffix_.matched = *(_OWORD *)&v36.__match_.__suffix_.matched;
  v34.__match_.__position_start_.__i_ = v36.__match_.__position_start_.__i_;
  v34.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v36.__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
  *(_OWORD *)&v34.__match_.__unmatched_.matched = *(_OWORD *)&v36.__match_.__unmatched_.matched;
  while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v34, &__x))
  {
    if (v34.__match_.__matches_.__end_ == v34.__match_.__matches_.__begin_)
      p_matched = &v34.__match_.__unmatched_.matched;
    else
      p_matched = &v34.__match_.__matches_.__begin_->matched;
    if (*p_matched)
    {
      if (v34.__match_.__matches_.__end_ == v34.__match_.__matches_.__begin_)
        p_unmatched = &v34.__match_.__unmatched_;
      else
        p_unmatched = v34.__match_.__matches_.__begin_;
      p_second = &v34.__match_.__matches_.__begin_->second;
      if (v34.__match_.__matches_.__end_ == v34.__match_.__matches_.__begin_)
        p_second = &v34.__match_.__unmatched_.second;
      std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, (char *)p_unmatched->first.__i_, (char *)p_second->__i_, p_second->__i_ - p_unmatched->first.__i_);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v33 = 0;
    }
    v21 = *(_QWORD *)(a2 + 8);
    v20 = *(_QWORD *)(a2 + 16);
    if (v21 >= v20)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(_QWORD *)a2) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(_QWORD *)a2) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v24;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v26)
        v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v26);
      else
        v27 = 0;
      v28 = v27 + v23;
      __v.__first_ = v27;
      __v.__begin_ = v28;
      __v.__end_cap_.__value_ = &v27[v26];
      v29 = *(_OWORD *)__p;
      v28->__r_.__value_.__r.__words[2] = v33;
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      __p[1] = 0;
      v33 = 0;
      __p[0] = 0;
      __v.__end_ = v28 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      v30 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v31 = SHIBYTE(v33);
      *(_QWORD *)(a2 + 8) = v30;
      if (v31 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v22 = *(_OWORD *)__p;
      *(_QWORD *)(v21 + 16) = v33;
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(a2 + 8) = v21 + 24;
    }
    std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v34);
  }
  if (v34.__match_.__matches_.__begin_)
  {
    v34.__match_.__matches_.__end_ = v34.__match_.__matches_.__begin_;
    operator delete(v34.__match_.__matches_.__begin_);
  }
  if (v36.__match_.__matches_.__begin_)
  {
    v36.__match_.__matches_.__end_ = v36.__match_.__matches_.__begin_;
    operator delete(v36.__match_.__matches_.__begin_);
  }
}

void sub_1BFA775AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ContainsSSMLCodes(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BYTE v15[7];
  _BYTE v16[7];
  _BYTE v17[7];
  _BYTE v18[7];
  _BYTE v19[7];
  _BYTE v20[7];

  v1 = *(_BYTE **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v1 = (_BYTE *)a1;
    v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2)
  {
    v3 = &v1[v2];
    v4 = &v1[v2];
    v5 = v4 - 1;
    while (*v1 != 60)
    {
LABEL_35:
      if (v3 == ++v1)
        return 0;
    }
    v6 = v1 + 1;
    while (1)
    {
      if (v6 == v3)
        goto LABEL_35;
      v7 = *v6;
      if (v7 == 34)
      {
        *(_DWORD *)v20 = *(_DWORD *)v16;
        *(_DWORD *)&v20[3] = *(_DWORD *)&v16[3];
        *(_DWORD *)v19 = *(_DWORD *)v15;
        *(_DWORD *)&v19[3] = *(_DWORD *)&v15[3];
        v8 = v6 + 1;
        if (v6 + 1 != v3)
        {
          v9 = v5 - v6;
          while (*v8 != 34)
          {
            *(_DWORD *)v20 = *(_DWORD *)v16;
            *(_DWORD *)&v20[3] = *(_DWORD *)&v16[3];
            *(_DWORD *)v19 = *(_DWORD *)v15;
            *(_DWORD *)&v19[3] = *(_DWORD *)&v15[3];
            ++v8;
            if (!--v9)
            {
              v8 = v4;
              break;
            }
          }
          if (v8 != v3 && *v8 == 34)
          {
LABEL_25:
            *(_DWORD *)v18 = *(_DWORD *)v20;
            *(_DWORD *)&v18[3] = *(_DWORD *)&v20[3];
            *(_DWORD *)v17 = *(_DWORD *)v19;
            *(_DWORD *)&v17[3] = *(_DWORD *)&v19[3];
            v6 = v8 + 1;
            goto LABEL_33;
          }
        }
        v7 = *v6;
      }
      if (v7 == 39)
      {
        *(_DWORD *)v20 = *(_DWORD *)v16;
        *(_DWORD *)&v20[3] = *(_DWORD *)&v16[3];
        *(_DWORD *)v19 = *(_DWORD *)v15;
        *(_DWORD *)&v19[3] = *(_DWORD *)&v15[3];
        v8 = v6 + 1;
        if (v6 + 1 != v3)
        {
          v10 = v5 - v6;
          while (*v8 != 39)
          {
            *(_DWORD *)v20 = *(_DWORD *)v16;
            *(_DWORD *)&v20[3] = *(_DWORD *)&v16[3];
            *(_DWORD *)v19 = *(_DWORD *)v15;
            *(_DWORD *)&v19[3] = *(_DWORD *)&v15[3];
            ++v8;
            if (!--v10)
            {
              v8 = v4;
              break;
            }
          }
          if (v8 != v3 && *v8 == 39)
            goto LABEL_25;
        }
        v7 = *v6;
      }
      v11 = v7 > 0x3E;
      v12 = (1 << v7) & 0x4000008400000000;
      if (!v11 && v12 != 0)
      {
        if (*v6 != 62)
          goto LABEL_35;
        return 1;
      }
      *(_DWORD *)v18 = *(_DWORD *)v16;
      *(_DWORD *)&v18[3] = *(_DWORD *)&v16[3];
      *(_DWORD *)v17 = *(_DWORD *)v15;
      *(_DWORD *)&v17[3] = *(_DWORD *)&v15[3];
      ++v6;
LABEL_33:
      *(_DWORD *)v16 = *(_DWORD *)v18;
      *(_DWORD *)&v16[3] = *(_DWORD *)&v18[3];
      *(_DWORD *)v15 = *(_DWORD *)v17;
      *(_DWORD *)&v15[3] = *(_DWORD *)&v17[3];
    }
  }
  return 0;
}

uint64_t siri::dialogengine::GetSSMLRegex(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetSSMLRegex(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetSSMLRegex(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetSSMLRegex(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSSMLRegex(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetSSMLRegex(void)::sRegex;
}

void sub_1BFA778FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::regex_traits<char> *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSSMLRegex(void)::$_0 &&>>()
{
  std::regex_traits<char> *v0;
  std::regex_traits<char> *result;

  v0 = (std::regex_traits<char> *)operator new();
  result = std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v0, "<(\"[^\"]*\"|'[^']*'|[^'\">])*>");
  siri::dialogengine::GetSSMLRegex(void)::sRegex = (uint64_t)v0;
  return result;
}

void sub_1BFA7795C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x1060C4040BE2400);
  _Unwind_Resume(a1);
}

void siri::dialogengine::RemoveSpeechCodesFromString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine *v4;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *SSMLRegex;
  siri::dialogengine *v6;
  uint64_t v7;
  std::__wrap_iter<const char *> v8;
  std::__wrap_iter<const char *> v9;

  v4 = (siri::dialogengine *)siri::dialogengine::ContainsSSMLCodes(a1);
  if ((_DWORD)v4)
  {
    SSMLRegex = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetSSMLRegex(v4);
  }
  else
  {
    v6 = (siri::dialogengine *)siri::dialogengine::ContainsTTSCodes(a1);
    if (!(_DWORD)v6)
    {
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      }
      return;
    }
    SSMLRegex = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetTTSRegex(v6);
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8.__i_ = (std::__wrap_iter<const char *>::iterator_type)a1;
  else
    v8.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a1;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 8);
  v9.__i_ = &v8.__i_[v7];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(a2, v8, v9, SSMLRegex, "");
}

void sub_1BFA77A28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::AddSpeechCodesToString(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string v10;

  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 == 48)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(const void ***)a2, (const void **)a1, (uint64_t)&v10);
    v5 = *(char *)(*(_QWORD *)a2 + 47);
    if (v5 >= 0)
      v6 = (const std::string::value_type *)(*(_QWORD *)a2 + 24);
    else
      v6 = *(const std::string::value_type **)(*(_QWORD *)a2 + 24);
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 47);
    else
      v7 = *(_QWORD *)(*(_QWORD *)a2 + 32);
    v8 = std::string::append(&v10, v6, v7);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void sub_1BFA77B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ConvertSSMLToTTSCode(siri::dialogengine::Context *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  void *v7;
  int *v13;
  const char *v15;
  _BOOL4 v16;
  std::string *v17;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  std::__shared_weak_count *v22;
  std::string::size_type v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  const char *v29;
  std::string::size_type size;
  int v34;
  int v35;
  const char *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  const char *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string::size_type v45;
  const char *v46;
  _BOOL4 v47;
  std::string *v48;
  __int128 v49;
  int v50;
  std::string *v53;
  const char *v55;
  std::string::size_type v57;
  const char *v58;
  _BOOL4 v59;
  int v60;
  std::string *v61;
  __int128 v62;
  const char *v63;
  std::string::size_type v64;
  std::string *v65;
  int v66;
  int v67;
  const char *v69;
  _BOOL4 v70;
  double v71;
  double v72;
  std::string *v73;
  __int128 v74;
  void *v75;
  void *v77;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  void *v84;
  int data;
  int v87;
  void *v89;
  const char *v90;
  char v91;
  std::string *p_str;
  std::string::size_type v93;
  std::string *v94;
  std::string::size_type v95;
  std::string::size_type v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  std::string::value_type *v101;
  BOOL v102;
  char v103;
  std::string *v104;
  std::string::size_type v105;
  unsigned int v106;
  uint64_t v107;
  std::string *v108;
  int v109;
  std::string *v110;
  int v111;
  std::string *v112;
  std::string::size_type v113;
  _BOOL4 v114;
  std::string::size_type v115;
  std::string v117;
  void *v118;
  uint64_t v119;
  char v120;
  void *v121;
  char v122;
  std::string __p;
  std::string v124;
  std::string v125;
  std::string v126;
  void *v127;
  char v128;
  void *v129;
  char v130;
  void *v131;
  char v132;
  void *v133;
  char v134;
  void *v135;
  char v136;
  std::string __str;
  std::string v138;

  if (*(char *)(a2 + 223) < 0)
    std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)(a2 + 200), *(_QWORD *)(a2 + 208));
  else
    v125 = *(std::string *)(a2 + 200);
  siri::dialogengine::StringToLower((uint64_t)&v125, (uint64_t)&v118);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  if ((v120 & 0x80) == 0)
  {
    v6 = 0;
    switch(v120)
    {
      case 1:
        if (v118 != 119)
          return 0;
        goto LABEL_12;
      case 3:
        if ((unsigned __int16)v118 != 30067 || BYTE2(v118) != 98)
          return 0;
        goto LABEL_79;
      case 5:
        if ((_DWORD)v118 != 1634038370 || BYTE4(v118) != 107)
          goto LABEL_22;
        goto LABEL_52;
      case 6:
        if ((_DWORD)v118 != 762929523 || WORD2(v118) != 29537)
          return 0;
        goto LABEL_116;
      case 7:
        if ((_DWORD)v118 != 1852794992 || *(_DWORD *)((char *)&v118 + 3) != 1701668206)
          goto LABEL_46;
        goto LABEL_164;
      case 8:
        if (v118 != (void *)0x7369736168706D65)
          return 0;
        goto LABEL_65;
      default:
        return v6;
    }
  }
  switch(v119)
  {
    case 1:
      if (*(_BYTE *)v118 != 119)
        goto LABEL_135;
LABEL_12:
      std::string::basic_string[abi:ne180100]<0>(&v125, "mw");
      std::string::basic_string[abi:ne180100]<0>(&v138, "mw");
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      siri::dialogengine::AddTTSCodes(a3, (uint64_t)&v125, (uint64_t)&v138, (uint64_t)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v138.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_362;
      v7 = (void *)v125.__r_.__value_.__r.__words[0];
      goto LABEL_361;
    case 3:
      if (*(_WORD *)v118 != 30067 || *((_BYTE *)v118 + 2) != 98)
        goto LABEL_135;
LABEL_79:
      std::string::basic_string[abi:ne180100]<0>(&v125, "alias");
      siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v125, &__str);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      v19 = *(uint64_t **)a3;
      v20 = *(uint64_t **)(a3 + 8);
      if (*(uint64_t **)a3 == v20)
      {
        std::string::basic_string[abi:ne180100]<0>(&v124, "");
        siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v125, &v124, &__str);
      }
      v21 = 1;
      do
      {
        v23 = *v19;
        v22 = (std::__shared_weak_count *)v19[1];
        v124.__r_.__value_.__r.__words[0] = *v19;
        v124.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }
        siri::dialogengine::SpeakableString::SpeakableString(&v125, (const siri::dialogengine::SpeakableString *)(v23 + 8));
        if ((v21 & 1) != 0)
        {
          std::string::operator=(&v126, &__str);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v138, "");
          std::string::operator=(&v126, &v138);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v138.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::ChunkText::SetText((siri::dialogengine::ChunkText *)v23, &v125);
        if (v136 < 0)
          operator delete(v135);
        if (v134 < 0)
          operator delete(v133);
        if (v132 < 0)
          operator delete(v131);
        if (v130 < 0)
          operator delete(v129);
        if (v128 < 0)
          operator delete(v127);
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v126.__r_.__value_.__l.__data_);
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v125.__r_.__value_.__l.__data_);
        if (v22)
        {
          v26 = (unint64_t *)&v22->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v21 = 0;
        v19 += 2;
      }
      while (v19 != v20);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_362;
      v7 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_361:
      operator delete(v7);
LABEL_362:
      v6 = 1;
      goto LABEL_482;
    case 5:
      if (*(_DWORD *)v118 != 1634038370 || *((_BYTE *)v118 + 4) != 107)
        goto LABEL_135;
LABEL_52:
      std::string::basic_string[abi:ne180100]<0>(&v138, "time");
      siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v138, &v125);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v138.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__str, "strength");
      siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&__str, &v138);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__str, "ms");
      v16 = siri::dialogengine::StringEndsWith(&v125, (unsigned __int8 *)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v16)
      {
        siri::dialogengine::StringTrim("ms", &v125, &__str);
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v125.__r_.__value_.__l.__data_);
        v125 = __str;
        std::operator+<char>();
        std::string::basic_string[abi:ne180100]<0>(&v124, "");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        siri::dialogengine::AddTTSCodes(a3, (uint64_t)&__str, (uint64_t)&v124, (uint64_t)&__p);
        goto LABEL_62;
      }
      if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (HIBYTE(v138.__r_.__value_.__r.__words[2]) != 4)
        {
          if (HIBYTE(v138.__r_.__value_.__r.__words[2]) == 6)
          {
            if (LODWORD(v138.__r_.__value_.__l.__data_) != 1702309240
              || WORD2(v138.__r_.__value_.__r.__words[0]) != 27489)
            {
              if (LODWORD(v138.__r_.__value_.__l.__data_) != 1768187245
                || WORD2(v138.__r_.__value_.__r.__words[0]) != 28021)
              {
                goto LABEL_210;
              }
LABEL_420:
              std::string::basic_string[abi:ne180100]<0>(&__str, "pause=350");
              std::string::basic_string[abi:ne180100]<0>(&v124, "");
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              siri::dialogengine::AddTTSCodes(a3, (uint64_t)&__str, (uint64_t)&v124, (uint64_t)&__p);
              goto LABEL_62;
            }
LABEL_363:
            std::string::basic_string[abi:ne180100]<0>(&__str, "pause=50");
            std::string::basic_string[abi:ne180100]<0>(&v124, "");
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            siri::dialogengine::AddTTSCodes(a3, (uint64_t)&__str, (uint64_t)&v124, (uint64_t)&__p);
            goto LABEL_62;
          }
LABEL_372:
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML break element has no valid 'time' or 'strength' attribute.", v15);
          goto LABEL_373;
        }
        if (LODWORD(v138.__r_.__value_.__l.__data_) != 1801545079)
        {
          if (LODWORD(v138.__r_.__value_.__l.__data_) != 1701736302)
            goto LABEL_372;
LABEL_379:
          std::string::basic_string[abi:ne180100]<0>(&__str, "eos=0");
          std::string::basic_string[abi:ne180100]<0>(&v124, "");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::AddTTSCodes(a3, (uint64_t)&__str, (uint64_t)&v124, (uint64_t)&__p);
          goto LABEL_62;
        }
        goto LABEL_380;
      }
      if (v138.__r_.__value_.__l.__size_ == 4)
      {
        if (*(_DWORD *)v138.__r_.__value_.__l.__data_ == 1701736302)
          goto LABEL_379;
        if (*(_DWORD *)v138.__r_.__value_.__l.__data_ == 1801545079)
        {
LABEL_380:
          std::string::basic_string[abi:ne180100]<0>(&__str, "pause=150");
          std::string::basic_string[abi:ne180100]<0>(&v124, "");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::AddTTSCodes(a3, (uint64_t)&__str, (uint64_t)&v124, (uint64_t)&__p);
          goto LABEL_62;
        }
      }
      else if (v138.__r_.__value_.__l.__size_ == 6)
      {
        if (*(_DWORD *)v138.__r_.__value_.__l.__data_ == 1702309240
          && *(_WORD *)(v138.__r_.__value_.__r.__words[0] + 4) == 27489)
        {
          goto LABEL_363;
        }
        if (*(_DWORD *)v138.__r_.__value_.__l.__data_ == 1768187245
          && *(_WORD *)(v138.__r_.__value_.__r.__words[0] + 4) == 28021)
        {
          goto LABEL_420;
        }
        if ((*((_BYTE *)&v138.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (HIBYTE(v138.__r_.__value_.__r.__words[2]) == 6)
          {
LABEL_210:
            v53 = &v138;
LABEL_368:
            data = (int)v53->__r_.__value_.__l.__data_;
            v87 = WORD2(v53->__r_.__value_.__r.__words[0]);
            if (data != 1869771891 || v87 != 26478)
              goto LABEL_372;
            std::string::basic_string[abi:ne180100]<0>(&__str, "eos=1");
            std::string::basic_string[abi:ne180100]<0>(&v124, "");
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            siri::dialogengine::AddTTSCodes(a3, (uint64_t)&__str, (uint64_t)&v124, (uint64_t)&__p);
LABEL_62:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
LABEL_175:
            if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v124.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v6 = 1;
            goto LABEL_374;
          }
          goto LABEL_372;
        }
      }
      if (v138.__r_.__value_.__l.__size_ == 6)
      {
        v53 = (std::string *)v138.__r_.__value_.__r.__words[0];
        goto LABEL_368;
      }
      goto LABEL_372;
    case 6:
      if (*(_DWORD *)v118 != 762929523 || *((_WORD *)v118 + 2) != 29537)
        goto LABEL_135;
LABEL_116:
      std::string::basic_string[abi:ne180100]<0>(&v125, "interpret-as");
      siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v125, &v117);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        size = HIBYTE(v117.__r_.__value_.__r.__words[2]);
        if (HIBYTE(v117.__r_.__value_.__r.__words[2]) != 5)
        {
          if (HIBYTE(v117.__r_.__value_.__r.__words[2]) != 6)
            goto LABEL_292;
          if (LODWORD(v117.__r_.__value_.__l.__data_) != 1836020336
            || WORD2(v117.__r_.__value_.__r.__words[0]) != 29808)
          {
            goto LABEL_292;
          }
LABEL_232:
          std::string::basic_string[abi:ne180100]<0>(&v138, "detail");
          siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v138, &v125);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v138.__r_.__value_.__l.__data_);
          std::operator+<char>();
          std::string::basic_string[abi:ne180100]<0>(&__str, "");
          std::string::basic_string[abi:ne180100]<0>(&v124, "");
          siri::dialogengine::AddTTSCodes(a3, (uint64_t)&v138, (uint64_t)&__str, (uint64_t)&v124);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          goto LABEL_294;
        }
        if (LODWORD(v117.__r_.__value_.__l.__data_) != 1852794992 || v117.__r_.__value_.__s.__data_[4] != 101)
        {
LABEL_292:
          if (!size)
          {
            siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML say-as element has no interpret-as attribute.", v29);
            v6 = 0;
            goto LABEL_481;
          }
          goto LABEL_293;
        }
        goto LABEL_343;
      }
      size = v117.__r_.__value_.__l.__size_;
      if (v117.__r_.__value_.__l.__size_ != 5)
      {
        if (v117.__r_.__value_.__l.__size_ != 6)
          goto LABEL_292;
        if (*(_DWORD *)v117.__r_.__value_.__l.__data_ == 1836020336
          && *(_WORD *)(v117.__r_.__value_.__r.__words[0] + 4) == 29808)
        {
          goto LABEL_232;
        }
LABEL_293:
        std::operator+<char>();
        std::string::basic_string[abi:ne180100]<0>(&v138, "tn=normal");
        std::string::basic_string[abi:ne180100]<0>(&__str, "");
        siri::dialogengine::AddTTSCodes(a3, (uint64_t)&v125, (uint64_t)&v138, (uint64_t)&__str);
LABEL_294:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v138.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_480;
        v77 = (void *)v125.__r_.__value_.__r.__words[0];
LABEL_300:
        operator delete(v77);
        goto LABEL_480;
      }
      if (*(_DWORD *)v117.__r_.__value_.__l.__data_ != 1852794992
        || *(_BYTE *)(v117.__r_.__value_.__r.__words[0] + 4) != 101)
      {
        goto LABEL_293;
      }
LABEL_343:
      siri::dialogengine::ChunkList::ChunkList((uint64_t **)&v124, (uint64_t **)a3);
      siri::dialogengine::ChunkList::Expand((uint64_t *)&v138, (siri::dialogengine::ChunkList *)&v124, a1);
      siri::dialogengine::ExpandToText((uint64_t)&v125, (uint64_t *)v138.__r_.__value_.__l.__data_, (uint64_t *)v138.__r_.__value_.__l.__size_);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__str, v125.__r_.__value_.__l.__data_, v125.__r_.__value_.__l.__size_);
      else
        __str = v125;
      if (v136 < 0)
        operator delete(v135);
      if (v134 < 0)
        operator delete(v133);
      if (v132 < 0)
        operator delete(v131);
      if (v130 < 0)
        operator delete(v129);
      if (v128 < 0)
        operator delete(v127);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      siri::dialogengine::Context::GetLocale(a1, v90, (uint64_t)&v125);
      siri::dialogengine::GetLocaleLanguage(&v124);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      v91 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      v93 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v93 = __str.__r_.__value_.__l.__size_;
      if (!v93)
      {
LABEL_419:
        v103 = 0;
        goto LABEL_423;
      }
      v94 = (std::string *)((char *)p_str + v93);
      v95 = v93;
      while (1)
      {
        v96 = v95--;
        v97 = p_str->__r_.__value_.__s.__data_[0];
        if (v97 == 45)
        {
          if ((std::string *)((char *)&p_str->__r_.__value_.__l.__data_ + 1) == v94)
            goto LABEL_418;
          v98 = 1;
          while ((p_str->__r_.__value_.__s.__data_[v98] & 0xDFu) - 65 <= 0x19)
          {
            if (v96 == ++v98)
            {
              v99 = v95;
              goto LABEL_411;
            }
          }
          v99 = v98 - 1;
LABEL_411:
          if (v99)
            break;
        }
        if (p_str != v94)
        {
          v100 = (v97 - 65) > 0x39;
          v101 = &p_str->__r_.__value_.__s.__data_[1];
          v102 = v100 || v101 == (std::string::value_type *)v94;
          if (!v102 && *v101 == 45)
            break;
        }
LABEL_418:
        p_str = (std::string *)((char *)p_str + 1);
        if (v94 == p_str)
          goto LABEL_419;
      }
      v103 = 1;
LABEL_423:
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v124.__r_.__value_.__l.__size_ == 2)
        {
          v104 = (std::string *)v124.__r_.__value_.__r.__words[0];
          if (*(_WORD *)v124.__r_.__value_.__l.__data_ != 28261 && *(_WORD *)v124.__r_.__value_.__l.__data_ != 29286)
            goto LABEL_431;
          goto LABEL_433;
        }
LABEL_434:
        memset(&__p, 0, sizeof(__p));
        if (!v93)
        {
LABEL_455:
          std::string::basic_string[abi:ne180100]<0>(&v125, ",");
          v114 = siri::dialogengine::StringStartsWith(&__p, (unsigned __int8 *)&v125);
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
          if (v114)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v115 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v115 = __p.__r_.__value_.__l.__size_;
            std::string::basic_string(&v125, &__p, 1uLL, v115, (std::allocator<char> *)&v138);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p = v125;
          }
          std::string::basic_string[abi:ne180100]<0>(&v138, ",,");
          std::string::basic_string[abi:ne180100]<0>(&v121, ",");
          siri::dialogengine::StringReplace((uint64_t)&__p, (char *)&v138, (uint64_t)&v121, 0, &v125);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = v125;
          *((_BYTE *)&v125.__r_.__value_.__s + 23) = 0;
          v125.__r_.__value_.__s.__data_[0] = 0;
          if (v122 < 0)
            operator delete(v121);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v138.__r_.__value_.__l.__data_);
          siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v125, &__str, &__p);
        }
        v105 = 0;
        v106 = SHIBYTE(__str.__r_.__value_.__r.__words[2]) >> 31;
        v107 = MEMORY[0x1E0C80978];
        while (1)
        {
          if ((v106 & 1) != 0)
            v108 = (std::string *)__str.__r_.__value_.__r.__words[0];
          else
            v108 = &__str;
          v109 = v108->__r_.__value_.__s.__data_[v105];
          if (v109 < 0)
            goto LABEL_447;
          if ((*(_DWORD *)(v107 + 4 * v109 + 60) & 0x100) != 0)
            goto LABEL_448;
          v110 = v91 >= 0 ? &__str : (std::string *)__str.__r_.__value_.__r.__words[0];
          v111 = v110->__r_.__value_.__s.__data_[v105];
          if (v111 < 0)
            goto LABEL_447;
          if ((*(_DWORD *)(v107 + 4 * v111 + 60) & 0x400) != 0)
          {
LABEL_448:
            std::string::append(&__p, " ");
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v112 = &__str;
            else
              v112 = (std::string *)__str.__r_.__value_.__r.__words[0];
            std::string::push_back(&__p, v112->__r_.__value_.__s.__data_[v105]);
            goto LABEL_452;
          }
          if (v111 != 43)
LABEL_447:
            std::string::append(&__p, ",");
LABEL_452:
          ++v105;
          v91 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          v106 = SHIBYTE(__str.__r_.__value_.__r.__words[2]) >> 31;
          v113 = __str.__r_.__value_.__l.__size_;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v113 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if (v105 >= v113)
            goto LABEL_455;
        }
      }
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) != 2)
        goto LABEL_434;
      if (LOWORD(v124.__r_.__value_.__l.__data_) != 28261 && LOWORD(v124.__r_.__value_.__l.__data_) != 29286)
      {
        v104 = &v124;
LABEL_431:
        if (LOWORD(v104->__r_.__value_.__l.__data_) != 29300)
          v103 = 1;
      }
LABEL_433:
      if ((v103 & 1) != 0)
        goto LABEL_434;
      std::string::basic_string[abi:ne180100]<0>(&v125, "tn=phone");
      std::string::basic_string[abi:ne180100]<0>(&v138, "tn=normal");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      siri::dialogengine::AddTTSCodes(a3, (uint64_t)&v125, (uint64_t)&v138, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v138.__r_.__value_.__l.__data_);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        v77 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_300;
      }
LABEL_480:
      v6 = 1;
LABEL_481:
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      {
        v89 = (void *)v117.__r_.__value_.__r.__words[0];
LABEL_378:
        operator delete(v89);
      }
LABEL_482:
      if (v120 < 0)
        operator delete(v118);
      return v6;
    case 7:
      if (*(_DWORD *)v118 == 1852794992 && *(_DWORD *)((char *)v118 + 3) == 1701668206)
      {
LABEL_164:
        std::string::basic_string[abi:ne180100]<0>(&v138, "alphabet");
        siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v138, &v125);
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v138.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&__str, "ph");
        siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&__str, &v138);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v43 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
        if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v43 = v125.__r_.__value_.__l.__size_;
        if (!v43)
          goto LABEL_197;
        v44 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v44 = v138.__r_.__value_.__l.__size_;
        if (!v44)
        {
LABEL_197:
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML phoneme element requires alphabet and ph attributes.", v42);
LABEL_373:
          v6 = 0;
          goto LABEL_374;
        }
        std::operator+<char>();
        std::string::basic_string[abi:ne180100]<0>(&v124, "toi=orth");
        siri::dialogengine::AddTTSCodes(a3, (uint64_t)&__str, (uint64_t)&v124, (uint64_t)&v138);
        goto LABEL_175;
      }
      if ((v120 & 0x80) == 0)
      {
        if (v120 != 5)
        {
          if (v120 != 7)
            return 0;
LABEL_46:
          v13 = (int *)&v118;
          goto LABEL_144;
        }
LABEL_22:
        if ((_DWORD)v118 != 1768191329 || BYTE4(v118) != 111)
          return 0;
LABEL_149:
        std::string::basic_string[abi:ne180100]<0>(&v138, "src");
        siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v138, &v125);
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v138.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&__str, "apple:overlap");
        siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&__str, &v138);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v38 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
        if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v38 = v125.__r_.__value_.__l.__size_;
        v6 = v38 != 0;
        if (!v38)
        {
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML audio source element missing.", v37);
          goto LABEL_374;
        }
        v39 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v39 = v138.__r_.__value_.__l.__size_;
        if (v39 && siri::dialogengine::StringToBool(&v138))
        {
          std::operator+<char>();
          v40 = std::string::append(&v124, "&overlap");
          v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          std::string::basic_string[abi:ne180100]<0>(&v121, "");
          siri::dialogengine::AddTTSCodes(a3, (uint64_t)&__str, (uint64_t)&__p, (uint64_t)&v121);
          if (v122 < 0)
            operator delete(v121);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_334;
        }
        goto LABEL_329;
      }
LABEL_135:
      if (v119 == 5)
      {
        if (*(_DWORD *)v118 == 1768191329 && *((_BYTE *)v118 + 4) == 111)
          goto LABEL_149;
        if ((v120 & 0x80) == 0)
          return 0;
      }
      if (v119 != 7)
      {
LABEL_148:
        v6 = 0;
        goto LABEL_482;
      }
      v13 = (int *)v118;
LABEL_144:
      v34 = *v13;
      v35 = *(int *)((char *)v13 + 3);
      if (v34 != 1936683632 || v35 != 2036625267)
        goto LABEL_148;
      std::string::basic_string[abi:ne180100]<0>(&v138, "rate");
      siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v138, &v125);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v138.__r_.__value_.__l.__data_);
      v45 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v45 = v125.__r_.__value_.__l.__size_;
      if (v45)
      {
        std::string::basic_string[abi:ne180100]<0>(&v138, "%");
        v47 = siri::dialogengine::StringEndsWith(&v125, (unsigned __int8 *)&v138);
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v138.__r_.__value_.__l.__data_);
        if (v47)
        {
          siri::dialogengine::StringTrim("%", &v125, &__str);
          v48 = std::string::insert(&__str, 0, "rate=");
          v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v124, "rate=100");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::AddTTSCodes(a3, (uint64_t)&v138, (uint64_t)&v124, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v138.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v50 = 1;
LABEL_238:
          std::string::basic_string[abi:ne180100]<0>(&__str, "pitch");
          siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&__str, &v138);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v57 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v57 = v138.__r_.__value_.__l.__size_;
          if (v57)
          {
            std::string::basic_string[abi:ne180100]<0>(&__str, "%");
            v59 = siri::dialogengine::StringEndsWith(&v138, (unsigned __int8 *)&__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (v59)
            {
              siri::dialogengine::StringTrim("%", &v138, &__str);
              v60 = siri::dialogengine::StringToInt(&__str, 0, 0) + 100;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              std::to_string(&v124, v60);
              v61 = std::string::insert(&v124, 0, "pitch=");
              v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v62;
              v61->__r_.__value_.__l.__size_ = 0;
              v61->__r_.__value_.__r.__words[2] = 0;
              v61->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&__p, "pitch=100");
              std::string::basic_string[abi:ne180100]<0>(&v121, "");
              siri::dialogengine::AddTTSCodes(a3, (uint64_t)&__str, (uint64_t)&__p, (uint64_t)&v121);
              if (v122 < 0)
                operator delete(v121);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v124.__r_.__value_.__l.__data_);
              v50 = 1;
            }
            else
            {
              siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML prosody pitch attribute should be in the format +{n}%% or -{n}%%.", v58);
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&v124, "volume");
          siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v124, &__str);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          v64 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v64 = __str.__r_.__value_.__l.__size_;
          if (!v64)
            goto LABEL_286;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            if (__str.__r_.__value_.__l.__size_ == 6)
            {
              v65 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_268:
              v66 = (int)v65->__r_.__value_.__l.__data_;
              v67 = WORD2(v65->__r_.__value_.__r.__words[0]);
              if (v66 == 1701603699 && v67 == 29806)
              {
                std::string::basic_string[abi:ne180100]<0>(&v124, "vol=0");
                std::string::basic_string[abi:ne180100]<0>(&__p, "vol=80");
                std::string::basic_string[abi:ne180100]<0>(&v121, "");
                siri::dialogengine::AddTTSCodes(a3, (uint64_t)&v124, (uint64_t)&__p, (uint64_t)&v121);
                if (v122 < 0)
                  operator delete(v121);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_352;
                v75 = (void *)v124.__r_.__value_.__r.__words[0];
                goto LABEL_351;
              }
            }
          }
          else if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 6)
          {
            v65 = &__str;
            goto LABEL_268;
          }
          std::string::basic_string[abi:ne180100]<0>(&v124, "dB");
          v70 = siri::dialogengine::StringEndsWith(&__str, (unsigned __int8 *)&v124);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          if (v70)
          {
            siri::dialogengine::StringTrim("dB", &__str, &v124);
            v71 = (double)(int)siri::dialogengine::StringToInt(&v124, 0, 0);
            if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v124.__r_.__value_.__l.__data_);
            v72 = __exp10(v71 / 20.0);
            std::to_string(&__p, llround(v72 * 80.0));
            v73 = std::string::insert(&__p, 0, "vol=");
            v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
            v124.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v74;
            v73->__r_.__value_.__l.__size_ = 0;
            v73->__r_.__value_.__r.__words[2] = 0;
            v73->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v121, "vol=80");
            std::string::basic_string[abi:ne180100]<0>(&v117, "");
            siri::dialogengine::AddTTSCodes(a3, (uint64_t)&v124, (uint64_t)&v121, (uint64_t)&v117);
            if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v117.__r_.__value_.__l.__data_);
            if (v122 < 0)
              operator delete(v121);
            if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v124.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_352;
            v75 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_351:
            operator delete(v75);
LABEL_352:
            v6 = 1;
            goto LABEL_353;
          }
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML prosody volume attribute should be in the format {n}dB.", v69);
LABEL_286:
          if (!v50)
          {
            siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML prosody element requires rate, volume, or pitch attributes.", v63);
            v6 = 0;
            goto LABEL_353;
          }
          goto LABEL_352;
        }
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"SSML prosody rate attribute should be in the format {n}%%.", v46);
      }
      v50 = 0;
      goto LABEL_238;
    case 8:
      if (*(_QWORD *)v118 != 0x7369736168706D65)
        goto LABEL_135;
LABEL_65:
      memset(&v125, 0, sizeof(v125));
      std::string::basic_string[abi:ne180100]<0>(&v124, "level");
      siri::dialogengine::ChunkText::GetAttribute(a2, (uint64_t)&v124, &__str);
      siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)&v138);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      if ((*((_BYTE *)&v138.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (v138.__r_.__value_.__l.__size_ != 4 || *(_DWORD *)v138.__r_.__value_.__l.__data_ != 1701736302)
        {
          if (v138.__r_.__value_.__l.__size_ == 7)
          {
            if (*(_DWORD *)v138.__r_.__value_.__l.__data_ == 1969513842
              && *(_DWORD *)(v138.__r_.__value_.__r.__words[0] + 3) == 1684366197)
            {
              goto LABEL_307;
            }
            if ((*((_BYTE *)&v138.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_309;
          }
          if (v138.__r_.__value_.__l.__size_ == 8)
          {
            v17 = (std::string *)v138.__r_.__value_.__r.__words[0];
LABEL_222:
            if (v17->__r_.__value_.__r.__words[0] == 0x6574617265646F6DLL)
            {
              v55 = "2";
              goto LABEL_325;
            }
          }
LABEL_309:
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v138, "strong"))
            goto LABEL_326;
          v55 = "3";
LABEL_325:
          MEMORY[0x1C3B8D53C](&v125, v55);
LABEL_326:
          v81 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
          if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v81 = v125.__r_.__value_.__l.__size_;
          v6 = v81 != 0;
          if (!v81)
          {
            std::operator+<char>();
            v82 = std::string::append(&v124, "'");
            v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v83;
            v82->__r_.__value_.__l.__size_ = 0;
            v82->__r_.__value_.__r.__words[2] = 0;
            v82->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 1u);
LABEL_334:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_374;
            v84 = (void *)v124.__r_.__value_.__r.__words[0];
            goto LABEL_355;
          }
LABEL_329:
          std::operator+<char>();
          std::string::basic_string[abi:ne180100]<0>(&v124, "");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::AddTTSCodes(a3, (uint64_t)&__str, (uint64_t)&v124, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
LABEL_353:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            v84 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_355:
            operator delete(v84);
          }
LABEL_374:
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v138.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_482;
          v89 = (void *)v125.__r_.__value_.__r.__words[0];
          goto LABEL_378;
        }
      }
      else
      {
        if (HIBYTE(v138.__r_.__value_.__r.__words[2]) != 4)
        {
          if (HIBYTE(v138.__r_.__value_.__r.__words[2]) != 7)
          {
            if (HIBYTE(v138.__r_.__value_.__r.__words[2]) == 8)
            {
              v17 = &v138;
              goto LABEL_222;
            }
            goto LABEL_309;
          }
          if (LODWORD(v138.__r_.__value_.__l.__data_) != 1969513842
            || *(_DWORD *)((char *)v138.__r_.__value_.__r.__words + 3) != 1684366197)
          {
            goto LABEL_309;
          }
LABEL_307:
          v55 = "1";
          goto LABEL_325;
        }
        if (LODWORD(v138.__r_.__value_.__l.__data_) != 1701736302)
          goto LABEL_309;
      }
      v55 = "0";
      goto LABEL_325;
    default:
      goto LABEL_135;
  }
}

void sub_1BFA798DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 105) < 0)
    operator delete(*(void **)(v47 - 128));
  if (a47 < 0)
    operator delete(a42);
  if (a40 < 0)
    operator delete(a35);
  if (*(char *)(v47 - 137) < 0)
    operator delete(*(void **)(v47 - 160));
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::AddTTSCodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  std::string v14;
  void *v15[2];

  v4 = *(unsigned __int8 *)(a4 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a4 + 8);
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "");
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v15, &v14, (const std::string *)a4);
  }
  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "");
    std::operator+<char>();
    v7 = std::string::append(&v12, "\\");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v15, &v14, &v13);
  }
  v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a3 + 8);
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "");
    std::operator+<char>();
    v10 = std::string::append(&v12, "\\");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v15, &v14, &v13);
  }
}

void sub_1BFA7A3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  siri::dialogengine::SpeakableString::~SpeakableString(&a29);
  _Unwind_Resume(a1);
}

siri::dialogengine::ChunkText *std::allocate_shared[abi:ne180100]<siri::dialogengine::ChunkText,std::allocator<siri::dialogengine::ChunkText>,siri::dialogengine::SpeakableString,void>(siri::dialogengine::ChunkText **a1, const std::string *a2)
{
  _QWORD *v4;
  siri::dialogengine::ChunkText *result;

  v4 = operator new(0xE0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E7939C98;
  result = siri::dialogengine::ChunkText::ChunkText((siri::dialogengine::ChunkText *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (siri::dialogengine::ChunkText *)v4;
  return result;
}

void sub_1BFA7A538(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7939C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ChunkText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7939C98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ChunkText>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::insert(_QWORD *result, unint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  int64x2_t v40;
  char *v41;
  _QWORD *v42;

  v5 = result;
  v6 = result[1];
  v8 = result + 2;
  v7 = result[2];
  if (v6 >= v7)
  {
    v9 = *result;
    v10 = ((uint64_t)(v6 - *result) >> 4) + 1;
    if (v10 >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v11 = a2 - v9;
    v12 = (uint64_t)(a2 - v9) >> 4;
    v13 = v7 - v9;
    if (v13 >> 3 > v10)
      v10 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v10;
    v38 = v8;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v14);
    else
      v15 = 0;
    v19 = (uint64_t *)(v14 + 16 * v12);
    v35 = (char *)v14;
    *(_QWORD *)&v36 = v19;
    *((_QWORD *)&v36 + 1) = v19;
    v37 = (char *)(v14 + 16 * v15);
    if (v12 == v15)
    {
      if (v11 < 1)
      {
        if (v9 == a2)
          v21 = 1;
        else
          v21 = v11 >> 3;
        v42 = v8;
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v21);
        v24 = v36;
        v25 = *((_QWORD *)&v36 + 1) - v36;
        if (*((_QWORD *)&v36 + 1) == (_QWORD)v36)
        {
          v30 = vdupq_n_s64(v36);
          v27 = (unint64_t)&v22[16 * (v21 >> 2)];
        }
        else
        {
          v26 = v25 >> 4;
          v27 = (unint64_t)&v22[16 * (v21 >> 2) + (v25 & 0xFFFFFFFFFFFFFFF0)];
          v28 = 16 * v26;
          v29 = &v22[16 * (v21 >> 2)];
          do
          {
            *(_OWORD *)v29 = *(_OWORD *)v24;
            v29 += 16;
            *(_QWORD *)v24 = 0;
            *(_QWORD *)(v24 + 8) = 0;
            v24 += 16;
            v28 -= 16;
          }
          while (v28);
          v30 = (int64x2_t)v36;
        }
        v31 = v37;
        v39 = v35;
        v35 = v22;
        *(_QWORD *)&v36 = &v22[16 * (v21 >> 2)];
        v40 = v30;
        *((_QWORD *)&v36 + 1) = v27;
        v37 = &v22[16 * v23];
        v41 = v31;
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v39);
        v19 = (uint64_t *)*((_QWORD *)&v36 + 1);
      }
      else
      {
        v20 = v12 + 2;
        if (v12 >= -1)
          v20 = v12 + 1;
        v19 -= 2 * (v20 >> 1);
        *(_QWORD *)&v36 = v19;
        *((_QWORD *)&v36 + 1) = v19;
      }
    }
    *v19 = *a3;
    v32 = a3[1];
    v19[1] = v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      v19 = (uint64_t *)*((_QWORD *)&v36 + 1);
    }
    *((_QWORD *)&v36 + 1) = v19 + 2;
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(v5, &v35, (_QWORD *)a2);
    return (_QWORD *)std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v35);
  }
  else if (a2 == v6)
  {
    v16 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    result[1] = a2 + 16;
  }
  else
  {
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__move_range((uint64_t)result, a2, v6, (char *)(a2 + 16));
    if (a2 <= (unint64_t)a3)
      a3 += 2 * (v5[1] > (unint64_t)a3);
    return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)a2, *a3, a3[1]);
  }
  return result;
}

void sub_1BFA7A7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::AddSonicResponse(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  uint64_t i;
  const char *v8;
  unint64_t PatternState;
  siri::dialogengine::PatternContext *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 *OptionalBooleanParameter;
  int v19;
  char *v20;
  int v21;
  size_t v22;
  std::string *v23;
  const void *v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  int v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  char v36;
  uint64_t v37;
  size_t v38;
  std::string *p_p;
  const void *p_lpsrc;
  int v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  std::string v45;
  std::string v46;
  std::string v47;
  void *lpsrc;
  std::__shared_weak_count *v49;
  unsigned __int8 v50;
  siri::dialogengine::PatternContext *v51;
  std::__shared_weak_count *v52;
  std::string v53;
  uint64_t v54;
  char *v55;
  void **v56;
  __int128 v57;
  std::string __p;
  std::string v59;
  void *v60;
  char v61;
  void *v62[2];
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  int v69;
  char v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (_os_feature_enabled_impl())
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ar");
    std::string::basic_string[abi:ne180100]<0>(&v59, "he");
    std::string::basic_string[abi:ne180100]<0>(&v60, "ms");
    std::string::basic_string[abi:ne180100]<0>(v62, "th");
    std::set<std::string>::set[abi:ne180100](&v54, (const void **)&__p.__r_.__value_.__l.__data_, 4);
    for (i = 0; i != -12; i -= 3)
    {
      if (*(&v63 + i * 8) < 0)
        operator delete(v62[i]);
    }
    siri::dialogengine::Context::GetLocale((siri::dialogengine::Context *)a1, v6, (uint64_t)&__p);
    siri::dialogengine::GetLocaleLanguage(&v53);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (&v55 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v54, (const void **)&v53.__r_.__value_.__l.__data_))
    {
      PatternState = siri::dialogengine::Context::GetPatternState((siri::dialogengine::Context *)a1);
      v10 = (siri::dialogengine::PatternContext *)a1[433];
      v11 = (std::__shared_weak_count *)a1[434];
      v51 = v10;
      v52 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      if (v10 && siri::dialogengine::PatternContext::GetSonicResponseStatus(v10))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "device");
        siri::dialogengine::Context::FindVariable((uint64_t)a1, (uint64_t)&__p, &lpsrc);
        if (lpsrc)
        else
          v14 = 0;
        v15 = v49;
        if (v49)
        {
          v16 = (unint64_t *)&v49->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (!v14)
          goto LABEL_40;
        std::string::basic_string[abi:ne180100]<0>(&__p, "isWatch");
        OptionalBooleanParameter = (unsigned __int8 *)siri::dialogengine::GetOptionalBooleanParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)v14);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (OptionalBooleanParameter)
        {
          v19 = OptionalBooleanParameter[66];
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          if (v19)
            v20 = "<audio src=\"/watchSuccessSonicResponse\"";
          else
            v20 = "<audio src=\"/successSonicResponse\"";
        }
        else
        {
LABEL_40:
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          v20 = "<audio src=\"/successSonicResponse\"";
          *(_QWORD *)(a3 + 16) = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(&lpsrc, v20);
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p, (const siri::dialogengine::RequestInfo *)(a1 + 1));
        v21 = v69;
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p.__r_.__value_.__l.__data_);
        if (v21 == 3 || PatternState >= 2)
        {
          if ((v50 & 0x80u) == 0)
            v38 = v50;
          else
            v38 = (size_t)v49;
          p_p = &__p;
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v38 + 2);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (v38)
          {
            if ((v50 & 0x80u) == 0)
              p_lpsrc = &lpsrc;
            else
              p_lpsrc = lpsrc;
            memmove(p_p, p_lpsrc, v38);
          }
          strcpy((char *)p_p + v38, "/>");
          if (*(char *)(a3 + 23) < 0)
            operator delete(*(void **)a3);
          *(std::string *)a3 = __p;
        }
        else
        {
          if ((v50 & 0x80u) == 0)
            v22 = v50;
          else
            v22 = (size_t)v49;
          v23 = &v45;
          std::string::basic_string[abi:ne180100]((uint64_t)&v45, v22 + 1);
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v23 = (std::string *)v45.__r_.__value_.__r.__words[0];
          if (v22)
          {
            if ((v50 & 0x80u) == 0)
              v24 = &lpsrc;
            else
              v24 = lpsrc;
            memmove(v23, v24, v22);
          }
          *(_WORD *)((char *)&v23->__r_.__value_.__l.__data_ + v22) = 32;
          v25 = std::string::append(&v45, "apple:overlap=\"true\"");
          v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          v46.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          v27 = std::string::append(&v46, "/>");
          v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v47.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          v29 = std::string::append(&v47, "<break time=\"1000ms\"/>");
          v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          v31 = *(char *)(a2 + 23);
          if (v31 >= 0)
            v32 = (const std::string::value_type *)a2;
          else
            v32 = *(const std::string::value_type **)a2;
          if (v31 >= 0)
            v33 = *(unsigned __int8 *)(a2 + 23);
          else
            v33 = *(_QWORD *)(a2 + 8);
          v34 = std::string::append(&__p, v32, v33);
          v35 = v34->__r_.__value_.__r.__words[0];
          *(_QWORD *)&v57 = v34->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)&v57 + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
          v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(a3 + 23) < 0)
            operator delete(*(void **)a3);
          v37 = v57;
          *(_QWORD *)a3 = v35;
          *(_QWORD *)(a3 + 8) = v37;
          *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)&v57 + 7);
          *(_BYTE *)(a3 + 23) = v36;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v47.__r_.__value_.__l.__data_);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v45.__r_.__value_.__l.__data_);
        }
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p, (const siri::dialogengine::RequestInfo *)(a1 + 1));
        v41 = v71;
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p.__r_.__value_.__l.__data_);
        if (v41 == 2)
        {
          std::string::basic_string[abi:ne180100]<0>(&v47, "#escape-char#");
          std::string::basic_string[abi:ne180100]<0>(&__p, "\x1B\\");
          v42 = siri::dialogengine::StringContains((char **)a3, (char *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v42)
          {
            std::string::basic_string[abi:ne180100]<0>(&v46, "\x1B\\");
            siri::dialogengine::StringReplace(a3, (char *)&v46, (uint64_t)&v47, 0, &__p);
            if (*(char *)(a3 + 23) < 0)
              operator delete(*(void **)a3);
            *(std::string *)a3 = __p;
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
            __p.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v46.__r_.__value_.__l.__data_);
          }
          siri::dialogengine::ParseSpeakableString(a3, &v46);
          siri::dialogengine::ChunkList::Expand((uint64_t **)&v57, (siri::dialogengine::ChunkList *)&v46, (siri::dialogengine::Context *)a1);
          siri::dialogengine::ExpandToText((uint64_t)&__p, (uint64_t *)v57, *((uint64_t **)&v57 + 1));
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v45, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
          else
            v45 = v59;
          if (*(char *)(a3 + 23) < 0)
            operator delete(*(void **)a3);
          *(std::string *)a3 = v45;
          *((_BYTE *)&v45.__r_.__value_.__s + 23) = 0;
          v45.__r_.__value_.__s.__data_[0] = 0;
          if (v70 < 0)
            operator delete(v68);
          if (v67 < 0)
            operator delete(v66);
          if (v65 < 0)
            operator delete(v64);
          if (v63 < 0)
            operator delete(v62[0]);
          if (v61 < 0)
            operator delete(v60);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v56 = (void **)&v57;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v56);
          std::string::basic_string[abi:ne180100]<0>(&v45, "\x1B\\");
          siri::dialogengine::StringReplace(a3, (char *)&v47, (uint64_t)&v45, 0, &__p);
          if (*(char *)(a3 + 23) < 0)
            operator delete(*(void **)a3);
          *(std::string *)a3 = __p;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v45.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v47.__r_.__value_.__l.__data_);
        }
        if ((char)v50 < 0)
          operator delete(lpsrc);
        v11 = v52;
      }
      else if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      }
      if (v11)
      {
        v43 = (unint64_t *)&v11->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Sonic Response not supported by requested language; omitting it from response",
        v8);
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      }
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    std::__tree<std::string>::destroy((uint64_t)&v54, v55);
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
  }
}

void sub_1BFA7B040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,char *a44,uint64_t a45,char *a46,char a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a50);
  a46 = &a47;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  a50 = &a16;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a50);
  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v55 + 23) < 0)
    operator delete(*(void **)v55);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (a42 < 0)
    operator delete(a37);
  std::__tree<std::string>::destroy((uint64_t)&a43, a44);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_TextElement_TextElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", a4);
  SnippetUI::TextElement::TextElement((SnippetUI::TextElement *)&SnippetUI::_TextElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TextElement_default_instance_, v4);
  qword_1ED1D4F80 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED1D4F88 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1ED1D4F40 = (uint64_t)&SnippetUI::_TextElement_Font_default_instance_;
  unk_1ED1D4F48 = &SnippetUI::_TextElement_FontWeight_default_instance_;
  qword_1ED1D4F50 = (uint64_t)&SnippetUI::_Color_default_instance_;
  unk_1ED1D4F58 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D4F60 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
}

void InitDefaultsscc_info_TextElement_FontWeight_TextElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", a4);
  qword_1ED1D5698 = 0;
  unk_1ED1D56A0 = 0;
  SnippetUI::_TextElement_FontWeight_default_instance_ = (uint64_t)&off_1E7931410;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TextElement_FontWeight_default_instance_, v4);
}

void SnippetUI::TextElement_FontWeight::~TextElement_FontWeight(SnippetUI::TextElement_FontWeight *this)
{
  *(_QWORD *)this = &off_1E7931410;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E7931410;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7931410;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *SnippetUI::TextElement_FontWeight::New(SnippetUI::TextElement_FontWeight *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_FontWeight>(0);
}

_QWORD *SnippetUI::TextElement_FontWeight::New(SnippetUI::TextElement_FontWeight *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_FontWeight>(a2);
}

void SnippetUI::TextElement_FontWeight::Clear(SnippetUI::TextElement_FontWeight *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v1;
  char v2;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::TextElement_FontWeight *)((char *)this + 8);
  *((_DWORD *)v1 + 2) = 0;
  if ((v2 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
}

uint64_t SnippetUI::TextElement_FontWeight::IsInitialized(SnippetUI::TextElement_FontWeight *this)
{
  return 1;
}

char *SnippetUI::TextElement_FontWeight::ByteSizeLong(SnippetUI::TextElement_FontWeight *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TextElement_FontWeight *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v2, (_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v2;
  return (char *)v2;
}

uint64_t SnippetUI::TextElement_FontWeight::GetCachedSize(SnippetUI::TextElement_FontWeight *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *SnippetUI::TextElement_FontWeight::_InternalParse(SnippetUI::TextElement_FontWeight *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  google::protobuf::internal *v10;
  unint64_t v11;
  int v12;
  google::protobuf::internal *v14;

  v14 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v14, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v14;
      TagFallback = (google::protobuf::internal *)((char *)v14 + 1);
      v8 = (char *)*(unsigned __int8 *)v14;
      if ((*(char *)v14 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallback = (google::protobuf::internal *)((char *)v14 + 2);
LABEL_6:
        v14 = TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v14, v8);
      v14 = TagFallback;
      if (!TagFallback)
        return TagFallback;
LABEL_7:
      if ((_DWORD)v8 != 8)
        break;
      v10 = (google::protobuf::internal *)((char *)TagFallback + 1);
      LODWORD(v11) = *(unsigned __int8 *)TagFallback;
      if ((*(char *)TagFallback & 0x80000000) == 0)
        goto LABEL_17;
      v12 = *(char *)v10;
      v11 = v11 + (v12 << 7) - 128;
      if ((v12 & 0x80000000) == 0)
      {
        v10 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_17:
        v14 = v10;
        goto LABEL_18;
      }
      v14 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v11);
      if (!v14)
        return 0;
LABEL_18:
      *((_DWORD *)this + 4) = v11;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v14)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::TextElement_FontWeight::InternalSerializeWithCachedSizesToArray(SnippetUI::TextElement_FontWeight *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v6 = *((_DWORD *)this + 4);
    }
    *a2 = 8;
    if (v6 > 0x7F)
    {
      a2[1] = v6 | 0x80;
      v7 = (unint64_t)(int)v6 >> 7;
      if (v6 >> 14)
      {
        v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v9 = v8;
          *v8++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
        a2 = (char *)(v9 + 2);
        *v8 = v10;
      }
      else
      {
        a2[2] = v7;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v6;
      a2 += 2;
    }
  }
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v12 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::TextElement_FontWeight::CopyFrom(SnippetUI::TextElement_FontWeight *this, const google::protobuf::Message *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::TextElement_FontWeight *)((char *)this + 8);
    *((_DWORD *)v4 + 2) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::TextElement_FontWeight::MergeFrom(this, a2);
  }
}

void SnippetUI::TextElement_FontWeight::MergeFrom(SnippetUI::TextElement_FontWeight *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::TextElement_FontWeight *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 969);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::TextElement_FontWeight::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFA7B704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TextElement_FontWeight::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

uint64_t SnippetUI::TextElement_FontWeight::GetMetadata(SnippetUI::TextElement_FontWeight *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TextElement_2eproto);
  return qword_1EF582728;
}

void InitDefaultsscc_info_TextElement_Font_SystemFont_TextElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", a4);
  SnippetUI::_TextElement_Font_SystemFont_default_instance_ = (uint64_t)&off_1E7931290;
  unk_1ED1D57B0 = 0;
  qword_1ED1D57B8 = 0;
  unk_1ED1D57C0 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TextElement_Font_SystemFont_default_instance_, v4);
}

void SnippetUI::TextElement_Font_SystemFont::~TextElement_Font_SystemFont(SnippetUI::TextElement_Font_SystemFont *this)
{
  *(_QWORD *)this = &off_1E7931290;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E7931290;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7931290;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *SnippetUI::TextElement_Font_SystemFont::New(SnippetUI::TextElement_Font_SystemFont *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font_SystemFont>(0);
}

_QWORD *SnippetUI::TextElement_Font_SystemFont::New(SnippetUI::TextElement_Font_SystemFont *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font_SystemFont>(a2);
}

void SnippetUI::TextElement_Font_SystemFont::Clear(SnippetUI::TextElement_Font_SystemFont *this)
{
  char *v1;
  char v2;

  v2 = *((_BYTE *)this + 8);
  v1 = (char *)this + 8;
  *((_DWORD *)v1 + 4) = 0;
  *((_QWORD *)v1 + 1) = 0;
  if ((v2 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v1);
}

uint64_t SnippetUI::TextElement_Font_SystemFont::IsInitialized(SnippetUI::TextElement_Font_SystemFont *this)
{
  return 1;
}

char *SnippetUI::TextElement_Font_SystemFont::ByteSizeLong(SnippetUI::TextElement_Font_SystemFont *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const google::protobuf::UnknownFieldSet *v9;
  const google::protobuf::UnknownFieldSet *v10;

  v1 = 5;
  if (*((float *)this + 4) == 0.0)
    v1 = 0;
  v2 = 11;
  v3 = *((_DWORD *)this + 5);
  v4 = *((_DWORD *)this + 6);
  v5 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v3 >= 0)
    v2 = v5;
  v6 = v2 + v1;
  if (v3)
    v1 = v6;
  v7 = 11;
  v8 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v4 >= 0)
    v7 = v8;
  v9 = (const google::protobuf::UnknownFieldSet *)(v7 + v1);
  if (v4)
    v10 = v9;
  else
    v10 = (const google::protobuf::UnknownFieldSet *)v1;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TextElement_Font_SystemFont *)((char *)this + 8), v10, (_DWORD *)this + 7);
  *((_DWORD *)this + 7) = (_DWORD)v10;
  return (char *)v10;
}

uint64_t SnippetUI::TextElement_Font_SystemFont::GetCachedSize(SnippetUI::TextElement_Font_SystemFont *this)
{
  return *((unsigned int *)this + 7);
}

google::protobuf::internal *SnippetUI::TextElement_Font_SystemFont::_InternalParse(SnippetUI::TextElement_Font_SystemFont *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  char *TagFallback;
  char *v8;
  unsigned int v9;
  google::protobuf::internal *v12;
  unint64_t v13;
  int v14;
  google::protobuf::internal *v15;
  unint64_t v16;
  int v17;
  google::protobuf::internal *v19;

  v19 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v19, *((_DWORD *)a3 + 23)) & 1) != 0)return v19;
          TagFallback = (char *)v19 + 1;
          v8 = (char *)*(unsigned __int8 *)v19;
          if ((*(char *)v19 & 0x80000000) == 0)
            goto LABEL_6;
          v8 = (char *)(v8 + (*TagFallback << 7) - 128);
          if ((*TagFallback & 0x80000000) == 0)
          {
            TagFallback = (char *)v19 + 2;
LABEL_6:
            v19 = (google::protobuf::internal *)TagFallback;
            goto LABEL_7;
          }
          TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v19, v8);
          v19 = (google::protobuf::internal *)TagFallback;
          if (!TagFallback)
            return (google::protobuf::internal *)TagFallback;
LABEL_7:
          v9 = v8 >> 3;
          if (v8 >> 3 != 3)
            break;
          if (v8 != 24)
            goto LABEL_13;
          v12 = (google::protobuf::internal *)(TagFallback + 1);
          LODWORD(v13) = *TagFallback;
          if ((*TagFallback & 0x80000000) == 0)
            goto LABEL_23;
          v14 = *(char *)v12;
          v13 = v13 + (v14 << 7) - 128;
          if ((v14 & 0x80000000) == 0)
          {
            v12 = (google::protobuf::internal *)(TagFallback + 2);
LABEL_23:
            v19 = v12;
            goto LABEL_24;
          }
          v19 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v13);
          if (!v19)
            return 0;
LABEL_24:
          *((_DWORD *)this + 6) = v13;
        }
        if (v9 != 2)
          break;
        if (v8 != 16)
          goto LABEL_13;
        v15 = (google::protobuf::internal *)(TagFallback + 1);
        LODWORD(v16) = *TagFallback;
        if ((*TagFallback & 0x80000000) == 0)
          goto LABEL_29;
        v17 = *(char *)v15;
        v16 = v16 + (v17 << 7) - 128;
        if ((v17 & 0x80000000) == 0)
        {
          v15 = (google::protobuf::internal *)(TagFallback + 2);
LABEL_29:
          v19 = v15;
          goto LABEL_30;
        }
        v19 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v16);
        if (!v19)
          return 0;
LABEL_30:
        *((_DWORD *)this + 5) = v16;
      }
      if (v9 != 1 || v8 != 13)
        break;
      *((_DWORD *)this + 4) = *(_DWORD *)TagFallback;
      v19 = (google::protobuf::internal *)(TagFallback + 4);
    }
LABEL_13:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v19 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, (google::protobuf::internal::InternalMetadataWithArena *)TagFallback, a3, v6);
    if (!v19)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return (google::protobuf::internal *)TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::TextElement_Font_SystemFont::InternalSerializeWithCachedSizesToArray(SnippetUI::TextElement_Font_SystemFont *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  if (*((float *)this + 4) != 0.0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v6 = *((_DWORD *)this + 4);
    }
    else
    {
      v6 = *((_DWORD *)this + 4);
    }
    *a2 = 13;
    *(_DWORD *)(a2 + 1) = v6;
    a2 += 5;
  }
  v7 = *((_DWORD *)this + 5);
  if (v7)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v7 = *((_DWORD *)this + 5);
    }
    *a2 = 16;
    if (v7 > 0x7F)
    {
      a2[1] = v7 | 0x80;
      v8 = (unint64_t)(int)v7 >> 7;
      if (v7 >> 14)
      {
        v9 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v10 = v9;
          *v9++ = v8 | 0x80;
          v11 = v8 >> 7;
          v12 = v8 >> 14;
          v8 >>= 7;
        }
        while (v12);
        a2 = (char *)(v10 + 2);
        *v9 = v11;
      }
      else
      {
        a2[2] = v8;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v7;
      a2 += 2;
    }
  }
  v13 = *((_DWORD *)this + 6);
  if (v13)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v13 = *((_DWORD *)this + 6);
    }
    *a2 = 24;
    if (v13 > 0x7F)
    {
      a2[1] = v13 | 0x80;
      v14 = (unint64_t)(int)v13 >> 7;
      if (v13 >> 14)
      {
        v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v16 = v15;
          *v15++ = v14 | 0x80;
          v17 = v14 >> 7;
          v18 = v14 >> 14;
          v14 >>= 7;
        }
        while (v18);
        a2 = (char *)(v16 + 2);
        *v15 = v17;
      }
      else
      {
        a2[2] = v14;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v13;
      a2 += 2;
    }
  }
  v19 = *((_QWORD *)this + 1);
  if ((v19 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v19 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::TextElement_Font_SystemFont::CopyFrom(SnippetUI::TextElement_Font_SystemFont *this, const google::protobuf::Message *a2)
{
  char *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (char *)this + 8;
    *((_DWORD *)v4 + 4) = 0;
    *((_QWORD *)v4 + 1) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v4);
    SnippetUI::TextElement_Font_SystemFont::MergeFrom(this, a2);
  }
}

void SnippetUI::TextElement_Font_SystemFont::MergeFrom(SnippetUI::TextElement_Font_SystemFont *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::TextElement_Font_SystemFont *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 491);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::TextElement_Font_SystemFont::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFA7BD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TextElement_Font_SystemFont::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t SnippetUI::TextElement_Font_SystemFont::GetMetadata(SnippetUI::TextElement_Font_SystemFont *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TextElement_2eproto);
  return file_level_metadata_TextElement_2eproto;
}

uint64_t *SnippetUI::TextElement_Font_SystemFont::default_instance(SnippetUI::TextElement_Font_SystemFont *this)
{
  if (atomic_load(scc_info_TextElement_Font_SystemFont_TextElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TextElement_Font_SystemFont_TextElement_2eproto);
  return &SnippetUI::_TextElement_Font_SystemFont_default_instance_;
}

void SnippetUI::TextElement_Font_SystemFont::MergeFrom(SnippetUI::TextElement_Font_SystemFont *this, const SnippetUI::TextElement_Font_SystemFont *a2)
{
  std::string *v4;
  uint64_t v5;
  float v6;
  int v7;
  int v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 506);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement_Font_SystemFont *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((float *)a2 + 4);
  if (v6 != 0.0)
    *((float *)this + 4) = v6;
  v7 = *((_DWORD *)a2 + 5);
  if (v7)
    *((_DWORD *)this + 5) = v7;
  v8 = *((_DWORD *)a2 + 6);
  if (v8)
    *((_DWORD *)this + 6) = v8;
}

void sub_1BFA7BE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font_SystemFont>(google::protobuf::internal::ArenaImpl *this)
{
  _QWORD *result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement_Font_SystemFont>);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  *result = &off_1E7931290;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement_Font_SystemFont>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *SnippetUI::TextElement_FontWeight::default_instance(SnippetUI::TextElement_FontWeight *this)
{
  if (atomic_load(scc_info_TextElement_FontWeight_TextElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TextElement_FontWeight_TextElement_2eproto);
  return &SnippetUI::_TextElement_FontWeight_default_instance_;
}

void SnippetUI::TextElement_FontWeight::MergeFrom(SnippetUI::TextElement_FontWeight *this, const SnippetUI::TextElement_FontWeight *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  char v7;
  std::string v8[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 984);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement_FontWeight *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_DWORD *)a2 + 4);
  if (v6)
    *((_DWORD *)this + 4) = v6;
}

void sub_1BFA7BFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_FontWeight>(google::protobuf::internal::ArenaImpl *this)
{
  _QWORD *result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement_FontWeight>);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E7931410;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement_FontWeight>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_TextElement_Font_TextElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", a4);
  SnippetUI::TextElement_Font::TextElement_Font((SnippetUI::TextElement_Font *)&SnippetUI::_TextElement_Font_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TextElement_Font_default_instance_, v4);
  dword_1ED1D52A0 = 0;
  qword_1ED1D52A8 = (uint64_t)&SnippetUI::_TextElement_Font_SystemFont_default_instance_;
}

SnippetUI::TextElement_Font *SnippetUI::TextElement_Font::TextElement_Font(SnippetUI::TextElement_Font *this)
{
  *(_QWORD *)this = &off_1E7931350;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load(scc_info_TextElement_Font_TextElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TextElement_Font_TextElement_2eproto);
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1BFA7C118(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement_Font::~TextElement_Font(SnippetUI::TextElement_Font *this)
{
  SnippetUI::TextElement_Font::~TextElement_Font(this);
  JUMPOUT(0x1C3B8D890);
}

{
  int v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7931350;
  v2 = *((_DWORD *)this + 7);
  if (v2)
  {
    if (v2 == 2)
    {
      v3 = *((_QWORD *)this + 2);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    *((_DWORD *)this + 7) = 0;
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::TextElement_Font *SnippetUI::TextElement_Font::New(SnippetUI::TextElement_Font *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font>(0);
}

SnippetUI::TextElement_Font *SnippetUI::TextElement_Font::New(SnippetUI::TextElement_Font *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font>(a2);
}

void SnippetUI::TextElement_Font::Clear(SnippetUI::TextElement_Font *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  if (*((_DWORD *)this + 7) == 2)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::TextElement_Font *)((char *)this + 8);
  *((_DWORD *)v3 + 5) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

uint64_t SnippetUI::TextElement_Font::IsInitialized(SnippetUI::TextElement_Font *this)
{
  return 1;
}

char *SnippetUI::TextElement_Font::ByteSizeLong(SnippetUI::TextElement_Font *this)
{
  int v2;
  int v3;
  uint64_t v4;
  char *v5;

  v2 = *((_DWORD *)this + 7);
  if (v2 == 2)
  {
    v5 = SnippetUI::TextElement_Font_SystemFont::ByteSizeLong(*((SnippetUI::TextElement_Font_SystemFont **)this + 2));
    v4 = (uint64_t)&v5[((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1];
  }
  else if (v2 == 1)
  {
    v3 = *((_DWORD *)this + 4);
    if (v3 < 0)
      v4 = 11;
    else
      v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v4 = 0;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TextElement_Font *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v4, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v4;
  return (char *)v4;
}

uint64_t SnippetUI::TextElement_Font::GetCachedSize(SnippetUI::TextElement_Font *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::TextElement_Font::_InternalParse(SnippetUI::TextElement_Font *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  SnippetUI::TextElement_Font_SystemFont *v11;
  google::protobuf::internal *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  char *SizeFallback;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  google::protobuf::internal *v26;
  int v27;
  int v28;
  google::protobuf::internal *v30;

  v30 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) != 0)return v30;
        TagFallback = (google::protobuf::internal *)((char *)v30 + 1);
        v8 = (char *)*(unsigned __int8 *)v30;
        if ((*(char *)v30 & 0x80000000) == 0)
          goto LABEL_6;
        v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
          v30 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v8);
        v30 = TagFallback;
        if (!TagFallback)
          return TagFallback;
LABEL_7:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 18)
          goto LABEL_12;
        if (*((_DWORD *)this + 7) == 2)
        {
          v11 = (SnippetUI::TextElement_Font_SystemFont *)*((_QWORD *)this + 2);
        }
        else
        {
          *((_DWORD *)this + 7) = 2;
          v11 = (SnippetUI::TextElement_Font_SystemFont *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font_SystemFont>(0);
          *((_QWORD *)this + 2) = v11;
          TagFallback = v30;
        }
        v18 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            return 0;
          v19 = SizeFallback;
          v18 = v21;
        }
        else
        {
          v19 = (char *)TagFallback + 1;
        }
        v22 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v19, v18);
        v23 = *((_DWORD *)a3 + 22);
        v24 = __OFSUB__(v23--, 1);
        *((_DWORD *)a3 + 22) = v23;
        if (v23 < 0 != v24)
          return 0;
        v25 = v22;
        v26 = SnippetUI::TextElement_Font_SystemFont::_InternalParse(v11, (google::protobuf::internal *)v19, a3);
        if (!v26)
          return 0;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v27 = *((_DWORD *)a3 + 7) + v25;
        *((_DWORD *)a3 + 7) = v27;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v27 & (v27 >> 31));
        v30 = v26;
      }
      if (v8 >> 3 != 1 || v8 != 8)
        break;
      v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
      v13 = *(unsigned __int8 *)TagFallback;
      if ((*(char *)TagFallback & 0x80000000) == 0)
        goto LABEL_24;
      v14 = *(char *)v12;
      v15 = v13 + (v14 << 7);
      v13 = v15 - 128;
      if ((v14 & 0x80000000) == 0)
      {
        v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_24:
        v30 = v12;
        goto LABEL_25;
      }
      v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, (v15 - 128));
      if (!v30)
        return 0;
      v13 = v28;
LABEL_25:
      v16 = *((_DWORD *)this + 7);
      if (v16 != 1)
      {
        if (v16 == 2)
        {
          v17 = *((_QWORD *)this + 2);
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
        *((_DWORD *)this + 7) = 1;
      }
      *((_DWORD *)this + 4) = v13;
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v30 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v30)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::TextElement_Font::InternalSerializeWithCachedSizesToArray(SnippetUI::TextElement_Font *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  SnippetUI::TextElement_Font_SystemFont *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int8 *v25;

  v6 = *((_DWORD *)this + 7);
  if (v6 == 1)
  {
    if (*(_QWORD *)a3 > (unint64_t)a2
      || (v25 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2),
          a2 = (char *)v25,
          *((_DWORD *)this + 7) == 1))
    {
      v7 = *((_DWORD *)this + 4);
      *a2 = 8;
      v8 = (unsigned __int8 *)(a2 + 1);
      if (v7 > 0x7F)
      {
        v9 = v7;
        *v8 = v7 | 0x80;
        v10 = (unint64_t)(int)v7 >> 7;
        if (v9 >> 14)
        {
          v11 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          a2 = (char *)(v12 + 2);
          *v11 = v13;
        }
        else
        {
          a2[2] = v10;
          a2 += 3;
        }
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v7) = 0;
      *v25 = 8;
      v8 = v25 + 1;
    }
    *v8 = v7;
    a2 = (char *)(v8 + 1);
LABEL_10:
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = (SnippetUI::TextElement_Font_SystemFont *)*((_QWORD *)this + 2);
    *a2 = 18;
    v16 = *((_DWORD *)v15 + 7);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v20 = v19;
          *v19++ = v18 | 0x80;
          v21 = v18 >> 7;
          v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        v17 = v20 + 2;
        *v19 = v21;
      }
      else
      {
        a2[2] = v18;
        v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::TextElement_Font_SystemFont::InternalSerializeWithCachedSizesToArray(v15, (char *)v17, a3, a4);
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v23 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::TextElement_Font::CopyFrom(SnippetUI::TextElement_Font *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::TextElement_Font::Clear(this);
    SnippetUI::TextElement_Font::MergeFrom(this, a2);
  }
}

void SnippetUI::TextElement_Font::MergeFrom(SnippetUI::TextElement_Font *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::TextElement_Font *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 771);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::TextElement_Font::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFA7C754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TextElement_Font::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::TextElement_Font::GetMetadata(SnippetUI::TextElement_Font *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TextElement_2eproto);
  return qword_1EF582718;
}

void *SnippetUI::TextElement_Font::default_instance(SnippetUI::TextElement_Font *this)
{
  if (atomic_load(scc_info_TextElement_Font_TextElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TextElement_Font_TextElement_2eproto);
  return &SnippetUI::_TextElement_Font_default_instance_;
}

void SnippetUI::TextElement_Font::MergeFrom(SnippetUI::TextElement_Font *this, const SnippetUI::TextElement_Font *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  SnippetUI::TextElement_Font_SystemFont *v7;
  int v8;
  int v9;
  uint64_t v10;
  const SnippetUI::TextElement_Font_SystemFont *v11;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 786);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement_Font *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_DWORD *)a2 + 7);
  if (v6 != 1)
  {
    if (v6 != 2)
      return;
    if (*((_DWORD *)this + 7) == 2)
    {
      v7 = (SnippetUI::TextElement_Font_SystemFont *)*((_QWORD *)this + 2);
    }
    else
    {
      *((_DWORD *)this + 7) = 2;
      v7 = (SnippetUI::TextElement_Font_SystemFont *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font_SystemFont>(0);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) != 2)
      {
        v11 = (const SnippetUI::TextElement_Font_SystemFont *)&SnippetUI::_TextElement_Font_SystemFont_default_instance_;
        goto LABEL_18;
      }
    }
    v11 = (const SnippetUI::TextElement_Font_SystemFont *)*((_QWORD *)a2 + 2);
LABEL_18:
    SnippetUI::TextElement_Font_SystemFont::MergeFrom(v7, v11);
    return;
  }
  v8 = *((_DWORD *)a2 + 4);
  v9 = *((_DWORD *)this + 7);
  if (v9 != 1)
  {
    if (v9 == 2)
    {
      v10 = *((_QWORD *)this + 2);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    *((_DWORD *)this + 7) = 1;
  }
  *((_DWORD *)this + 4) = v8;
}

void sub_1BFA7C8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::TextElement_Font *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::TextElement_Font *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::TextElement_Font *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement_Font>);
    SnippetUI::TextElement_Font::TextElement_Font(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::TextElement_Font *)operator new();
    SnippetUI::TextElement_Font::TextElement_Font(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFA7C988(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A3C407A2727C4);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement_Font>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::TextElement *SnippetUI::TextElement::TextElement(SnippetUI::TextElement *this)
{
  *(_QWORD *)this = &off_1E79314D0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (atomic_load(scc_info_TextElement_TextElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TextElement_TextElement_2eproto);
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 25) = 0;
  return this;
}

void sub_1BFA7CA8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedField<int>::~RepeatedField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement::~TextElement(SnippetUI::TextElement *this)
{
  SnippetUI::TextElement::~TextElement(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E79314D0;
  if (this != (SnippetUI::TextElement *)&SnippetUI::_TextElement_default_instance_)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 6);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 7);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 8);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 9);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (*((_DWORD *)this + 25))
    SnippetUI::TextElement::clear_value((uint64_t)this);
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::TextElement *SnippetUI::TextElement::New(SnippetUI::TextElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(0);
}

SnippetUI::TextElement *SnippetUI::TextElement::New(SnippetUI::TextElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(a2);
}

void SnippetUI::TextElement::Clear(SnippetUI::TextElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  google::protobuf::internal::InternalMetadataWithArena *v7;
  char v8;

  *((_DWORD *)this + 4) = 0;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 5) = 0;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 6) = 0;
  v4 = *((_QWORD *)this + 7);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 7) = 0;
  v5 = *((_QWORD *)this + 8);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 8) = 0;
  v6 = *((_QWORD *)this + 9);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  SnippetUI::TextElement::clear_value((uint64_t)this);
  v8 = *((_BYTE *)this + 8);
  v7 = (SnippetUI::TextElement *)((char *)this + 8);
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
}

uint64_t SnippetUI::TextElement::IsInitialized(SnippetUI::TextElement *this)
{
  return 1;
}

char *SnippetUI::TextElement::ByteSizeLong(SnippetUI::TextElement *this)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const google::protobuf::UnknownFieldSet *v10;
  SnippetUI::TextElement_Font *v11;
  char *v12;
  SnippetUI::TextElement_FontWeight *v13;
  char *v14;
  SnippetUI::Color *v15;
  char *v16;
  SnippetUI::OptionalBool *v17;
  char *v18;
  SnippetUI::OptionalBool *v19;
  char *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = (_DWORD *)((char *)this + 16);
  v3 = *((_DWORD *)this + 4);
  if (!v3)
  {
    v5 = 0;
LABEL_11:
    v9 = 0;
    v8 = 0;
    goto LABEL_14;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v2, v4);
    if (v6 < 0)
      v7 = 10;
    else
      v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    v5 += v7;
    ++v4;
  }
  while (v3 != v4);
  if (!v5)
    goto LABEL_11;
  if ((v5 & 0x80000000) != 0)
    v8 = 11;
  else
    v8 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v9 = v5;
LABEL_14:
  *((_DWORD *)this + 8) = v9;
  v10 = (const google::protobuf::UnknownFieldSet *)(v8 + v5);
  if (this != (SnippetUI::TextElement *)&SnippetUI::_TextElement_default_instance_)
  {
    v11 = (SnippetUI::TextElement_Font *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextElement_Font::ByteSizeLong(v11);
      v10 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v10
                                                          + 1
                                                          + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::TextElement_FontWeight *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::TextElement_FontWeight::ByteSizeLong(v13);
      v10 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v10
                                                          + 1
                                                          + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::Color *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::Color::ByteSizeLong(v15);
      v10 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v10
                                                          + 1
                                                          + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::OptionalBool::ByteSizeLong(v17);
      v10 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v10
                                                          + 1
                                                          + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::OptionalBool::ByteSizeLong(v19);
      v10 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v10
                                                          + 1
                                                          + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  v21 = *((_DWORD *)this + 20);
  if (v21)
  {
    if (v21 < 0)
      v22 = 11;
    else
      v22 = ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v10 = (const google::protobuf::UnknownFieldSet *)((char *)v10 + v22);
  }
  v23 = *((_DWORD *)this + 25);
  if (v23 == 2 || v23 == 1)
  {
    v24 = *((_QWORD *)this + 11);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v26 = *(_QWORD *)(v24 + 8);
    if ((v25 & 0x80u) == 0)
      v26 = v25;
    v10 = (const google::protobuf::UnknownFieldSet *)((char *)v10 + v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 1);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TextElement *)((char *)this + 8), v10, (_DWORD *)this + 24);
  *((_DWORD *)this + 24) = (_DWORD)v10;
  return (char *)v10;
}

uint64_t SnippetUI::TextElement::GetCachedSize(SnippetUI::TextElement *this)
{
  return *((unsigned int *)this + 24);
}

google::protobuf::internal *SnippetUI::TextElement::_InternalParse(SnippetUI::TextElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  google::protobuf::internal *v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal::ParseContext *v9;
  google::protobuf::internal *TagFallback;
  char *v11;
  std::string *v12;
  SnippetUI::TextElement_Font *v13;
  unsigned int v14;
  char *v15;
  SnippetUI::TextElement_FontWeight *v16;
  unsigned int v17;
  char *v18;
  SnippetUI::Color *v19;
  char *v20;
  SnippetUI::OptionalBool *v21;
  unint64_t v22;
  google::protobuf::internal *v23;
  int v24;
  std::string::value_type *v25;
  google::protobuf::internal::ParseContext *v26;
  char *v27;
  char *SizeFallback;
  unsigned int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  google::protobuf::internal *v34;
  char *v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  google::protobuf::internal *v40;
  int v41;
  int v42;
  BOOL v43;
  google::protobuf::internal *v45;

  v45 = a2;
  v5 = (SnippetUI::TextElement *)((char *)this + 16);
  v6 = (std::string **)((char *)this + 88);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v45, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v45;
    TagFallback = (google::protobuf::internal *)((char *)v45 + 1);
    v11 = (char *)*(unsigned __int8 *)v45;
    if ((*(char *)v45 & 0x80000000) == 0)
      goto LABEL_6;
    v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v45 + 2);
LABEL_6:
      v45 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v45, v11);
    v45 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10)
          goto LABEL_70;
        if (*((_DWORD *)this + 25) == 1)
        {
          v12 = *v6;
          if (*v6 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
LABEL_49:
            v25 = (std::string::value_type *)TagFallback;
            v26 = a3;
            v27 = "SnippetUI.TextElement.plain";
            goto LABEL_53;
          }
        }
        else
        {
          SnippetUI::TextElement::clear_value((uint64_t)this);
          *((_DWORD *)this + 25) = 1;
          *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v6;
        TagFallback = v45;
        goto LABEL_49;
      case 2u:
        if (v11 != 18)
          goto LABEL_70;
        if (*((_DWORD *)this + 25) == 2)
        {
          v12 = *v6;
          if (*v6 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_52;
        }
        else
        {
          SnippetUI::TextElement::clear_value((uint64_t)this);
          *((_DWORD *)this + 25) = 2;
          *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v6;
        TagFallback = v45;
LABEL_52:
        v25 = (std::string::value_type *)TagFallback;
        v26 = a3;
        v27 = "SnippetUI.TextElement.attributed";
LABEL_53:
        v20 = google::protobuf::internal::InlineGreedyStringParserUTF8(v12, v25, (uint64_t)v26, (google::protobuf::internal *)v27);
        goto LABEL_75;
      case 3u:
        if (v11 != 26)
          goto LABEL_70;
        v13 = (SnippetUI::TextElement_Font *)*((_QWORD *)this + 5);
        if (!v13)
        {
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font>(0);
          *((_QWORD *)this + 5) = v13;
          TagFallback = v45;
        }
        v14 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            return 0;
          v15 = SizeFallback;
          v14 = v29;
        }
        else
        {
          v15 = (char *)TagFallback + 1;
        }
        v30 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v15, v14);
        v31 = *((_DWORD *)a3 + 22);
        v32 = __OFSUB__(v31--, 1);
        *((_DWORD *)a3 + 22) = v31;
        if (v31 < 0 != v32)
          return 0;
        v33 = v30;
        v34 = SnippetUI::TextElement_Font::_InternalParse(v13, (google::protobuf::internal *)v15, a3);
        if (!v34)
          return 0;
        goto LABEL_63;
      case 4u:
        if (v11 != 34)
          goto LABEL_70;
        v16 = (SnippetUI::TextElement_FontWeight *)*((_QWORD *)this + 6);
        if (!v16)
        {
          v16 = (SnippetUI::TextElement_FontWeight *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_FontWeight>(0);
          *((_QWORD *)this + 6) = v16;
          TagFallback = v45;
        }
        v17 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v35 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v35)
            return 0;
          v18 = v35;
          v17 = v36;
        }
        else
        {
          v18 = (char *)TagFallback + 1;
        }
        v37 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v18, v17);
        v38 = *((_DWORD *)a3 + 22);
        v32 = __OFSUB__(v38--, 1);
        *((_DWORD *)a3 + 22) = v38;
        if (v38 < 0 != v32)
          return 0;
        v33 = v37;
        v34 = SnippetUI::TextElement_FontWeight::_InternalParse(v16, (google::protobuf::internal *)v18, a3);
        if (!v34)
          return 0;
LABEL_63:
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v39 = *((_DWORD *)a3 + 7) + v33;
        *((_DWORD *)a3 + 7) = v39;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v39 & (v39 >> 31));
        v45 = v34;
        continue;
      case 5u:
        if (v11 != 42)
          goto LABEL_70;
        v19 = (SnippetUI::Color *)*((_QWORD *)this + 7);
        if (!v19)
        {
          v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
          *((_QWORD *)this + 7) = v19;
          TagFallback = v45;
        }
        v20 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Color>(a3, v19, TagFallback);
        goto LABEL_75;
      case 6u:
        if (v11 != 50)
          goto LABEL_70;
        v21 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 8);
        if (v21)
          goto LABEL_39;
        v21 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 8) = v21;
        goto LABEL_38;
      case 7u:
        if (v11 != 58)
          goto LABEL_70;
        v21 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 9);
        if (v21)
          goto LABEL_39;
        v21 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 9) = v21;
LABEL_38:
        TagFallback = v45;
LABEL_39:
        v20 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::OptionalBool>(a3, v21, TagFallback);
        goto LABEL_75;
      case 8u:
        if (v11 == 66)
        {
          v20 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v8);
          goto LABEL_75;
        }
        if (v11 == 64)
        {
          v42 = google::protobuf::internal::ReadVarint(&v45, (const char **)v11);
          if (!v45)
            return 0;
          SnippetUI::ColorElement::_internal_add_idioms((uint64_t)this, v42);
          continue;
        }
LABEL_70:
        if ((_DWORD)v11)
          v43 = (v11 & 7) == 4;
        else
          v43 = 1;
        if (v43)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
          return TagFallback;
        }
        v20 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v7, TagFallback, a3, v9);
LABEL_75:
        v45 = (google::protobuf::internal *)v20;
        if (v20)
          continue;
        return 0;
      case 9u:
        if (v11 != 72)
          goto LABEL_70;
        v23 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v22) = *(unsigned __int8 *)TagFallback;
        if ((v22 & 0x80) == 0)
          goto LABEL_46;
        v24 = *(char *)v23;
        v22 = v22 + (v24 << 7) - 128;
        if (v24 < 0)
        {
          v40 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v22);
          v45 = v40;
          *((_DWORD *)this + 20) = v41;
          if (!v40)
            return 0;
        }
        else
        {
          v23 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_46:
          v45 = v23;
          *((_DWORD *)this + 20) = v22;
        }
        continue;
      default:
        goto LABEL_70;
    }
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::TextElement::InternalSerializeWithCachedSizesToArray(SnippetUI::TextElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  unsigned __int8 *v8;
  const char *v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  const char *v12;
  uint64_t *v13;
  SnippetUI::TextElement_Font *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned int v22;
  SnippetUI::TextElement_FontWeight *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  char *v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  SnippetUI::Color *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  SnippetUI::OptionalBool *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  char *v45;
  _BYTE *v46;
  _BYTE *v47;
  unsigned int v48;
  unsigned int v49;
  SnippetUI::OptionalBool *v50;
  unsigned int v51;
  char *v52;
  unsigned int v53;
  _BYTE *v54;
  _BYTE *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  std::string *v60;
  _BYTE *v61;
  int *v62;
  int *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v79;
  char v80;
  std::string v81[2];

  v7 = *((_DWORD *)this + 25);
  if (v7 == 1)
  {
    v8 = (unsigned __int8 *)*((_QWORD *)this + 11);
    if ((char)v8[23] < 0)
    {
      v8 = *(unsigned __int8 **)v8;
      v9 = *(const char **)(*((_QWORD *)this + 11) + 8);
    }
    else
    {
      v9 = (const char *)v8[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v8, v9, 1, (google::protobuf::internal *)"SnippetUI.TextElement.plain");
    if (*((_DWORD *)this + 25) == 1)
      v10 = (uint64_t *)*((_QWORD *)this + 11);
    else
      v10 = &google::protobuf::internal::fixed_address_empty_string;
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, (uint64_t)v10, (char *)a2);
    v7 = *((_DWORD *)this + 25);
  }
  if (v7 == 2)
  {
    v11 = (unsigned __int8 *)*((_QWORD *)this + 11);
    if ((char)v11[23] < 0)
    {
      v11 = *(unsigned __int8 **)v11;
      v12 = *(const char **)(*((_QWORD *)this + 11) + 8);
    }
    else
    {
      v12 = (const char *)v11[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v11, v12, 1, (google::protobuf::internal *)"SnippetUI.TextElement.attributed");
    if (*((_DWORD *)this + 25) == 2)
      v13 = (uint64_t *)*((_QWORD *)this + 11);
    else
      v13 = &google::protobuf::internal::fixed_address_empty_string;
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, (uint64_t)v13, (char *)a2);
  }
  if (this != (SnippetUI::TextElement *)&SnippetUI::_TextElement_default_instance_)
  {
    v14 = (SnippetUI::TextElement_Font *)*((_QWORD *)this + 5);
    if (!v14)
      goto LABEL_30;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v14 = (SnippetUI::TextElement_Font *)*((_QWORD *)this + 5);
    }
    *(_BYTE *)a2 = 26;
    v15 = *((_DWORD *)v14 + 6);
    if (v15 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v15 | 0x80;
      v17 = v15 >> 7;
      if (v15 >> 14)
      {
        v19 = (char *)a2 + 2;
        do
        {
          v20 = v19;
          *v19++ = v17 | 0x80;
          v21 = v17 >> 7;
          v22 = v17 >> 14;
          v17 >>= 7;
        }
        while (v22);
        v18 = v20 + 2;
        *v19 = v21;
        goto LABEL_29;
      }
      *((_BYTE *)a2 + 2) = v17;
      v16 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v15;
      v16 = 2;
    }
    v18 = (char *)a2 + v16;
LABEL_29:
    a2 = SnippetUI::TextElement_Font::InternalSerializeWithCachedSizesToArray(v14, v18, a3, a4);
LABEL_30:
    v23 = (SnippetUI::TextElement_FontWeight *)*((_QWORD *)this + 6);
    if (!v23)
      goto LABEL_42;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v23 = (SnippetUI::TextElement_FontWeight *)*((_QWORD *)this + 6);
    }
    *(_BYTE *)a2 = 34;
    v24 = *((_DWORD *)v23 + 5);
    if (v24 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v24 | 0x80;
      v26 = v24 >> 7;
      if (v24 >> 14)
      {
        v28 = (char *)a2 + 2;
        do
        {
          v29 = v28;
          *v28++ = v26 | 0x80;
          v30 = v26 >> 7;
          v31 = v26 >> 14;
          v26 >>= 7;
        }
        while (v31);
        v27 = v29 + 2;
        *v28 = v30;
        goto LABEL_41;
      }
      *((_BYTE *)a2 + 2) = v26;
      v25 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v24;
      v25 = 2;
    }
    v27 = (char *)a2 + v25;
LABEL_41:
    a2 = SnippetUI::TextElement_FontWeight::InternalSerializeWithCachedSizesToArray(v23, v27, a3, a4);
LABEL_42:
    v32 = (SnippetUI::Color *)*((_QWORD *)this + 7);
    if (!v32)
      goto LABEL_54;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v32 = (SnippetUI::Color *)*((_QWORD *)this + 7);
    }
    *(_BYTE *)a2 = 42;
    v33 = *((_DWORD *)v32 + 6);
    if (v33 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v33 | 0x80;
      v35 = v33 >> 7;
      if (v33 >> 14)
      {
        v37 = (char *)a2 + 2;
        do
        {
          v38 = v37;
          *v37++ = v35 | 0x80;
          v39 = v35 >> 7;
          v40 = v35 >> 14;
          v35 >>= 7;
        }
        while (v40);
        v36 = v38 + 2;
        *v37 = v39;
        goto LABEL_53;
      }
      *((_BYTE *)a2 + 2) = v35;
      v34 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v33;
      v34 = 2;
    }
    v36 = (char *)a2 + v34;
LABEL_53:
    a2 = SnippetUI::Color::InternalSerializeWithCachedSizesToArray(v32, v36, a3, a4);
LABEL_54:
    v41 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 8);
    if (!v41)
      goto LABEL_66;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v41 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 8);
    }
    *(_BYTE *)a2 = 50;
    v42 = *((_DWORD *)v41 + 5);
    if (v42 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v42 | 0x80;
      v44 = v42 >> 7;
      if (v42 >> 14)
      {
        v46 = (char *)a2 + 2;
        do
        {
          v47 = v46;
          *v46++ = v44 | 0x80;
          v48 = v44 >> 7;
          v49 = v44 >> 14;
          v44 >>= 7;
        }
        while (v49);
        v45 = v47 + 2;
        *v46 = v48;
        goto LABEL_65;
      }
      *((_BYTE *)a2 + 2) = v44;
      v43 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v42;
      v43 = 2;
    }
    v45 = (char *)a2 + v43;
LABEL_65:
    a2 = SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v41, v45, a3, a4);
LABEL_66:
    v50 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 9);
    if (v50)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v50 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 9);
      }
      *(_BYTE *)a2 = 58;
      v51 = *((_DWORD *)v50 + 5);
      if (v51 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v51 | 0x80;
        v53 = v51 >> 7;
        if (v51 >> 14)
        {
          v54 = (char *)a2 + 2;
          do
          {
            v55 = v54;
            *v54++ = v53 | 0x80;
            v56 = v53 >> 7;
            v57 = v53 >> 14;
            v53 >>= 7;
          }
          while (v57);
          v52 = v55 + 2;
          *v54 = v56;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v53;
          v52 = (char *)a2 + 3;
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v51;
        v52 = (char *)a2 + 2;
      }
      a2 = SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(v50, v52, a3, a4);
    }
  }
  v58 = *((_DWORD *)this + 8);
  if ((int)v58 >= 1)
  {
    v59 = *(_QWORD *)a3;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v59 = *(_QWORD *)a3;
    }
    if (v59 <= (unint64_t)a2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v81, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      v60 = google::protobuf::internal::LogMessage::operator<<(v81, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v80, (const char **)&v60->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v81[0].__r_.__value_.__l.__data_);
    }
    *(_BYTE *)a2 = 66;
    v61 = (char *)a2 + 1;
    if (v58 >= 0x80)
    {
      do
      {
        *v61++ = v58 | 0x80;
        v79 = v58 >> 14;
        v58 >>= 7;
      }
      while (v79);
      a2 = (google::protobuf::UnknownFieldSet *)(v61 - 1);
    }
    a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    *v61 = v58;
    v62 = (int *)*((_QWORD *)this + 3);
    v63 = &v62[*((int *)this + 4)];
    do
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v65 = *v62++;
      v64 = v65;
      if (v65 > 0x7F)
      {
        *(_BYTE *)a2 = v64 | 0x80;
        v66 = v64 >> 7;
        if (v64 >> 14)
        {
          v67 = (char *)a2 + 1;
          do
          {
            v68 = v67;
            *v67++ = v66 | 0x80;
            v69 = v66 >> 7;
            v70 = v66 >> 14;
            v66 >>= 7;
          }
          while (v70);
          a2 = (google::protobuf::UnknownFieldSet *)(v68 + 2);
          *v67 = v69;
        }
        else
        {
          *((_BYTE *)a2 + 1) = v66;
          a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        }
      }
      else
      {
        *(_BYTE *)a2 = v64;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 1);
      }
    }
    while (v62 < v63);
  }
  v71 = *((_DWORD *)this + 20);
  if (v71)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v71 = *((_DWORD *)this + 20);
    }
    *(_BYTE *)a2 = 72;
    if (v71 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v71 | 0x80;
      v72 = (unint64_t)(int)v71 >> 7;
      if (v71 >> 14)
      {
        v73 = (char *)a2 + 2;
        do
        {
          v74 = v73;
          *v73++ = v72 | 0x80;
          v75 = v72 >> 7;
          v76 = v72 >> 14;
          v72 >>= 7;
        }
        while (v76);
        a2 = (google::protobuf::UnknownFieldSet *)(v74 + 2);
        *v73 = v75;
      }
      else
      {
        *((_BYTE *)a2 + 2) = v72;
        a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
      }
    }
    else
    {
      *((_BYTE *)a2 + 1) = v71;
      a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  v77 = *((_QWORD *)this + 1);
  if ((v77 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v77 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  return a2;
}

void sub_1BFA7D8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement::CopyFrom(SnippetUI::TextElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::TextElement::Clear(this);
    SnippetUI::TextElement::MergeFrom(this, a2);
  }
}

void SnippetUI::TextElement::MergeFrom(SnippetUI::TextElement *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::TextElement *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 1506);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::TextElement::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFA7D9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TextElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  return this;
}

uint64_t SnippetUI::TextElement::GetMetadata(SnippetUI::TextElement *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TextElement_2eproto);
  return qword_1EF582738;
}

void *SnippetUI::TextElement::default_instance(SnippetUI::TextElement *this)
{
  if (atomic_load(scc_info_TextElement_TextElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TextElement_TextElement_2eproto);
  return &SnippetUI::_TextElement_default_instance_;
}

void SnippetUI::TextElement::MergeFrom(SnippetUI::TextElement *this, const SnippetUI::TextElement *a2)
{
  std::string *v4;
  uint64_t v5;
  const SnippetUI::TextElement_Font *v6;
  SnippetUI::TextElement_Font *v7;
  const SnippetUI::TextElement_Font *v8;
  const SnippetUI::TextElement_FontWeight *v9;
  SnippetUI::TextElement_FontWeight *v10;
  const SnippetUI::TextElement_FontWeight *v11;
  const SnippetUI::Color *v12;
  SnippetUI::Color *v13;
  const SnippetUI::Color *v14;
  const SnippetUI::OptionalBool *v15;
  SnippetUI::OptionalBool *v16;
  const SnippetUI::OptionalBool *v17;
  const SnippetUI::OptionalBool *v18;
  SnippetUI::OptionalBool *v19;
  const SnippetUI::OptionalBool *v20;
  int v21;
  int v22;
  const std::string *v23;
  int v24;
  std::string *v25;
  char v26;
  std::string v27[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextElement.pb.cc", 1521);
    v4 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 4, (int *)a2 + 4);
  if (a2 != (const SnippetUI::TextElement *)&SnippetUI::_TextElement_default_instance_)
  {
    v6 = (const SnippetUI::TextElement_Font *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = (SnippetUI::TextElement_Font *)*((_QWORD *)this + 5);
      if (!v7)
      {
        v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font>(0);
        *((_QWORD *)this + 5) = v7;
        v6 = (const SnippetUI::TextElement_Font *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::TextElement_Font *)&SnippetUI::_TextElement_Font_default_instance_;
      SnippetUI::TextElement_Font::MergeFrom(v7, v8);
    }
    v9 = (const SnippetUI::TextElement_FontWeight *)*((_QWORD *)a2 + 6);
    if (v9)
    {
      v10 = (SnippetUI::TextElement_FontWeight *)*((_QWORD *)this + 6);
      if (!v10)
      {
        v10 = (SnippetUI::TextElement_FontWeight *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_FontWeight>(0);
        *((_QWORD *)this + 6) = v10;
        v9 = (const SnippetUI::TextElement_FontWeight *)*((_QWORD *)a2 + 6);
      }
      if (v9)
        v11 = v9;
      else
        v11 = (const SnippetUI::TextElement_FontWeight *)&SnippetUI::_TextElement_FontWeight_default_instance_;
      SnippetUI::TextElement_FontWeight::MergeFrom(v10, v11);
    }
    v12 = (const SnippetUI::Color *)*((_QWORD *)a2 + 7);
    if (v12)
    {
      v13 = (SnippetUI::Color *)*((_QWORD *)this + 7);
      if (!v13)
      {
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
        *((_QWORD *)this + 7) = v13;
        v12 = (const SnippetUI::Color *)*((_QWORD *)a2 + 7);
      }
      if (v12)
        v14 = v12;
      else
        v14 = (const SnippetUI::Color *)&SnippetUI::_Color_default_instance_;
      SnippetUI::Color::MergeFrom(v13, v14);
    }
    v15 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 8);
    if (v15)
    {
      v16 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 8);
      if (!v16)
      {
        v16 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 8) = v16;
        v15 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 8);
      }
      if (v15)
        v17 = v15;
      else
        v17 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v16, v17);
    }
    v18 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 9);
    if (v18)
    {
      v19 = (SnippetUI::OptionalBool *)*((_QWORD *)this + 9);
      if (!v19)
      {
        v19 = (SnippetUI::OptionalBool *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
        *((_QWORD *)this + 9) = v19;
        v18 = (const SnippetUI::OptionalBool *)*((_QWORD *)a2 + 9);
      }
      if (v18)
        v20 = v18;
      else
        v20 = (const SnippetUI::OptionalBool *)&SnippetUI::_OptionalBool_default_instance_;
      SnippetUI::OptionalBool::MergeFrom(v19, v20);
    }
  }
  v21 = *((_DWORD *)a2 + 20);
  if (v21)
    *((_DWORD *)this + 20) = v21;
  v22 = *((_DWORD *)a2 + 25);
  if (v22 == 2)
  {
    v23 = (const std::string *)*((_QWORD *)a2 + 11);
    if (*((_DWORD *)this + 25) != 2)
    {
      SnippetUI::TextElement::clear_value((uint64_t)this);
      v24 = 2;
      goto LABEL_51;
    }
  }
  else
  {
    if (v22 != 1)
      return;
    v23 = (const std::string *)*((_QWORD *)a2 + 11);
    if (*((_DWORD *)this + 25) != 1)
    {
      SnippetUI::TextElement::clear_value((uint64_t)this);
      v24 = 1;
LABEL_51:
      *((_DWORD *)this + 25) = v24;
      *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
      goto LABEL_52;
    }
  }
  v25 = (std::string *)*((_QWORD *)this + 11);
  if (v25 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v25, v23);
    return;
  }
LABEL_52:
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v23);
}

void sub_1BFA7DC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TextElement::clear_value(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 100);
  if (v2 == 2 || v2 == 1)
  {
    v3 = *(_QWORD *)(this + 88);
    if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      this = MEMORY[0x1C3B8D890](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 100) = 0;
  return this;
}

SnippetUI::TextElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::TextElement *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::TextElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x68uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement>);
    SnippetUI::TextElement::TextElement(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::TextElement *)operator new();
    SnippetUI::TextElement::TextElement(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFA7DD88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4090B335DALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TextElement>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t SnippetUI::TextElement_Font_NamedFont_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TextElement_2eproto);
  return file_level_enum_descriptors_TextElement_2eproto;
}

BOOL SnippetUI::TextElement_Font_NamedFont_IsValid(SnippetUI *this)
{
  return this < 0xB;
}

uint64_t SnippetUI::TextElement_Font_Weight_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TextElement_2eproto);
  return qword_1EF582750;
}

BOOL SnippetUI::TextElement_Font_Weight_IsValid(SnippetUI *this)
{
  return this < 9;
}

uint64_t SnippetUI::TextElement_Font_Design_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TextElement_2eproto);
  return qword_1EF582758;
}

BOOL SnippetUI::TextElement_Font_Design_IsValid(SnippetUI *this)
{
  return this < 3;
}

_QWORD *SnippetUI::TextElement_Font_SystemFont::TextElement_Font_SystemFont(_QWORD *this)
{
  *this = &off_1E7931290;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7931290;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

SnippetUI::TextElement_Font_SystemFont *SnippetUI::TextElement_Font_SystemFont::TextElement_Font_SystemFont(SnippetUI::TextElement_Font_SystemFont *this, const SnippetUI::TextElement_Font_SystemFont *a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7931290;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 7) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement_Font_SystemFont *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  v5 = *((_QWORD *)a2 + 2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_QWORD *)this + 2) = v5;
  return this;
}

void sub_1BFA7DF9C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement_Font_SystemFont::CopyFrom(SnippetUI::TextElement_Font_SystemFont *this, const SnippetUI::TextElement_Font_SystemFont *a2)
{
  char *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (char *)this + 8;
    *((_DWORD *)v4 + 4) = 0;
    *((_QWORD *)v4 + 1) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v4);
    SnippetUI::TextElement_Font_SystemFont::MergeFrom(this, a2);
  }
}

float SnippetUI::TextElement_Font_SystemFont::InternalSwap(SnippetUI::TextElement_Font_SystemFont *this, SnippetUI::TextElement_Font_SystemFont *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  float result;
  int v8;
  int v9;
  google::protobuf::UnknownFieldSet *v10;

  v4 = (SnippetUI::TextElement_Font_SystemFont *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v10;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  v9 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v9;
  return result;
}

void SnippetUI::TextElement_Font::InitAsDefaultInstance(SnippetUI::TextElement_Font *this)
{
  dword_1ED1D52A0 = 0;
  qword_1ED1D52A8 = (uint64_t)&SnippetUI::_TextElement_Font_SystemFont_default_instance_;
}

uint64_t SnippetUI::TextElement_Font::_Internal::system(SnippetUI::TextElement_Font::_Internal *this, const SnippetUI::TextElement_Font *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::TextElement_Font::set_allocated_system(uint64_t this, SnippetUI::TextElement_Font_SystemFont *a2)
{
  uint64_t v3;

  v3 = this;
  if (*(_DWORD *)(this + 28) == 2)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v3 + 28) = 0;
  if (a2)
  {
    *(_DWORD *)(v3 + 28) = 2;
    *(_QWORD *)(v3 + 16) = a2;
  }
  return this;
}

uint64_t SnippetUI::TextElement_Font::clear_value(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_DWORD *)(this + 28) == 2)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

SnippetUI::TextElement_Font *SnippetUI::TextElement_Font::TextElement_Font(SnippetUI::TextElement_Font *this, const SnippetUI::TextElement_Font *a2)
{
  uint64_t v4;
  int v5;
  SnippetUI::TextElement_Font_SystemFont *v6;
  const SnippetUI::TextElement_Font_SystemFont *v7;
  int v8;

  *(_QWORD *)this = &off_1E7931350;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement_Font *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_DWORD *)this + 7) = 0;
  v5 = *((_DWORD *)a2 + 7);
  if (v5 == 1)
  {
    v8 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 7) = 1;
    *((_DWORD *)this + 4) = v8;
  }
  else if (v5 == 2)
  {
    *((_DWORD *)this + 7) = 2;
    v6 = (SnippetUI::TextElement_Font_SystemFont *)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement_Font_SystemFont>(0);
    *((_QWORD *)this + 2) = v6;
    if (*((_DWORD *)a2 + 7) == 2)
      v7 = (const SnippetUI::TextElement_Font_SystemFont *)*((_QWORD *)a2 + 2);
    else
      v7 = (const SnippetUI::TextElement_Font_SystemFont *)&SnippetUI::_TextElement_Font_SystemFont_default_instance_;
    SnippetUI::TextElement_Font_SystemFont::MergeFrom(v6, v7);
  }
  return this;
}

void sub_1BFA7E228(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement_Font::CopyFrom(SnippetUI::TextElement_Font *this, const SnippetUI::TextElement_Font *a2)
{
  if (a2 != this)
  {
    SnippetUI::TextElement_Font::Clear(this);
    SnippetUI::TextElement_Font::MergeFrom(this, a2);
  }
}

void SnippetUI::TextElement_Font::InternalSwap(SnippetUI::TextElement_Font *this, SnippetUI::TextElement_Font *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::TextElement_Font *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

_QWORD *SnippetUI::TextElement_FontWeight::TextElement_FontWeight(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7931410;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7931410;
  return this;
}

SnippetUI::TextElement_FontWeight *SnippetUI::TextElement_FontWeight::TextElement_FontWeight(SnippetUI::TextElement_FontWeight *this, const SnippetUI::TextElement_FontWeight *a2)
{
  uint64_t v4;

  *(_QWORD *)this = &off_1E7931410;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextElement_FontWeight *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  return this;
}

void sub_1BFA7E384(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement_FontWeight::CopyFrom(SnippetUI::TextElement_FontWeight *this, const SnippetUI::TextElement_FontWeight *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::TextElement_FontWeight *)((char *)this + 8);
    *((_DWORD *)v4 + 2) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::TextElement_FontWeight::MergeFrom(this, a2);
  }
}

void SnippetUI::TextElement_FontWeight::InternalSwap(SnippetUI::TextElement_FontWeight *this, SnippetUI::TextElement_FontWeight *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  int v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::TextElement_FontWeight *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
}

void SnippetUI::TextElement::InitAsDefaultInstance(SnippetUI::TextElement *this)
{
  qword_1ED1D4F80 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED1D4F88 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1ED1D4F40 = (uint64_t)&SnippetUI::_TextElement_Font_default_instance_;
  unk_1ED1D4F48 = &SnippetUI::_TextElement_FontWeight_default_instance_;
  qword_1ED1D4F50 = (uint64_t)&SnippetUI::_Color_default_instance_;
  unk_1ED1D4F58 = &SnippetUI::_OptionalBool_default_instance_;
  qword_1ED1D4F60 = (uint64_t)&SnippetUI::_OptionalBool_default_instance_;
}

uint64_t SnippetUI::TextElement::_Internal::font(SnippetUI::TextElement::_Internal *this, const SnippetUI::TextElement *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::TextElement::_Internal::weight(SnippetUI::TextElement::_Internal *this, const SnippetUI::TextElement *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::TextElement::_Internal::color(SnippetUI::TextElement::_Internal *this, const SnippetUI::TextElement *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::TextElement::_Internal::is_italic(SnippetUI::TextElement::_Internal *this, const SnippetUI::TextElement *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::TextElement::_Internal::is_bold(SnippetUI::TextElement::_Internal *this, const SnippetUI::TextElement *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::TextElement::clear_color(SnippetUI::TextElement *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::TextElement::clear_is_italic(SnippetUI::TextElement *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::TextElement::clear_is_bold(SnippetUI::TextElement *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

SnippetUI::TextElement *SnippetUI::TextElement::TextElement(SnippetUI::TextElement *this, const SnippetUI::TextElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::TextElement_Font *v6;
  SnippetUI::OptionalBool *v7;
  SnippetUI::TextElement_FontWeight *v8;
  SnippetUI::Color *v9;
  SnippetUI::OptionalBool *v10;
  int v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E79314D0;
  *((_QWORD *)this + 1) = 0;
  v4 = (SnippetUI::TextElement *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 16, (int *)a2 + 4);
  *((_DWORD *)this + 24) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 == (const SnippetUI::TextElement *)&SnippetUI::_TextElement_default_instance_)
  {
    v7 = 0;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 5))
    {
      v6 = (SnippetUI::TextElement_Font *)operator new();
      SnippetUI::TextElement_Font::TextElement_Font(v6, *((const SnippetUI::TextElement_Font **)a2 + 5));
    }
    else
    {
      v6 = 0;
    }
    *((_QWORD *)this + 5) = v6;
    if (*((_QWORD *)a2 + 6))
    {
      v8 = (SnippetUI::TextElement_FontWeight *)operator new();
      SnippetUI::TextElement_FontWeight::TextElement_FontWeight(v8, *((const SnippetUI::TextElement_FontWeight **)a2 + 6));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 6) = v8;
    if (*((_QWORD *)a2 + 7))
    {
      v9 = (SnippetUI::Color *)operator new();
      SnippetUI::Color::Color(v9, *((const SnippetUI::Color **)a2 + 7));
    }
    else
    {
      v9 = 0;
    }
    *((_QWORD *)this + 7) = v9;
    if (*((_QWORD *)a2 + 8))
    {
      v10 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v10, *((const SnippetUI::OptionalBool **)a2 + 8));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 8) = v10;
    if (*((_QWORD *)a2 + 9))
    {
      v7 = (SnippetUI::OptionalBool *)operator new();
      SnippetUI::OptionalBool::OptionalBool(v7, *((const SnippetUI::OptionalBool **)a2 + 9));
    }
    else
    {
      v7 = 0;
    }
  }
  *((_QWORD *)this + 9) = v7;
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)this + 25) = 0;
  v11 = *((_DWORD *)a2 + 25);
  if ((v11 - 1) <= 1)
  {
    v12 = *((_QWORD *)a2 + 11);
    SnippetUI::TextElement::clear_value((uint64_t)this);
    *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
    *((_DWORD *)this + 25) = v11;
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, v12);
  }
  return this;
}

void sub_1BFA7E77C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x1081C40B60F2DE8);
  google::protobuf::RepeatedField<int>::~RepeatedField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::TextElement::CopyFrom(SnippetUI::TextElement *this, const SnippetUI::TextElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::TextElement::Clear(this);
    SnippetUI::TextElement::MergeFrom(this, a2);
  }
}

void SnippetUI::TextElement::InternalSwap(SnippetUI::TextElement *this, SnippetUI::TextElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  google::protobuf::UnknownFieldSet *v13;

  v4 = (SnippetUI::TextElement *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v13;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 16, (uint64_t)a2 + 16);
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  LODWORD(v11) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v11;
  v12 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v12;
  LODWORD(v12) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v12;
}

void sub_1BFA7EA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFA7EB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFA7EC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void siri::dialogengine::ParsePatternSchemaBinary(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  std::string::size_type size;
  std::string::size_type v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  __int128 v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  int v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  const std::string ***v49;
  const std::string ***v50;
  const std::string **v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  const std::string ***v62;
  const std::string ***v63;
  const std::string **v64;
  std::string::size_type v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  const std::string ***v75;
  const std::string ***v76;
  const std::string **v77;
  std::string::size_type v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  __int128 *v91;
  __int128 v92;
  std::string::size_type v93;
  void *v94;
  uint64_t v95;
  __int128 **v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  int v120;
  unint64_t *v121;
  unint64_t v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  std::string::size_type v126;
  std::string *v127;
  __int128 v128;
  __int128 *v129;
  __int128 v130;
  int64x2_t *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  siri::dialogengine::PatternSchemaConcreteGroup *v144;
  _QWORD *v145;
  siri::dialogengine::VisualComponentsCombination::Entry *v146;
  char *v147;
  _DWORD *v148;
  siri::dialogengine::Context *v149;
  std::string::size_type v150;
  __int128 *v151;
  char **v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  int64x2_t *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  _QWORD *v168;
  std::string *v169;
  std::string::size_type v170;
  _QWORD *v171;
  _QWORD *v172;
  std::string *v173;
  std::string::size_type v174;
  _QWORD *v175;
  _QWORD *v176;
  std::string *v177;
  std::string::size_type v178;
  _QWORD *v179;
  _QWORD *v180;
  std::string *v181;
  std::string::size_type v182;
  _QWORD *v183;
  std::string::size_type v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  __int128 v191;
  char *v192;
  std::__shared_weak_count *v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  std::string __p;
  __int128 v198;
  __int128 v199;
  void *v200;
  char v201;
  uint64_t v202;
  unsigned __int128 v203;
  unsigned __int128 v204;
  uint64_t v205[2];
  std::string v206;
  std::string v207;
  std::string v208;
  std::string v209;
  std::string v210;
  std::string v211;
  __int128 v212;
  _BYTE v213[32];
  int v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  std::string *__str;
  std::string *v224;
  std::string *v225;
  __int128 *v226;
  void *v227[2];
  unsigned __int8 v228;
  std::string v229;

  siri::dialogengine::ParseGzippedFile();
  v8 = v228;
  v9 = v228;
  if ((v228 & 0x80u) != 0)
    v8 = (unint64_t)v227[1];
  if (!v8)
  {
    *a4 = 0;
    a4[1] = 0;
    if ((v9 & 0x80) != 0)
      goto LABEL_21;
    return;
  }
  siri::dialogengine::PatternSchemaBinary::PatternSchema::PatternSchema((siri::dialogengine::PatternSchemaBinary::PatternSchema *)v213);
  if ((google::protobuf::MessageLite::ParseFromString(v213, v227) & 1) == 0)
    goto LABEL_17;
  v10 = (uint64_t *)v222;
  v11 = *(char *)(v222 + 23);
  if (v11 < 0)
  {
    if (*(_QWORD *)(v222 + 8) == 15)
    {
      v10 = *(uint64_t **)v222;
      goto LABEL_13;
    }
LABEL_17:
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_20;
  }
  if (v11 != 15)
    goto LABEL_17;
LABEL_13:
  v12 = *v10;
  v13 = *(uint64_t *)((char *)v10 + 7);
  if (v12 != 0x534E524554544150 || v13 != 0x4250414D45484353)
    goto LABEL_17;
  v15 = operator new();
  *(_QWORD *)(v15 + 128) = 0;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_QWORD *)(v15 + 112) = 0;
  *(_QWORD *)(v15 + 120) = v15 + 128;
  *(_QWORD *)(v15 + 152) = 0;
  *(_QWORD *)(v15 + 136) = 0;
  *(_QWORD *)(v15 + 144) = v15 + 152;
  *(_QWORD *)(v15 + 176) = 0;
  *(_QWORD *)(v15 + 160) = 0;
  *(_QWORD *)(v15 + 168) = v15 + 176;
  *(_QWORD *)(v15 + 184) = 0;
  *(_QWORD *)(v15 + 192) = 0;
  *(_QWORD *)(v15 + 200) = 0;
  *(_QWORD *)(v15 + 208) = 0;
  *(_QWORD *)&v212 = v15;
  __p.__r_.__value_.__r.__words[0] = v15;
  v16 = (_QWORD *)operator new();
  *v16 = &off_1E7931810;
  v16[1] = 0;
  v16[2] = 0;
  v16[3] = v15;
  *((_QWORD *)&v212 + 1) = v16;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v211, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v17 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    v211.__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v17;
  }
  v18 = HIBYTE(v211.__r_.__value_.__r.__words[2]);
  size = v211.__r_.__value_.__l.__size_;
  if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v211.__r_.__value_.__r.__words[2]);
  else
    v20 = v211.__r_.__value_.__l.__size_;
  v21 = a3[23];
  v22 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v21 = *((_QWORD *)a3 + 1);
  if (v20 != v21)
  {
LABEL_41:
    if (!v21)
      goto LABEL_60;
LABEL_45:
    std::operator+<char>();
    v25 = std::string::append(&v210, "' does not match filename: ");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v229.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = *(char *)(a2 + 23);
    if (v27 >= 0)
      v28 = (const std::string::value_type *)a2;
    else
      v28 = *(const std::string::value_type **)a2;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a2 + 23);
    else
      v29 = *(_QWORD *)(a2 + 8);
    v30 = std::string::append(&v229, v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (a1)
      siri::dialogengine::Context::AddSchemaError(a1, (__int128 *)&__p);
    else
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v229.__r_.__value_.__l.__data_);
    if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v210.__r_.__value_.__l.__data_);
    goto LABEL_60;
  }
  if (v22 >= 0)
    v23 = a3;
  else
    v23 = *(unsigned __int8 **)a3;
  if ((*((_BYTE *)&v211.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v211.__r_.__value_.__l.__data_, v23, v211.__r_.__value_.__l.__size_) && size)
      goto LABEL_45;
  }
  else if (*((_BYTE *)&v211.__r_.__value_.__s + 23))
  {
    v24 = &v211;
    while (v24->__r_.__value_.__s.__data_[0] == *v23)
    {
      v24 = (std::string *)((char *)v24 + 1);
      ++v23;
      if (!--v18)
        goto LABEL_60;
    }
    goto LABEL_41;
  }
LABEL_60:
  std::string::operator=((std::string *)v15, __str);
  std::string::operator=((std::string *)(v15 + 24), (const std::string *)a2);
  std::string::operator=((std::string *)(v15 + 48), v225);
  if (*((char *)v226 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)v226, *((_QWORD *)v226 + 1));
  }
  else
  {
    v32 = *v226;
    v210.__r_.__value_.__r.__words[2] = *((_QWORD *)v226 + 2);
    *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v32;
  }
  v33 = HIBYTE(v210.__r_.__value_.__r.__words[2]);
  if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v33 = v210.__r_.__value_.__l.__size_;
  if (v33)
  {
    std::string::operator=((std::string *)(v15 + 72), &v210);
    std::operator+<char>();
    v34 = std::string::append(&v206, "': ");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v207.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v210;
    else
      v36 = (std::string *)v210.__r_.__value_.__r.__words[0];
    if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(v210.__r_.__value_.__r.__words[2]);
    else
      v37 = v210.__r_.__value_.__l.__size_;
    v38 = std::string::append(&v207, (const std::string::value_type *)v36, v37);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v208.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = std::string::append(&v208, " (");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v209.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    v42 = *(char *)(a2 + 23);
    if (v42 >= 0)
      v43 = (const std::string::value_type *)a2;
    else
      v43 = *(const std::string::value_type **)a2;
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(a2 + 23);
    else
      v44 = *(_QWORD *)(a2 + 8);
    v45 = std::string::append(&v209, v43, v44);
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v229.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = std::string::append(&v229, ")");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (a1)
      siri::dialogengine::Context::AddSchemaWarning(a1, (__int128 *)&__p);
    else
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 1u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v229.__r_.__value_.__l.__data_);
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v209.__r_.__value_.__l.__data_);
    if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v208.__r_.__value_.__l.__data_);
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v207.__r_.__value_.__l.__data_);
    if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v206.__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)(v15 + 96), v224);
  if (v215)
    v49 = (const std::string ***)(v215 + 8);
  else
    v49 = 0;
  if (v214)
  {
    v50 = &v49[v214];
    do
    {
      v51 = *v49;
      _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine14PatternSettingENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v229);
      v52 = v229.__r_.__value_.__r.__words[0];
      std::string::operator=((std::string *)(v229.__r_.__value_.__r.__words[0] + 8), v51[3]);
      std::string::operator=((std::string *)(v52 + 56), v51[5]);
      std::string::operator=((std::string *)(v52 + 32), v51[4]);
      *(_BYTE *)(v52 + 233) = siri::dialogengine::StringToBool(v51[6]);
      std::string::operator=((std::string *)(v52 + 128), v51[7]);
      std::string::operator=((std::string *)(v52 + 208), v51[8]);
      std::string::operator=((std::string *)(v52 + 336), v51[9]);
      v53 = v212;
      if (*(char *)(v212 + 47) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v212 + 24), *(_QWORD *)(v212 + 32));
      else
        __p = *(std::string *)(v212 + 24);
      siri::dialogengine::LineNumberBase::SetFullPath(v52 + 240, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v54 = (std::__shared_weak_count *)v229.__r_.__value_.__l.__size_;
      v205[0] = v52;
      v205[1] = v229.__r_.__value_.__l.__size_;
      if (v229.__r_.__value_.__l.__size_)
      {
        v55 = (unint64_t *)(v229.__r_.__value_.__l.__size_ + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      siri::dialogengine::PatternSchema::AddSetting(v53, v205);
      if (v54)
      {
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v58 = __ldaxr(p_shared_owners);
        while (__stlxr(v58 - 1, p_shared_owners));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v59 = (std::__shared_weak_count *)v229.__r_.__value_.__l.__size_;
      if (v229.__r_.__value_.__l.__size_)
      {
        v60 = (unint64_t *)(v229.__r_.__value_.__l.__size_ + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      ++v49;
    }
    while (v49 != v50);
  }
  if (v217)
    v62 = (const std::string ***)(v217 + 8);
  else
    v62 = 0;
  if (v216)
  {
    v63 = &v62[v216];
    do
    {
      v64 = *v62;
      _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine9ParameterENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
      v65 = __p.__r_.__value_.__r.__words[0];
      std::string::operator=((std::string *)(__p.__r_.__value_.__r.__words[0] + 8), v64[3]);
      std::string::operator=((std::string *)(v65 + 32), v64[4]);
      std::string::operator=((std::string *)(v65 + 56), v64[5]);
      std::string::operator=((std::string *)(v65 + 208), v64[7]);
      std::string::operator=((std::string *)(v65 + 128), v64[6]);
      v66 = v212;
      v67 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      v204 = __PAIR128__(__p.__r_.__value_.__l.__size_, v65);
      if (__p.__r_.__value_.__l.__size_)
      {
        v68 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      siri::dialogengine::PatternSchema::AddRequiredParameter(v66, (uint64_t *)&v204);
      if (v67)
      {
        v70 = (unint64_t *)&v67->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v72 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v73 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      ++v62;
    }
    while (v62 != v63);
  }
  if (v219)
    v75 = (const std::string ***)(v219 + 8);
  else
    v75 = 0;
  if (v218)
  {
    v76 = &v75[v218];
    do
    {
      v77 = *v75;
      _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine9ParameterENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
      v78 = __p.__r_.__value_.__r.__words[0];
      std::string::operator=((std::string *)(__p.__r_.__value_.__r.__words[0] + 8), v77[3]);
      std::string::operator=((std::string *)(v78 + 32), v77[4]);
      std::string::operator=((std::string *)(v78 + 56), v77[5]);
      std::string::operator=((std::string *)(v78 + 208), v77[7]);
      std::string::operator=((std::string *)(v78 + 128), v77[6]);
      v79 = v212;
      v80 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      v203 = __PAIR128__(__p.__r_.__value_.__l.__size_, v78);
      if (__p.__r_.__value_.__l.__size_)
      {
        v81 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      siri::dialogengine::PatternSchema::AddComputedParameter(v79, (uint64_t *)&v203);
      if (v80)
      {
        v83 = (unint64_t *)&v80->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v85 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v86 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      ++v75;
    }
    while (v75 != v76);
  }
  if (v221)
    v88 = (uint64_t *)(v221 + 8);
  else
    v88 = 0;
  if (!v220)
  {
LABEL_285:
    *(_OWORD *)a4 = v212;
    v212 = 0uLL;
    goto LABEL_286;
  }
  v89 = &v88[v220];
  while (1)
  {
    v90 = *v88;
    _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine26PatternSchemaConcreteGroupENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((siri::dialogengine::PatternSchemaConcreteGroup **)&v206);
    v91 = *(__int128 **)(v90 + 96);
    if (*((char *)v91 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)v91, *((_QWORD *)v91 + 1));
    }
    else
    {
      v92 = *v91;
      v209.__r_.__value_.__r.__words[2] = *((_QWORD *)v91 + 2);
      *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v92;
    }
    if ((*(_BYTE *)(v90 + 16) & 0x10) != 0)
      break;
    v93 = v206.__r_.__value_.__r.__words[0];
    std::string::operator=((std::string *)(v206.__r_.__value_.__r.__words[0] + 8), &v209);
    std::string::operator=((std::string *)(v93 + 32), *(const std::string **)(v90 + 104));
    std::string::operator=((std::string *)(v93 + 168), *(const std::string **)(v90 + 112));
    std::string::operator=((std::string *)(v93 + 192), *(const std::string **)(v90 + 120));
    v94 = *(void **)(v90 + 136);
    if (!v94)
      v94 = &siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
    siri::dialogengine::ParsePatternUsagesBinary((siri::dialogengine *)&__p, *((const siri::dialogengine::PatternSchemaBinary::Usage **)v94 + 3), *((_DWORD *)v94 + 8));
    if ((std::string *)(v93 + 56) != &__p)
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((_QWORD *)(v93 + 56), (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
    v229.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
    v95 = *(_QWORD *)(v90 + 40);
    if (v95)
      v96 = (__int128 **)(v95 + 8);
    else
      v96 = 0;
    v97 = *(int *)(v90 + 32);
    if ((_DWORD)v97)
    {
      v98 = 8 * v97;
      do
      {
        siri::dialogengine::PatternSchemaConcreteGroup::AddNestedPattern((uint64_t *)v93, *v96++);
        v98 -= 8;
      }
      while (v98);
    }
    v99 = *(_QWORD *)(v90 + 88);
    if (v99)
      v100 = (uint64_t *)(v99 + 8);
    else
      v100 = 0;
    v101 = *(int *)(v90 + 80);
    if ((_DWORD)v101)
    {
      v102 = &v100[v101];
      do
      {
        v103 = *v100;
        v104 = (std::__shared_weak_count *)v206.__r_.__value_.__l.__size_;
        v195 = *(_OWORD *)&v206.__r_.__value_.__l.__data_;
        if (v206.__r_.__value_.__l.__size_)
        {
          v105 = (unint64_t *)(v206.__r_.__value_.__l.__size_ + 8);
          do
            v106 = __ldxr(v105);
          while (__stxr(v106 + 1, v105));
        }
        siri::dialogengine::ParsePatternComponentBinary(v103, (uint64_t *)&v195, 0);
        if (v104)
        {
          v107 = (unint64_t *)&v104->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        ++v100;
      }
      while (v100 != v102);
    }
    v109 = *(_QWORD *)(v90 + 64);
    if (v109)
      v110 = (uint64_t *)(v109 + 8);
    else
      v110 = 0;
    v111 = *(int *)(v90 + 56);
    if ((_DWORD)v111)
    {
      v112 = &v110[v111];
      do
      {
        v113 = *v110;
        v114 = (std::__shared_weak_count *)v206.__r_.__value_.__l.__size_;
        v194 = *(_OWORD *)&v206.__r_.__value_.__l.__data_;
        if (v206.__r_.__value_.__l.__size_)
        {
          v115 = (unint64_t *)(v206.__r_.__value_.__l.__size_ + 8);
          do
            v116 = __ldxr(v115);
          while (__stxr(v116 + 1, v115));
        }
        siri::dialogengine::ParsePatternComponentBinary(v113, (uint64_t *)&v194, 1);
        if (v114)
        {
          v117 = (unint64_t *)&v114->__shared_owners_;
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        ++v110;
      }
      while (v110 != v112);
    }
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v206.__r_.__value_.__l.__data_ + 88))(&__p);
    v119 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    v120 = *(_DWORD *)__p.__r_.__value_.__l.__data_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_206;
    v121 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
      if (v120)
      {
LABEL_207:
        std::string::basic_string[abi:ne180100]<0>(&v208, "Multiple '");
        v123 = std::string::append(&v208, "visualComponentsCombination");
        v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
        v229.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v124;
        v123->__r_.__value_.__l.__size_ = 0;
        v123->__r_.__value_.__r.__words[2] = 0;
        v123->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v207, "' entries in group");
        if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v125 = &v207;
        else
          v125 = (std::string *)v207.__r_.__value_.__r.__words[0];
        if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v126 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
        else
          v126 = v207.__r_.__value_.__l.__size_;
        v127 = std::string::append(&v229, (const std::string::value_type *)v125, v126);
        v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v128;
        v127->__r_.__value_.__l.__size_ = 0;
        v127->__r_.__value_.__r.__words[2] = 0;
        v127->__r_.__value_.__r.__words[0] = 0;
        if (a1)
          siri::dialogengine::Context::AddSchemaError(a1, (__int128 *)&__p);
        else
          siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v207.__r_.__value_.__l.__data_);
        if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v229.__r_.__value_.__l.__data_);
        if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v208.__r_.__value_.__l.__data_);
      }
    }
    else
    {
LABEL_206:
      if (v120)
        goto LABEL_207;
    }
    v144 = (siri::dialogengine::PatternSchemaConcreteGroup *)v206.__r_.__value_.__r.__words[0];
    if (*(_QWORD *)(v90 + 144))
      v145 = *(_QWORD **)(v90 + 144);
    else
      v145 = &siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_;
    v147 = (char *)operator new(0x38uLL);
    *((_QWORD *)v147 + 1) = 0;
    *((_QWORD *)v147 + 2) = 0;
    *(_OWORD *)(v147 + 24) = 0u;
    v148 = v147 + 24;
    *(_QWORD *)v147 = &off_1E79316E0;
    *(_OWORD *)(v147 + 40) = 0u;
    v192 = v147 + 24;
    v193 = (std::__shared_weak_count *)v147;
    if (*((_DWORD *)v145 + 8) == 2)
    {
      *v148 = siri::dialogengine::GetCombinationTypeFromString(v145[3]);
    }
    else
    {
      *v148 = 3;
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      v198 = 0uLL;
      v199 = 0uLL;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      if (*((_DWORD *)v145 + 8) == 1)
        v149 = (siri::dialogengine::Context *)v145[3];
      else
        v149 = (siri::dialogengine::Context *)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_;
      siri::dialogengine::ParseCustomCombinationListBinary((siri::dialogengine *)a1, v149, (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)&__p, v146);
      memset(&v229, 0, sizeof(v229));
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*,std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*>(&v229, *((_QWORD **)&v198 + 1), (_QWORD *)v199, (uint64_t)(v199 - *((_QWORD *)&v198 + 1)) >> 4);
      v150 = v229.__r_.__value_.__l.__size_;
      v151 = (__int128 *)v229.__r_.__value_.__r.__words[0];
      if (v229.__r_.__value_.__r.__words[0] != v229.__r_.__value_.__l.__size_)
      {
        v152 = (char **)(v147 + 32);
        do
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>(v152, v151++);
        while (v151 != (__int128 *)v150);
      }
      v208.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
      v229.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198 + 8;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
      if (SBYTE7(v198) < 0)
        operator delete((void *)__p.__r_.__value_.__l.__size_);
    }
    siri::dialogengine::PatternSchemaConcreteGroup::SetVisualComponentsCombination(v144, (uint64_t *)&v192);
    v153 = v193;
    if (v193)
    {
      v154 = (unint64_t *)&v193->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    v156 = (int64x2_t *)v212;
    v157 = (std::__shared_weak_count *)v206.__r_.__value_.__l.__size_;
    v191 = *(_OWORD *)&v206.__r_.__value_.__l.__data_;
    if (v206.__r_.__value_.__l.__size_)
    {
      v158 = (unint64_t *)(v206.__r_.__value_.__l.__size_ + 8);
      do
        v159 = __ldxr(v158);
      while (__stxr(v159 + 1, v158));
    }
    siri::dialogengine::PatternSchema::AddGroup(v156, &v191);
    if (v157)
    {
      v160 = (unint64_t *)&v157->__shared_owners_;
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
LABEL_277:
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v209.__r_.__value_.__l.__data_);
    v162 = (std::__shared_weak_count *)v206.__r_.__value_.__l.__size_;
    if (v206.__r_.__value_.__l.__size_)
    {
      v163 = (unint64_t *)(v206.__r_.__value_.__l.__size_ + 8);
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
      }
    }
    if (++v88 == v89)
      goto LABEL_285;
  }
  v129 = *(__int128 **)(v90 + 128);
  if (*((char *)v129 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)v129, *((_QWORD *)v129 + 1));
  }
  else
  {
    v130 = *v129;
    v229.__r_.__value_.__r.__words[2] = *((_QWORD *)v129 + 2);
    *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v130;
  }
  v131 = (int64x2_t *)v212;
  siri::dialogengine::PatternSchema::GetGroup(v212, (uint64_t)&v229, &v207);
  v132 = v207.__r_.__value_.__r.__words[0];
  if (!v207.__r_.__value_.__r.__words[0])
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"Property \"aliasOf\" in group \"", 29);
    if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v169 = &v209;
    else
      v169 = (std::string *)v209.__r_.__value_.__r.__words[0];
    if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v170 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
    else
      v170 = v209.__r_.__value_.__l.__size_;
    v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)v169, v170);
    v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)"\" refers to group \"", 19);
    if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v173 = &v229;
    else
      v173 = (std::string *)v229.__r_.__value_.__r.__words[0];
    if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v174 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
    else
      v174 = v229.__r_.__value_.__l.__size_;
    v175 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)v173, v174);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)"\" that is not (yet) defined", 27);
    std::stringbuf::str();
    if (a1)
      goto LABEL_308;
    goto LABEL_322;
  }
  if (!(*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v207.__r_.__value_.__l.__data_ + 16))(v207.__r_.__value_.__r.__words[0]))
  {
    std::allocate_shared[abi:ne180100]<siri::dialogengine::PatternSchemaAliasGroup,std::allocator<siri::dialogengine::PatternSchemaAliasGroup>,std::string const&,std::shared_ptr<siri::dialogengine::PatternSchemaGroup> &,void>(&__p, (__int128 *)&v209, v132, (std::__shared_weak_count *)v207.__r_.__value_.__l.__size_);
    v133 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    v196 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v134 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
    }
    siri::dialogengine::PatternSchema::AddGroup(v131, &v196);
    if (v133)
    {
      v136 = (unint64_t *)&v133->__shared_owners_;
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v138 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v139 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
      }
    }
    v141 = (std::__shared_weak_count *)v207.__r_.__value_.__l.__size_;
    if (v207.__r_.__value_.__l.__size_)
    {
      v142 = (unint64_t *)(v207.__r_.__value_.__l.__size_ + 8);
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
    }
    if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v229.__r_.__value_.__l.__data_);
    goto LABEL_277;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
  v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"The value of property \"aliasOf\" in group \"", 42);
  if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v177 = &v209;
  else
    v177 = (std::string *)v209.__r_.__value_.__r.__words[0];
  if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v178 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
  else
    v178 = v209.__r_.__value_.__l.__size_;
  v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)v177, v178);
  v180 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)"\" is invalid (\"", 15);
  if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v181 = &v229;
  else
    v181 = (std::string *)v229.__r_.__value_.__r.__words[0];
  if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v182 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
  else
    v182 = v229.__r_.__value_.__l.__size_;
  v183 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)v181, v182);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"\") because that group is an alias group", 39);
  std::stringbuf::str();
  if (a1)
  {
LABEL_308:
    siri::dialogengine::Context::AddSchemaError(a1, (__int128 *)&v208);
    goto LABEL_323;
  }
LABEL_322:
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v208, 3u);
LABEL_323:
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v208.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v184 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *a4 = 0;
  a4[1] = 0;
  __p.__r_.__value_.__r.__words[2] = v184;
  *(_QWORD *)&v198 = MEMORY[0x1E0DE4FB8] + 16;
  if (v201 < 0)
    operator delete(v200);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&v202);
  v185 = (std::__shared_weak_count *)v207.__r_.__value_.__l.__size_;
  if (v207.__r_.__value_.__l.__size_)
  {
    v186 = (unint64_t *)(v207.__r_.__value_.__l.__size_ + 8);
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v229.__r_.__value_.__l.__data_);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v209.__r_.__value_.__l.__data_);
  v188 = (std::__shared_weak_count *)v206.__r_.__value_.__l.__size_;
  if (v206.__r_.__value_.__l.__size_)
  {
    v189 = (unint64_t *)(v206.__r_.__value_.__l.__size_ + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
LABEL_286:
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v211.__r_.__value_.__l.__data_);
  v165 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
  if (*((_QWORD *)&v212 + 1))
  {
    v166 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
LABEL_20:
  siri::dialogengine::PatternSchemaBinary::PatternSchema::~PatternSchema((siri::dialogengine::PatternSchemaBinary::PatternSchema *)v213);
  if ((v228 & 0x80) != 0)
LABEL_21:
    operator delete(v227[0]);
}

void sub_1BFA801A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void *__p;
  char a72;
  uint64_t v72;

  if (a72 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  if (*(char *)(v72 - 89) < 0)
    operator delete(*(void **)(v72 - 112));
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  siri::dialogengine::PatternSchemaBinary::PatternSchema::~PatternSchema((siri::dialogengine::PatternSchemaBinary::PatternSchema *)&STACK[0x278]);
  if (*(char *)(v72 - 113) < 0)
    operator delete(*(void **)(v72 - 136));
  _Unwind_Resume(a1);
}

double _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine9ParameterENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  char *v2;
  double result;

  v2 = (char *)operator new(0x168uLL);
  result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_QWORD *)v2 = &off_1E79345A0;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *(_WORD *)(v2 + 177) = 257;
  *((_QWORD *)v2 + 3) = &off_1E793AE30;
  *((_QWORD *)v2 + 42) = v2 + 344;
  *((_QWORD *)v2 + 32) = 0;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *(_OWORD *)(v2 + 242) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *((_QWORD *)v2 + 33) = &unk_1E793AE60;
  *((_QWORD *)v2 + 40) = 0;
  *((_QWORD *)v2 + 41) = &unk_1E793AE80;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

siri::dialogengine::PatternSchemaConcreteGroup *_ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine26PatternSchemaConcreteGroupENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(siri::dialogengine::PatternSchemaConcreteGroup **a1)
{
  _QWORD *v2;
  siri::dialogengine::PatternSchemaConcreteGroup *result;

  v2 = operator new(0xF0uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E7931900;
  result = siri::dialogengine::PatternSchemaConcreteGroup::PatternSchemaConcreteGroup((siri::dialogengine::PatternSchemaConcreteGroup *)(v2 + 3));
  *a1 = result;
  a1[1] = (siri::dialogengine::PatternSchemaConcreteGroup *)v2;
  return result;
}

void sub_1BFA8061C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<siri::dialogengine::PatternSchemaAliasGroup,std::allocator<siri::dialogengine::PatternSchemaAliasGroup>,std::string const&,std::shared_ptr<siri::dialogengine::PatternSchemaGroup> &,void>(_QWORD *a1, __int128 *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];

  v8 = operator new(0x48uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E7931950;
  v10 = v8 + 3;
  v15[0] = a3;
  v15[1] = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  siri::dialogengine::PatternSchemaAliasGroup::PatternSchemaAliasGroup(v8 + 3, a2, v15);
  if (a4)
  {
    v13 = (unint64_t *)&a4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *a1 = v10;
  a1[1] = v9;
}

void sub_1BFA806F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParsePatternUsagesBinary(siri::dialogengine *this, const siri::dialogengine::PatternSchemaBinary::Usage *a2, int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  std::string::size_type size;
  uint64_t v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  __int128 v24;
  std::string i;
  std::string __str;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a3 != 1)
  {
    v11 = (std::__shared_weak_count *)operator new(0x38uLL);
    *(_OWORD *)&v11->__shared_owners_ = 0u;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79315F0;
    LODWORD(v11[1].__vftable) = 0;
    v11[1].__shared_owners_ = 0;
    *(_OWORD *)&v11[1].__shared_weak_owners_ = 0u;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11[1];
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    if (a3 == 2)
      v13 = (uint64_t *)a2;
    else
      v13 = &google::protobuf::internal::fixed_address_empty_string;
    LODWORD(v11[1].__vftable) = siri::dialogengine::GetPatternUsageFromString((uint64_t)v13);
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)this, (__int128 *)&__str);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  __str.__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 5);
  google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&__str, *(_QWORD *)(__str.__r_.__value_.__l.__size_ + 24));
  for (i = __str;
        i.__r_.__value_.__r.__words[0];
        google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++((unsigned __int8 **)&i))
  {
    v5 = *(_QWORD *)(i.__r_.__value_.__r.__words[0] + 24);
    v6 = (std::__shared_weak_count *)operator new(0x38uLL);
    *(_OWORD *)&v6->__shared_owners_ = 0u;
    v7 = (unint64_t *)&v6->__shared_owners_;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79315F0;
    LODWORD(v6[1].__vftable) = 0;
    v6[1].__shared_owners_ = 0;
    *(_OWORD *)&v6[1].__shared_weak_owners_ = 0u;
    *(_QWORD *)&v24 = v6 + 1;
    *((_QWORD *)&v24 + 1) = v6;
    LODWORD(v6[1].__vftable) = siri::dialogengine::GetPatternUsageFromString(v5);
    if (*(char *)(v5 + 47) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v5 + 24), *(_QWORD *)(v5 + 32));
    else
      __str = *(std::string *)(v5 + 24);
    siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)v22);
    if (v23 < 0)
    {
      if (v22[1] != (void *)4)
      {
        operator delete(v22[0]);
LABEL_15:
        std::string::operator=((std::string *)&v6[1].__shared_owners_, &__str);
        goto LABEL_16;
      }
      v8 = *(_DWORD *)v22[0];
      operator delete(v22[0]);
      if (v8 != 1702063205)
        goto LABEL_15;
    }
    else if (v23 != 4 || LODWORD(v22[0]) != 1702063205)
    {
      goto LABEL_15;
    }
LABEL_16:
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)this, &v24);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v15 = *(_QWORD **)this;
  v16 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v16)
    return;
  v17 = *v15;
  if (*(char *)(*v15 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v17 + 8), *(_QWORD *)(v17 + 16));
  }
  else
  {
    v18 = *(_OWORD *)(v17 + 8);
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 24);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v18;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (size)
      return;
LABEL_40:
    v20 = *v15;
    *v15 = *(_QWORD *)(v16 - 16);
    *(_QWORD *)(v16 - 16) = v20;
    v21 = v15[1];
    v15[1] = *(_QWORD *)(v16 - 8);
    *(_QWORD *)(v16 - 8) = v21;
    return;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if (!size)
    goto LABEL_40;
}

void sub_1BFA809D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParsePatternComponentBinary(uint64_t a1, uint64_t *a2, int a3)
{
  const std::string *v5;
  __int128 *i;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  int v17;
  _QWORD *v18;
  std::string *v19;
  void *v20;
  _QWORD *v21;
  int *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  std::string *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _QWORD *v30;
  std::string *v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  int *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  std::string *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v57;
  __int128 v58;
  std::string *__str;
  std::string *v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 *v64;
  char v65;
  std::string v66[2];
  void **v67[2];

  siri::dialogengine::ParseStringList(*(uint64_t **)(a1 + 48), 0, &v63);
  v5 = (const std::string *)v63;
  for (i = v64; v5 != (const std::string *)i; ++v5)
  {
    v7 = (char *)operator new(0x140uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_1E7931640;
    *(_OWORD *)(v7 + 24) = 0u;
    v8 = v7 + 24;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_OWORD *)(v7 + 248) = 0u;
    *((_QWORD *)v7 + 39) = 0;
    *(_OWORD *)(v7 + 264) = 0u;
    *(_OWORD *)(v7 + 280) = 0u;
    *(_OWORD *)(v7 + 296) = 0u;
    *(_QWORD *)&v62 = v7 + 24;
    *((_QWORD *)&v62 + 1) = v7;
    std::string::operator=((std::string *)v7 + 1, v5);
    if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v64 - v63) >> 3) >= 2)
    {
      memset(v66, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(v66, (__int128 *)(v63 + 24), v64, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v64 - v63 - 24) >> 3));
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v7 + 296), (std::string *)v66[0].__r_.__value_.__l.__data_, (__int128 *)v66[0].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66[0].__r_.__value_.__l.__size_ - v66[0].__r_.__value_.__r.__words[0]) >> 3));
      __str = v66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    }
    std::string::operator=((std::string *)v8, v5);
    v7[120] = siri::dialogengine::StringToBool(*(const std::string **)(a1 + 56));
    std::string::operator=((std::string *)(v7 + 152), *(const std::string **)(a1 + 72));
    std::string::operator=((std::string *)(v7 + 128), *(const std::string **)(a1 + 64));
    __str = 0;
    v60 = 0;
    v61 = 0;
    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
      v10 = (uint64_t *)(v9 + 8);
    else
      v10 = 0;
    v11 = *(int *)(a1 + 32);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 8 * v11;
      do
      {
        v14 = *v10;
        if ((unint64_t)v12 >= v61)
        {
          v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__str, (__int128 *)v14);
        }
        else
        {
          if (*(char *)(v14 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
          }
          else
          {
            v15 = *(_OWORD *)v14;
            v12->__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 16);
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
          }
          ++v12;
        }
        v60 = v12;
        ++v10;
        v13 -= 8;
      }
      while (v13);
      v8 = (char *)v62;
    }
    else
    {
      v12 = 0;
    }
    if (v8 + 152 != (char *)&__str)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v8 + 152), __str, (__int128 *)v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)__str) >> 3));
    v16 = *(void **)(a1 + 96);
    if (!v16)
      v16 = &siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
    siri::dialogengine::ParsePatternUsagesBinary((siri::dialogengine *)v66, *((const siri::dialogengine::PatternSchemaBinary::Usage **)v16 + 3), *((_DWORD *)v16 + 8));
    if (v8 + 24 != (char *)v66)
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((_QWORD *)v8 + 3, (uint64_t *)v66[0].__r_.__value_.__l.__data_, (uint64_t *)v66[0].__r_.__value_.__l.__size_, (uint64_t)(v66[0].__r_.__value_.__l.__size_ - v66[0].__r_.__value_.__r.__words[0]) >> 4);
    v67[0] = (void **)v66;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v67);
    v17 = *(_DWORD *)(a1 + 16);
    if ((v17 & 0x10) != 0)
    {
      v18 = *(_QWORD **)(a1 + 80);
      if (!v18)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v66, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5081);
        v19 = google::protobuf::internal::LogMessage::operator<<(v66, "CHECK failed: !value || full_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v65, (const char **)&v19->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v66[0].__r_.__value_.__l.__data_);
        v18 = *(_QWORD **)(a1 + 80);
      }
      if (!v18)
        v18 = &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      v20 = (void *)v18[9];
      if (!v20)
        v20 = &siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
      siri::dialogengine::ParsePatternUsagesBinary((siri::dialogengine *)v66, *((const siri::dialogengine::PatternSchemaBinary::Usage **)v20 + 3), *((_DWORD *)v20 + 8));
      if (v8 + 48 != (char *)v66)
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((_QWORD *)v8 + 6, (uint64_t *)v66[0].__r_.__value_.__l.__data_, (uint64_t *)v66[0].__r_.__value_.__l.__size_, (uint64_t)(v66[0].__r_.__value_.__l.__size_ - v66[0].__r_.__value_.__r.__words[0]) >> 4);
      v67[0] = (void **)v66;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v67);
      v21 = *(_QWORD **)(a1 + 80);
      if (!v21)
        v21 = &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      siri::dialogengine::ParsePatternOverridesBinary((siri::dialogengine *)v66, (const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((unsigned int *)v21 + 8), v21[5]);
      if (v8 + 176 != (char *)v66)
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((_QWORD *)v8 + 22, (uint64_t *)v66[0].__r_.__value_.__l.__data_, (uint64_t *)v66[0].__r_.__value_.__l.__size_, (uint64_t)(v66[0].__r_.__value_.__l.__size_ - v66[0].__r_.__value_.__r.__words[0]) >> 4);
      v67[0] = (void **)v66;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v67);
      memset(v66, 0, 24);
      v22 = *(int **)(a1 + 80);
      if (!v22)
        v22 = (int *)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      v23 = *((_QWORD *)v22 + 8);
      if (v23)
        v24 = (uint64_t *)(v23 + 8);
      else
        v24 = 0;
      v25 = v22[14];
      if ((_DWORD)v25)
      {
        v26 = 0;
        v27 = 8 * v25;
        do
        {
          v28 = *v24;
          if ((unint64_t)v26 >= v66[0].__r_.__value_.__r.__words[2])
          {
            v26 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v66, (__int128 *)v28);
          }
          else
          {
            if (*(char *)(v28 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)v28, *(_QWORD *)(v28 + 8));
            }
            else
            {
              v29 = *(_OWORD *)v28;
              v26->__r_.__value_.__r.__words[2] = *(_QWORD *)(v28 + 16);
              *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v29;
            }
            ++v26;
          }
          v66[0].__r_.__value_.__l.__size_ = (std::string::size_type)v26;
          ++v24;
          v27 -= 8;
        }
        while (v27);
        v8 = (char *)v62;
      }
      else
      {
        v26 = 0;
      }
      if (v8 + 224 != (char *)v66)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v8 + 224), (std::string *)v66[0].__r_.__value_.__l.__data_, (__int128 *)v26, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v26 - v66[0].__r_.__value_.__r.__words[0]) >> 3));
      v67[0] = (void **)v66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v67);
      v17 = *(_DWORD *)(a1 + 16);
    }
    if ((v17 & 0x20) != 0)
    {
      v30 = *(_QWORD **)(a1 + 88);
      if (!v30)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v66, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5141);
        v31 = google::protobuf::internal::LogMessage::operator<<(v66, "CHECK failed: !value || supporting_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v65, (const char **)&v31->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v66[0].__r_.__value_.__l.__data_);
        v30 = *(_QWORD **)(a1 + 88);
      }
      v32 = v62;
      if (!v30)
        v30 = &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      v33 = (void *)v30[9];
      if (!v33)
        v33 = &siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
      siri::dialogengine::ParsePatternUsagesBinary((siri::dialogengine *)v66, *((const siri::dialogengine::PatternSchemaBinary::Usage **)v33 + 3), *((_DWORD *)v33 + 8));
      if ((std::string *)(v32 + 72) != v66)
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((_QWORD *)(v32 + 72), (uint64_t *)v66[0].__r_.__value_.__l.__data_, (uint64_t *)v66[0].__r_.__value_.__l.__size_, (uint64_t)(v66[0].__r_.__value_.__l.__size_ - v66[0].__r_.__value_.__r.__words[0]) >> 4);
      v67[0] = (void **)v66;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v67);
      v34 = *(_QWORD **)(a1 + 88);
      if (!v34)
        v34 = &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      siri::dialogengine::ParsePatternOverridesBinary((siri::dialogengine *)v66, (const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((unsigned int *)v34 + 8), v34[5]);
      if ((std::string *)(v32 + 200) != v66)
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((_QWORD *)(v32 + 200), (uint64_t *)v66[0].__r_.__value_.__l.__data_, (uint64_t *)v66[0].__r_.__value_.__l.__size_, (uint64_t)(v66[0].__r_.__value_.__l.__size_ - v66[0].__r_.__value_.__r.__words[0]) >> 4);
      v67[0] = (void **)v66;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v67);
      memset(v66, 0, 24);
      v35 = *(int **)(a1 + 88);
      if (!v35)
        v35 = (int *)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
      v36 = *((_QWORD *)v35 + 8);
      if (v36)
        v37 = (uint64_t *)(v36 + 8);
      else
        v37 = 0;
      v38 = v35[14];
      if ((_DWORD)v38)
      {
        v39 = 0;
        v40 = 8 * v38;
        do
        {
          v41 = *v37;
          if ((unint64_t)v39 >= v66[0].__r_.__value_.__r.__words[2])
          {
            v39 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v66, (__int128 *)v41);
          }
          else
          {
            if (*(char *)(v41 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)v41, *(_QWORD *)(v41 + 8));
            }
            else
            {
              v42 = *(_OWORD *)v41;
              v39->__r_.__value_.__r.__words[2] = *(_QWORD *)(v41 + 16);
              *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v42;
            }
            ++v39;
          }
          v66[0].__r_.__value_.__l.__size_ = (std::string::size_type)v39;
          ++v37;
          v40 -= 8;
        }
        while (v40);
        v32 = v62;
      }
      else
      {
        v39 = 0;
      }
      if ((std::string *)(v32 + 248) != v66)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v32 + 248), (std::string *)v66[0].__r_.__value_.__l.__data_, (__int128 *)v39, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v39 - v66[0].__r_.__value_.__r.__words[0]) >> 3));
      v67[0] = (void **)v66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v67);
    }
    v43 = *a2;
    v44 = v62;
    if (a3)
    {
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
      v57 = v62;
      if (*((_QWORD *)&v62 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      if (v44)
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v43 + 144), &v57);
      if (!v45)
        goto LABEL_108;
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v49 = __ldaxr(p_shared_owners);
      while (__stlxr(v49 - 1, p_shared_owners));
    }
    else
    {
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
      v58 = v62;
      if (*((_QWORD *)&v62 + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      if (v44)
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v43 + 120), &v58);
      if (!v45)
        goto LABEL_108;
      v52 = (unint64_t *)&v45->__shared_owners_;
      do
        v49 = __ldaxr(v52);
      while (__stlxr(v49 - 1, v52));
    }
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
LABEL_108:
    v66[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
    if (*((_QWORD *)&v62 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  v66[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
}

void sub_1BFA81160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void **v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, void **);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va3);
  *(_QWORD *)(v6 - 96) = va;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 96));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  va_copy((va_list)v8, va2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseCustomCombinationListBinary(siri::dialogengine *this, siri::dialogengine::Context *a2, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a3, siri::dialogengine::VisualComponentsCombination::Entry *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v8;
  char **v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v13;
  int v14;
  void *v15;
  unint64_t *v16;
  uint64_t v17;
  int EntryTypeFromString;
  siri::dialogengine::VisualComponentsCombination::Entry *v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  __int128 v37;
  void *v38[2];
  unsigned __int8 v39;
  void *v40[2];
  unsigned __int8 v41;
  void *v42[2];
  unsigned __int8 v43;
  void *__p[2];
  _QWORD v45[11];
  char v46;
  uint64_t v47;

  v4 = *((_QWORD *)a2 + 5);
  if (v4)
    v5 = (uint64_t *)(v4 + 8);
  else
    v5 = 0;
  v6 = *((int *)a2 + 8);
  if ((_DWORD)v6)
  {
    v8 = &v5[v6];
    v36 = (void *)*MEMORY[0x1E0DE4F50];
    v34 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v35 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    v9 = (char **)((char *)a3 + 32);
    v33 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v10 = *v5;
      v11 = (std::__shared_weak_count *)operator new(0x50uLL);
      v11->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      v11->__shared_weak_owners_ = 0;
      v11[1].std::__shared_count = 0u;
      v13 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)&v11[1];
      v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931730;
      *(_OWORD *)&v11[1].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v11[2].__shared_owners_ = 0u;
      v11[3].__vftable = 0;
      *(_QWORD *)&v37 = v11 + 1;
      *((_QWORD *)&v37 + 1) = v11;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>(v9, &v37);
      v14 = *(_DWORD *)(v10 + 32);
      if (v14 == 2)
        break;
      v15 = &siri::dialogengine::PatternSchemaBinary::_MapValue_default_instance_;
      if (v14 != 1)
        goto LABEL_10;
      LODWORD(v11[1].__vftable) = 4;
      std::string::operator=((std::string *)&v11[1].__shared_owners_, *(const std::string **)(v10 + 24));
      do
LABEL_50:
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      if (++v5 == v8)
        return;
    }
    v15 = *(void **)(v10 + 24);
LABEL_10:
    v16 = (unint64_t *)*((_QWORD *)v15 + 5);
    if (*v16 == 1)
    {
      __p[1] = v16;
      google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(__p, v16[3]);
      v17 = *((_QWORD *)__p[0] + 3);
      EntryTypeFromString = siri::dialogengine::GetEntryTypeFromString(v17);
      *(_DWORD *)v13 = EntryTypeFromString;
      if (EntryTypeFromString)
      {
        siri::dialogengine::ParseCustomCombinationListBinary(this, (siri::dialogengine::Context *)(v17 + 24), v13, v19);
      }
      else
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Invalid keyword; Expected '",
                27);
        std::string::basic_string[abi:ne180100]<0>(v42, "and");
        if ((v43 & 0x80u) == 0)
          v21 = v42;
        else
          v21 = (void **)v42[0];
        if ((v43 & 0x80u) == 0)
          v22 = v43;
        else
          v22 = (uint64_t)v42[1];
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"'/'", 3);
        std::string::basic_string[abi:ne180100]<0>(v40, "or");
        if ((v41 & 0x80u) == 0)
          v25 = v40;
        else
          v25 = (void **)v40[0];
        if ((v41 & 0x80u) == 0)
          v26 = v41;
        else
          v26 = (uint64_t)v40[1];
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"'/'", 3);
        std::string::basic_string[abi:ne180100]<0>(v38, "andor");
        if ((v39 & 0x80u) == 0)
          v29 = v38;
        else
          v29 = (void **)v38[0];
        if ((v39 & 0x80u) == 0)
          v30 = v39;
        else
          v30 = (uint64_t)v38[1];
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"'", 1);
        if ((char)v39 < 0)
          operator delete(v38[0]);
        if ((char)v41 < 0)
          operator delete(v40[0]);
        if ((char)v43 < 0)
          operator delete(v42[0]);
        std::stringbuf::str();
        if (this)
          siri::dialogengine::Context::AddSchemaError((uint64_t *)this, (__int128 *)v42);
        else
          siri::dialogengine::Log::LogWithLevel((uint64_t)v42, 3u);
        if ((char)v43 < 0)
          operator delete(v42[0]);
        __p[0] = v36;
        *(void **)((char *)__p + *((_QWORD *)v36 - 3)) = v35;
        v45[0] = v34;
        v45[1] = v33;
        if (v46 < 0)
          operator delete((void *)v45[9]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1C3B8D80C](&v47);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Expected map message to have a single entry");
      if (this)
        siri::dialogengine::Context::AddSchemaError((uint64_t *)this, (__int128 *)__p);
      else
        siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
      if (SHIBYTE(v45[0]) < 0)
        operator delete(__p[0]);
    }
    goto LABEL_50;
  }
}

void sub_1BFA81640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a35 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a36);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VisualComponentsCombination::Entry::~Entry(void **this)
{
  void **v2;

  v2 = this + 4;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  std::string *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  v4 = (_QWORD *)a1[1];
  v5 = v4[3];
  v6 = v4[1];
  if (v5 != v6 && !*(_QWORD *)(v4[4] + 8 * v5))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 423);
    v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: m_->index_of_first_non_null_ == m_->num_buckets_ || m_->table_[m_->index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v4 = (_QWORD *)a1[1];
    v6 = v4[1];
  }
  *a1 = 0;
  if (v6 <= a2)
  {
LABEL_9:
    a1[2] = a2;
  }
  else
  {
    v8 = v4[4];
    while (1)
    {
      v9 = *(_QWORD **)(v8 + 8 * a2);
      if (v9)
        break;
      if (v6 == ++a2)
      {
        a2 = v6;
        goto LABEL_9;
      }
    }
    v10 = *(_QWORD **)(v8 + 8 * (a2 ^ 1));
    a1[2] = a2;
    if (v9 == v10)
    {
      if (!v9[3])
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 432);
        v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !tree->empty(): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      }
      *a1 = *(_QWORD *)(*v9 + 32);
    }
    else
    {
      *a1 = v9;
    }
  }
}

void sub_1BFA81850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::VisualComponentsCombination::Entry>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931730;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::VisualComponentsCombination::Entry>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931730;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

void std::__shared_ptr_emplace<siri::dialogengine::VisualComponentsCombination::Entry>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 56);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1BFA81968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParsePatternOverridesBinary(siri::dialogengine *this, const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  std::vector<std::string> *v8;
  void *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string *v21[2];
  unint64_t v22;
  __int128 v23;
  char v24;
  std::string v25[2];
  void **v26;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a3)
    v3 = (uint64_t *)(a3 + 8);
  else
    v3 = 0;
  if ((_DWORD)a2)
  {
    v5 = &v3[(int)a2];
    do
    {
      v6 = *v3;
      v7 = (char *)operator new(0x48uLL);
      *(_OWORD *)(v7 + 8) = 0u;
      *(_QWORD *)v7 = &off_1E7931690;
      *(_OWORD *)(v7 + 24) = 0u;
      v8 = (std::vector<std::string> *)(v7 + 24);
      *(_OWORD *)(v7 + 40) = 0u;
      *(_OWORD *)(v7 + 56) = 0u;
      *(_QWORD *)&v23 = v7 + 24;
      *((_QWORD *)&v23 + 1) = v7;
      v22 = 0;
      *(_OWORD *)v21 = 0u;
      if ((*(_DWORD *)(v6 + 16) & 1) != 0)
      {
        v9 = *(void **)(v6 + 48);
        if (!v9)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 6121);
          v10 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: !value || usage_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v10->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
          v9 = *(void **)(v6 + 48);
        }
        if (!v9)
          v9 = &siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
        siri::dialogengine::ParsePatternUsagesBinary((siri::dialogengine *)v25, *((const siri::dialogengine::PatternSchemaBinary::Usage **)v9 + 3), *((_DWORD *)v9 + 8));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(v8, (uint64_t *)v25[0].__r_.__value_.__l.__data_, (uint64_t *)v25[0].__r_.__value_.__l.__size_, (uint64_t)(v25[0].__r_.__value_.__l.__size_ - v25[0].__r_.__value_.__r.__words[0]) >> 4);
        v26 = (void **)v25;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v26);
      }
      v11 = *(_QWORD *)(v6 + 40);
      if (v11)
        v12 = (uint64_t *)(v11 + 8);
      else
        v12 = 0;
      v13 = *(int *)(v6 + 32);
      if ((_DWORD)v13)
      {
        v14 = v21[1];
        v15 = 8 * v13;
        do
        {
          v16 = *v12;
          if ((unint64_t)v14 >= v22)
          {
            v14 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v21, (__int128 *)v16);
          }
          else
          {
            if (*(char *)(v16 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
            }
            else
            {
              v17 = *(_OWORD *)v16;
              v14->__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
              *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v17;
            }
            ++v14;
          }
          v21[1] = v14;
          ++v12;
          v15 -= 8;
        }
        while (v15);
        v8 = (std::vector<std::string> *)v23;
      }
      if (&v8[1] != (std::vector<std::string> *)v21)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v8 + 1, v21[0], (__int128 *)v21[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v21[1] - (char *)v21[0]) >> 3));
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)this, &v23);
      v25[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v25);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      ++v3;
    }
    while (v3 != v5);
  }
}

void sub_1BFA81BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va2);
  *(_QWORD *)(v2 - 88) = va;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 88));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaOverride>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaOverride>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaOverride>::__on_zero_shared(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 24);
  v2 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaComponent>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaComponent>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaComponent>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 296);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 272);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 224);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 200);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  v2 = (void **)(a1 + 96);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 72);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  std::string *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  v4 = (_QWORD *)a1[1];
  v5 = v4[3];
  v6 = v4[1];
  if (v5 != v6 && !*(_QWORD *)(v4[4] + 8 * v5))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 423);
    v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: m_->index_of_first_non_null_ == m_->num_buckets_ || m_->table_[m_->index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v4 = (_QWORD *)a1[1];
    v6 = v4[1];
  }
  *a1 = 0;
  if (v6 <= a2)
  {
LABEL_9:
    a1[2] = a2;
  }
  else
  {
    v8 = v4[4];
    while (1)
    {
      v9 = *(_QWORD **)(v8 + 8 * a2);
      if (v9)
        break;
      if (v6 == ++a2)
      {
        a2 = v6;
        goto LABEL_9;
      }
    }
    v10 = *(_QWORD **)(v8 + 8 * (a2 ^ 1));
    a1[2] = a2;
    if (v9 == v10)
    {
      if (!v9[3])
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 432);
        v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !tree->empty(): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      }
      *a1 = *(_QWORD *)(*v9 + 32);
    }
    else
    {
      *a1 = v9;
    }
  }
}

void sub_1BFA81F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  char v19;
  std::string v20[2];

  v2 = *a1;
  v3 = (unsigned __int8 *)*((_QWORD *)*a1 + 4);
  if (v3)
    goto LABEL_2;
  v18 = 0;
  v4 = (uint64_t)a1[1];
  if (!v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 481);
    v5 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: node_ != NULL && m_ != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    v2 = *a1;
    v4 = (uint64_t)a1[1];
  }
  v6 = (unint64_t)a1[2] & (*(_QWORD *)(v4 + 8) - 1);
  a1[2] = (unsigned __int8 *)v6;
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_QWORD *)(v7 + 8 * v6);
  if ((unsigned __int8 *)v8 == v2)
    goto LABEL_13;
  if (v8 && v8 != *(_QWORD *)(v7 + 8 * (v6 ^ 1)))
  {
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 32);
      if (!v8)
        break;
      if ((unsigned __int8 *)v8 == v2)
        goto LABEL_13;
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v20, v4, v2, (uint64_t *)&v18);
  v6 = v20[0].__r_.__value_.__r.__words[2];
  a1[2] = (unsigned __int8 *)v20[0].__r_.__value_.__r.__words[2];
  v9 = *((_QWORD *)a1[1] + 4);
  v10 = *(_QWORD *)(v9 + 8 * v6);
  if (!v10 || v10 != *(_QWORD *)(v9 + 8 * (v6 ^ 1)))
  {
LABEL_13:
    v11 = v6 + 1;
LABEL_14:
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::SearchFrom(a1, v11);
    return a1;
  }
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 456);
    v13 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (bucket_index_ & 1) == (0u): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v13->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    v6 = (uint64_t)a1[2];
    v10 = *(_QWORD *)(*((_QWORD *)a1[1] + 4) + 8 * v6);
  }
  v14 = (uint64_t)v18;
  v15 = (_QWORD *)v18[1];
  if (v15)
  {
    do
    {
      v16 = v15;
      v15 = (_QWORD *)*v15;
    }
    while (v15);
  }
  else
  {
    do
    {
      v16 = *(_QWORD **)(v14 + 16);
      v17 = *v16 == v14;
      v14 = (uint64_t)v16;
    }
    while (!v17);
  }
  v18 = v16;
  if (v16 == (_QWORD *)(v10 + 8))
  {
    v11 = v6 + 2;
    goto LABEL_14;
  }
  v3 = (unsigned __int8 *)v16[4];
LABEL_2:
  *a1 = v3;
  return a1;
}

void sub_1BFA820E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::SearchFrom(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  std::string *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  v4 = (_QWORD *)a1[1];
  v5 = v4[3];
  v6 = v4[1];
  if (v5 != v6 && !*(_QWORD *)(v4[4] + 8 * v5))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 423);
    v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: m_->index_of_first_non_null_ == m_->num_buckets_ || m_->table_[m_->index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v4 = (_QWORD *)a1[1];
    v6 = v4[1];
  }
  *a1 = 0;
  if (v6 <= a2)
  {
LABEL_9:
    a1[2] = a2;
  }
  else
  {
    v8 = v4[4];
    while (1)
    {
      v9 = *(_QWORD **)(v8 + 8 * a2);
      if (v9)
        break;
      if (v6 == ++a2)
      {
        a2 = v6;
        goto LABEL_9;
      }
    }
    v10 = *(_QWORD **)(v8 + 8 * (a2 ^ 1));
    a1[2] = a2;
    if (v9 == v10)
    {
      if (!v9[3])
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 432);
        v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !tree->empty(): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      }
      *a1 = *(_QWORD *)(*v9 + 32);
    }
    else
    {
      *a1 = v9;
    }
  }
}

void sub_1BFA82238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  result = google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(a2, a3);
  v9 = result;
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(v10 + 8 * result);
  if (v11)
  {
    if (v11 != *(_QWORD *)(v10 + 8 * (result ^ 1)))
    {
      while (1)
      {
        result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v13, (unsigned __int8 *)v11, a3);
        if ((_DWORD)result)
          break;
        v11 = *(_QWORD *)(v11 + 32);
        if (!v11)
          goto LABEL_10;
      }
      *a1 = v11;
      goto LABEL_12;
    }
    v9 = result & 0xFFFFFFFFFFFFFFFELL;
    v12 = *(_QWORD *)(v10 + 8 * (result & 0xFFFFFFFFFFFFFFFELL));
    result = std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v12, a3);
    if (v12 + 8 != result)
    {
      if (a4)
        *a4 = result;
      *a1 = *(_QWORD *)(result + 32);
LABEL_12:
      a1[1] = a2;
      a1[2] = v9;
      goto LABEL_13;
    }
  }
LABEL_10:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_13:
  a1[3] = v9;
  return result;
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber(uint64_t a1, _BYTE *a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  if ((char)a2[23] >= 0)
    v2 = a2;
  else
    v2 = *(_BYTE **)a2;
  v3 = *v2;
  if (*v2)
  {
    v4 = 0;
    v5 = v2 + 1;
    do
    {
      v4 = 5 * v4 + v3;
      v6 = *v5++;
      v3 = v6;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  return (*(_QWORD *)(a1 + 8) - 1) & (*(_QWORD *)(a1 + 16) + v4);
}

uint64_t std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, *(_QWORD **)(v5 + 32)))
    return v2;
  return v5;
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaUsage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79315F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaUsage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79315F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaUsage>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaAliasGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaAliasGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaAliasGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaConcreteGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaConcreteGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931900;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::PatternSchemaConcreteGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

siri::dialogengine::PatternSchema *std::unique_ptr<siri::dialogengine::PatternSchema>::reset[abi:ne180100](siri::dialogengine::PatternSchema **a1)
{
  siri::dialogengine::PatternSchema *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    siri::dialogengine::PatternSchema::~PatternSchema(result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

void siri::dialogengine::PatternSchema::~PatternSchema(siri::dialogengine::PatternSchema *this)
{
  void **v2;

  v2 = (void **)((char *)this + 192);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)this + 22));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)this + 19));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)this + 16));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__shared_ptr_pointer<siri::dialogengine::PatternSchema *,std::shared_ptr<siri::dialogengine::PatternSchema>::__shared_ptr_default_delete<siri::dialogengine::PatternSchema,siri::dialogengine::PatternSchema>,std::allocator<siri::dialogengine::PatternSchema>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

siri::dialogengine::PatternSchema *std::__shared_ptr_pointer<siri::dialogengine::PatternSchema *,std::shared_ptr<siri::dialogengine::PatternSchema>::__shared_ptr_default_delete<siri::dialogengine::PatternSchema,siri::dialogengine::PatternSchema>,std::allocator<siri::dialogengine::PatternSchema>>::__on_zero_shared(uint64_t a1)
{
  siri::dialogengine::PatternSchema *result;

  result = *(siri::dialogengine::PatternSchema **)(a1 + 24);
  if (result)
  {
    siri::dialogengine::PatternSchema::~PatternSchema(result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::PatternSchema *,std::shared_ptr<siri::dialogengine::PatternSchema>::__shared_ptr_default_delete<siri::dialogengine::PatternSchema,siri::dialogengine::PatternSchema>,std::allocator<siri::dialogengine::PatternSchema>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void siri::dialogengine::ParsePatternSchemaYAML(uint64_t *a1@<X0>, uint64_t a2@<X1>, const std::string *a3@<X2>, _OWORD *a4@<X8>)
{
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  std::string *v25;
  int data;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type size;
  int v34;
  const std::string *v35;
  unsigned __int8 *v36;
  unint64_t v38;
  BOOL v42;
  __int128 v46;
  __int128 v48;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  std::string *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  std::string *v79;
  __int128 v80;
  const std::string::value_type *v81;
  std::string::size_type v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  int v87;
  const std::string::value_type *v88;
  std::string::size_type v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  unint64_t *v95;
  void *v96;
  int v97;
  int v98;
  std::string *v100;
  __int128 v101;
  int v102;
  const std::string::value_type *v103;
  std::string::size_type v104;
  std::string *v105;
  __int128 v106;
  __int128 v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  std::string::size_type v120;
  std::string::size_type v121;
  _QWORD *v122;
  std::string::size_type v123;
  std::string *v124;
  uint64_t v125;
  __int128 v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  __int128 v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  _BYTE *v158;
  _BYTE *v159;
  int64x2_t *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::string *v183;
  __int128 v184;
  int v185;
  const std::string::value_type *v186;
  std::string::size_type v187;
  std::string *v188;
  __int128 v189;
  __int128 v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  _BYTE *v195;
  _BYTE *v196;
  std::string *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  __int128 v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  _BYTE *v227;
  _BYTE *v228;
  std::string *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  _QWORD *v272;
  _QWORD *exception;
  _QWORD *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  const std::string *v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  _BYTE v284[32];
  std::__shared_weak_count *v285;
  char v286;
  std::string v287;
  std::__shared_weak_count *v288;
  uint64_t v289;
  void *v290;
  char v291;
  std::__shared_weak_count *v292;
  _BYTE v293[40];
  std::__shared_weak_count *v294;
  _BYTE v295[48];
  _BYTE __str[48];
  uint64_t **v297;
  std::string v298;
  std::string v299;
  std::string v300;
  _BYTE v301[40];
  std::__shared_weak_count *v302;
  _BYTE v303[40];
  std::__shared_weak_count *v304;
  __int128 v305;
  __int128 v306;
  std::__shared_weak_count *v307;
  char v308;
  __int128 __s;
  uint64_t v310;
  std::__shared_weak_count *v311;
  void *v312;
  char v313;
  std::__shared_weak_count *v314;
  std::string *v315[2];
  char v316[8];
  __int128 v317;
  __int128 v318;
  __int128 v319;
  std::string v320;
  std::string v321;
  std::string v322;
  std::string v323;
  __int128 v324;
  char v325;
  char v326;
  std::string v327;

  v316[0] = 1;
  v317 = 0u;
  v318 = 0u;
  v319 = 0u;
  v7 = (char *)operator new(0xF0uLL);
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = &off_1E79319A0;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *((_QWORD *)v7 + 17) = 0;
  *((_QWORD *)v7 + 18) = v7 + 152;
  *((_OWORD *)v7 + 11) = 0u;
  *((_QWORD *)v7 + 21) = v7 + 176;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *((_QWORD *)v7 + 24) = v7 + 200;
  *(_OWORD *)(v7 + 216) = 0u;
  *((_QWORD *)v7 + 29) = 0;
  v315[0] = (std::string *)(v7 + 24);
  v315[1] = (std::string *)v7;
  std::string::operator=((std::string *)v7 + 1, a3);
  std::string::operator=((std::string *)v7 + 2, (const std::string *)a2);
  YAML::LoadFile((uint64_t)&v305);
  YAML::Node::operator=((uint64_t)v316, (YAML::Node *)&v305);
  v8 = v307;
  if (v307)
  {
    p_shared_owners = (unint64_t *)&v307->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(v306) < 0)
    operator delete(*((void **)&v305 + 1));
  if (!v316[0] || !*((_QWORD *)&v319 + 1))
  {
    *(_DWORD *)v303 = 0;
    memset(&v303[8], 0, 32);
LABEL_19:
    v304 = 0;
    goto LABEL_20;
  }
  YAML::detail::node_data::begin(***((_QWORD ***)&v319 + 1), (uint64_t)&v305);
  v11 = *((_QWORD *)&v318 + 1);
  v12 = (std::__shared_weak_count *)v319;
  if (!(_QWORD)v319)
  {
    *(_OWORD *)v303 = v305;
    *(_OWORD *)&v303[16] = v306;
    *(_QWORD *)&v303[32] = *((_QWORD *)&v318 + 1);
    goto LABEL_19;
  }
  v13 = (unint64_t *)(v319 + 8);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  *(_OWORD *)v303 = v305;
  *(_OWORD *)&v303[16] = v306;
  *(_QWORD *)&v303[32] = v11;
  v304 = v12;
  do
    v15 = __ldxr(v13);
  while (__stxr(v15 + 1, v13));
  do
    v16 = __ldaxr(v13);
  while (__stlxr(v16 - 1, v13));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_20:
  v279 = a3;
  if (!v316[0] || !*((_QWORD *)&v319 + 1))
  {
    *(_DWORD *)v301 = 0;
    memset(&v301[8], 0, 32);
LABEL_31:
    v302 = 0;
    goto LABEL_32;
  }
  YAML::detail::node_data::end(***((_QWORD ***)&v319 + 1), (uint64_t)&v305);
  v17 = *((_QWORD *)&v318 + 1);
  v18 = (std::__shared_weak_count *)v319;
  if (!(_QWORD)v319)
  {
    *(_OWORD *)v301 = v305;
    *(_OWORD *)&v301[16] = v306;
    *(_QWORD *)&v301[32] = *((_QWORD *)&v318 + 1);
    goto LABEL_31;
  }
  v19 = (unint64_t *)(v319 + 8);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  *(_OWORD *)v301 = v305;
  *(_OWORD *)&v301[16] = v306;
  *(_QWORD *)&v301[32] = v17;
  v302 = v18;
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  do
    v22 = __ldaxr(v19);
  while (__stlxr(v22 - 1, v19));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_32:
  while (2)
  {
    if (*(_DWORD *)v303 != *(_DWORD *)v301)
      goto LABEL_37;
    v24 = &v301[8];
    v23 = &v303[8];
    if (*(_DWORD *)v303 != 1)
    {
      if (*(_DWORD *)v303 != 2)
        break;
      v24 = &v301[16];
      v23 = &v303[16];
    }
    if (*(_QWORD *)v23 != *(_QWORD *)v24)
    {
LABEL_37:
      YAML::detail::iterator_base<YAML::detail::iterator_value>::operator*((uint64_t)&v305, (uint64_t)v303);
      if (!v308)
      {
        exception = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v310) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v284, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        }
        else
        {
          *(_OWORD *)v284 = __s;
          *(_QWORD *)&v284[16] = v310;
        }
        YAML::InvalidNode::InvalidNode(exception, (uint64_t)v284);
      }
      *(_QWORD *)v284 = &v308;
      YAML::as_if<std::string,void>::operator()(&v300, (YAML::Node **)v284);
      if ((*((_BYTE *)&v300.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        v25 = &v300;
        switch(*((_BYTE *)&v300.__r_.__value_.__s + 23))
        {
          case 4:
            data = (int)v300.__r_.__value_.__l.__data_;
            goto LABEL_43;
          case 6:
            goto LABEL_212;
          case 8:
            goto LABEL_78;
          case 0xA:
            if (v300.__r_.__value_.__r.__words[0] != 0x7461636572706564
              || LOWORD(v300.__r_.__value_.__r.__words[1]) != 25701)
            {
              HIDWORD(v38) = HIBYTE(v300.__r_.__value_.__r.__words[2]);
              LODWORD(v38) = (HIBYTE(v300.__r_.__value_.__r.__words[2]) << 24) - 100663296;
              v25 = &v300;
              switch((v38 >> 25))
              {
                case 0u:
                  goto LABEL_212;
                case 1u:
                  goto LABEL_78;
                case 3u:
                  goto LABEL_72;
                case 6u:
                  goto LABEL_80;
                default:
                  goto LABEL_216;
              }
            }
            goto LABEL_176;
          case 0xB:
            if (v300.__r_.__value_.__r.__words[0] != 0x7470697263736564
              || *(std::string::size_type *)((char *)v300.__r_.__value_.__r.__words + 3) != 0x6E6F697470697263)
            {
              goto LABEL_216;
            }
            goto LABEL_201;
          case 0xC:
LABEL_72:
            if (v300.__r_.__value_.__r.__words[0] == 0x416E6F6973726576
              && LODWORD(v300.__r_.__value_.__r.__words[1]) == 1684366436)
            {
              goto LABEL_169;
            }
            if (HIBYTE(v300.__r_.__value_.__r.__words[2]) == 6)
              goto LABEL_211;
            if (HIBYTE(v300.__r_.__value_.__r.__words[2]) != 8)
              goto LABEL_216;
LABEL_78:
            if (v300.__r_.__value_.__r.__words[0] == 0x73676E6974746573)
              goto LABEL_149;
            goto LABEL_216;
          case 0x12:
LABEL_80:
            if (v300.__r_.__value_.__r.__words[0] == 0x6465726975716572
              && v300.__r_.__value_.__l.__size_ == 0x6574656D61726150
              && LOWORD(v300.__r_.__value_.__r.__words[2]) == 29554)
            {
              goto LABEL_159;
            }
            if (HIBYTE(v300.__r_.__value_.__r.__words[2]) == 6)
            {
LABEL_211:
              v25 = &v300;
              goto LABEL_212;
            }
            if (HIBYTE(v300.__r_.__value_.__r.__words[2]) != 18)
              goto LABEL_216;
            v42 = v300.__r_.__value_.__r.__words[0] == 0x64657475706D6F63
               && v300.__r_.__value_.__l.__size_ == 0x6574656D61726150;
            if (!v42 || LOWORD(v300.__r_.__value_.__r.__words[2]) != 29554)
              goto LABEL_216;
            goto LABEL_138;
          default:
            goto LABEL_216;
        }
      }
      switch(v300.__r_.__value_.__l.__size_)
      {
        case 4uLL:
          data = *(_DWORD *)v300.__r_.__value_.__l.__data_;
LABEL_43:
          if (data != 1701667182)
            goto LABEL_216;
          YAML::Node::operator[]<std::string>((uint64_t)v284, (YAML::Node *)v316, (uint64_t)&v300);
          if (!v284[0])
          {
            v274 = __cxa_allocate_exception(0x38uLL);
            if ((v284[31] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)&v284[8], *(std::string::size_type *)&v284[16]);
            else
              v320 = *(std::string *)&v284[8];
            YAML::InvalidNode::InvalidNode(v274, (uint64_t)&v320);
          }
          v320.__r_.__value_.__r.__words[0] = (std::string::size_type)v284;
          YAML::as_if<std::string,void>::operator()((std::string *)__str, (YAML::Node **)&v320);
          v27 = v285;
          if (v285)
          {
            v28 = (unint64_t *)&v285->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          if ((v284[31] & 0x80000000) != 0)
            operator delete(*(void **)&v284[8]);
          v30 = __str[23];
          v31 = *(_QWORD *)&__str[8];
          if (__str[23] >= 0)
            v32 = __str[23];
          else
            v32 = *(_QWORD *)&__str[8];
          size = HIBYTE(v279->__r_.__value_.__r.__words[2]);
          v34 = (char)size;
          if ((size & 0x80u) != 0)
            size = v279->__r_.__value_.__l.__size_;
          if (v32 != size)
            goto LABEL_239;
          if (v34 >= 0)
            v35 = v279;
          else
            v35 = (const std::string *)v279->__r_.__value_.__r.__words[0];
          if ((__str[23] & 0x80) != 0)
          {
            if (!memcmp(*(const void **)__str, v35, *(size_t *)&__str[8]) || v31 == 0)
              goto LABEL_439;
          }
          else
          {
            if (!__str[23])
              goto LABEL_439;
            v36 = __str;
            while (*v36 == v35->__r_.__value_.__s.__data_[0])
            {
              ++v36;
              v35 = (const std::string *)((char *)v35 + 1);
              if (!--v30)
                goto LABEL_439;
            }
LABEL_239:
            if (!size)
            {
LABEL_439:
              std::string::operator=(v315[0], (const std::string *)__str);
              goto LABEL_440;
            }
          }
          std::operator+<char>();
          v183 = std::string::append((std::string *)v295, "' does not match filename: ");
          v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
          v320.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v184;
          v183->__r_.__value_.__l.__size_ = 0;
          v183->__r_.__value_.__r.__words[2] = 0;
          v183->__r_.__value_.__r.__words[0] = 0;
          v185 = *(char *)(a2 + 23);
          if (v185 >= 0)
            v186 = (const std::string::value_type *)a2;
          else
            v186 = *(const std::string::value_type **)a2;
          if (v185 >= 0)
            v187 = *(unsigned __int8 *)(a2 + 23);
          else
            v187 = *(_QWORD *)(a2 + 8);
          v188 = std::string::append(&v320, v186, v187);
          v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
          *(_QWORD *)&v284[16] = *((_QWORD *)&v188->__r_.__value_.__l + 2);
          *(_OWORD *)v284 = v189;
          v188->__r_.__value_.__l.__size_ = 0;
          v188->__r_.__value_.__r.__words[2] = 0;
          v188->__r_.__value_.__r.__words[0] = 0;
          if (a1)
            siri::dialogengine::Context::AddSchemaError(a1, (__int128 *)v284);
          else
            siri::dialogengine::Log::LogWithLevel((uint64_t)v284, 3u);
          if ((v284[23] & 0x80000000) != 0)
            operator delete(*(void **)v284);
          if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v320.__r_.__value_.__l.__data_);
          if ((v295[23] & 0x80000000) != 0)
            operator delete(*(void **)v295);
          goto LABEL_439;
        case 6uLL:
          goto LABEL_148;
        case 8uLL:
          goto LABEL_120;
        case 0xAuLL:
LABEL_109:
          if (*(_QWORD *)v300.__r_.__value_.__l.__data_ != 0x7461636572706564
            || *(_WORD *)(v300.__r_.__value_.__r.__words[0] + 8) != 25701)
          {
            *((_QWORD *)&v48 + 1) = v300.__r_.__value_.__l.__size_;
            *(_QWORD *)&v48 = v300.__r_.__value_.__l.__size_ - 6;
            switch((unint64_t)(v48 >> 1))
            {
              case 0uLL:
                goto LABEL_148;
              case 1uLL:
                goto LABEL_120;
              case 3uLL:
                goto LABEL_114;
              case 6uLL:
                goto LABEL_123;
              default:
                goto LABEL_216;
            }
          }
LABEL_176:
          YAML::Node::operator[]<std::string>((uint64_t)v284, (YAML::Node *)v316, (uint64_t)&v300);
          if (!v284[0])
          {
            v276 = __cxa_allocate_exception(0x38uLL);
            if ((v284[31] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)&v284[8], *(std::string::size_type *)&v284[16]);
            else
              v320 = *(std::string *)&v284[8];
            YAML::InvalidNode::InvalidNode(v276, (uint64_t)&v320);
          }
          v320.__r_.__value_.__r.__words[0] = (std::string::size_type)v284;
          YAML::as_if<std::string,void>::operator()((std::string *)__str, (YAML::Node **)&v320);
          v74 = v285;
          if (v285)
          {
            v75 = (unint64_t *)&v285->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          if ((v284[31] & 0x80000000) != 0)
            operator delete(*(void **)&v284[8]);
          std::string::operator=(v315[0] + 3, (const std::string *)__str);
          v77 = __str[23];
          v78 = __str[23];
          if (__str[23] < 0)
            v77 = *(_QWORD *)&__str[8];
          if (v77)
          {
            std::operator+<char>();
            v79 = std::string::append(&v298, "': ");
            v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            v299.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v299.__r_.__value_.__l.__data_ = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            if (__str[23] >= 0)
              v81 = __str;
            else
              v81 = *(const std::string::value_type **)__str;
            if (__str[23] >= 0)
              v82 = __str[23];
            else
              v82 = *(_QWORD *)&__str[8];
            v83 = std::string::append(&v299, v81, v82);
            v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
            *(_QWORD *)&v293[16] = *((_QWORD *)&v83->__r_.__value_.__l + 2);
            *(_OWORD *)v293 = v84;
            v83->__r_.__value_.__l.__size_ = 0;
            v83->__r_.__value_.__r.__words[2] = 0;
            v83->__r_.__value_.__r.__words[0] = 0;
            v85 = std::string::append((std::string *)v293, " (");
            v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
            *(_QWORD *)&v295[16] = *((_QWORD *)&v85->__r_.__value_.__l + 2);
            *(_OWORD *)v295 = v86;
            v85->__r_.__value_.__l.__size_ = 0;
            v85->__r_.__value_.__r.__words[2] = 0;
            v85->__r_.__value_.__r.__words[0] = 0;
            v87 = *(char *)(a2 + 23);
            if (v87 >= 0)
              v88 = (const std::string::value_type *)a2;
            else
              v88 = *(const std::string::value_type **)a2;
            if (v87 >= 0)
              v89 = *(unsigned __int8 *)(a2 + 23);
            else
              v89 = *(_QWORD *)(a2 + 8);
            v90 = std::string::append((std::string *)v295, v88, v89);
            v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
            v320.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v91;
            v90->__r_.__value_.__l.__size_ = 0;
            v90->__r_.__value_.__r.__words[2] = 0;
            v90->__r_.__value_.__r.__words[0] = 0;
            v92 = std::string::append(&v320, ")");
            v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
            *(_QWORD *)&v284[16] = *((_QWORD *)&v92->__r_.__value_.__l + 2);
            *(_OWORD *)v284 = v93;
            v92->__r_.__value_.__l.__size_ = 0;
            v92->__r_.__value_.__r.__words[2] = 0;
            v92->__r_.__value_.__r.__words[0] = 0;
            if (a1)
              siri::dialogengine::Context::AddSchemaWarning(a1, (__int128 *)v284);
            else
              siri::dialogengine::Log::LogWithLevel((uint64_t)v284, 1u);
            if ((v284[23] & 0x80000000) != 0)
              operator delete(*(void **)v284);
            if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v320.__r_.__value_.__l.__data_);
            if ((v295[23] & 0x80000000) != 0)
              operator delete(*(void **)v295);
            if ((v293[23] & 0x80000000) != 0)
              operator delete(*(void **)v293);
            if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v299.__r_.__value_.__l.__data_);
            if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v298.__r_.__value_.__l.__data_);
            v78 = __str[23];
          }
          if (v78 < 0)
            goto LABEL_441;
          goto LABEL_585;
        case 0xBuLL:
          if (*(_QWORD *)v300.__r_.__value_.__l.__data_ != 0x7470697263736564
            || *(_QWORD *)(v300.__r_.__value_.__r.__words[0] + 3) != 0x6E6F697470697263)
          {
            *((_QWORD *)&v46 + 1) = v300.__r_.__value_.__l.__size_;
            *(_QWORD *)&v46 = v300.__r_.__value_.__l.__size_ - 6;
            switch((unint64_t)(v46 >> 1))
            {
              case 0uLL:
                goto LABEL_148;
              case 1uLL:
                goto LABEL_120;
              case 2uLL:
                goto LABEL_109;
              case 3uLL:
                goto LABEL_114;
              case 6uLL:
                goto LABEL_123;
              default:
                goto LABEL_216;
            }
          }
LABEL_201:
          v94 = v315[0];
          YAML::Node::operator[]<std::string>((uint64_t)v284, (YAML::Node *)v316, (uint64_t)&v300);
          if (!v284[0])
          {
            v277 = __cxa_allocate_exception(0x38uLL);
            if ((v284[31] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)&v284[8], *(std::string::size_type *)&v284[16]);
            else
              v320 = *(std::string *)&v284[8];
            YAML::InvalidNode::InvalidNode(v277, (uint64_t)&v320);
          }
          v320.__r_.__value_.__r.__words[0] = (std::string::size_type)v284;
          YAML::as_if<std::string,void>::operator()((std::string *)__str, (YAML::Node **)&v320);
          std::string::operator=(v94 + 2, (const std::string *)__str);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          v71 = v285;
          if (!v285)
            goto LABEL_209;
          v95 = (unint64_t *)&v285->__shared_owners_;
          do
            v73 = __ldaxr(v95);
          while (__stlxr(v73 - 1, v95));
          goto LABEL_207;
        case 0xCuLL:
LABEL_114:
          if (*(_QWORD *)v300.__r_.__value_.__l.__data_ == 0x416E6F6973726576
            && *(_DWORD *)(v300.__r_.__value_.__r.__words[0] + 8) == 1684366436)
          {
LABEL_169:
            v70 = v315[0];
            YAML::Node::operator[]<std::string>((uint64_t)v284, (YAML::Node *)v316, (uint64_t)&v300);
            if (!v284[0])
            {
              v275 = __cxa_allocate_exception(0x38uLL);
              if ((v284[31] & 0x80000000) != 0)
                std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)&v284[8], *(std::string::size_type *)&v284[16]);
              else
                v320 = *(std::string *)&v284[8];
              YAML::InvalidNode::InvalidNode(v275, (uint64_t)&v320);
            }
            v320.__r_.__value_.__r.__words[0] = (std::string::size_type)v284;
            YAML::as_if<std::string,void>::operator()((std::string *)__str, (YAML::Node **)&v320);
            std::string::operator=(v70 + 4, (const std::string *)__str);
            if ((__str[23] & 0x80000000) != 0)
              operator delete(*(void **)__str);
            v71 = v285;
            if (v285)
            {
              v72 = (unint64_t *)&v285->__shared_owners_;
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
LABEL_207:
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
LABEL_209:
            if ((v284[31] & 0x80000000) != 0)
            {
              v96 = *(void **)&v284[8];
LABEL_584:
              operator delete(v96);
            }
          }
          else
          {
            if (v300.__r_.__value_.__l.__size_ == 6)
              goto LABEL_148;
            if (v300.__r_.__value_.__l.__size_ != 8)
              goto LABEL_122;
LABEL_120:
            if (*(_QWORD *)v300.__r_.__value_.__l.__data_ != 0x73676E6974746573)
            {
              if (v300.__r_.__value_.__l.__size_ == 6)
              {
LABEL_148:
                v25 = (std::string *)v300.__r_.__value_.__r.__words[0];
LABEL_212:
                v97 = (int)v25->__r_.__value_.__l.__data_;
                v98 = WORD2(v25->__r_.__value_.__r.__words[0]);
                if (v97 == 1970238055 && v98 == 29552)
                {
                  YAML::Node::operator[]<std::string>((uint64_t)&v320, (YAML::Node *)v316, (uint64_t)&v300);
                  if (v320.__r_.__value_.__s.__data_[0])
                  {
                    if (v322.__r_.__value_.__r.__words[0])
                    {
                      YAML::detail::node_data::begin(**(_QWORD **)v322.__r_.__value_.__l.__data_, (uint64_t)v284);
                      v107 = *(_OWORD *)&v321.__r_.__value_.__r.__words[1];
                      if (v321.__r_.__value_.__r.__words[2])
                      {
                        v108 = (unint64_t *)(v321.__r_.__value_.__r.__words[2] + 8);
                        do
                          v109 = __ldxr(v108);
                        while (__stxr(v109 + 1, v108));
                        *(_OWORD *)__str = *(_OWORD *)v284;
                        *(_OWORD *)&__str[16] = *(_OWORD *)&v284[16];
                        *(_OWORD *)&__str[32] = v107;
                        do
                          v110 = __ldxr(v108);
                        while (__stxr(v110 + 1, v108));
                        do
                          v111 = __ldaxr(v108);
                        while (__stlxr(v111 - 1, v108));
                        if (!v111)
                        {
                          (*(void (**)(_QWORD))(**((_QWORD **)&v107 + 1) + 16))(*((_QWORD *)&v107 + 1));
                          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v107 + 1));
                        }
                      }
                      else
                      {
                        *(_OWORD *)__str = *(_OWORD *)v284;
                        *(_OWORD *)&__str[16] = *(_OWORD *)&v284[16];
                        *(_QWORD *)&__str[32] = v321.__r_.__value_.__l.__size_;
                        *(_QWORD *)&__str[40] = 0;
                      }
                    }
                    else
                    {
                      *(_DWORD *)__str = 0;
                      memset(&__str[8], 0, 40);
                    }
                    if (v320.__r_.__value_.__s.__data_[0] && v322.__r_.__value_.__r.__words[0])
                    {
                      YAML::detail::node_data::end(**(_QWORD **)v322.__r_.__value_.__l.__data_, (uint64_t)v284);
                      v153 = *(_OWORD *)&v321.__r_.__value_.__r.__words[1];
                      if (v321.__r_.__value_.__r.__words[2])
                      {
                        v154 = (unint64_t *)(v321.__r_.__value_.__r.__words[2] + 8);
                        do
                          v155 = __ldxr(v154);
                        while (__stxr(v155 + 1, v154));
                        *(_OWORD *)v295 = *(_OWORD *)v284;
                        *(_OWORD *)&v295[16] = *(_OWORD *)&v284[16];
                        *(_OWORD *)&v295[32] = v153;
                        do
                          v156 = __ldxr(v154);
                        while (__stxr(v156 + 1, v154));
                        do
                          v157 = __ldaxr(v154);
                        while (__stlxr(v157 - 1, v154));
                        if (!v157)
                        {
                          (*(void (**)(_QWORD))(**((_QWORD **)&v153 + 1) + 16))(*((_QWORD *)&v153 + 1));
                          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v153 + 1));
                        }
                      }
                      else
                      {
                        *(_OWORD *)v295 = *(_OWORD *)v284;
                        *(_OWORD *)&v295[16] = *(_OWORD *)&v284[16];
                        *(_QWORD *)&v295[32] = v321.__r_.__value_.__l.__size_;
                        *(_QWORD *)&v295[40] = 0;
                      }
LABEL_374:
                      while (1)
                      {
                        if (*(_DWORD *)__str == *(_DWORD *)v295)
                        {
                          v158 = &__str[8];
                          v159 = &v295[8];
                          if (*(_DWORD *)__str != 1)
                          {
                            if (*(_DWORD *)__str != 2)
                              break;
                            v158 = &__str[16];
                            v159 = &v295[16];
                          }
                          if (*(_QWORD *)v158 == *(_QWORD *)v159)
                            break;
                        }
                        YAML::detail::iterator_base<YAML::detail::iterator_value>::operator*((uint64_t)v284, (uint64_t)__str);
                        v160 = (int64x2_t *)v315[0];
                        siri::dialogengine::ParsePatternGroupYAML((siri::dialogengine *)&v280, (siri::dialogengine::Context *)a1, (const siri::dialogengine::PatternSchema *)v315[0], (const YAML::detail::iterator_value *)v284);
                        siri::dialogengine::PatternSchema::AddGroup(v160, &v280);
                        v161 = (std::__shared_weak_count *)*((_QWORD *)&v280 + 1);
                        if (*((_QWORD *)&v280 + 1))
                        {
                          v162 = (unint64_t *)(*((_QWORD *)&v280 + 1) + 8);
                          do
                            v163 = __ldaxr(v162);
                          while (__stlxr(v163 - 1, v162));
                          if (!v163)
                          {
                            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                            std::__shared_weak_count::__release_weak(v161);
                          }
                        }
                        v164 = v292;
                        if (v292)
                        {
                          v165 = (unint64_t *)&v292->__shared_owners_;
                          do
                            v166 = __ldaxr(v165);
                          while (__stlxr(v166 - 1, v165));
                          if (!v166)
                          {
                            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                            std::__shared_weak_count::__release_weak(v164);
                          }
                        }
                        if (v291 < 0)
                          operator delete(v290);
                        v167 = v288;
                        if (v288)
                        {
                          v168 = (unint64_t *)&v288->__shared_owners_;
                          do
                            v169 = __ldaxr(v168);
                          while (__stlxr(v169 - 1, v168));
                          if (!v169)
                          {
                            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                            std::__shared_weak_count::__release_weak(v167);
                          }
                        }
                        if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v287.__r_.__value_.__l.__data_);
                        v170 = v285;
                        if (v285)
                        {
                          v171 = (unint64_t *)&v285->__shared_owners_;
                          do
                            v172 = __ldaxr(v171);
                          while (__stlxr(v172 - 1, v171));
                          if (!v172)
                          {
                            ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                            std::__shared_weak_count::__release_weak(v170);
                          }
                        }
                        if ((v284[31] & 0x80000000) != 0)
                          operator delete(*(void **)&v284[8]);
                        YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)__str);
                      }
                      v173 = *(std::__shared_weak_count **)&v295[40];
                      if (*(_QWORD *)&v295[40])
                      {
                        v174 = (unint64_t *)(*(_QWORD *)&v295[40] + 8);
                        do
                          v175 = __ldaxr(v174);
                        while (__stlxr(v175 - 1, v174));
                        if (!v175)
                        {
                          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                          std::__shared_weak_count::__release_weak(v173);
                        }
                      }
                      v176 = *(std::__shared_weak_count **)&__str[40];
                      if (*(_QWORD *)&__str[40])
                      {
                        v177 = (unint64_t *)(*(_QWORD *)&__str[40] + 8);
                        do
                          v178 = __ldaxr(v177);
                        while (__stlxr(v178 - 1, v177));
                        if (!v178)
                        {
                          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                          std::__shared_weak_count::__release_weak(v176);
                        }
                      }
                      v179 = (std::__shared_weak_count *)v321.__r_.__value_.__r.__words[2];
                      if (v321.__r_.__value_.__r.__words[2])
                      {
                        v180 = (unint64_t *)(v321.__r_.__value_.__r.__words[2] + 8);
                        do
                          v181 = __ldaxr(v180);
                        while (__stlxr(v181 - 1, v180));
LABEL_580:
                        if (!v181)
                        {
                          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                          std::__shared_weak_count::__release_weak(v179);
                        }
                      }
LABEL_582:
                      if ((v321.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
                        goto LABEL_585;
                      v96 = (void *)v320.__r_.__value_.__l.__size_;
                      goto LABEL_584;
                    }
                  }
                  else
                  {
                    *(_DWORD *)__str = 0;
                    memset(&__str[8], 0, 40);
                  }
                  *(_DWORD *)v295 = 0;
                  memset(&v295[8], 0, 40);
                  goto LABEL_374;
                }
              }
              else
              {
LABEL_122:
                if (v300.__r_.__value_.__l.__size_ == 18)
                {
LABEL_123:
                  if (*(_QWORD *)v300.__r_.__value_.__l.__data_ == 0x6465726975716572
                    && *(_QWORD *)(v300.__r_.__value_.__r.__words[0] + 8) == 0x6574656D61726150
                    && *(_WORD *)(v300.__r_.__value_.__r.__words[0] + 16) == 29554)
                  {
LABEL_159:
                    YAML::Node::operator[]<std::string>((uint64_t)&v320, (YAML::Node *)v316, (uint64_t)&v300);
                    if (v320.__r_.__value_.__s.__data_[0])
                    {
                      if (v322.__r_.__value_.__r.__words[0])
                      {
                        YAML::detail::node_data::begin(**(_QWORD **)v322.__r_.__value_.__l.__data_, (uint64_t)v284);
                        v65 = *(_OWORD *)&v321.__r_.__value_.__r.__words[1];
                        if (v321.__r_.__value_.__r.__words[2])
                        {
                          v66 = (unint64_t *)(v321.__r_.__value_.__r.__words[2] + 8);
                          do
                            v67 = __ldxr(v66);
                          while (__stxr(v67 + 1, v66));
                          *(_OWORD *)__str = *(_OWORD *)v284;
                          *(_OWORD *)&__str[16] = *(_OWORD *)&v284[16];
                          *(_OWORD *)&__str[32] = v65;
                          do
                            v68 = __ldxr(v66);
                          while (__stxr(v68 + 1, v66));
                          do
                            v69 = __ldaxr(v66);
                          while (__stlxr(v69 - 1, v66));
                          if (!v69)
                          {
                            (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
                            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
                          }
                        }
                        else
                        {
                          *(_OWORD *)__str = *(_OWORD *)v284;
                          *(_OWORD *)&__str[16] = *(_OWORD *)&v284[16];
                          *(_QWORD *)&__str[32] = v321.__r_.__value_.__l.__size_;
                          *(_QWORD *)&__str[40] = 0;
                        }
                      }
                      else
                      {
                        *(_DWORD *)__str = 0;
                        memset(&__str[8], 0, 40);
                      }
                      if (v320.__r_.__value_.__s.__data_[0] && v322.__r_.__value_.__r.__words[0])
                      {
                        YAML::detail::node_data::end(**(_QWORD **)v322.__r_.__value_.__l.__data_, (uint64_t)v284);
                        v190 = *(_OWORD *)&v321.__r_.__value_.__r.__words[1];
                        if (v321.__r_.__value_.__r.__words[2])
                        {
                          v191 = (unint64_t *)(v321.__r_.__value_.__r.__words[2] + 8);
                          do
                            v192 = __ldxr(v191);
                          while (__stxr(v192 + 1, v191));
                          *(_OWORD *)v295 = *(_OWORD *)v284;
                          *(_OWORD *)&v295[16] = *(_OWORD *)&v284[16];
                          *(_OWORD *)&v295[32] = v190;
                          do
                            v193 = __ldxr(v191);
                          while (__stxr(v193 + 1, v191));
                          do
                            v194 = __ldaxr(v191);
                          while (__stlxr(v194 - 1, v191));
                          if (!v194)
                          {
                            (*(void (**)(_QWORD))(**((_QWORD **)&v190 + 1) + 16))(*((_QWORD *)&v190 + 1));
                            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v190 + 1));
                          }
                        }
                        else
                        {
                          *(_OWORD *)v295 = *(_OWORD *)v284;
                          *(_OWORD *)&v295[16] = *(_OWORD *)&v284[16];
                          *(_QWORD *)&v295[32] = v321.__r_.__value_.__l.__size_;
                          *(_QWORD *)&v295[40] = 0;
                        }
LABEL_455:
                        while (1)
                        {
                          if (*(_DWORD *)__str == *(_DWORD *)v295)
                          {
                            v195 = &__str[8];
                            v196 = &v295[8];
                            if (*(_DWORD *)__str != 1)
                            {
                              if (*(_DWORD *)__str != 2)
                                break;
                              v195 = &__str[16];
                              v196 = &v295[16];
                            }
                            if (*(_QWORD *)v195 == *(_QWORD *)v196)
                              break;
                          }
                          YAML::detail::iterator_base<YAML::detail::iterator_value>::operator*((uint64_t)v284, (uint64_t)__str);
                          siri::dialogengine::ParsePatternParameterYAML((siri::dialogengine *)v293, (const YAML::detail::iterator_value *)v284);
                          if (*(_QWORD *)v293)
                          {
                            v197 = v315[0];
                            v282 = *(_OWORD *)v293;
                            if (*(_QWORD *)&v293[8])
                            {
                              v198 = (unint64_t *)(*(_QWORD *)&v293[8] + 8);
                              do
                                v199 = __ldxr(v198);
                              while (__stxr(v199 + 1, v198));
                            }
                            siri::dialogengine::PatternSchema::AddRequiredParameter((uint64_t)v197, (uint64_t *)&v282);
                            v200 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
                            if (*((_QWORD *)&v282 + 1))
                            {
                              v201 = (unint64_t *)(*((_QWORD *)&v282 + 1) + 8);
                              do
                                v202 = __ldaxr(v201);
                              while (__stlxr(v202 - 1, v201));
                              if (!v202)
                              {
                                ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                                std::__shared_weak_count::__release_weak(v200);
                              }
                            }
                          }
                          v203 = *(std::__shared_weak_count **)&v293[8];
                          if (*(_QWORD *)&v293[8])
                          {
                            v204 = (unint64_t *)(*(_QWORD *)&v293[8] + 8);
                            do
                              v205 = __ldaxr(v204);
                            while (__stlxr(v205 - 1, v204));
                            if (!v205)
                            {
                              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                              std::__shared_weak_count::__release_weak(v203);
                            }
                          }
                          v206 = v292;
                          if (v292)
                          {
                            v207 = (unint64_t *)&v292->__shared_owners_;
                            do
                              v208 = __ldaxr(v207);
                            while (__stlxr(v208 - 1, v207));
                            if (!v208)
                            {
                              ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                              std::__shared_weak_count::__release_weak(v206);
                            }
                          }
                          if (v291 < 0)
                            operator delete(v290);
                          v209 = v288;
                          if (v288)
                          {
                            v210 = (unint64_t *)&v288->__shared_owners_;
                            do
                              v211 = __ldaxr(v210);
                            while (__stlxr(v211 - 1, v210));
                            if (!v211)
                            {
                              ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                              std::__shared_weak_count::__release_weak(v209);
                            }
                          }
                          if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v287.__r_.__value_.__l.__data_);
                          v212 = v285;
                          if (v285)
                          {
                            v213 = (unint64_t *)&v285->__shared_owners_;
                            do
                              v214 = __ldaxr(v213);
                            while (__stlxr(v214 - 1, v213));
                            if (!v214)
                            {
                              ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                              std::__shared_weak_count::__release_weak(v212);
                            }
                          }
                          if ((v284[31] & 0x80000000) != 0)
                            operator delete(*(void **)&v284[8]);
                          YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)__str);
                        }
                        v215 = *(std::__shared_weak_count **)&v295[40];
                        if (*(_QWORD *)&v295[40])
                        {
                          v216 = (unint64_t *)(*(_QWORD *)&v295[40] + 8);
                          do
                            v217 = __ldaxr(v216);
                          while (__stlxr(v217 - 1, v216));
                          if (!v217)
                          {
                            ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                            std::__shared_weak_count::__release_weak(v215);
                          }
                        }
                        v218 = *(std::__shared_weak_count **)&__str[40];
                        if (*(_QWORD *)&__str[40])
                        {
                          v219 = (unint64_t *)(*(_QWORD *)&__str[40] + 8);
                          do
                            v220 = __ldaxr(v219);
                          while (__stlxr(v220 - 1, v219));
                          if (!v220)
                          {
                            ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                            std::__shared_weak_count::__release_weak(v218);
                          }
                        }
                        v179 = (std::__shared_weak_count *)v321.__r_.__value_.__r.__words[2];
                        if (v321.__r_.__value_.__r.__words[2])
                        {
                          v221 = (unint64_t *)(v321.__r_.__value_.__r.__words[2] + 8);
                          do
                            v181 = __ldaxr(v221);
                          while (__stlxr(v181 - 1, v221));
                          goto LABEL_580;
                        }
                        goto LABEL_582;
                      }
                    }
                    else
                    {
                      *(_DWORD *)__str = 0;
                      memset(&__str[8], 0, 40);
                    }
                    *(_DWORD *)v295 = 0;
                    memset(&v295[8], 0, 40);
                    goto LABEL_455;
                  }
                  if (*(_QWORD *)v300.__r_.__value_.__l.__data_ == 0x64657475706D6F63
                    && *(_QWORD *)(v300.__r_.__value_.__r.__words[0] + 8) == 0x6574656D61726150
                    && *(_WORD *)(v300.__r_.__value_.__r.__words[0] + 16) == 29554)
                  {
LABEL_138:
                    YAML::Node::operator[]<std::string>((uint64_t)&v320, (YAML::Node *)v316, (uint64_t)&v300);
                    if (v320.__r_.__value_.__s.__data_[0])
                    {
                      if (v322.__r_.__value_.__r.__words[0])
                      {
                        YAML::detail::node_data::begin(**(_QWORD **)v322.__r_.__value_.__l.__data_, (uint64_t)v284);
                        v54 = *(_OWORD *)&v321.__r_.__value_.__r.__words[1];
                        if (v321.__r_.__value_.__r.__words[2])
                        {
                          v55 = (unint64_t *)(v321.__r_.__value_.__r.__words[2] + 8);
                          do
                            v56 = __ldxr(v55);
                          while (__stxr(v56 + 1, v55));
                          *(_OWORD *)__str = *(_OWORD *)v284;
                          *(_OWORD *)&__str[16] = *(_OWORD *)&v284[16];
                          *(_OWORD *)&__str[32] = v54;
                          do
                            v57 = __ldxr(v55);
                          while (__stxr(v57 + 1, v55));
                          do
                            v58 = __ldaxr(v55);
                          while (__stlxr(v58 - 1, v55));
                          if (!v58)
                          {
                            (*(void (**)(_QWORD))(**((_QWORD **)&v54 + 1) + 16))(*((_QWORD *)&v54 + 1));
                            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v54 + 1));
                          }
                        }
                        else
                        {
                          *(_OWORD *)__str = *(_OWORD *)v284;
                          *(_OWORD *)&__str[16] = *(_OWORD *)&v284[16];
                          *(_QWORD *)&__str[32] = v321.__r_.__value_.__l.__size_;
                          *(_QWORD *)&__str[40] = 0;
                        }
                      }
                      else
                      {
                        *(_DWORD *)__str = 0;
                        memset(&__str[8], 0, 40);
                      }
                      if (v320.__r_.__value_.__s.__data_[0] && v322.__r_.__value_.__r.__words[0])
                      {
                        YAML::detail::node_data::end(**(_QWORD **)v322.__r_.__value_.__l.__data_, (uint64_t)v284);
                        v222 = *(_OWORD *)&v321.__r_.__value_.__r.__words[1];
                        if (v321.__r_.__value_.__r.__words[2])
                        {
                          v223 = (unint64_t *)(v321.__r_.__value_.__r.__words[2] + 8);
                          do
                            v224 = __ldxr(v223);
                          while (__stxr(v224 + 1, v223));
                          *(_OWORD *)v295 = *(_OWORD *)v284;
                          *(_OWORD *)&v295[16] = *(_OWORD *)&v284[16];
                          *(_OWORD *)&v295[32] = v222;
                          do
                            v225 = __ldxr(v223);
                          while (__stxr(v225 + 1, v223));
                          do
                            v226 = __ldaxr(v223);
                          while (__stlxr(v226 - 1, v223));
                          if (!v226)
                          {
                            (*(void (**)(_QWORD))(**((_QWORD **)&v222 + 1) + 16))(*((_QWORD *)&v222 + 1));
                            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v222 + 1));
                          }
                        }
                        else
                        {
                          *(_OWORD *)v295 = *(_OWORD *)v284;
                          *(_OWORD *)&v295[16] = *(_OWORD *)&v284[16];
                          *(_QWORD *)&v295[32] = v321.__r_.__value_.__l.__size_;
                          *(_QWORD *)&v295[40] = 0;
                        }
LABEL_526:
                        while (1)
                        {
                          if (*(_DWORD *)__str == *(_DWORD *)v295)
                          {
                            v227 = &__str[8];
                            v228 = &v295[8];
                            if (*(_DWORD *)__str != 1)
                            {
                              if (*(_DWORD *)__str != 2)
                                break;
                              v227 = &__str[16];
                              v228 = &v295[16];
                            }
                            if (*(_QWORD *)v227 == *(_QWORD *)v228)
                              break;
                          }
                          YAML::detail::iterator_base<YAML::detail::iterator_value>::operator*((uint64_t)v284, (uint64_t)__str);
                          siri::dialogengine::ParsePatternParameterYAML((siri::dialogengine *)v293, (const YAML::detail::iterator_value *)v284);
                          if (*(_QWORD *)v293)
                          {
                            v229 = v315[0];
                            v281 = *(_OWORD *)v293;
                            if (*(_QWORD *)&v293[8])
                            {
                              v230 = (unint64_t *)(*(_QWORD *)&v293[8] + 8);
                              do
                                v231 = __ldxr(v230);
                              while (__stxr(v231 + 1, v230));
                            }
                            siri::dialogengine::PatternSchema::AddComputedParameter((uint64_t)v229, (uint64_t *)&v281);
                            v232 = (std::__shared_weak_count *)*((_QWORD *)&v281 + 1);
                            if (*((_QWORD *)&v281 + 1))
                            {
                              v233 = (unint64_t *)(*((_QWORD *)&v281 + 1) + 8);
                              do
                                v234 = __ldaxr(v233);
                              while (__stlxr(v234 - 1, v233));
                              if (!v234)
                              {
                                ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                                std::__shared_weak_count::__release_weak(v232);
                              }
                            }
                          }
                          v235 = *(std::__shared_weak_count **)&v293[8];
                          if (*(_QWORD *)&v293[8])
                          {
                            v236 = (unint64_t *)(*(_QWORD *)&v293[8] + 8);
                            do
                              v237 = __ldaxr(v236);
                            while (__stlxr(v237 - 1, v236));
                            if (!v237)
                            {
                              ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                              std::__shared_weak_count::__release_weak(v235);
                            }
                          }
                          v238 = v292;
                          if (v292)
                          {
                            v239 = (unint64_t *)&v292->__shared_owners_;
                            do
                              v240 = __ldaxr(v239);
                            while (__stlxr(v240 - 1, v239));
                            if (!v240)
                            {
                              ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                              std::__shared_weak_count::__release_weak(v238);
                            }
                          }
                          if (v291 < 0)
                            operator delete(v290);
                          v241 = v288;
                          if (v288)
                          {
                            v242 = (unint64_t *)&v288->__shared_owners_;
                            do
                              v243 = __ldaxr(v242);
                            while (__stlxr(v243 - 1, v242));
                            if (!v243)
                            {
                              ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                              std::__shared_weak_count::__release_weak(v241);
                            }
                          }
                          if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v287.__r_.__value_.__l.__data_);
                          v244 = v285;
                          if (v285)
                          {
                            v245 = (unint64_t *)&v285->__shared_owners_;
                            do
                              v246 = __ldaxr(v245);
                            while (__stlxr(v246 - 1, v245));
                            if (!v246)
                            {
                              ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                              std::__shared_weak_count::__release_weak(v244);
                            }
                          }
                          if ((v284[31] & 0x80000000) != 0)
                            operator delete(*(void **)&v284[8]);
                          YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)__str);
                        }
                        v247 = *(std::__shared_weak_count **)&v295[40];
                        if (*(_QWORD *)&v295[40])
                        {
                          v248 = (unint64_t *)(*(_QWORD *)&v295[40] + 8);
                          do
                            v249 = __ldaxr(v248);
                          while (__stlxr(v249 - 1, v248));
                          if (!v249)
                          {
                            ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                            std::__shared_weak_count::__release_weak(v247);
                          }
                        }
                        v250 = *(std::__shared_weak_count **)&__str[40];
                        if (*(_QWORD *)&__str[40])
                        {
                          v251 = (unint64_t *)(*(_QWORD *)&__str[40] + 8);
                          do
                            v252 = __ldaxr(v251);
                          while (__stlxr(v252 - 1, v251));
                          if (!v252)
                          {
                            ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                            std::__shared_weak_count::__release_weak(v250);
                          }
                        }
                        v179 = (std::__shared_weak_count *)v321.__r_.__value_.__r.__words[2];
                        if (v321.__r_.__value_.__r.__words[2])
                        {
                          v253 = (unint64_t *)(v321.__r_.__value_.__r.__words[2] + 8);
                          do
                            v181 = __ldaxr(v253);
                          while (__stlxr(v181 - 1, v253));
                          goto LABEL_580;
                        }
                        goto LABEL_582;
                      }
                    }
                    else
                    {
                      *(_DWORD *)__str = 0;
                      memset(&__str[8], 0, 40);
                    }
                    *(_DWORD *)v295 = 0;
                    memset(&v295[8], 0, 40);
                    goto LABEL_526;
                  }
                }
              }
LABEL_216:
              std::operator+<char>();
              v100 = std::string::append((std::string *)__str, "' in schema file: ");
              v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
              v320.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v101;
              v100->__r_.__value_.__l.__size_ = 0;
              v100->__r_.__value_.__r.__words[2] = 0;
              v100->__r_.__value_.__r.__words[0] = 0;
              v102 = *(char *)(a2 + 23);
              if (v102 >= 0)
                v103 = (const std::string::value_type *)a2;
              else
                v103 = *(const std::string::value_type **)a2;
              if (v102 >= 0)
                v104 = *(unsigned __int8 *)(a2 + 23);
              else
                v104 = *(_QWORD *)(a2 + 8);
              v105 = std::string::append(&v320, v103, v104);
              v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
              *(_QWORD *)&v284[16] = *((_QWORD *)&v105->__r_.__value_.__l + 2);
              *(_OWORD *)v284 = v106;
              v105->__r_.__value_.__l.__size_ = 0;
              v105->__r_.__value_.__r.__words[2] = 0;
              v105->__r_.__value_.__r.__words[0] = 0;
              if (a1)
                siri::dialogengine::Context::AddSchemaError(a1, (__int128 *)v284);
              else
                siri::dialogengine::Log::LogWithLevel((uint64_t)v284, 3u);
              if ((v284[23] & 0x80000000) != 0)
                operator delete(*(void **)v284);
              if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v320.__r_.__value_.__l.__data_);
LABEL_440:
              if ((__str[23] & 0x80000000) != 0)
              {
LABEL_441:
                v96 = *(void **)__str;
                goto LABEL_584;
              }
              goto LABEL_585;
            }
LABEL_149:
            YAML::Node::operator[]<std::string>((uint64_t)__str, (YAML::Node *)v316, (uint64_t)&v300);
            if (!__str[0])
            {
              *(_DWORD *)v295 = 0;
              memset(&v295[8], 0, 40);
LABEL_258:
              *(_DWORD *)v293 = 0;
              memset(&v293[8], 0, 32);
              v294 = 0;
              goto LABEL_259;
            }
            if (v297)
            {
              YAML::detail::node_data::begin(**v297, (uint64_t)v284);
              v59 = *(_QWORD *)&__str[32];
              v60 = *(std::__shared_weak_count **)&__str[40];
              if (*(_QWORD *)&__str[40])
              {
                v61 = (unint64_t *)(*(_QWORD *)&__str[40] + 8);
                do
                  v62 = __ldxr(v61);
                while (__stxr(v62 + 1, v61));
                *(_OWORD *)v295 = *(_OWORD *)v284;
                *(_OWORD *)&v295[16] = *(_OWORD *)&v284[16];
                *(_QWORD *)&v295[32] = v59;
                *(_QWORD *)&v295[40] = v60;
                do
                  v63 = __ldxr(v61);
                while (__stxr(v63 + 1, v61));
                do
                  v64 = __ldaxr(v61);
                while (__stlxr(v64 - 1, v61));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              else
              {
                *(_OWORD *)v295 = *(_OWORD *)v284;
                *(_OWORD *)&v295[16] = *(_OWORD *)&v284[16];
                *(_QWORD *)&v295[32] = *(_QWORD *)&__str[32];
                *(_QWORD *)&v295[40] = 0;
              }
            }
            else
            {
              *(_DWORD *)v295 = 0;
              memset(&v295[8], 0, 40);
            }
            if (!__str[0] || !v297)
              goto LABEL_258;
            YAML::detail::node_data::end(**v297, (uint64_t)v284);
            v112 = *(_QWORD *)&__str[32];
            v113 = *(std::__shared_weak_count **)&__str[40];
            if (*(_QWORD *)&__str[40])
            {
              v114 = (unint64_t *)(*(_QWORD *)&__str[40] + 8);
              do
                v115 = __ldxr(v114);
              while (__stxr(v115 + 1, v114));
              *(_OWORD *)v293 = *(_OWORD *)v284;
              *(_OWORD *)&v293[16] = *(_OWORD *)&v284[16];
              *(_QWORD *)&v293[32] = v112;
              v294 = v113;
              do
                v116 = __ldxr(v114);
              while (__stxr(v116 + 1, v114));
              do
                v117 = __ldaxr(v114);
              while (__stlxr(v117 - 1, v114));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            else
            {
              *(_OWORD *)v293 = *(_OWORD *)v284;
              *(_OWORD *)&v293[16] = *(_OWORD *)&v284[16];
              *(_QWORD *)&v293[32] = *(_QWORD *)&__str[32];
              v294 = 0;
            }
LABEL_259:
            while (1)
            {
              if (*(_DWORD *)v295 == *(_DWORD *)v293)
              {
                v118 = &v295[8];
                v119 = &v293[8];
                if (*(_DWORD *)v295 != 1)
                {
                  if (*(_DWORD *)v295 != 2)
                    break;
                  v118 = &v295[16];
                  v119 = &v293[16];
                }
                if (*(_QWORD *)v118 == *(_QWORD *)v119)
                  break;
              }
              YAML::detail::iterator_base<YAML::detail::iterator_value>::operator*((uint64_t)v284, (uint64_t)v295);
              siri::dialogengine::ParseParameterOrSettingDataYAML((siri::dialogengine *)&v320, (const YAML::detail::iterator_value *)v284);
              v120 = HIBYTE(v320.__r_.__value_.__r.__words[2]);
              if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v120 = v320.__r_.__value_.__l.__size_;
              if (!v120)
                goto LABEL_271;
              v121 = HIBYTE(v321.__r_.__value_.__r.__words[2]);
              if ((v321.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v121 = v321.__r_.__value_.__l.__size_;
              if (v121)
              {
                v122 = operator new(0x180uLL);
                v122[1] = 0;
                v122[2] = 0;
                *v122 = &off_1E7931780;
                v299.__r_.__value_.__r.__words[0] = siri::dialogengine::PatternSetting::PatternSetting((uint64_t)(v122 + 3), &v320, &v321, &v322, v326, &v327, &v323, &v324);
                v299.__r_.__value_.__l.__size_ = (std::string::size_type)v122;
              }
              else
              {
LABEL_271:
                *(_OWORD *)&v299.__r_.__value_.__l.__data_ = 0uLL;
              }
              if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v327.__r_.__value_.__l.__data_);
              if (v325 < 0)
                operator delete((void *)v324);
              if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v323.__r_.__value_.__l.__data_);
              if (SHIBYTE(v322.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v322.__r_.__value_.__l.__data_);
              if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v321.__r_.__value_.__l.__data_);
              if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v320.__r_.__value_.__l.__data_);
              v123 = v299.__r_.__value_.__r.__words[0];
              if (v299.__r_.__value_.__r.__words[0])
              {
                v124 = v315[0];
                if (SHIBYTE(v315[0][1].__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v320, v315[0][1].__r_.__value_.__l.__data_, v315[0][1].__r_.__value_.__l.__size_);
                else
                  v320 = v315[0][1];
                siri::dialogengine::LineNumberBase::SetFullPath(v123 + 240, &v320);
                if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v320.__r_.__value_.__l.__data_);
                if (!v286)
                {
                  v272 = __cxa_allocate_exception(0x38uLL);
                  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v320, v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
                  else
                    v320 = v287;
                  YAML::InvalidNode::InvalidNode(v272, (uint64_t)&v320);
                }
                if (v289)
                  v125 = *(_QWORD *)(**(_QWORD **)v289 + 4);
                else
                  v125 = -1;
                v126 = *(_OWORD *)&v299.__r_.__value_.__l.__data_;
                *(_QWORD *)(v299.__r_.__value_.__r.__words[0] + 248) = (v125 + 0x100000000) >> 32;
                v283 = v126;
                if (*((_QWORD *)&v126 + 1))
                {
                  v127 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
                  do
                    v128 = __ldxr(v127);
                  while (__stxr(v128 + 1, v127));
                }
                siri::dialogengine::PatternSchema::AddSetting((uint64_t)v124, (uint64_t *)&v283);
                v129 = (std::__shared_weak_count *)*((_QWORD *)&v283 + 1);
                if (*((_QWORD *)&v283 + 1))
                {
                  v130 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
                  do
                    v131 = __ldaxr(v130);
                  while (__stlxr(v131 - 1, v130));
                  if (!v131)
                  {
                    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                    std::__shared_weak_count::__release_weak(v129);
                  }
                }
              }
              v132 = (std::__shared_weak_count *)v299.__r_.__value_.__l.__size_;
              if (v299.__r_.__value_.__l.__size_)
              {
                v133 = (unint64_t *)(v299.__r_.__value_.__l.__size_ + 8);
                do
                  v134 = __ldaxr(v133);
                while (__stlxr(v134 - 1, v133));
                if (!v134)
                {
                  ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                  std::__shared_weak_count::__release_weak(v132);
                }
              }
              v135 = v292;
              if (v292)
              {
                v136 = (unint64_t *)&v292->__shared_owners_;
                do
                  v137 = __ldaxr(v136);
                while (__stlxr(v137 - 1, v136));
                if (!v137)
                {
                  ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                  std::__shared_weak_count::__release_weak(v135);
                }
              }
              if (v291 < 0)
                operator delete(v290);
              v138 = v288;
              if (v288)
              {
                v139 = (unint64_t *)&v288->__shared_owners_;
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }
              if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v287.__r_.__value_.__l.__data_);
              v141 = v285;
              if (v285)
              {
                v142 = (unint64_t *)&v285->__shared_owners_;
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              if ((v284[31] & 0x80000000) != 0)
                operator delete(*(void **)&v284[8]);
              YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v295);
            }
            v144 = v294;
            if (v294)
            {
              v145 = (unint64_t *)&v294->__shared_owners_;
              do
                v146 = __ldaxr(v145);
              while (__stlxr(v146 - 1, v145));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
              }
            }
            v147 = *(std::__shared_weak_count **)&v295[40];
            if (*(_QWORD *)&v295[40])
            {
              v148 = (unint64_t *)(*(_QWORD *)&v295[40] + 8);
              do
                v149 = __ldaxr(v148);
              while (__stlxr(v149 - 1, v148));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
            v150 = *(std::__shared_weak_count **)&__str[40];
            if (*(_QWORD *)&__str[40])
            {
              v151 = (unint64_t *)(*(_QWORD *)&__str[40] + 8);
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 - 1, v151));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
            if ((__str[31] & 0x80000000) != 0)
            {
              v96 = *(void **)&__str[8];
              goto LABEL_584;
            }
          }
LABEL_585:
          if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v300.__r_.__value_.__l.__data_);
          v254 = v314;
          if (v314)
          {
            v255 = (unint64_t *)&v314->__shared_owners_;
            do
              v256 = __ldaxr(v255);
            while (__stlxr(v256 - 1, v255));
            if (!v256)
            {
              ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
              std::__shared_weak_count::__release_weak(v254);
            }
          }
          if (v313 < 0)
            operator delete(v312);
          v257 = v311;
          if (v311)
          {
            v258 = (unint64_t *)&v311->__shared_owners_;
            do
              v259 = __ldaxr(v258);
            while (__stlxr(v259 - 1, v258));
            if (!v259)
            {
              ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
              std::__shared_weak_count::__release_weak(v257);
            }
          }
          if (SHIBYTE(v310) < 0)
            operator delete((void *)__s);
          v260 = v307;
          if (v307)
          {
            v261 = (unint64_t *)&v307->__shared_owners_;
            do
              v262 = __ldaxr(v261);
            while (__stlxr(v262 - 1, v261));
            if (!v262)
            {
              ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
              std::__shared_weak_count::__release_weak(v260);
            }
          }
          if (SHIBYTE(v306) < 0)
            operator delete(*((void **)&v305 + 1));
          YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v303);
          continue;
        case 0x12uLL:
          goto LABEL_123;
        default:
          goto LABEL_216;
      }
    }
    break;
  }
  v263 = v302;
  if (v302)
  {
    v264 = (unint64_t *)&v302->__shared_owners_;
    do
      v265 = __ldaxr(v264);
    while (__stlxr(v265 - 1, v264));
    if (!v265)
    {
      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
      std::__shared_weak_count::__release_weak(v263);
    }
  }
  v266 = v304;
  if (v304)
  {
    v267 = (unint64_t *)&v304->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  *a4 = *(_OWORD *)v315;
  v269 = (std::__shared_weak_count *)v319;
  if ((_QWORD)v319)
  {
    v270 = (unint64_t *)(v319 + 8);
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  if (SBYTE7(v318) < 0)
    operator delete((void *)v317);
}

void sub_1BFA848F0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  __int128 a66;
  std::string::size_type a67;
  uint64_t *v67;
  void *v68;
  _QWORD *v71;
  std::string *v72;
  __int128 v73;
  const std::string::value_type *v74;
  char *v75;
  const std::string::value_type *v76;
  int v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  void *v84;
  std::string *v85;
  __int128 v86;
  const std::string::value_type *v87;
  std::string *v88;
  __int128 v89;
  std::string *v90;
  __int128 v91;

  __cxa_free_exception(v68);
  YAML::Node::~Node(&a35);
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  YAML::detail::iterator_value::~iterator_value((void **)&STACK[0x2C8]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B0]);
  if (a2 == 1)
  {
    v71 = __cxa_begin_catch(a1);
    std::operator+<char>();
    v72 = std::string::append((std::string *)&a57, " \"");
    v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    a67 = v72->__r_.__value_.__r.__words[2];
    a66 = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    v76 = (const std::string::value_type *)v71[4];
    v75 = (char *)(v71 + 4);
    v74 = v76;
    v77 = v75[23];
    if (v77 >= 0)
      v78 = v75;
    else
      v78 = v74;
    if (v77 >= 0)
      v79 = v75[23];
    else
      v79 = *((_QWORD *)v75 + 1);
    v80 = std::string::append((std::string *)&a66, v78, v79);
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    STACK[0x270] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x260] = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    v82 = std::string::append((std::string *)&STACK[0x260], "\"");
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    STACK[0x2A0] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x290] = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::SchemaError(v67, (__int128 *)&STACK[0x290]);
    if (SLOBYTE(STACK[0x2A7]) < 0)
      operator delete((void *)STACK[0x290]);
    if (SLOBYTE(STACK[0x277]) < 0)
      operator delete((void *)STACK[0x260]);
    if (SHIBYTE(a67) < 0)
      operator delete((void *)a66);
    if (a62 < 0)
      operator delete(a57);
  }
  else
  {
    if (a2 != 2)
    {
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3E0]);
      YAML::Node::~Node((void **)&STACK[0x3F8]);
      _Unwind_Resume(a1);
    }
    v84 = __cxa_begin_catch(a1);
    std::operator+<char>();
    v85 = std::string::append((std::string *)&a57, " \"");
    v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    a67 = v85->__r_.__value_.__r.__words[2];
    a66 = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    v87 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v84 + 16))(v84);
    v88 = std::string::append((std::string *)&a66, v87);
    v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    STACK[0x270] = v88->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x260] = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    v90 = std::string::append((std::string *)&STACK[0x260], "\"");
    v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    STACK[0x2A0] = v90->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x290] = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::SchemaError(v67, (__int128 *)&STACK[0x290]);
    if (SLOBYTE(STACK[0x2A7]) < 0)
      operator delete((void *)STACK[0x290]);
    if (SLOBYTE(STACK[0x277]) < 0)
      operator delete((void *)STACK[0x260]);
    if (SHIBYTE(a67) < 0)
      operator delete((void *)a66);
    if (a62 < 0)
      operator delete(a57);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BFA845E8);
}

void sub_1BFA850F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a66;
  char a71;

  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (a71 < 0)
    operator delete(a66);
  if (a62 < 0)
    operator delete(a57);
  __cxa_end_catch();
  JUMPOUT(0x1BFA84C34);
}

void sub_1BFA85164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a66;
  char a71;

  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (a71 < 0)
    operator delete(a66);
  if (a62 < 0)
    operator delete(a57);
  __cxa_end_catch();
  JUMPOUT(0x1BFA84C34);
}

uint64_t YAML::Node::operator=(uint64_t a1, YAML::Node *this)
{
  BOOL v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _BYTE **v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *exception;
  std::string v25;

  if (*(_BYTE *)a1)
    v3 = *(_BYTE *)this == 0;
  else
    v3 = 1;
  if (v3)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a1 + 31) < 0)
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    else
      v25 = *(std::string *)(a1 + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v25);
  }
  v5 = *(_QWORD **)(a1 + 48);
  if (!v5 || (v6 = (_QWORD *)*((_QWORD *)this + 6)) == 0 || *v5 != *v6)
  {
    YAML::Node::EnsureNodeExists(this);
    v7 = *(_QWORD **)(a1 + 48);
    v8 = (_QWORD *)*((_QWORD *)this + 6);
    if (v7)
    {
      v9 = (_BYTE **)*v8;
      if (**(_BYTE **)*v8)
      {
        YAML::detail::node::mark_defined(*(YAML::detail::node **)(a1 + 48));
        v9 = (_BYTE **)*v8;
      }
      v10 = v8[1];
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = (std::__shared_weak_count *)v7[1];
      *v7 = v9;
      v7[1] = v10;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      YAML::detail::memory_holder::merge(*(uint64_t **)(a1 + 32), *((_QWORD *)this + 4));
      *(_QWORD *)(a1 + 48) = *((_QWORD *)this + 6);
    }
    else
    {
      *(_QWORD *)(a1 + 48) = v8;
      v18 = *((_QWORD *)this + 4);
      v17 = *((_QWORD *)this + 5);
      if (v17)
      {
        v19 = (unint64_t *)(v17 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = *(std::__shared_weak_count **)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v18;
      *(_QWORD *)(a1 + 40) = v17;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  return a1;
}

void sub_1BFA853A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void YAML::Node::~Node(void **this)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void siri::dialogengine::SchemaError(uint64_t *a1, __int128 *a2)
{
  if (a1)
    siri::dialogengine::Context::AddSchemaError(a1, a2);
  else
    siri::dialogengine::Log::LogWithLevel((uint64_t)a2, 3u);
}

void YAML::detail::iterator_base<YAML::detail::iterator_value>::operator*(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  char v35[8];
  void *__p;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  char v46[8];
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;

  if (*(_DWORD *)a2 != 2)
  {
    if (*(_DWORD *)a2 == 1)
    {
      v2 = **(_QWORD **)(a2 + 8);
      if (v2)
      {
        v3 = *(_QWORD *)(a2 + 32);
        v4 = *(std::__shared_weak_count **)(a2 + 40);
        v44 = v3;
        v45 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldxr(p_shared_owners);
          while (__stxr(v6 + 1, p_shared_owners));
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v50 = v3;
          v51 = v4;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        else
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v50 = v3;
          v51 = 0;
        }
        v46[0] = 1;
        v52 = v2;
        YAML::detail::iterator_value::iterator_value((YAML::detail::iterator_value *)a1, (const YAML::Node *)v46);
        if (v4)
        {
          v21 = (unint64_t *)&v4->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (SHIBYTE(v49) < 0)
          operator delete(v47);
        v23 = v45;
        if (v45)
        {
          v24 = (unint64_t *)&v45->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
LABEL_64:
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
          return;
        }
        return;
      }
    }
LABEL_15:
    *(_BYTE *)a1 = 1;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_BYTE *)(a1 + 56) = 1;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_BYTE *)(a1 + 112) = 1;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    return;
  }
  v8 = *(uint64_t **)(a2 + 16);
  v10 = *v8;
  v9 = v8[1];
  if (v10)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
    goto LABEL_15;
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(std::__shared_weak_count **)(a2 + 40);
  v42 = v12;
  v43 = v13;
  if (!v13)
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = v12;
    v46[0] = 1;
    v51 = 0;
    v52 = v10;
    v34 = 0;
LABEL_41:
    v17 = 0;
    __p = 0;
    v37 = 0;
    v38 = 0;
    v39 = v12;
    v40 = 0;
    goto LABEL_42;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = v12;
  v51 = v13;
  do
    v16 = __ldxr(v14);
  while (__stxr(v16 + 1, v14));
  v12 = *(_QWORD *)(a2 + 32);
  v17 = *(std::__shared_weak_count **)(a2 + 40);
  v46[0] = 1;
  v52 = v10;
  v34 = v17;
  if (!v17)
    goto LABEL_41;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  __p = 0;
  v37 = 0;
  v38 = 0;
  v39 = v12;
  v40 = v17;
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
LABEL_42:
  v35[0] = 1;
  v41 = v9;
  YAML::detail::iterator_value::iterator_value((YAML::detail::iterator_value *)a1, (const YAML::Node *)v46, (const YAML::Node *)v35);
  if (v17)
  {
    v26 = (unint64_t *)&v17->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  if (v34)
  {
    v28 = (unint64_t *)&v34->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v30 = v51;
  if (v51)
  {
    v31 = (unint64_t *)&v51->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (SHIBYTE(v49) < 0)
    operator delete(v47);
  v23 = v43;
  if (v43)
  {
    v33 = (unint64_t *)&v43->__shared_owners_;
    do
      v25 = __ldaxr(v33);
    while (__stlxr(v25 - 1, v33));
    goto LABEL_64;
  }
}

void sub_1BFA85738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  YAML::Node::~Node(&a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  YAML::Node::~Node((void **)(v18 - 72));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *YAML::InvalidNode::InvalidNode(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v12[2];
  char v13;
  uint64_t v14;
  int v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  v14 = -1;
  v15 = -1;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"invalid node; first invalid key: \"",
           34);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\"", 1);
    std::stringbuf::str();
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "invalid node; this may result from using a map iterator as a sequence iterator, or vice-versa");
  }
  v16[0] = *MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v10;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&v19);
  YAML::Exception::Exception((uint64_t)a1, &v14, (__int128 *)v12);
  *a1 = &off_1E7939180;
  if (v13 < 0)
    operator delete(v12[0]);
  *a1 = &off_1E7939158;
  return a1;
}

void sub_1BFA858E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::as_if<std::string,void>::operator()(std::string *a1, YAML::Node **a2)
{
  uint64_t *v4;
  __int128 v5;
  _QWORD *exception;
  int v7;
  uint64_t v8;
  int v9;

  if (YAML::Node::Type(*a2) != 2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v8 = YAML::Node::Mark(*a2);
    v9 = v7;
    YAML::BadConversion::BadConversion(exception, &v8);
    *exception = &off_1E7939358;
  }
  v4 = YAML::Node::Scalar(*a2);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    a1->__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1BFA859CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void YAML::Node::operator[]<std::string>(uint64_t a1, YAML::Node *this, uint64_t a3)
{
  YAML::detail::node *v6;
  std::__shared_weak_count *v7;
  YAML::detail::memory **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  YAML::detail::node *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *exception;
  std::string v21;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v21 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v21);
  }
  YAML::Node::EnsureNodeExists(this);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v6 = (YAML::detail::node *)*((_QWORD *)this + 6);
  v8 = (YAML::detail::memory **)*((_QWORD *)this + 4);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = YAML::detail::node::get<std::string>(v6, a3, v8, v7);
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v14 = *((_QWORD *)this + 4);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v15;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    *(_QWORD *)(a1 + 48) = v11;
    do
      v19 = __ldaxr(v16);
    while (__stlxr(v19 - 1, v16));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v11;
  }
}

void sub_1BFA85B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseParameterOrSettingDataYAML(siri::dialogengine *this, const YAML::detail::iterator_value *a2)
{
  int v4;
  uint64_t **v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void **v19;
  _BYTE *v20;
  _BYTE *v21;
  std::string *v22;
  int data;
  __int128 v31;
  void **v32;
  std::string::size_type v36;
  int v37;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *exception;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  void **v61;
  std::string __p;
  std::string v63;
  void *v64[2];
  __int128 v65;
  std::__shared_weak_count *v66;
  char v67;
  std::string v68;
  std::__shared_weak_count *v69;
  char v70;
  std::string v71;
  std::__shared_weak_count *v72;
  _BYTE v73[40];
  std::__shared_weak_count *v74;
  _BYTE v75[40];
  std::__shared_weak_count *v76;
  std::string v77;

  *((_QWORD *)this + 16) = 0;
  v61 = (void **)((char *)this + 128);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  YAML::Node::as<std::string>((std::string *)v64, (uint64_t)a2 + 56);
  v4 = *((unsigned __int8 *)a2 + 112);
  *(_OWORD *)this = *(_OWORD *)v64;
  *((_QWORD *)this + 2) = v65;
  if (v4 && (v5 = (uint64_t **)*((_QWORD *)a2 + 20)) != 0)
  {
    YAML::detail::node_data::begin(**v5, (uint64_t)v64);
    v6 = *((_QWORD *)a2 + 18);
    v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 19);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      *(_OWORD *)v75 = *(_OWORD *)v64;
      *(_OWORD *)&v75[16] = v65;
      *(_QWORD *)&v75[32] = v6;
      v76 = v7;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    else
    {
      *(_OWORD *)v75 = *(_OWORD *)v64;
      *(_OWORD *)&v75[16] = v65;
      *(_QWORD *)&v75[32] = v6;
      v76 = 0;
    }
  }
  else
  {
    *(_DWORD *)v75 = 0;
    memset(&v75[8], 0, 32);
    v76 = 0;
  }
  if (*((_BYTE *)a2 + 112) && (v12 = (uint64_t **)*((_QWORD *)a2 + 20)) != 0)
  {
    YAML::detail::node_data::end(**v12, (uint64_t)v64);
    v13 = *((_QWORD *)a2 + 18);
    v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 19);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      *(_OWORD *)v73 = *(_OWORD *)v64;
      *(_OWORD *)&v73[16] = v65;
      *(_QWORD *)&v73[32] = v13;
      v74 = v14;
      do
        v17 = __ldxr(v15);
      while (__stxr(v17 + 1, v15));
      do
        v18 = __ldaxr(v15);
      while (__stlxr(v18 - 1, v15));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      *(_OWORD *)v73 = *(_OWORD *)v64;
      *(_OWORD *)&v73[16] = v65;
      *(_QWORD *)&v73[32] = v13;
      v74 = 0;
    }
  }
  else
  {
    *(_DWORD *)v73 = 0;
    memset(&v73[8], 0, 32);
    v74 = 0;
  }
  v19 = (void **)((char *)this + 24);
  while (1)
  {
    if (*(_DWORD *)v75 == *(_DWORD *)v73)
    {
      v20 = &v75[8];
      v21 = &v73[8];
      if (*(_DWORD *)v75 != 1)
      {
        if (*(_DWORD *)v75 != 2)
          break;
        v20 = &v75[16];
        v21 = &v73[16];
      }
      if (*(_QWORD *)v20 == *(_QWORD *)v21)
        break;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v64, (uint64_t)v75);
    if (!v67)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v77, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
      else
        v77 = v68;
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v77);
    }
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    YAML::as_if<std::string,void>::operator()(&v63, (YAML::Node **)&v77);
    if ((*((_BYTE *)&v63.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v22 = &v63;
      switch(*((_BYTE *)&v63.__r_.__value_.__s + 23))
      {
        case 4:
          data = (int)v63.__r_.__value_.__l.__data_;
          goto LABEL_35;
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_117;
        case 0xA:
          goto LABEL_105;
        case 0xB:
          if (v63.__r_.__value_.__r.__words[0] == 0x7470697263736564
            && *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 3) == 0x6E6F697470697263)
          {
            goto LABEL_91;
          }
          if (v63.__r_.__value_.__r.__words[0] != 0x616469727265766FLL
            || *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 3) != 0x656C626164697272)
          {
            goto LABEL_115;
          }
          goto LABEL_88;
        case 0xC:
          if (v63.__r_.__value_.__r.__words[0] != 0x56746C7561666564
            || LODWORD(v63.__r_.__value_.__r.__words[1]) != 1702194273)
          {
            goto LABEL_115;
          }
          goto LABEL_100;
        default:
          if (&v63 != 23)
            goto LABEL_117;
          if (v63.__r_.__value_.__r.__words[0] != 0x56746C7561666564
            || v63.__r_.__value_.__l.__size_ != 0x6D6F724665756C61
            || *(std::string::size_type *)((char *)&v63.__r_.__value_.__r.__words[1] + 7) != 0x676E69747465536DLL)
          {
            goto LABEL_115;
          }
          goto LABEL_75;
      }
    }
    switch(v63.__r_.__value_.__l.__size_)
    {
      case 4uLL:
        data = *(_DWORD *)v63.__r_.__value_.__l.__data_;
LABEL_35:
        if (data == 1701869940)
        {
          if (!v70)
          {
            v55 = __cxa_allocate_exception(0x38uLL);
            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v77, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
            else
              v77 = v71;
            YAML::InvalidNode::InvalidNode(v55, (uint64_t)&v77);
          }
          v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
          YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&v77);
          if (*((char *)this + 47) < 0)
            operator delete(*v19);
          *(_OWORD *)v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *((_QWORD *)this + 5) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        }
        goto LABEL_115;
      case 5uLL:
      case 6uLL:
      case 7uLL:
      case 8uLL:
      case 9uLL:
        goto LABEL_116;
      case 0xAuLL:
        v22 = (std::string *)v63.__r_.__value_.__r.__words[0];
LABEL_105:
        v36 = v22->__r_.__value_.__r.__words[0];
        v37 = LOWORD(v22->__r_.__value_.__r.__words[1]);
        if (v36 != 0x7461636572706564 || v37 != 25701)
          goto LABEL_115;
        if (!v70)
        {
          v58 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v77, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
          else
            v77 = v71;
          YAML::InvalidNode::InvalidNode(v58, (uint64_t)&v77);
        }
        v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
        YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&v77);
        if (*((char *)this + 151) < 0)
          operator delete(*v61);
        v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v32 = v61;
        goto LABEL_114;
      case 0xBuLL:
        if (*(_QWORD *)v63.__r_.__value_.__l.__data_ == 0x7470697263736564
          && *(_QWORD *)(v63.__r_.__value_.__r.__words[0] + 3) == 0x6E6F697470697263)
        {
LABEL_91:
          if (!v70)
          {
            v57 = __cxa_allocate_exception(0x38uLL);
            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v77, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
            else
              v77 = v71;
            YAML::InvalidNode::InvalidNode(v57, (uint64_t)&v77);
          }
          v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
          YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&v77);
          if (*((char *)this + 71) < 0)
            operator delete(*((void **)this + 6));
          v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v32 = (void **)((char *)this + 48);
LABEL_114:
          *(_OWORD *)v32 = v31;
          v32[2] = (void *)__p.__r_.__value_.__r.__words[2];
        }
        else if (*(_QWORD *)v63.__r_.__value_.__l.__data_ == 0x616469727265766FLL
               && *(_QWORD *)(v63.__r_.__value_.__r.__words[0] + 3) == 0x656C626164697272)
        {
LABEL_88:
          if (!v70)
          {
            v60 = __cxa_allocate_exception(0x38uLL);
            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v77, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
            else
              v77 = v71;
            YAML::InvalidNode::InvalidNode(v60, (uint64_t)&v77);
          }
          v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
          YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&v77);
          *((_BYTE *)this + 120) = siri::dialogengine::StringToBool(&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
LABEL_115:
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
LABEL_116:
          operator delete(v63.__r_.__value_.__l.__data_);
LABEL_117:
        v39 = v72;
        if (v72)
        {
          v40 = (unint64_t *)&v72->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        v42 = v69;
        if (v69)
        {
          v43 = (unint64_t *)&v69->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
        v45 = v66;
        if (v66)
        {
          v46 = (unint64_t *)&v66->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        if (SHIBYTE(v65) < 0)
          operator delete(v64[1]);
        YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v75);
        break;
      case 0xCuLL:
        if (*(_QWORD *)v63.__r_.__value_.__l.__data_ != 0x56746C7561666564
          || *(_DWORD *)(v63.__r_.__value_.__r.__words[0] + 8) != 1702194273)
        {
          goto LABEL_115;
        }
LABEL_100:
        if (!v70)
        {
          v56 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v77, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
          else
            v77 = v71;
          YAML::InvalidNode::InvalidNode(v56, (uint64_t)&v77);
        }
        v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
        YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&v77);
        if (*((char *)this + 95) < 0)
          operator delete(*((void **)this + 9));
        v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v32 = (void **)((char *)this + 72);
        goto LABEL_114;
      default:
        if (v63.__r_.__value_.__l.__size_ != 23)
          goto LABEL_116;
        if (*(_QWORD *)v63.__r_.__value_.__l.__data_ != 0x56746C7561666564
          || *(_QWORD *)(v63.__r_.__value_.__r.__words[0] + 8) != 0x6D6F724665756C61
          || *(_QWORD *)(v63.__r_.__value_.__r.__words[0] + 15) != 0x676E69747465536DLL)
        {
          goto LABEL_115;
        }
LABEL_75:
        if (!v70)
        {
          v59 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v77, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
          else
            v77 = v71;
          YAML::InvalidNode::InvalidNode(v59, (uint64_t)&v77);
        }
        v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
        YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&v77);
        if (*((char *)this + 119) < 0)
          operator delete(*((void **)this + 12));
        v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v32 = (void **)((char *)this + 96);
        goto LABEL_114;
    }
  }
  v48 = v74;
  if (v74)
  {
    v49 = (unint64_t *)&v74->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v76;
  if (v76)
  {
    v52 = (unint64_t *)&v76->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_1BFA866AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28)
{
  void **v28;
  void *v29;
  uint64_t v30;

  __cxa_free_exception(v29);
  if (a27 < 0)
    operator delete(__p);
  YAML::detail::iterator_value::~iterator_value(&a28);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v30 - 192);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v30 - 144);
  siri::dialogengine::ParameterOrSettingData::~ParameterOrSettingData(v28);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParameterOrSettingData::~ParameterOrSettingData(void **this)
{
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t YAML::detail::node_iterator_base<YAML::detail::node>::operator++(uint64_t result)
{
  _BYTE ****v1;
  _BYTE ****v2;

  if (*(_DWORD *)result == 2)
  {
    v1 = *(_BYTE *****)(result + 24);
    v2 = (_BYTE ****)(*(_QWORD *)(result + 16) + 16);
    if (v1 != v2)
    {
      while (!****v2 || !***v2[1])
      {
        v2 += 2;
        if (v2 == v1)
        {
          v2 = *(_BYTE *****)(result + 24);
          break;
        }
      }
    }
    *(_QWORD *)(result + 16) = v2;
  }
  else if (*(_DWORD *)result == 1)
  {
    *(_QWORD *)(result + 8) += 8;
  }
  return result;
}

void YAML::detail::iterator_value::~iterator_value(void **this)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void siri::dialogengine::ParsePatternParameterYAML(siri::dialogengine *this, const YAML::detail::iterator_value *a2)
{
  std::string::size_type size;
  std::string::size_type v4;
  char *v5;
  std::string v6;
  std::string v7;
  std::string v8;
  std::string v9;
  void *v10;
  char v11;
  std::string v12;
  std::string __p;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  siri::dialogengine::ParseParameterOrSettingDataYAML((siri::dialogengine *)&v6, a2);
  size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
  if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v6.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_18;
  v4 = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v4 = v7.__r_.__value_.__l.__size_;
  if (v4)
  {
    v5 = (char *)operator new(0x168uLL);
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_1E79345A0;
    std::string::basic_string[abi:ne180100]<0>(&v17, "");
    std::string::basic_string[abi:ne180100]<0>(&v16, "");
    std::string::basic_string[abi:ne180100]<0>(&v15, "");
    std::string::basic_string[abi:ne180100]<0>(&v14, "");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::Parameter::Parameter((uint64_t)(v5 + 24), &v6, &v7, &v8, &v17, &v16, &v15, &v14, &__p, 1, 0, 0, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    *(_QWORD *)this = v5 + 24;
    *((_QWORD *)this + 1) = v5;
    std::string::operator=((std::string *)(v5 + 232), &v9);
    std::string::operator=((std::string *)(v5 + 152), &v12);
  }
  else
  {
LABEL_18:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BFA86B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::__shared_weak_count *v35;
  uint64_t v36;
  void *v38;

  if (a35 < 0)
    operator delete(__p);
  if (*(char *)(v36 - 121) < 0)
    operator delete(*(void **)(v36 - 144));
  if (*(char *)(v36 - 97) < 0)
    operator delete(*(void **)(v36 - 120));
  if (*(char *)(v36 - 73) < 0)
    operator delete(*(void **)(v36 - 96));
  if (*(char *)(v36 - 49) < 0)
    operator delete(*(void **)(v36 - 72));
  std::__shared_weak_count::~__shared_weak_count(v35);
  operator delete(v38);
  siri::dialogengine::ParameterOrSettingData::~ParameterOrSettingData(&a11);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParsePatternGroupYAML(siri::dialogengine *this, siri::dialogengine::Context *a2, const siri::dialogengine::PatternSchema *a3, const YAML::detail::iterator_value *a4)
{
  YAML::Node *v7;
  uint64_t **v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t **v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  int *v24;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  std::__shared_weak_count *v40;
  int v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  std::string *v45;
  std::string::size_type v46;
  _QWORD *v47;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  std::string *v57;
  uint64_t v59;
  int v60;
  int v61;
  void *v63;
  _QWORD *v64;
  std::string *p_str;
  std::string::size_type size;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  std::string *v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::string *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  __int128 v96;
  unint64_t *v97;
  unint64_t v98;
  char *v99;
  unint64_t *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  std::string *v114;
  int data;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  std::string::size_type v136;
  int v137;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  std::string *v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  int v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  _BYTE *v165;
  uint64_t v166;
  int v167;
  std::string *v168;
  std::string::size_type v169;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  _BYTE *v197;
  uint64_t v198;
  int v199;
  std::string *v200;
  std::string::size_type v201;
  std::__shared_weak_count *begin;
  unint64_t *p_size;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::vector<std::string>::pointer end;
  __int128 v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  std::string *v225;
  std::string *v226;
  __int128 v227;
  std::string *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  _BYTE *v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  _QWORD *v286;
  siri::dialogengine::PatternSchemaConcreteGroup *v287;
  siri::dialogengine::VisualComponentsCombination::Entry *v288;
  char *v289;
  _DWORD *v290;
  uint64_t v291;
  __int128 *v292;
  __int128 *v293;
  char **v294;
  void *v295;
  unint64_t *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  _BYTE *v303;
  _BYTE *v304;
  uint64_t *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t *v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  void *v324;
  char v325;
  _QWORD *v326;
  std::string *v327;
  std::string::size_type v328;
  _QWORD *v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  std::string *v333;
  std::string::size_type v334;
  _QWORD *v335;
  _QWORD *v336;
  void **v337;
  uint64_t v338;
  _QWORD *v339;
  _QWORD *v340;
  _QWORD *v341;
  std::string *v342;
  std::string::size_type v343;
  _QWORD *v344;
  _QWORD *v345;
  void **v346;
  uint64_t v347;
  _QWORD *v348;
  _QWORD *v349;
  _QWORD *v350;
  _QWORD *v351;
  _QWORD *v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  int v363;
  _QWORD *v364;
  int v365;
  _QWORD *v366;
  _QWORD *v367;
  _QWORD *v368;
  _QWORD *exception;
  _QWORD *v370;
  _QWORD *v371;
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  _QWORD *v375;
  _QWORD *v376;
  uint64_t v378;
  siri::dialogengine *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  std::__shared_weak_count *v387;
  std::__shared_weak_count *v388;
  int v389;
  unint64_t v390;
  int v391;
  __int128 *v392;
  char *v393;
  std::__shared_weak_count *v394;
  std::string *v395;
  std::__shared_weak_count *v396;
  std::__shared_weak_count *v397;
  uint64_t v398;
  uint64_t v399;
  siri::dialogengine::Context *v400;
  _BYTE v401[40];
  std::__shared_weak_count *v402;
  char v403;
  __int128 v404;
  uint64_t v405;
  std::__shared_weak_count *v406;
  char v407;
  void *v408;
  char v409;
  uint64_t v410;
  std::__shared_weak_count *v411;
  uint64_t **v412;
  _BYTE v413[40];
  std::__shared_weak_count *v414;
  char *v415;
  std::__shared_weak_count *v416;
  _BYTE __p[40];
  __int128 v418;
  char v419;
  __int128 v420;
  uint64_t v421;
  void *v422;
  std::__shared_weak_count *v423;
  char v424;
  char v425[8];
  __int128 v426;
  uint64_t v427;
  uint64_t v428;
  std::__shared_weak_count *v429;
  uint64_t **v430;
  __int128 v431;
  __int128 v432;
  void *v433;
  char v434;
  std::__shared_weak_count *v435;
  char v436;
  __int128 v437;
  uint64_t v438;
  std::__shared_weak_count *v439;
  char v440[8];
  __int128 v441;
  uint64_t v442;
  uint64_t v443;
  std::__shared_weak_count *v444;
  uint64_t **v445;
  _BYTE v446[40];
  std::__shared_weak_count *v447;
  void *v448[2];
  uint64_t v449;
  __int128 v450;
  std::string __str;
  __int128 v452;
  __int128 v453;
  std::string v454;
  _BYTE v455[40];
  std::__shared_weak_count *v456;
  char v457;
  __int128 __s;
  std::string *v459;
  std::__shared_weak_count *v460;
  void *v461;
  char v462;
  std::__shared_weak_count *v463;
  _BYTE v464[40];
  std::__shared_weak_count *v465;
  std::vector<std::string> v466;
  std::string v467;
  _BYTE v468[40];
  std::__shared_weak_count *v469;
  __int128 *v470;
  __int128 *v471;
  std::__split_buffer<std::string> __v;
  void **v473[3];

  v7 = (const YAML::detail::iterator_value *)((char *)a4 + 56);
  YAML::Node::as<std::string>(&__str, (uint64_t)a4 + 56);
  YAML::Node::Mark(v7);
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine26PatternSchemaConcreteGroupENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((siri::dialogengine::PatternSchemaConcreteGroup **)&v450);
  std::string::operator=((std::string *)(v450 + 8), &__str);
  v448[1] = 0;
  v448[0] = 0;
  v449 = 0;
  if (*((_BYTE *)a4 + 112) && (v8 = (uint64_t **)*((_QWORD *)a4 + 20)) != 0)
  {
    YAML::detail::node_data::begin(**v8, (uint64_t)__p);
    v9 = *((_QWORD *)a4 + 18);
    v10 = (std::__shared_weak_count *)*((_QWORD *)a4 + 19);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      *(_OWORD *)v446 = *(_OWORD *)__p;
      *(_OWORD *)&v446[16] = *(_OWORD *)&__p[16];
      *(_QWORD *)&v446[32] = v9;
      v447 = v10;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      goto LABEL_13;
    }
    *(_OWORD *)v446 = *(_OWORD *)__p;
    *(_OWORD *)&v446[16] = *(_OWORD *)&__p[16];
    *(_QWORD *)&v446[32] = v9;
  }
  else
  {
    *(_DWORD *)v446 = 0;
    memset(&v446[8], 0, 32);
  }
  v447 = 0;
LABEL_13:
  v379 = this;
  if (*((_BYTE *)a4 + 112) && (v15 = (uint64_t **)*((_QWORD *)a4 + 20)) != 0)
  {
    YAML::detail::node_data::end(**v15, (uint64_t)__p);
    v16 = (std::__shared_weak_count *)*((_QWORD *)a4 + 19);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v389 = *(_DWORD *)__p;
      v385 = *(_QWORD *)&__p[8];
      v383 = *(_QWORD *)&__p[16];
      do
        v19 = __ldxr(v17);
      while (__stxr(v19 + 1, v17));
      do
        v20 = __ldaxr(v17);
      while (__stlxr(v20 - 1, v17));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    else
    {
      v389 = *(_DWORD *)__p;
      v385 = *(_QWORD *)&__p[8];
      v383 = *(_QWORD *)&__p[16];
    }
  }
  else
  {
    v16 = 0;
    v389 = 0;
    v383 = 0;
    v385 = 0;
  }
  v21 = 0;
  v380 = *MEMORY[0x1E0DE4F50];
  v381 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v382 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  v378 = MEMORY[0x1E0DE4FB8] + 16;
  v387 = v16;
  v400 = a2;
  while (1)
  {
    if (*(_DWORD *)v446 == v389)
    {
      v22 = &v446[8];
      v23 = v385;
      if (v389 != 1)
      {
        if (v389 != 2)
          break;
        v22 = &v446[16];
        v23 = v383;
      }
      if (*(_QWORD *)v22 == v23)
        break;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)&v432 + 8, (uint64_t)v446);
    if (!v436)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v438) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v437, *((std::string::size_type *)&v437 + 1));
      }
      else
      {
        *(_OWORD *)__p = v437;
        *(_QWORD *)&__p[16] = v438;
      }
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)__p);
    }
    *(_QWORD *)__p = &v436;
    YAML::as_if<std::string,void>::operator()((std::string *)&v431, (YAML::Node **)__p);
    v390 = v21 + 1;
    if ((BYTE7(v432) & 0x80) == 0)
    {
      v24 = (int *)&v431;
      switch(BYTE7(v432))
      {
        case 5:
          if ((_DWORD)v431 != 1734439797 || BYTE4(v431) != 101)
            goto LABEL_189;
          goto LABEL_45;
        case 6:
        case 8:
        case 9:
        case 0xC:
        case 0xD:
          goto LABEL_189;
        case 7:
          goto LABEL_154;
        case 0xA:
          if ((_QWORD)v431 != 0x7461636572706564 || WORD4(v431) != 25701)
            goto LABEL_189;
          goto LABEL_144;
        case 0xB:
          if ((_QWORD)v431 != 0x7470697263736564 || *(_QWORD *)((char *)&v431 + 3) != 0x6E6F697470697263)
            goto LABEL_189;
          goto LABEL_151;
        case 0xE:
          if ((_QWORD)v431 != 0x615064657473656ELL || *(_QWORD *)((char *)&v431 + 6) != 0x736E726574746150)
            goto LABEL_189;
          goto LABEL_175;
        case 0xF:
          if ((_QWORD)v431 != 0x6D6563616C706572 || *(_QWORD *)((char *)&v431 + 7) != 0x656D614E746E656DLL)
            goto LABEL_189;
          goto LABEL_220;
        case 0x10:
          if (((_QWORD)v431 != 0x6F43676F6C616964 || *((_QWORD *)&v431 + 1) != 0x73746E656E6F706DLL)
            && ((_QWORD)v431 != 0x6F436C6175736976 || *((_QWORD *)&v431 + 1) != 0x73746E656E6F706DLL))
          {
            goto LABEL_189;
          }
          goto LABEL_129;
        default:
          if (&v431 != 27)
            goto LABEL_189;
          v28 = (_QWORD)v431 == 0x6F436C6175736976 && *((_QWORD *)&v431 + 1) == 0x73746E656E6F706DLL;
          v29 = v28 && (_QWORD)v432 == 0x74616E69626D6F43;
          if (!v29 || *(_QWORD *)((char *)&v432 + 3) != 0x6E6F6974616E6962)
            goto LABEL_189;
          goto LABEL_107;
      }
    }
    switch(*((_QWORD *)&v431 + 1))
    {
      case 5:
        if (*(_DWORD *)v431 != 1734439797 || *(_BYTE *)(v431 + 4) != 101)
          goto LABEL_189;
LABEL_45:
        v27 = v450;
        siri::dialogengine::ParsePatternUsagesYAML((siri::dialogengine *)__p, (const YAML::detail::iterator_value *)((char *)&v432 + 8));
        if ((_BYTE *)(v27 + 56) != __p)
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((_QWORD *)(v27 + 56), *(uint64_t **)__p, *(uint64_t **)&__p[8], (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 4);
        *(_QWORD *)v455 = __p;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v455);
        goto LABEL_196;
      case 6:
      case 8:
      case 9:
      case 0xCLL:
      case 0xDLL:
        goto LABEL_189;
      case 7:
        v24 = (int *)v431;
LABEL_154:
        v60 = *v24;
        v61 = *(int *)((char *)v24 + 3);
        if (v60 != 1634298977 || v61 != 1716482913)
          goto LABEL_189;
        v63 = (void *)HIBYTE(v449);
        if (v449 < 0)
          v63 = v448[1];
        if (v63)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"Multiple \"aliasOf\" entries in group \"", 37);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            size = __str.__r_.__value_.__l.__size_;
          v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)p_str, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"\" (line ", 8);
          v68 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"). Only the last one is used.", 29);
          std::stringbuf::str();
          if (a2)
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)v455);
          else
            siri::dialogengine::Log::LogWithLevel((uint64_t)v455, 3u);
          if ((v455[23] & 0x80000000) != 0)
            operator delete(*(void **)v455);
          *(_QWORD *)__p = v380;
          *(_QWORD *)&__p[*(_QWORD *)(v380 - 24)] = v381;
          *(_QWORD *)&__p[16] = v382;
          *(_QWORD *)&__p[24] = MEMORY[0x1E0DE4FB8] + 16;
          if (v424 < 0)
            operator delete(v422);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1C3B8D80C]((char *)&v426 + 8);
          v390 = v21;
        }
        if (!v440[0])
        {
          v373 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v442) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v441, *((std::string::size_type *)&v441 + 1));
          }
          else
          {
            *(_OWORD *)__p = v441;
            *(_QWORD *)&__p[16] = v442;
          }
          YAML::InvalidNode::InvalidNode(v373, (uint64_t)__p);
        }
        *(_QWORD *)__p = v440;
        YAML::as_if<std::string,void>::operator()((std::string *)v455, (YAML::Node **)__p);
        if (SHIBYTE(v449) < 0)
          operator delete(v448[0]);
        *(_OWORD *)v448 = *(_OWORD *)v455;
        v449 = *(_QWORD *)&v455[16];
        if (!v436)
        {
          v374 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v438) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v437, *((std::string::size_type *)&v437 + 1));
          }
          else
          {
            *(_OWORD *)__p = v437;
            *(_QWORD *)&__p[16] = v438;
          }
          YAML::InvalidNode::InvalidNode(v374, (uint64_t)__p);
        }
        goto LABEL_196;
      case 0xALL:
        if (*(_QWORD *)v431 != 0x7461636572706564 || *(_WORD *)(v431 + 8) != 25701)
          goto LABEL_189;
LABEL_144:
        if (!v440[0])
        {
          v372 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v442) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v441, *((std::string::size_type *)&v441 + 1));
          }
          else
          {
            *(_OWORD *)__p = v441;
            *(_QWORD *)&__p[16] = v442;
          }
          YAML::InvalidNode::InvalidNode(v372, (uint64_t)__p);
        }
        v57 = (std::string *)v450;
        *(_QWORD *)__p = v440;
        YAML::as_if<std::string,void>::operator()((std::string *)v455, (YAML::Node **)__p);
        std::string::operator=(v57 + 7, (const std::string *)v455);
        goto LABEL_194;
      case 0xBLL:
        if (*(_QWORD *)v431 != 0x7470697263736564 || *(_QWORD *)(v431 + 3) != 0x6E6F697470697263)
          goto LABEL_189;
LABEL_151:
        if (!v440[0])
        {
          v371 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v442) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v441, *((std::string::size_type *)&v441 + 1));
          }
          else
          {
            *(_OWORD *)__p = v441;
            *(_QWORD *)&__p[16] = v442;
          }
          YAML::InvalidNode::InvalidNode(v371, (uint64_t)__p);
        }
        v59 = v450;
        *(_QWORD *)__p = v440;
        YAML::as_if<std::string,void>::operator()((std::string *)v455, (YAML::Node **)__p);
        std::string::operator=((std::string *)(v59 + 32), (const std::string *)v455);
        goto LABEL_194;
      case 0xELL:
        if (*(_QWORD *)v431 != 0x615064657473656ELL || *(_QWORD *)(v431 + 6) != 0x736E726574746150)
          goto LABEL_189;
LABEL_175:
        if (!v440[0])
        {
          *(_DWORD *)v455 = 0;
          memset(&v455[8], 0, 32);
          v456 = 0;
LABEL_782:
          *(_DWORD *)v401 = 0;
          memset(&v401[8], 0, 32);
          v402 = 0;
          goto LABEL_783;
        }
        if (v445)
        {
          YAML::detail::node_data::begin(**v445, (uint64_t)__p);
          v70 = v443;
          v71 = v444;
          if (v444)
          {
            v72 = (unint64_t *)&v444->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
            *(_OWORD *)v455 = *(_OWORD *)__p;
            *(_OWORD *)&v455[16] = *(_OWORD *)&__p[16];
            *(_QWORD *)&v455[32] = v70;
            v456 = v71;
            do
              v74 = __ldxr(v72);
            while (__stxr(v74 + 1, v72));
            do
              v75 = __ldaxr(v72);
            while (__stlxr(v75 - 1, v72));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          else
          {
            *(_OWORD *)v455 = *(_OWORD *)__p;
            *(_OWORD *)&v455[16] = *(_OWORD *)&__p[16];
            *(_QWORD *)&v455[32] = v443;
            v456 = 0;
          }
        }
        else
        {
          *(_DWORD *)v455 = 0;
          memset(&v455[8], 0, 32);
          v456 = 0;
        }
        if (!v440[0] || !v445)
          goto LABEL_782;
        YAML::detail::node_data::end(**v445, (uint64_t)__p);
        v297 = v443;
        v298 = v444;
        if (v444)
        {
          v299 = (unint64_t *)&v444->__shared_owners_;
          do
            v300 = __ldxr(v299);
          while (__stxr(v300 + 1, v299));
          *(_OWORD *)v401 = *(_OWORD *)__p;
          *(_OWORD *)&v401[16] = *(_OWORD *)&__p[16];
          *(_QWORD *)&v401[32] = v297;
          v402 = v298;
          do
            v301 = __ldxr(v299);
          while (__stxr(v301 + 1, v299));
          do
            v302 = __ldaxr(v299);
          while (__stlxr(v302 - 1, v299));
          if (!v302)
          {
            ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
            std::__shared_weak_count::__release_weak(v298);
          }
        }
        else
        {
          *(_OWORD *)v401 = *(_OWORD *)__p;
          *(_OWORD *)&v401[16] = *(_OWORD *)&__p[16];
          *(_QWORD *)&v401[32] = v443;
          v402 = 0;
        }
LABEL_783:
        while (1)
        {
          if (*(_DWORD *)v455 == *(_DWORD *)v401)
          {
            v303 = &v455[8];
            v304 = &v401[8];
            if (*(_DWORD *)v455 != 1)
            {
              if (*(_DWORD *)v455 != 2)
                break;
              v303 = &v455[16];
              v304 = &v401[16];
            }
            if (*(_QWORD *)v303 == *(_QWORD *)v304)
              break;
          }
          YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)__p, (uint64_t)v455);
          if (!__p[0])
          {
            v367 = __cxa_allocate_exception(0x38uLL);
            if ((__p[31] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v468, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
            }
            else
            {
              *(_OWORD *)v468 = *(_OWORD *)&__p[8];
              *(_QWORD *)&v468[16] = *(_QWORD *)&__p[24];
            }
            YAML::InvalidNode::InvalidNode(v367, (uint64_t)v468);
          }
          v305 = (uint64_t *)v450;
          *(_QWORD *)v468 = __p;
          YAML::as_if<std::string,void>::operator()((std::string *)v464, (YAML::Node **)v468);
          siri::dialogengine::PatternSchemaConcreteGroup::AddNestedPattern(v305, (__int128 *)v464);
          if ((v464[23] & 0x80000000) != 0)
            operator delete(*(void **)v464);
          v306 = v429;
          if (v429)
          {
            v307 = (unint64_t *)&v429->__shared_owners_;
            do
              v308 = __ldaxr(v307);
            while (__stlxr(v308 - 1, v307));
            if (!v308)
            {
              ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
              std::__shared_weak_count::__release_weak(v306);
            }
          }
          if (SHIBYTE(v427) < 0)
            operator delete((void *)v426);
          v309 = v423;
          if (v423)
          {
            v310 = (unint64_t *)&v423->__shared_owners_;
            do
              v311 = __ldaxr(v310);
            while (__stlxr(v311 - 1, v310));
            if (!v311)
            {
              ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
              std::__shared_weak_count::__release_weak(v309);
            }
          }
          if (SHIBYTE(v421) < 0)
            operator delete((void *)v420);
          v312 = (std::__shared_weak_count *)v418;
          if ((_QWORD)v418)
          {
            v313 = (unint64_t *)(v418 + 8);
            do
              v314 = __ldaxr(v313);
            while (__stlxr(v314 - 1, v313));
            if (!v314)
            {
              ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
              std::__shared_weak_count::__release_weak(v312);
            }
          }
          if ((__p[31] & 0x80000000) != 0)
            operator delete(*(void **)&__p[8]);
          YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v455);
        }
        v315 = v402;
        if (v402)
        {
          v316 = (unint64_t *)&v402->__shared_owners_;
          do
            v317 = __ldaxr(v316);
          while (__stlxr(v317 - 1, v316));
          if (!v317)
          {
            ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
            std::__shared_weak_count::__release_weak(v315);
          }
        }
        v283 = v456;
        if (!v456)
          goto LABEL_196;
        v318 = (unint64_t *)&v456->__shared_owners_;
        do
          v285 = __ldaxr(v318);
        while (__stlxr(v285 - 1, v318));
        goto LABEL_821;
      case 0xFLL:
        if (*(_QWORD *)v431 != 0x6D6563616C706572 || *(_QWORD *)(v431 + 7) != 0x656D614E746E656DLL)
          goto LABEL_189;
LABEL_220:
        if (!v440[0])
        {
          v370 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v442) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v441, *((std::string::size_type *)&v441 + 1));
          }
          else
          {
            *(_OWORD *)__p = v441;
            *(_QWORD *)&__p[16] = v442;
          }
          YAML::InvalidNode::InvalidNode(v370, (uint64_t)__p);
        }
        v88 = (std::string *)v450;
        *(_QWORD *)__p = v440;
        YAML::as_if<std::string,void>::operator()((std::string *)v455, (YAML::Node **)__p);
        std::string::operator=(v88 + 8, (const std::string *)v455);
        goto LABEL_194;
      case 0x10:
        if ((*(_QWORD *)v431 != 0x6F43676F6C616964 || *(_QWORD *)(v431 + 8) != 0x73746E656E6F706DLL)
          && (*(_QWORD *)v431 != 0x6F436C6175736976 || *(_QWORD *)(v431 + 8) != 0x73746E656E6F706DLL))
        {
          goto LABEL_189;
        }
LABEL_129:
        if (v440[0])
        {
          if (v445)
          {
            YAML::detail::node_data::begin(**v445, (uint64_t)__p);
            v50 = v443;
            v51 = v444;
            if (v444)
            {
              v52 = (unint64_t *)&v444->__shared_owners_;
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
              *(_OWORD *)v413 = *(_OWORD *)__p;
              *(_OWORD *)&v413[16] = *(_OWORD *)&__p[16];
              *(_QWORD *)&v413[32] = v50;
              v414 = v51;
              do
                v54 = __ldxr(v52);
              while (__stxr(v54 + 1, v52));
              do
                v55 = __ldaxr(v52);
              while (__stlxr(v55 - 1, v52));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            else
            {
              *(_OWORD *)v413 = *(_OWORD *)__p;
              *(_OWORD *)&v413[16] = *(_OWORD *)&__p[16];
              *(_QWORD *)&v413[32] = v443;
              v414 = 0;
            }
          }
          else
          {
            *(_DWORD *)v413 = 0;
            memset(&v413[8], 0, 32);
            v414 = 0;
          }
          if (v440[0] && v445)
          {
            YAML::detail::node_data::end(**v445, (uint64_t)__p);
            v89 = v444;
            if (v444)
            {
              v90 = (unint64_t *)&v444->__shared_owners_;
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
              v391 = *(_DWORD *)__p;
              v386 = *(_QWORD *)&__p[8];
              v384 = *(_QWORD *)&__p[16];
              do
                v92 = __ldxr(v90);
              while (__stxr(v92 + 1, v90));
              do
                v93 = __ldaxr(v90);
              while (__stlxr(v93 - 1, v90));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
            }
            else
            {
              v391 = *(_DWORD *)__p;
              v386 = *(_QWORD *)&__p[8];
              v384 = *(_QWORD *)&__p[16];
            }
          }
          else
          {
            v386 = 0;
            v384 = 0;
            v89 = 0;
            v391 = 0;
          }
        }
        else
        {
          v386 = 0;
          v384 = 0;
          v89 = 0;
          v391 = 0;
          *(_DWORD *)v413 = 0;
          memset(&v413[8], 0, 32);
          v414 = 0;
        }
        v388 = v89;
        while (2)
        {
          if (*(_DWORD *)v413 != v391)
            goto LABEL_243;
          v95 = v386;
          v94 = &v413[8];
          if (v391 == 1)
            goto LABEL_242;
          if (v391 == 2)
          {
            v94 = &v413[16];
            v95 = v384;
LABEL_242:
            if (*(_QWORD *)v94 != v95)
            {
LABEL_243:
              YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v401, (uint64_t)v413);
              v96 = v450;
              if (*((_QWORD *)&v450 + 1))
              {
                v97 = (unint64_t *)(*((_QWORD *)&v450 + 1) + 8);
                do
                  v98 = __ldxr(v97);
                while (__stxr(v98 + 1, v97));
              }
              if (!v403)
              {
                v368 = __cxa_allocate_exception(0x38uLL);
                if (SHIBYTE(v405) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v404, *((std::string::size_type *)&v404 + 1));
                }
                else
                {
                  *(_OWORD *)__p = v404;
                  *(_QWORD *)&__p[16] = v405;
                }
                YAML::InvalidNode::InvalidNode(v368, (uint64_t)__p);
              }
              *(_QWORD *)__p = &v403;
              YAML::as_if<std::string,void>::operator()((std::string *)v455, (YAML::Node **)__p);
              siri::dialogengine::ParseStringList((uint64_t *)v455, 0, (uint64_t *)&v470);
              if ((v455[23] & 0x80000000) != 0)
                operator delete(*(void **)v455);
              v395 = (std::string *)v470;
              v392 = v471;
              if (v470 == v471)
              {
LABEL_696:
                *(_QWORD *)__p = &v470;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                if (*((_QWORD *)&v96 + 1))
                {
                  v270 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
                  do
                    v271 = __ldaxr(v270);
                  while (__stlxr(v271 - 1, v270));
                  if (!v271)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v96 + 1) + 16))(*((_QWORD *)&v96 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v96 + 1));
                  }
                }
                v272 = v411;
                if (v411)
                {
                  v273 = (unint64_t *)&v411->__shared_owners_;
                  do
                    v274 = __ldaxr(v273);
                  while (__stlxr(v274 - 1, v273));
                  if (!v274)
                  {
                    ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                    std::__shared_weak_count::__release_weak(v272);
                  }
                }
                if (v409 < 0)
                  operator delete(v408);
                v275 = v406;
                if (v406)
                {
                  v276 = (unint64_t *)&v406->__shared_owners_;
                  do
                    v277 = __ldaxr(v276);
                  while (__stlxr(v277 - 1, v276));
                  if (!v277)
                  {
                    ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                    std::__shared_weak_count::__release_weak(v275);
                  }
                }
                if (SHIBYTE(v405) < 0)
                  operator delete((void *)v404);
                v278 = v402;
                if (v402)
                {
                  v279 = (unint64_t *)&v402->__shared_owners_;
                  do
                    v280 = __ldaxr(v279);
                  while (__stlxr(v280 - 1, v279));
                  if (!v280)
                  {
                    ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                    std::__shared_weak_count::__release_weak(v278);
                  }
                }
                if ((v401[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v401[8]);
                YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v413);
                v89 = v388;
                continue;
              }
              while (2)
              {
                v99 = (char *)operator new(0x140uLL);
                *((_QWORD *)v99 + 1) = 0;
                v100 = (unint64_t *)(v99 + 8);
                *((_QWORD *)v99 + 2) = 0;
                *(_QWORD *)v99 = &off_1E7931640;
                *(_OWORD *)(v99 + 24) = 0u;
                *(_OWORD *)(v99 + 40) = 0u;
                *(_OWORD *)(v99 + 56) = 0u;
                *(_OWORD *)(v99 + 72) = 0u;
                *(_OWORD *)(v99 + 88) = 0u;
                *(_OWORD *)(v99 + 104) = 0u;
                *(_OWORD *)(v99 + 120) = 0u;
                *(_OWORD *)(v99 + 136) = 0u;
                *(_OWORD *)(v99 + 152) = 0u;
                *(_OWORD *)(v99 + 168) = 0u;
                *(_OWORD *)(v99 + 184) = 0u;
                *(_OWORD *)(v99 + 200) = 0u;
                *(_OWORD *)(v99 + 216) = 0u;
                *(_OWORD *)(v99 + 232) = 0u;
                *(_OWORD *)(v99 + 248) = 0u;
                v397 = (std::__shared_weak_count *)v99;
                *((_QWORD *)v99 + 39) = 0;
                *(_OWORD *)(v99 + 264) = 0u;
                *(_OWORD *)(v99 + 280) = 0u;
                *(_OWORD *)(v99 + 296) = 0u;
                v393 = v99 + 24;
                std::string::operator=((std::string *)v99 + 1, v395);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v471 - (char *)v470) >> 3) >= 2)
                {
                  memset(__p, 0, 24);
                  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::string *)__p, (__int128 *)((char *)v470 + 24), v471, 0xAAAAAAAAAAAAAAABLL * (((char *)v471 - ((char *)v470 + 24)) >> 3));
                  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v397[12].__shared_owners_, *(std::string **)__p, *(__int128 **)&__p[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3));
                  *(_QWORD *)v455 = __p;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v455);
                }
                if (v407)
                {
                  if (v412)
                  {
                    YAML::detail::node_data::begin(**v412, (uint64_t)__p);
                    v101 = v410;
                    v102 = v411;
                    if (v411)
                    {
                      v103 = (unint64_t *)&v411->__shared_owners_;
                      do
                        v104 = __ldxr(v103);
                      while (__stxr(v104 + 1, v103));
                      *(_OWORD *)v468 = *(_OWORD *)__p;
                      *(_OWORD *)&v468[16] = *(_OWORD *)&__p[16];
                      *(_QWORD *)&v468[32] = v101;
                      v469 = v102;
                      do
                        v105 = __ldxr(v103);
                      while (__stxr(v105 + 1, v103));
                      do
                        v106 = __ldaxr(v103);
                      while (__stlxr(v106 - 1, v103));
                      if (!v106)
                      {
                        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                        std::__shared_weak_count::__release_weak(v102);
                      }
                    }
                    else
                    {
                      *(_OWORD *)v468 = *(_OWORD *)__p;
                      *(_OWORD *)&v468[16] = *(_OWORD *)&__p[16];
                      *(_QWORD *)&v468[32] = v410;
                      v469 = 0;
                    }
                  }
                  else
                  {
                    *(_DWORD *)v468 = 0;
                    memset(&v468[8], 0, 32);
                    v469 = 0;
                  }
                  if (v407 && v412)
                  {
                    YAML::detail::node_data::end(**v412, (uint64_t)__p);
                    if (v411)
                    {
                      v394 = v411;
                      v108 = (unint64_t *)&v411->__shared_owners_;
                      do
                        v109 = __ldxr(v108);
                      while (__stxr(v109 + 1, v108));
                      v107 = *(_DWORD *)__p;
                      v399 = *(_QWORD *)&__p[8];
                      v398 = *(_QWORD *)&__p[16];
                      do
                        v110 = __ldxr(v108);
                      while (__stxr(v110 + 1, v108));
                      do
                        v111 = __ldaxr(v108);
                      while (__stlxr(v111 - 1, v108));
                      if (!v111)
                      {
                        ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
                        std::__shared_weak_count::__release_weak(v394);
                      }
                    }
                    else
                    {
                      v394 = 0;
                      v107 = *(_DWORD *)__p;
                      v399 = *(_QWORD *)&__p[8];
                      v398 = *(_QWORD *)&__p[16];
                    }
                  }
                  else
                  {
                    v399 = 0;
                    v398 = 0;
                    v394 = 0;
                    v107 = 0;
                  }
                }
                else
                {
                  v399 = 0;
                  v398 = 0;
                  v394 = 0;
                  v107 = 0;
                  *(_DWORD *)v468 = 0;
                  memset(&v468[8], 0, 32);
                  v469 = 0;
                }
                while (2)
                {
                  if (*(_DWORD *)v468 != v107)
                    goto LABEL_281;
                  v112 = &v468[8];
                  v113 = v399;
                  if (v107 != 1)
                  {
                    if (v107 != 2)
                      break;
                    v112 = &v468[16];
                    v113 = v398;
                  }
                  if (*(_QWORD *)v112 != v113)
                  {
LABEL_281:
                    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)__p, (uint64_t)v468);
                    if (!v419)
                    {
                      v359 = __cxa_allocate_exception(0x38uLL);
                      if (SHIBYTE(v421) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)v455, (const std::string::value_type *)v420, *((std::string::size_type *)&v420 + 1));
                      }
                      else
                      {
                        *(_OWORD *)v455 = v420;
                        *(_QWORD *)&v455[16] = v421;
                      }
                      YAML::InvalidNode::InvalidNode(v359, (uint64_t)v455);
                    }
                    *(_QWORD *)v455 = &v419;
                    YAML::as_if<std::string,void>::operator()(&v467, (YAML::Node **)v455);
                    if ((*((_BYTE *)&v467.__r_.__value_.__s + 23) & 0x80) == 0)
                    {
                      v114 = &v467;
                      switch(*((_BYTE *)&v467.__r_.__value_.__s + 23))
                      {
                        case 4:
                          data = (int)v467.__r_.__value_.__l.__data_;
                          goto LABEL_287;
                        case 5:
                          if (LODWORD(v467.__r_.__value_.__l.__data_) != 1734439797
                            || v467.__r_.__value_.__s.__data_[4] != 101)
                          {
                            goto LABEL_385;
                          }
                          goto LABEL_348;
                        case 0xA:
                          goto LABEL_357;
                        case 0xD:
                          if (v467.__r_.__value_.__r.__words[0] != 0x6C754D776F6C6C61
                            || *(std::string::size_type *)((char *)v467.__r_.__value_.__r.__words + 5) != 0x656C7069746C754DLL)
                          {
                            goto LABEL_385;
                          }
                          goto LABEL_377;
                        case 0xE:
                          if (v467.__r_.__value_.__r.__words[0] != 0x56746C7561666564
                            || *(std::string::size_type *)((char *)v467.__r_.__value_.__r.__words + 6) != 0x746E616972615674)
                          {
                            goto LABEL_385;
                          }
                          goto LABEL_392;
                        case 0xF:
                          if (v467.__r_.__value_.__r.__words[0] != 0x566465776F6C6C61
                            || *(std::string::size_type *)((char *)v467.__r_.__value_.__r.__words + 7) != 0x73746E6169726156)
                          {
                            goto LABEL_385;
                          }
                          goto LABEL_333;
                        case 0x10:
                          if (v467.__r_.__value_.__r.__words[0] != 0x43746C7561666564
                            || v467.__r_.__value_.__l.__size_ != 0x746E656E6F706D6FLL)
                          {
                            goto LABEL_385;
                          }
                          goto LABEL_354;
                        default:
                          goto LABEL_385;
                      }
                    }
                    switch(v467.__r_.__value_.__l.__size_)
                    {
                      case 4uLL:
                        data = *(_DWORD *)v467.__r_.__value_.__l.__data_;
LABEL_287:
                        if (data != 1819047270)
                          goto LABEL_385;
                        memset(&v466, 0, sizeof(v466));
                        if (v425[0])
                        {
                          if (v430)
                          {
                            YAML::detail::node_data::begin(**v430, (uint64_t)v455);
                            v116 = v428;
                            v117 = v429;
                            if (v429)
                            {
                              v118 = (unint64_t *)&v429->__shared_owners_;
                              do
                                v119 = __ldxr(v118);
                              while (__stxr(v119 + 1, v118));
                              *(_OWORD *)v464 = *(_OWORD *)v455;
                              *(_OWORD *)&v464[16] = *(_OWORD *)&v455[16];
                              *(_QWORD *)&v464[32] = v116;
                              v465 = v117;
                              do
                                v120 = __ldxr(v118);
                              while (__stxr(v120 + 1, v118));
                              do
                                v121 = __ldaxr(v118);
                              while (__stlxr(v121 - 1, v118));
                              if (!v121)
                              {
                                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                                std::__shared_weak_count::__release_weak(v117);
                              }
                            }
                            else
                            {
                              *(_OWORD *)v464 = *(_OWORD *)v455;
                              *(_OWORD *)&v464[16] = *(_OWORD *)&v455[16];
                              *(_QWORD *)&v464[32] = v428;
                              v465 = 0;
                            }
                          }
                          else
                          {
                            *(_DWORD *)v464 = 0;
                            memset(&v464[8], 0, 32);
                            v465 = 0;
                          }
                          if (v425[0] && v430)
                          {
                            YAML::detail::node_data::end(**v430, (uint64_t)v455);
                            v151 = v429;
                            if (v429)
                            {
                              v160 = (unint64_t *)&v429->__shared_owners_;
                              do
                                v161 = __ldxr(v160);
                              while (__stxr(v161 + 1, v160));
                              v152 = *(_DWORD *)v455;
                              v150 = *(_QWORD *)&v455[16];
                              v149 = *(_QWORD *)&v455[8];
                              do
                                v162 = __ldxr(v160);
                              while (__stxr(v162 + 1, v160));
                              do
                                v163 = __ldaxr(v160);
                              while (__stlxr(v163 - 1, v160));
                              if (!v163)
                              {
                                ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                                std::__shared_weak_count::__release_weak(v151);
                              }
                            }
                            else
                            {
                              v152 = *(_DWORD *)v455;
                              v150 = *(_QWORD *)&v455[16];
                              v149 = *(_QWORD *)&v455[8];
                            }
                          }
                          else
                          {
                            v149 = 0;
                            v150 = 0;
                            v151 = 0;
                            v152 = 0;
                          }
                        }
                        else
                        {
                          v149 = 0;
                          v150 = 0;
                          v151 = 0;
                          v152 = 0;
                          *(_DWORD *)v464 = 0;
                          memset(&v464[8], 0, 32);
                          v465 = 0;
                        }
                        v164 = v151;
                        break;
                      case 5uLL:
                        if (*(_DWORD *)v467.__r_.__value_.__l.__data_ != 1734439797
                          || *(_BYTE *)(v467.__r_.__value_.__r.__words[0] + 4) != 101)
                        {
                          goto LABEL_385;
                        }
LABEL_348:
                        siri::dialogengine::ParsePatternUsagesYAML((siri::dialogengine *)v455, (const YAML::detail::iterator_value *)__p);
                        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(&v397[2].__vftable, *(uint64_t **)v455, *(uint64_t **)&v455[8], (uint64_t)(*(_QWORD *)&v455[8] - *(_QWORD *)v455) >> 4);
                        *(_QWORD *)v464 = v455;
                        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v464);
                        goto LABEL_633;
                      case 0xAuLL:
                        v114 = (std::string *)v467.__r_.__value_.__r.__words[0];
LABEL_357:
                        v136 = v114->__r_.__value_.__r.__words[0];
                        v137 = LOWORD(v114->__r_.__value_.__r.__words[1]);
                        if (v136 != 0x6974726F70707573 || v137 != 26478)
                          goto LABEL_385;
                        memset(&v466, 0, sizeof(v466));
                        if (v425[0])
                        {
                          if (v430)
                          {
                            YAML::detail::node_data::begin(**v430, (uint64_t)v455);
                            v139 = v428;
                            v140 = v429;
                            if (v429)
                            {
                              v141 = (unint64_t *)&v429->__shared_owners_;
                              do
                                v142 = __ldxr(v141);
                              while (__stxr(v142 + 1, v141));
                              *(_OWORD *)v464 = *(_OWORD *)v455;
                              *(_OWORD *)&v464[16] = *(_OWORD *)&v455[16];
                              *(_QWORD *)&v464[32] = v139;
                              v465 = v140;
                              do
                                v143 = __ldxr(v141);
                              while (__stxr(v143 + 1, v141));
                              do
                                v144 = __ldaxr(v141);
                              while (__stlxr(v144 - 1, v141));
                              if (!v144)
                              {
                                ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                                std::__shared_weak_count::__release_weak(v140);
                              }
                            }
                            else
                            {
                              *(_OWORD *)v464 = *(_OWORD *)v455;
                              *(_OWORD *)&v464[16] = *(_OWORD *)&v455[16];
                              *(_QWORD *)&v464[32] = v428;
                              v465 = 0;
                            }
                          }
                          else
                          {
                            *(_DWORD *)v464 = 0;
                            memset(&v464[8], 0, 32);
                            v465 = 0;
                          }
                          if (v425[0] && v430)
                          {
                            YAML::detail::node_data::end(**v430, (uint64_t)v455);
                            v158 = v429;
                            if (v429)
                            {
                              v192 = (unint64_t *)&v429->__shared_owners_;
                              do
                                v193 = __ldxr(v192);
                              while (__stxr(v193 + 1, v192));
                              v159 = *(_DWORD *)v455;
                              v157 = *(_QWORD *)&v455[16];
                              v156 = *(_QWORD *)&v455[8];
                              do
                                v194 = __ldxr(v192);
                              while (__stxr(v194 + 1, v192));
                              do
                                v195 = __ldaxr(v192);
                              while (__stlxr(v195 - 1, v192));
                              if (!v195)
                              {
                                ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                                std::__shared_weak_count::__release_weak(v158);
                              }
                            }
                            else
                            {
                              v159 = *(_DWORD *)v455;
                              v157 = *(_QWORD *)&v455[16];
                              v156 = *(_QWORD *)&v455[8];
                            }
                          }
                          else
                          {
                            v156 = 0;
                            v157 = 0;
                            v158 = 0;
                            v159 = 0;
                          }
                        }
                        else
                        {
                          v156 = 0;
                          v157 = 0;
                          v158 = 0;
                          v159 = 0;
                          *(_DWORD *)v464 = 0;
                          memset(&v464[8], 0, 32);
                          v465 = 0;
                        }
                        v196 = v158;
                        while (2)
                        {
                          if (*(_DWORD *)v464 != v159)
                            goto LABEL_513;
                          v197 = &v464[8];
                          v198 = v156;
                          if (v159 == 1)
                            goto LABEL_512;
                          if (v159 == 2)
                          {
                            v197 = &v464[16];
                            v198 = v157;
LABEL_512:
                            if (*(_QWORD *)v197 != v198)
                            {
LABEL_513:
                              YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v455, (uint64_t)v464);
                              if (!v457)
                              {
                                v351 = __cxa_allocate_exception(0x38uLL);
                                if (SHIBYTE(v459) < 0)
                                {
                                  std::string::__init_copy_ctor_external((std::string *)&__v, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
                                }
                                else
                                {
                                  *(_OWORD *)&__v.__first_ = __s;
                                  __v.__end_ = v459;
                                }
                                YAML::InvalidNode::InvalidNode(v351, (uint64_t)&__v);
                              }
                              __v.__first_ = (std::__split_buffer<std::string>::pointer)&v457;
                              YAML::as_if<std::string,void>::operator()(&v454, (YAML::Node **)&__v);
                              v199 = HIBYTE(v454.__r_.__value_.__r.__words[2]);
                              if ((*((_BYTE *)&v454.__r_.__value_.__s + 23) & 0x80) != 0)
                              {
                                v201 = v454.__r_.__value_.__l.__size_;
                                v200 = (std::string *)v454.__r_.__value_.__r.__words[0];
                                if (v454.__r_.__value_.__l.__size_ == 5)
                                {
LABEL_518:
                                  if (LODWORD(v200->__r_.__value_.__l.__data_) == 1734439797
                                    && v200->__r_.__value_.__s.__data_[4] == 101)
                                  {
                                    siri::dialogengine::ParsePatternUsagesYAML((siri::dialogengine *)&__v, (const YAML::detail::iterator_value *)v455);
                                    std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(&v397[4].__vftable, (uint64_t *)__v.__first_, (uint64_t *)__v.__begin_, ((char *)__v.__begin_ - (char *)__v.__first_) >> 4);
                                    v473[0] = (void **)&__v;
                                    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v473);
                                    v199 = HIBYTE(v454.__r_.__value_.__r.__words[2]);
                                    if ((*((_BYTE *)&v454.__r_.__value_.__s + 23) & 0x80) == 0)
                                      goto LABEL_523;
                                  }
                                  else if ((*((_BYTE *)&v454.__r_.__value_.__s + 23) & 0x80) == 0)
                                  {
                                    goto LABEL_523;
                                  }
                                  v201 = v454.__r_.__value_.__l.__size_;
                                  v200 = (std::string *)v454.__r_.__value_.__r.__words[0];
                                }
                                if (v201 == 8)
                                {
LABEL_528:
                                  if (v200->__r_.__value_.__r.__words[0] == 0x656469727265766FLL)
                                  {
                                    siri::dialogengine::ParsePatternOverrideYAML((std::vector<std::string> **)&__v, v400, (const YAML::detail::iterator_value *)v455);
                                    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)&v466, (__int128 *)&__v);
                                    begin = (std::__shared_weak_count *)__v.__begin_;
                                    if (__v.__begin_)
                                    {
                                      p_size = &__v.__begin_->__r_.__value_.__l.__size_;
                                      do
                                        v205 = __ldaxr(p_size);
                                      while (__stlxr(v205 - 1, p_size));
                                      if (!v205)
                                      {
                                        ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
                                        std::__shared_weak_count::__release_weak(begin);
                                      }
                                    }
                                    v199 = HIBYTE(v454.__r_.__value_.__r.__words[2]);
                                    if ((*((_BYTE *)&v454.__r_.__value_.__s + 23) & 0x80) == 0)
                                      goto LABEL_530;
                                  }
                                  else if ((v199 & 0x80) == 0)
                                  {
                                    goto LABEL_530;
                                  }
                                  v200 = (std::string *)v454.__r_.__value_.__r.__words[0];
                                  if (v454.__r_.__value_.__l.__size_ == 8)
                                  {
LABEL_539:
                                    if (v200->__r_.__value_.__r.__words[0] == 0x73656C706D617865)
                                    {
                                      siri::dialogengine::ParseExamplesYAML((std::vector<std::string> *)&__v, (const YAML::detail::iterator_value *)v455);
                                      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v397[11].__shared_owners_, __v.__first_, (__int128 *)__v.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)__v.__begin_ - (char *)__v.__first_) >> 3));
                                      v473[0] = (void **)&__v;
                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v473);
                                      if ((*((_BYTE *)&v454.__r_.__value_.__s + 23) & 0x80) == 0)
                                        goto LABEL_545;
                                    }
                                    else if ((v199 & 0x80) == 0)
                                    {
                                      goto LABEL_545;
                                    }
                                    v200 = (std::string *)v454.__r_.__value_.__r.__words[0];
                                  }
                                }
                                operator delete(v200);
                              }
                              else
                              {
                                if (HIBYTE(v454.__r_.__value_.__r.__words[2]) == 5)
                                {
                                  v200 = &v454;
                                  goto LABEL_518;
                                }
LABEL_523:
                                if (v199 == 8)
                                {
                                  v200 = &v454;
                                  goto LABEL_528;
                                }
LABEL_530:
                                if (v199 == 8)
                                {
                                  v200 = &v454;
                                  goto LABEL_539;
                                }
                              }
LABEL_545:
                              v206 = v463;
                              if (v463)
                              {
                                v207 = (unint64_t *)&v463->__shared_owners_;
                                do
                                  v208 = __ldaxr(v207);
                                while (__stlxr(v208 - 1, v207));
                                if (!v208)
                                {
                                  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                                  std::__shared_weak_count::__release_weak(v206);
                                }
                              }
                              if (v462 < 0)
                                operator delete(v461);
                              v209 = v460;
                              if (v460)
                              {
                                v210 = (unint64_t *)&v460->__shared_owners_;
                                do
                                  v211 = __ldaxr(v210);
                                while (__stlxr(v211 - 1, v210));
                                if (!v211)
                                {
                                  ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                                  std::__shared_weak_count::__release_weak(v209);
                                }
                              }
                              if (SHIBYTE(v459) < 0)
                                operator delete((void *)__s);
                              v212 = v456;
                              if (v456)
                              {
                                v213 = (unint64_t *)&v456->__shared_owners_;
                                do
                                  v214 = __ldaxr(v213);
                                while (__stlxr(v214 - 1, v213));
                                if (!v214)
                                {
                                  ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                                  std::__shared_weak_count::__release_weak(v212);
                                }
                              }
                              if ((v455[31] & 0x80000000) != 0)
                                operator delete(*(void **)&v455[8]);
                              YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v464);
                              v158 = v196;
                              continue;
                            }
                          }
                          break;
                        }
                        if (v158)
                        {
                          v215 = (unint64_t *)&v158->__shared_owners_;
                          do
                            v216 = __ldaxr(v215);
                          while (__stlxr(v216 - 1, v215));
                          if (!v216)
                          {
                            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                            std::__shared_weak_count::__release_weak(v158);
                          }
                        }
                        v217 = v465;
                        if (v465)
                        {
                          v218 = (unint64_t *)&v465->__shared_owners_;
                          do
                            v219 = __ldaxr(v218);
                          while (__stlxr(v219 - 1, v218));
                          if (!v219)
                          {
                            ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                            std::__shared_weak_count::__release_weak(v217);
                          }
                        }
                        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(&v397[9].__shared_owners_, (uint64_t *)v466.__begin_, (uint64_t *)v466.__end_, ((char *)v466.__end_ - (char *)v466.__begin_) >> 4);
LABEL_578:
                        *(_QWORD *)v455 = &v466;
                        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v455);
LABEL_633:
                        if (SHIBYTE(v467.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v467.__r_.__value_.__l.__data_);
                        v245 = v429;
                        if (v429)
                        {
                          v246 = (unint64_t *)&v429->__shared_owners_;
                          do
                            v247 = __ldaxr(v246);
                          while (__stlxr(v247 - 1, v246));
                          if (!v247)
                          {
                            ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                            std::__shared_weak_count::__release_weak(v245);
                          }
                        }
                        if (SHIBYTE(v427) < 0)
                          operator delete((void *)v426);
                        v248 = v423;
                        if (v423)
                        {
                          v249 = (unint64_t *)&v423->__shared_owners_;
                          do
                            v250 = __ldaxr(v249);
                          while (__stlxr(v250 - 1, v249));
                          if (!v250)
                          {
                            ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                            std::__shared_weak_count::__release_weak(v248);
                          }
                        }
                        if (SHIBYTE(v421) < 0)
                          operator delete((void *)v420);
                        v251 = (std::__shared_weak_count *)v418;
                        if ((_QWORD)v418)
                        {
                          v252 = (unint64_t *)(v418 + 8);
                          do
                            v253 = __ldaxr(v252);
                          while (__stlxr(v253 - 1, v252));
                          if (!v253)
                          {
                            ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                            std::__shared_weak_count::__release_weak(v251);
                          }
                        }
                        if ((__p[31] & 0x80000000) != 0)
                          operator delete(*(void **)&__p[8]);
                        YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v468);
                        continue;
                      case 0xDuLL:
                        if (*(_QWORD *)v467.__r_.__value_.__l.__data_ != 0x6C754D776F6C6C61
                          || *(_QWORD *)(v467.__r_.__value_.__r.__words[0] + 5) != 0x656C7069746C754DLL)
                        {
                          goto LABEL_385;
                        }
LABEL_377:
                        if (!v425[0])
                        {
                          v361 = __cxa_allocate_exception(0x38uLL);
                          if (SHIBYTE(v427) < 0)
                          {
                            std::string::__init_copy_ctor_external((std::string *)v455, (const std::string::value_type *)v426, *((std::string::size_type *)&v426 + 1));
                          }
                          else
                          {
                            *(_OWORD *)v455 = v426;
                            *(_QWORD *)&v455[16] = v427;
                          }
                          YAML::InvalidNode::InvalidNode(v361, (uint64_t)v455);
                        }
                        if (!v430)
                        {
                          v364 = __cxa_allocate_exception(0x38uLL);
                          *(_QWORD *)v455 = YAML::Node::Mark((YAML::Node *)v425);
                          *(_DWORD *)&v455[8] = v365;
                          YAML::BadConversion::BadConversion(v364, v455);
                          *v364 = &off_1E79317E8;
                        }
                        v464[0] = 0;
                        if (!YAML::convert<BOOL>::decode((YAML::Node *)v425, v464))
                        {
                          v362 = __cxa_allocate_exception(0x38uLL);
                          *(_QWORD *)v455 = YAML::Node::Mark((YAML::Node *)v425);
                          *(_DWORD *)&v455[8] = v363;
                          YAML::BadConversion::BadConversion(v362, v455);
                          *v362 = &off_1E79317E8;
                        }
                        LOBYTE(v397[5].__vftable) = v464[0];
                        goto LABEL_633;
                      case 0xEuLL:
                        if (*(_QWORD *)v467.__r_.__value_.__l.__data_ != 0x56746C7561666564
                          || *(_QWORD *)(v467.__r_.__value_.__r.__words[0] + 6) != 0x746E616972615674)
                        {
                          goto LABEL_385;
                        }
LABEL_392:
                        if (!v425[0])
                        {
                          v366 = __cxa_allocate_exception(0x38uLL);
                          if (SHIBYTE(v427) < 0)
                          {
                            std::string::__init_copy_ctor_external((std::string *)v455, (const std::string::value_type *)v426, *((std::string::size_type *)&v426 + 1));
                          }
                          else
                          {
                            *(_OWORD *)v455 = v426;
                            *(_QWORD *)&v455[16] = v427;
                          }
                          YAML::InvalidNode::InvalidNode(v366, (uint64_t)v455);
                        }
                        *(_QWORD *)v455 = v425;
                        YAML::as_if<std::string,void>::operator()((std::string *)v464, (YAML::Node **)v455);
                        std::string::operator=((std::string *)&v397[6].__shared_owners_, (const std::string *)v464);
                        goto LABEL_390;
                      case 0xFuLL:
                        if (*(_QWORD *)v467.__r_.__value_.__l.__data_ != 0x566465776F6C6C61
                          || *(_QWORD *)(v467.__r_.__value_.__r.__words[0] + 7) != 0x73746E6169726156)
                        {
                          goto LABEL_385;
                        }
LABEL_333:
                        memset(&v466, 0, sizeof(v466));
                        if (v425[0])
                        {
                          if (v430)
                          {
                            YAML::detail::node_data::begin(**v430, (uint64_t)v455);
                            v128 = v428;
                            v129 = v429;
                            if (v429)
                            {
                              v130 = (unint64_t *)&v429->__shared_owners_;
                              do
                                v131 = __ldxr(v130);
                              while (__stxr(v131 + 1, v130));
                              *(_OWORD *)v464 = *(_OWORD *)v455;
                              *(_OWORD *)&v464[16] = *(_OWORD *)&v455[16];
                              *(_QWORD *)&v464[32] = v128;
                              v465 = v129;
                              do
                                v132 = __ldxr(v130);
                              while (__stxr(v132 + 1, v130));
                              do
                                v133 = __ldaxr(v130);
                              while (__stlxr(v133 - 1, v130));
                              if (!v133)
                              {
                                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                                std::__shared_weak_count::__release_weak(v129);
                              }
                            }
                            else
                            {
                              *(_OWORD *)v464 = *(_OWORD *)v455;
                              *(_OWORD *)&v464[16] = *(_OWORD *)&v455[16];
                              *(_QWORD *)&v464[32] = v428;
                              v465 = 0;
                            }
                          }
                          else
                          {
                            *(_DWORD *)v464 = 0;
                            memset(&v464[8], 0, 32);
                            v465 = 0;
                          }
                          if (v425[0] && v430)
                          {
                            YAML::detail::node_data::end(**v430, (uint64_t)v455);
                            if (v429)
                            {
                              v396 = v429;
                              v188 = (unint64_t *)&v429->__shared_owners_;
                              do
                                v189 = __ldxr(v188);
                              while (__stxr(v189 + 1, v188));
                              v155 = *(_DWORD *)v455;
                              v154 = *(_QWORD *)&v455[16];
                              v153 = *(_QWORD *)&v455[8];
                              do
                                v190 = __ldxr(v188);
                              while (__stxr(v190 + 1, v188));
                              do
                                v191 = __ldaxr(v188);
                              while (__stlxr(v191 - 1, v188));
                              if (!v191)
                              {
                                ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                                std::__shared_weak_count::__release_weak(v396);
                              }
                            }
                            else
                            {
                              v396 = 0;
                              v155 = *(_DWORD *)v455;
                              v154 = *(_QWORD *)&v455[16];
                              v153 = *(_QWORD *)&v455[8];
                            }
                          }
                          else
                          {
                            v153 = 0;
                            v154 = 0;
                            v396 = 0;
                            v155 = 0;
                          }
                        }
                        else
                        {
                          v153 = 0;
                          v154 = 0;
                          v396 = 0;
                          v155 = 0;
                          *(_DWORD *)v464 = 0;
                          memset(&v464[8], 0, 32);
                          v465 = 0;
                        }
                        while (2)
                        {
                          if (*(_DWORD *)v464 != v155)
                            goto LABEL_581;
                          v238 = &v464[8];
                          v239 = v153;
                          if (v155 == 1)
                            goto LABEL_621;
                          if (v155 == 2)
                          {
                            v238 = &v464[16];
                            v239 = v154;
LABEL_621:
                            if (*(_QWORD *)v238 != v239)
                            {
LABEL_581:
                              YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v455, (uint64_t)v464);
                              if (!v455[0])
                              {
                                v352 = __cxa_allocate_exception(0x38uLL);
                                if ((v455[31] & 0x80000000) != 0)
                                {
                                  std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)&v455[8], *(std::string::size_type *)&v455[16]);
                                }
                                else
                                {
                                  *(_OWORD *)&__v.__first_ = *(_OWORD *)&v455[8];
                                  __v.__end_ = *(std::__split_buffer<std::string>::pointer *)&v455[24];
                                }
                                YAML::InvalidNode::InvalidNode(v352, (uint64_t)&__v);
                              }
                              __v.__first_ = (std::__split_buffer<std::string>::pointer)v455;
                              YAML::as_if<std::string,void>::operator()(&v454, (YAML::Node **)&__v);
                              end = v466.__end_;
                              if (v466.__end_ >= v466.__end_cap_.__value_)
                              {
                                v222 = 0xAAAAAAAAAAAAAAABLL * (((char *)v466.__end_ - (char *)v466.__begin_) >> 3);
                                v223 = v222 + 1;
                                if (v222 + 1 > 0xAAAAAAAAAAAAAAALL)
                                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                                if (0x5555555555555556
                                   * (((char *)v466.__end_cap_.__value_ - (char *)v466.__begin_) >> 3) > v223)
                                  v223 = 0x5555555555555556
                                       * (((char *)v466.__end_cap_.__value_ - (char *)v466.__begin_) >> 3);
                                if (0xAAAAAAAAAAAAAAABLL
                                   * (((char *)v466.__end_cap_.__value_ - (char *)v466.__begin_) >> 3) >= 0x555555555555555)
                                  v224 = 0xAAAAAAAAAAAAAAALL;
                                else
                                  v224 = v223;
                                __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v466.__end_cap_;
                                if (v224)
                                  v225 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v466.__end_cap_, v224);
                                else
                                  v225 = 0;
                                v226 = v225 + v222;
                                __v.__first_ = v225;
                                __v.__begin_ = v226;
                                __v.__end_cap_.__value_ = &v225[v224];
                                v227 = *(_OWORD *)&v454.__r_.__value_.__l.__data_;
                                v226->__r_.__value_.__r.__words[2] = v454.__r_.__value_.__r.__words[2];
                                *(_OWORD *)&v226->__r_.__value_.__l.__data_ = v227;
                                memset(&v454, 0, sizeof(v454));
                                __v.__end_ = v226 + 1;
                                std::vector<std::string>::__swap_out_circular_buffer(&v466, &__v);
                                v228 = v466.__end_;
                                std::__split_buffer<std::string>::~__split_buffer(&__v);
                                v466.__end_ = v228;
                                if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v454.__r_.__value_.__l.__data_);
                              }
                              else
                              {
                                v221 = *(_OWORD *)&v454.__r_.__value_.__l.__data_;
                                v466.__end_->__r_.__value_.__r.__words[2] = v454.__r_.__value_.__r.__words[2];
                                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v221;
                                v466.__end_ = end + 1;
                              }
                              v229 = v463;
                              if (v463)
                              {
                                v230 = (unint64_t *)&v463->__shared_owners_;
                                do
                                  v231 = __ldaxr(v230);
                                while (__stlxr(v231 - 1, v230));
                                if (!v231)
                                {
                                  ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                                  std::__shared_weak_count::__release_weak(v229);
                                }
                              }
                              if (v462 < 0)
                                operator delete(v461);
                              v232 = v460;
                              if (v460)
                              {
                                v233 = (unint64_t *)&v460->__shared_owners_;
                                do
                                  v234 = __ldaxr(v233);
                                while (__stlxr(v234 - 1, v233));
                                if (!v234)
                                {
                                  ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                                  std::__shared_weak_count::__release_weak(v232);
                                }
                              }
                              if (SHIBYTE(v459) < 0)
                                operator delete((void *)__s);
                              v235 = v456;
                              if (v456)
                              {
                                v236 = (unint64_t *)&v456->__shared_owners_;
                                do
                                  v237 = __ldaxr(v236);
                                while (__stlxr(v237 - 1, v236));
                                if (!v237)
                                {
                                  ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                                  std::__shared_weak_count::__release_weak(v235);
                                }
                              }
                              if ((v455[31] & 0x80000000) != 0)
                                operator delete(*(void **)&v455[8]);
                              YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v464);
                              continue;
                            }
                          }
                          break;
                        }
                        if (v396)
                        {
                          v240 = (unint64_t *)&v396->__shared_owners_;
                          do
                            v241 = __ldaxr(v240);
                          while (__stlxr(v241 - 1, v240));
                          if (!v241)
                          {
                            ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                            std::__shared_weak_count::__release_weak(v396);
                          }
                        }
                        v242 = v465;
                        if (v465)
                        {
                          v243 = (unint64_t *)&v465->__shared_owners_;
                          do
                            v244 = __ldaxr(v243);
                          while (__stlxr(v244 - 1, v243));
                          if (!v244)
                          {
                            ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                            std::__shared_weak_count::__release_weak(v242);
                          }
                        }
                        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v397[7].__shared_owners_, v466.__begin_, (__int128 *)v466.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v466.__end_ - (char *)v466.__begin_) >> 3));
                        *(_QWORD *)v455 = &v466;
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v455);
                        goto LABEL_633;
                      case 0x10uLL:
                        if (*(_QWORD *)v467.__r_.__value_.__l.__data_ != 0x43746C7561666564
                          || *(_QWORD *)(v467.__r_.__value_.__r.__words[0] + 8) != 0x746E656E6F706D6FLL)
                        {
                          goto LABEL_385;
                        }
LABEL_354:
                        if (!v425[0])
                        {
                          v360 = __cxa_allocate_exception(0x38uLL);
                          if (SHIBYTE(v427) < 0)
                          {
                            std::string::__init_copy_ctor_external((std::string *)v455, (const std::string::value_type *)v426, *((std::string::size_type *)&v426 + 1));
                          }
                          else
                          {
                            *(_OWORD *)v455 = v426;
                            *(_QWORD *)&v455[16] = v427;
                          }
                          YAML::InvalidNode::InvalidNode(v360, (uint64_t)v455);
                        }
                        *(_QWORD *)v455 = v425;
                        YAML::as_if<std::string,void>::operator()((std::string *)v464, (YAML::Node **)v455);
                        std::string::operator=((std::string *)&v397[5].__shared_owners_, (const std::string *)v464);
                        goto LABEL_390;
                      default:
LABEL_385:
                        std::operator+<char>();
                        v147 = std::string::append((std::string *)v464, "\" in component for pattern schema");
                        v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
                        *(_QWORD *)&v455[16] = *((_QWORD *)&v147->__r_.__value_.__l + 2);
                        *(_OWORD *)v455 = v148;
                        v147->__r_.__value_.__l.__size_ = 0;
                        v147->__r_.__value_.__r.__words[2] = 0;
                        v147->__r_.__value_.__r.__words[0] = 0;
                        if (v400)
                          siri::dialogengine::Context::AddSchemaError((uint64_t *)v400, (__int128 *)v455);
                        else
                          siri::dialogengine::Log::LogWithLevel((uint64_t)v455, 3u);
                        if ((v455[23] & 0x80000000) != 0)
                          operator delete(*(void **)v455);
LABEL_390:
                        if ((v464[23] & 0x80000000) != 0)
                          operator delete(*(void **)v464);
                        goto LABEL_633;
                    }
                    while (2)
                    {
                      if (*(_DWORD *)v464 == v152)
                      {
                        v165 = &v464[8];
                        v166 = v149;
                        if (v152 != 1)
                        {
                          if (v152 != 2)
                            goto LABEL_472;
                          v165 = &v464[16];
                          v166 = v150;
                        }
                        if (*(_QWORD *)v165 == v166)
                        {
LABEL_472:
                          if (v151)
                          {
                            v183 = (unint64_t *)&v151->__shared_owners_;
                            do
                              v184 = __ldaxr(v183);
                            while (__stlxr(v184 - 1, v183));
                            if (!v184)
                            {
                              ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                              std::__shared_weak_count::__release_weak(v151);
                            }
                          }
                          v185 = v465;
                          if (v465)
                          {
                            v186 = (unint64_t *)&v465->__shared_owners_;
                            do
                              v187 = __ldaxr(v186);
                            while (__stlxr(v187 - 1, v186));
                            if (!v187)
                            {
                              ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                              std::__shared_weak_count::__release_weak(v185);
                            }
                          }
                          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(&v397[8].__shared_owners_, (uint64_t *)v466.__begin_, (uint64_t *)v466.__end_, ((char *)v466.__end_ - (char *)v466.__begin_) >> 4);
                          goto LABEL_578;
                        }
                      }
                      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v455, (uint64_t)v464);
                      if (!v457)
                      {
                        v350 = __cxa_allocate_exception(0x38uLL);
                        if (SHIBYTE(v459) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)&__v, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
                        }
                        else
                        {
                          *(_OWORD *)&__v.__first_ = __s;
                          __v.__end_ = v459;
                        }
                        YAML::InvalidNode::InvalidNode(v350, (uint64_t)&__v);
                      }
                      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v457;
                      YAML::as_if<std::string,void>::operator()(&v454, (YAML::Node **)&__v);
                      v167 = HIBYTE(v454.__r_.__value_.__r.__words[2]);
                      if ((*((_BYTE *)&v454.__r_.__value_.__s + 23) & 0x80) != 0)
                      {
                        v169 = v454.__r_.__value_.__l.__size_;
                        v168 = (std::string *)v454.__r_.__value_.__r.__words[0];
                        if (v454.__r_.__value_.__l.__size_ == 5)
                        {
LABEL_423:
                          if (LODWORD(v168->__r_.__value_.__l.__data_) == 1734439797
                            && v168->__r_.__value_.__s.__data_[4] == 101)
                          {
                            siri::dialogengine::ParsePatternUsagesYAML((siri::dialogengine *)&__v, (const YAML::detail::iterator_value *)v455);
                            std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(&v397[3].__vftable, (uint64_t *)__v.__first_, (uint64_t *)__v.__begin_, ((char *)__v.__begin_ - (char *)__v.__first_) >> 4);
                            v473[0] = (void **)&__v;
                            std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v473);
                            v167 = HIBYTE(v454.__r_.__value_.__r.__words[2]);
                            if ((*((_BYTE *)&v454.__r_.__value_.__s + 23) & 0x80) == 0)
                              goto LABEL_428;
                          }
                          else if ((*((_BYTE *)&v454.__r_.__value_.__s + 23) & 0x80) == 0)
                          {
                            goto LABEL_428;
                          }
                          v169 = v454.__r_.__value_.__l.__size_;
                          v168 = (std::string *)v454.__r_.__value_.__r.__words[0];
                        }
                        if (v169 == 8)
                        {
LABEL_433:
                          if (v168->__r_.__value_.__r.__words[0] == 0x656469727265766FLL)
                          {
                            siri::dialogengine::ParsePatternOverrideYAML((std::vector<std::string> **)&__v, v400, (const YAML::detail::iterator_value *)v455);
                            std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)&v466, (__int128 *)&__v);
                            v171 = (std::__shared_weak_count *)__v.__begin_;
                            if (__v.__begin_)
                            {
                              v172 = &__v.__begin_->__r_.__value_.__l.__size_;
                              do
                                v173 = __ldaxr(v172);
                              while (__stlxr(v173 - 1, v172));
                              if (!v173)
                              {
                                ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                                std::__shared_weak_count::__release_weak(v171);
                              }
                            }
                            v167 = HIBYTE(v454.__r_.__value_.__r.__words[2]);
                            if ((*((_BYTE *)&v454.__r_.__value_.__s + 23) & 0x80) == 0)
                              goto LABEL_435;
                          }
                          else if ((v167 & 0x80) == 0)
                          {
                            goto LABEL_435;
                          }
                          v168 = (std::string *)v454.__r_.__value_.__r.__words[0];
                          if (v454.__r_.__value_.__l.__size_ == 8)
                          {
LABEL_444:
                            if (v168->__r_.__value_.__r.__words[0] == 0x73656C706D617865)
                            {
                              siri::dialogengine::ParseExamplesYAML((std::vector<std::string> *)&__v, (const YAML::detail::iterator_value *)v455);
                              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v397[10].__shared_owners_, __v.__first_, (__int128 *)__v.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)__v.__begin_ - (char *)__v.__first_) >> 3));
                              v473[0] = (void **)&__v;
                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v473);
                              if ((*((_BYTE *)&v454.__r_.__value_.__s + 23) & 0x80) == 0)
                                goto LABEL_450;
                            }
                            else if ((v167 & 0x80) == 0)
                            {
                              goto LABEL_450;
                            }
                            v168 = (std::string *)v454.__r_.__value_.__r.__words[0];
                          }
                        }
                        operator delete(v168);
                      }
                      else
                      {
                        if (HIBYTE(v454.__r_.__value_.__r.__words[2]) == 5)
                        {
                          v168 = &v454;
                          goto LABEL_423;
                        }
LABEL_428:
                        if (v167 == 8)
                        {
                          v168 = &v454;
                          goto LABEL_433;
                        }
LABEL_435:
                        if (v167 == 8)
                        {
                          v168 = &v454;
                          goto LABEL_444;
                        }
                      }
LABEL_450:
                      v174 = v463;
                      if (v463)
                      {
                        v175 = (unint64_t *)&v463->__shared_owners_;
                        do
                          v176 = __ldaxr(v175);
                        while (__stlxr(v176 - 1, v175));
                        if (!v176)
                        {
                          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                          std::__shared_weak_count::__release_weak(v174);
                        }
                      }
                      if (v462 < 0)
                        operator delete(v461);
                      v177 = v460;
                      if (v460)
                      {
                        v178 = (unint64_t *)&v460->__shared_owners_;
                        do
                          v179 = __ldaxr(v178);
                        while (__stlxr(v179 - 1, v178));
                        if (!v179)
                        {
                          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                          std::__shared_weak_count::__release_weak(v177);
                        }
                      }
                      if (SHIBYTE(v459) < 0)
                        operator delete((void *)__s);
                      v180 = v456;
                      if (v456)
                      {
                        v181 = (unint64_t *)&v456->__shared_owners_;
                        do
                          v182 = __ldaxr(v181);
                        while (__stlxr(v182 - 1, v181));
                        if (!v182)
                        {
                          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                          std::__shared_weak_count::__release_weak(v180);
                        }
                      }
                      if ((v455[31] & 0x80000000) != 0)
                        operator delete(*(void **)&v455[8]);
                      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v464);
                      v151 = v164;
                      continue;
                    }
                  }
                  break;
                }
                if (v394)
                {
                  v254 = (unint64_t *)&v394->__shared_owners_;
                  do
                    v255 = __ldaxr(v254);
                  while (__stlxr(v255 - 1, v254));
                  if (!v255)
                  {
                    ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
                    std::__shared_weak_count::__release_weak(v394);
                  }
                }
                v256 = v469;
                if (v469)
                {
                  v257 = (unint64_t *)&v469->__shared_owners_;
                  do
                    v258 = __ldaxr(v257);
                  while (__stlxr(v258 - 1, v257));
                  if (!v258)
                  {
                    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                    std::__shared_weak_count::__release_weak(v256);
                  }
                }
                if ((SBYTE7(v432) & 0x80000000) == 0)
                {
                  if (SBYTE7(v432) == 16)
                  {
                    v259 = (uint64_t *)&v431;
                    goto LABEL_673;
                  }
                  goto LABEL_677;
                }
                if (*((_QWORD *)&v431 + 1) != 16)
                  goto LABEL_677;
                v259 = (uint64_t *)v431;
LABEL_673:
                v261 = *v259;
                v260 = v259[1];
                if (v261 == 0x6F43676F6C616964 && v260 == 0x73746E656E6F706DLL)
                {
                  *(_QWORD *)&v453 = v393;
                  *((_QWORD *)&v453 + 1) = v397;
                  do
                    v267 = __ldxr(v100);
                  while (__stxr(v267 + 1, v100));
                  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v96 + 120), &v453);
                  v264 = (std::__shared_weak_count *)*((_QWORD *)&v453 + 1);
                  if (*((_QWORD *)&v453 + 1))
                  {
                    v268 = (unint64_t *)(*((_QWORD *)&v453 + 1) + 8);
                    do
                      v266 = __ldaxr(v268);
                    while (__stlxr(v266 - 1, v268));
                    goto LABEL_682;
                  }
                }
                else
                {
LABEL_677:
                  *(_QWORD *)&v452 = v393;
                  *((_QWORD *)&v452 + 1) = v397;
                  do
                    v263 = __ldxr(v100);
                  while (__stxr(v263 + 1, v100));
                  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v96 + 144), &v452);
                  v264 = (std::__shared_weak_count *)*((_QWORD *)&v452 + 1);
                  if (*((_QWORD *)&v452 + 1))
                  {
                    v265 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
                    do
                      v266 = __ldaxr(v265);
                    while (__stlxr(v266 - 1, v265));
LABEL_682:
                    if (!v266)
                    {
                      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                      std::__shared_weak_count::__release_weak(v264);
                    }
                  }
                }
                do
                  v269 = __ldaxr(v100);
                while (__stlxr(v269 - 1, v100));
                if (!v269)
                {
                  ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                  std::__shared_weak_count::__release_weak(v397);
                }
                ++v395;
                a2 = v400;
                if (v395 == (std::string *)v392)
                  goto LABEL_696;
                continue;
              }
            }
          }
          break;
        }
        if (v89)
        {
          v281 = (unint64_t *)&v89->__shared_owners_;
          do
            v282 = __ldaxr(v281);
          while (__stlxr(v282 - 1, v281));
          if (!v282)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v283 = v414;
        if (v414)
        {
          v284 = (unint64_t *)&v414->__shared_owners_;
          do
            v285 = __ldaxr(v284);
          while (__stlxr(v285 - 1, v284));
LABEL_821:
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v283);
          }
        }
LABEL_196:
        if (SBYTE7(v432) < 0)
          operator delete((void *)v431);
        v79 = v444;
        if (v444)
        {
          v80 = (unint64_t *)&v444->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        if (SHIBYTE(v442) < 0)
          operator delete((void *)v441);
        v82 = v439;
        if (v439)
        {
          v83 = (unint64_t *)&v439->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        if (SHIBYTE(v438) < 0)
          operator delete((void *)v437);
        v85 = v435;
        if (v435)
        {
          v86 = (unint64_t *)&v435->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        if (v434 < 0)
          operator delete(v433);
        YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v446);
        v21 = v390;
        v16 = v387;
        break;
      default:
        if (*((_QWORD *)&v431 + 1) != 27
          || (*(_QWORD *)v431 == 0x6F436C6175736976
            ? (v37 = *(_QWORD *)(v431 + 8) == 0x73746E656E6F706DLL)
            : (v37 = 0),
              v37 ? (v38 = *(_QWORD *)(v431 + 16) == 0x74616E69626D6F43) : (v38 = 0),
              v38 ? (v39 = *(_QWORD *)(v431 + 19) == 0x6E6F6974616E6962) : (v39 = 0),
              !v39))
        {
LABEL_189:
          std::operator+<char>();
          v77 = std::string::append((std::string *)v455, "\" in group for pattern schema");
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v77->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          if (a2)
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)__p);
          else
            siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
LABEL_194:
          if ((v455[23] & 0x80000000) != 0)
            operator delete(*(void **)v455);
          goto LABEL_196;
        }
LABEL_107:
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v450 + 88))(__p);
        v40 = *(std::__shared_weak_count **)&__p[8];
        v41 = **(_DWORD **)__p;
        if (!*(_QWORD *)&__p[8])
          goto LABEL_111;
        v42 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
          if (!v41)
            goto LABEL_754;
        }
        else
        {
LABEL_111:
          if (!v41)
            goto LABEL_754;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"Multiple \"visualComponentsCombination\" entries in group \"", 57);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &__str;
        else
          v45 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v46 = __str.__r_.__value_.__l.__size_;
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"\" (line ", 8);
        if (!v436)
        {
          v376 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v438) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v455, (const std::string::value_type *)v437, *((std::string::size_type *)&v437 + 1));
          }
          else
          {
            *(_OWORD *)v455 = v437;
            *(_QWORD *)&v455[16] = v438;
          }
          YAML::InvalidNode::InvalidNode(v376, (uint64_t)v455);
        }
        v286 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v286, (uint64_t)")", 1);
        std::stringbuf::str();
        if (a2)
          siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)v455);
        else
          siri::dialogengine::Log::LogWithLevel((uint64_t)v455, 3u);
        if ((v455[23] & 0x80000000) != 0)
          operator delete(*(void **)v455);
        *(_QWORD *)__p = v380;
        *(_QWORD *)&__p[*(_QWORD *)(v380 - 24)] = v381;
        *(_QWORD *)&__p[16] = v382;
        *(_QWORD *)&__p[24] = v378;
        if (v424 < 0)
          operator delete(v422);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1C3B8D80C]((char *)&v426 + 8);
LABEL_754:
        v287 = (siri::dialogengine::PatternSchemaConcreteGroup *)v450;
        v289 = (char *)operator new(0x38uLL);
        *((_QWORD *)v289 + 1) = 0;
        *((_QWORD *)v289 + 2) = 0;
        *(_QWORD *)v289 = &off_1E79316E0;
        *(_OWORD *)(v289 + 24) = 0u;
        v290 = v289 + 24;
        *(_OWORD *)(v289 + 40) = 0u;
        v415 = v289 + 24;
        v416 = (std::__shared_weak_count *)v289;
        if (!v440[0])
        {
          v375 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v442) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v441, *((std::string::size_type *)&v441 + 1));
          }
          else
          {
            *(_OWORD *)__p = v441;
            *(_QWORD *)&__p[16] = v442;
          }
          YAML::InvalidNode::InvalidNode(v375, (uint64_t)__p);
        }
        if (!v445 || (v291 = **v445, !*(_BYTE *)v291) || *(_DWORD *)(v291 + 16) != 3)
        {
          *(_QWORD *)v455 = v440;
          YAML::as_if<std::string,void>::operator()((std::string *)__p, (YAML::Node **)v455);
          *v290 = siri::dialogengine::GetCombinationTypeFromString((uint64_t)__p);
          if ((__p[23] & 0x80000000) == 0)
            goto LABEL_766;
          v295 = *(void **)__p;
          goto LABEL_765;
        }
        *(_DWORD *)__p = 0;
        memset(&__p[8], 0, 32);
        v418 = 0uLL;
        siri::dialogengine::ParseCustomCombinationYAML(a2, (siri::dialogengine::Context *)v440, (const YAML::Node *)__p, v288);
        *v290 = 3;
        memset(v455, 0, 24);
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*,std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>*>(v455, *(_QWORD **)&__p[32], (_QWORD *)v418, (uint64_t)(v418 - *(_QWORD *)&__p[32]) >> 4);
        v292 = *(__int128 **)&v455[8];
        v293 = *(__int128 **)v455;
        if (*(_QWORD *)v455 != *(_QWORD *)&v455[8])
        {
          v294 = (char **)(v289 + 32);
          do
            std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>(v294, v293++);
          while (v293 != v292);
        }
        *(_QWORD *)v401 = v455;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v401);
        *(_QWORD *)v455 = &__p[32];
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v455);
        if ((__p[31] & 0x80000000) != 0)
        {
          v295 = *(void **)&__p[8];
LABEL_765:
          operator delete(v295);
        }
LABEL_766:
        siri::dialogengine::PatternSchemaConcreteGroup::SetVisualComponentsCombination(v287, (uint64_t *)&v415);
        v283 = v416;
        if (!v416)
          goto LABEL_196;
        v296 = (unint64_t *)&v416->__shared_owners_;
        do
          v285 = __ldaxr(v296);
        while (__stlxr(v285 - 1, v296));
        goto LABEL_821;
    }
  }
  if (v16)
  {
    v319 = (unint64_t *)&v16->__shared_owners_;
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v321 = v447;
  if (v447)
  {
    v322 = (unint64_t *)&v447->__shared_owners_;
    do
      v323 = __ldaxr(v322);
    while (__stlxr(v323 - 1, v322));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
      std::__shared_weak_count::__release_weak(v321);
    }
  }
  v324 = (void *)HIBYTE(v449);
  v325 = HIBYTE(v449);
  if (v449 < 0)
    v324 = v448[1];
  if (v324)
  {
    if (v21 >= 2)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      v326 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"Property \"aliasOf\" used with other properties in group \"", 56);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v327 = &__str;
      else
        v327 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v328 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v328 = __str.__r_.__value_.__l.__size_;
      v329 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v326, (uint64_t)v327, v328);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v329, (uint64_t)"\" (line ", 8);
      v330 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v330, (uint64_t)"); All other properties of this group are ignored",
        49);
      std::stringbuf::str();
      if (a2)
        siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)v455);
      else
        siri::dialogengine::Log::LogWithLevel((uint64_t)v455, 3u);
      if ((v455[23] & 0x80000000) != 0)
        operator delete(*(void **)v455);
      *(_QWORD *)__p = v380;
      *(_QWORD *)&__p[*(_QWORD *)(v380 - 24)] = v381;
      *(_QWORD *)&__p[16] = v382;
      *(_QWORD *)&__p[24] = MEMORY[0x1E0DE4FB8] + 16;
      if (v424 < 0)
        operator delete(v422);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C3B8D80C]((char *)&v426 + 8);
    }
    siri::dialogengine::PatternSchema::GetGroup((uint64_t)a3, (uint64_t)v448, (_QWORD *)&v432 + 1);
    v331 = *((_QWORD *)&v432 + 1);
    if (*((_QWORD *)&v432 + 1))
    {
      if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)&v432 + 1) + 16))(*((_QWORD *)&v432 + 1)))
      {
        std::allocate_shared[abi:ne180100]<siri::dialogengine::PatternSchemaAliasGroup,std::allocator<siri::dialogengine::PatternSchemaAliasGroup>,std::string const&,std::shared_ptr<siri::dialogengine::PatternSchemaGroup> &,void>(__p, (__int128 *)&__str, v331, (std::__shared_weak_count *)v433);
        *(_OWORD *)v379 = *(_OWORD *)__p;
        goto LABEL_899;
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      v332 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"The value of property \"aliasOf\" in group \"", 42);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v333 = &__str;
      else
        v333 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v334 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v334 = __str.__r_.__value_.__l.__size_;
      v335 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v332, (uint64_t)v333, v334);
      v336 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v335, (uint64_t)"\" is invalid (\"", 15);
      if (v449 >= 0)
        v337 = v448;
      else
        v337 = (void **)v448[0];
      if (v449 >= 0)
        v338 = HIBYTE(v449);
      else
        v338 = (uint64_t)v448[1];
      v339 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v336, (uint64_t)v337, v338);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v339, (uint64_t)"\") because that group is an alias group (line ", 46);
      v340 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v340, (uint64_t)")", 1);
      std::stringbuf::str();
      if (a2)
        goto LABEL_871;
    }
    else
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      v341 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"Property \"aliasOf\" in group \"", 29);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v342 = &__str;
      else
        v342 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v343 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v343 = __str.__r_.__value_.__l.__size_;
      v344 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v341, (uint64_t)v342, v343);
      v345 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v344, (uint64_t)"\" refers to group \"", 19);
      if (v449 >= 0)
        v346 = v448;
      else
        v346 = (void **)v448[0];
      if (v449 >= 0)
        v347 = HIBYTE(v449);
      else
        v347 = (uint64_t)v448[1];
      v348 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v345, (uint64_t)v346, v347);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v348, (uint64_t)"\" that is not (yet) defined (line ", 34);
      v349 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v349, (uint64_t)")", 1);
      std::stringbuf::str();
      if (a2)
      {
LABEL_871:
        siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)v455);
LABEL_894:
        if ((v455[23] & 0x80000000) != 0)
          operator delete(*(void **)v455);
        *(_QWORD *)v379 = 0;
        *((_QWORD *)v379 + 1) = 0;
        *(_QWORD *)__p = v380;
        *(_QWORD *)&__p[*(_QWORD *)(v380 - 24)] = v381;
        *(_QWORD *)&__p[16] = v382;
        *(_QWORD *)&__p[24] = MEMORY[0x1E0DE4FB8] + 16;
        if (v424 < 0)
          operator delete(v422);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1C3B8D80C]((char *)&v426 + 8);
LABEL_899:
        v353 = (std::__shared_weak_count *)v433;
        if (v433)
        {
          v354 = (unint64_t *)((char *)v433 + 8);
          do
            v355 = __ldaxr(v354);
          while (__stlxr(v355 - 1, v354));
          if (!v355)
          {
            ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
            std::__shared_weak_count::__release_weak(v353);
          }
        }
        if (v449 < 0)
          goto LABEL_905;
        goto LABEL_906;
      }
    }
    siri::dialogengine::Log::LogWithLevel((uint64_t)v455, 3u);
    goto LABEL_894;
  }
  *(_OWORD *)v379 = v450;
  v450 = 0uLL;
  if (v325 < 0)
LABEL_905:
    operator delete(v448[0]);
LABEL_906:
  v356 = (std::__shared_weak_count *)*((_QWORD *)&v450 + 1);
  if (*((_QWORD *)&v450 + 1))
  {
    v357 = (unint64_t *)(*((_QWORD *)&v450 + 1) + 8);
    do
      v358 = __ldaxr(v357);
    while (__stlxr(v358 - 1, v357));
    if (!v358)
    {
      ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
      std::__shared_weak_count::__release_weak(v356);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFA8A734(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (SLOBYTE(STACK[0x5C7]) < 0)
    operator delete((void *)STACK[0x5B0]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x320]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x458]);
  if (SLOBYTE(STACK[0x547]) < 0)
    operator delete((void *)STACK[0x530]);
  v2 = (std::__shared_weak_count *)STACK[0x558];
  if (STACK[0x558])
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (SLOBYTE(STACK[0x577]) < 0)
    operator delete((void *)STACK[0x560]);
  _Unwind_Resume(a1);
}

void YAML::Node::as<std::string>(std::string *a1, uint64_t a2)
{
  _QWORD *exception;
  YAML::Node *v4;
  std::string v5;

  if (!*(_BYTE *)a2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*(char *)(a2 + 31) < 0)
      std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    else
      v5 = *(std::string *)(a2 + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v5);
  }
  v4 = (YAML::Node *)a2;
  YAML::as_if<std::string,void>::operator()(a1, &v4);
}

void sub_1BFA8B784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

uint64_t YAML::Node::Mark(YAML::Node *this)
{
  uint64_t v2;
  _QWORD *exception;
  std::string v5;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v5 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v5);
  }
  v2 = *((_QWORD *)this + 6);
  if (v2)
    return *(_QWORD *)(**(_QWORD **)v2 + 4);
  else
    return -1;
}

void sub_1BFA8B87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  char v35[8];
  void *__p;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  char v46[8];
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;

  if (*(_DWORD *)a2 != 2)
  {
    if (*(_DWORD *)a2 == 1)
    {
      v2 = **(_QWORD **)(a2 + 8);
      if (v2)
      {
        v3 = *(_QWORD *)(a2 + 32);
        v4 = *(std::__shared_weak_count **)(a2 + 40);
        v44 = v3;
        v45 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldxr(p_shared_owners);
          while (__stxr(v6 + 1, p_shared_owners));
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v50 = v3;
          v51 = v4;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        else
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v50 = v3;
          v51 = 0;
        }
        v46[0] = 1;
        v52 = v2;
        YAML::detail::iterator_value::iterator_value((YAML::detail::iterator_value *)a1, (const YAML::Node *)v46);
        if (v4)
        {
          v21 = (unint64_t *)&v4->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (SHIBYTE(v49) < 0)
          operator delete(v47);
        v23 = v45;
        if (v45)
        {
          v24 = (unint64_t *)&v45->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
LABEL_64:
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
          return;
        }
        return;
      }
    }
LABEL_15:
    *(_BYTE *)a1 = 1;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_BYTE *)(a1 + 56) = 1;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_BYTE *)(a1 + 112) = 1;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    return;
  }
  v8 = *(uint64_t **)(a2 + 16);
  v10 = *v8;
  v9 = v8[1];
  if (v10)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
    goto LABEL_15;
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(std::__shared_weak_count **)(a2 + 40);
  v42 = v12;
  v43 = v13;
  if (!v13)
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = v12;
    v46[0] = 1;
    v51 = 0;
    v52 = v10;
    v34 = 0;
LABEL_41:
    v17 = 0;
    __p = 0;
    v37 = 0;
    v38 = 0;
    v39 = v12;
    v40 = 0;
    goto LABEL_42;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = v12;
  v51 = v13;
  do
    v16 = __ldxr(v14);
  while (__stxr(v16 + 1, v14));
  v12 = *(_QWORD *)(a2 + 32);
  v17 = *(std::__shared_weak_count **)(a2 + 40);
  v46[0] = 1;
  v52 = v10;
  v34 = v17;
  if (!v17)
    goto LABEL_41;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  __p = 0;
  v37 = 0;
  v38 = 0;
  v39 = v12;
  v40 = v17;
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
LABEL_42:
  v35[0] = 1;
  v41 = v9;
  YAML::detail::iterator_value::iterator_value((YAML::detail::iterator_value *)a1, (const YAML::Node *)v46, (const YAML::Node *)v35);
  if (v17)
  {
    v26 = (unint64_t *)&v17->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v38) < 0)
    operator delete(__p);
  if (v34)
  {
    v28 = (unint64_t *)&v34->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v30 = v51;
  if (v51)
  {
    v31 = (unint64_t *)&v51->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (SHIBYTE(v49) < 0)
    operator delete(v47);
  v23 = v43;
  if (v43)
  {
    v33 = (unint64_t *)&v43->__shared_owners_;
    do
      v25 = __ldaxr(v33);
    while (__stlxr(v25 - 1, v33));
    goto LABEL_64;
  }
}

void sub_1BFA8BBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  YAML::Node::~Node(&a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  YAML::Node::~Node((void **)(v18 - 72));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParsePatternUsagesYAML(siri::dialogengine *this, const YAML::detail::iterator_value *a2)
{
  YAML::Node *v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  const char *v9;
  uint64_t **v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  uint64_t v28;
  std::string::size_type size;
  int v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *exception;
  _QWORD *v48;
  std::string __str;
  std::string v50;
  __int128 v51;
  void *__p[2];
  __int128 v53;
  std::__shared_weak_count *v54;
  char v55;
  std::string v56;
  std::__shared_weak_count *v57;
  char v58;
  std::string v59;
  std::__shared_weak_count *v60;
  uint64_t **v61;
  _BYTE v62[40];
  std::__shared_weak_count *v63;
  _BYTE v64[40];
  std::__shared_weak_count *v65;
  std::string v66;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = (const YAML::detail::iterator_value *)((char *)a2 + 112);
  if (YAML::Node::Type((const YAML::detail::iterator_value *)((char *)a2 + 112)) == 2)
  {
    v5 = (char *)operator new(0x38uLL);
    *(_OWORD *)(v5 + 8) = 0u;
    v6 = (unint64_t *)(v5 + 8);
    *(_QWORD *)v5 = &off_1E79315F0;
    *((_DWORD *)v5 + 6) = 0;
    *((_QWORD *)v5 + 4) = 0;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_QWORD *)v64 = v5 + 24;
    *(_QWORD *)&v64[8] = v5;
    YAML::Node::as<std::string>((std::string *)__p, (uint64_t)v4);
    *((_DWORD *)v5 + 6) = siri::dialogengine::GetPatternUsageFromString((uint64_t)__p);
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)this, (__int128 *)v64);
    if (SBYTE7(v53) < 0)
      operator delete(__p[0]);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      (*(void (**)(char *))(*(_QWORD *)v5 + 16))(v5);
      v8 = (std::__shared_weak_count *)v5;
      goto LABEL_94;
    }
    return;
  }
  if (YAML::Node::Type(v4) != 4)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unsupported type detected for usage statement in Pattern schema", v9);
    return;
  }
  if (*(_BYTE *)v4 && (v10 = (uint64_t **)*((_QWORD *)a2 + 20)) != 0)
  {
    YAML::detail::node_data::begin(**v10, (uint64_t)__p);
    v11 = *((_QWORD *)a2 + 18);
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 19);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      *(_OWORD *)v64 = *(_OWORD *)__p;
      *(_OWORD *)&v64[16] = v53;
      *(_QWORD *)&v64[32] = v11;
      v65 = v12;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    else
    {
      *(_OWORD *)v64 = *(_OWORD *)__p;
      *(_OWORD *)&v64[16] = v53;
      *(_QWORD *)&v64[32] = v11;
      v65 = 0;
    }
  }
  else
  {
    *(_DWORD *)v64 = 0;
    memset(&v64[8], 0, 32);
    v65 = 0;
  }
  if (*(_BYTE *)v4 && (v17 = (uint64_t **)*((_QWORD *)a2 + 20)) != 0)
  {
    YAML::detail::node_data::end(**v17, (uint64_t)__p);
    v18 = *((_QWORD *)a2 + 18);
    v19 = (std::__shared_weak_count *)*((_QWORD *)a2 + 19);
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      *(_OWORD *)v62 = *(_OWORD *)__p;
      *(_OWORD *)&v62[16] = v53;
      *(_QWORD *)&v62[32] = v18;
      v63 = v19;
      do
        v22 = __ldxr(v20);
      while (__stxr(v22 + 1, v20));
      do
        v23 = __ldaxr(v20);
      while (__stlxr(v23 - 1, v20));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    else
    {
      *(_OWORD *)v62 = *(_OWORD *)__p;
      *(_OWORD *)&v62[16] = v53;
      *(_QWORD *)&v62[32] = v18;
      v63 = 0;
    }
  }
  else
  {
    *(_DWORD *)v62 = 0;
    memset(&v62[8], 0, 32);
    v63 = 0;
  }
  while (1)
  {
    if (*(_DWORD *)v64 == *(_DWORD *)v62)
    {
      v24 = &v64[8];
      v25 = &v62[8];
      if (*(_DWORD *)v64 != 1)
      {
        if (*(_DWORD *)v64 != 2)
          break;
        v25 = &v62[16];
        v24 = &v64[16];
      }
      if (*(_QWORD *)v24 == *(_QWORD *)v25)
        break;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)__p, (uint64_t)v64);
    v26 = (std::__shared_weak_count *)operator new(0x38uLL);
    *(_OWORD *)&v26->__shared_owners_ = 0u;
    v27 = (unint64_t *)&v26->__shared_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79315F0;
    LODWORD(v26[1].__vftable) = 0;
    v26[1].__shared_owners_ = 0;
    *(_OWORD *)&v26[1].__shared_weak_owners_ = 0u;
    *(_QWORD *)&v51 = v26 + 1;
    *((_QWORD *)&v51 + 1) = v26;
    if (!v55)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v66, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
      else
        v66 = v56;
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v66);
    }
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
    YAML::as_if<std::string,void>::operator()(&v50, (YAML::Node **)&v66);
    if (!v58)
    {
      v48 = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v66, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
      else
        v66 = v59;
      YAML::InvalidNode::InvalidNode(v48, (uint64_t)&v66);
    }
    if (!v61 || (v28 = **v61, *(_BYTE *)v28) && *(_DWORD *)(v28 + 16) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
    }
    else
    {
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
      YAML::as_if<std::string,void>::operator()(&__str, (YAML::Node **)&v66);
    }
    LODWORD(v26[1].__vftable) = siri::dialogengine::GetPatternUsageFromString((uint64_t)&v50);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)&v66);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v66.__r_.__value_.__l.__size_ != 4)
        {
          operator delete(v66.__r_.__value_.__l.__data_);
LABEL_54:
          std::string::operator=((std::string *)&v26[1].__shared_owners_, &__str);
          goto LABEL_55;
        }
        v30 = *(_DWORD *)v66.__r_.__value_.__l.__data_;
        operator delete(v66.__r_.__value_.__l.__data_);
        if (v30 != 1702063205)
          goto LABEL_54;
      }
      else if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) != 4 || LODWORD(v66.__r_.__value_.__l.__data_) != 1702063205)
      {
        goto LABEL_54;
      }
    }
LABEL_55:
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)this, &v51);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    do
      v31 = __ldaxr(v27);
    while (__stlxr(v31 - 1, v27));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    v32 = v60;
    if (v60)
    {
      v33 = (unint64_t *)&v60->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    v35 = v57;
    if (v57)
    {
      v36 = (unint64_t *)&v57->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    v38 = v54;
    if (v54)
    {
      v39 = (unint64_t *)&v54->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (SHIBYTE(v53) < 0)
      operator delete(__p[1]);
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v64);
  }
  v41 = v63;
  if (v63)
  {
    v42 = (unint64_t *)&v63->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v65;
  if (v65)
  {
    v45 = (unint64_t *)&v65->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      v8 = v44;
LABEL_94:
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BFA8C2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v34 - 176);
  *(_QWORD *)(v34 - 176) = v33;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 176));
  _Unwind_Resume(a1);
}

uint64_t YAML::Node::Type(YAML::Node *this)
{
  uint64_t **v2;
  uint64_t v3;
  _QWORD *exception;
  std::string v6;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v6 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v6);
  }
  v2 = (uint64_t **)*((_QWORD *)this + 6);
  if (!v2)
    return 1;
  v3 = **v2;
  if (*(_BYTE *)v3)
    return *(unsigned int *)(v3 + 16);
  else
    return 0;
}

void sub_1BFA8C4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseCustomCombinationYAML(siri::dialogengine *this, siri::dialogengine::Context *a2, const YAML::Node *a3, siri::dialogengine::VisualComponentsCombination::Entry *a4)
{
  int v7;
  const std::string *v8;
  uint64_t **v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  YAML::detail::node_data ***v16;
  uint64_t **v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const char *v25;
  _QWORD *v26;
  uint64_t **v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  siri::dialogengine::VisualComponentsCombination::Entry *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  int EntryTypeFromString;
  siri::dialogengine::VisualComponentsCombination::Entry *v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  _BYTE *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  std::string *v86;
  std::string::size_type size;
  _QWORD *v88;
  _QWORD *v89;
  void **v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *exception;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  char **v102;
  void *v103[2];
  unsigned __int8 v104;
  _BYTE v105[40];
  std::__shared_weak_count *v106;
  void *__p;
  char v108;
  _BYTE v109[152];
  void *v110;
  std::string v111;
  std::__shared_weak_count *v112;
  uint64_t **v113;
  char v114;
  __int128 v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  _BYTE v118[8];
  __int128 v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t **v122;
  _BYTE v123[40];
  std::__shared_weak_count *v124;
  _BYTE v125[40];
  std::__shared_weak_count *v126;
  std::string v127;

  v7 = YAML::Node::Type(a2);
  switch(v7)
  {
    case 4:
      if (!*(_BYTE *)a2)
      {
        exception = __cxa_allocate_exception(0x38uLL);
        if (*((char *)a2 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v105, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
        }
        else
        {
          *(_OWORD *)v105 = *(_OWORD *)((char *)a2 + 8);
          *(_QWORD *)&v105[16] = *((_QWORD *)a2 + 3);
        }
        YAML::InvalidNode::InvalidNode(exception, (uint64_t)v105);
      }
      v16 = (YAML::detail::node_data ***)*((_QWORD *)a2 + 6);
      if (!v16 || YAML::detail::node_data::size(**v16) != 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v105);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105[16], (uint64_t)"Expected map node to have a single entry (line ", 47);
        YAML::Node::Mark(a2);
        v26 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")", 1);
        std::stringbuf::str();
        if (this)
          siri::dialogengine::Context::AddSchemaError((uint64_t *)this, (__int128 *)&v110);
        else
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v110, 3u);
        if (v111.__r_.__value_.__s.__data_[15] < 0)
          operator delete(v110);
        *(_QWORD *)v105 = *MEMORY[0x1E0DE4F50];
        v63 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
        *(_QWORD *)&v105[*(_QWORD *)(*(_QWORD *)v105 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
        *(_QWORD *)&v105[16] = v63;
        *(_QWORD *)&v105[24] = MEMORY[0x1E0DE4FB8] + 16;
        if (v108 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1C3B8D80C](v109);
        return;
      }
      if (*(_BYTE *)a2 && (v17 = (uint64_t **)*((_QWORD *)a2 + 6)) != 0)
      {
        YAML::detail::node_data::begin(**v17, (uint64_t)v125);
        v18 = *((_QWORD *)a2 + 4);
        v19 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
          *(_OWORD *)v105 = *(_OWORD *)v125;
          *(_OWORD *)&v105[16] = *(_OWORD *)&v125[16];
          *(_QWORD *)&v105[32] = v18;
          v106 = v19;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        else
        {
          *(_OWORD *)v105 = *(_OWORD *)v125;
          *(_OWORD *)&v105[16] = *(_OWORD *)&v125[16];
          *(_QWORD *)&v105[32] = v18;
          v106 = 0;
        }
      }
      else
      {
        *(_DWORD *)v105 = 0;
        memset(&v105[8], 0, 32);
        v106 = 0;
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)&v110, (uint64_t)v105);
      v64 = v106;
      if (v106)
      {
        v65 = (unint64_t *)&v106->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      if (!v118[0])
      {
        v98 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v120) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v105, (const std::string::value_type *)v119, *((std::string::size_type *)&v119 + 1));
        }
        else
        {
          *(_OWORD *)v105 = v119;
          *(_QWORD *)&v105[16] = v120;
        }
        YAML::InvalidNode::InvalidNode(v98, (uint64_t)v105);
      }
      if (v122 && (v67 = **v122, *(_BYTE *)v67) && *(_DWORD *)(v67 + 16) == 3)
      {
        if (!v114)
        {
          v100 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v116) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v105, (const std::string::value_type *)v115, *((std::string::size_type *)&v115 + 1));
          }
          else
          {
            *(_OWORD *)v105 = v115;
            *(_QWORD *)&v105[16] = v116;
          }
          YAML::InvalidNode::InvalidNode(v100, (uint64_t)v105);
        }
        *(_QWORD *)v105 = &v114;
        YAML::as_if<std::string,void>::operator()((std::string *)v125, (YAML::Node **)v105);
        EntryTypeFromString = siri::dialogengine::GetEntryTypeFromString((uint64_t)v125);
        *(_DWORD *)a3 = EntryTypeFromString;
        if ((v125[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v125);
          EntryTypeFromString = *(_DWORD *)a3;
        }
        if (EntryTypeFromString)
        {
          siri::dialogengine::ParseCustomCombinationYAML(this, (siri::dialogengine::Context *)v118, a3, v69);
LABEL_135:
          v72 = v121;
          if (v121)
          {
            v73 = (unint64_t *)&v121->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          if (SHIBYTE(v120) < 0)
            operator delete((void *)v119);
          v75 = v117;
          if (v117)
          {
            v76 = (unint64_t *)&v117->__shared_owners_;
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          if (SHIBYTE(v116) < 0)
            operator delete((void *)v115);
          v78 = v112;
          if (v112)
          {
            v79 = (unint64_t *)&v112->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          return;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v105);
        v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105[16], (uint64_t)"Invalid keyword; Expected '",
                27);
        std::string::basic_string[abi:ne180100]<0>(v123, "and");
        if (v123[23] >= 0)
          v82 = v123;
        else
          v82 = *(_BYTE **)v123;
        if (v123[23] >= 0)
          v83 = v123[23];
        else
          v83 = *(_QWORD *)&v123[8];
        v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v82, v83);
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"'/'", 3);
        std::string::basic_string[abi:ne180100]<0>(&v127, "or");
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v86 = &v127;
        else
          v86 = (std::string *)v127.__r_.__value_.__r.__words[0];
        if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v127.__r_.__value_.__r.__words[2]);
        else
          size = v127.__r_.__value_.__l.__size_;
        v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)v86, size);
        v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"'/'", 3);
        std::string::basic_string[abi:ne180100]<0>(v103, "andor");
        if ((v104 & 0x80u) == 0)
          v90 = v103;
        else
          v90 = (void **)v103[0];
        if ((v104 & 0x80u) == 0)
          v91 = v104;
        else
          v91 = (uint64_t)v103[1];
        v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
        v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"'", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)" (line ", 7);
        if (!v114)
        {
          v101 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v116) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v125, (const std::string::value_type *)v115, *((std::string::size_type *)&v115 + 1));
          }
          else
          {
            *(_OWORD *)v125 = v115;
            *(_QWORD *)&v125[16] = v116;
          }
          YAML::InvalidNode::InvalidNode(v101, (uint64_t)v125);
        }
        v94 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)")", 1);
        if ((char)v104 < 0)
          operator delete(v103[0]);
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v127.__r_.__value_.__l.__data_);
        if ((v123[23] & 0x80000000) != 0)
          operator delete(*(void **)v123);
        std::stringbuf::str();
        if (this)
          siri::dialogengine::Context::AddSchemaError((uint64_t *)this, (__int128 *)v125);
        else
          siri::dialogengine::Log::LogWithLevel((uint64_t)v125, 3u);
      }
      else
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v105);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105[16], (uint64_t)"Expected map node value to be a sequence (line ", 47);
        if (!v118[0])
        {
          v99 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v120) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v125, (const std::string::value_type *)v119, *((std::string::size_type *)&v119 + 1));
          }
          else
          {
            *(_OWORD *)v125 = v119;
            *(_QWORD *)&v125[16] = v120;
          }
          YAML::InvalidNode::InvalidNode(v99, (uint64_t)v125);
        }
        v70 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)")", 1);
        std::stringbuf::str();
        if (this)
          siri::dialogengine::Context::AddSchemaError((uint64_t *)this, (__int128 *)v125);
        else
          siri::dialogengine::Log::LogWithLevel((uint64_t)v125, 3u);
      }
      if ((v125[23] & 0x80000000) != 0)
        operator delete(*(void **)v125);
      *(_QWORD *)v105 = *MEMORY[0x1E0DE4F50];
      v71 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD *)&v105[*(_QWORD *)(*(_QWORD *)v105 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      *(_QWORD *)&v105[16] = v71;
      *(_QWORD *)&v105[24] = MEMORY[0x1E0DE4FB8] + 16;
      if (v108 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C3B8D80C](v109);
      goto LABEL_135;
    case 3:
      if (*(_BYTE *)a2 && (v9 = (uint64_t **)*((_QWORD *)a2 + 6)) != 0)
      {
        YAML::detail::node_data::begin(**v9, (uint64_t)v105);
        v10 = *((_QWORD *)a2 + 4);
        v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
          *(_OWORD *)v125 = *(_OWORD *)v105;
          *(_OWORD *)&v125[16] = *(_OWORD *)&v105[16];
          *(_QWORD *)&v125[32] = v10;
          v126 = v11;
          do
            v14 = __ldxr(v12);
          while (__stxr(v14 + 1, v12));
          do
            v15 = __ldaxr(v12);
          while (__stlxr(v15 - 1, v12));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        else
        {
          *(_OWORD *)v125 = *(_OWORD *)v105;
          *(_OWORD *)&v125[16] = *(_OWORD *)&v105[16];
          *(_QWORD *)&v125[32] = v10;
          v126 = 0;
        }
      }
      else
      {
        *(_DWORD *)v125 = 0;
        memset(&v125[8], 0, 32);
        v126 = 0;
      }
      if (*(_BYTE *)a2 && (v27 = (uint64_t **)*((_QWORD *)a2 + 6)) != 0)
      {
        YAML::detail::node_data::end(**v27, (uint64_t)v105);
        v28 = *((_QWORD *)a2 + 4);
        v29 = (std::__shared_weak_count *)*((_QWORD *)a2 + 5);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          *(_OWORD *)v123 = *(_OWORD *)v105;
          *(_OWORD *)&v123[16] = *(_OWORD *)&v105[16];
          *(_QWORD *)&v123[32] = v28;
          v124 = v29;
          do
            v32 = __ldxr(v30);
          while (__stxr(v32 + 1, v30));
          do
            v33 = __ldaxr(v30);
          while (__stlxr(v33 - 1, v30));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        else
        {
          *(_OWORD *)v123 = *(_OWORD *)v105;
          *(_OWORD *)&v123[16] = *(_OWORD *)&v105[16];
          *(_QWORD *)&v123[32] = v28;
          v124 = 0;
        }
      }
      else
      {
        *(_DWORD *)v123 = 0;
        memset(&v123[8], 0, 32);
        v124 = 0;
      }
      v34 = *MEMORY[0x1E0DE4F50];
      v35 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v36 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v102 = (char **)((char *)a3 + 32);
      v37 = MEMORY[0x1E0DE4FB8] + 16;
      while (1)
      {
        if (*(_DWORD *)v125 == *(_DWORD *)v123)
        {
          v39 = &v123[8];
          v38 = &v125[8];
          if (*(_DWORD *)v125 != 1)
          {
            if (*(_DWORD *)v125 != 2)
              break;
            v39 = &v123[16];
            v38 = &v125[16];
          }
          if (*(_QWORD *)v38 == *(_QWORD *)v39)
            break;
        }
        YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)&v110, (uint64_t)v125);
        if (!(_BYTE)v110)
        {
          v95 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)v105, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
          else
            *(std::string *)v105 = v111;
          YAML::InvalidNode::InvalidNode(v95, (uint64_t)v105);
        }
        if (v113
          && (v40 = **v113, *(_BYTE *)v40)
          && ((v41 = *(_DWORD *)(v40 + 16), v41 != 2) ? (v42 = v41 == 4) : (v42 = 1), v42))
        {
          v43 = (std::__shared_weak_count *)operator new(0x50uLL);
          v43->__shared_owners_ = 0;
          v44 = (unint64_t *)&v43->__shared_owners_;
          v43->__shared_weak_owners_ = 0;
          v43[1].std::__shared_count = 0u;
          v43->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931730;
          *(_OWORD *)&v43[1].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v43[2].__shared_owners_ = 0u;
          v43[3].__vftable = 0;
          *(_QWORD *)v105 = v43 + 1;
          *(_QWORD *)&v105[8] = v43;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>(v102, (__int128 *)v105);
          siri::dialogengine::ParseCustomCombinationYAML(this, (siri::dialogengine::Context *)&v110, (const YAML::Node *)&v43[1], v45);
          do
            v46 = __ldaxr(v44);
          while (__stlxr(v46 - 1, v44));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        else
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v105);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v105[16], (uint64_t)"Expected sequence node to be either a scalar or a map (line ", 60);
          if (!(_BYTE)v110)
          {
            v96 = __cxa_allocate_exception(0x38uLL);
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v127, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
            else
              v127 = v111;
            YAML::InvalidNode::InvalidNode(v96, (uint64_t)&v127);
          }
          v47 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)")", 1);
          std::stringbuf::str();
          if (this)
            siri::dialogengine::Context::AddSchemaError((uint64_t *)this, (__int128 *)&v127);
          else
            siri::dialogengine::Log::LogWithLevel((uint64_t)&v127, 3u);
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v127.__r_.__value_.__l.__data_);
          *(_QWORD *)v105 = v34;
          *(_QWORD *)&v105[*(_QWORD *)(v34 - 24)] = v35;
          *(_QWORD *)&v105[16] = v36;
          *(_QWORD *)&v105[24] = v37;
          if (v108 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1C3B8D80C](v109);
        }
        v48 = v121;
        if (v121)
        {
          v49 = (unint64_t *)&v121->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (SHIBYTE(v120) < 0)
          operator delete((void *)v119);
        v51 = v117;
        if (v117)
        {
          v52 = (unint64_t *)&v117->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        if (SHIBYTE(v116) < 0)
          operator delete((void *)v115);
        v54 = v112;
        if (v112)
        {
          v55 = (unint64_t *)&v112->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v125);
      }
      v57 = v124;
      if (v124)
      {
        v58 = (unint64_t *)&v124->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = v126;
      if (v126)
      {
        v61 = (unint64_t *)&v126->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      break;
    case 2:
      *(_DWORD *)a3 = 4;
      v8 = (const std::string *)YAML::Node::Scalar(a2);
      std::string::operator=((std::string *)((char *)a3 + 8), v8);
      break;
    default:
      v24 = YAML::Node::Mark(a2);
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Unexpected node in custom VisualComponentsCombination (line %d)", v25, (HIDWORD(v24) + 1));
      break;
  }
}

void sub_1BFA8D3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  void *v59;
  uint64_t v60;

  __cxa_free_exception(v59);
  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v60 - 105) < 0)
    operator delete(*(void **)(v60 - 128));
  if (*(char *)(v60 - 201) < 0)
    operator delete(*(void **)(v60 - 224));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a24);
  YAML::detail::iterator_value::~iterator_value(&a59);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParsePatternOverrideYAML(std::vector<std::string> **this, siri::dialogengine::Context *a2, const YAML::detail::iterator_value *a3)
{
  char *v6;
  uint64_t **v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  std::string *v23;
  int data;
  int v25;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::string *v34;
  __int128 v35;
  std::vector<std::string> *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  std::vector<std::string>::pointer end;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  std::string *v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::vector<std::string> *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *exception;
  std::string v88;
  _BYTE __p[32];
  std::__shared_weak_count *v90;
  void *v91;
  char v92;
  std::__shared_weak_count *v93;
  void *v94;
  char v95;
  std::__shared_weak_count *v96;
  _BYTE v97[40];
  std::__shared_weak_count *v98;
  _BYTE v99[40];
  std::__shared_weak_count *v100;
  std::vector<std::string> v101;
  std::string v102;
  __int128 v103;
  __int128 v104;
  std::__shared_weak_count *v105;
  char v106;
  __int128 v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  char v110;
  void *v111;
  char v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t **v115;
  _BYTE v116[40];
  std::__shared_weak_count *v117;
  _BYTE v118[40];
  std::__shared_weak_count *v119;
  std::__split_buffer<std::string> __v;

  v6 = (char *)operator new(0x48uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E7931690;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  this[1] = (std::vector<std::string> *)v6;
  *(_OWORD *)(v6 + 24) = 0u;
  *this = (std::vector<std::string> *)(v6 + 24);
  if (*((_BYTE *)a3 + 112) && (v7 = (uint64_t **)*((_QWORD *)a3 + 20)) != 0)
  {
    YAML::detail::node_data::begin(**v7, (uint64_t)&v103);
    v8 = *((_QWORD *)a3 + 18);
    v9 = (std::__shared_weak_count *)*((_QWORD *)a3 + 19);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      *(_OWORD *)v118 = v103;
      *(_OWORD *)&v118[16] = v104;
      *(_QWORD *)&v118[32] = v8;
      v119 = v9;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      *(_OWORD *)v118 = v103;
      *(_OWORD *)&v118[16] = v104;
      *(_QWORD *)&v118[32] = v8;
      v119 = 0;
    }
  }
  else
  {
    *(_DWORD *)v118 = 0;
    memset(&v118[8], 0, 32);
    v119 = 0;
  }
  if (*((_BYTE *)a3 + 112) && (v14 = (uint64_t **)*((_QWORD *)a3 + 20)) != 0)
  {
    YAML::detail::node_data::end(**v14, (uint64_t)&v103);
    v15 = *((_QWORD *)a3 + 18);
    v16 = (std::__shared_weak_count *)*((_QWORD *)a3 + 19);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      *(_OWORD *)v116 = v103;
      *(_OWORD *)&v116[16] = v104;
      *(_QWORD *)&v116[32] = v15;
      v117 = v16;
      do
        v19 = __ldxr(v17);
      while (__stxr(v19 + 1, v17));
      do
        v20 = __ldaxr(v17);
      while (__stlxr(v20 - 1, v17));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    else
    {
      *(_OWORD *)v116 = v103;
      *(_OWORD *)&v116[16] = v104;
      *(_QWORD *)&v116[32] = v15;
      v117 = 0;
    }
  }
  else
  {
    *(_DWORD *)v116 = 0;
    memset(&v116[8], 0, 32);
    v117 = 0;
  }
  while (1)
  {
    if (*(_DWORD *)v118 == *(_DWORD *)v116)
    {
      v22 = &v116[8];
      v21 = &v118[8];
      if (*(_DWORD *)v118 != 1)
      {
        if (*(_DWORD *)v118 != 2)
          break;
        v22 = &v116[16];
        v21 = &v118[16];
      }
      if (*(_QWORD *)v21 == *(_QWORD *)v22)
        break;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)&v103, (uint64_t)v118);
    if (!v106)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v108) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v107, *((std::string::size_type *)&v107 + 1));
      }
      else
      {
        *(_OWORD *)__p = v107;
        *(_QWORD *)&__p[16] = v108;
      }
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)__p);
    }
    *(_QWORD *)__p = &v106;
    YAML::as_if<std::string,void>::operator()(&v102, (YAML::Node **)__p);
    if ((*((_BYTE *)&v102.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v102.__r_.__value_.__l.__size_ == 5)
      {
        if (*(_DWORD *)v102.__r_.__value_.__l.__data_ != 1734439797
          || *(_BYTE *)(v102.__r_.__value_.__r.__words[0] + 4) != 101)
        {
LABEL_55:
          std::operator+<char>();
          v34 = std::string::append((std::string *)v99, "\" in override for pattern schema");
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v34->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (a2)
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)__p);
          else
            siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if ((v99[23] & 0x80000000) != 0)
            operator delete(*(void **)v99);
          goto LABEL_138;
        }
        goto LABEL_67;
      }
      if (v102.__r_.__value_.__l.__size_ != 6)
        goto LABEL_55;
      v23 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v102.__r_.__value_.__r.__words[2]) == 5)
      {
        if (LODWORD(v102.__r_.__value_.__l.__data_) != 1734439797 || v102.__r_.__value_.__s.__data_[4] != 101)
          goto LABEL_55;
LABEL_67:
        v37 = *this;
        siri::dialogengine::ParsePatternUsagesYAML((siri::dialogengine *)__p, (const YAML::detail::iterator_value *)&v103);
        if (v37 != (std::vector<std::string> *)__p)
          std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(v37, *(uint64_t **)__p, *(uint64_t **)&__p[8], (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 4);
        *(_QWORD *)v99 = __p;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
        goto LABEL_138;
      }
      if (HIBYTE(v102.__r_.__value_.__r.__words[2]) != 6)
        goto LABEL_55;
      v23 = &v102;
    }
    data = (int)v23->__r_.__value_.__l.__data_;
    v25 = WORD2(v23->__r_.__value_.__r.__words[0]);
    if (data != 1869177961 || v25 != 29549)
      goto LABEL_55;
    memset(&v101, 0, sizeof(v101));
    if (!v110)
    {
      *(_DWORD *)v99 = 0;
      memset(&v99[8], 0, 32);
      v100 = 0;
LABEL_83:
      *(_DWORD *)v97 = 0;
      memset(&v97[8], 0, 32);
      v98 = 0;
      goto LABEL_84;
    }
    if (v115)
    {
      YAML::detail::node_data::begin(**v115, (uint64_t)__p);
      v27 = v113;
      v28 = v114;
      if (v114)
      {
        v29 = (unint64_t *)&v114->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        *(_OWORD *)v99 = *(_OWORD *)__p;
        *(_OWORD *)&v99[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v99[32] = v27;
        v100 = v28;
        do
          v31 = __ldxr(v29);
        while (__stxr(v31 + 1, v29));
        do
          v32 = __ldaxr(v29);
        while (__stlxr(v32 - 1, v29));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *(_OWORD *)v99 = *(_OWORD *)__p;
        *(_OWORD *)&v99[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v99[32] = v113;
        v100 = 0;
      }
    }
    else
    {
      *(_DWORD *)v99 = 0;
      memset(&v99[8], 0, 32);
      v100 = 0;
    }
    if (!v110 || !v115)
      goto LABEL_83;
    YAML::detail::node_data::end(**v115, (uint64_t)__p);
    v38 = v113;
    v39 = v114;
    if (v114)
    {
      v40 = (unint64_t *)&v114->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      *(_OWORD *)v97 = *(_OWORD *)__p;
      *(_OWORD *)&v97[16] = *(_OWORD *)&__p[16];
      *(_QWORD *)&v97[32] = v38;
      v98 = v39;
      do
        v42 = __ldxr(v40);
      while (__stxr(v42 + 1, v40));
      do
        v43 = __ldaxr(v40);
      while (__stlxr(v43 - 1, v40));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    else
    {
      *(_OWORD *)v97 = *(_OWORD *)__p;
      *(_OWORD *)&v97[16] = *(_OWORD *)&__p[16];
      *(_QWORD *)&v97[32] = v113;
      v98 = 0;
    }
LABEL_84:
    while (1)
    {
      if (*(_DWORD *)v99 == *(_DWORD *)v97)
      {
        v44 = &v99[8];
        v45 = &v97[8];
        if (*(_DWORD *)v99 != 1)
        {
          if (*(_DWORD *)v99 != 2)
            break;
          v44 = &v99[16];
          v45 = &v97[16];
        }
        if (*(_QWORD *)v44 == *(_QWORD *)v45)
          break;
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)__p, (uint64_t)v99);
      if (!__p[0])
      {
        v86 = __cxa_allocate_exception(0x38uLL);
        if ((__p[31] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
        }
        else
        {
          *(_OWORD *)&__v.__first_ = *(_OWORD *)&__p[8];
          __v.__end_ = *(std::__split_buffer<std::string>::pointer *)&__p[24];
        }
        YAML::InvalidNode::InvalidNode(v86, (uint64_t)&__v);
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)__p;
      YAML::as_if<std::string,void>::operator()(&v88, (YAML::Node **)&__v);
      end = v101.__end_;
      if (v101.__end_ >= v101.__end_cap_.__value_)
      {
        v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v101.__end_ - (char *)v101.__begin_) >> 3);
        v49 = v48 + 1;
        if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3) > v49)
          v49 = 0x5555555555555556 * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3) >= 0x555555555555555)
          v50 = 0xAAAAAAAAAAAAAAALL;
        else
          v50 = v49;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v101.__end_cap_;
        if (v50)
          v51 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v101.__end_cap_, v50);
        else
          v51 = 0;
        v52 = v51 + v48;
        __v.__first_ = v51;
        __v.__begin_ = v52;
        __v.__end_cap_.__value_ = &v51[v50];
        v53 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
        v52->__r_.__value_.__r.__words[2] = v88.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
        memset(&v88, 0, sizeof(v88));
        __v.__end_ = v52 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v101, &__v);
        v54 = v101.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v101.__end_ = v54;
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
      }
      else
      {
        v47 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
        v101.__end_->__r_.__value_.__r.__words[2] = v88.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v47;
        v101.__end_ = end + 1;
      }
      v55 = v96;
      if (v96)
      {
        v56 = (unint64_t *)&v96->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      if (v95 < 0)
        operator delete(v94);
      v58 = v93;
      if (v93)
      {
        v59 = (unint64_t *)&v93->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (v92 < 0)
        operator delete(v91);
      v61 = v90;
      if (v90)
      {
        v62 = (unint64_t *)&v90->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v99);
    }
    v64 = v98;
    if (v98)
    {
      v65 = (unint64_t *)&v98->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = v100;
    if (v100)
    {
      v68 = (unint64_t *)&v100->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = *this + 1;
    if (v70 != &v101)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v70, v101.__begin_, (__int128 *)v101.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v101.__end_ - (char *)v101.__begin_) >> 3));
    *(_QWORD *)__p = &v101;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_138:
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    v71 = v114;
    if (v114)
    {
      v72 = (unint64_t *)&v114->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if (v112 < 0)
      operator delete(v111);
    v74 = v109;
    if (v109)
    {
      v75 = (unint64_t *)&v109->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    if (SHIBYTE(v108) < 0)
      operator delete((void *)v107);
    v77 = v105;
    if (v105)
    {
      v78 = (unint64_t *)&v105->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if (SHIBYTE(v104) < 0)
      operator delete(*((void **)&v103 + 1));
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v118);
  }
  v80 = v117;
  if (v117)
  {
    v81 = (unint64_t *)&v117->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v119;
  if (v119)
  {
    v84 = (unint64_t *)&v119->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

void sub_1BFA8E12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  uint64_t v67;

  a51 = &a58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  if (a66 < 0)
    operator delete(__p);
  YAML::detail::iterator_value::~iterator_value(&a67);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v67 - 208);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v67 - 160);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a13);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseExamplesYAML(std::vector<std::string> *this, const YAML::detail::iterator_value *a2)
{
  _BYTE *v4;
  uint64_t **v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::string *v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *exception;
  std::string __p;
  _BYTE v50[32];
  std::__shared_weak_count *v51;
  void *v52;
  char v53;
  std::__shared_weak_count *v54;
  void *v55;
  char v56;
  std::__shared_weak_count *v57;
  _BYTE v58[40];
  std::__shared_weak_count *v59;
  _BYTE v60[40];
  std::__shared_weak_count *v61;
  std::__split_buffer<std::string> __v;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  v4 = (char *)a2 + 112;
  if (YAML::Node::Type((const YAML::detail::iterator_value *)((char *)a2 + 112)) == 3)
  {
    if (*v4 && (v5 = (uint64_t **)*((_QWORD *)a2 + 20)) != 0)
    {
      YAML::detail::node_data::begin(**v5, (uint64_t)v50);
      v6 = *((_QWORD *)a2 + 18);
      v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 19);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        *(_OWORD *)v60 = *(_OWORD *)v50;
        *(_OWORD *)&v60[16] = *(_OWORD *)&v50[16];
        *(_QWORD *)&v60[32] = v6;
        v61 = v7;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      else
      {
        *(_OWORD *)v60 = *(_OWORD *)v50;
        *(_OWORD *)&v60[16] = *(_OWORD *)&v50[16];
        *(_QWORD *)&v60[32] = v6;
        v61 = 0;
      }
    }
    else
    {
      *(_DWORD *)v60 = 0;
      memset(&v60[8], 0, 32);
      v61 = 0;
    }
    if (*v4 && (v12 = (uint64_t **)*((_QWORD *)a2 + 20)) != 0)
    {
      YAML::detail::node_data::end(**v12, (uint64_t)v50);
      v13 = *((_QWORD *)a2 + 18);
      v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 19);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        *(_OWORD *)v58 = *(_OWORD *)v50;
        *(_OWORD *)&v58[16] = *(_OWORD *)&v50[16];
        *(_QWORD *)&v58[32] = v13;
        v59 = v14;
        do
          v17 = __ldxr(v15);
        while (__stxr(v17 + 1, v15));
        do
          v18 = __ldaxr(v15);
        while (__stlxr(v18 - 1, v15));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      else
      {
        *(_OWORD *)v58 = *(_OWORD *)v50;
        *(_OWORD *)&v58[16] = *(_OWORD *)&v50[16];
        *(_QWORD *)&v58[32] = v13;
        v59 = 0;
      }
    }
    else
    {
      *(_DWORD *)v58 = 0;
      memset(&v58[8], 0, 32);
      v59 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v60 == *(_DWORD *)v58)
      {
        v19 = &v60[8];
        v20 = &v58[8];
        if (*(_DWORD *)v60 != 1)
        {
          if (*(_DWORD *)v60 != 2)
            break;
          v19 = &v60[16];
          v20 = &v58[16];
        }
        if (*(_QWORD *)v19 == *(_QWORD *)v20)
          break;
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v50, (uint64_t)v60);
      if (!v50[0])
      {
        exception = __cxa_allocate_exception(0x38uLL);
        if ((v50[31] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)&v50[8], *(std::string::size_type *)&v50[16]);
        }
        else
        {
          *(_OWORD *)&__v.__first_ = *(_OWORD *)&v50[8];
          __v.__end_ = *(std::__split_buffer<std::string>::pointer *)&v50[24];
        }
        YAML::InvalidNode::InvalidNode(exception, (uint64_t)&__v);
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)v50;
      YAML::as_if<std::string,void>::operator()(&__p, (YAML::Node **)&__v);
      end = this->__end_;
      value = this->__end_cap_.__value_;
      if (end >= value)
      {
        v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
        v25 = v24 + 1;
        if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x555555555555555)
          v27 = 0xAAAAAAAAAAAAAAALL;
        else
          v27 = v25;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
        if (v27)
          v28 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&this->__end_cap_, v27);
        else
          v28 = 0;
        v29 = v28 + v24;
        __v.__first_ = v28;
        __v.__begin_ = v29;
        __v.__end_cap_.__value_ = &v28[v27];
        v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v29->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v29 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
        v31 = this->__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v32 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        this->__end_ = v31;
        if (v32 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v23;
        this->__end_ = end + 1;
      }
      v33 = v57;
      if (v57)
      {
        v34 = (unint64_t *)&v57->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v56 < 0)
        operator delete(v55);
      v36 = v54;
      if (v54)
      {
        v37 = (unint64_t *)&v54->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (v53 < 0)
        operator delete(v52);
      v39 = v51;
      if (v51)
      {
        v40 = (unint64_t *)&v51->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if ((v50[31] & 0x80000000) != 0)
        operator delete(*(void **)&v50[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v60);
    }
    v42 = v59;
    if (v59)
    {
      v43 = (unint64_t *)&v59->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = v61;
    if (v61)
    {
      v46 = (unint64_t *)&v61->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
}

void sub_1BFA8E7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(v39 - 192) = v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 192));
  _Unwind_Resume(a1);
}

_QWORD *YAML::BadConversion::BadConversion(_QWORD *a1, _DWORD *a2)
{
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "bad conversion");
  YAML::Exception::Exception((uint64_t)a1, a2, (__int128 *)__p);
  *a1 = &off_1E7939180;
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = &off_1E7939380;
  return a1;
}

void sub_1BFA8E8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::TypedBadConversion<BOOL>::~TypedBadConversion(std::runtime_error *a1)
{
  YAML::Exception::~Exception(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t *YAML::Node::Scalar(YAML::Node *this)
{
  _QWORD **v2;
  _QWORD *exception;
  std::string v5;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v5 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v5);
  }
  v2 = (_QWORD **)*((_QWORD *)this + 6);
  if (v2)
    return (uint64_t *)(**v2 + 56);
  YAML::detail::node_data::empty_scalar(this);
  return &YAML::detail::node_data::empty_scalar(void)::svalue;
}

void sub_1BFA8E9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

YAML::detail::iterator_value *YAML::detail::iterator_value::iterator_value(YAML::detail::iterator_value *this, const YAML::Node *a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_BYTE *)this = *(_BYTE *)a2;
  v4 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 5) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_BYTE *)this + 112) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  return this;
}

YAML::detail::iterator_value *YAML::detail::iterator_value::iterator_value(YAML::detail::iterator_value *this, const YAML::Node *a2, const YAML::Node *a3)
{
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  *(_BYTE *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_BYTE *)this + 56) = *(_BYTE *)a2;
  v6 = (std::string *)((char *)this + 64);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 8);
    v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 12) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 6);
  *((_BYTE *)this + 112) = *(_BYTE *)a3;
  v11 = (std::string *)((char *)this + 120);
  if (*((char *)a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)a3 + 1), *((_QWORD *)a3 + 2));
  }
  else
  {
    v12 = *(_OWORD *)((char *)a3 + 8);
    *((_QWORD *)this + 17) = *((_QWORD *)a3 + 3);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v13 = *((_QWORD *)a3 + 5);
  *((_QWORD *)this + 18) = *((_QWORD *)a3 + 4);
  *((_QWORD *)this + 19) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *((_QWORD *)this + 20) = *((_QWORD *)a3 + 6);
  return this;
}

void sub_1BFA8EBC8(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  YAML::Node::~Node(v2);
  YAML::Node::~Node(v1);
  _Unwind_Resume(a1);
}

void YAML::Node::EnsureNodeExists(YAML::Node *this)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  __int128 v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  YAML::detail::node *node;
  uint64_t v9;
  _QWORD *exception;
  std::string v11;
  __int128 v12;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v11 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v11);
  }
  if (!*((_QWORD *)this + 6))
  {
    v2 = (_QWORD *)operator new();
    v3 = (_QWORD *)operator new();
    v3[2] = 0;
    v3[1] = 0;
    *v3 = v3 + 1;
    std::shared_ptr<YAML::detail::memory>::shared_ptr[abi:ne180100]<YAML::detail::memory,void>(v2, (uint64_t)v3);
    std::shared_ptr<YAML::detail::memory_holder>::shared_ptr[abi:ne180100]<YAML::detail::memory_holder,void>(&v12, (uint64_t)v2);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    v5 = v12;
    *(_QWORD *)&v12 = *((_QWORD *)this + 4);
    *((_QWORD *)&v12 + 1) = v4;
    *((_OWORD *)this + 2) = v5;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    node = (YAML::detail::node *)YAML::detail::memory::create_node(**((YAML::detail::memory ***)this + 4));
    *((_QWORD *)this + 6) = node;
    YAML::detail::node::mark_defined(node);
    v9 = **(_QWORD **)node;
    *(_BYTE *)v9 = 1;
    *(_DWORD *)(v9 + 16) = 1;
  }
}

void sub_1BFA8ED5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

YAML::detail::node *YAML::detail::node::get<std::string>(YAML::detail::node *a1, uint64_t a2, YAML::detail::memory **a3, std::__shared_weak_count *a4)
{
  uint64_t *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  YAML::detail::node **i;
  YAML::detail::node *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const std::string *v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string::size_type size;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  std::string *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  BOOL v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  YAML::detail::node *v56;
  uint64_t v57;
  YAML::detail::node *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  YAML::detail::node *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v71;
  _QWORD *exception;
  YAML::detail::memory **v74;
  std::__shared_weak_count *v75;
  YAML::detail::memory **v76;
  std::__shared_weak_count *v77;
  YAML::detail::memory **v78;
  std::__shared_weak_count *v79;
  char v80[8];
  std::string __p;
  YAML::detail::memory **v82;
  std::__shared_weak_count *v83;
  YAML::detail::node *node;
  std::string v85;

  v7 = *(uint64_t **)a1;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *v7;
    v11 = (unint64_t *)&a4->__shared_owners_;
    v74 = a3;
    v75 = a4;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  else
  {
    v10 = *v7;
    v74 = a3;
    v75 = 0;
  }
  v13 = *(_DWORD *)(v10 + 16);
  if (v13 < 2 || v13 == 3)
  {
    if (a4)
    {
      v15 = (unint64_t *)&a4->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
        std::__shared_weak_count::__release_weak(a4);
      }
      v76 = v74;
      v77 = v75;
      if (v75)
      {
        v18 = (unint64_t *)&v75->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
    }
    else
    {
      v76 = a3;
      v77 = 0;
    }
    YAML::detail::node_data::convert_to_map(v10, &v76);
    v20 = v77;
    if (v77)
    {
      v21 = (unint64_t *)&v77->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else if (v13 == 2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    YAML::BadSubscript::BadSubscript<std::string>(exception, a2);
  }
  for (i = *(YAML::detail::node ***)(v10 + 112); i != *(YAML::detail::node ***)(v10 + 120); i += 2)
  {
    v24 = *i;
    if (v75)
    {
      v25 = (unint64_t *)&v75->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      memset(&v85, 0, sizeof(v85));
      v78 = v74;
      v79 = v75;
      do
        v27 = __ldxr(v25);
      while (__stxr(v27 + 1, v25));
      memset(&__p, 0, sizeof(__p));
      v82 = v74;
      v83 = v75;
      do
        v28 = __ldxr(v25);
      while (__stxr(v28 + 1, v25));
    }
    else
    {
      memset(&v85, 0, sizeof(v85));
      v78 = v74;
      v79 = 0;
      memset(&__p, 0, sizeof(__p));
      v82 = v74;
      v83 = 0;
    }
    v80[0] = 1;
    node = v24;
    if (v24 && (v29 = **(_QWORD **)v24, *(_BYTE *)v29) && *(_DWORD *)(v29 + 16) == 2)
    {
      v30 = (const std::string *)YAML::Node::Scalar((YAML::Node *)v80);
      std::string::operator=(&v85, v30);
      v31 = 1;
      if (!v75)
        goto LABEL_50;
    }
    else
    {
      v31 = 0;
      if (!v75)
        goto LABEL_50;
    }
    v32 = (unint64_t *)&v75->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
LABEL_50:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v34 = v79;
    if (v79)
    {
      v35 = (unint64_t *)&v79->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v31)
    {
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      else
        size = v85.__r_.__value_.__l.__size_;
      v38 = *(unsigned __int8 *)(a2 + 23);
      v39 = (char)v38;
      if ((v38 & 0x80u) != 0)
        v38 = *(_QWORD *)(a2 + 8);
      if (size == v38)
      {
        if (v39 >= 0)
          v40 = (unsigned __int8 *)a2;
        else
          v40 = *(unsigned __int8 **)a2;
        if ((*((_BYTE *)&v85.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v49 = (void *)v85.__r_.__value_.__r.__words[0];
          LOBYTE(v31) = memcmp(v85.__r_.__value_.__l.__data_, v40, v85.__r_.__value_.__l.__size_) == 0;
          goto LABEL_80;
        }
        if (!*((_BYTE *)&v85.__r_.__value_.__s + 23))
        {
          LOBYTE(v31) = 1;
          goto LABEL_81;
        }
        v41 = HIBYTE(v85.__r_.__value_.__r.__words[2]) - 1;
        v42 = &v85;
        do
        {
          v44 = v42->__r_.__value_.__s.__data_[0];
          v42 = (std::string *)((char *)v42 + 1);
          v43 = v44;
          v46 = *v40++;
          v45 = v46;
          v48 = v41-- != 0;
          LOBYTE(v31) = v43 == v45;
        }
        while (v43 == v45 && v48);
      }
      else
      {
        LOBYTE(v31) = 0;
      }
    }
    if ((*((_BYTE *)&v85.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v49 = (void *)v85.__r_.__value_.__r.__words[0];
LABEL_80:
      operator delete(v49);
    }
LABEL_81:
    if (v75)
    {
      v50 = (unint64_t *)&v75->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if ((v31 & 1) != 0)
    {
      v65 = i[1];
      goto LABEL_108;
    }
  }
  v78 = v74;
  v79 = v75;
  if (v75)
  {
    v52 = (unint64_t *)&v75->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v80[0] = 1;
  memset(&__p, 0, sizeof(__p));
  v54 = (_QWORD *)operator new();
  v55 = (_QWORD *)operator new();
  v55[2] = 0;
  v55[1] = 0;
  *v55 = v55 + 1;
  std::shared_ptr<YAML::detail::memory>::shared_ptr[abi:ne180100]<YAML::detail::memory,void>(v54, (uint64_t)v55);
  std::shared_ptr<YAML::detail::memory_holder>::shared_ptr[abi:ne180100]<YAML::detail::memory_holder,void>(&v82, (uint64_t)v54);
  node = (YAML::detail::node *)YAML::detail::memory::create_node(*v82);
  if (!v80[0])
  {
    v71 = __cxa_allocate_exception(0x38uLL);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v85, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v85 = __p;
    YAML::InvalidNode::InvalidNode(v71, (uint64_t)&v85);
  }
  YAML::Node::EnsureNodeExists((YAML::Node *)v80);
  v56 = node;
  YAML::detail::node::mark_defined(node);
  v57 = **(_QWORD **)v56;
  *(_BYTE *)v57 = 1;
  *(_DWORD *)(v57 + 16) = 2;
  std::string::operator=((std::string *)(v57 + 56), (const std::string *)a2);
  YAML::Node::EnsureNodeExists((YAML::Node *)v80);
  YAML::detail::memory_holder::merge((uint64_t *)v74, (uint64_t)v82);
  v59 = v83;
  v58 = node;
  if (v83)
  {
    v60 = (unint64_t *)&v83->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v62 = v79;
  if (v79)
  {
    v63 = (unint64_t *)&v79->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (YAML::detail::node *)YAML::detail::memory::create_node(*v74);
  YAML::detail::node_data::insert_map_pair((YAML::detail::node_data *)v10, v58, v65);
LABEL_108:
  if (v75)
  {
    v66 = (unint64_t *)&v75->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (a4)
  {
    v68 = (unint64_t *)&a4->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  YAML::detail::node::add_dependency(v65, a1);
  return v65;
}

void sub_1BFA8F41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  __cxa_free_exception(v26);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void YAML::detail::node::add_dependency(YAML::detail::node *this, YAML::detail::node *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  if (***(_BYTE ***)this)
  {
    YAML::detail::node::mark_defined(a2);
  }
  else
  {
    v5 = (uint64_t **)((char *)this + 24);
    v4 = (uint64_t *)*((_QWORD *)this + 3);
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t **)v4;
          v7 = v4[4];
          if (v7 <= (unint64_t)a2)
            break;
          v4 = *v6;
          v5 = v6;
          if (!*v6)
            goto LABEL_11;
        }
        if (v7 >= (unint64_t)a2)
          break;
        v4 = v6[1];
        if (!v4)
        {
          v5 = v6 + 1;
          goto LABEL_11;
        }
      }
    }
    else
    {
      v6 = (uint64_t **)((char *)this + 24);
LABEL_11:
      v8 = (uint64_t *)operator new(0x28uLL);
      v8[4] = (uint64_t)a2;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = (uint64_t)v6;
      *v5 = v8;
      v9 = **((_QWORD **)this + 2);
      if (v9)
      {
        *((_QWORD *)this + 2) = v9;
        v10 = *v5;
      }
      else
      {
        v10 = v8;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 3), v10);
      ++*((_QWORD *)this + 4);
    }
  }
}

void YAML::detail::node::mark_defined(YAML::detail::node *this)
{
  uint64_t v1;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;

  v1 = **(_QWORD **)this;
  if (!*(_BYTE *)v1)
  {
    if (!*(_DWORD *)(v1 + 16))
      *(_DWORD *)(v1 + 16) = 1;
    *(_BYTE *)v1 = 1;
    v3 = (char *)*((_QWORD *)this + 2);
    v4 = (char *)this + 24;
    if (v3 != (char *)this + 24)
    {
      do
      {
        YAML::detail::node::mark_defined(*((YAML::detail::node **)v3 + 4));
        v5 = (char *)*((_QWORD *)v3 + 1);
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = *(char **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (char *)*((_QWORD *)v3 + 2);
            v7 = *(_QWORD *)v6 == (_QWORD)v3;
            v3 = v6;
          }
          while (!v7);
        }
        v3 = v6;
      }
      while (v6 != v4);
    }
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*((_QWORD **)this + 3));
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 2) = v4;
  }
}

_QWORD *YAML::BadSubscript::BadSubscript<std::string>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  char v13;
  uint64_t v14;
  int v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  v14 = -1;
  v15 = -1;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"operator[] call on a scalar", 27);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" (key: \"", 8);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *(_QWORD *)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\")", 2);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v10;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&v19);
  YAML::Exception::Exception((uint64_t)a1, &v14, &v12);
  *a1 = &off_1E7939180;
  if (v13 < 0)
    operator delete((void *)v12);
  *a1 = &off_1E79393C0;
  return a1;
}

void sub_1BFA8F7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<YAML::detail::memory>::shared_ptr[abi:ne180100]<YAML::detail::memory,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7939238;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  std::unique_ptr<YAML::detail::memory>::reset[abi:ne180100](&v6);
  return a1;
}

void sub_1BFA8F8D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<YAML::detail::memory>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<YAML::detail::memory_holder>::shared_ptr[abi:ne180100]<YAML::detail::memory_holder,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E79391C0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BFA8F94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<YAML::detail::memory_holder>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<YAML::detail::memory_holder>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

void std::__shared_ptr_pointer<YAML::detail::memory_holder *,std::shared_ptr<YAML::detail::memory_holder>::__shared_ptr_default_delete<YAML::detail::memory_holder,YAML::detail::memory_holder>,std::allocator<YAML::detail::memory_holder>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<YAML::detail::memory_holder *,std::shared_ptr<YAML::detail::memory_holder>::__shared_ptr_default_delete<YAML::detail::memory_holder,YAML::detail::memory_holder>,std::allocator<YAML::detail::memory_holder>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<YAML::detail::memory_holder *,std::shared_ptr<YAML::detail::memory_holder>::__shared_ptr_default_delete<YAML::detail::memory_holder,YAML::detail::memory_holder>,std::allocator<YAML::detail::memory_holder>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::unique_ptr<YAML::detail::memory>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(*(_QWORD **)(v1 + 8));
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

void std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(*a1);
    std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(a1[1]);
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_pointer<YAML::detail::memory *,std::shared_ptr<YAML::detail::memory>::__shared_ptr_default_delete<YAML::detail::memory,YAML::detail::memory>,std::allocator<YAML::detail::memory>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<YAML::detail::memory *,std::shared_ptr<YAML::detail::memory>::__shared_ptr_default_delete<YAML::detail::memory,YAML::detail::memory>,std::allocator<YAML::detail::memory>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(*(_QWORD **)(v1 + 8));
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<YAML::detail::memory *,std::shared_ptr<YAML::detail::memory>::__shared_ptr_default_delete<YAML::detail::memory,YAML::detail::memory>,std::allocator<YAML::detail::memory>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void YAML::TypedBadConversion<std::string>::~TypedBadConversion(std::runtime_error *a1)
{
  YAML::Exception::~Exception(a1);
  JUMPOUT(0x1C3B8D890);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchema>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79319A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchema>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79319A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

void std::__shared_ptr_emplace<siri::dialogengine::PatternSchema>::__on_zero_shared(uint64_t a1)
{
  siri::dialogengine::PatternSchema::~PatternSchema((siri::dialogengine::PatternSchema *)(a1 + 24));
}

uint64_t siri::dialogengine::DialogDateTime::toString(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  __int128 v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  const char *v9;
  const std::string::value_type *v10;
  const char *v11;
  std::string __p;
  std::string v14;
  std::string v15;
  std::string v16;
  void *v17[3];
  char v18;
  void *v19[2];
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v24 = 0uLL;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  siri::dialogengine::GetDateComponents(this, (uint64_t)a2, (uint64_t)&v24 + 8, (uint64_t)&v24, (uint64_t)&v23, (int *)&v22 + 1, (unsigned int *)&v22, &v21, (uint64_t)v19);
  v4 = v24;
  v5 = v23;
  v6 = v24 != 0;
  if (v24 != 0 || v23)
  {
    v8 = HIDWORD(v22);
    siri::dialogengine::GetICUTimeStampForDate((uint64_t)v19, (uint64_t)v17);
    memset(&v16, 0, sizeof(v16));
    if ((_QWORD)v4)
    {
      std::string::append(&v16, "MMMM");
      if (v5)
        std::string::append(&v16, " d");
    }
    if (*((_QWORD *)&v4 + 1))
    {
      if (v5 && (_QWORD)v4)
        std::string::append(&v16, ",");
      if (v8 >= 1000)
        v10 = " y";
      else
        v10 = " y G";
      std::string::append(&v16, v10);
    }
    if (!v6)
      MEMORY[0x1C3B8D53C](&v16, "d");
    siri::dialogengine::Context::GetLocale(this, v9, (uint64_t)&v14);
    siri::dialogengine::StringTrim(" \t\n\r", &v16, &__p);
    siri::dialogengine::GetICULocalizedPattern(&v14.__r_.__value_.__l.__data_, (uint64_t)&v15);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    v16 = v15;
    *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
    v15.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    siri::dialogengine::Context::GetLocale(this, v11, (uint64_t)&v14);
    siri::dialogengine::GetICUFormattedDateTimeString(&v15, v17);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    v7 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v14, "");
    siri::dialogengine::VariableString::VariableString(v7, &v14, (uint64_t)&v15);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (v18 < 0)
      operator delete(v17[1]);
  }
  else
  {
    v7 = 0;
  }
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  return v7;
}

void sub_1BFA8FE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  uint64_t v42;

  if (a21 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v41, 0x10B3C40D3060B95);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (a41 < 0)
    operator delete(a36);
  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetDateComponents(siri::dialogengine::Context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, unsigned int *a7, unsigned int *a8, uint64_t a9)
{
  const char *v17;
  char *OptionalStringParameter;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "year");
  *(_QWORD *)a3 = siri::dialogengine::GetOptionalNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "month");
  *(_QWORD *)a4 = siri::dialogengine::GetOptionalNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "day");
  *(_QWORD *)a5 = siri::dialogengine::GetOptionalNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "timeZone");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_QWORD *)a3)
    v19 = (int)*(double *)(*(_QWORD *)a3 + 72);
  else
    v19 = 2000;
  *a6 = v19;
  if (*(_QWORD *)a4)
    v20 = (int)*(double *)(*(_QWORD *)a4 + 72);
  else
    v20 = 1;
  *a7 = v20;
  if (*(_QWORD *)a5)
    v21 = (int)*(double *)(*(_QWORD *)a5 + 72);
  else
    v21 = 1;
  *a8 = v21;
  if (OptionalStringParameter)
  {
    if (OptionalStringParameter[95] < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)OptionalStringParameter + 9), *((_QWORD *)OptionalStringParameter + 10));
    else
      __p = *(std::string *)(OptionalStringParameter + 3);
  }
  else
  {
    siri::dialogengine::Context::GetCurrentTimeZone(a1, &__p);
  }
  if (*(char *)(a9 + 23) < 0)
    operator delete(*(void **)a9);
  *(std::string *)a9 = __p;
  if (*a7 - 13 <= 0xFFFFFFF3)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"dialog.DateTime type has an invalid month value (%d)", v17, *a7);
    v22 = *a7;
    if ((int)*a7 <= 1)
      v22 = 1;
    if (v22 >= 0xC)
      v22 = 12;
    *a7 = v22;
  }
  if (*a8 - 32 <= 0xFFFFFFE0)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"dialog.DateTime type has an invalid day value (%d)", v17, *a8);
    v23 = *a8;
    if ((int)*a8 <= 1)
      v23 = 1;
    if (v23 >= 0x1F)
      v23 = 31;
    *a8 = v23;
  }
}

void sub_1BFA90168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogDateTime::year(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  double *OptionalNumberParameter;
  double *v5;
  uint64_t v6;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "year");
  OptionalNumberParameter = (double *)siri::dialogengine::GetOptionalNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v5 = OptionalNumberParameter;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (OptionalNumberParameter)
      goto LABEL_3;
    return 0;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v5)
    return 0;
LABEL_3:
  v6 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v6, &__p, v5[9]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BFA90244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDateTime::month(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  double *OptionalNumberParameter;
  double *v5;
  uint64_t v6;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "month");
  OptionalNumberParameter = (double *)siri::dialogengine::GetOptionalNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v5 = OptionalNumberParameter;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (OptionalNumberParameter)
      goto LABEL_3;
    return 0;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v5)
    return 0;
LABEL_3:
  v6 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v6, &__p, v5[9]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BFA9034C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDateTime::day(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  double *OptionalNumberParameter;
  double *v5;
  uint64_t v6;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "day");
  OptionalNumberParameter = (double *)siri::dialogengine::GetOptionalNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v5 = OptionalNumberParameter;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (OptionalNumberParameter)
      goto LABEL_3;
    return 0;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v5)
    return 0;
LABEL_3:
  v6 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v6, &__p, v5[9]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BFA90454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDateTime::yearString(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  void *OptionalNumberParameter;
  int v6;
  const std::string::value_type *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  char v17;
  char v18;
  void *v19[2];
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  std::string::basic_string[abi:ne180100]<0>(__p, "year");
  OptionalNumberParameter = siri::dialogengine::GetOptionalNumberParameter((const void **)__p, (uint64_t)a2);
  if (v17 < 0)
    operator delete(__p[0]);
  v25 = OptionalNumberParameter;
  if (!OptionalNumberParameter)
    return 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v21 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  siri::dialogengine::GetDateComponents(this, (uint64_t)a2, (uint64_t)&v25, (uint64_t)&v24, (uint64_t)&v23, (int *)&v22 + 1, (unsigned int *)&v22, &v21, (uint64_t)v19);
  v6 = HIDWORD(v22);
  siri::dialogengine::GetICUTimeStampForDate((uint64_t)v19, (uint64_t)__p);
  memset(&v15, 0, sizeof(v15));
  if (v6 >= 1000)
    v7 = "y";
  else
    v7 = "y G";
  std::string::append(&v15, v7);
  siri::dialogengine::Context::GetLocale(this, v8, (uint64_t)&v13);
  siri::dialogengine::StringTrim(" \t\n\r", &v15, &v12);
  siri::dialogengine::GetICULocalizedPattern(&v13.__r_.__value_.__l.__data_, (uint64_t)&v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v15 = v14;
  *((_BYTE *)&v14.__r_.__value_.__s + 23) = 0;
  v14.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  siri::dialogengine::Context::GetLocale(this, v9, (uint64_t)&v13);
  siri::dialogengine::GetICUFormattedDateTimeString(&v14, __p);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v10 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  siri::dialogengine::VariableString::VariableString(v10, &v13, (uint64_t)&v14);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v18 < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  return v10;
}

void sub_1BFA906D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  uint64_t v42;

  if (a21 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v41, 0x10B3C40D3060B95);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (a41 < 0)
    operator delete(a36);
  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  _Unwind_Resume(a1);
}

void sub_1BFA907A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    JUMPOUT(0x1BFA90794);
  JUMPOUT(0x1BFA90798);
}

uint64_t siri::dialogengine::DialogDateTime::monthName(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  const char *v5;
  void *v7[2];
  __int128 v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  std::string v13;
  void *v14[3];
  char v15;
  void *v16[2];
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  siri::dialogengine::GetDateComponents(this, (uint64_t)a2, (uint64_t)&v22, (uint64_t)&v21, (uint64_t)&v20, (int *)&v19 + 1, (unsigned int *)&v19, &v18, (uint64_t)v16);
  if (v21)
  {
    siri::dialogengine::GetICUTimeStampForDate((uint64_t)v16, (uint64_t)v14);
    v4 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v13, "");
    siri::dialogengine::Context::GetLocale(this, v5, (uint64_t)v9);
    *(_OWORD *)v7 = 0u;
    v8 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    BYTE8(v8) = 0;
    siri::dialogengine::GetICUMonthName(v14, (char **)v9, (uint64_t *)v7, __p);
    siri::dialogengine::VariableString::VariableString(v4, &v13, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v8) < 0)
      operator delete(v7[0]);
    if (v10 < 0)
      operator delete(v9[0]);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    if (v15 < 0)
      operator delete(v14[1]);
  }
  else
  {
    v4 = 0;
  }
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  return v4;
}

void sub_1BFA90918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v44;

  if (a30 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a24 < 0)
    operator delete(a19);
  if (a36 < 0)
    operator delete(a31);
  MEMORY[0x1C3B8D890](v43, 0x10B3C40D3060B95);
  if (a43 < 0)
    operator delete(a38);
  if (*(char *)(v44 - 73) < 0)
    operator delete(*(void **)(v44 - 96));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDateTime::dayName(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  const char *v5;
  void *v7[2];
  __int128 v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  std::string v13;
  void *v14[3];
  char v15;
  void *v16[2];
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  siri::dialogengine::GetDateComponents(this, (uint64_t)a2, (uint64_t)&v22, (uint64_t)&v21, (uint64_t)&v20, (int *)&v19 + 1, (unsigned int *)&v19, &v18, (uint64_t)v16);
  v4 = 0;
  if (v22 && v21 && v20)
  {
    siri::dialogengine::GetICUTimeStampForDate((uint64_t)v16, (uint64_t)v14);
    v4 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v13, "");
    siri::dialogengine::Context::GetLocale(this, v5, (uint64_t)v9);
    *(_OWORD *)v7 = 0u;
    v8 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    BYTE8(v8) = 0;
    siri::dialogengine::GetICUDayName(v14, (char **)v9, (uint64_t *)v7, __p);
    siri::dialogengine::VariableString::VariableString(v4, &v13, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v8) < 0)
      operator delete(v7[0]);
    if (v10 < 0)
      operator delete(v9[0]);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    if (v15 < 0)
      operator delete(v14[1]);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  return v4;
}

void sub_1BFA90B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v44;

  if (a30 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a24 < 0)
    operator delete(a19);
  if (a36 < 0)
    operator delete(a31);
  MEMORY[0x1C3B8D890](v43, 0x10B3C40D3060B95);
  if (a43 < 0)
    operator delete(a38);
  if (*(char *)(v44 - 73) < 0)
    operator delete(*(void **)(v44 - 96));
  _Unwind_Resume(a1);
}

siri::dialogengine::VariableObject *siri::dialogengine::DialogDateTime::asCalendar(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::VariableObject *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13[2];
  std::string __p;
  uint64_t v15[2];
  _QWORD v16[3];
  char v17;
  void *v18[2];
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  siri::dialogengine::GetDateComponents(this, (uint64_t)a2, (uint64_t)&v24, (uint64_t)&v23, (uint64_t)&v22, (int *)&v21 + 1, (unsigned int *)&v21, &v20, (uint64_t)v18);
  if (v24)
  {
    siri::dialogengine::GetICUTimeStampForDate((uint64_t)v18, (uint64_t)v16);
    v3 = (siri::dialogengine::VariableObject *)operator new();
    siri::dialogengine::VariableObject::VariableObject(v3);
    v4 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "secs");
    siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, (double)v16[0]);
    v15[0] = v4;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937CE0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    v15[1] = (uint64_t)v5;
    siri::dialogengine::VariableObject::AddProperty((uint64_t)v3, v15);
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v8 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "timeZone");
    siri::dialogengine::VariableString::VariableString(v8, &__p, (uint64_t)v18);
    v13[0] = v8;
    v9 = (std::__shared_weak_count *)operator new();
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937C00;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
    v13[1] = (uint64_t)v9;
    siri::dialogengine::VariableObject::AddProperty((uint64_t)v3, v13);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v17 < 0)
      operator delete((void *)v16[1]);
  }
  else
  {
    v3 = 0;
  }
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  return v3;
}

void sub_1BFA90E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

siri::dialogengine::VariableObject *siri::dialogengine::DialogDateTime::timeZone(siri::dialogengine::DialogDateTime *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::VariableObject *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13[2];
  std::string __p;
  uint64_t v15[2];
  uint64_t v16;
  void *v17;
  char v18;
  void *v19[2];
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  siri::dialogengine::GetDateComponents(this, (uint64_t)a2, (uint64_t)&v25, (uint64_t)&v24, (uint64_t)&v23, (int *)&v22 + 1, (unsigned int *)&v22, &v21, (uint64_t)v19);
  siri::dialogengine::GetICUTimeStampForDate((uint64_t)v19, (uint64_t)&v16);
  v3 = (siri::dialogengine::VariableObject *)operator new();
  siri::dialogengine::VariableObject::VariableObject(v3);
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "secs");
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, (double)v16);
  v15[0] = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937CE0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v15[1] = (uint64_t)v5;
  siri::dialogengine::VariableObject::AddProperty((uint64_t)v3, v15);
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "timeZone");
  siri::dialogengine::VariableString::VariableString(v8, &__p, (uint64_t)&v17);
  v13[0] = v8;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  v10 = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937C00;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  v13[1] = (uint64_t)v9;
  siri::dialogengine::VariableObject::AddProperty((uint64_t)v3, v13);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v18 < 0)
    operator delete(v17);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  return v3;
}

void sub_1BFA9117C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_SecondaryHeader_Emphasized_SecondaryHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SecondaryHeader.pb.cc", a4);
  SnippetUI::SecondaryHeader_Emphasized::SecondaryHeader_Emphasized((SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SecondaryHeader_Emphasized_default_instance_, v4);
  qword_1ED1D48F0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D48F8 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SecondaryHeader_Emphasized *SnippetUI::SecondaryHeader_Emphasized::SecondaryHeader_Emphasized(SnippetUI::SecondaryHeader_Emphasized *this)
{
  *(_QWORD *)this = &off_1E7931AE0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_SecondaryHeader_Emphasized_SecondaryHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SecondaryHeader_Emphasized_SecondaryHeader_2eproto);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFA91344(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SecondaryHeader_Emphasized::~SecondaryHeader_Emphasized(SnippetUI::SecondaryHeader_Emphasized *this)
{
  SnippetUI::SecondaryHeader_Emphasized::~SecondaryHeader_Emphasized(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7931AE0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SecondaryHeader_Emphasized *SnippetUI::SecondaryHeader_Emphasized::New(SnippetUI::SecondaryHeader_Emphasized *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Emphasized>(0);
}

SnippetUI::SecondaryHeader_Emphasized *SnippetUI::SecondaryHeader_Emphasized::New(SnippetUI::SecondaryHeader_Emphasized *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Emphasized>(a2);
}

void SnippetUI::SecondaryHeader_Emphasized::Clear(SnippetUI::SecondaryHeader_Emphasized *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArena *v5;
  char v6;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = *((_BYTE *)this + 8);
  v5 = (SnippetUI::SecondaryHeader_Emphasized *)((char *)this + 8);
  *((_QWORD *)v5 + 3) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::IsInitialized(SnippetUI::SecondaryHeader_Emphasized *this)
{
  return 1;
}

char *SnippetUI::SecondaryHeader_Emphasized::ByteSizeLong(SnippetUI::SecondaryHeader_Emphasized *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::ActionProperty *v8;
  char *v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SecondaryHeader_Emphasized *)((char *)this + 8), v5, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::GetCachedSize(SnippetUI::SecondaryHeader_Emphasized *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::SecondaryHeader_Emphasized::_InternalParse(SnippetUI::SecondaryHeader_Emphasized *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  unsigned int v10;
  char *v13;
  std::string *v14;
  SnippetUI::ActionProperty *v15;
  SnippetUI::TextProperty *v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v18;
    TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
    v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    v18 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.SecondaryHeader_Emphasized.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 4) = v15;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
      if (!v16)
      {
        v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v16;
        TagFallback = v18;
      }
      v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v16, TagFallback);
      goto LABEL_29;
    }
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      break;
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    v18 = (google::protobuf::internal *)v13;
    if (!v13)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::SecondaryHeader_Emphasized::InternalSerializeWithCachedSizesToArray(SnippetUI::SecondaryHeader_Emphasized *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::ActionProperty *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  google::protobuf::internal *v24;
  const char *v25;
  uint64_t v26;

  v5 = (char *)a2;
  if (this == (SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_)
    goto LABEL_25;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((_QWORD *)v24 + 1);
    if (!v25)
      goto LABEL_31;
    v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((_BYTE *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.SecondaryHeader_Emphasized.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 2), v5);
  }
LABEL_31:
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SecondaryHeader_Emphasized::CopyFrom(SnippetUI::SecondaryHeader_Emphasized *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SecondaryHeader_Emphasized::Clear(this);
    SnippetUI::SecondaryHeader_Emphasized::MergeFrom(this, a2);
  }
}

void SnippetUI::SecondaryHeader_Emphasized::MergeFrom(SnippetUI::SecondaryHeader_Emphasized *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SecondaryHeader_Emphasized *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SecondaryHeader.pb.cc", 658);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SecondaryHeader_Emphasized::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFA919D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::GetMetadata(SnippetUI::SecondaryHeader_Emphasized *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SecondaryHeader_2eproto);
  return qword_1EF582778;
}

void InitDefaultsscc_info_SecondaryHeader_Standard_SecondaryHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SecondaryHeader.pb.cc", a4);
  SnippetUI::SecondaryHeader_Standard::SecondaryHeader_Standard((SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SecondaryHeader_Standard_default_instance_, v4);
  qword_1ED1D5760 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5768 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SecondaryHeader_Standard *SnippetUI::SecondaryHeader_Standard::SecondaryHeader_Standard(SnippetUI::SecondaryHeader_Standard *this)
{
  *(_QWORD *)this = &off_1E7931A20;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_SecondaryHeader_Standard_SecondaryHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SecondaryHeader_Standard_SecondaryHeader_2eproto);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFA91AE8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SecondaryHeader_Standard::~SecondaryHeader_Standard(SnippetUI::SecondaryHeader_Standard *this)
{
  SnippetUI::SecondaryHeader_Standard::~SecondaryHeader_Standard(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7931A20;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SecondaryHeader_Standard *SnippetUI::SecondaryHeader_Standard::New(SnippetUI::SecondaryHeader_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Standard>(0);
}

SnippetUI::SecondaryHeader_Standard *SnippetUI::SecondaryHeader_Standard::New(SnippetUI::SecondaryHeader_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Standard>(a2);
}

void SnippetUI::SecondaryHeader_Standard::Clear(SnippetUI::SecondaryHeader_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArena *v5;
  char v6;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = *((_BYTE *)this + 8);
  v5 = (SnippetUI::SecondaryHeader_Standard *)((char *)this + 8);
  *((_QWORD *)v5 + 3) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
}

uint64_t SnippetUI::SecondaryHeader_Standard::IsInitialized(SnippetUI::SecondaryHeader_Standard *this)
{
  return 1;
}

char *SnippetUI::SecondaryHeader_Standard::ByteSizeLong(SnippetUI::SecondaryHeader_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::ActionProperty *v8;
  char *v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SecondaryHeader_Standard *)((char *)this + 8), v5, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SecondaryHeader_Standard::GetCachedSize(SnippetUI::SecondaryHeader_Standard *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::SecondaryHeader_Standard::_InternalParse(SnippetUI::SecondaryHeader_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  unsigned int v10;
  char *v13;
  std::string *v14;
  SnippetUI::ActionProperty *v15;
  SnippetUI::TextProperty *v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v18;
    TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
    v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    v18 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.SecondaryHeader_Standard.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 4) = v15;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
      if (!v16)
      {
        v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v16;
        TagFallback = v18;
      }
      v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v16, TagFallback);
      goto LABEL_29;
    }
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      break;
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    v18 = (google::protobuf::internal *)v13;
    if (!v13)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::SecondaryHeader_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::SecondaryHeader_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::ActionProperty *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  google::protobuf::internal *v24;
  const char *v25;
  uint64_t v26;

  v5 = (char *)a2;
  if (this == (SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_)
    goto LABEL_25;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((_QWORD *)v24 + 1);
    if (!v25)
      goto LABEL_31;
    v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((_BYTE *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.SecondaryHeader_Standard.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 2), v5);
  }
LABEL_31:
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SecondaryHeader_Standard::CopyFrom(SnippetUI::SecondaryHeader_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SecondaryHeader_Standard::Clear(this);
    SnippetUI::SecondaryHeader_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SecondaryHeader_Standard::MergeFrom(SnippetUI::SecondaryHeader_Standard *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SecondaryHeader_Standard *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SecondaryHeader.pb.cc", 360);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SecondaryHeader_Standard::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFA92174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SecondaryHeader_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::SecondaryHeader_Standard::GetMetadata(SnippetUI::SecondaryHeader_Standard *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SecondaryHeader_2eproto);
  return file_level_metadata_SecondaryHeader_2eproto;
}

void *SnippetUI::SecondaryHeader_Standard::default_instance(SnippetUI::SecondaryHeader_Standard *this)
{
  if (atomic_load(scc_info_SecondaryHeader_Standard_SecondaryHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SecondaryHeader_Standard_SecondaryHeader_2eproto);
  return &SnippetUI::_SecondaryHeader_Standard_default_instance_;
}

void SnippetUI::SecondaryHeader_Standard::MergeFrom(SnippetUI::SecondaryHeader_Standard *this, const SnippetUI::SecondaryHeader_Standard *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SecondaryHeader.pb.cc", 375);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SecondaryHeader_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1BFA92334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SecondaryHeader_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SecondaryHeader_Standard *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SecondaryHeader_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SecondaryHeader_Standard>);
    SnippetUI::SecondaryHeader_Standard::SecondaryHeader_Standard(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SecondaryHeader_Standard *)operator new();
    SnippetUI::SecondaryHeader_Standard::SecondaryHeader_Standard(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFA923D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SecondaryHeader_Standard>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::SecondaryHeader_Emphasized::default_instance(SnippetUI::SecondaryHeader_Emphasized *this)
{
  if (atomic_load(scc_info_SecondaryHeader_Emphasized_SecondaryHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SecondaryHeader_Emphasized_SecondaryHeader_2eproto);
  return &SnippetUI::_SecondaryHeader_Emphasized_default_instance_;
}

void SnippetUI::SecondaryHeader_Emphasized::MergeFrom(SnippetUI::SecondaryHeader_Emphasized *this, const SnippetUI::SecondaryHeader_Emphasized *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SecondaryHeader.pb.cc", 673);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SecondaryHeader_Emphasized *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1BFA92624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SecondaryHeader_Emphasized *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SecondaryHeader_Emphasized>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SecondaryHeader_Emphasized *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SecondaryHeader_Emphasized *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SecondaryHeader_Emphasized>);
    SnippetUI::SecondaryHeader_Emphasized::SecondaryHeader_Emphasized(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SecondaryHeader_Emphasized *)operator new();
    SnippetUI::SecondaryHeader_Emphasized::SecondaryHeader_Emphasized(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFA926C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SecondaryHeader_Emphasized>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::SecondaryHeader_Standard::InitAsDefaultInstance(SnippetUI::SecondaryHeader_Standard *this)
{
  qword_1ED1D5760 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5768 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SecondaryHeader_Standard::_Internal::text_1(SnippetUI::SecondaryHeader_Standard::_Internal *this, const SnippetUI::SecondaryHeader_Standard *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::SecondaryHeader_Standard::_Internal::action(SnippetUI::SecondaryHeader_Standard::_Internal *this, const SnippetUI::SecondaryHeader_Standard *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SecondaryHeader_Standard::clear_text_1(SnippetUI::SecondaryHeader_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::SecondaryHeader_Standard::clear_action(SnippetUI::SecondaryHeader_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

SnippetUI::SecondaryHeader_Standard *SnippetUI::SecondaryHeader_Standard::SecondaryHeader_Standard(SnippetUI::SecondaryHeader_Standard *this, const SnippetUI::SecondaryHeader_Standard *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;

  *(_QWORD *)this = &off_1E7931A20;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SecondaryHeader_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::SecondaryHeader_Standard *)&SnippetUI::_SecondaryHeader_Standard_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 4));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 4) = v9;
  return this;
}

void sub_1BFA92954(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SecondaryHeader_Standard::CopyFrom(SnippetUI::SecondaryHeader_Standard *this, const SnippetUI::SecondaryHeader_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::SecondaryHeader_Standard::Clear(this);
    SnippetUI::SecondaryHeader_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SecondaryHeader_Standard::InternalSwap(SnippetUI::SecondaryHeader_Standard *this, SnippetUI::SecondaryHeader_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::SecondaryHeader_Standard *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
}

void SnippetUI::SecondaryHeader_Emphasized::InitAsDefaultInstance(SnippetUI::SecondaryHeader_Emphasized *this)
{
  qword_1ED1D48F0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D48F8 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::_Internal::text_1(SnippetUI::SecondaryHeader_Emphasized::_Internal *this, const SnippetUI::SecondaryHeader_Emphasized *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::_Internal::action(SnippetUI::SecondaryHeader_Emphasized::_Internal *this, const SnippetUI::SecondaryHeader_Emphasized *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::clear_text_1(SnippetUI::SecondaryHeader_Emphasized *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::SecondaryHeader_Emphasized::clear_action(SnippetUI::SecondaryHeader_Emphasized *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

SnippetUI::SecondaryHeader_Emphasized *SnippetUI::SecondaryHeader_Emphasized::SecondaryHeader_Emphasized(SnippetUI::SecondaryHeader_Emphasized *this, const SnippetUI::SecondaryHeader_Emphasized *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::TextProperty *v8;
  SnippetUI::ActionProperty *v9;

  *(_QWORD *)this = &off_1E7931AE0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SecondaryHeader_Emphasized *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::SecondaryHeader_Emphasized *)&SnippetUI::_SecondaryHeader_Emphasized_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v8, *((const SnippetUI::TextProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 4));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 4) = v9;
  return this;
}

void sub_1BFA92CA4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SecondaryHeader_Emphasized::CopyFrom(SnippetUI::SecondaryHeader_Emphasized *this, const SnippetUI::SecondaryHeader_Emphasized *a2)
{
  if (a2 != this)
  {
    SnippetUI::SecondaryHeader_Emphasized::Clear(this);
    SnippetUI::SecondaryHeader_Emphasized::MergeFrom(this, a2);
  }
}

void SnippetUI::SecondaryHeader_Emphasized::InternalSwap(SnippetUI::SecondaryHeader_Emphasized *this, SnippetUI::SecondaryHeader_Emphasized *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::SecondaryHeader_Emphasized *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
}

void siri::dialogengine::Dialog::~Dialog(siri::dialogengine::Dialog *this)
{
  siri::dialogengine::Dialog::~Dialog(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7934AE0;
  *((_QWORD *)this + 8) = &unk_1E7934B38;
  if (*((char *)this + 599) < 0)
    operator delete(*((void **)this + 72));
  if (*((char *)this + 575) < 0)
    operator delete(*((void **)this + 69));
  siri::dialogengine::SpeakableString::~SpeakableString((void **)this + 47);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)this + 26);
  *(_QWORD *)this = off_1E793A6B0;
  *((_QWORD *)this + 8) = &unk_1E793A708;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

uint64_t siri::dialogengine::Dialog::Accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

uint64_t siri::dialogengine::Dialog::Validate(siri::dialogengine::Dialog *this, siri::dialogengine::Context *a2)
{
  const char *v4;
  char v5;
  std::string::size_type size;
  _BOOL4 v7;
  std::string::size_type v8;
  std::string::size_type v9;
  char v10;
  char v11;
  const char *v12;
  char v13;
  const char *v14;
  char v15;
  const char *v16;
  char v17;
  char v18;
  std::string::size_type v19;
  unint64_t v20;
  unsigned __int8 v21;
  std::string *v22;
  std::string *v23;
  BOOL v24;
  void *v26[2];
  char v27;
  std::string __p;
  void *v29;
  char v30;
  void *v31[2];
  unsigned __int8 v32;
  std::string v33;

  v5 = siri::dialogengine::Node::Validate(this, a2);
  if (!*((_BYTE *)this + 545) || !*((_BYTE *)this + 544))
    goto LABEL_39;
  if (*((_BYTE *)this + 547) && *((_BYTE *)this + 546))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Dialog has both attributes 'printOnly' and 'spokenOnly' set to true");
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, (uint64_t)this);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = 0;
  }
  if (*((char *)this + 255) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 29), *((_QWORD *)this + 30));
  else
    __p = *(std::string *)((char *)this + 232);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    v7 = 1;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_15;
  }
  else
  {
    if (*((char *)this + 423) < 0)
      std::string::__init_copy_ctor_external(&v33, *((const std::string::value_type **)this + 50), *((_QWORD *)this + 51));
    else
      v33 = *(std::string *)((char *)this + 400);
    v8 = v33.__r_.__value_.__l.__size_;
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    v7 = v8 != 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_15:
      if (!v7)
        goto LABEL_29;
LABEL_26:
      std::string::basic_string[abi:ne180100]<0>(&__p, "Dialog is marked 'printOnly' but includes spoken content");
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, (uint64_t)this);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v5 = 0;
      goto LABEL_29;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v7)
    goto LABEL_26;
LABEL_29:
  std::string::basic_string[abi:ne180100]<0>(&v33, "dialog");
  std::string::basic_string[abi:ne180100]<0>(v31, "printOnly");
  siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)&v33.__r_.__value_.__l.__data_, (uint64_t)v31, &__p);
  if ((char)v32 < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = __p.__r_.__value_.__l.__size_;
  if (v9)
  {
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, (uint64_t)this);
    v5 = 0;
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v10 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_39:
  siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::Dialog *)((char *)this + 208), v4, &__p);
  v11 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)&__p, a2, this);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::Dialog *)((char *)this + 208), v12, &__p);
  v13 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)&__p, a2, this);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::Dialog *)((char *)this + 376), v14, &__p);
  v15 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)&__p, a2, this);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::Dialog *)((char *)this + 376), v16, &__p);
  v17 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)&__p, a2, this);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v18 = v17 & v15 & v13 & v11 & v5;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v33, (const void ***)this + 9);
  v19 = v33.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v33.__r_.__value_.__l.__data_ != &v33.__r_.__value_.__r.__words[1])
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&__p, (__int128 *)(v19 + 32));
      std::string::basic_string[abi:ne180100]<0>(v26, "dialog");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)v26, (uint64_t)&__p, v31);
      if (v27 < 0)
        operator delete(v26[0]);
      v20 = v32;
      v21 = v32;
      if ((v32 & 0x80u) != 0)
        v20 = (unint64_t)v31[1];
      if (v20)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)v31, (uint64_t)this);
        v18 = 0;
        v21 = v32;
      }
      if ((v21 & 0x80) != 0)
        operator delete(v31[0]);
      if (v30 < 0)
        operator delete(v29);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v22 = *(std::string **)(v19 + 8);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = *(std::string **)(v19 + 16);
          v24 = v23->__r_.__value_.__r.__words[0] == v19;
          v19 = (std::string::size_type)v23;
        }
        while (!v24);
      }
      v19 = (std::string::size_type)v23;
    }
    while (v23 != (std::string *)&v33.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v33.__r_.__value_.__l.__size_);
  return v18 & 1;
}

void sub_1BFA9328C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Dialog::Execute(siri::dialogengine::Dialog *this@<X0>, siri::dialogengine::Context *a2@<X1>, char **a3@<X8>)
{
  BOOL v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  siri::dialogengine::Context *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  char *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  void *v45[2];
  void *v46[2];
  __int128 v47;
  void *v48[2];
  void *v49[2];
  __int128 v50;
  void *v51[2];
  void *v52[2];
  __int128 v53;
  void *__p[2];
  uint64_t v55;
  void *v56[2];
  void *v57[2];
  __int128 v58;
  void *v59[2];
  void *v60[2];
  __int128 v61;
  void *v62[2];
  void *v63[2];
  __int128 v64;
  void *v65[2];
  uint64_t v66;
  std::string *v67;
  std::__shared_weak_count *v68;
  std::string *v69;
  std::__shared_weak_count *v70;
  std::string __str;
  char *v72;
  _QWORD *v73;

  siri::dialogengine::Context::ResetExecutionState(a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  siri::dialogengine::SpeakableString::GetExpanded((siri::dialogengine::Dialog *)((char *)this + 208), a2, &v69);
  siri::dialogengine::SpeakableString::GetExpanded((siri::dialogengine::Dialog *)((char *)this + 376), a2, &v67);
  if (*((char *)this + 255) < 0)
  {
    if (*((_QWORD *)this + 30))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 255))
  {
LABEL_3:
    v6 = 0;
    goto LABEL_9;
  }
  if (*((char *)this + 231) < 0)
    v7 = *((_QWORD *)this + 27);
  else
    v7 = *((unsigned __int8 *)this + 231);
  v6 = v7 == 0;
LABEL_9:
  if (!v6 && v69)
  {
    v8 = 1;
    goto LABEL_20;
  }
  if ((*((_BYTE *)this + 255) & 0x80) != 0)
  {
    if (*((_QWORD *)this + 30))
      goto LABEL_14;
  }
  else if (*((_BYTE *)this + 255))
  {
LABEL_14:
    v8 = 0;
    goto LABEL_20;
  }
  if (*((char *)this + 231) < 0)
    v9 = *((_QWORD *)this + 27);
  else
    v9 = *((unsigned __int8 *)this + 231);
  v8 = v9 == 0;
LABEL_20:
  if (*((char *)this + 423) < 0)
  {
    if (*((_QWORD *)this + 51))
      goto LABEL_22;
  }
  else if (*((_BYTE *)this + 423))
  {
LABEL_22:
    v10 = 0;
    goto LABEL_28;
  }
  if (*((char *)this + 399) < 0)
    v11 = *((_QWORD *)this + 48);
  else
    v11 = *((unsigned __int8 *)this + 399);
  v10 = v11 == 0;
LABEL_28:
  v12 = (siri::dialogengine::Context *)v67;
  if (v10 || !v67)
  {
    if ((*((_BYTE *)this + 423) & 0x80) != 0)
    {
      if (*((_QWORD *)this + 51))
        goto LABEL_103;
    }
    else if (*((_BYTE *)this + 423))
    {
      goto LABEL_103;
    }
    if (*((char *)this + 399) < 0)
      v14 = *((_QWORD *)this + 48);
    else
      v14 = *((unsigned __int8 *)this + 399);
    v13 = v14 == 0;
  }
  else
  {
    v13 = 1;
  }
  if (!v8 || !v13)
    goto LABEL_103;
  if (!v69)
  {
    v66 = 0;
    v64 = 0u;
    *(_OWORD *)v65 = 0u;
    *(_OWORD *)v62 = 0u;
    *(_OWORD *)v63 = 0u;
    *(_OWORD *)v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    *(_OWORD *)v59 = 0u;
    *(_OWORD *)v56 = 0u;
    *(_OWORD *)v57 = 0u;
    if (v67)
      goto LABEL_42;
LABEL_44:
    v55 = 0;
    v53 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v51 = 0u;
    *(_OWORD *)v52 = 0u;
    *(_OWORD *)v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    *(_OWORD *)v48 = 0u;
    *(_OWORD *)v45 = 0u;
    *(_OWORD *)v46 = 0u;
    goto LABEL_45;
  }
  siri::dialogengine::Dialog::ProcessString(a2, (siri::dialogengine::Context *)v69, (uint64_t)v56);
  v12 = (siri::dialogengine::Context *)v67;
  if (!v67)
    goto LABEL_44;
LABEL_42:
  siri::dialogengine::Dialog::ProcessString(a2, v12, (uint64_t)v45);
LABEL_45:
  v15 = operator new();
  siri::dialogengine::Node::Node((siri::dialogengine::Node *)v15, this);
  *(_QWORD *)v15 = &off_1E7934AE0;
  *(_QWORD *)(v15 + 64) = &unk_1E7934B38;
  siri::dialogengine::SpeakableString::SpeakableString((std::string *)(v15 + 208), (siri::dialogengine::Dialog *)((char *)this + 208));
  siri::dialogengine::SpeakableString::SpeakableString((std::string *)(v15 + 376), (siri::dialogengine::Dialog *)((char *)this + 376));
  *(_DWORD *)(v15 + 544) = *((_DWORD *)this + 136);
  if (*((char *)this + 575) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v15 + 552), *((const std::string::value_type **)this + 69), *((_QWORD *)this + 70));
  }
  else
  {
    *(_OWORD *)(v15 + 552) = *(_OWORD *)((char *)this + 552);
    *(_QWORD *)(v15 + 568) = *((_QWORD *)this + 71);
  }
  v16 = (std::string *)(v15 + 576);
  if (*((char *)this + 599) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)this + 72), *((_QWORD *)this + 73));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *((_OWORD *)this + 36);
    *(_QWORD *)(v15 + 592) = *((_QWORD *)this + 74);
  }
  *(_QWORD *)&v44 = v15;
  v17 = (_QWORD *)operator new();
  *v17 = &off_1E7931BD0;
  v17[1] = 0;
  v17[2] = 0;
  v17[3] = v15;
  *((_QWORD *)&v44 + 1) = v17;
  siri::dialogengine::Node::GetGlobalId(this, a2, &__str);
  std::string::operator=((std::string *)(v15 + 96), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  siri::dialogengine::Dialog::SetFull((siri::dialogengine::Dialog *)v15, (const std::string *)v56);
  siri::dialogengine::Dialog::SetSupporting((siri::dialogengine::Dialog *)v15, (const std::string *)v45);
  if (*((_QWORD *)&v44 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (unint64_t)a3[2];
  v21 = a3[1];
  if ((unint64_t)v21 >= v20)
  {
    v23 = (v21 - *a3) >> 4;
    if ((unint64_t)(v23 + 1) >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v24 = v20 - (_QWORD)*a3;
    v25 = v24 >> 3;
    if (v24 >> 3 <= (unint64_t)(v23 + 1))
      v25 = v23 + 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    v73 = a3 + 2;
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v26);
    v29 = &v27[16 * v23];
    *(_OWORD *)v29 = v44;
    v31 = *a3;
    v30 = a3[1];
    if (v30 == *a3)
    {
      v34 = vdupq_n_s64((unint64_t)v30);
      v32 = &v27[16 * v23];
    }
    else
    {
      v32 = &v27[16 * v23];
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v30 -= 16;
        *((_OWORD *)v32 - 1) = v33;
        v32 -= 16;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
      }
      while (v30 != v31);
      v34 = *(int64x2_t *)a3;
    }
    v22 = v29 + 16;
    *a3 = v32;
    a3[1] = v29 + 16;
    *(int64x2_t *)&__str.__r_.__value_.__r.__words[1] = v34;
    v35 = a3[2];
    a3[2] = &v27[16 * v28];
    v72 = v35;
    __str.__r_.__value_.__r.__words[0] = v34.i64[0];
    std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    *(_OWORD *)v21 = v44;
    v22 = v21 + 16;
  }
  a3[1] = v22;
  if (*((_QWORD *)&v44 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 16))(*((_QWORD *)&v44 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v44 + 1));
    }
  }
  if (SHIBYTE(v55) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v53) < 0)
    operator delete(v52[1]);
  if (SHIBYTE(v52[0]) < 0)
    operator delete(v51[0]);
  if (SHIBYTE(v50) < 0)
    operator delete(v49[1]);
  if (SHIBYTE(v49[0]) < 0)
    operator delete(v48[0]);
  if (SHIBYTE(v47) < 0)
    operator delete(v46[1]);
  if (SHIBYTE(v46[0]) < 0)
    operator delete(v45[0]);
  if (SHIBYTE(v66) < 0)
    operator delete(v65[0]);
  if (SHIBYTE(v64) < 0)
    operator delete(v63[1]);
  if (SHIBYTE(v63[0]) < 0)
    operator delete(v62[0]);
  if (SHIBYTE(v61) < 0)
    operator delete(v60[1]);
  if (SHIBYTE(v60[0]) < 0)
    operator delete(v59[0]);
  if (SHIBYTE(v58) < 0)
    operator delete(v57[1]);
  if (SHIBYTE(v57[0]) < 0)
    operator delete(v56[0]);
LABEL_103:
  siri::dialogengine::Context::ResetExecutionState(a2);
  v38 = v68;
  if (v68)
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v70;
  if (v70)
  {
    v42 = (unint64_t *)&v70->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_1BFA93910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  void **v37;
  void **v38;
  char *v39;
  void **v40;
  uint64_t v41;

  if (v39[575] < 0)
    operator delete(*v38);
  siri::dialogengine::SpeakableString::~SpeakableString(v37);
  siri::dialogengine::SpeakableString::~SpeakableString(v40);
  siri::dialogengine::Node::~Node((siri::dialogengine::Node *)v39);
  MEMORY[0x1C3B8D890](v39, 0x10B3C401AEFB8B5);
  siri::dialogengine::SpeakableString::~SpeakableString(&a15);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a37);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v41 - 136);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v41 - 120);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  _Unwind_Resume(a1);
}

void sub_1BFA93A18()
{
  JUMPOUT(0x1BFA939FCLL);
}

void sub_1BFA93A20()
{
  JUMPOUT(0x1BFA93A04);
}

void `non-virtual thunk to'siri::dialogengine::Dialog::~Dialog(siri::dialogengine::Dialog *this)
{
  siri::dialogengine::Dialog::~Dialog((siri::dialogengine::Dialog *)((char *)this - 64));
}

{
  siri::dialogengine::Dialog::~Dialog((siri::dialogengine::Dialog *)((char *)this - 64));
  JUMPOUT(0x1C3B8D890);
}

uint64_t `non-virtual thunk to'siri::dialogengine::Dialog::Validate(siri::dialogengine::Dialog *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::Dialog::Validate((siri::dialogengine::Dialog *)((char *)this - 64), a2);
}

void siri::dialogengine::Dialog::ProcessString(siri::dialogengine::Dialog *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  siri::dialogengine::File *v20;
  BOOL v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string *p_p;
  std::string::size_type v38;
  int v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *p_str;
  std::string::size_type size;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  std::string __p;
  std::string __str;
  int v57;
  void *v58[2];
  char v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  char v66;

  siri::dialogengine::SpeakableString::SpeakableString((std::string *)a3, a2);
  v6 = (_OWORD *)(a3 + 24);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v6;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 40);
  }
  siri::dialogengine::RemoveUnicodeControlChars((uint64_t)&__p, &__str);
  std::string::operator=((std::string *)(a3 + 24), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = *(unsigned __int8 *)(a3 + 71);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 56);
  if (v7)
    goto LABEL_14;
  v8 = *(unsigned __int8 *)(a3 + 95);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 80);
  if (v8)
  {
LABEL_14:
    siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)a3, &__p);
    siri::dialogengine::RemoveUnicodeControlChars((uint64_t)&__p, &__str);
    std::string::operator=((std::string *)(a3 + 72), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (siri::dialogengine::SpeakableString::SpeakEqualsPrint((siri::dialogengine::SpeakableString *)a3))
  {
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    siri::dialogengine::StripUnnecessaryPunctuation((uint64_t)&__str, (uint64_t)&__p);
    std::string::operator=((std::string *)a3, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __str = *(std::string *)a3;
    std::string::operator=((std::string *)(a3 + 24), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v10 = *(unsigned __int8 *)(a3 + 71);
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a3 + 56);
    if (v10)
      goto LABEL_46;
    v11 = *(unsigned __int8 *)(a3 + 95);
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(a3 + 80);
    if (v11)
    {
LABEL_46:
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)a3, &__p);
      siri::dialogengine::StripUnnecessaryPunctuation((uint64_t)&__str, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::string::operator=((std::string *)(a3 + 48), &__str);
      std::string::operator=((std::string *)(a3 + 72), &__str);
      goto LABEL_66;
    }
LABEL_67:
    if (this)
      goto LABEL_68;
LABEL_77:
    std::string::basic_string[abi:ne180100]<0>(v58, "");
    LODWORD(v14) = 0;
    goto LABEL_90;
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  siri::dialogengine::StripUnnecessaryPunctuation((uint64_t)&__str, (uint64_t)&__p);
  std::string::operator=((std::string *)a3, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v6;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 40);
  }
  siri::dialogengine::StripUnnecessaryPunctuation((uint64_t)&__str, (uint64_t)&__p);
  std::string::operator=((std::string *)(a3 + 24), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = *(unsigned __int8 *)(a3 + 71);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a3 + 56);
  if (!v12)
  {
    v13 = *(unsigned __int8 *)(a3 + 95);
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(a3 + 80);
    if (!v13)
      goto LABEL_67;
  }
  siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)a3, &__p);
  siri::dialogengine::StripUnnecessaryPunctuation((uint64_t)&__str, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)a3, &v65);
  siri::dialogengine::StripUnnecessaryPunctuation((uint64_t)&__p, (uint64_t)&v65);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  std::string::operator=((std::string *)(a3 + 48), &__str);
  std::string::operator=((std::string *)(a3 + 72), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_66:
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_67;
  operator delete(__str.__r_.__value_.__l.__data_);
  if (!this)
    goto LABEL_77;
LABEL_68:
  v14 = *((_QWORD *)this + 63);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (v19)
    {
      if (!v14)
        goto LABEL_89;
      goto LABEL_81;
    }
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v14)
    {
LABEL_81:
      v20 = (siri::dialogengine::File *)*((_QWORD *)this + 63);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
      v21 = v15 == 0;
      if (v15)
      {
        v22 = (unint64_t *)&v15->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      goto LABEL_84;
    }
  }
  else if (v14)
  {
    v20 = (siri::dialogengine::File *)*((_QWORD *)this + 63);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = (unint64_t)v20;
    v21 = 1;
LABEL_84:
    LODWORD(v14) = siri::dialogengine::File::GetWhitespaceMode(v20);
    if (!v21)
    {
      v24 = (unint64_t *)&v15->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
LABEL_89:
  siri::dialogengine::Context::GetLocale(this, v9, (uint64_t)v58);
LABEL_90:
  memset(&__str, 0, sizeof(__str));
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *v6;
    v65.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 40);
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v64 = *(std::string *)a3;
  siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)a3, &v63);
  siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)a3, &v62);
  v26 = *(unsigned __int8 *)(a3 + 71);
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(a3 + 56);
  if (v26)
  {
    v27 = 0;
  }
  else
  {
    v28 = *(unsigned __int8 *)(a3 + 95);
    if ((v28 & 0x80u) != 0)
      v28 = *(_QWORD *)(a3 + 80);
    v27 = v28 == 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "[[CAPITALIZE_SENTENCE]]");
  v29 = siri::dialogengine::StringStartsWith(&v64, (unsigned __int8 *)&v61);
  v30 = v29;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v61.__r_.__value_.__l.__data_);
    if (!v30)
      goto LABEL_113;
  }
  else if (!v29)
  {
    goto LABEL_113;
  }
  MEMORY[0x1C3B8D53C](&__str, "[[CAPITALIZE_SENTENCE]]");
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v60 = *(std::string *)a3;
  std::string::basic_string(&v61, &v60, 0x17uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v66);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  v64 = v61;
  *((_BYTE *)&v61.__r_.__value_.__s + 23) = 0;
  v61.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v60.__r_.__value_.__l.__data_);
    if (v27)
      goto LABEL_123;
    goto LABEL_114;
  }
LABEL_113:
  if (v27)
    goto LABEL_123;
LABEL_114:
  std::string::basic_string[abi:ne180100]<0>(&v61, "[[CAPITALIZE_SENTENCE]]");
  v31 = siri::dialogengine::StringStartsWith(&v62, (unsigned __int8 *)&v61);
  v32 = v31;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v61.__r_.__value_.__l.__data_);
    if (!v32)
      goto LABEL_123;
  }
  else if (!v31)
  {
    goto LABEL_123;
  }
  MEMORY[0x1C3B8D53C](&__p, "[[CAPITALIZE_SENTENCE]]");
  std::string::basic_string(&v61, &v62, 0x17uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v60);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  v62 = v61;
LABEL_123:
  if ((_DWORD)v14 == 3)
    goto LABEL_124;
  siri::dialogengine::ReplaceUnicodeCGJAndWhitespace((uint64_t)&v65, &v61);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  v65 = v61;
  if (!v27)
  {
    siri::dialogengine::ReplaceUnicodeCGJAndWhitespace((uint64_t)&v63, &v61);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    v63 = v61;
  }
  if ((_DWORD)v14)
  {
    if ((_DWORD)v14 == 1)
    {
      siri::dialogengine::StripWhitespaceFromEachLine((uint64_t)&v65);
      std::string::operator=((std::string *)(a3 + 24), &v61);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      siri::dialogengine::StripWhitespaceFromEachLine((uint64_t)&v64);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      v46 = std::string::insert(&v60, 0, (const std::string::value_type *)p_str, size);
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      std::string::operator=((std::string *)a3, &v61);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (!v27)
      {
        siri::dialogengine::StripWhitespaceFromEachLine((uint64_t)&v63);
        std::string::operator=((std::string *)(a3 + 72), &v61);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        siri::dialogengine::StripWhitespaceFromEachLine((uint64_t)&v62);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
        goto LABEL_212;
      }
    }
    else if ((_DWORD)v14 == 2)
    {
      siri::dialogengine::StringTrim(" \t\n\r", &v65, &v61);
      std::string::operator=((std::string *)(a3 + 24), &v61);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      siri::dialogengine::StringTrim(" \t\n\r", &v64, &v60);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &__str;
      else
        v33 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v34 = __str.__r_.__value_.__l.__size_;
      v35 = std::string::insert(&v60, 0, (const std::string::value_type *)v33, v34);
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::string::operator=((std::string *)a3, &v61);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (!v27)
      {
        siri::dialogengine::StringTrim(" \t\n\r", &v63, &v61);
        std::string::operator=((std::string *)(a3 + 72), &v61);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        siri::dialogengine::StringTrim(" \t\n\r", &v62, &v60);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v38 = __p.__r_.__value_.__l.__size_;
LABEL_212:
        v48 = std::string::insert(&v60, 0, (const std::string::value_type *)p_p, v38);
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::string::operator=((std::string *)(a3 + 48), &v61);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    siri::dialogengine::StripWhitespace((uint64_t)&v65, &v61);
    std::string::operator=((std::string *)(a3 + 24), &v61);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    siri::dialogengine::StripWhitespace((uint64_t)&v64, &v60);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &__str;
    else
      v40 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v41 = __str.__r_.__value_.__l.__size_;
    v42 = std::string::insert(&v60, 0, (const std::string::value_type *)v40, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::string::operator=((std::string *)a3, &v61);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (!v27)
    {
      siri::dialogengine::StripWhitespace((uint64_t)&v63, &v61);
      std::string::operator=((std::string *)(a3 + 72), &v61);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      siri::dialogengine::StripWhitespace((uint64_t)&v62, &v60);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v38 = __p.__r_.__value_.__l.__size_;
      goto LABEL_212;
    }
  }
LABEL_124:
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!this)
      goto LABEL_216;
  }
  else if (!this)
  {
    goto LABEL_216;
  }
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__str, (siri::dialogengine::Dialog *)((char *)this + 8));
  v39 = v57;
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&__str.__r_.__value_.__l.__data_);
  if (!v39)
    siri::dialogengine::VoiceServices::ApplySubstitutions(this, (siri::dialogengine::Context *)a3, (uint64_t)&__str);
LABEL_216:
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  siri::dialogengine::HandleCapitalizeSentence((uint64_t)&__p, &__str);
  std::string::operator=((std::string *)a3, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v50 = *(unsigned __int8 *)(a3 + 71);
  if ((v50 & 0x80u) != 0)
    v50 = *(_QWORD *)(a3 + 56);
  if (v50)
    goto LABEL_229;
  v51 = *(unsigned __int8 *)(a3 + 95);
  if ((v51 & 0x80u) != 0)
    v51 = *(_QWORD *)(a3 + 80);
  if (v51)
  {
LABEL_229:
    siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)a3, &__p);
    siri::dialogengine::HandleCapitalizeSentence((uint64_t)&__p, &__str);
    std::string::operator=((std::string *)(a3 + 48), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (_os_feature_enabled_impl())
  {
    if (*(char *)(a3 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v6;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 40);
    }
    siri::dialogengine::AddSonicResponse(this, (uint64_t)&__p, (uint64_t)&__str);
    std::string::operator=((std::string *)(a3 + 24), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v53 = *(unsigned __int8 *)(a3 + 71);
    if ((v53 & 0x80u) != 0)
      v53 = *(_QWORD *)(a3 + 56);
    if (v53)
      goto LABEL_248;
    v54 = *(unsigned __int8 *)(a3 + 95);
    if ((v54 & 0x80u) != 0)
      v54 = *(_QWORD *)(a3 + 80);
    if (v54)
    {
LABEL_248:
      siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)a3, &__p);
      siri::dialogengine::AddSonicResponse(this, (uint64_t)&__p, (uint64_t)&__str);
      std::string::operator=((std::string *)(a3 + 72), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Feature is not enabled in this build. Use ffctl to enable it.", v52);
  }
  if (v59 < 0)
    operator delete(v58[0]);
}

void sub_1BFA94E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void **v39;
  uint64_t v40;

  if (*(char *)(v40 - 201) < 0)
    operator delete(*(void **)(v40 - 224));
  if (*(char *)(v40 - 233) < 0)
    operator delete(*(void **)(v40 - 256));
  if (*(char *)(v40 - 169) < 0)
    operator delete(*(void **)(v40 - 192));
  if (*(char *)(v40 - 137) < 0)
    operator delete(*(void **)(v40 - 160));
  if (*(char *)(v40 - 105) < 0)
    operator delete(*(void **)(v40 - 128));
  if (*(char *)(v40 - 73) < 0)
    operator delete(*(void **)(v40 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  siri::dialogengine::SpeakableString::~SpeakableString(v39);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::Dialog::SetFull(siri::dialogengine::Dialog *this, const std::string *a2)
{
  std::string::operator=((std::string *)((char *)this + 208), a2);
  std::string::operator=((std::string *)((char *)this + 232), a2 + 1);
  std::string::operator=((std::string *)((char *)this + 256), a2 + 2);
  std::string::operator=((std::string *)((char *)this + 280), a2 + 3);
  std::string::operator=((std::string *)((char *)this + 304), a2 + 4);
  std::string::operator=((std::string *)((char *)this + 328), a2 + 5);
  return std::string::operator=((std::string *)((char *)this + 352), a2 + 6);
}

std::string *siri::dialogengine::Dialog::SetSupporting(siri::dialogengine::Dialog *this, const std::string *a2)
{
  std::string::operator=((std::string *)((char *)this + 376), a2);
  std::string::operator=((std::string *)((char *)this + 400), a2 + 1);
  std::string::operator=((std::string *)((char *)this + 424), a2 + 2);
  std::string::operator=((std::string *)((char *)this + 448), a2 + 3);
  std::string::operator=((std::string *)((char *)this + 472), a2 + 4);
  std::string::operator=((std::string *)((char *)this + 496), a2 + 5);
  return std::string::operator=((std::string *)((char *)this + 520), a2 + 6);
}

void std::__shared_ptr_pointer<siri::dialogengine::Dialog *,std::shared_ptr<siri::dialogengine::Dialog>::__shared_ptr_default_delete<siri::dialogengine::Dialog,siri::dialogengine::Dialog>,std::allocator<siri::dialogengine::Dialog>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Dialog *,std::shared_ptr<siri::dialogengine::Dialog>::__shared_ptr_default_delete<siri::dialogengine::Dialog,siri::dialogengine::Dialog>,std::allocator<siri::dialogengine::Dialog>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Dialog *,std::shared_ptr<siri::dialogengine::Dialog>::__shared_ptr_default_delete<siri::dialogengine::Dialog,siri::dialogengine::Dialog>,std::allocator<siri::dialogengine::Dialog>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

double siri::dialogengine::StripUnnecessaryPunctuation(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  unint64_t v5;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *v6;
  uint64_t v7;
  std::__wrap_iter<const char *> v8;
  std::__wrap_iter<const char *> v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  std::__wrap_iter<const char *> v13;
  std::__wrap_iter<const char *> v14;
  double result;
  _QWORD *v16;
  _QWORD *v17;
  std::string v18;
  char v19;
  std::string *v20;

  {
    v16 = (_QWORD *)operator new();
    *v16 = 0;
    siri::dialogengine::GetPunctuationRegex(void)::flag = (uint64_t)v16;
  }
  v5 = atomic_load((unint64_t *)siri::dialogengine::GetPunctuationRegex(void)::flag);
  if (v5 != -1)
  {
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    v20 = &v18;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetPunctuationRegex(void)::flag, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetPunctuationRegex(void)::$_0 &&>>);
  }
  v6 = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetPunctuationRegex(void)::sRegex;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8.__i_ = (std::__wrap_iter<const char *>::iterator_type)a2;
  else
    v8.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  v9.__i_ = &v8.__i_[v7];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>((std::string *)a1, v8, v9, v6, "$1");
  if ((v10 & 1) == 0
  {
    v17 = (_QWORD *)operator new();
    *v17 = 0;
    siri::dialogengine::GetDoublePunctuationRegex(void)::flag = (uint64_t)v17;
  }
  v11 = atomic_load((unint64_t *)siri::dialogengine::GetDoublePunctuationRegex(void)::flag);
  if (v11 != -1)
  {
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
    v20 = &v18;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetDoublePunctuationRegex(void)::flag, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDoublePunctuationRegex(void)::$_0 &&>>);
  }
  memset(&v18, 0, sizeof(v18));
  v12 = *(unsigned __int8 *)(a1 + 23);
  if ((v12 & 0x80u) == 0)
    v13.__i_ = (std::__wrap_iter<const char *>::iterator_type)a1;
  else
    v13.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a1;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a1 + 8);
  v14.__i_ = &v13.__i_[v12];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v18, v13, v14, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetDoublePunctuationRegex(void)::sRegex, "$1$2$3");
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  result = *(double *)&v18.__r_.__value_.__l.__data_;
  *(std::string *)a1 = v18;
  return result;
}

void sub_1BFA955E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetPunctuationRegex(void)::$_0 &&>>()
{
  std::regex_traits<char> *v0;
  std::regex_traits<char> *result;

  v0 = (std::regex_traits<char> *)operator new();
  result = std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v0, "[,]+[\\s]*([.,!?])");
  siri::dialogengine::GetPunctuationRegex(void)::sRegex = (uint64_t)v0;
  return result;
}

void sub_1BFA9568C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x1060C4040BE2400);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDoublePunctuationRegex(void)::$_0 &&>>()
{
  std::regex_traits<char> *v0;
  std::regex_traits<char> *result;

  v0 = (std::regex_traits<char> *)operator new();
  result = std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v0, "([^!?.,]|^)([!?.,])[.](\\s|$)");
  siri::dialogengine::GetDoublePunctuationRegex(void)::sRegex = (uint64_t)v0;
  return result;
}

void sub_1BFA956F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x1060C4040BE2400);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::Dialog::GetFull@<X0>(siri::dialogengine::Dialog *this@<X0>, std::string *a2@<X8>)
{
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::Dialog *)((char *)this + 208));
}

std::string *siri::dialogengine::Dialog::GetSupporting@<X0>(siri::dialogengine::Dialog *this@<X0>, std::string *a2@<X8>)
{
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::Dialog *)((char *)this + 376));
}

BOOL siri::dialogengine::Dialog::GetPrintOnly(siri::dialogengine::Dialog *this)
{
  return *((_BYTE *)this + 545) && *((_BYTE *)this + 544) != 0;
}

uint64_t siri::dialogengine::Dialog::SetPrintOnly(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 544) = a2;
  return result;
}

uint64_t siri::dialogengine::Dialog::IsPrintOnlyDefined(siri::dialogengine::Dialog *this)
{
  return *((unsigned __int8 *)this + 545);
}

BOOL siri::dialogengine::Dialog::GetSpokenOnly(siri::dialogengine::Dialog *this)
{
  return *((_BYTE *)this + 547) && *((_BYTE *)this + 546) != 0;
}

uint64_t siri::dialogengine::Dialog::SetSpokenOnly(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 546) = a2;
  return result;
}

uint64_t siri::dialogengine::Dialog::IsSpokenOnlyDefined(siri::dialogengine::Dialog *this)
{
  return *((unsigned __int8 *)this + 547);
}

void siri::dialogengine::Dialog::GetType(siri::dialogengine::Dialog *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 575) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 69), *((_QWORD *)this + 70));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 552);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 71);
  }
}

std::string *siri::dialogengine::Dialog::SetType(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 23, a2);
}

void siri::dialogengine::Dialog::GetKeywords(siri::dialogengine::Dialog *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 599) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 72), *((_QWORD *)this + 73));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 36);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 74);
  }
}

std::string *siri::dialogengine::Dialog::SetKeywords(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 24, a2);
}

void siri::dialogengine::Dialog::GetExpandedFull(siri::dialogengine::Dialog *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  siri::dialogengine::Context *v8;
  std::__shared_weak_count *v9;

  siri::dialogengine::SpeakableString::GetExpanded((siri::dialogengine::Dialog *)((char *)this + 208), a2, (std::string **)&v8);
  if (v8)
  {
    siri::dialogengine::Dialog::ProcessString(a2, v8, a3);
  }
  else
  {
    *(_QWORD *)(a3 + 160) = 0;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BFA958A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Dialog::GetExpandedSupporting(siri::dialogengine::Dialog *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  siri::dialogengine::Context *v8;
  std::__shared_weak_count *v9;

  siri::dialogengine::SpeakableString::GetExpanded((siri::dialogengine::Dialog *)((char *)this + 376), a2, (std::string **)&v8);
  if (v8)
  {
    siri::dialogengine::Dialog::ProcessString(a2, v8, a3);
  }
  else
  {
    *(_QWORD *)(a3 + 160) = 0;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BFA95958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Dialog::HasRequiredVariablesOrPhrases(siri::dialogengine::Dialog *this, siri::dialogengine::Context *a2)
{
  siri::dialogengine::SpeakableString *v3;
  uint64_t HasRequiredVariablesOrPhrases;
  const char *v5;
  BOOL v6;
  siri::dialogengine::SpeakableString *v7;
  const char *v8;
  void **v10[3];
  void **v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  void ***v14;

  v3 = (siri::dialogengine::Dialog *)((char *)this + 208);
  siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::Dialog *)((char *)this + 208), (const char *)a2, v13);
  if ((siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v13) & 1) != 0)
  {
    HasRequiredVariablesOrPhrases = 1;
    goto LABEL_11;
  }
  v6 = siri::dialogengine::SpeakableString::SpeakEqualsPrint(v3);
  if (!v6)
  {
    siri::dialogengine::SpeakableString::GetPrintChunks(v3, v5, v12);
    if ((siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v12) & 1) != 0)
    {
      HasRequiredVariablesOrPhrases = 1;
LABEL_10:
      v11[0] = (void **)v12;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v11);
      goto LABEL_11;
    }
  }
  v7 = (siri::dialogengine::Dialog *)((char *)this + 376);
  siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::Dialog *)((char *)this + 376), v5, v11);
  HasRequiredVariablesOrPhrases = siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v11);
  if ((HasRequiredVariablesOrPhrases & 1) == 0 && !siri::dialogengine::SpeakableString::SpeakEqualsPrint(v7))
  {
    siri::dialogengine::SpeakableString::GetPrintChunks(v7, v8, v10);
    HasRequiredVariablesOrPhrases = siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v10);
    v14 = v10;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  }
  v10[0] = (void **)v11;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v10);
  if (!v6)
    goto LABEL_10;
LABEL_11:
  v11[0] = (void **)v13;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v11);
  return HasRequiredVariablesOrPhrases;
}

void sub_1BFA95A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  char v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v18 - 40) = v17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 40));
  a10 = &a13;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if ((v16 & 1) == 0)
  {
    a13 = (void **)&a16;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a13);
  }
  a13 = (void **)(v18 - 64);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::Dialog::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;

  if (!siri::dialogengine::Node::operator==(a1, a2)
    || !siri::dialogengine::SpeakableString::operator==((unsigned __int8 *)(a1 + 208), (unsigned __int8 *)(a2 + 208))|| !siri::dialogengine::SpeakableString::operator==((unsigned __int8 *)(a1 + 376), (unsigned __int8 *)(a2 + 376)))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 545) && *(_BYTE *)(a2 + 545))
  {
    if (*(unsigned __int8 *)(a1 + 544) != *(unsigned __int8 *)(a2 + 544))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 545) != 0) != (*(_BYTE *)(a2 + 545) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 547) && *(_BYTE *)(a2 + 547))
  {
    if (*(unsigned __int8 *)(a1 + 546) != *(unsigned __int8 *)(a2 + 546))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 547) != 0) != (*(_BYTE *)(a2 + 547) != 0))
  {
    return 0;
  }
  v4 = *(unsigned __int8 *)(a1 + 575);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 575);
  else
    v5 = *(_QWORD *)(a1 + 560);
  v6 = *(unsigned __int8 *)(a2 + 575);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 560);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(a1 + 552);
  if (v7 >= 0)
    v9 = (unsigned __int8 *)(a2 + 552);
  else
    v9 = *(unsigned __int8 **)(a2 + 552);
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(_QWORD *)(a1 + 560)))
      return std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)(a1 + 576), (unsigned __int8 *)(a2 + 576));
    return 0;
  }
  if (*(_BYTE *)(a1 + 575))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4)
        return std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)(a1 + 576), (unsigned __int8 *)(a2 + 576));
    }
    return 0;
  }
  return std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)(a1 + 576), (unsigned __int8 *)(a2 + 576));
}

BOOL siri::dialogengine::Dialog::operator!=(uint64_t a1, uint64_t a2)
{
  return !siri::dialogengine::Dialog::operator==(a1, a2);
}

uint64_t YAML::Stream::Stream(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  _BYTE v14[28];

  *(_QWORD *)&v14[20] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v4 = operator new[]();
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = v4;
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    return a1;
  v5 = 0;
  LODWORD(v6) = 0;
  do
  {
    v7 = std::istream::get();
    *(_DWORD *)&v14[4 * (int)v6 + 4] = v7;
    if (v7 <= 190)
    {
      switch(v7)
      {
        case -1:
          v8 = 7;
          goto LABEL_21;
        case 0:
          v8 = 0;
          goto LABEL_21;
        case 187:
          v8 = 1;
          goto LABEL_21;
      }
    }
    else if (v7 > 253)
    {
      if (v7 == 254)
      {
        v8 = 4;
        goto LABEL_21;
      }
      if (v7 == 255)
      {
        v8 = 5;
        goto LABEL_21;
      }
    }
    else
    {
      if (v7 == 191)
      {
        v8 = 2;
        goto LABEL_21;
      }
      if (v7 == 239)
      {
        v8 = 3;
        goto LABEL_21;
      }
    }
    v8 = 6;
    if ((v7 - 1) >= 0xFE)
      v8 = 7;
LABEL_21:
    LODWORD(v6) = v6 + 1;
    v9 = YAML::s_introTransitions[8 * v5 + v8];
    v10 = YAML::s_introUngetCount[8 * v5 + v8];
    if (v10 >= 1)
    {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), 0);
      v6 = (int)v6;
      v11 = v10 + 1;
      do
      {
        if (*(_DWORD *)&v14[4 * v6] != -1)
          std::istream::putback();
        --v11;
        --v6;
      }
      while (v11 > 1);
    }
    v5 = v9;
  }
  while (((0x1F3CFuLL >> v9) & 1) != 0);
  if ((v9 - 4) > 7)
    v12 = 0;
  else
    v12 = dword_1BFCC3A80[(v9 - 4)];
  *(_DWORD *)(a1 + 20) = v12;
  if (!*(_QWORD *)(a1 + 64))
    YAML::Stream::_ReadAheadTo((YAML::Stream *)a1, 0);
  return a1;
}

void sub_1BFA95E8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<char>::~deque[abi:ne180100](v1 + 24);
  _Unwind_Resume(a1);
}

BOOL YAML::Stream::_ReadAheadTo(YAML::Stream *this, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32))
  {
LABEL_8:
    v6 = 4;
    std::deque<char>::push_back((_QWORD *)this + 3, &v6);
    v4 = *((_QWORD *)this + 8);
  }
  else
  {
    while (1)
    {
      v4 = *((_QWORD *)this + 8);
      if (v4 > a2)
        break;
      switch(*((_DWORD *)this + 5))
      {
        case 0:
          YAML::Stream::StreamInUtf8(this);
          break;
        case 1:
        case 2:
          YAML::Stream::StreamInUtf16(this);
          break;
        case 3:
        case 4:
          YAML::Stream::StreamInUtf32(this);
          break;
        default:
          break;
      }
      if (*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32))
        goto LABEL_8;
    }
  }
  return v4 > a2;
}

uint64_t std::deque<char>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 4096;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void YAML::Stream::StreamInUtf8(YAML::Stream *this)
{
  char NextByte;
  char v3;

  NextByte = YAML::Stream::GetNextByte(this);
  if (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32))
  {
    v3 = NextByte;
    std::deque<char>::push_back((_QWORD *)this + 3, &v3);
  }
}

void YAML::Stream::StreamInUtf16(YAML::Stream *this)
{
  int v2;
  _BOOL8 v3;
  _BOOL8 v4;
  char *p_NextByte;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char NextByte;
  char v13;

  v2 = *((_DWORD *)this + 5);
  NextByte = YAML::Stream::GetNextByte(this);
  v13 = YAML::Stream::GetNextByte(this);
  if (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32))
  {
    v3 = v2 == 2;
    v4 = v2 != 2;
    if (v2 == 2)
      p_NextByte = &NextByte;
    else
      p_NextByte = &v13;
    v6 = *p_NextByte;
    if ((v6 & 0xFC) == 0xDC)
    {
      v7 = (_QWORD *)((char *)this + 24);
LABEL_7:
      v8 = 65533;
    }
    else
    {
      v9 = *(&NextByte + v3) | (unint64_t)(v6 << 8);
      if ((v6 & 0xFC) == 0xD8)
      {
        while (1)
        {
          v10 = v9;
          NextByte = YAML::Stream::GetNextByte(this);
          v13 = YAML::Stream::GetNextByte(this);
          if (*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32))
          {
            v7 = (_QWORD *)((char *)this + 24);
            goto LABEL_7;
          }
          v9 = *(&NextByte + v3) | ((unint64_t)*(&NextByte + v4) << 8);
          v11 = ((unint64_t)*(&NextByte + v4) << 8) - 57344;
          if (v11 > 0xFFFFFFFFFFFFFBFFLL)
            break;
          YAML::QueueUnicodeCodepoint((_QWORD *)this + 3, 0xFFFDuLL);
          if (v11 <= 0xFFFFFFFFFFFFF7FFLL)
          {
            YAML::QueueUnicodeCodepoint((_QWORD *)this + 3, v10);
            return;
          }
        }
        v9 = (*(&NextByte + v3) | (unint64_t)((*(&NextByte + v4) << 8) & 0x3FF) | ((v10 & 0x3FF) << 10))
           + 0x10000;
      }
      v7 = (_QWORD *)((char *)this + 24);
      v8 = v9;
    }
    YAML::QueueUnicodeCodepoint(v7, v8);
  }
}

void YAML::Stream::StreamInUtf32(YAML::Stream *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE v5[4];

  if (*((_DWORD *)this + 5) == 4)
    v2 = (char *)&unk_1BFCC3A70;
  else
    v2 = (char *)&YAML::Stream::StreamInUtf32(void)const::indexes;
  v5[0] = YAML::Stream::GetNextByte(this);
  v5[1] = YAML::Stream::GetNextByte(this);
  v5[2] = YAML::Stream::GetNextByte(this);
  v5[3] = YAML::Stream::GetNextByte(this);
  if (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32))
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v4 = v5[*(int *)&v2[v3]] | (v4 << 8);
      v3 += 4;
    }
    while (v3 != 16);
    YAML::QueueUnicodeCodepoint((_QWORD *)this + 3, v4);
  }
}

void std::deque<char>::push_back(_QWORD *a1, _BYTE *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 9) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x1000)
    {
      a1[4] = v8 - 4096;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v109 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v109;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v106 = v36;
      v109 = v38;
      operator delete(v30);
      v36 = v106;
    }
    v38 = v109;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v107 = v36;
            v111 = v38;
            operator delete(v78);
            v36 = v107;
            v38 = v111;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v108 = *((_QWORD *)&v36 + 1);
            v110 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v108;
            *(_QWORD *)&v38 = v110;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  *(_BYTE *)(*(_QWORD *)&v5[(v9 >> 9) & 0x7FFFFFFFFFFFF8] + (v9 & 0xFFF)) = *a2;
  ++a1[5];
}

void sub_1BFA96800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

uint64_t YAML::Stream::GetNextByte(YAML::Stream *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 11);
  if (v2 < *((_QWORD *)this + 10))
    goto LABEL_5;
  v3 = *(_QWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 40);
  v4 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 64))(v3, *((_QWORD *)this + 9), 2048);
  v2 = 0;
  *((_QWORD *)this + 10) = v4;
  *((_QWORD *)this + 11) = 0;
  if (v4)
    goto LABEL_5;
  v5 = (std::ios_base *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24));
  std::ios_base::clear(v5, v5->__rdstate_ | 2);
  if (*((_QWORD *)this + 10))
  {
    v2 = *((_QWORD *)this + 11);
LABEL_5:
    v6 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 11) = v2 + 1;
    return *(unsigned __int8 *)(v6 + v2);
  }
  return 0;
}

void YAML::QueueUnicodeCodepoint(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (a2 == 4)
    v3 = 65533;
  else
    v3 = a2;
  if (v3 > 0x7F)
  {
    if (v3 > 0x7FF)
    {
      if (v3 >> 16)
      {
        v8 = (v3 >> 18) & 7 | 0xF0;
        std::deque<char>::push_back(a1, &v8);
        v7 = (v3 >> 12) & 0x3F | 0x80;
        std::deque<char>::push_back(a1, &v7);
        v6 = (v3 >> 6) & 0x3F | 0x80;
        std::deque<char>::push_back(a1, &v6);
        v5 = v3 & 0x3F | 0x80;
        v4 = &v5;
      }
      else
      {
        v11 = (v3 >> 12) | 0xE0;
        std::deque<char>::push_back(a1, &v11);
        v10 = (v3 >> 6) & 0x3F | 0x80;
        std::deque<char>::push_back(a1, &v10);
        v9 = v3 & 0x3F | 0x80;
        v4 = &v9;
      }
    }
    else
    {
      v13 = (v3 >> 6) | 0xC0;
      std::deque<char>::push_back(a1, &v13);
      v12 = v3 & 0x3F | 0x80;
      v4 = &v12;
    }
  }
  else
  {
    v14 = v3;
    v4 = &v14;
  }
  std::deque<char>::push_back(a1, v4);
}

void YAML::Stream::~Stream(YAML::Stream *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 9);
  if (v2)
    MEMORY[0x1C3B8D878](v2, 0x1000C8077774924);
  std::deque<char>::~deque[abi:ne180100]((uint64_t)this + 24);
}

uint64_t YAML::Stream::peek(YAML::Stream *this)
{
  if (*((_QWORD *)this + 8))
    return *(char *)(*(_QWORD *)(*((_QWORD *)this + 4)
                                             + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                                 + (*((_QWORD *)this + 7) & 0xFFFLL));
  else
    return 4;
}

BOOL YAML::Stream::operator BOOL(_QWORD *a1)
{
  if (!*(_DWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32))
    return 1;
  if (a1[8])
    return *(_BYTE *)(*(_QWORD *)(a1[4] + ((a1[7] >> 9) & 0x7FFFFFFFFFFFF8)) + (a1[7] & 0xFFFLL)) != 4;
  return 0;
}

uint64_t YAML::Stream::get(YAML::Stream *this)
{
  int v2;

  if (*((_QWORD *)this + 8))
    v2 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                            + (*((_QWORD *)this + 7) & 0xFFFLL));
  else
    v2 = 4;
  YAML::Stream::AdvanceCurrent(this);
  ++*((_DWORD *)this + 4);
  if (v2 == 10)
    *(_QWORD *)((char *)this + 12) = (*((_DWORD *)this + 3) + 1);
  return (char)v2;
}

void YAML::Stream::AdvanceCurrent(YAML::Stream *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  v3 = v2 - 1;
  v4 = *((_QWORD *)this + 7) + 1;
  *((_QWORD *)this + 7) = v4;
  *((_QWORD *)this + 8) = v3;
  if (v4 >= 0x2000)
  {
    operator delete(**((void ***)this + 4));
    *((_QWORD *)this + 4) += 8;
    v3 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 7) -= 4096;
  }
  ++*((_DWORD *)this + 2);
  if (!v3)
LABEL_5:
    YAML::Stream::_ReadAheadTo(this, 0);
}

void YAML::Stream::get(YAML::Stream *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v3;
  std::string::value_type v6;

  v3 = a2;
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a3, a2);
  if (v3 >= 1)
  {
    do
    {
      v6 = YAML::Stream::get(this);
      std::string::push_back(a3, v6);
      --v3;
    }
    while (v3);
  }
}

void sub_1BFA96C2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

YAML::Stream *YAML::Stream::eat(YAML::Stream *this, int a2)
{
  int v2;
  YAML::Stream *v3;

  if (a2 >= 1)
  {
    v2 = a2;
    v3 = this;
    do
    {
      this = (YAML::Stream *)YAML::Stream::get(v3);
      --v2;
    }
    while (v2);
  }
  return this;
}

double siri::dialogengine::TestSuite::TestSuite(siri::dialogengine::TestSuite *this, char a2)
{
  double result;

  *(_BYTE *)this = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_BYTE *)this = a2;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t siri::dialogengine::TestSuite::LoadTests(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char a4, unsigned __int8 *a5, unsigned __int8 **a6)
{
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  __n128 *v14;
  __n128 *v15;
  BOOL v16;
  BOOL v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type size;
  unsigned __int8 *v22;
  std::string::size_type v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  unsigned __int8 *v28;
  __n128 *v29;
  uint64_t v30;
  std::string *v31;
  unsigned int *v32;
  char *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  unint64_t v40;
  __int128 v41;
  const char *v42;
  uint64_t v43;
  unsigned int i;
  unsigned int *v45;
  unsigned __int8 *v46;
  char v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  std::string::size_type v50;
  unsigned __int8 *v51;
  uint64_t v52;
  int v53;
  int v54;
  void *v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  std::string::size_type v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  std::string::size_type v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::string::size_type v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  int64x2_t v83;
  unint64_t v84;
  uint64_t v85;
  const char *v86;
  __n128 *v87;
  __n128 *v88;
  uint64_t v89;
  char v90;
  char v92;
  std::string __p[5];
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  void *v101[2];
  char v102;
  std::string v103;
  std::string v104;
  std::string v105;
  std::string v106;
  __n128 *v107;
  __n128 *v108;
  void *v109[2];
  char v110;
  std::string v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int v114[22];
  unsigned int v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 8);
  while (v9 != v10)
    siri::dialogengine::TestCase::~TestCase((void **)(v9 - 256));
  *(_QWORD *)(a1 + 16) = v10;
  std::string::basic_string[abi:ne180100]<0>(__p, "tests");
  siri::dialogengine::JoinPath(a2, (uint64_t)__p, (uint64_t)v109);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (siri::dialogengine::DirExists((uint64_t *)v109))
  {
    siri::dialogengine::ListDirRecursively((const char *)v109, (uint64_t)&v107);
    v12 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v108 - (char *)v107) >> 3));
    if (v108 == v107)
      v13 = 0;
    else
      v13 = v12;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v107, v108, v13, 1);
    v14 = v107;
    v15 = v108;
    if (v107 != v108)
    {
      v92 = 1;
      while (1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, ".json");
        v16 = siri::dialogengine::StringEndsWith((std::string *)v14, (unsigned __int8 *)__p);
        v17 = v16;
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          break;
        if (v16)
          goto LABEL_16;
LABEL_180:
        v14 = (__n128 *)((char *)v14 + 24);
        if (v14 == v15)
          goto LABEL_191;
      }
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (!v17)
        goto LABEL_180;
LABEL_16:
      siri::dialogengine::CatPathToId((unsigned __int8 *)v14, &v106);
      std::string::basic_string[abi:ne180100]<0>(__p, ".catfamily");
      if (siri::dialogengine::StringContains((char **)v14, (char *)__p))
      {
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v105, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
        else
          v105 = v106;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v105, "");
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(__p, ".patternfamily");
      if (siri::dialogengine::StringContains((char **)v14, (char *)__p))
      {
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v104, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
        else
          v104 = v106;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v104, "");
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      siri::dialogengine::BaseName((uint64_t)v14, __p);
      siri::dialogengine::RemoveExtension((uint64_t)__p, &v103);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v19 = a3[23];
      if ((v19 & 0x80u) == 0)
        v20 = a3[23];
      else
        v20 = *((_QWORD *)a3 + 1);
      if (!v20)
        goto LABEL_62;
      if ((a4 & 1) != 0)
      {
        size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v104.__r_.__value_.__l.__size_;
        if (v20 != size)
          goto LABEL_172;
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v104;
        else
          v18 = (std::string *)v104.__r_.__value_.__r.__words[0];
        if ((v19 & 0x80) == 0)
        {
          if (a3[23])
          {
            v22 = a3;
            while (*v22 == v18->__r_.__value_.__s.__data_[0])
            {
              ++v22;
              v18 = (std::string *)((char *)v18 + 1);
              if (!--v19)
                goto LABEL_62;
            }
            goto LABEL_172;
          }
LABEL_62:
          v25 = a5[23];
          if ((v25 & 0x80u) == 0)
            v26 = a5[23];
          else
            v26 = *((_QWORD *)a5 + 1);
          if (!v26)
            goto LABEL_79;
          v27 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
          if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v27 = v103.__r_.__value_.__l.__size_;
          if (v26 == v27)
          {
            if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = &v103;
            else
              v18 = (std::string *)v103.__r_.__value_.__r.__words[0];
            if ((v25 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)a5, v18, *((_QWORD *)a5 + 1)))
                goto LABEL_79;
            }
            else
            {
              if (a5[23])
              {
                v28 = a5;
                while (*v28 == v18->__r_.__value_.__s.__data_[0])
                {
                  ++v28;
                  v18 = (std::string *)((char *)v18 + 1);
                  if (!--v25)
                    goto LABEL_79;
                }
                goto LABEL_172;
              }
LABEL_79:
              v29 = v14;
              if (v14[1].n128_i8[7] < 0)
                v29 = (__n128 *)v14->n128_u64[0];
              siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Loading CAT Test Case: %s", (const char *)v18, v29);
              siri::dialogengine::JoinPath((uint64_t)v109, (uint64_t)v14, (uint64_t)v101);
              siri::dialogengine::ReadFileToString((uint64_t)v101, &v100);
              v30 = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)v114);
              v31 = &v100;
              if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v31 = (std::string *)v100.__r_.__value_.__r.__words[0];
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
              __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v31;
              v32 = (unsigned int *)rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<128u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(v30, (uint64_t)__p);
              if (v115)
              {
                v33 = "Unknown error.";
                if (v115 <= 0x11)
                  v33 = off_1E7931C38[v115];
                std::string::basic_string[abi:ne180100]<0>(__p, v33);
                std::operator+<char>();
                v34 = std::string::append(&v98, "': ");
                v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
                v99.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v35;
                v34->__r_.__value_.__l.__size_ = 0;
                v34->__r_.__value_.__r.__words[2] = 0;
                v34->__r_.__value_.__r.__words[0] = 0;
                if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v36 = __p;
                else
                  v36 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
                if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v37 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
                else
                  v37 = __p[0].__r_.__value_.__l.__size_;
                v38 = std::string::append(&v99, (const std::string::value_type *)v36, v37);
                v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
                v111.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v39;
                v38->__r_.__value_.__l.__size_ = 0;
                v38->__r_.__value_.__r.__words[2] = 0;
                v38->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v99.__r_.__value_.__l.__data_);
                if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v98.__r_.__value_.__l.__data_);
                siri::dialogengine::Log::LogWithLevel((uint64_t)&v111, 3u);
                v40 = *(_QWORD *)(a1 + 40);
                if (v40 >= *(_QWORD *)(a1 + 48))
                {
                  v85 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 32), (__int128 *)&v111);
                }
                else
                {
                  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 40), v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v41 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v40 + 16) = *((_QWORD *)&v111.__r_.__value_.__l + 2);
                    *(_OWORD *)v40 = v41;
                  }
                  v85 = v40 + 24;
                  *(_QWORD *)(a1 + 40) = v40 + 24;
                }
                *(_QWORD *)(a1 + 40) = v85;
                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v111.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                v92 = 0;
                goto LABEL_168;
              }
              if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v32, "tests"))
              {
                v43 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v114, "tests");
                if (*(_WORD *)(v43 + 22) == 4)
                {
                  for (i = 0; ; ++i)
                  {
                    if (i >= *(_DWORD *)v43)
                      goto LABEL_168;
                    v45 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](v43, i);
                    std::string::basic_string[abi:ne180100]<0>(&v99, "tests");
                    siri::dialogengine::JoinPath((uint64_t)&v99, (uint64_t)v14, (uint64_t)&v111);
                    siri::dialogengine::TestCase::TestCase(__p, v45, (__int128 *)a2, (__int128 *)&v111, (__int128 *)&v105, (__int128 *)&v104, (__int128 *)&v103, *(_BYTE *)a1);
                    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v111.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v99.__r_.__value_.__l.__data_);
                    v46 = (unsigned __int8 *)*((unsigned __int8 *)a6 + 23);
                    v47 = (char)v46;
                    v48 = a6[1];
                    if ((char)v46 >= 0)
                      v49 = (unsigned __int8 *)*((unsigned __int8 *)a6 + 23);
                    else
                      v49 = a6[1];
                    if (!v49)
                      goto LABEL_136;
                    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v111, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
                      v46 = (unsigned __int8 *)*((unsigned __int8 *)a6 + 23);
                      v48 = a6[1];
                      v47 = *((_BYTE *)a6 + 23);
                    }
                    else
                    {
                      v111 = v97;
                    }
                    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v50 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
                    else
                      v50 = v111.__r_.__value_.__l.__size_;
                    if (v47 < 0)
                      v46 = v48;
                    if ((unsigned __int8 *)v50 == v46)
                      break;
                    if ((*((_BYTE *)&v111.__r_.__value_.__s + 23) & 0x80) != 0)
                      operator delete(v111.__r_.__value_.__l.__data_);
LABEL_154:
                    siri::dialogengine::TestCase::~TestCase((void **)&__p[0].__r_.__value_.__l.__data_);
                    if (*(_WORD *)(v43 + 22) != 4)
                      __assert_rtn("Size", "document.h", 1557, "IsArray()");
                  }
                  if (v47 >= 0)
                    v51 = (unsigned __int8 *)a6;
                  else
                    v51 = *a6;
                  if ((*((_BYTE *)&v111.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    v56 = (void *)v111.__r_.__value_.__r.__words[0];
                    v57 = memcmp(v111.__r_.__value_.__l.__data_, v51, v111.__r_.__value_.__l.__size_);
                    operator delete(v56);
                    if (v57)
                      goto LABEL_154;
                  }
                  else if (*((_BYTE *)&v111.__r_.__value_.__s + 23))
                  {
                    v52 = 0;
                    do
                    {
                      v53 = v111.__r_.__value_.__s.__data_[v52];
                      v54 = v51[v52];
                    }
                    while (v53 == v54 && HIBYTE(v111.__r_.__value_.__r.__words[2]) - 1 != v52++);
                    if (v53 != v54)
                      goto LABEL_154;
                  }
LABEL_136:
                  v59 = *(_QWORD *)(a1 + 16);
                  v58 = *(_QWORD *)(a1 + 24);
                  if (v59 >= v58)
                  {
                    v61 = *(_QWORD *)(a1 + 8);
                    v62 = (uint64_t)(v59 - v61) >> 8;
                    if ((unint64_t)(v62 + 1) >> 56)
                      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                    v63 = v58 - v61;
                    v64 = v63 >> 7;
                    if (v63 >> 7 <= (unint64_t)(v62 + 1))
                      v64 = v62 + 1;
                    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFF00)
                      v65 = 0xFFFFFFFFFFFFFFLL;
                    else
                      v65 = v64;
                    v113 = a1 + 24;
                    if (v65)
                      v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::TestCase>>(v65);
                    else
                      v66 = 0;
                    v111.__r_.__value_.__r.__words[0] = v65;
                    v111.__r_.__value_.__l.__size_ = v65 + (v62 << 8);
                    v111.__r_.__value_.__r.__words[2] = v111.__r_.__value_.__l.__size_;
                    v112 = v65 + (v66 << 8);
                    siri::dialogengine::TestCase::TestCase((std::string *)v111.__r_.__value_.__l.__size_, (const siri::dialogengine::TestCase *)__p);
                    v67 = v111.__r_.__value_.__l.__size_;
                    v60 = v111.__r_.__value_.__r.__words[2] + 256;
                    v111.__r_.__value_.__r.__words[2] += 256;
                    v69 = *(_QWORD *)(a1 + 8);
                    v68 = *(_QWORD *)(a1 + 16);
                    if (v68 == v69)
                    {
                      v83 = vdupq_n_s64(v68);
                    }
                    else
                    {
                      v70 = 0;
                      do
                      {
                        v71 = v67 + v70;
                        v72 = v68 + v70;
                        v73 = *(_OWORD *)(v68 + v70 - 256);
                        *(_QWORD *)(v71 - 240) = *(_QWORD *)(v68 + v70 - 240);
                        *(_OWORD *)(v71 - 256) = v73;
                        *(_QWORD *)(v72 - 248) = 0;
                        *(_QWORD *)(v72 - 240) = 0;
                        *(_QWORD *)(v72 - 256) = 0;
                        v74 = *(_OWORD *)(v68 + v70 - 232);
                        *(_QWORD *)(v71 - 216) = *(_QWORD *)(v68 + v70 - 216);
                        *(_OWORD *)(v71 - 232) = v74;
                        *(_QWORD *)(v72 - 224) = 0;
                        *(_QWORD *)(v72 - 216) = 0;
                        *(_QWORD *)(v72 - 232) = 0;
                        v75 = *(_OWORD *)(v68 + v70 - 208);
                        *(_QWORD *)(v71 - 192) = *(_QWORD *)(v68 + v70 - 192);
                        *(_OWORD *)(v71 - 208) = v75;
                        *(_QWORD *)(v72 - 200) = 0;
                        *(_QWORD *)(v72 - 192) = 0;
                        v76 = *(_OWORD *)(v68 + v70 - 184);
                        v77 = *(_QWORD *)(v68 + v70 - 168);
                        *(_QWORD *)(v72 - 208) = 0;
                        *(_QWORD *)(v71 - 168) = v77;
                        *(_OWORD *)(v71 - 184) = v76;
                        *(_QWORD *)(v72 - 184) = 0;
                        *(_QWORD *)(v72 - 176) = 0;
                        *(_QWORD *)(v72 - 168) = 0;
                        v78 = *(_OWORD *)(v68 + v70 - 160);
                        *(_QWORD *)(v71 - 144) = *(_QWORD *)(v68 + v70 - 144);
                        *(_OWORD *)(v71 - 160) = v78;
                        *(_QWORD *)(v72 - 160) = 0;
                        *(_QWORD *)(v72 - 152) = 0;
                        *(_QWORD *)(v72 - 144) = 0;
                        *(_BYTE *)(v71 - 136) = *(_BYTE *)(v68 + v70 - 136);
                        v79 = *(_OWORD *)(v68 + v70 - 128);
                        *(_QWORD *)(v71 - 112) = *(_QWORD *)(v68 + v70 - 112);
                        *(_OWORD *)(v71 - 128) = v79;
                        *(_QWORD *)(v72 - 120) = 0;
                        *(_QWORD *)(v72 - 112) = 0;
                        *(_QWORD *)(v72 - 128) = 0;
                        v80 = *(_OWORD *)(v68 + v70 - 104);
                        *(_QWORD *)(v71 - 88) = *(_QWORD *)(v68 + v70 - 88);
                        *(_OWORD *)(v71 - 104) = v80;
                        *(_QWORD *)(v72 - 96) = 0;
                        *(_QWORD *)(v72 - 88) = 0;
                        v81 = *(_OWORD *)(v68 + v70 - 80);
                        v82 = *(_QWORD *)(v68 + v70 - 64);
                        *(_QWORD *)(v72 - 104) = 0;
                        *(_QWORD *)(v71 - 64) = v82;
                        *(_OWORD *)(v71 - 80) = v81;
                        *(_QWORD *)(v72 - 72) = 0;
                        *(_QWORD *)(v72 - 64) = 0;
                        *(_QWORD *)(v72 - 80) = 0;
                        *(_QWORD *)(v71 - 56) = 0;
                        *(_QWORD *)(v71 - 48) = 0;
                        *(_QWORD *)(v71 - 40) = 0;
                        *(_OWORD *)(v71 - 56) = *(_OWORD *)(v68 + v70 - 56);
                        *(_QWORD *)(v71 - 40) = *(_QWORD *)(v68 + v70 - 40);
                        *(_QWORD *)(v72 - 48) = 0;
                        *(_QWORD *)(v72 - 40) = 0;
                        *(_QWORD *)(v72 - 56) = 0;
                        LOWORD(v82) = *(_WORD *)(v68 + v70 - 32);
                        *(_QWORD *)(v71 - 16) = 0;
                        *(_QWORD *)(v71 - 8) = 0;
                        *(_WORD *)(v71 - 32) = v82;
                        *(_QWORD *)(v71 - 24) = 0;
                        *(_OWORD *)(v71 - 24) = *(_OWORD *)(v68 + v70 - 24);
                        *(_QWORD *)(v71 - 8) = *(_QWORD *)(v68 + v70 - 8);
                        *(_QWORD *)(v72 - 24) = 0;
                        *(_QWORD *)(v72 - 16) = 0;
                        *(_QWORD *)(v72 - 8) = 0;
                        v70 -= 256;
                      }
                      while (v68 + v70 != v69);
                      v67 += v70;
                      v83 = *(int64x2_t *)(a1 + 8);
                      v60 = v111.__r_.__value_.__r.__words[2];
                    }
                    *(_QWORD *)(a1 + 8) = v67;
                    *(_QWORD *)(a1 + 16) = v60;
                    *(int64x2_t *)&v111.__r_.__value_.__r.__words[1] = v83;
                    v84 = *(_QWORD *)(a1 + 24);
                    *(_QWORD *)(a1 + 24) = v112;
                    v112 = v84;
                    v111.__r_.__value_.__r.__words[0] = v83.i64[0];
                    std::__split_buffer<siri::dialogengine::TestCase>::~__split_buffer((uint64_t)&v111);
                  }
                  else
                  {
                    siri::dialogengine::TestCase::TestCase(*(std::string **)(a1 + 16), (const siri::dialogengine::TestCase *)__p);
                    v60 = v59 + 256;
                    *(_QWORD *)(a1 + 16) = v60;
                  }
                  *(_QWORD *)(a1 + 16) = v60;
                  goto LABEL_154;
                }
                v88 = v14;
                if (v14[1].n128_i8[7] < 0)
                  v88 = (__n128 *)v14->n128_u64[0];
                siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"CAT Test has non-array 'tests' entry: %s", v42, v88);
              }
              else if (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v114, "parameters"))
              {
                v87 = v14;
                if (v14[1].n128_i8[7] < 0)
                  v87 = (__n128 *)v14->n128_u64[0];
                siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"CAT Test has no tests: %s", v86, v87);
              }
LABEL_168:
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)v114);
              if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v100.__r_.__value_.__l.__data_);
              if (v102 < 0)
                operator delete(v101[0]);
            }
          }
LABEL_172:
          if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v103.__r_.__value_.__l.__data_);
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v104.__r_.__value_.__l.__data_);
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v106.__r_.__value_.__l.__data_);
          goto LABEL_180;
        }
      }
      else
      {
        v23 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v23 = v105.__r_.__value_.__l.__size_;
        if (v20 != v23)
          goto LABEL_172;
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v105;
        else
          v18 = (std::string *)v105.__r_.__value_.__r.__words[0];
        if ((v19 & 0x80) == 0)
        {
          if (a3[23])
          {
            v24 = a3;
            while (*v24 == v18->__r_.__value_.__s.__data_[0])
            {
              ++v24;
              v18 = (std::string *)((char *)v18 + 1);
              if (!--v19)
                goto LABEL_62;
            }
            goto LABEL_172;
          }
          goto LABEL_62;
        }
      }
      if (!memcmp(*(const void **)a3, v18, *((_QWORD *)a3 + 1)))
        goto LABEL_62;
      goto LABEL_172;
    }
    v92 = 1;
LABEL_191:
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v90 = v92;
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0)
      v89 = a2;
    else
      v89 = *(_QWORD *)a2;
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"No 'tests' directory found under template directory: %s", v11, v89);
    v90 = 1;
  }
  if (v110 < 0)
    operator delete(v109[0]);
  return v90 & 1;
}

void sub_1BFA977A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *a71;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  *(_QWORD *)(v77 + 40) = v78;
  if (*(char *)(v79 - 233) < 0)
    operator delete(*(void **)(v79 - 256));
  if (a23 < 0)
    operator delete(__p);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(v79 - 208);
  if (a64 < 0)
    operator delete(a59);
  if (a70 < 0)
    operator delete(a65);
  if (a72 < 0)
    operator delete(a71);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a77);
  *(_QWORD *)(v79 - 208) = &STACK[0x210];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v79 - 208));
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete((void *)STACK[0x228]);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::TestCase>>(unint64_t a1)
{
  if (HIBYTE(a1))
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 8);
}

uint64_t std::__split_buffer<siri::dialogengine::TestCase>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 256;
    siri::dialogengine::TestCase::~TestCase((void **)(i - 256));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::string *siri::dialogengine::TestSuite::GetTests@<X0>(std::string *this@<X0>, _QWORD *a2@<X8>)
{
  std::string::size_type size;
  std::string::size_type v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  size = this->__r_.__value_.__l.__size_;
  v4 = this->__r_.__value_.__r.__words[2];
  v5 = v4 - size;
  if (v4 != size)
  {
    if (v5 < 0)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::TestCase>>(v5 >> 8);
    v7 = 0;
    *a2 = v6;
    a2[1] = v6;
    a2[2] = &v6[256 * v8];
    do
    {
      this = siri::dialogengine::TestCase::TestCase((std::string *)&v6[v7], (const siri::dialogengine::TestCase *)(size + v7));
      v7 += 256;
    }
    while (size + v7 != v4);
    a2[1] = &v6[v7];
  }
  return this;
}

void sub_1BFA97AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<siri::dialogengine::TestCase>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::TestSuite::GetParseErrors@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[4], this[5], 0xAAAAAAAAAAAAAAABLL * (((char *)this[5] - (char *)this[4]) >> 3));
}

void YAML::Exception::~Exception(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_1E793AF50;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[2].__vftable);
  std::runtime_error::~runtime_error(this);
}

void YAML::ParserException::~ParserException(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

void YAML::RepresentationException::~RepresentationException(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

void YAML::InvalidScalar::~InvalidScalar(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

void YAML::InvalidNode::~InvalidNode(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

void YAML::BadConversion::~BadConversion(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

void YAML::BadDereference::~BadDereference(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

void YAML::BadPushback::~BadPushback(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

void YAML::BadInsert::~BadInsert(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

void YAML::EmitterException::~EmitterException(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

void YAML::BadFile::~BadFile(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

void YAML::KeyNotFound::~KeyNotFound(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

void YAML::BadSubscript::~BadSubscript(std::runtime_error *this)
{
  YAML::Exception::~Exception(this);
  JUMPOUT(0x1C3B8D890);
}

void sub_1BFA97EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BFA98098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BFA98154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BFA98230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BFA9836C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BFA98964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void (**a25)(siri::dialogengine::CatUpdater::Encrypted *__hidden this),uint64_t a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if (a24 < 0)
    operator delete(__p);
  a25 = &off_1E7935760;
  siri::dialogengine::CatUpdater::Encrypted::SharedDtor(&a25);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a26);

  _Unwind_Resume(a1);
}

void sub_1BFA98BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BFA99164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if (a24 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BFA9940C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BFA995E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void (**v8)(siri::dialogengine::CatUpdater::Encrypted *__hidden);
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, void (**)(siri::dialogengine::CatUpdater::Encrypted *__hidden this));

  v8 = &off_1E7935760;
  siri::dialogengine::CatUpdater::Encrypted::SharedDtor(va);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)va1);

  _Unwind_Resume(a1);
}

void sub_1BFA99B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void (**a24)(siri::dialogengine::CatUpdater::Encrypted *__hidden this),uint64_t a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  a24 = &off_1E7935760;
  siri::dialogengine::CatUpdater::Encrypted::SharedDtor(&a24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a25);

  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)(v32 - 136));
  _Unwind_Resume(a1);
}

void sub_1BFA9A0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)&a26);
  _Unwind_Resume(a1);
}

void sub_1BFA9A59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)&a24);
  _Unwind_Resume(a1);
}

void sub_1BFA9AAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void (**a20)(siri::dialogengine::CatUpdater::Encrypted *__hidden this),uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,id a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  a20 = &off_1E7935760;
  siri::dialogengine::CatUpdater::Encrypted::SharedDtor(&a20);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a21);

  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)(v44 - 136));
  _Unwind_Resume(a1);
}

void sub_1BFA9AD0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BFA9AFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (**a9)(siri::dialogengine::CatUpdater::Encrypted *__hidden this), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  if (a25 < 0)
    operator delete(__p);
  a9 = &off_1E7935760;
  siri::dialogengine::CatUpdater::Encrypted::SharedDtor(&a9);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a10);

  _Unwind_Resume(a1);
}

void sub_1BFA9B108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFA9B198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFA9B228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFA9B2B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateClient::~DialogStateClient(siri::dialogengine::DialogStateClient *this)
{
  JUMPOUT(0x1C3B8D890);
}

void siri::dialogengine::DialogStateClient::GetUseCase(uint64_t *a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSObject *v5;
  os_signpost_id_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t *v9;
  void *v10;
  uint64_t *v11;
  void *v12;
  siri::dialogengine *v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned __int8 *)a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = a1[1];
  if (v3)
  {
    v5 = os_log_create("com.apple.siri.DialogEngine", "DialogState");
    v6 = os_signpost_id_generate(v5);
    v7 = v5;
    v8 = v7;
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      if (*((char *)a1 + 23) >= 0)
        v9 = a1;
      else
        v9 = (uint64_t *)*a1;
      v16 = 136315138;
      v17 = v9;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "LoadState", "CAT_ID = %s", (uint8_t *)&v16, 0xCu);
    }

    +[DEBundle frameworkUserSettings](DEBundle, "frameworkUserSettings");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (*((char *)a1 + 23) >= 0)
      v11 = a1;
    else
      v11 = (uint64_t *)*a1;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "dictionaryForKey:", v12);
    v13 = (siri::dialogengine *)objc_claimAutoreleasedReturnValue();
    siri::dialogengine::DialogStateUseCaseFromNSDictionary(v13, a2);
    v14 = v8;
    v15 = v14;
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      LOWORD(v16) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v15, OS_SIGNPOST_INTERVAL_END, v6, "LoadState", "", (uint8_t *)&v16, 2u);
    }

  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[3] = 0;
    a2[2] = a2 + 3;
    a2[6] = 0;
    a2[4] = 0;
    a2[5] = a2 + 6;
    a2[10] = 0;
    a2[9] = 0;
    a2[7] = 0;
    a2[8] = a2 + 9;
  }
}

void sub_1BFA9B4E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogStateClient::GetFamily(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void **v6;
  void *v7;
  siri::dialogengine *v8;
  NSDictionary *v9;
  uint64_t v10;
  void *__p[2];
  unsigned __int8 v13;

  v3 = *(unsigned __int8 *)(a3 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a3 + 8);
  if (!v3)
    return 0;
  siri::dialogengine::GetFamilyIdFromCatId((unsigned __int8 *)a3, (uint64_t)__p);
  v4 = v13;
  if ((v13 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v4)
  {
    +[DEBundle frameworkUserSettings](DEBundle, "frameworkUserSettings");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((v13 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "dictionaryForKey:", v7);
    v8 = (siri::dialogengine *)objc_claimAutoreleasedReturnValue();
    v10 = siri::dialogengine::DialogStateFamilyFromNSDictionary(v8, v9);

    if ((v13 & 0x80) != 0)
      goto LABEL_14;
  }
  else
  {
    v10 = 0;
    if ((v13 & 0x80) != 0)
LABEL_14:
      operator delete(__p[0]);
  }
  return v10;
}

void sub_1BFA9B624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogStateClient::GetPattern(uint64_t a1, uint64_t a2, const void **a3)
{
  const void *v3;
  void *v5;
  size_t v6;
  void **v7;
  const void *v8;
  void **v9;
  void *v10;
  siri::dialogengine *v11;
  NSDictionary *v12;
  uint64_t v13;
  void *__p[2];
  char v16;

  v3 = (const void *)*((unsigned __int8 *)a3 + 23);
  if ((char)v3 < 0)
    v3 = a3[1];
  if (!v3)
    return 0;
  +[DEBundle frameworkUserSettings](DEBundle, "frameworkUserSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 8);
  if (v16 < 0)
    v7 = (void **)__p[0];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v8 = a3;
    else
      v8 = *a3;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "#pattern");
  if (v16 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dictionaryForKey:", v10);
  v11 = (siri::dialogengine *)objc_claimAutoreleasedReturnValue();
  v13 = siri::dialogengine::DialogStatePatternFromNSDictionary(v11, v12);

  if (v16 < 0)
    operator delete(__p[0]);

  return v13;
}

void sub_1BFA9B7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateClient::Update(double a1, uint64_t a2, const void ***a3, unsigned __int8 *a4, const void ***a5, uint64_t a6, uint64_t a7, _OWORD *a8)
{
  NSObject *v13;
  os_signpost_id_t v14;
  NSObject *v15;
  NSObject *v16;
  unint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t *v20;
  void *v21;
  void *p_p;
  void *v23;
  siri::dialogengine *v24;
  uint64_t v25;
  uint64_t v26;
  siri::dialogengine *v27;
  NSDictionary *v28;
  uint64_t v29;
  const siri::dialogengine::DialogStateUseCase *v30;
  void *v31;
  const siri::dialogengine::DialogStateFamily *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  os_signpost_id_t spid;
  os_signpost_id_t spida;
  uint8_t v41[8];
  __int128 v42;
  void *__p;
  uint64_t v44;
  unsigned __int8 v45;
  uint8_t buf[16];
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50[3];
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v13 = os_log_create("com.apple.siri.DialogEngine", "DialogState");
  v14 = os_signpost_id_generate(v13);
  v15 = v13;
  v16 = v15;
  spid = v14;
  v17 = v14 - 1;
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    if ((a4[23] & 0x80u) == 0)
      v18 = (uint64_t *)a4;
    else
      v18 = *(uint64_t **)a4;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v18;
    _os_signpost_emit_with_name_impl(&dword_1BF794000, v16, OS_SIGNPOST_INTERVAL_BEGIN, v14, "SaveState", "CAT_ID = %s", buf, 0xCu);
  }

  siri::dialogengine::GetFamilyIdFromCatId(a4, (uint64_t)&__p);
  +[DEBundle frameworkUserSettings](DEBundle, "frameworkUserSettings");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if ((a4[23] & 0x80u) == 0)
    v20 = (uint64_t *)a4;
  else
    v20 = *(uint64_t **)a4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v20, spid);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v45 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "dictionaryForKey:", v21);
  v24 = (siri::dialogengine *)objc_claimAutoreleasedReturnValue();
  siri::dialogengine::DialogStateUseCaseFromNSDictionary(v24, buf);

  v42 = 0uLL;
  v26 = v45;
  if ((v45 & 0x80u) != 0)
    v26 = v44;
  if (v26)
  {
    objc_msgSend(v19, "dictionaryForKey:", v23);
    v27 = (siri::dialogengine *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v42 = siri::dialogengine::DialogStateFamilyFromNSDictionary(v27, v28);
    *((_QWORD *)&v42 + 1) = v29;

  }
  siri::dialogengine::DialogStateBase::UpdateStats(a1, v25, a3, a4, a5, (uint64_t)buf, (uint64_t)&v42, 0);
  siri::dialogengine::DialogStateUseCaseToNSDictionary((siri::dialogengine *)buf, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setObject:forKey:", v31, v21);

  v33 = v45;
  if ((v45 & 0x80u) != 0)
    v33 = v44;
  if (v33)
  {
    siri::dialogengine::DialogStateFamilyToNSDictionary((siri::dialogengine *)&v42, v32);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setObject:forKey:", v34, v23);

  }
  if (a7)
  {
    *(_OWORD *)a7 = *(_OWORD *)buf;
    if (buf != (uint8_t *)a7)
    {
      std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(a7 + 16), v47, &v48);
      std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(a7 + 40), v49, v50);
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *> *,long>>(a7 + 64, (__int128 *)v50[2], &v51);
    }
  }
  if (a8)
  {
    v35 = v45;
    if ((v45 & 0x80u) != 0)
      v35 = v44;
    if (v35)
      *a8 = v42;
  }
  v36 = v16;
  v37 = v36;
  if (v17 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v36))
  {
    *(_WORD *)v41 = 0;
    _os_signpost_emit_with_name_impl(&dword_1BF794000, v37, OS_SIGNPOST_INTERVAL_END, spida, "SaveState", "", v41, 2u);
  }

  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((_QWORD *)v51);
  std::__tree<std::string>::destroy((uint64_t)&v49, v50[0]);
  std::__tree<std::string>::destroy((uint64_t)&v47, v48);

  if ((char)v45 < 0)
    operator delete(__p);

}

void sub_1BFA9BB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a20);
  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateClient::PatternUpdate(double a1, uint64_t a2, const void ***a3, char *a4, _OWORD *a5)
{
  NSObject *v9;
  os_signpost_id_t v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  void *v14;
  size_t v15;
  _BYTE *v16;
  char *v17;
  _BYTE *v18;
  void *v19;
  siri::dialogengine *v20;
  NSDictionary *v21;
  uint64_t v22;
  _QWORD *v23;
  const siri::dialogengine::DialogStatePattern *v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  char **v28;
  char *v29[2];
  void *__p[2];
  char v31;
  __int128 v32;
  _BYTE buf[12];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v9 = os_log_create("com.apple.siri.DialogEngine", "DialogState");
  v10 = os_signpost_id_generate(v9);
  v11 = v9;
  v12 = v11;
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    if (a4[23] >= 0)
      v13 = a4;
    else
      v13 = *(char **)a4;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v13;
    _os_signpost_emit_with_name_impl(&dword_1BF794000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v10, "UpdatePatternState", "PATTERN_ID = %s", buf, 0xCu);
  }

  +[DEBundle frameworkUserSettings](DEBundle, "frameworkUserSettings");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (a4[23] >= 0)
    v15 = a4[23];
  else
    v15 = *((_QWORD *)a4 + 1);
  v16 = buf;
  std::string::basic_string[abi:ne180100]((uint64_t)buf, v15 + 8);
  if (v34 < 0)
    v16 = *(_BYTE **)buf;
  if (v15)
  {
    if (a4[23] >= 0)
      v17 = a4;
    else
      v17 = *(char **)a4;
    memmove(v16, v17, v15);
  }
  strcpy(&v16[v15], "#pattern");
  if (v34 >= 0)
    v18 = buf;
  else
    v18 = *(_BYTE **)buf;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "dictionaryForKey:", v19);
  v20 = (siri::dialogengine *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&v32 = siri::dialogengine::DialogStatePatternFromNSDictionary(v20, v21);
  *((_QWORD *)&v32 + 1) = v22;

  v23 = std::string::basic_string[abi:ne180100]<0>(__p, "");
  v29[0] = 0;
  v29[1] = 0;
  v28 = v29;
  siri::dialogengine::DialogStateBase::UpdateStats(a1, (uint64_t)v23, a3, (unsigned __int8 *)__p, (const void ***)&v28, 0, 0, (uint64_t)&v32);
  std::__tree<std::string>::destroy((uint64_t)&v28, v29[0]);
  if (v31 < 0)
    operator delete(__p[0]);
  siri::dialogengine::DialogStatePatternToNSDictionary((siri::dialogengine *)&v32, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setObject:forKey:", v25, v19);

  if (a5)
    *a5 = v32;
  v26 = v12;
  v27 = v26;
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v26))
  {
    LOWORD(__p[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1BF794000, v27, OS_SIGNPOST_INTERVAL_END, v10, "UpdatePatternState", "", (uint8_t *)__p, 2u);
  }

  if (v34 < 0)
    operator delete(*(void **)buf);

}

void sub_1BFA9BEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  if (a27 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateClient::Clear(uint64_t a1, const char *a2, unsigned __int8 *a3)
{
  uint64_t *v4;
  void *v5;
  uint64_t *v6;
  void *v7;
  const char *v8;
  void **v9;
  void **v10;
  void *v11;
  void *__p[2];
  char v13;

  if ((a3[23] & 0x80u) == 0)
    v4 = (uint64_t *)a3;
  else
    v4 = *(uint64_t **)a3;
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Clear dialog state for CAT ID [%s]", a2, v4);
  +[DEBundle frameworkUserSettings](DEBundle, "frameworkUserSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((a3[23] & 0x80u) == 0)
    v6 = (uint64_t *)a3;
  else
    v6 = *(uint64_t **)a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeObjectForKey:", v7);
  siri::dialogengine::GetFamilyIdFromCatId(a3, (uint64_t)__p);
  if (v13 < 0)
  {
    if (!__p[1])
    {
      v11 = v7;
LABEL_19:
      operator delete(__p[0]);
      goto LABEL_20;
    }
    v9 = (void **)__p[0];
  }
  else
  {
    if (!v13)
    {
      v11 = v7;
      goto LABEL_20;
    }
    v9 = __p;
  }
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Clear dialog state for CAT family [%s]", v8, v9);
  if (v13 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "removeObjectForKey:", v11);
  if (v13 < 0)
    goto LABEL_19;
LABEL_20:

}

void sub_1BFA9C098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogStateClient::ClearPatternState(uint64_t a1, uint64_t a2, const void **a3)
{
  size_t v4;
  const char *v5;
  void **v6;
  const void *v7;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  void *__p[2];
  char v13;

  if (*((char *)a3 + 23) >= 0)
    v4 = *((unsigned __int8 *)a3 + 23);
  else
    v4 = (size_t)a3[1];
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 8);
  if (v13 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v4)
  {
    if (*((char *)a3 + 23) >= 0)
      v7 = a3;
    else
      v7 = *a3;
    memmove(v6, v7, v4);
  }
  strcpy((char *)v6 + v4, "#pattern");
  if (v13 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Clear pattern state for Pattern ID [%s]", v5, v8);
  +[DEBundle frameworkUserSettings](DEBundle, "frameworkUserSettings");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "removeObjectForKey:", v11);

  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_1BFA9C1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *> *,long>>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  __int128 *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t **v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v19 = a1;
    v20 = v8;
    v21 = v8;
    if (v8)
    {
      v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          v8[7] = *((_QWORD *)v9 + 7);
          if (v8 != (uint64_t *)v9)
            std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)v8 + 64, *((char **)v9 + 8), *((_QWORD *)v9 + 9), (uint64_t)(*((_QWORD *)v9 + 9) - *((_QWORD *)v9 + 8)) >> 3);
          std::string::operator=((std::string *)(v8 + 11), (const std::string *)((char *)v9 + 88));
          v10 = v21;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high(a1, &v18, (const void **)v21 + 4);
          std::__tree<std::string>::__insert_node_at((uint64_t **)a1, v18, leaf_high, v10);
          v8 = v20;
          v21 = v20;
          if (v20)
            v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          v12 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = *(__int128 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v13 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::__construct_node<std::pair<std::string const,siri::dialogengine::GroundingInfo> const&>((uint64_t)&v19, a1, a2 + 2);
      v14 = (uint64_t *)v19;
      v15 = (uint64_t **)std::__tree<std::string>::__find_leaf_high(a1, &v18, (const void **)(v19 + 32));
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, v18, v15, v14);
      v19 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19);
      v16 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(__int128 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (__int128 *)*((_QWORD *)a2 + 2);
          v13 = *(_QWORD *)v17 == (_QWORD)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
}

void sub_1BFA9C400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v2);
  }
  return a1;
}

_QWORD *siri::dialogengine::DialogStateClient::DialogStateClient(_QWORD *this)
{
  *this = &off_1E7931E60;
  return this;
}

{
  *this = &off_1E7931E60;
  return this;
}

std::string *siri::dialogengine::GradingAllowList::GradingAllowList(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[2].__r_.__value_.__l.__size_;
  siri::dialogengine::GradingAllowList::ReadFile((siri::dialogengine::GradingAllowList *)this);
  return this;
}

void sub_1BFA9C520(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GradingAllowList::ReadFile(siri::dialogengine::GradingAllowList *this)
{
  unsigned __int8 v2;
  os_signpost_id_t v3;
  os_signpost_id_t v4;
  NSObject *v5;
  siri::dialogengine::GradingAllowList *v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  int v10;
  const char *v11;
  const std::ios_base *v12;
  std::locale::id *v13;
  const std::locale::facet *v14;
  unsigned __int8 v15;
  std::string *p_p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const std::locale::facet *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  siri::dialogengine::GradingAllowList *v34;
  uint64_t **v35;
  std::string v36;
  char v37;
  std::string v38;
  _QWORD v39[3];
  uint64_t v40;
  _BYTE v41[56];
  std::string v42;
  uint64_t v43;
  std::string __p;
  os_signpost_id_t v45;
  char v46;
  uint8_t buf[12];
  __int16 v48;
  _QWORD v49[51];
  uint64_t v50;
  _QWORD v51[4];
  uint64_t v52;
  _QWORD v53[7];

  v53[4] = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    siri::dialogengine::GradingAllowList::ReadFile(void)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "GradingAllowList");
  }
  v3 = os_signpost_id_generate((os_log_t)siri::dialogengine::GradingAllowList::ReadFile(void)::sSignpostLog);
  v45 = v3;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = v3;
    v5 = siri::dialogengine::GradingAllowList::ReadFile(void)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::GradingAllowList::ReadFile(void)::sSignpostLog))
    {
      v6 = this;
      if (*((char *)this + 23) < 0)
        v6 = *(siri::dialogengine::GradingAllowList **)this;
      v7 = (_QWORD *)((char *)this + 24);
      if (*((char *)this + 47) < 0)
        v7 = (_QWORD *)*v7;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v6;
      v48 = 2080;
      v49[0] = v7;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "ReadFile", "bundleId = %s filePath = %s", buf, 0x16u);
    }
  }
  v51[0] = &off_1E7931F60;
  v51[1] = &v45;
  v51[3] = v51;
  v52 = 0;
  v53[3] = v53;
  std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::__clone((uint64_t)v51, v53);
  v8 = (_QWORD *)((char *)this + 24);
  std::ifstream::basic_ifstream(buf);
  v10 = *((char *)this + 47);
  if (*(_QWORD *)((char *)&v49[15] + 2))
  {
    if (v10 < 0)
      v8 = (_QWORD *)*v8;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GradingAllowList: Begin reading allow list file: %s", v9, v8);
    v34 = this;
    memset(&__p, 0, sizeof(__p));
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v39);
    memset(&v38, 0, sizeof(v38));
    v37 = 0;
    v12 = (const std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
    if ((v12->__rdstate_ & 2) == 0)
    {
      v35 = (uint64_t **)((char *)this + 48);
      v32 = &v41[4];
      v33 = v41;
      v13 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        std::ios_base::getloc(v12);
        v14 = std::locale::use_facet((const std::locale *)&v36, v13);
        v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale((std::locale *)&v36);
        std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(buf, (uint64_t)&__p, v15);
        siri::dialogengine::StringTrimLeft(" \t\n\r", &__p, &v36);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = v36;
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        {
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_51;
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (!*((_BYTE *)&v36.__r_.__value_.__s + 23))
            goto LABEL_51;
          p_p = &__p;
        }
        if (p_p->__r_.__value_.__s.__data_[0] != 35)
        {
          std::ios_base::clear((std::ios_base *)((char *)v39 + *(_QWORD *)(v39[0] - 24)), 0);
          std::string::operator=(&v42, &__p);
          std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)&v40);
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          {
            *v38.__r_.__value_.__l.__data_ = 0;
            v38.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v38.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v38.__r_.__value_.__s + 23) = 0;
          }
          v37 = 0;
          MEMORY[0x1C3B8D638](&v46, v39, 0);
          if (!v46)
            goto LABEL_50;
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          {
            *v38.__r_.__value_.__l.__data_ = 0;
            v38.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v38.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v38.__r_.__value_.__s + 23) = 0;
          }
          v17 = *(_QWORD *)(v39[0] - 24);
          v18 = *(_QWORD *)((char *)&v39[3] + v17);
          if (v18 <= 1)
            v19 = 1;
          else
            v19 = *(_QWORD *)((char *)&v39[3] + v17);
          std::ios_base::getloc((const std::ios_base *)((char *)v39 + v17));
          v20 = std::locale::use_facet((const std::locale *)&v36, v13);
          std::locale::~locale((std::locale *)&v36);
          v21 = 0;
          if (v18 >= 1)
            v22 = v19;
          else
            v22 = 0x7FFFFFFFFFFFFFF7;
          while (1)
          {
            v23 = *(_QWORD **)&v41[*(_QWORD *)(v39[0] - 24) + 8];
            v24 = (_BYTE *)v23[3];
            if (v24 == (_BYTE *)v23[4])
            {
              v25 = (*(uint64_t (**)(_QWORD *))(*v23 + 72))(v23);
              if (v25 == -1)
              {
                v28 = 2;
LABEL_47:
                v29 = v39[0];
                *(_QWORD *)&v41[*(_QWORD *)(v39[0] - 24) - 8] = 0;
                if (!v21)
                  v28 |= 4u;
LABEL_49:
                std::ios_base::clear((std::ios_base *)((char *)v39 + *(_QWORD *)(v29 - 24)), *(_DWORD *)&v41[*(_QWORD *)(v29 - 24)] | v28);
LABEL_50:
                MEMORY[0x1C3B8D65C](v39, &v37);
                v30 = v37;
                v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
                std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, (const void **)&v38.__r_.__value_.__l.__data_, (__int128 **)&v36)[56] = v30;
                break;
              }
            }
            else
            {
              LOBYTE(v25) = *v24;
            }
            if ((v25 & 0x80) == 0 && (*((_DWORD *)&v20[1].~facet + v25) & 0x4000) != 0)
            {
              v28 = 0;
              goto LABEL_47;
            }
            std::string::push_back(&v38, v25);
            v26 = *(_QWORD **)&v41[*(_QWORD *)(v39[0] - 24) + 8];
            v27 = v26[3];
            if (v27 == v26[4])
              (*(void (**)(_QWORD *))(*v26 + 80))(v26);
            else
              v26[3] = v27 + 1;
            if (v22 == ++v21)
            {
              v28 = 0;
              v29 = v39[0];
              *(_QWORD *)&v41[*(_QWORD *)(v39[0] - 24) - 8] = 0;
              goto LABEL_49;
            }
          }
        }
LABEL_51:
        v12 = (const std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
      }
      while ((v12->__rdstate_ & 2) == 0);
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GradingAllowList: Finished reading allow list file. Entries stored: %zu", v11, *((_QWORD *)v34 + 8), v32, v33);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    v39[0] = *MEMORY[0x1E0DE4F50];
    v31 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v39 + *(_QWORD *)(v39[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v39[2] = v31;
    v40 = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C3B8D80C](&v43);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (v10 < 0)
      v8 = (_QWORD *)*v8;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"GradingAllowList: Failed to open allow list file: %s", v9, v8);
  }
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3B8D608]((char *)v49 + 2);
  std::istream::~istream();
  MEMORY[0x1C3B8D80C](&v50);
  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)&v52);
}

void sub_1BFA9CB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  uint64_t a69;
  uint64_t v69;

  __cxa_end_catch();
  if (a24 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a25);
  if (a65 < 0)
    operator delete(a60);
  std::ifstream::~ifstream(&a69);
  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)(v69 - 144));
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v12;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x40uLL);
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[56] = 0;
    std::__tree<std::string>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1BFA9CCA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7931F60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7931F60;
  a2[1] = v2;
  return result;
}

void std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  os_signpost_id_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = **(_QWORD **)(a1 + 8);
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v2 = siri::dialogengine::GradingAllowList::ReadFile(void)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::GradingAllowList::ReadFile(void)::sSignpostLog))
    {
      *(_WORD *)v3 = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v2, OS_SIGNPOST_INTERVAL_END, v1, "ReadFile", "", v3, 2u);
    }
  }
}

uint64_t std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0,std::allocator<siri::dialogengine::GradingAllowList::ReadFile(void)::$_0>,void ()(void)>::target_type()
{
}

void siri::dialogengine::GradingAllowList::GetBundleId(siri::dialogengine::GradingAllowList *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void siri::dialogengine::GradingAllowList::GetFilePath(siri::dialogengine::GradingAllowList *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

uint64_t siri::dialogengine::GradingAllowList::size(siri::dialogengine::GradingAllowList *this)
{
  return *((_QWORD *)this + 8);
}

BOOL siri::dialogengine::GradingAllowList::IsAllowed(uint64_t *a1, char *a2)
{
  unsigned __int8 v4;
  os_signpost_id_t v5;
  os_signpost_id_t v6;
  NSObject *v7;
  uint64_t *v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t *v12;
  _BOOL4 v13;
  uint64_t *v14;
  char *v15;
  _BOOL8 v16;
  int v18;
  int v19;
  char *v20;
  char *v21;
  const char *v22;
  char *v23;
  void **v24;
  void *__p[2];
  char v26;
  os_signpost_id_t v27;
  _QWORD v28[4];
  _BYTE buf[12];
  __int16 v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0
  {
    siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)const::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "GradingAllowList");
  }
  v5 = os_signpost_id_generate((os_log_t)siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)const::sSignpostLog);
  v27 = v5;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v6 = v5;
    v7 = siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)const::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)const::sSignpostLog))
    {
      v8 = a1;
      if (*((char *)a1 + 23) < 0)
        v8 = (uint64_t *)*a1;
      if (a2[23] >= 0)
        v9 = a2;
      else
        v9 = *(char **)a2;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v8;
      v30 = 2080;
      v31 = v9;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6, "IsAllowed", "bundleId = %s catId = %s", buf, 0x16u);
    }
  }
  v28[0] = &off_1E7931ED0;
  v28[1] = &v27;
  v28[3] = v28;
  *(_QWORD *)buf = 0;
  v32 = &buf[8];
  std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::__clone((uint64_t)v28, &buf[8]);
  v11 = a1[7];
  if (!v11)
    goto LABEL_17;
  v12 = a1 + 7;
  do
  {
    v13 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 8), (const void **)(v11 + 32), (const void **)a2);
    v14 = (uint64_t *)(v11 + 8);
    if (!v13)
    {
      v14 = (uint64_t *)v11;
      v12 = (uint64_t *)v11;
    }
    v11 = *v14;
  }
  while (*v14);
  if (v12 == a1 + 7
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 8), (const void **)a2, (const void **)v12 + 4))
  {
LABEL_17:
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    if (a2[23] >= 0)
      v15 = a2;
    else
      v15 = *(char **)a2;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GradingAllowList: For bundleId [%s], catId [%s] was not found (disallowed)", v10, a1, v15);
    v16 = 0;
  }
  else
  {
    v18 = *((unsigned __int8 *)v12 + 56);
    v16 = *((_BYTE *)v12 + 56) != 0;
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    v19 = a2[23];
    v20 = *(char **)a2;
    if (v18)
      v21 = "true";
    else
      v21 = "false";
    std::string::basic_string[abi:ne180100]<0>(__p, v21);
    if (v19 >= 0)
      v23 = a2;
    else
      v23 = v20;
    if (v26 >= 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GradingAllowList: For bundleId [%s], catId [%s] allowed: %s", v22, a1, v23, v24);
    if (v26 < 0)
      operator delete(__p[0]);
  }
  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)buf);
  return v16;
}

void sub_1BFA9D0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  siri::dialogengine::Defer::~Defer((siri::dialogengine::Defer *)&a24);
  _Unwind_Resume(a1);
}

void std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7931ED0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7931ED0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  os_signpost_id_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = **(_QWORD **)(a1 + 8);
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v2 = siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)const::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)const::sSignpostLog))
    {
      *(_WORD *)v3 = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v2, OS_SIGNPOST_INTERVAL_END, v1, "IsAllowed", "", v3, 2u);
    }
  }
}

uint64_t std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0,std::allocator<siri::dialogengine::GradingAllowList::IsAllowed(std::string const&)::$_0>,void ()(void)>::target_type()
{
}

void sub_1BFA9D314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFA9D448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFA9D540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_1BFA9D62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_1BFA9D728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BFA9D804(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFA9D8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BFA9D998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  siri::dialogengine::RequestInfo::~RequestInfo(&a19);

  _Unwind_Resume(a1);
}

void sub_1BFA9DB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v31 - 56);

  _Unwind_Resume(a1);
}

void sub_1BFA9E1D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  char *v3;
  uint64_t v4;

  siri::dialogengine::RequestInfo::~RequestInfo((void **)&STACK[0xE08]);
  if (v3[23] < 0)
    operator delete(*(void **)(v4 - 152));
  if (v3[47] < 0)
    operator delete(*(void **)(v4 - 128));
  if (v3[79] < 0)
    operator delete(*(void **)(v4 - 96));

  _Unwind_Resume(a1);
}

void sub_1BFA9E388()
{
  JUMPOUT(0x1BFA9E37CLL);
}

void sub_1BFA9E424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BFA9E4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BFA9E58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_1BFA9E8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32)
{

  __p = &a29;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::RequestInfo::~RequestInfo(&a32);
  _Unwind_Resume(a1);
}

void sub_1BFA9EA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void __assign_helper_atomic_property__23031(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

_QWORD *__copy_helper_atomic_property__23032(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1BFA9ED0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{

  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a63);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,siri::dialogengine::Parameter>::~pair(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  *(_QWORD *)(a1 + 328) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(a1 + 344));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)(a1 + 264));
  siri::dialogengine::ObjectProperty::~ObjectProperty(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *siri::dialogengine::RemoveDuplicateStrings(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t i;
  char v7;
  __int128 v8;
  _OWORD v9[2];
  int v10;

  if (result)
  {
    v1 = result;
    v2 = *result;
    v3 = result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v3 - *result) >> 3) >= 2)
    {
      memset(v9, 0, sizeof(v9));
      v10 = 1065353216;
      while (1)
      {
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_8;
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v9, (unsigned __int8 *)v2, v2);
        if ((v4 & 1) == 0)
          break;
        v2 += 24;
      }
      if (v2 != v3)
      {
        for (i = v2 + 24; i != v3; i += 24)
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v9, (unsigned __int8 *)i, i);
          if ((v7 & 1) != 0)
          {
            if (*(char *)(v2 + 23) < 0)
              operator delete(*(void **)v2);
            v8 = *(_OWORD *)i;
            *(_QWORD *)(v2 + 16) = *(_QWORD *)(i + 16);
            *(_OWORD *)v2 = v8;
            v2 += 24;
            *(_BYTE *)(i + 23) = 0;
            *(_BYTE *)i = 0;
          }
        }
      }
LABEL_8:
      v5 = v1[1];
      if (v2 != v5)
      {
        while (v5 != v2)
        {
          if (*(char *)(v5 - 1) < 0)
            operator delete(*(void **)(v5 - 24));
          v5 -= 24;
        }
        v1[1] = v2;
      }
      return (uint64_t *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v9);
    }
  }
  return result;
}

void sub_1BFA9EF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::StringToLower(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  v5 = (_BYTE *)(a2 + v3);
  if (v4 >= 0)
    v6 = v5;
  else
    v6 = (_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
  if (v4 >= 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  while (v7 != v6)
  {
    *v7 = __tolower((char)*v7);
    ++v7;
  }
}

void sub_1BFA9F004(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringToUpper(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  v5 = (_BYTE *)(a2 + v3);
  if (v4 >= 0)
    v6 = v5;
  else
    v6 = (_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
  if (v4 >= 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  while (v7 != v6)
  {
    *v7 = __toupper((char)*v7);
    ++v7;
  }
}

void sub_1BFA9F0A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringToCapitalized(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char v4;
  char *v5;

  siri::dialogengine::StringToLower(a1, a2);
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      return;
    v3 = *(char **)a2;
  }
  else
  {
    v3 = (char *)a2;
    if (!*(_BYTE *)(a2 + 23))
      return;
  }
  v4 = __toupper(*v3);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (char *)a2;
  else
    v5 = *(char **)a2;
  *v5 = v4;
}

void sub_1BFA9F11C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringTrim(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6;
  const std::string *v7;
  std::string::size_type size;
  size_t v9;
  const std::string *v10;
  size_t v11;
  unsigned int v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *p_p;
  std::string::size_type v16;
  size_t v17;
  std::string::size_type v18;
  std::string::size_type v20;
  std::string __p;
  char v22;

  v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  v9 = strlen(__s);
  if (!size)
    goto LABEL_14;
  v10 = v7;
  v11 = v9;
  if (v9)
  {
    while (memchr(__s, v10->__r_.__value_.__s.__data_[0], v11))
    {
      v10 = (const std::string *)((char *)v10 + 1);
      if (!--size)
        goto LABEL_14;
    }
  }
  if ((char *)v10 - (char *)v7 == -1)
  {
LABEL_14:
    v14 = 0;
    v13 = 0;
    v12 = 0;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    std::string::basic_string(&__p, a2, (char *)v10 - (char *)v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v22);
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v14 = __p.__r_.__value_.__l.__size_;
    v13 = __p.__r_.__value_.__r.__words[0];
  }
  if ((v12 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)v13;
  if ((v12 & 0x80u) == 0)
    v16 = v12;
  else
    v16 = v14;
  v17 = strlen(__s);
  while (v16)
  {
    v18 = v16;
    if (v17)
    {
      if (memchr(__s, *((char *)&p_p[-1].__r_.__value_.__r.__words[2] + v16-- + 7), v17))
        continue;
    }
    v20 = v18;
    goto LABEL_27;
  }
  v20 = 0;
LABEL_27:
  std::string::basic_string(a3, &__p, 0, v20, (std::allocator<char> *)&v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BFA9F298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::StringTrimLeft@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6;
  const std::string *v7;
  std::string::size_type size;
  std::string *result;
  const std::string *v10;
  size_t v11;
  char v12;

  v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  result = (std::string *)strlen(__s);
  if (size)
  {
    v10 = v7;
    v11 = (size_t)result;
    if (result)
    {
      while (1)
      {
        result = (std::string *)memchr(__s, v10->__r_.__value_.__s.__data_[0], v11);
        if (!result)
          break;
        v10 = (const std::string *)((char *)v10 + 1);
        if (!--size)
          goto LABEL_14;
      }
    }
    if ((char *)v10 - (char *)v7 != -1)
      return std::string::basic_string(a3, a2, (char *)v10 - (char *)v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
  }
LABEL_14:
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return result;
}

std::string *siri::dialogengine::StringTrimRight@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6;
  const std::string *v7;
  std::string::size_type size;
  size_t v9;
  std::string::size_type v10;
  std::string::size_type v12;
  char v14;

  v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  v9 = strlen(__s);
  while (size)
  {
    v10 = size;
    if (v9)
    {
      if (memchr(__s, *((char *)&v7[-1].__r_.__value_.__r.__words[2] + size-- + 7), v9))
        continue;
    }
    v12 = v10;
    return std::string::basic_string(a3, a2, 0, v12, (std::allocator<char> *)&v14);
  }
  v12 = 0;
  return std::string::basic_string(a3, a2, 0, v12, (std::allocator<char> *)&v14);
}

void siri::dialogengine::StripWhitespace(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t v6;
  std::__wrap_iter<const char *> v7;
  std::__wrap_iter<const char *> v8;
  _QWORD *v9;
  std::string __p;
  char v11;
  std::string *p_p;

  {
    v9 = (_QWORD *)operator new();
    *v9 = 0;
    siri::dialogengine::GetWhitespaceRegex(void)::flag = (uint64_t)v9;
  }
  v5 = atomic_load((unint64_t *)siri::dialogengine::GetWhitespaceRegex(void)::flag);
  if (v5 != -1)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
    p_p = &__p;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetWhitespaceRegex(void)::flag, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetWhitespaceRegex(void)::$_0 &&>>);
  }
  memset(&__p, 0, sizeof(__p));
  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) == 0)
    v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)a1;
  else
    v7.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a1;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  v8.__i_ = &v7.__i_[v6];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&__p, v7, v8, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetWhitespaceRegex(void)::sRegex, " ");
  siri::dialogengine::StringTrim(" \t\n\r", &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BFA9F548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

std::regex_traits<char> *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetWhitespaceRegex(void)::$_0 &&>>()
{
  std::regex_traits<char> *v0;
  std::regex_traits<char> *result;

  v0 = (std::regex_traits<char> *)operator new();
  result = std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v0, "[\\n\\s]+");
  siri::dialogengine::GetWhitespaceRegex(void)::sRegex = (uint64_t)v0;
  return result;
}

void sub_1BFA9F5C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x1060C4040BE2400);
  _Unwind_Resume(a1);
}

void siri::dialogengine::StripWhitespaceFromEachLine(uint64_t a1)
{
  int v2;
  _BYTE *v3;
  uint64_t v4;
  std::vector<std::string>::pointer end;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::vector<std::string>::pointer v12;
  std::string *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  std::string *v18;
  std::vector<std::string>::pointer i;
  __int128 v20;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t size;
  uint64_t v27;
  void *__p[2];
  std::string::size_type v29;
  void **v30[2];
  uint64_t v31;
  _QWORD v32[8];
  std::string v33;
  uint64_t v34;
  std::vector<std::string> v35;
  std::__split_buffer<std::string> __v;

  memset(&v35, 0, sizeof(v35));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v30);
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = (_BYTE *)a1;
  else
    v3 = *(_BYTE **)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  for (; v4; --v4)
  {
    if (*v3 == 10)
    {
      std::stringbuf::str();
      end = v35.__end_;
      if (v35.__end_ >= v35.__end_cap_.__value_)
      {
        v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35.__end_ - (char *)v35.__begin_) >> 3);
        v7 = v6 + 1;
        if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v35.__end_cap_.__value_ - (char *)v35.__begin_) >> 3) > v7)
          v7 = 0x5555555555555556 * (((char *)v35.__end_cap_.__value_ - (char *)v35.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v35.__end_cap_.__value_ - (char *)v35.__begin_) >> 3) >= 0x555555555555555)
          v8 = 0xAAAAAAAAAAAAAAALL;
        else
          v8 = v7;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v35.__end_cap_;
        if (v8)
          v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v35.__end_cap_, v8);
        else
          v9 = 0;
        v10 = v9 + v6;
        __v.__first_ = v9;
        __v.__begin_ = v10;
        __v.__end_cap_.__value_ = &v9[v8];
        v10->__r_.__value_.__r.__words[2] = v29;
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v29 = 0;
        *(_OWORD *)__p = 0uLL;
        __v.__end_ = v10 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v35, &__v);
        v11 = v35.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v35.__end_ = v11;
      }
      else
      {
        v35.__end_->__r_.__value_.__r.__words[2] = v29;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v35.__end_ = end + 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__v, "");
      std::string::operator=(&v33, (const std::string *)&__v);
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v32);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
    }
    else
    {
      LOBYTE(__v.__first_) = *v3;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)&__v, 1);
    }
    ++v3;
  }
  std::stringbuf::str();
  v12 = v35.__end_;
  if (v35.__end_ >= v35.__end_cap_.__value_)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35.__end_ - (char *)v35.__begin_) >> 3);
    v15 = v14 + 1;
    if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v35.__end_cap_.__value_ - (char *)v35.__begin_) >> 3) > v15)
      v15 = 0x5555555555555556 * (((char *)v35.__end_cap_.__value_ - (char *)v35.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v35.__end_cap_.__value_ - (char *)v35.__begin_) >> 3) >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v15;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v35.__end_cap_;
    if (v16)
      v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v35.__end_cap_, v16);
    else
      v17 = 0;
    v18 = v17 + v14;
    __v.__first_ = v17;
    __v.__begin_ = v18;
    __v.__end_cap_.__value_ = &v17[v16];
    v18->__r_.__value_.__r.__words[2] = v29;
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    __v.__end_ = v18 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v35, &__v);
    v13 = v35.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v35.__end_ = v13;
  }
  else
  {
    v35.__end_->__r_.__value_.__r.__words[2] = v29;
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v13 = v12 + 1;
    v35.__end_ = v12 + 1;
  }
  for (i = v35.__begin_; i != v13; ++i)
  {
    siri::dialogengine::StripWhitespace((uint64_t)i, (std::string *)&__v);
    if (SHIBYTE(i->__r_.__value_.__r.__words[2]) < 0)
      operator delete(i->__r_.__value_.__l.__data_);
    v20 = *(_OWORD *)&__v.__first_;
    i->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
    *(_OWORD *)&i->__r_.__value_.__l.__data_ = v20;
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "");
  std::string::operator=(&v33, (const std::string *)&__v);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v32);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  begin = v35.__begin_;
  v22 = v35.__end_;
  if (v35.__begin_ != v35.__end_)
  {
    v23 = 1;
    do
    {
      if ((v23 & 1) == 0)
      {
        LOBYTE(__v.__first_) = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)&__v, 1);
      }
      v24 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
      if (v24 >= 0)
        v25 = (uint64_t)begin;
      else
        v25 = begin->__r_.__value_.__r.__words[0];
      if (v24 >= 0)
        size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      else
        size = begin->__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, v25, size);
      v23 = 0;
      ++begin;
    }
    while (begin != v22);
  }
  std::stringbuf::str();
  v30[0] = *(void ***)MEMORY[0x1E0DE4F50];
  v27 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void ***)((char *)v30 + (unint64_t)*(v30[0] - 3)) = *(void ***)(MEMORY[0x1E0DE4F50] + 64);
  v31 = v27;
  v32[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&v34);
  v30[0] = (void **)&v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v30);
}

void sub_1BFA9FA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  uint64_t v16;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v16 - 128));
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  a16 = v16 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::StringStripNonAscii(char *a1@<X0>, std::string *a2@<X8>)
{
  int v3;
  char *v4;
  uint64_t v5;
  int v6;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = a1[23];
  if (v3 >= 0)
    v4 = a1;
  else
    v4 = *(char **)a1;
  if (v3 >= 0)
    v5 = a1[23];
  else
    v5 = *((_QWORD *)a1 + 1);
  for (; v5; --v5)
  {
    v6 = *v4;
    if (v6 >= 32)
      std::string::push_back(a2, v6);
    ++v4;
  }
}

void sub_1BFA9FB4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::StringsEqual(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  size_t v4;
  unint64_t v5;
  int v6;
  void **v7;
  uint64_t v8;
  void **p_s1;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  _BOOL8 v16;
  void *__p[2];
  unsigned __int8 v19;
  void *__s1;
  size_t __n;
  unsigned __int8 v22;

  siri::dialogengine::StringToLower(a1, (uint64_t)&__s1);
  siri::dialogengine::StringToLower(a2, (uint64_t)__p);
  v3 = v22;
  if ((v22 & 0x80u) == 0)
    v4 = v22;
  else
    v4 = __n;
  v5 = v19;
  v6 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  if (v4 != v5)
  {
    v16 = 0;
    if (((char)v19 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_26;
  }
  if ((v19 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((char)v22 < 0)
  {
    v16 = memcmp(__s1, v7, __n) == 0;
    goto LABEL_22;
  }
  if (v22)
  {
    v8 = v22 - 1;
    p_s1 = &__s1;
    do
    {
      v11 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v10 = v11;
      v13 = *(unsigned __int8 *)v7;
      v7 = (void **)((char *)v7 + 1);
      v12 = v13;
      v15 = v8-- != 0;
      v16 = v10 == v12;
    }
    while (v10 == v12 && v15);
LABEL_22:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_23;
LABEL_26:
    operator delete(__p[0]);
    if ((v22 & 0x80) == 0)
      return v16;
LABEL_27:
    operator delete(__s1);
    return v16;
  }
  v16 = 1;
  if ((char)v19 < 0)
    goto LABEL_26;
LABEL_23:
  if ((v3 & 0x80) != 0)
    goto LABEL_27;
  return v16;
}

void sub_1BFA9FC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::StringStartsWith(std::string *__str, unsigned __int8 *a2)
{
  std::string::size_type v3;
  std::string::size_type size;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  std::string *p_s1;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  _BOOL8 v16;
  void *v17;
  std::string __s1;
  char v20;

  if ((a2[23] & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  std::string::basic_string(&__s1, __str, 0, v3, (std::allocator<char> *)&v20);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v5 = a2[23];
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 1);
  if (size == v5)
  {
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v17 = (void *)__s1.__r_.__value_.__r.__words[0];
      v16 = memcmp(__s1.__r_.__value_.__l.__data_, v7, __s1.__r_.__value_.__l.__size_) == 0;
      goto LABEL_26;
    }
    if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      return 1;
    v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
    p_s1 = &__s1;
    do
    {
      v11 = p_s1->__r_.__value_.__s.__data_[0];
      p_s1 = (std::string *)((char *)p_s1 + 1);
      v10 = v11;
      v13 = *v7++;
      v12 = v13;
      v15 = v8-- != 0;
      v16 = v10 == v12;
    }
    while (v10 == v12 && v15);
  }
  else
  {
    v16 = 0;
  }
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v17 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_26:
    operator delete(v17);
  }
  return v16;
}

BOOL siri::dialogengine::StringEndsWith(std::string *__str, unsigned __int8 *a2)
{
  std::string::size_type v3;
  std::string::size_type size;
  _BOOL8 v5;
  std::string::size_type v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  std::string *p_s1;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  void *v18;
  std::string __s1;
  char v21;

  v3 = a2[23];
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    size = __str->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v3 <= size)
  {
    std::string::basic_string(&__s1, __str, size - v3, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v21);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v6 = __s1.__r_.__value_.__l.__size_;
    v7 = a2[23];
    v8 = (char)v7;
    if ((v7 & 0x80u) != 0)
      v7 = *((_QWORD *)a2 + 1);
    if (v6 == v7)
    {
      if (v8 >= 0)
        v9 = a2;
      else
        v9 = *(unsigned __int8 **)a2;
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v18 = (void *)__s1.__r_.__value_.__r.__words[0];
        v5 = memcmp(__s1.__r_.__value_.__l.__data_, v9, __s1.__r_.__value_.__l.__size_) == 0;
        goto LABEL_30;
      }
      if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        return 1;
      v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        v13 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v12 = v13;
        v15 = *v9++;
        v14 = v15;
        v17 = v10-- != 0;
        v5 = v12 == v14;
      }
      while (v12 == v14 && v17);
    }
    else
    {
      v5 = 0;
    }
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      return v5;
    v18 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_30:
    operator delete(v18);
    return v5;
  }
  return 0;
}

_QWORD *siri::dialogengine::GetRegexError@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::regex_traits<char> v7[2];
  std::__shared_weak_count *v8;

  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v7, a1);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(&v7[0].__loc_);
  return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(std::regex_traits<char> *a1, uint64_t a2)
{
  std::regex_traits<char> *v4;
  uint64_t v5;
  char *v6;

  v4 = std::regex_traits<char>::regex_traits(a1);
  v4[2].__ct_ = 0;
  *(_OWORD *)&v4[1].__col_ = 0u;
  *(_OWORD *)&v4[1].__loc_.__locale_ = 0u;
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (char *)a2;
  else
    v6 = *(char **)a2;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (&v6[v5] != (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v4, v6, &v6[v5]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1BFAA000C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__owns_one_state<char> *v8;
  unsigned int v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  std::__owns_one_state<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  std::__owns_one_state<char> *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E7932030;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(a1 + 40, (uint64_t)v7);
  v8 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 > 0x3F)
  {
    switch(v9)
    {
      case 0x40u:
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v16 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v16)
          v17 = v16;
        else
          v17 = (unsigned __int8 *)a3;
        if (v17 == (unsigned __int8 *)a2)
        {
          v18 = (_QWORD *)operator new();
          v19 = *(_QWORD *)(a1 + 56);
          v20 = *(_QWORD *)(v19 + 8);
          v18[1] = v20;
          *(_QWORD *)(v19 + 8) = v18;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, v17);
        }
        if (v17 != (unsigned __int8 *)a3)
          ++v17;
        while (v17 != (unsigned __int8 *)a3)
        {
          v27 = (unsigned __int8 *)memchr(v17, 10, a3 - (char *)v17);
          if (v27)
            v28 = v27;
          else
            v28 = (unsigned __int8 *)a3;
          v29 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v28 == v17)
          {
            v30 = (_QWORD *)operator new();
            v31 = *(_QWORD *)(a1 + 56);
            v32 = *(_QWORD *)(v31 + 8);
            v30[1] = v32;
            *(_QWORD *)(v31 + 8) = v30;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)v17, v28);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v29);
          if (v28 == (unsigned __int8 *)a3)
            v17 = v28;
          else
            v17 = v28 + 1;
        }
        break;
      case 0x100u:
        v10 = (char *)memchr(a2, 10, a3 - a2);
        if (v10)
          v11 = v10;
        else
          v11 = a3;
        if (v11 == a2)
        {
          v12 = (_QWORD *)operator new();
          v13 = *(_QWORD *)(a1 + 56);
          v14 = *(_QWORD *)(v13 + 8);
          v12[1] = v14;
          *(_QWORD *)(v13 + 8) = v12;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, v11);
        }
        if (v11 != a3)
          ++v11;
        while (v11 != a3)
        {
          v21 = (char *)memchr(v11, 10, a3 - v11);
          if (v21)
            v22 = v21;
          else
            v22 = a3;
          v23 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v22 == v11)
          {
            v24 = (_QWORD *)operator new();
            v25 = *(_QWORD *)(a1 + 56);
            v26 = *(_QWORD *)(v25 + 8);
            v24[1] = v26;
            *(_QWORD *)(v25 + 8) = v24;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11, v22);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v23);
          if (v22 == a3)
            v11 = v22;
          else
            v11 = v22 + 1;
        }
        break;
      default:
        goto LABEL_49;
    }
    return (unsigned __int8 *)a3;
  }
  else if (v9)
  {
    if (v9 != 16)
    {
      if (v9 != 32)
LABEL_49:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
}

void sub_1BFAA0378(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != a3)
  {
    if (*v8 != 124)
      return v8;
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v14, a3);
    }
    while (v8 != v14);
    if (v13 == v8)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  char *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == (char *)a3)
    return (unsigned __int8 *)a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E79321A8;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (char *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v3, v4);
    }
    while (v10 != v3);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_1E79321F0;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  std::basic_regex<char>::value_type v13;
  unsigned __int8 *v14;
  _BOOL4 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  unsigned int v26;
  char *v27;
  char *v28;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = (v8 - 36);
  if (v9 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v9 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_34:
      v14 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v10 = a2 + 1;
  if (a2 + 1 == a3)
    goto LABEL_21;
  v11 = *a2;
  if (v11 != 92)
    goto LABEL_22;
  v12 = *v10;
  v13 = *v10;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
    v14 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = (unsigned __int8 *)&a2[v16];
  }
  if (v14 == (unsigned __int8 *)a2)
  {
LABEL_21:
    v11 = *a2;
LABEL_22:
    if (v11 == 46)
    {
      v17 = (_QWORD *)operator new();
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8);
      *v17 = &off_1E7932700;
      v17[1] = v19;
      *(_QWORD *)(v18 + 8) = v17;
LABEL_33:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_34;
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v14 != (unsigned __int8 *)a2 || v14 == (unsigned __int8 *)a3)
    goto LABEL_38;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E79321F0;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v26 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v26);
      --*(_DWORD *)(a1 + 36);
      v14 = (unsigned __int8 *)(v28 + 1);
LABEL_38:
      if (v14 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E79321A8;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      *(_QWORD *)(v23 + 8) = v21;
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    v13 = a2;
    if (v12 != 123)
      return v13;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  v13 = a2;
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  int v12;
  char *j;
  char *v14;
  int v15;
  char *v16;
  int v17;
  std::string *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t i;
  std::string::size_type size;
  int v24;
  std::string::size_type v25;
  std::string *p_p;
  std::string *v27;
  std::regex_traits<char>::char_class_type classname;
  char v29;
  std::string::size_type v30;
  std::string *v31;
  void *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string v38;
  std::string v39;
  void *v40[2];
  uint64_t v41;
  std::string __p;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_136;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_136;
    v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_136;
    v8 = a3 - 4;
    while (1)
    {
      v9 = (char *)v5;
      if ((char *)v5 == a3)
      {
        v11 = a3;
        goto LABEL_114;
      }
      v10 = *(unsigned __int8 *)v5;
      v11 = (char *)v5;
      if (v10 != 93)
        break;
LABEL_114:
      v5 = (uint64_t)v11;
LABEL_115:
      if (v9 == (char *)v5)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93)
            return v9 + 1;
        }
LABEL_136:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
    memset(&v39, 0, sizeof(v39));
    if ((char *)(v5 + 1) != a3 && v10 == 91)
    {
      v12 = *(unsigned __int8 *)(v5 + 1);
      switch(v12)
      {
        case '.':
          v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v5 + 2), a3, (uint64_t)&v39);
          v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
          size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v39.__r_.__value_.__l.__size_;
          if (size)
          {
LABEL_34:
            if (v11 != a3)
            {
              v17 = *v11;
              if (v17 != 93)
              {
                v19 = v11 + 1;
                if (v11 + 1 != a3 && v17 == 45 && *v19 != 93)
                {
                  memset(&__p, 0, sizeof(__p));
                  v20 = v11 + 2;
                  if (v11 + 2 != a3 && *v19 == 91 && *v20 == 46)
                  {
                    v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v11 + 3, a3, (uint64_t)&__p);
                    goto LABEL_120;
                  }
                  if ((v5 | 0x40) == 0x40)
                  {
                    LODWORD(v19) = *v19;
                    if ((_DWORD)v19 == 92)
                    {
                      if ((_DWORD)v5)
                        v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11 + 2, a3, &__p);
                      else
                        v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v11 + 2), (std::basic_regex<char> *)a3, &__p, v7);
LABEL_120:
                      v20 = v21;
LABEL_121:
                      *(_OWORD *)v40 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                      v36 = v39.__r_.__value_.__r.__words[2];
                      v38 = __p;
                      memset(&v39, 0, sizeof(v39));
                      v41 = v36;
                      memset(&__p, 0, sizeof(__p));
                      std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v40, (char *)&v38);
                      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v38.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v41) < 0)
                        operator delete(v40[0]);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      v29 = 1;
LABEL_111:
                      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v39.__r_.__value_.__l.__data_);
                      v11 = v20;
                      if ((v29 & 1) == 0)
                        goto LABEL_115;
                      goto LABEL_114;
                    }
                  }
                  else
                  {
                    LOBYTE(v19) = *v19;
                  }
                  std::string::operator=(&__p, (std::string::value_type)v19);
                  goto LABEL_121;
                }
              }
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v39.__r_.__value_.__l.__size_)
              {
                if (v39.__r_.__value_.__l.__size_ == 1)
                {
                  v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_43:
                  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0]);
LABEL_80:
                  v29 = 1;
                  v20 = v11;
                  goto LABEL_111;
                }
                v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_79:
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0], v18->__r_.__value_.__s.__data_[1]);
                goto LABEL_80;
              }
              operator delete(v39.__r_.__value_.__l.__data_);
            }
            else if (*((_BYTE *)&v39.__r_.__value_.__s + 23))
            {
              v18 = &v39;
              if (HIBYTE(v39.__r_.__value_.__r.__words[2]) == 1)
                goto LABEL_43;
              goto LABEL_79;
            }
            goto LABEL_114;
          }
LABEL_28:
          if ((v5 | 0x40) == 0x40)
          {
            v15 = *v11;
            if (v15 == 92)
            {
              v16 = v11 + 1;
              if ((_DWORD)v5)
              {
                v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v16, a3, &v39);
              }
              else
              {
                v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v16, (std::basic_regex<char> *)a3, &v39, v7);
                v5 = 0;
              }
              goto LABEL_34;
            }
          }
          else
          {
            LOBYTE(v15) = *v11;
          }
          std::string::operator=(&v39, v15);
          ++v11;
          goto LABEL_34;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2)
            goto LABEL_135;
          for (i = 0; ; ++i)
          {
            v14 = (char *)(v5 + i + 2);
            if (*v14 == 58 && *(_BYTE *)(v5 + i + 3) == 93)
              break;
            if (&v8[-v5] == (char *)i)
              goto LABEL_135;
          }
          if (v14 == a3)
LABEL_135:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          v24 = *(_DWORD *)(a1 + 24);
          std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
          v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v25 = __p.__r_.__value_.__l.__size_;
          (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), p_p, (char *)p_p + v25);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &__p;
          else
            v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          classname = std::__get_classname((const char *)v27, v24 & 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (!classname)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          v29 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          goto LABEL_110;
        case '=':
          if ((uint64_t)&a3[-v5 - 2] < 2)
            goto LABEL_135;
          for (j = 0; ; ++j)
          {
            v14 = &j[v5 + 2];
            if (*v14 == 61 && j[v5 + 3] == 93)
              break;
            if (&v8[-v5] == j)
              goto LABEL_135;
          }
          if (v14 == a3)
            goto LABEL_135;
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            v30 = __p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_)
LABEL_137:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
              goto LABEL_137;
            v31 = &__p;
          }
          std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)v40, a1, (char *)v31, (char *)v31 + v30);
          v32 = (void *)HIBYTE(v41);
          if (v41 < 0)
            v32 = v40[1];
          if (v32)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (__int128 *)v40);
          }
          else
          {
            v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v33 = __p.__r_.__value_.__l.__size_;
            if (v33 == 2)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v35 = &__p;
              else
                v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v35->__r_.__value_.__s.__data_[0], v35->__r_.__value_.__s.__data_[1]);
            }
            else
            {
              if (v33 != 1)
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v34 = &__p;
              else
                v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v34->__r_.__value_.__s.__data_[0]);
            }
          }
          if (SHIBYTE(v41) < 0)
            operator delete(v40[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v29 = 0;
LABEL_110:
          v5 = (uint64_t)(v14 + 2);
          v20 = v9;
          goto LABEL_111;
      }
    }
    v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    v11 = v9;
    goto LABEL_28;
  }
  return a2;
}

void sub_1BFAA1360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *i;
  int v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  unint64_t v13;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  for (i = a2; ; v6 = i)
  {
    v8 = *i++;
    if (v8 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    --v5;
  }
  if (v6 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v12;
  v9 = v13;
  *(_QWORD *)(a4 + 16) = v13;
  v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a4 + 8);
  if (v10 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  std::string *v6;
  std::basic_regex<char>::value_type locale;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  std::string::value_type v14;
  unsigned int v15;
  std::string::value_type v16;
  uint64_t v17;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v6 = a4;
            locale = 10;
            goto LABEL_50;
          }
          locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            v6 = a4;
            locale = 13;
            goto LABEL_50;
          }
          locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            v6 = a4;
            locale = 9;
            goto LABEL_50;
          }
          locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
                  goto LABEL_23;
              }
            }
          }
          goto LABEL_64;
        case 'v':
          if (a4)
          {
            v6 = a4;
            locale = 11;
            goto LABEL_50;
          }
          locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_28;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u)
            goto LABEL_64;
          v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_33;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u)
            goto LABEL_64;
          v13 = -87;
LABEL_33:
          v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4)
            std::string::operator=(a4, v14);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v6 = a4;
        locale = 0;
        goto LABEL_50;
      }
      locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v6 = a4;
          locale = 12;
LABEL_50:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if ((_DWORD)v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v6 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_64;
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65)
      goto LABEL_64;
    v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v15 >= 0x5B && (v15 - 97) > 0x19u)
      goto LABEL_64;
    v16 = v15 & 0x1F;
    if (a4)
      std::string::operator=(a4, v16);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1BFAA1BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, unsigned __int8 *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  unsigned __int8 *v9;
  char *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  _BOOL4 v18;
  uint64_t v19;
  size_t v20;
  int v21;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  size_t v28;
  size_t v29;
  std::basic_regex<char> *v30;
  int v31;
  int v32;

  v3 = a2;
  if (a2 == (char *)a3)
    return v3;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v9 = (unsigned __int8 *)(a2 + 1);
  v8 = *a2;
  if ((a2 + 1 != (char *)a3 || v8 != 36)
    && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
    goto LABEL_13;
  }
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
  if (v11 == v3)
  {
    if (*v3 == 46)
    {
      v12 = (std::__node<char> *)operator new();
      v13 = a1->__end_;
      first = v13->__first_;
      v12->__vftable = (std::__node<char>_vtbl *)&off_1E7932700;
      v12[1].__vftable = (std::__node<char>_vtbl *)first;
      v13->__first_ = v12;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
LABEL_13:
      v11 = v3 + 1;
      goto LABEL_14;
    }
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v3, (char *)a3);
  }
LABEL_14:
  if (v3 == v11 && v9 != a3 && *v3 == 92)
  {
    if (2 * (v3[1] == 40))
    {
      v15 = (uint64_t)&v3[2 * (v3[1] == 40)];
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      v16 = a1->__marked_count_;
      do
      {
        v17 = (unsigned __int8 *)v15;
        v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, v15, a3);
      }
      while (v17 != (unsigned __int8 *)v15);
      if (v17 == a3 || v17 + 1 == a3 || *v17 != 92 || v17[1] != 41)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      v11 = (char *)(v17 + 2);
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v16);
    }
    else
    {
      v18 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v3[1]);
      v19 = 2;
      if (!v18)
        v19 = 0;
      v11 = &v3[v19];
    }
  }
  if (v11 != v3)
  {
    if (v11 == (char *)a3)
      return (char *)a3;
    v20 = a1->__marked_count_ + 1;
    v21 = *v11;
    if (v21 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
      return ++v11;
    }
    if (v11 + 1 == (char *)a3 || v21 != 92 || v11[1] != 123)
      return v11;
    v23 = (unsigned __int8 *)(v11 + 2);
    v32 = 0;
    v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v23, a3, &v32);
    if (v23 == v24)
LABEL_47:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    if (v24 != a3)
    {
      v25 = v24 + 1;
      v26 = *v24;
      if (v26 == 44)
      {
        v31 = -1;
        v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v24 + 1, a3, &v31);
        if (v27 != a3 && v27 + 1 != a3 && *v27 == 92 && v27[1] == 125)
        {
          v29 = v31;
          v28 = v32;
          if (v31 == -1)
          {
            v29 = -1;
          }
          else if (v31 < v32)
          {
            goto LABEL_47;
          }
          v11 = (char *)&v27[2 * (v27[1] == 125)];
          v30 = a1;
LABEL_54:
          std::basic_regex<char,std::regex_traits<char>>::__push_loop(v30, v28, v29, end, marked_count + 1, v20, 1);
          return v11;
        }
      }
      else if (v25 != a3 && v26 == 92 && *v25 == 125)
      {
        v11 = (char *)(v24 + 2);
        v28 = v32;
        v30 = a1;
        v29 = v32;
        goto LABEL_54;
      }
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v6;
  unsigned __int8 *v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  BOOL v16;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t (**v19)();
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int marked_count;
  std::__owns_one_state<char> *v24;
  std::__owns_one_state<char> **p_end;
  unsigned int v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  char *v32;
  int v33;
  unsigned int v34;
  std::__node<char> *v35;
  std::__owns_one_state<char> *v36;
  std::__node<char> *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  std::basic_regex<char> *v43;
  BOOL v44;
  std::basic_regex<char> *v45;
  BOOL v46;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v48;
  std::__bracket_expression<char, std::regex_traits<char>> *v49;
  std::basic_regex<char> *v50;
  std::basic_regex<char> *v51;
  BOOL v52;
  std::basic_regex<char> v54;

  if (a2 == a3)
    return a2;
  v6 = (char)*a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == a3)
        goto LABEL_33;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_33;
        v22 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v22);
      v20 = 2;
      return &a2[v20];
    }
    if (v6 != 94)
      goto LABEL_33;
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1E79321A8;
LABEL_22:
    *(_QWORD *)v15 = v19;
    *(_QWORD *)(v15 + 8) = first;
    *(_BYTE *)(v15 + 16) = v16;
    end->__first_ = (std::__node<char> *)v15;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    v20 = 1;
    return &a2[v20];
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1E79321F0;
    goto LABEL_22;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (!v8)
  {
    v8 = *v7 == 63;
    v9 = a2 + 2;
    if (v8 && v9 != a3)
    {
      v11 = (char)*v9;
      if (v11 == 33)
      {
        std::regex_traits<char>::regex_traits(&v54.__traits_);
        memset(&v54.__flags_, 0, 40);
        v54.__flags_ = a1->__flags_;
        v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v54, a2 + 3, a3);
        marked_count = v54.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v54, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v12 == a3 || *v12 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      else
      {
        if (v11 != 61)
          goto LABEL_33;
        std::regex_traits<char>::regex_traits(&v54.__traits_);
        memset(&v54.__flags_, 0, 40);
        v54.__flags_ = a1->__flags_;
        v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v54, a2 + 3, a3);
        v13 = v54.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v54, 0, a1->__marked_count_);
        a1->__marked_count_ += v13;
        if (v12 == a3 || *v12 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      v14 = v12 + 1;
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v54.__start_);
      std::locale::~locale(&v54.__traits_.__loc_);
      if (v12 + 1 != a2)
        return v14;
    }
  }
LABEL_33:
  p_end = &a1->__end_;
  v24 = a1->__end_;
  v26 = a1->__marked_count_;
  v27 = (char)*a2;
  v28 = *a2;
  if (v27 <= 91)
  {
    v29 = a2;
    switch(*a2)
    {
      case '$':
      case ')':
        goto LABEL_91;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_56;
      case '(':
        if (a2 + 1 == a3)
          goto LABEL_94;
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++a1->__open_count_;
          v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 3, a3);
          if (v30 != a3 && *v30 == 41)
          {
            --a1->__open_count_;
            v29 = v30 + 1;
            goto LABEL_91;
          }
LABEL_94:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        v38 = a1->__marked_count_;
        ++a1->__open_count_;
        v39 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v39 == a3)
          goto LABEL_94;
        v40 = v39;
        if (*v39 != 41)
          goto LABEL_94;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v38);
        --a1->__open_count_;
        v29 = v40 + 1;
        goto LABEL_91;
      case '*':
      case '+':
        goto LABEL_58;
      case '.':
        v35 = (std::__node<char> *)operator new();
        v36 = *p_end;
        v37 = (*p_end)->__first_;
        v35->__vftable = (std::__node<char>_vtbl *)&off_1E79322C8;
        v35[1].__vftable = (std::__node<char>_vtbl *)v37;
        v36->__first_ = v35;
        *p_end = (std::__owns_one_state<char> *)(*p_end)->__first_;
        v29 = a2 + 1;
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v29, a3, v24, v26 + 1, a1->__marked_count_ + 1);
      default:
        if (v27 == 91)
        {
          v29 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
          goto LABEL_91;
        }
        if (v27 != 63)
          goto LABEL_56;
        goto LABEL_58;
    }
  }
  v31 = (v27 - 92);
  if (v31 > 0x21)
    goto LABEL_56;
  v29 = a2;
  if (((1 << v31) & 0x300000006) != 0)
    goto LABEL_91;
  if (v31)
  {
    if (v31 == 31)
LABEL_58:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_56:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v28);
    v29 = a2 + 1;
    goto LABEL_91;
  }
  v29 = a2;
  if (v28 != 92)
    goto LABEL_91;
  v32 = (char *)(a2 + 1);
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v33 = *v32;
  v34 = v33 - 48;
  if (v33 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v34);
LABEL_90:
    v29 = a2 + 2;
    goto LABEL_91;
  }
  if ((v33 - 49) <= 8)
  {
    v29 = a2 + 2;
    if (a2 + 2 == a3)
    {
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v41 = *v29;
        if ((v41 - 48) > 9)
          break;
        if (v34 >= 0x19999999)
          goto LABEL_95;
        ++v29;
        v34 = v41 + 10 * v34 - 48;
        if (v29 == a3)
        {
          v29 = a3;
          break;
        }
      }
      if (!v34)
LABEL_95:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
    }
    if (v34 > v26)
      goto LABEL_95;
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v34);
    if (v32 != (char *)v29)
      goto LABEL_91;
  }
  v42 = *v32;
  if (v42 > 99)
  {
    if (v42 == 119)
    {
      v43 = a1;
      v44 = 0;
      goto LABEL_82;
    }
    if (v42 == 115)
    {
      v51 = a1;
      v52 = 0;
      goto LABEL_88;
    }
    if (v42 != 100)
      goto LABEL_83;
    v45 = a1;
    v46 = 0;
LABEL_80:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v45, v46);
    v48 = started->__mask_ | 0x400;
LABEL_89:
    started->__mask_ = v48;
    goto LABEL_90;
  }
  switch(v42)
  {
    case 'D':
      v45 = a1;
      v46 = 1;
      goto LABEL_80;
    case 'S':
      v51 = a1;
      v52 = 1;
LABEL_88:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v51, v52);
      v48 = started->__mask_ | 0x4000;
      goto LABEL_89;
    case 'W':
      v43 = a1;
      v44 = 1;
LABEL_82:
      v49 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v43, v44);
      v49->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v49, 95);
      goto LABEL_90;
  }
LABEL_83:
  v50 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
  if (v32 == (char *)v50)
    v29 = a2;
  else
    v29 = (unsigned __int8 *)v50;
LABEL_91:
  v14 = a2;
  if (v29 != a2)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v29, a3, v24, v26 + 1, a1->__marked_count_ + 1);
  return v14;
}

void sub_1BFAA25B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::StringRegexMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::regex_traits<char> v13[2];
  std::__shared_weak_count *v14;
  void *__p[2];
  _BYTE v16[25];
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  std::vector<std::csub_match> v25[2];
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;

  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v13, a2);
  v3 = *(unsigned __int8 *)(a1 + 23);
  v4 = *(_QWORD *)(a1 + 8);
  if ((v3 & 0x80u) != 0)
  {
    a1 = *(_QWORD *)a1;
    v3 = v4;
  }
  v5 = (char *)(a1 + v3);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  *(_OWORD *)__p = 0u;
  memset(v16, 0, sizeof(v16));
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  memset(v25, 0, 41);
  v6 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v13, (std::sub_match<const char *> *)a1, (std::sub_match<const char *> *)(a1 + v3), v25, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)__p, a1, v5, (uint64_t *)v25, 0);
  if (v25[0].__begin_)
    operator delete(v25[0].__begin_);
  v7 = (v22 == 0) | ~v6;
  if (__p[0])
    operator delete(__p[0]);
  v8 = v7 & v6;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::locale::~locale(&v13[0].__loc_);
  return v8;
}

void sub_1BFAA2728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::string::value_type *a9, std::string::size_type a10, int a11, __int16 a12, char a13, unsigned __int8 a14, std::string *a15, std::string *a16, uint64_t a17, __int128 a18, std::string::size_type a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,__int128 __pa,std::string::size_type a26)
{
  uint64_t v26;
  const std::runtime_error *exception_ptr;
  std::string *v29;
  __int128 v30;
  char *v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;

  if (a2 == 1)
  {
    exception_ptr = (const std::runtime_error *)__cxa_get_exception_ptr(exception_object);
    std::runtime_error::runtime_error((std::runtime_error *)(v26 - 160), exception_ptr);
    *(_QWORD *)(v26 - 160) = MEMORY[0x1E0DE4F78] + 16;
    *(_DWORD *)(v26 - 144) = exception_ptr[1].__vftable;
    __cxa_begin_catch(exception_object);
    std::operator+<char>();
    v29 = std::string::append((std::string *)&a15, "' failed: ");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    a19 = v29->__r_.__value_.__r.__words[2];
    a18 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = (char *)std::runtime_error::what((const std::runtime_error *)(v26 - 160));
    std::string::basic_string[abi:ne180100]<0>(&a9, v31);
    if ((a14 & 0x80u) == 0)
      v32 = (const std::string::value_type *)&a9;
    else
      v32 = a9;
    if ((a14 & 0x80u) == 0)
      v33 = a14;
    else
      v33 = a10;
    v34 = std::string::append((std::string *)&a18, v32, v33);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    a26 = v34->__r_.__value_.__r.__words[2];
    __pa = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__pa, 3u);
    if (SHIBYTE(a26) < 0)
      operator delete((void *)__pa);
    if ((char)a14 < 0)
      operator delete(a9);
    if (SHIBYTE(a19) < 0)
      operator delete((void *)a18);
    if (SHIBYTE(a17) < 0)
      operator delete(a15);
    std::runtime_error::~runtime_error((std::runtime_error *)(v26 - 160));
    __cxa_end_catch();
    JUMPOUT(0x1BFAA270CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::StringRegexSearch(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::sub_match<const char *> *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::regex_traits<char> v10[2];
  std::__shared_weak_count *v11;
  std::vector<std::csub_match> __p[2];
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v10, a2);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  memset(__p, 0, 41);
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (std::sub_match<const char *> *)a1;
  else
    v4 = *(std::sub_match<const char *> **)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  v5 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v10, v4, (std::sub_match<const char *> *)((char *)v4 + v3), __p, 0);
  if (__p[0].__begin_)
    operator delete(__p[0].__begin_);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::locale::~locale(&v10[0].__loc_);
  return v5;
}

void sub_1BFAA29EC(_Unwind_Exception *a1, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, std::string *a8, std::string::value_type *a9, std::locale a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, __int128 a15, std::string::size_type a16, void *__p, __int128 a18, std::string::size_type a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::runtime_error __pa,int a26)
{
  const std::runtime_error *exception_ptr;
  std::string *v29;
  __int128 v30;
  char *v31;
  const std::string::value_type *v32;
  std::string::size_type locale;
  std::string *v34;
  __int128 v35;

  if (__pa.__vftable)
    operator delete(__pa.__vftable);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::locale::~locale((std::locale *)&a18);
  if (a2 == 1)
  {
    exception_ptr = (const std::runtime_error *)__cxa_get_exception_ptr(a1);
    std::runtime_error::runtime_error(&__pa, exception_ptr);
    __pa.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE4F78] + 16);
    a26 = (int)exception_ptr[1].__vftable;
    __cxa_begin_catch(a1);
    std::operator+<char>();
    v29 = std::string::append((std::string *)&a12, "' failed: ");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    a16 = v29->__r_.__value_.__r.__words[2];
    a15 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = (char *)std::runtime_error::what(&__pa);
    std::string::basic_string[abi:ne180100]<0>(&a9, v31);
    if (a11 >= 0)
      v32 = (const std::string::value_type *)&a9;
    else
      v32 = a9;
    if (a11 >= 0)
      locale = HIBYTE(a11);
    else
      locale = (std::string::size_type)a10.__locale_;
    v34 = std::string::append((std::string *)&a15, v32, locale);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    a19 = v34->__r_.__value_.__r.__words[2];
    a18 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&a18, 3u);
    if (SHIBYTE(a19) < 0)
      operator delete((void *)a18);
    if (SHIBYTE(a11) < 0)
      operator delete(a9);
    if (SHIBYTE(a16) < 0)
      operator delete((void *)a15);
    if (SHIBYTE(a14) < 0)
      operator delete(a12);
    std::runtime_error::~runtime_error(&__pa);
    __cxa_end_catch();
    JUMPOUT(0x1BFAA29D4);
  }
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::StringGlobMatch(std::string *a1, const std::string *__s)
{
  std::string::size_type v4;
  const std::string *v5;
  int64_t size;
  const std::string *v7;
  std::string *v8;
  const std::string *v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string::size_type v14;
  std::string::size_type v15;
  const std::string *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  char v23;
  _BOOL8 v24;
  std::string *v25;
  __int128 v26;
  uint64_t v27;
  std::string::size_type v28;
  std::string::size_type v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  std::string v38;
  std::string v39;

  v4 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&__s->__r_.__value_.__s + 23))
    {
      if ((_DWORD)v4 != 1 || __s->__r_.__value_.__s.__data_[0] != 42)
      {
        v5 = __s;
        size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
        goto LABEL_6;
      }
      return 1;
    }
    return 0;
  }
  size = __s->__r_.__value_.__l.__size_;
  if (!size)
    return size;
  v5 = (const std::string *)__s->__r_.__value_.__r.__words[0];
  if (size != 1)
  {
    if (size >= 1)
      goto LABEL_6;
LABEL_21:
    v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    v13 = a1->__r_.__value_.__l.__size_;
    if ((v12 & 0x80u) == 0)
      v14 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    else
      v14 = a1->__r_.__value_.__l.__size_;
    if ((v4 & 0x80u) == 0)
      v15 = v4;
    else
      v15 = __s->__r_.__value_.__l.__size_;
    if (v14 == v15)
    {
      if ((v4 & 0x80u) == 0)
        v16 = __s;
      else
        v16 = (const std::string *)__s->__r_.__value_.__r.__words[0];
      if ((v12 & 0x80) != 0)
        return memcmp(a1->__r_.__value_.__l.__data_, v16, v13) == 0;
      if (*((_BYTE *)&a1->__r_.__value_.__s + 23))
      {
        v17 = v12 - 1;
        do
        {
          v19 = a1->__r_.__value_.__s.__data_[0];
          a1 = (std::string *)((char *)a1 + 1);
          v18 = v19;
          v21 = v16->__r_.__value_.__s.__data_[0];
          v16 = (const std::string *)((char *)v16 + 1);
          v20 = v21;
          v22 = v17-- != 0;
          v23 = v22;
          size = v18 == v20;
        }
        while (v18 == v20 && (v23 & 1) != 0);
        return size;
      }
      return 1;
    }
    return 0;
  }
  if (v5->__r_.__value_.__s.__data_[0] == 42)
    return size;
LABEL_6:
  v7 = (const std::string *)((char *)v5 + size);
  v8 = (std::string *)v5;
  while (1)
  {
    v9 = (const std::string *)memchr(v8, 42, size);
    if (!v9)
      goto LABEL_21;
    if (v9->__r_.__value_.__s.__data_[0] == 42)
      break;
    v8 = (std::string *)((char *)&v9->__r_.__value_.__l.__data_ + 1);
    size = (char *)v7 - (char *)v8;
    if ((char *)v7 - (char *)v8 < 1)
      goto LABEL_21;
  }
  if (v9 == v7)
    goto LABEL_21;
  v10 = (char *)v9 - (char *)v5;
  if (v9 == v5)
  {
    std::string::basic_string(&v39, __s, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v38);
    v24 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)&v39);
    goto LABEL_44;
  }
  if (v10 == -1)
    goto LABEL_21;
  if ((v4 & 0x80) != 0)
    v11 = __s->__r_.__value_.__l.__size_ - 1;
  else
    v11 = v4 - 1;
  if (v10 == v11)
  {
    std::string::basic_string(&v39, __s, 0, v10, (std::allocator<char> *)&v38);
    v24 = siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)&v39);
LABEL_44:
    size = v24;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    return size;
  }
  std::operator+<char>();
  v25 = std::string::append(&v38, "'");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v39, 3u);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v27 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v13 = a1->__r_.__value_.__l.__size_;
  if ((v27 & 0x80u) == 0)
    v28 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    v28 = a1->__r_.__value_.__l.__size_;
  v29 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  v30 = (char)v29;
  if ((v29 & 0x80u) != 0)
    v29 = __s->__r_.__value_.__l.__size_;
  if (v28 != v29)
    return 0;
  if (v30 >= 0)
    v16 = __s;
  else
    v16 = (const std::string *)__s->__r_.__value_.__r.__words[0];
  if ((v27 & 0x80) != 0)
    return memcmp(a1->__r_.__value_.__l.__data_, v16, v13) == 0;
  if (!*((_BYTE *)&a1->__r_.__value_.__s + 23))
    return 1;
  v31 = v27 - 1;
  do
  {
    v33 = a1->__r_.__value_.__s.__data_[0];
    a1 = (std::string *)((char *)a1 + 1);
    v32 = v33;
    v35 = v16->__r_.__value_.__s.__data_[0];
    v16 = (const std::string *)((char *)v16 + 1);
    v34 = v35;
    v22 = v31-- != 0;
    v36 = v22;
    size = v32 == v34;
  }
  while (v32 == v34 && (v36 & 1) != 0);
  return size;
}

void sub_1BFAA2E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::StringContains(char **a1, char *a2)
{
  char *v2;
  char *v3;
  int v4;
  char *v5;
  int64_t v6;
  char *v7;
  char *v8;
  int v11;
  void *v12;
  char *v13;
  char *v14;

  v2 = (char *)*((unsigned __int8 *)a1 + 23);
  if ((char)v2 >= 0)
    v3 = (char *)a1;
  else
    v3 = *a1;
  v4 = a2[23];
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  if (v4 >= 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  if (!v6)
    return 1;
  if ((char)v2 < 0)
    v2 = a1[1];
  v7 = &v2[(_QWORD)v3];
  if ((uint64_t)v2 >= v6)
  {
    v11 = *v5;
    v12 = v3;
    do
    {
      v13 = &v2[-v6];
      if (v13 == (char *)-1)
        break;
      v14 = (char *)memchr(v12, v11, (size_t)(v13 + 1));
      if (!v14)
        break;
      v8 = v14;
      if (!memcmp(v14, v5, v6))
        return v8 != v7 && v8 - v3 != -1;
      v12 = v8 + 1;
      v2 = (char *)(v7 - (v8 + 1));
    }
    while ((uint64_t)v2 >= v6);
  }
  v8 = v7;
  return v8 != v7 && v8 - v3 != -1;
}

uint64_t siri::dialogengine::StringCount(unsigned __int8 *a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t result;
  int v6;

  v2 = a1[23];
  v3 = *((_QWORD *)a1 + 1);
  if ((v2 & 0x80u) == 0)
    v4 = a1;
  else
    v4 = *(unsigned __int8 **)a1;
  result = 0;
  if ((v2 & 0x80u) != 0)
    v2 = v3;
  for (; v2; --v2)
  {
    v6 = *v4++;
    if (v6 == a2)
      ++result;
  }
  return result;
}

unint64_t siri::dialogengine::StringFind(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v5;
  unint64_t v6;
  unsigned __int8 v7;
  void **v8;
  int v9;
  void *v10;
  int64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  int v17;
  char *v18;
  char *v19;
  _QWORD v20[2];
  unsigned __int8 v21;
  void *__p[2];
  unsigned __int8 v23;

  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  v5 = (char *)v20;
  siri::dialogengine::StringToLower(a2, (uint64_t)v20);
  v6 = v23;
  v7 = v23;
  if ((v23 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v23 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  v9 = (char)v21;
  v10 = (void *)v20[0];
  if ((v21 & 0x80u) == 0)
  {
    v11 = v21;
  }
  else
  {
    v5 = (char *)v20[0];
    v11 = v20[1];
  }
  if (v6 >= a3)
  {
    if (v11)
    {
      v12 = (char *)v8 + a3;
      v13 = (char *)v8 + v6;
      v14 = (char *)(v6 - a3);
      if ((uint64_t)v14 >= v11)
      {
        v17 = *v5;
        do
        {
          v18 = &v14[-v11];
          if (v18 == (char *)-1)
            break;
          v19 = (char *)memchr(v12, v17, (size_t)(v18 + 1));
          if (!v19)
            break;
          v15 = v19;
          if (!memcmp(v19, v5, v11))
            goto LABEL_14;
          v12 = v15 + 1;
          v14 = (char *)(v13 - (v15 + 1));
        }
        while ((uint64_t)v14 >= v11);
      }
      v15 = v13;
LABEL_14:
      if (v15 == v13)
        a3 = -1;
      else
        a3 = v15 - (char *)v8;
    }
  }
  else
  {
    a3 = -1;
  }
  if (v9 < 0)
  {
    operator delete(v10);
    if ((v23 & 0x80) == 0)
      return a3;
LABEL_21:
    operator delete(__p[0]);
    return a3;
  }
  if ((v7 & 0x80) != 0)
    goto LABEL_21;
  return a3;
}

void sub_1BFAA311C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::StringRFind(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  void **v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned __int8 *v12;
  BOOL v13;
  void **v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  void *v21[2];
  unsigned __int8 v22;
  void *__p[2];
  unsigned __int8 v24;

  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  siri::dialogengine::StringToLower(a2, (uint64_t)v21);
  v5 = (unint64_t)__p[1];
  if ((v24 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v24 & 0x80u) == 0)
    v5 = v24;
  if ((v22 & 0x80u) == 0)
    v7 = v21;
  else
    v7 = (void **)v21[0];
  if ((v22 & 0x80u) == 0)
    v8 = v22;
  else
    v8 = (unint64_t)v21[1];
  if (v5 >= a3)
    v9 = a3;
  else
    v9 = v5;
  v10 = (char *)(v5 - v9);
  v11 = (char *)(v8 + v9);
  if ((unint64_t)v10 > v8)
    v5 = (unint64_t)v11;
  v12 = (unsigned __int8 *)v6 + v5;
  if (v8)
    v13 = v5 == 0;
  else
    v13 = 1;
  if (v13)
  {
    v17 = (unsigned __int8 *)v6 + v5;
  }
  else
  {
    v16 = v6;
    v17 = (unsigned __int8 *)v6 + v5;
    do
    {
      if (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v7)
      {
        v18 = 1;
        while (v8 != v18)
        {
          if ((unsigned __int8 *)((char *)v16 + v18) == v12)
            goto LABEL_23;
          v19 = *((unsigned __int8 *)v16 + v18);
          v20 = *((unsigned __int8 *)v7 + v18++);
          if (v19 != v20)
            goto LABEL_33;
        }
        v17 = (unsigned __int8 *)v16;
      }
LABEL_33:
      v16 = (void **)((char *)v16 + 1);
    }
    while (v16 != (void **)v12);
  }
LABEL_23:
  if ((char)v22 < 0)
  {
    operator delete(v21[0]);
    if ((v24 & 0x80) == 0)
      goto LABEL_25;
  }
  else if ((v24 & 0x80) == 0)
  {
    goto LABEL_25;
  }
  operator delete(__p[0]);
LABEL_25:
  if (v17 != v12 || v8 == 0)
    return v17 - (unsigned __int8 *)v6;
  else
    return -1;
}

void sub_1BFAA3270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringReplace(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v6;
  int v7;
  std::string::size_type v8;
  std::string::size_type v11;
  unint64_t size;
  int v13;
  std::string::size_type v14;
  int64_t v15;
  char *v16;
  std::string::size_type v17;
  void *v18;
  char *v19;
  int64_t v20;
  int v21;
  int64_t v22;
  char *v23;
  char *v24;
  std::string::size_type v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  uint64_t v29;
  int v30;
  std::string::size_type v31;
  BOOL v32;

  if (a2[23] >= 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = *(unsigned __int8 *)(a1 + 23);
  if (!v6)
  {
    if ((v7 & 0x80) == 0)
      goto LABEL_9;
    v11 = *(_QWORD *)(a1 + 8);
    goto LABEL_61;
  }
  LODWORD(v8) = a4;
  if ((v7 & 0x80) == 0)
  {
    if (v7 > a4)
    {
      *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      goto LABEL_12;
    }
LABEL_9:
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    return;
  }
  v11 = *(_QWORD *)(a1 + 8);
  if ((int)v11 <= a4)
  {
LABEL_61:
    std::string::__init_copy_ctor_external(a5, *(const std::string::value_type **)a1, v11);
    return;
  }
  std::string::__init_copy_ctor_external(a5, *(const std::string::value_type **)a1, v11);
LABEL_12:
  size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
  v13 = (char)size;
  if ((size & 0x80u) != 0)
    size = a5->__r_.__value_.__l.__size_;
  if (size >= (int)v8)
  {
    v8 = (int)v8;
    v32 = a2[23] < 0;
    v14 = a2[23];
    v31 = *((_QWORD *)a2 + 1);
    if (a2[23] >= 0)
      v15 = a2[23];
    else
      v15 = *((_QWORD *)a2 + 1);
    if (a2[23] >= 0)
      v16 = a2;
    else
      v16 = *(char **)a2;
    if (v13 >= 0)
      v17 = (std::string::size_type)a5;
    else
      v17 = a5->__r_.__value_.__r.__words[0];
    while (!v15)
    {
LABEL_35:
      if (v8 != -1)
      {
        if (v32)
          v25 = v31;
        else
          v25 = v14;
        v26 = *(char *)(a3 + 23);
        if (v26 >= 0)
          v27 = (const std::string::value_type *)a3;
        else
          v27 = *(const std::string::value_type **)a3;
        if (v26 >= 0)
          v28 = *(unsigned __int8 *)(a3 + 23);
        else
          v28 = *(_QWORD *)(a3 + 8);
        std::string::replace(a5, v8, v25, v27, v28);
        v29 = *(unsigned __int8 *)(a3 + 23);
        if ((v29 & 0x80u) != 0)
          v29 = *(_QWORD *)(a3 + 8);
        v8 += v29;
        size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) == 0)
          v17 = (std::string::size_type)a5;
        else
          v17 = a5->__r_.__value_.__r.__words[0];
        if ((size & 0x80u) != 0)
          size = a5->__r_.__value_.__l.__size_;
        v30 = a2[23];
        v32 = v30 < 0;
        v14 = a2[23];
        v16 = v30 >= 0 ? a2 : *(char **)a2;
        v31 = *((_QWORD *)a2 + 1);
        v15 = v30 >= 0 ? a2[23] : *((_QWORD *)a2 + 1);
        if (size >= v8)
          continue;
      }
      return;
    }
    v18 = (void *)(v17 + v8);
    v19 = (char *)(v17 + size);
    v20 = size - v8;
    if (v20 >= v15)
    {
      v21 = *v16;
      do
      {
        v22 = v20 - v15;
        if (v22 == -1)
          break;
        v23 = (char *)memchr(v18, v21, v22 + 1);
        if (!v23)
          break;
        v24 = v23;
        if (!memcmp(v23, v16, v15))
        {
          if (v24 == v19)
            return;
          v8 = (std::string::size_type)&v24[-v17];
          goto LABEL_35;
        }
        v18 = v24 + 1;
        v20 = v19 - (v24 + 1);
      }
      while (v20 >= v15);
    }
  }
}

void sub_1BFAA34C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::StringToInt(const std::string *a1, _BYTE *a2, char a3)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[13];
  char v11;
  uint64_t v12;
  std::string v13;
  unsigned int v14;

  v14 = 0;
  siri::dialogengine::StringTrim(" \t\n\r", a1, &v13);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10, &v13);
  MEMORY[0x1C3B8D668](v10, &v14);
  v5 = (*(_DWORD *)((char *)&v10[4] + *(_QWORD *)(v10[0] - 24)) >> 1) & 1;
  if ((a3 & 1) == 0)
    v5 = (*(_DWORD *)((_BYTE *)&v10[4] + *(_QWORD *)(v10[0] - 24)) & 5) == 0;
  if ((*(_DWORD *)((_BYTE *)&v10[4] + *(_QWORD *)(v10[0] - 24)) & 5) != 0)
    v6 = 0;
  else
    v6 = v5;
  v10[0] = *MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[2] = v7;
  v10[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&v12);
  if (a2)
    *a2 = v6;
  if (v6)
  {
    v8 = v14;
  }
  else
  {
    v8 = 0x7FFFFFFFLL;
    v14 = 0x7FFFFFFF;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1BFAA360C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v29 + *(_QWORD *)(*MEMORY[0x1E0DE4F50] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&a29);
  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::StringToUInt(const std::string *a1, _BYTE *a2, char a3)
{
  std::string *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[13];
  char v12;
  uint64_t v13;
  std::string v14;
  unsigned int v15;

  v15 = 0;
  siri::dialogengine::StringTrim(" \t\n\r", a1, &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v14.__r_.__value_.__l.__size_)
      goto LABEL_9;
    v5 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&v14.__r_.__value_.__s + 23))
      goto LABEL_9;
    v5 = &v14;
  }
  if (v5->__r_.__value_.__s.__data_[0] == 45)
  {
    v6 = 0;
    if (!a2)
      goto LABEL_18;
LABEL_17:
    *a2 = v6;
    goto LABEL_18;
  }
LABEL_9:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11, &v14);
  MEMORY[0x1C3B8D674](v11, &v15);
  v7 = (*(_DWORD *)((char *)&v11[4] + *(_QWORD *)(v11[0] - 24)) >> 1) & 1;
  if ((a3 & 1) == 0)
    v7 = (*(_DWORD *)((_BYTE *)&v11[4] + *(_QWORD *)(v11[0] - 24)) & 5) == 0;
  if ((*(_DWORD *)((_BYTE *)&v11[4] + *(_QWORD *)(v11[0] - 24)) & 5) != 0)
    v6 = 0;
  else
    v6 = v7;
  v11[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11[2] = v8;
  v11[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&v13);
  if (a2)
    goto LABEL_17;
LABEL_18:
  if (v6)
  {
    v9 = v15;
  }
  else
  {
    v9 = 0xFFFFFFFFLL;
    v15 = -1;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1BFAA37F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v29 + *(_QWORD *)(*MEMORY[0x1E0DE4F50] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&a29);
  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::StringToInt64(const std::string *a1, _BYTE *a2, char a3)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[13];
  char v11;
  uint64_t v12;
  std::string v13;
  uint64_t v14;

  v14 = 0;
  siri::dialogengine::StringTrim(" \t\n\r", a1, &v13);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10, &v13);
  MEMORY[0x1C3B8D680](v10, &v14);
  v5 = (*(_DWORD *)((char *)&v10[4] + *(_QWORD *)(v10[0] - 24)) >> 1) & 1;
  if ((a3 & 1) == 0)
    v5 = (*(_DWORD *)((_BYTE *)&v10[4] + *(_QWORD *)(v10[0] - 24)) & 5) == 0;
  if ((*(_DWORD *)((_BYTE *)&v10[4] + *(_QWORD *)(v10[0] - 24)) & 5) != 0)
    v6 = 0;
  else
    v6 = v5;
  v10[0] = *MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[2] = v7;
  v10[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&v12);
  if (a2)
    *a2 = v6;
  if (v6)
  {
    v8 = v14;
  }
  else
  {
    v8 = 0x7FFFFFFFFFFFFFFFLL;
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1BFAA399C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v29 + *(_QWORD *)(*MEMORY[0x1E0DE4F50] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&a29);
  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::StringToUInt64(const std::string *a1, _BYTE *a2, char a3)
{
  std::string *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[13];
  char v12;
  uint64_t v13;
  std::string v14;
  uint64_t v15;

  v15 = 0;
  siri::dialogengine::StringTrim(" \t\n\r", a1, &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v14.__r_.__value_.__l.__size_)
      goto LABEL_9;
    v5 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&v14.__r_.__value_.__s + 23))
      goto LABEL_9;
    v5 = &v14;
  }
  if (v5->__r_.__value_.__s.__data_[0] == 45)
  {
    v6 = 0;
    if (!a2)
      goto LABEL_18;
LABEL_17:
    *a2 = v6;
    goto LABEL_18;
  }
LABEL_9:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11, &v14);
  MEMORY[0x1C3B8D68C](v11, &v15);
  v7 = (*(_DWORD *)((char *)&v11[4] + *(_QWORD *)(v11[0] - 24)) >> 1) & 1;
  if ((a3 & 1) == 0)
    v7 = (*(_DWORD *)((_BYTE *)&v11[4] + *(_QWORD *)(v11[0] - 24)) & 5) == 0;
  if ((*(_DWORD *)((_BYTE *)&v11[4] + *(_QWORD *)(v11[0] - 24)) & 5) != 0)
    v6 = 0;
  else
    v6 = v7;
  v11[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11[2] = v8;
  v11[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&v13);
  if (a2)
    goto LABEL_17;
LABEL_18:
  if (v6)
  {
    v9 = v15;
  }
  else
  {
    v9 = -1;
    v15 = -1;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1BFAA3B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v29 + *(_QWORD *)(*MEMORY[0x1E0DE4F50] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&a29);
  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::StringFromDouble@<X0>(siri::dialogengine *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  _QWORD v29[2];
  uint64_t v30;
  _QWORD v31[8];
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35[20];

  v3 = this;
  v5 = MEMORY[0x1E0DE4FD0];
  v6 = MEMORY[0x1E0DE4FD0] + 104;
  v35[0] = MEMORY[0x1E0DE4FD0] + 104;
  v7 = MEMORY[0x1E0DE4FD0] + 64;
  v8 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v30 = MEMORY[0x1E0DE4FD0] + 64;
  v29[0] = v9;
  *(_QWORD *)((char *)v29 + *(_QWORD *)(v9 - 24)) = v10;
  v29[1] = 0;
  v11 = (std::ios_base *)((char *)v29 + *(_QWORD *)(v29[0] - 24));
  std::ios_base::init(v11, v31);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v8[5];
  v30 = v8[4];
  *(_QWORD *)((char *)&v31[-1] + *(_QWORD *)(v30 - 24)) = v12;
  v29[0] = v8[1];
  *(_QWORD *)((char *)v29 + *(_QWORD *)(v29[0] - 24)) = v8[6];
  v35[0] = v6;
  v29[0] = v5 + 24;
  v30 = v7;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x1E0DE4FB8];
  v31[0] = MEMORY[0x1E0DE4FB8] + 16;
  v32 = 0u;
  v33 = 0u;
  v34 = 16;
  v14 = v30;
  *(_DWORD *)((char *)v31 + *(_QWORD *)(v30 - 24)) = *(_DWORD *)((_BYTE *)v31 + *(_QWORD *)(v30 - 24)) & 0xFFFFFEFB | 4;
  if ((v3 & 0x80000000) == 0)
    *(_QWORD *)((char *)&v31[1] + *(_QWORD *)(v14 - 24)) = v3;
  std::ostream::operator<<();
  std::stringbuf::str();
  std::string::basic_string[abi:ne180100]<0>(v27, ".");
  if (siri::dialogengine::StringContains((char **)a2, (char *)v27))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "e");
    v15 = siri::dialogengine::StringContains((char **)a2, (char *)__p) ^ 1;
    if (v26 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v15 = 0;
  }
  if ((v28 & 0x80000000) == 0)
  {
    if (v15)
      goto LABEL_11;
    goto LABEL_24;
  }
  operator delete(v27[0]);
  if (!v15)
    goto LABEL_24;
LABEL_11:
  while ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v16 = *(unsigned __int8 *)(a2 + 23);
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_24;
    v17 = *(unsigned __int8 *)(a2 - 1 + v16);
    if (v17 != 48)
    {
      if (v17 != 46)
        goto LABEL_24;
      v22 = v16 - 1;
      *(_BYTE *)(a2 + 23) = v16 - 1;
      v19 = (char *)a2;
      goto LABEL_23;
    }
    v18 = v16 - 1;
    *(_BYTE *)(a2 + 23) = v16 - 1;
    v19 = (char *)a2;
LABEL_18:
    v19[v18] = 0;
  }
  v20 = *(_QWORD *)(a2 + 8);
  if (!v20)
    goto LABEL_24;
  v19 = *(char **)a2;
  v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v20 - 1);
  if (v21 == 48)
  {
    v18 = v20 - 1;
    *(_QWORD *)(a2 + 8) = v18;
    goto LABEL_18;
  }
  if (v21 != 46)
    goto LABEL_24;
  v22 = v20 - 1;
  *(_QWORD *)(a2 + 8) = v20 - 1;
LABEL_23:
  v19[v22] = 0;
LABEL_24:
  v29[0] = *v8;
  v23 = v8[9];
  *(_QWORD *)((char *)v29 + *(_QWORD *)(v29[0] - 24)) = v8[8];
  v30 = v23;
  v31[0] = v13 + 16;
  if (SBYTE7(v33) < 0)
    operator delete((void *)v32);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8D80C](v35);
}

void sub_1BFAA3EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

double siri::dialogengine::StringToDouble(const std::string *a1, _BYTE *a2)
{
  std::string *p_p;
  double v5;
  char v6;
  std::string __p;
  char *v9;

  if (siri::dialogengine::IsStringANumber(a1))
  {
    v9 = 0;
    siri::dialogengine::StringTrim(" \t\n\r", a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v5 = strtod((const char *)p_p, &v9);
    if (a2)
    {
      v6 = (char)v9;
      if (v9)
        v6 = *v9 == 0;
      *a2 = v6;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v5 = 0.0;
    if (a2)
      *a2 = 0;
  }
  return v5;
}

void sub_1BFAA3FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsStringANumber(const std::string *a1)
{
  std::string::size_type size;
  std::string *p_p;
  std::string *v3;
  int v4;
  std::string *v5;
  _BOOL8 v6;
  unsigned __int8 *v7;
  std::string *v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v14;
  int64_t v15;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  std::string __p;

  siri::dialogengine::StringTrim(" \t\n\r", a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (!size)
  {
    v6 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_42;
    return v6;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v3 = (std::string *)((char *)p_p + size);
  v4 = p_p->__r_.__value_.__s.__data_[0];
  if (v4 == 45 || v4 == 43)
    v5 = (std::string *)((char *)&p_p->__r_.__value_.__l.__data_ + 1);
  else
    v5 = p_p;
  v7 = (unsigned __int8 *)p_p + size;
  v8 = (std::string *)((char *)p_p + size);
  if (v5 == v3)
    goto LABEL_25;
  while (v5->__r_.__value_.__s.__data_[0] - 48 <= 9)
  {
    v5 = (std::string *)((char *)v5 + 1);
    if (v5 == v3)
    {
      v5 = (std::string *)((char *)p_p + size);
      break;
    }
  }
  v8 = (std::string *)((char *)p_p + size);
  if (v5 == v3)
    goto LABEL_25;
  if (v5->__r_.__value_.__s.__data_[0] != 46 || (std::string *)((char *)&v5->__r_.__value_.__l.__data_ + 1) == v3)
  {
    v8 = v5;
LABEL_25:
    v10 = (unsigned __int8 *)v8;
    goto LABEL_26;
  }
  v17 = (uint64_t)&v7[~(unint64_t)v5];
  v18 = (char *)p_p + size - (char *)v5;
  v19 = 1;
  while (v5->__r_.__value_.__s.__data_[v19] - 48 <= 9)
  {
    if (v18 == ++v19)
    {
      v10 = v7;
      goto LABEL_51;
    }
  }
  v10 = (unsigned __int8 *)v5 + v19;
  v17 = v19 - 1;
LABEL_51:
  v8 = v5;
  if (!v17)
    goto LABEL_25;
LABEL_26:
  v11 = (unsigned __int8 *)v3;
  if (v10 == (unsigned __int8 *)v3)
  {
LABEL_40:
    v7 = v11;
    goto LABEL_41;
  }
  v12 = v10 + 1;
  if ((*v10 | 0x20) != 0x65 || v12 == (unsigned __int8 *)v3)
    goto LABEL_39;
  v14 = *v12;
  if (v14 == 45 || v14 == 43)
    v12 = v10 + 2;
  if (v12 == (unsigned __int8 *)v3)
  {
LABEL_39:
    v11 = v10;
    goto LABEL_40;
  }
  v15 = 0;
  while (v12[v15] - 48 <= 9)
  {
    if (&v12[++v15] == (unsigned __int8 *)v3)
    {
      v15 = v7 - v12;
      goto LABEL_48;
    }
  }
  v7 = &v12[v15];
LABEL_48:
  v11 = v10;
  if (!v15)
    goto LABEL_40;
LABEL_41:
  v6 = v3 == (std::string *)v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_42:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

uint64_t siri::dialogengine::StringToU32String@<X0>(uint64_t a1@<X0>, std::basic_string<char32_t> *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _OWORD v8[3];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)(v4 + 8) = xmmword_1BFCCD7F0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E7932748;
  memset(v8, 0, sizeof(v8));
  v9 = v4;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v18 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(a2, (uint64_t)v8, v6, &v6[v5]);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v8);
}

void sub_1BFAA42C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::U32StringToString@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _OWORD v8[3];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)(v4 + 8) = xmmword_1BFCCD7F0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E7932748;
  memset(v8, 0, sizeof(v8));
  v9 = v4;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(a2, (uint64_t)v8, v6, &v6[4 * v5]);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v8);
}

void sub_1BFAA43CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::StringSplit(unsigned __int8 *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t *v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  int64x2_t *v22;
  int64x2_t *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char **v30;
  _OWORD v31[16];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  memset(v31, 0, sizeof(v31));
  v5 = *a2;
  if (*a2)
  {
    v6 = a2 + 1;
    do
    {
      *((_BYTE *)v31 + v5) = 1;
      v7 = *v6++;
      v5 = v7;
    }
    while (v7);
  }
  v8 = (int64x2_t *)operator new(0x80uLL);
  v9 = v8;
  v10 = a1[23];
  v11 = (char)v10;
  v12 = &a1[v10];
  if (v11 >= 0)
    v13 = v12;
  else
    v13 = (unsigned __int8 *)(*(_QWORD *)a1 + *((_QWORD *)a1 + 1));
  if (v11 >= 0)
    v14 = a1;
  else
    v14 = *(unsigned __int8 **)a1;
  if (v14 >= v13)
  {
    v17 = v8;
  }
  else
  {
    v15 = v8 + 8;
    v16 = v8;
    do
    {
      if (*((_BYTE *)v31 + *v14))
      {
        v17 = v16;
      }
      else
      {
        if (v16 >= v15)
        {
          v18 = v16 - v9;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          if (((char *)v15 - (char *)v9) >> 3 > v19)
            v19 = ((char *)v15 - (char *)v9) >> 3;
          if ((unint64_t)((char *)v15 - (char *)v9) >= 0x7FFFFFFFFFFFFFF0)
            v20 = 0xFFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
          {
            if (v20 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v21 = (char *)operator new(16 * v20);
          }
          else
          {
            v21 = 0;
          }
          v22 = (int64x2_t *)&v21[16 * v18];
          *v22 = vdupq_n_s64((unint64_t)v14);
          v17 = v22 + 1;
          if (v16 == v9)
          {
            v23 = v22;
          }
          else
          {
            do
            {
              v23 = v22 - 1;
              v22[-1] = v16[-1];
              --v16;
              --v22;
            }
            while (v16 != v9);
          }
          v15 = (int64x2_t *)&v21[16 * v20];
          if (v9)
            operator delete(v9);
          v9 = v23;
        }
        else
        {
          v16->i64[0] = (uint64_t)v14;
          v16->i64[1] = (uint64_t)v14;
          v17 = v16 + 1;
        }
        v24 = v14 + 1;
        while (v24 != v13)
        {
          v25 = *v24++;
          if (*((_BYTE *)v31 + v25))
          {
            v14 = v24 - 1;
            goto LABEL_38;
          }
        }
        v14 = v13;
LABEL_38:
        v17[-1].i64[1] = (uint64_t)v14;
        v16 = v17;
      }
      ++v14;
    }
    while (v14 < v13);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v26 = (char *)v17 - (char *)v9;
  if (v17 != v9)
  {
    v27 = v26 >> 4;
    std::vector<std::string>::__vallocate[abi:ne180100](a3, v26 >> 4);
    v28 = (char *)a3[1];
    bzero(v28, 24 * ((24 * v27 - 24) / 0x18) + 24);
    v29 = 0;
    a3[1] = &v28[24 * ((24 * v27 - 24) / 0x18) + 24];
    if (v27 <= 1)
      v27 = 1;
    v30 = (char **)&v9->i64[1];
    do
    {
      std::string::append[abi:ne180100]<char const*,0>((std::string *)(*a3 + v29), *(v30 - 1), *v30);
      v30 += 2;
      v29 += 24;
      --v27;
    }
    while (v27);
    goto LABEL_49;
  }
  if (v9)
LABEL_49:
    operator delete(v9);
}

void sub_1BFAA46CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void *v9;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (v9)
    operator delete(v9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::StringJoin(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>(a3, *a1, a1[1], a2);
}

void siri::dialogengine::StringJoinInternal<std::vector<std::string>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;

  if (a2 == a3)
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "");
  }
  else
  {
    v6 = a2;
    if (a3 - a2 == 24)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a1, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      do
      {
        v8 = *(unsigned __int8 *)(a1 + 23);
        if ((v8 & 0x80u) != 0)
          v8 = *(_QWORD *)(a1 + 8);
        if (v8)
        {
          v9 = *(char *)(a4 + 23);
          if (v9 >= 0)
            v10 = (const std::string::value_type *)a4;
          else
            v10 = *(const std::string::value_type **)a4;
          if (v9 >= 0)
            v11 = *(unsigned __int8 *)(a4 + 23);
          else
            v11 = *(_QWORD *)(a4 + 8);
          std::string::append((std::string *)a1, v10, v11);
        }
        v12 = *(char *)(v6 + 23);
        if (v12 >= 0)
          v13 = (const std::string::value_type *)v6;
        else
          v13 = *(const std::string::value_type **)v6;
        if (v12 >= 0)
          v14 = *(unsigned __int8 *)(v6 + 23);
        else
          v14 = *(_QWORD *)(v6 + 8);
        std::string::append((std::string *)a1, v13, v14);
        v6 += 24;
      }
      while (v6 != a3);
    }
  }
}

void sub_1BFAA4828(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringJoin(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;

  v4 = a1[2];
  if (v4 == 1)
  {
    v5 = *a1;
    if (*(char *)(*a1 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)(v5 + 32), *(_QWORD *)(v5 + 40));
    }
    else
    {
      v6 = *(_OWORD *)(v5 + 32);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v5 + 48);
      *(_OWORD *)a3 = v6;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v7 = a1 + 1;
    v8 = (_QWORD *)*a1;
    if ((_QWORD *)*a1 != a1 + 1)
    {
      do
      {
        v10 = *(unsigned __int8 *)(a3 + 23);
        if ((v10 & 0x80u) != 0)
          v10 = *(_QWORD *)(a3 + 8);
        if (v10)
        {
          v11 = *(char *)(a2 + 23);
          if (v11 >= 0)
            v12 = (const std::string::value_type *)a2;
          else
            v12 = *(const std::string::value_type **)a2;
          if (v11 >= 0)
            v13 = *(unsigned __int8 *)(a2 + 23);
          else
            v13 = *(_QWORD *)(a2 + 8);
          std::string::append((std::string *)a3, v12, v13);
        }
        v14 = *((char *)v8 + 55);
        if (v14 >= 0)
          v15 = (const std::string::value_type *)(v8 + 4);
        else
          v15 = (const std::string::value_type *)v8[4];
        if (v14 >= 0)
          v16 = *((unsigned __int8 *)v8 + 55);
        else
          v16 = v8[5];
        std::string::append((std::string *)a3, v15, v16);
        v17 = (_QWORD *)v8[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v8[2];
            v19 = *v18 == (_QWORD)v8;
            v8 = v18;
          }
          while (!v19);
        }
        v8 = v18;
      }
      while (v18 != v7);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "");
  }
}

void sub_1BFAA497C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringJoinMap(_QWORD *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  char *v14;
  char v15;
  std::vector<std::string>::pointer end;
  std::string::size_type v17;
  std::string *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  std::string::size_type v24;
  __int128 *v25;
  __int128 *v26;
  BOOL v27;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v29;
  std::string v32;
  std::string v33;
  void *__p[2];
  unsigned __int8 v35;
  std::vector<std::string> v36;
  std::__split_buffer<std::string> __v;
  _QWORD v38[4];

  v4 = a3;
  v6 = a4;
  v38[2] = *MEMORY[0x1E0C80C00];
  memset(&v36, 0, sizeof(v36));
  v9 = (__int128 *)*a1;
  v7 = (__int128 *)(a1 + 1);
  v8 = v9;
  if (v9 == v7)
  {
    v29 = 0;
    begin = 0;
  }
  else
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v33, v8 + 2);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v33.__r_.__value_.__l.__data_, a2, (uint64_t)&v32);
      if ((v35 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if ((v35 & 0x80u) == 0)
        v12 = v35;
      else
        v12 = (std::string::size_type)__p[1];
      v13 = std::string::append(&v32, (const std::string::value_type *)v11, v12);
      v14 = (char *)v13->__r_.__value_.__r.__words[0];
      v38[0] = v13->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
      v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      end = v36.__end_;
      if (v36.__end_ >= v36.__end_cap_.__value_)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_ - (char *)v36.__begin_) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3) > v20)
          v20 = 0x5555555555555556 * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3) >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v20;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v36.__end_cap_;
        if (v21)
          v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v36.__end_cap_, v21);
        else
          v22 = 0;
        v23 = v22 + v19;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        v24 = v38[0];
        v23->__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        v23->__r_.__value_.__l.__size_ = v24;
        *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v38 + 7);
        *((_BYTE *)&v23->__r_.__value_.__s + 23) = v15;
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v36, &__v);
        v18 = v36.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        v17 = v38[0];
        v36.__end_->__r_.__value_.__l.__data_ = v14;
        end->__r_.__value_.__l.__size_ = v17;
        *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v38 + 7);
        *((_BYTE *)&end->__r_.__value_.__s + 23) = v15;
        v18 = end + 1;
      }
      v36.__end_ = v18;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if ((char)v35 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      v25 = (__int128 *)*((_QWORD *)v8 + 1);
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = *(__int128 **)v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (__int128 *)*((_QWORD *)v8 + 2);
          v27 = *(_QWORD *)v26 == (_QWORD)v8;
          v8 = v26;
        }
        while (!v27);
      }
      v8 = v26;
    }
    while (v26 != v7);
    begin = v36.__begin_;
    v29 = v36.__end_;
    v6 = a4;
    v4 = a3;
  }
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>(v6, (uint64_t)begin, (uint64_t)v29, v4);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_1BFAA4C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, uint64_t a11, void *__pa, uint64_t a13, uint64_t a14, char *a15, char a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::string> *a19, uint64_t a20,char a21)
{
  a15 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseStringList(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  int v18;
  int v19;
  std::string::size_type size;
  int v22;
  std::string *p_str;
  std::string::size_type v24;
  int v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  std::string v29;
  std::string __str;
  char v31;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = a1[1];
  if (v5)
  {
    v8 = 0;
    v9 = MEMORY[0x1E0C80978];
    while (1)
    {
      if ((v4 & 0x80u) == 0)
        v10 = a1;
      else
        v10 = (uint64_t *)*a1;
      v11 = *((char *)v10 + v8);
      if ((v11 & 0x80000000) != 0)
        v12 = __maskrune(v11, 0x4000uLL);
      else
        v12 = *(_DWORD *)(v9 + 4 * v11 + 60) & 0x4000;
      if (v8 < v5 && v12)
      {
        ++v8;
        goto LABEL_76;
      }
      if (v8 >= v5)
        return;
      memset(&__str, 0, sizeof(__str));
      if (*((char *)a1 + 23) >= 0)
        v13 = a1;
      else
        v13 = (uint64_t *)*a1;
      v14 = *((unsigned __int8 *)v13 + v8);
      if (v14 == 44)
      {
        ++v8;
        goto LABEL_75;
      }
      if (v14 == 39)
        v15 = 39;
      else
        v15 = 0;
      if (v14 == 34)
        v16 = 34;
      else
        v16 = v15;
      std::string::push_back(&__str, v14);
      ++v8;
      while (v8 < v5)
      {
        if (*((char *)a1 + 23) >= 0)
          v17 = a1;
        else
          v17 = (uint64_t *)*a1;
        v18 = *((unsigned __int8 *)v17 + v8);
        if (v18 == 39 || v18 == 34)
        {
          if ((_BYTE)v16)
            v19 = v16;
          else
            v19 = v18;
          if (v18 == v16)
            v16 = 0;
          else
            v16 = v19;
        }
        else if (v18 == 44 && v16 == 0)
        {
          ++v8;
          break;
        }
        ++v8;
        std::string::push_back(&__str, v18);
      }
      siri::dialogengine::StringTrim(" \t\n\r", &__str, &v29);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v29;
      if (a2 == 1)
      {
        LOBYTE(size) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__str.__r_.__value_.__l.__size_)
          {
            v22 = *__str.__r_.__value_.__l.__data_;
LABEL_54:
            if (v22 == 34 || v22 == 39)
            {
              std::string::basic_string(&v29, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __str = v29;
              LOBYTE(size) = *((_BYTE *)&v29.__r_.__value_.__s + 23);
            }
            size = size;
            if ((size & 0x80u) == 0)
            {
              p_str = &__str;
            }
            else
            {
              size = __str.__r_.__value_.__l.__size_;
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            v24 = size - 1;
            v25 = p_str->__r_.__value_.__s.__data_[size - 1];
            if (v25 == 39 || v25 == 34)
            {
              std::string::basic_string(&v29, &__str, 0, v24, (std::allocator<char> *)&v31);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __str = v29;
            }
          }
        }
        else if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
        {
          v22 = __str.__r_.__value_.__s.__data_[0];
          goto LABEL_54;
        }
      }
      v26 = a3[1];
      if (v26 >= a3[2])
      {
        v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)&__str);
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a3[1], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          v27 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          *(_QWORD *)(v26 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
          *(_OWORD *)v26 = v27;
        }
        v28 = v26 + 24;
        a3[1] = v26 + 24;
      }
      a3[1] = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
LABEL_75:
      if (v8 >= v5)
        return;
LABEL_76:
      LOBYTE(v4) = *((_BYTE *)a1 + 23);
    }
  }
}

void sub_1BFAA4F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v19;

  v18[1] = v19;
  if (a18 < 0)
    operator delete(__p);
  __p = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::StringFromBool@<X0>(siri::dialogengine *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((_DWORD)this)
    v2 = "true";
  else
    v2 = "false";
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

_QWORD *siri::dialogengine::StringFromOptionalBool@<X0>(__int16 a1@<W0>, _QWORD *a2@<X8>)
{
  const char *v2;
  char *v3;

  v2 = "true";
  if (!(_BYTE)a1)
    v2 = "false";
  if ((a1 & 0xFF00) != 0)
    v3 = (char *)v2;
  else
    v3 = "unset";
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

uint64_t siri::dialogengine::StringToBool(const std::string *a1)
{
  std::string *p_p;
  __darwin_ct_rune_t v2;
  uint64_t v5;
  std::string __p;

  siri::dialogengine::StringTrim(" \t\n\r", a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_15;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_15;
    p_p = &__p;
  }
  v2 = __tolower(p_p->__r_.__value_.__s.__data_[0]) << 24;
  if (v2 == 822083584 || v2 == 1946157056 || v2 == 2030043136)
  {
    v5 = 1;
    goto LABEL_16;
  }
LABEL_15:
  v5 = 0;
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFAA50BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::StringSplitWithDelimiters(std::string *__str@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type size;
  std::string *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  std::string *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string::size_type v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::string::size_type v23;
  int v24;
  std::string::size_type v25;
  BOOL v26;
  std::string *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  std::string *v46;
  std::string *v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  std::string *v56;
  std::string *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  int v61;
  BOOL v62;
  std::string *v63;
  std::string::size_type v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  std::string::size_type v71;
  std::__split_buffer<std::string>::pointer end_high;
  char v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;
  std::string v77;
  std::string v78;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (!size)
      return;
    v9 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&__str->__r_.__value_.__s + 23))
      return;
    v9 = __str;
  }
  v10 = a2[23];
  if ((v10 & 0x80u) == 0)
    v11 = a2;
  else
    v11 = *(unsigned __int8 **)a2;
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)a2 + 1);
  if (v10)
  {
    v12 = (unsigned __int8 *)v9 + size;
    v13 = v9;
LABEL_13:
    v14 = v10;
    v15 = v11;
    while (v13->__r_.__value_.__s.__data_[0] != *v15)
    {
      ++v15;
      if (!--v14)
      {
        v13 = (std::string *)((char *)v13 + 1);
        if (v13 != (std::string *)v12)
          goto LABEL_13;
        v13 = (std::string *)v12;
        break;
      }
    }
    v16 = (char *)v13 - (char *)v9;
    if (v13 == (std::string *)v12)
      v17 = -1;
    else
      v17 = v16;
  }
  else
  {
    v17 = -1;
  }
  v18 = 0;
  while (v17 != -1)
  {
    std::string::basic_string(&v78, __str, v18, v17 - v18, (std::allocator<char> *)&__v);
    v19 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = v78.__r_.__value_.__l.__size_;
    if (v19)
    {
      v20 = *(_QWORD *)(a4 + 8);
      if (v20 >= *(_QWORD *)(a4 + 16))
      {
        v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, (__int128 *)&v78);
      }
      else
      {
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 8), v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
        }
        else
        {
          v21 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
          *(_QWORD *)(v20 + 16) = *((_QWORD *)&v78.__r_.__value_.__l + 2);
          *(_OWORD *)v20 = v21;
        }
        v22 = v20 + 24;
        *(_QWORD *)(a4 + 8) = v20 + 24;
      }
      *(_QWORD *)(a4 + 8) = v22;
    }
    v23 = v17 + 1;
    v24 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    v25 = __str->__r_.__value_.__l.__size_;
    v26 = v24 < 0;
    if (v24 >= 0)
      v27 = __str;
    else
      v27 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (!v26)
      v25 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v28 = a3[23];
    if ((v28 & 0x80u) == 0)
      v29 = a3;
    else
      v29 = *(unsigned __int8 **)a3;
    if ((v28 & 0x80u) != 0)
      v28 = *((_QWORD *)a3 + 1);
    if (v25 <= v23 || v28 == 0)
    {
LABEL_49:
      std::string::basic_string(&v77, __str, v17, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__v);
      v32 = *(_QWORD *)(a4 + 8);
      v31 = *(_QWORD *)(a4 + 16);
      if (v32 >= v31)
      {
        v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *(_QWORD *)a4) >> 3);
        v43 = v42 + 1;
        if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *(_QWORD *)a4) >> 3);
        if (2 * v44 > v43)
          v43 = 2 * v44;
        if (v44 >= 0x555555555555555)
          v45 = 0xAAAAAAAAAAAAAAALL;
        else
          v45 = v43;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
        if (v45)
          v46 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 16, v45);
        else
          v46 = 0;
        v47 = v46 + v42;
        __v.__first_ = v46;
        __v.__begin_ = v47;
        __v.__end_cap_.__value_ = &v46[v45];
        v48 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        v47->__r_.__value_.__r.__words[2] = v77.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
        memset(&v77, 0, sizeof(v77));
        __v.__end_ = v47 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
        v49 = *(_QWORD *)(a4 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v50 = SHIBYTE(v77.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a4 + 8) = v49;
        if (v50 < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
      }
      else
      {
        v33 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        *(_QWORD *)(v32 + 16) = *((_QWORD *)&v77.__r_.__value_.__l + 2);
        *(_OWORD *)v32 = v33;
        *(_QWORD *)(a4 + 8) = v32 + 24;
      }
      v51 = 0;
      v18 = -1;
    }
    else
    {
      v34 = (unsigned __int8 *)v27 + v23;
      v35 = (unsigned __int8 *)v27 + v25;
LABEL_51:
      v36 = v28;
      v37 = v29;
      while (*v34 != *v37)
      {
        ++v37;
        if (!--v36)
        {
          if (++v34 != v35)
            goto LABEL_51;
          goto LABEL_49;
        }
      }
      if (v34 == v35)
        goto LABEL_49;
      v38 = v34 - (unsigned __int8 *)v27;
      if (v34 - (unsigned __int8 *)v27 == -1)
        goto LABEL_49;
      std::string::basic_string(&v77, __str, v17, v38 - v17 + 1, (std::allocator<char> *)&__v);
      v40 = *(_QWORD *)(a4 + 8);
      v39 = *(_QWORD *)(a4 + 16);
      if (v40 >= v39)
      {
        v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *(_QWORD *)a4) >> 3);
        v53 = v52 + 1;
        if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *(_QWORD *)a4) >> 3);
        if (2 * v54 > v53)
          v53 = 2 * v54;
        if (v54 >= 0x555555555555555)
          v55 = 0xAAAAAAAAAAAAAAALL;
        else
          v55 = v53;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
        if (v55)
          v56 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 16, v55);
        else
          v56 = 0;
        v57 = v56 + v52;
        __v.__first_ = v56;
        __v.__begin_ = v57;
        __v.__end_cap_.__value_ = &v56[v55];
        v58 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        v57->__r_.__value_.__r.__words[2] = v77.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
        memset(&v77, 0, sizeof(v77));
        __v.__end_ = v57 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
        v59 = *(_QWORD *)(a4 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v60 = SHIBYTE(v77.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a4 + 8) = v59;
        if (v60 < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
      }
      else
      {
        v41 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        *(_QWORD *)(v40 + 16) = *((_QWORD *)&v77.__r_.__value_.__l + 2);
        *(_OWORD *)v40 = v41;
        *(_QWORD *)(a4 + 8) = v40 + 24;
      }
      v18 = v38 + 1;
      v61 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
      v62 = v61 < 0;
      if (v61 >= 0)
        v63 = __str;
      else
        v63 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if (v62)
        v64 = __str->__r_.__value_.__l.__size_;
      else
        v64 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      v65 = a2[23];
      v66 = *(unsigned __int8 **)a2;
      if ((v65 & 0x80u) != 0)
        v65 = *((_QWORD *)a2 + 1);
      else
        v66 = a2;
      v17 = -1;
      v51 = 1;
      if (v64 > v18 && v65)
      {
        v67 = (unsigned __int8 *)v63 + v18;
        v68 = (unsigned __int8 *)v63 + v64;
LABEL_100:
        v69 = v65;
        v70 = v66;
        while (*v67 != *v70)
        {
          ++v70;
          if (!--v69)
          {
            if (++v67 != v68)
              goto LABEL_100;
            v67 = v68;
            break;
          }
        }
        v71 = v67 - (unsigned __int8 *)v63;
        if (v67 == v68)
          v17 = -1;
        else
          v17 = v71;
        v51 = 1;
      }
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v78.__r_.__value_.__l.__data_);
      if ((v51 & 1) == 0)
        break;
    }
    else if ((v51 & 1) == 0)
    {
      break;
    }
  }
  if (v18 != -1)
  {
    std::string::basic_string((std::string *)&__v, __str, v18, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v77);
    end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_);
    v73 = HIBYTE(__v.__end_);
    if (SHIBYTE(__v.__end_) < 0)
      end_high = __v.__begin_;
    if (end_high)
    {
      v74 = *(_QWORD *)(a4 + 8);
      if (v74 >= *(_QWORD *)(a4 + 16))
      {
        v76 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, (__int128 *)&__v);
      }
      else
      {
        if (SHIBYTE(__v.__end_) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 8), (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
        }
        else
        {
          v75 = *(_OWORD *)&__v.__first_;
          *(_QWORD *)(v74 + 16) = __v.__end_;
          *(_OWORD *)v74 = v75;
        }
        v76 = v74 + 24;
        *(_QWORD *)(a4 + 8) = v74 + 24;
      }
      *(_QWORD *)(a4 + 8) = v76;
      v73 = HIBYTE(__v.__end_);
    }
    if (v73 < 0)
      operator delete(__v.__first_);
  }
}

void sub_1BFAA5648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v27 + 8) = v28;
  if (a27 < 0)
    operator delete(__p);
  a16 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

double siri::dialogengine::SpeakableString::SpeakableString(siri::dialogengine::SpeakableString *this)
{
  double result;

  *((_QWORD *)this + 20) = 0;
  result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 20) = 0;
  result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

uint64_t siri::dialogengine::SpeakableString::SpeakableString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)(a1 + 48) = 0u;
  v3 = a1 + 48;
  *(_QWORD *)(a1 + 160) = 0;
  v4 = a1 + 72;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  siri::dialogengine::SpeakableString::SetString(a1, a2);
  MEMORY[0x1C3B8D53C](v3, "");
  MEMORY[0x1C3B8D53C](v4, "");
  return a1;
}

void sub_1BFAA579C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 167) < 0)
    operator delete(*(void **)(v1 + 144));
  if (*(char *)(v1 + 143) < 0)
    operator delete(*(void **)(v1 + 120));
  if (*(char *)(v1 + 119) < 0)
    operator delete(*(void **)(v1 + 96));
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::SpeakableString::SetString(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  uint64_t v5;
  std::string::size_type v6;
  BOOL v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string::size_type v10;
  char v11;
  char v12;
  std::string *p_p;
  int v14;
  _BOOL4 v17;
  std::string::size_type v18;
  void **v20;
  std::string __p;
  std::string v22;
  char v23;

  std::string::basic_string[abi:ne180100]<0>(&v22, "SS[");
  if (siri::dialogengine::StringStartsWith((std::string *)a2, (unsigned __int8 *)&v22))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "]");
    v4 = siri::dialogengine::StringEndsWith((std::string *)a2, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v4 = 0;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    if (v4)
      goto LABEL_7;
LABEL_50:
    std::string::operator=((std::string *)a1, (const std::string *)a2);
    std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2);
    goto LABEL_51;
  }
  if (!v4)
    goto LABEL_50;
LABEL_7:
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  std::string::basic_string(&__p, (const std::string *)a2, 3uLL, v5 - 4, (std::allocator<char> *)&v22);
  v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v9 = __p.__r_.__value_.__l.__size_;
  if (!v9)
  {
LABEL_46:
    std::string::operator=((std::string *)a1, &__p);
    std::string::operator=((std::string *)(a1 + 24), &__p);
    goto LABEL_47;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    if ((v11 & 1) != 0)
      goto LABEL_15;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (!v7)
      p_p = &__p;
    v14 = p_p->__r_.__value_.__s.__data_[v10];
    if (!((v14 != 47) | v12 & 1))
      break;
    if (v14 == 92)
    {
      v11 = 1;
      goto LABEL_42;
    }
    if (v14 == 34)
    {
      v11 = 0;
      v12 ^= 1u;
      goto LABEL_42;
    }
LABEL_15:
    v11 = 0;
LABEL_42:
    ++v10;
    v7 = (v6 & 0x80u) != 0;
    if ((v6 & 0x80u) == 0)
      v18 = v6;
    else
      v18 = size;
    if (v10 >= v18)
      goto LABEL_46;
  }
  std::string::basic_string(&v22, &__p, v10, 5uLL, (std::allocator<char> *)&v23);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) == 5
      && LODWORD(v22.__r_.__value_.__l.__data_) == 1937011759
      && v22.__r_.__value_.__s.__data_[4] == 58)
    {
      goto LABEL_52;
    }
    goto LABEL_41;
  }
  if (v22.__r_.__value_.__l.__size_ != 5)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
LABEL_41:
    v12 = 0;
    v11 = 0;
    v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    size = __p.__r_.__value_.__l.__size_;
    goto LABEL_42;
  }
  v17 = *(_DWORD *)v22.__r_.__value_.__l.__data_ != 1937011759 || *(_BYTE *)(v22.__r_.__value_.__r.__words[0] + 4) != 58;
  operator delete(v22.__r_.__value_.__l.__data_);
  if (v17)
    goto LABEL_41;
LABEL_52:
  std::string::basic_string(&v22, &__p, 0, v10, (std::allocator<char> *)&v23);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v22;
  std::string::basic_string(&v22, &__p, v10 + 5, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
  v20 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
LABEL_47:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_51:
  MEMORY[0x1C3B8D53C](a1 + 96, "");
  MEMORY[0x1C3B8D53C](a1 + 120, "");
  return MEMORY[0x1C3B8D53C](a1 + 144, "");
}

void sub_1BFAA5AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SpeakableString::SpeakableString(uint64_t a1, const std::string *a2, const std::string *a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  siri::dialogengine::SpeakableString::SetString((std::string *)a1, a2, a3);
}

uint64_t sub_1BFAA5B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1C3B8D53C](v1, "");
  MEMORY[0x1C3B8D53C](v2, "");
  return v0;
}

void sub_1BFAA5BC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 167) < 0)
    operator delete(*(void **)(v1 + 144));
  if (*(char *)(v1 + 143) < 0)
    operator delete(*(void **)(v1 + 120));
  if (*(char *)(v1 + 119) < 0)
    operator delete(*(void **)(v1 + 96));
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SpeakableString::SetString(std::string *a1, const std::string *a2, const std::string *a3)
{
  std::string::operator=(a1, a2);
  std::string::operator=(a1 + 1, a3);
  MEMORY[0x1C3B8D53C](&a1[4], "");
  MEMORY[0x1C3B8D53C](&a1[5], "");
  JUMPOUT(0x1C3B8D53CLL);
}

std::string *siri::dialogengine::SpeakableString::SpeakableString(std::string *this, const siri::dialogengine::SpeakableString *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 120);
    this[5].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 17);
    *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = v9;
  }
  v10 = this + 6;
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v11 = *((_OWORD *)a2 + 9);
    this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 20);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return this;
}

void sub_1BFAA5E20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SpeakableString::GetString(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 24;
  v4 = 24;
  if (a2 == 1)
  {
    v4 = 0;
    v3 = a1;
  }
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(a1 + v4), *(_QWORD *)(v3 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
  }
}

void siri::dialogengine::SpeakableString::ToMultiplexedString(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  const std::string::value_type *v6;
  char *v7;
  const std::string::value_type *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string v15;
  std::string v16;

  if (siri::dialogengine::SpeakableString::SpeakEqualsPrint(this))
  {
    std::operator+<char>();
    std::string::push_back(&v16, 93);
    *a2 = v16;
  }
  else
  {
    std::operator+<char>();
    v4 = std::string::append(&v14, "/tts:");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v8 = (const std::string::value_type *)*((_QWORD *)this + 3);
    v7 = (char *)this + 24;
    v6 = v8;
    v9 = v7[23];
    if (v9 >= 0)
      v10 = v7;
    else
      v10 = v6;
    if (v9 >= 0)
      v11 = v7[23];
    else
      v11 = *((_QWORD *)v7 + 1);
    v12 = std::string::append(&v15, v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v16, 93);
    *a2 = v16;
    memset(&v16, 0, sizeof(v16));
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1BFAA6018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::SpeakableString::SpeakEqualsPrint(siri::dialogengine::SpeakableString *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  const void **v5;
  siri::dialogengine::SpeakableString *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v13;
  _BOOL8 result;

  v1 = *((unsigned __int8 *)this + 47);
  if ((v1 & 0x80u) == 0)
    v2 = *((unsigned __int8 *)this + 47);
  else
    v2 = *((_QWORD *)this + 4);
  v3 = *((unsigned __int8 *)this + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)this + 1);
  if (v2 != v3)
    return 0;
  v5 = (const void **)((char *)this + 24);
  if (v4 >= 0)
    v6 = this;
  else
    v6 = *(siri::dialogengine::SpeakableString **)this;
  if ((v1 & 0x80) != 0)
    return memcmp(*v5, v6, *((_QWORD *)this + 4)) == 0;
  if (!*((_BYTE *)this + 47))
    return 1;
  v7 = v1 - 1;
  do
  {
    v9 = *(unsigned __int8 *)v5;
    v5 = (const void **)((char *)v5 + 1);
    v8 = v9;
    v11 = *(unsigned __int8 *)v6;
    v6 = (siri::dialogengine::SpeakableString *)((char *)v6 + 1);
    v10 = v11;
    v13 = v7-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v13);
  return result;
}

void siri::dialogengine::SpeakableString::GetSpeak(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

std::string *siri::dialogengine::SpeakableString::SetSpeak(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

void siri::dialogengine::SpeakableString::GetPrint(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void siri::dialogengine::SpeakableString::SetRedacted(siri::dialogengine::SpeakableString *this)
{
  MEMORY[0x1C3B8D53C]((char *)this + 48, "[[Redacted]]");
  JUMPOUT(0x1C3B8D53CLL);
}

std::string *siri::dialogengine::SpeakableString::SetRedacted(std::string *a1, const std::string *a2, const std::string *a3)
{
  std::string::operator=(a1 + 2, a2);
  return std::string::operator=(a1 + 3, a3);
}

std::string *siri::dialogengine::SpeakableString::SetRedactedPrint(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

std::string *siri::dialogengine::SpeakableString::SetRedactedSpeak(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 3, a2);
}

void siri::dialogengine::SpeakableString::GetRedactedPrint(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type **v2;
  std::string::size_type v3;
  std::string::size_type v4;
  const std::string::value_type *v5;

  v2 = (const std::string::value_type **)((char *)this + 48);
  if (*((char *)this + 71) < 0)
  {
    v4 = *((_QWORD *)this + 7);
    if (v4)
    {
      v5 = *v2;
      goto LABEL_10;
    }
  }
  else if (*((_BYTE *)this + 71))
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    v3 = *((_QWORD *)this + 8);
LABEL_8:
    a2->__r_.__value_.__r.__words[2] = v3;
    return;
  }
  if ((*((char *)this + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    v3 = *((_QWORD *)this + 2);
    goto LABEL_8;
  }
  v5 = *(const std::string::value_type **)this;
  v4 = *((_QWORD *)this + 1);
LABEL_10:
  std::string::__init_copy_ctor_external(a2, v5, v4);
}

void siri::dialogengine::SpeakableString::GetRedactedSpeak(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  char *v2;
  std::string::size_type v3;
  const std::string::value_type *v4;

  v2 = (char *)this + 72;
  if (*((char *)this + 95) < 0)
  {
    v3 = *((_QWORD *)this + 10);
    if (v3)
    {
      v4 = *(const std::string::value_type **)v2;
      goto LABEL_10;
    }
  }
  else if (*((_BYTE *)this + 95))
  {
LABEL_8:
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    return;
  }
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    v2 = (char *)this + 24;
    goto LABEL_8;
  }
  v4 = (const std::string::value_type *)*((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
LABEL_10:
  std::string::__init_copy_ctor_external(a2, v4, v3);
}

void siri::dialogengine::SpeakableString::GetSemanticConceptValue(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 14);
  }
}

std::string *siri::dialogengine::SpeakableString::SetSemanticConceptValue(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 4, a2);
}

void siri::dialogengine::SpeakableString::GetSemanticConceptCategory(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 15), *((_QWORD *)this + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 120);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 17);
  }
}

std::string *siri::dialogengine::SpeakableString::SetSemanticConceptCategory(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 5, a2);
}

void siri::dialogengine::SpeakableString::GetSemanticConceptInflection(siri::dialogengine::SpeakableString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 167) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 18), *((_QWORD *)this + 19));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 9);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 20);
  }
}

std::string *siri::dialogengine::SpeakableString::SetSemanticConceptInflection(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 6, a2);
}

BOOL siri::dialogengine::SpeakableString::IsEmpty(siri::dialogengine::SpeakableString *this)
{
  uint64_t v2;

  if (*((char *)this + 47) < 0)
  {
    if (*((_QWORD *)this + 4))
      return 0;
  }
  else if (*((_BYTE *)this + 47))
  {
    return 0;
  }
  if (*((char *)this + 23) < 0)
    v2 = *((_QWORD *)this + 1);
  else
    v2 = *((unsigned __int8 *)this + 23);
  return v2 == 0;
}

BOOL siri::dialogengine::SpeakableString::IsRedactedEmpty(siri::dialogengine::SpeakableString *this)
{
  uint64_t v2;

  if (*((char *)this + 71) < 0)
  {
    if (*((_QWORD *)this + 7))
      return 0;
  }
  else if (*((_BYTE *)this + 71))
  {
    return 0;
  }
  if (*((char *)this + 95) < 0)
    v2 = *((_QWORD *)this + 10);
  else
    v2 = *((unsigned __int8 *)this + 95);
  return v2 == 0;
}

uint64_t siri::dialogengine::SpeakableString::Validate(siri::dialogengine::SpeakableString *this, siri::dialogengine::Context *a2)
{
  uint64_t v4;
  const char *v5;
  int v6;
  _QWORD v8[3];
  void **v9;

  siri::dialogengine::SpeakableString::GetPrintChunks(this, (const char *)a2, v8);
  v4 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)v8, a2, 0);
  v9 = (void **)v8;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (!siri::dialogengine::SpeakableString::SpeakEqualsPrint(this))
  {
    siri::dialogengine::SpeakableString::GetSpeakChunks(this, v5, v8);
    v6 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)v8, a2, 0);
    v9 = (void **)v8;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v9);
    return v6 & v4;
  }
  return v4;
}

void sub_1BFAA6454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SpeakableString::GetPrintChunks(siri::dialogengine::SpeakableString *this@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  siri::dialogengine::SpeakableString *v5;

  if (*((char *)this + 71) < 0)
  {
    if (!*((_QWORD *)this + 7))
      goto LABEL_8;
  }
  else if (!*((_BYTE *)this + 71))
  {
    goto LABEL_8;
  }
  v5 = this;
  if (*((char *)this + 23) < 0)
    v5 = *(siri::dialogengine::SpeakableString **)this;
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Redacted print is not empty when parsing print string '%s'", a2, v5);
LABEL_8:
  siri::dialogengine::ParseSpeakableString((uint64_t)this, a3);
}

void siri::dialogengine::SpeakableString::GetSpeakChunks(siri::dialogengine::SpeakableString *this@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;

  if (*((char *)this + 95) < 0)
  {
    if (!*((_QWORD *)this + 10))
      goto LABEL_8;
  }
  else if (!*((_BYTE *)this + 95))
  {
    goto LABEL_8;
  }
  v5 = (_QWORD *)((char *)this + 24);
  if (*((char *)this + 47) < 0)
    v5 = (_QWORD *)*v5;
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Redacted speak is not empty when parsing speak string '%s'", a2, v5);
LABEL_8:
  siri::dialogengine::ParseSpeakableString((uint64_t)this + 24, a3);
}

void siri::dialogengine::SpeakableString::AppendRedacted(siri::dialogengine::SpeakableString *this, const siri::dialogengine::SpeakableString *a2)
{
  uint64_t v4;
  std::string *p_p;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  uint64_t v17;
  std::string __p;
  std::string v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 71) < 0)
  {
    if (!*((_QWORD *)this + 7))
      goto LABEL_5;
LABEL_8:
    siri::dialogengine::SpeakableString::GetRedactedPrint(this, &v19);
    siri::dialogengine::SpeakableString::GetRedactedPrint(a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v7 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
    v8 = v7->__r_.__value_.__r.__words[0];
    v20[0] = v7->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
    v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)this + 71) < 0)
      operator delete(*((void **)this + 6));
    v10 = v20[0];
    *((_QWORD *)this + 6) = v8;
    *((_QWORD *)this + 7) = v10;
    *(_QWORD *)((char *)this + 63) = *(_QWORD *)((char *)v20 + 7);
    *((_BYTE *)this + 71) = v9;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    goto LABEL_20;
  }
  if (*((_BYTE *)this + 71))
    goto LABEL_8;
LABEL_5:
  v4 = *((unsigned __int8 *)a2 + 71);
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 7);
  if (v4)
    goto LABEL_8;
LABEL_20:
  if (*((char *)this + 95) < 0)
  {
    if (!*((_QWORD *)this + 10))
      goto LABEL_24;
LABEL_27:
    siri::dialogengine::SpeakableString::GetRedactedSpeak(this, &v19);
    siri::dialogengine::SpeakableString::GetRedactedSpeak(a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &__p;
    else
      v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v13 = __p.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v19, (const std::string::value_type *)v12, v13);
    v15 = v14->__r_.__value_.__r.__words[0];
    v20[0] = v14->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)this + 95) < 0)
      operator delete(*((void **)this + 9));
    v17 = v20[0];
    *((_QWORD *)this + 9) = v15;
    *((_QWORD *)this + 10) = v17;
    *(_QWORD *)((char *)this + 87) = *(_QWORD *)((char *)v20 + 7);
    *((_BYTE *)this + 95) = v16;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    return;
  }
  if (*((_BYTE *)this + 95))
    goto LABEL_27;
LABEL_24:
  v11 = *((unsigned __int8 *)a2 + 95);
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)a2 + 10);
  if (v11)
    goto LABEL_27;
}

void sub_1BFAA6744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::SpeakableString::Append(siri::dialogengine::SpeakableString *this, const siri::dialogengine::SpeakableString *a2)
{
  std::string *v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  _BOOL4 v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  BOOL v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *result;
  std::string v21;
  std::string v22;
  std::string __p;
  std::string v24;

  if (*((char *)this + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  else
    v22 = *(std::string *)this;
  if (*((char *)this + 47) < 0)
    std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  else
    v21 = *(std::string *)((_BYTE *)this + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v21;
  else
    v4 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v22, (const std::string::value_type *)v4, size);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::StringTrim(" \t\n\r", &__p, &v24);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = v24.__r_.__value_.__l.__size_ == 0;
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = SHIBYTE(v24.__r_.__value_.__r.__words[2]) == 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  else
    v22 = *(std::string *)a2;
  if (*((char *)a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  else
    v21 = *(std::string *)((_BYTE *)a2 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v21;
  else
    v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    v10 = v21.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v22, (const std::string::value_type *)v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::StringTrim(" \t\n\r", &__p, &v24);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v24.__r_.__value_.__l.__size_ == 0;
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v24.__r_.__value_.__r.__words[2]) == 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  siri::dialogengine::SpeakableString::AppendRedacted(this, a2);
  v14 = *((char *)a2 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a2;
  else
    v15 = *(const std::string::value_type **)a2;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)a2 + 23);
  else
    v16 = *((_QWORD *)a2 + 1);
  std::string::append((std::string *)this, v15, v16);
  v17 = *((char *)a2 + 47);
  if (v17 >= 0)
    v18 = (char *)a2 + 24;
  else
    v18 = (const std::string::value_type *)*((_QWORD *)a2 + 3);
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)a2 + 47);
  else
    v19 = *((_QWORD *)a2 + 4);
  result = std::string::append((std::string *)this + 1, v18, v19);
  if (v8)
  {
    std::string::operator=((std::string *)this + 4, (const std::string *)a2 + 4);
    std::string::operator=((std::string *)this + 5, (const std::string *)a2 + 5);
    return std::string::operator=((std::string *)this + 6, (const std::string *)a2 + 6);
  }
  else if (!v13)
  {
    MEMORY[0x1C3B8D53C]((char *)this + 96, "");
    MEMORY[0x1C3B8D53C]((char *)this + 120, "");
    return (std::string *)MEMORY[0x1C3B8D53C]((char *)this + 144, "");
  }
  return result;
}

void sub_1BFAA6A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::SpeakableString::Append@<X0>(siri::dialogengine::SpeakableString *this@<X0>, const siri::dialogengine::SpeakableString *a2@<X1>, std::string *a3@<X8>)
{
  siri::dialogengine::SpeakableString::SpeakableString(a3, this);
  return siri::dialogengine::SpeakableString::Append((siri::dialogengine::SpeakableString *)a3, a2);
}

void sub_1BFAA6AE8(_Unwind_Exception *a1)
{
  void **v1;

  siri::dialogengine::SpeakableString::~SpeakableString(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SpeakableString::Join(siri::dialogengine::SpeakableString **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  siri::dialogengine::SpeakableString *v4;
  siri::dialogengine::SpeakableString *v5;
  char v6;
  __int128 v7;
  std::vector<std::string>::pointer end;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::vector<std::string>::pointer v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  uint64_t v27;
  siri::dialogengine::SpeakableString *v28;
  siri::dialogengine::SpeakableString *v29;
  std::vector<std::string>::pointer v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::string *v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::vector<std::string>::pointer v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::string *v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v49;
  std::string __p;
  std::vector<std::string> v54;
  std::vector<std::string> v55;
  std::string v56;
  std::string __str;
  std::vector<std::string> v58;
  std::vector<std::string> v59;
  std::__split_buffer<std::string> __v;

  v3 = a3;
  memset(&v59, 0, sizeof(v59));
  memset(&v58, 0, sizeof(v58));
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    memset(&__str, 0, sizeof(__str));
    memset(&v56, 0, sizeof(v56));
    v27 = a2;
    goto LABEL_79;
  }
  v6 = 0;
  while (1)
  {
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v7 = *(_OWORD *)v4;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v7;
    }
    end = v59.__end_;
    if (v59.__end_ >= v59.__end_cap_.__value_)
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59.__end_ - (char *)v59.__begin_) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3) > v11)
        v11 = 0x5555555555555556 * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v59.__end_cap_.__value_ - (char *)v59.__begin_) >> 3) >= 0x555555555555555)
        v12 = 0xAAAAAAAAAAAAAAALL;
      else
        v12 = v11;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v59.__end_cap_;
      if (v12)
        v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v59.__end_cap_, v12);
      else
        v13 = 0;
      v14 = v13 + v10;
      __v.__first_ = v13;
      __v.__begin_ = v14;
      __v.__end_cap_.__value_ = &v13[v12];
      v15 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      v14->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      memset(&__str, 0, sizeof(__str));
      __v.__end_ = v14 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v59, &__v);
      v16 = v59.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v59.__end_ = v16;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      v59.__end_->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
      v59.__end_ = end + 1;
    }
    if (*((char *)v4 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v4 + 3), *((_QWORD *)v4 + 4));
    }
    else
    {
      v17 = *(_OWORD *)((char *)v4 + 24);
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 5);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v17;
    }
    v18 = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v58.__end_ - (char *)v58.__begin_) >> 3);
      v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3) > v21)
        v21 = 0x5555555555555556 * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v58.__end_cap_.__value_ - (char *)v58.__begin_) >> 3) >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v21;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v58.__end_cap_;
      if (v22)
        v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v58.__end_cap_, v22);
      else
        v23 = 0;
      v24 = v23 + v20;
      __v.__first_ = v23;
      __v.__begin_ = v24;
      __v.__end_cap_.__value_ = &v23[v22];
      v25 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      v24->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
      memset(&__str, 0, sizeof(__str));
      __v.__end_ = v24 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v58, &__v);
      v26 = v58.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v58.__end_ = v26;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      v19 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      v58.__end_->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      v58.__end_ = v18 + 1;
    }
    if (*((char *)v4 + 71) < 0)
    {
      if (*((_QWORD *)v4 + 7))
        goto LABEL_44;
    }
    else if (*((_BYTE *)v4 + 71))
    {
      goto LABEL_44;
    }
    if (*((char *)v4 + 95) < 0)
    {
      if (!*((_QWORD *)v4 + 10))
        goto LABEL_41;
LABEL_44:
      v4 = (siri::dialogengine::SpeakableString *)((char *)v4 + 168);
      v6 = 1;
      if (v4 == v5)
      {
        memset(&__str, 0, sizeof(__str));
        memset(&v56, 0, sizeof(v56));
        v3 = a3;
        v27 = a2;
        goto LABEL_47;
      }
    }
    else
    {
      if (*((_BYTE *)v4 + 95))
        goto LABEL_44;
LABEL_41:
      v4 = (siri::dialogengine::SpeakableString *)((char *)v4 + 168);
      if (v4 == v5)
      {
        memset(&__str, 0, sizeof(__str));
        memset(&v56, 0, sizeof(v56));
        v3 = a3;
        v27 = a2;
        if ((v6 & 1) != 0)
        {
LABEL_47:
          memset(&v55, 0, sizeof(v55));
          memset(&v54, 0, sizeof(v54));
          v29 = *a1;
          v28 = a1[1];
          if (*a1 == v28)
          {
            v49 = 0;
            begin = 0;
          }
          else
          {
            do
            {
              siri::dialogengine::SpeakableString::GetRedactedPrint(v29, &__p);
              v30 = v55.__end_;
              if (v55.__end_ >= v55.__end_cap_.__value_)
              {
                v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55.__end_ - (char *)v55.__begin_) >> 3);
                v33 = v32 + 1;
                if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((char *)v55.__end_cap_.__value_ - (char *)v55.__begin_) >> 3) > v33)
                  v33 = 0x5555555555555556 * (((char *)v55.__end_cap_.__value_ - (char *)v55.__begin_) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v55.__end_cap_.__value_ - (char *)v55.__begin_) >> 3) >= 0x555555555555555)
                  v34 = 0xAAAAAAAAAAAAAAALL;
                else
                  v34 = v33;
                __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v55.__end_cap_;
                if (v34)
                  v35 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v55.__end_cap_, v34);
                else
                  v35 = 0;
                v36 = v35 + v32;
                __v.__first_ = v35;
                __v.__begin_ = v36;
                __v.__end_cap_.__value_ = &v35[v34];
                v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v36->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
                memset(&__p, 0, sizeof(__p));
                __v.__end_ = v36 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v55, &__v);
                v38 = v55.__end_;
                std::__split_buffer<std::string>::~__split_buffer(&__v);
                v55.__end_ = v38;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              else
              {
                v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v55.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
                v55.__end_ = v30 + 1;
              }
              siri::dialogengine::SpeakableString::GetRedactedSpeak(v29, &__p);
              v39 = v54.__end_;
              if (v54.__end_ >= v54.__end_cap_.__value_)
              {
                v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_ - (char *)v54.__begin_) >> 3);
                v42 = v41 + 1;
                if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) > v42)
                  v42 = 0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) >= 0x555555555555555)
                  v43 = 0xAAAAAAAAAAAAAAALL;
                else
                  v43 = v42;
                __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v54.__end_cap_;
                if (v43)
                  v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v54.__end_cap_, v43);
                else
                  v44 = 0;
                v45 = v44 + v41;
                __v.__first_ = v44;
                __v.__begin_ = v45;
                __v.__end_cap_.__value_ = &v44[v43];
                v46 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v45->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
                memset(&__p, 0, sizeof(__p));
                __v.__end_ = v45 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v54, &__v);
                v47 = v54.__end_;
                std::__split_buffer<std::string>::~__split_buffer(&__v);
                v54.__end_ = v47;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              else
              {
                v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v54.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
                v54.__end_ = v39 + 1;
              }
              v29 = (siri::dialogengine::SpeakableString *)((char *)v29 + 168);
            }
            while (v29 != v28);
            begin = v55.__begin_;
            v49 = v55.__end_;
            v3 = a3;
          }
          siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&__v, (uint64_t)begin, (uint64_t)v49, v27);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
          __str.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
          siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&__v, (uint64_t)v54.__begin_, (uint64_t)v54.__end_, v27);
          *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
          v56.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
          __v.__first_ = (std::__split_buffer<std::string>::pointer)&v54;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)&v55;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        }
LABEL_79:
        siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&__v, (uint64_t)v59.__begin_, (uint64_t)v59.__end_, v27);
        siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v55, (uint64_t)v58.__begin_, (uint64_t)v58.__end_, v27);
        siri::dialogengine::SpeakableString::SpeakableString(v3, (const std::string *)&__v, (const std::string *)&v55);
      }
    }
  }
}

void sub_1BFAA717C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void ***a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void **a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  a12 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a18 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (a32 < 0)
    operator delete(__p);
  if (a39 < 0)
    operator delete(a34);
  a34 = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  a41 = v41 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SpeakableString::GetChunks(siri::dialogengine::SpeakableString *this@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  if ((_DWORD)a2)
    siri::dialogengine::SpeakableString::GetPrintChunks(this, a2, a3);
  else
    siri::dialogengine::SpeakableString::GetSpeakChunks(this, a2, a3);
}

void siri::dialogengine::SpeakableString::GetExpandedSpeak(std::string *__return_ptr a1@<X8>, siri::dialogengine::SpeakableString *this@<X0>, siri::dialogengine::Context *a3@<X1>)
{
  _QWORD v5[3];
  uint64_t *v6[3];
  void *v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  void **v21;

  siri::dialogengine::SpeakableString::GetSpeakChunks(this, (const char *)a3, v5);
  siri::dialogengine::ChunkList::Expand(v6, (siri::dialogengine::ChunkList *)v5, a3);
  siri::dialogengine::ExpandToText((uint64_t)&v7, v6[0], v6[1]);
  if (SHIBYTE(v10) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v9;
    a1->__r_.__value_.__r.__words[2] = v10;
  }
  if (v20 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v8 < 0)
    operator delete(v7);
  v21 = (void **)v6;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v21);
  v21 = (void **)v5;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v21);
}

void sub_1BFAA73C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v15;

  siri::dialogengine::SpeakableString::~SpeakableString(&a15);
  *(_QWORD *)(v15 - 40) = &a12;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 40));
  *(_QWORD *)(v15 - 40) = &a9;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

void siri::dialogengine::SpeakableString::GetExpandedPrint(siri::dialogengine::SpeakableString *this@<X0>, siri::dialogengine::Context *a2@<X1>, std::string *a3@<X8>)
{
  _QWORD v5[3];
  uint64_t *v6[3];
  void *v7[2];
  std::string::size_type v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  void **v21;

  siri::dialogengine::SpeakableString::GetPrintChunks(this, (const char *)a2, v5);
  siri::dialogengine::ChunkList::Expand((uint64_t *)v6, (siri::dialogengine::ChunkList *)v5, a2);
  siri::dialogengine::ExpandToText((uint64_t)v7, v6[0], v6[1]);
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v7[0], (std::string::size_type)v7[1]);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    a3->__r_.__value_.__r.__words[2] = v8;
  }
  if (v20 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
  v21 = (void **)v6;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v21);
  v21 = (void **)v5;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v21);
}

void sub_1BFAA7518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v15;

  siri::dialogengine::SpeakableString::~SpeakableString(&a15);
  *(_QWORD *)(v15 - 40) = &a12;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 40));
  *(_QWORD *)(v15 - 40) = &a9;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

void siri::dialogengine::SpeakableString::GetExpanded(siri::dialogengine::SpeakableString *this@<X0>, siri::dialogengine::Context *a2@<X1>, std::string **a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  const char *v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  std::string __p;
  std::string v13;
  void *v14[2];
  std::string v15;
  uint64_t *v16;
  uint64_t *v17;
  std::string v18;
  void *v19;
  char v20;
  std::string v21;
  std::string v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;

  siri::dialogengine::SpeakableString::GetPrintChunks(this, (const char *)a2, &v18);
  siri::dialogengine::ChunkList::Expand(&v29, (siri::dialogengine::ChunkList *)&v18, a2);
  v14[0] = &v18;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
  v6 = v29;
  v7 = v30;
  if (v29 == v30)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else if (siri::dialogengine::SpeakableString::SpeakEqualsPrint(this))
  {
    siri::dialogengine::ExpandToText((uint64_t)&v18, v6, v7);
    v9 = (std::string *)operator new();
    siri::dialogengine::SpeakableString::SpeakableString(v9, (const siri::dialogengine::SpeakableString *)&v18);
    std::shared_ptr<siri::dialogengine::SpeakableString>::shared_ptr[abi:ne180100]<siri::dialogengine::SpeakableString,void>(a3, (uint64_t)v9);
    v10 = *a3;
    if (*a3)
    {
      std::string::operator=(v10 + 2, &v21);
      std::string::operator=(v10 + 3, &v22);
    }
    if (v28 < 0)
      operator delete(v27);
    if (v26 < 0)
      operator delete(v25);
    if (v24 < 0)
      operator delete(v23);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (v20 < 0)
      operator delete(v19);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  else
  {
    siri::dialogengine::SpeakableString::GetSpeakChunks(this, v8, &v18);
    siri::dialogengine::ChunkList::Expand(&v16, (siri::dialogengine::ChunkList *)&v18, a2);
    v14[0] = &v18;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
    if (v16 != v17)
    {
      siri::dialogengine::ExpandToText((uint64_t)&v18, v29, v30);
      siri::dialogengine::ExpandToText((uint64_t)v14, v16, v17);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v13, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      else
        v13 = v18;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      else
        __p = v15;
      v11 = operator new();
      siri::dialogengine::SpeakableString::SpeakableString(v11, &v13, &__p);
    }
    *a3 = 0;
    a3[1] = 0;
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  }
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
}

void sub_1BFAA78E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;

  if (a21 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a23);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v44 - 240));
  *(_QWORD *)(v44 - 240) = &a44;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 240));
  *(_QWORD *)(v44 - 240) = v44 - 72;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 240));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::SpeakableString::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v7;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  uint64_t result;

  v2 = a1[47];
  if ((v2 & 0x80u) == 0)
    v3 = a1[47];
  else
    v3 = *((_QWORD *)a1 + 4);
  v4 = a2[47];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 4);
  if (v3 != v4)
    return 0;
  v7 = a1;
  v8 = (const void **)(a1 + 24);
  if (v5 >= 0)
    v9 = a2 + 24;
  else
    v9 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *((_QWORD *)a1 + 4)))
      return 0;
  }
  else if (a1[47])
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v10 = v7[23];
  if ((v10 & 0x80u) == 0)
    v11 = v7[23];
  else
    v11 = *((_QWORD *)v7 + 1);
  v12 = a2[23];
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)a2 + 1);
  if (v11 != v12)
    return 0;
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(unsigned __int8 **)a2;
  if ((v10 & 0x80) != 0)
    return memcmp(*(const void **)v7, v14, *((_QWORD *)v7 + 1)) == 0;
  if (!v7[23])
    return 1;
  v15 = v10 - 1;
  do
  {
    v17 = *v7++;
    v16 = v17;
    v19 = *v14++;
    v18 = v19;
    v21 = v15-- != 0;
    result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  const void **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  uint64_t result;

  v2 = a1[47];
  if ((v2 & 0x80u) == 0)
    v3 = a1[47];
  else
    v3 = *((_QWORD *)a1 + 4);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a1;
  v7 = (const void **)(a1 + 24);
  if (v5 >= 0)
    v8 = a2;
  else
    v8 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v7, v8, *((_QWORD *)a1 + 4)))
      return 0;
  }
  else if (a1[47])
  {
    v9 = v8;
    while (*(unsigned __int8 *)v7 == *v9)
    {
      v7 = (const void **)((char *)v7 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v10 = v6[23];
  if ((v10 & 0x80u) == 0)
    v11 = v6[23];
  else
    v11 = *((_QWORD *)v6 + 1);
  if (v11 != v3)
    return 0;
  if ((v10 & 0x80) != 0)
    return memcmp(*(const void **)v6, v8, *((_QWORD *)v6 + 1)) == 0;
  if (!v6[23])
    return 1;
  v12 = v10 - 1;
  do
  {
    v14 = *v6++;
    v13 = v14;
    v16 = *v8++;
    v15 = v16;
    v18 = v12-- != 0;
    result = v13 == v15;
  }
  while (v13 == v15 && v18);
  return result;
}

uint64_t siri::dialogengine::SpeakableString::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return siri::dialogengine::SpeakableString::operator==(a1, a2) ^ 1;
}

{
  return siri::dialogengine::SpeakableString::operator==(a1, a2) ^ 1;
}

uint64_t siri::dialogengine::SpeakableString::Contains(char **a1, char *a2)
{
  if ((siri::dialogengine::StringContains(a1 + 3, a2) & 1) != 0)
    return 1;
  else
    return siri::dialogengine::StringContains(a1, a2);
}

void InitDefaultsscc_info_ActionElement_ActionElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", a4);
  SnippetUI::ActionElement::ActionElement((SnippetUI::ActionElement *)&SnippetUI::_ActionElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ActionElement_default_instance_, v4);
  qword_1ED1D5098 = (uint64_t)&SnippetUI::_Command_default_instance_;
}

void InitDefaultsscc_info_Command_ActionElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", a4);
  SnippetUI::Command::Command((SnippetUI::Command *)&SnippetUI::_Command_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Command_default_instance_, v4);
  byte_1ED1D4E38 = 0;
  qword_1ED1D4E40 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED1D4E48 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1ED1D4E50 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED1D4E58 = &SnippetUI::_Command_ChangeBackground_default_instance_;
  qword_1ED1D4E60 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED1D4E68 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1ED1D4E70 = (uint64_t)&SnippetUI::_Command_ResponseGroup_default_instance_;
  unk_1ED1D4E78 = &SnippetUI::_Command_AppPunchout_default_instance_;
  qword_1ED1D4E80 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
}

void InitDefaultsscc_info_Command_AppPunchout_ActionElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", a4);
  SnippetUI::Command_AppPunchout::Command_AppPunchout((SnippetUI::Command_AppPunchout *)&SnippetUI::_Command_AppPunchout_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Command_AppPunchout_default_instance_, v4);
}

SnippetUI::Command_AppPunchout *SnippetUI::Command_AppPunchout::Command_AppPunchout(SnippetUI::Command_AppPunchout *this)
{
  *(_QWORD *)this = &off_1E7932A98;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_Command_AppPunchout_ActionElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Command_AppPunchout_ActionElement_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFAA7E50(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Command_AppPunchout::~Command_AppPunchout(SnippetUI::Command_AppPunchout *this)
{
  SnippetUI::Command_AppPunchout::~Command_AppPunchout(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7932A98;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 4);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Command_AppPunchout *SnippetUI::Command_AppPunchout::New(SnippetUI::Command_AppPunchout *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_AppPunchout>(0);
}

SnippetUI::Command_AppPunchout *SnippetUI::Command_AppPunchout::New(SnippetUI::Command_AppPunchout *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_AppPunchout>(a2);
}

void SnippetUI::Command_AppPunchout::Clear(SnippetUI::Command_AppPunchout *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  v1 = *((_QWORD *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 4);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v5 = *((_BYTE *)this + 8);
  v4 = (SnippetUI::Command_AppPunchout *)((char *)this + 8);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
}

uint64_t SnippetUI::Command_AppPunchout::IsInitialized(SnippetUI::Command_AppPunchout *this)
{
  return 1;
}

char *SnippetUI::Command_AppPunchout::ByteSizeLong(SnippetUI::Command_AppPunchout *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const google::protobuf::UnknownFieldSet *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v5 = *((_QWORD *)this + 3);
  v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v7 = v6;
  v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  v8 = *((_QWORD *)this + 4);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_18;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_18;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v4 = (const google::protobuf::UnknownFieldSet *)((char *)v4 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_18:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Command_AppPunchout *)((char *)this + 8), v4, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::Command_AppPunchout::GetCachedSize(SnippetUI::Command_AppPunchout *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::Command_AppPunchout::_InternalParse(SnippetUI::Command_AppPunchout *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v4;
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  unsigned int v11;
  char *v14;
  std::string *v15;
  std::string::value_type *v16;
  google::protobuf::internal::ParseContext *v17;
  char *v18;
  google::protobuf::internal *v20;

  v20 = a2;
  v4 = (std::string **)((char *)this + 32);
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v20, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v20;
    TagFallback = (google::protobuf::internal *)((char *)v20 + 1);
    v10 = (char *)*(unsigned __int8 *)v20;
    if ((*(char *)v20 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v20 + 2);
LABEL_6:
      v20 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v20, v10);
    v20 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v11 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
      if (v10 == 26)
      {
        v15 = *v4;
        if (*v4 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v4;
          TagFallback = v20;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.Command.AppPunchout.app_display_name";
        goto LABEL_29;
      }
    }
    else if (v11 == 2)
    {
      if (v10 == 18)
      {
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v20;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.Command.AppPunchout.bundle_id";
        goto LABEL_29;
      }
    }
    else if (v11 == 1 && v10 == 10)
    {
      v15 = *v6;
      if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v15 = *v6;
        TagFallback = v20;
      }
      v16 = (std::string::value_type *)TagFallback;
      v17 = a3;
      v18 = "SnippetUI.Command.AppPunchout.punch_out_uri";
LABEL_29:
      v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
      goto LABEL_30;
    }
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      break;
    v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_30:
    v20 = (google::protobuf::internal *)v14;
    if (!v14)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Command_AppPunchout::InternalSerializeWithCachedSizesToArray(SnippetUI::Command_AppPunchout *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  google::protobuf::internal *v9;
  const char *v10;
  google::protobuf::internal *v11;
  const char *v12;
  uint64_t v13;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.Command.AppPunchout.punch_out_uri");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 2), (char *)a2);
  }
LABEL_7:
  v9 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v9 + 23) < 0)
  {
    v10 = (const char *)*((_QWORD *)v9 + 1);
    if (!v10)
      goto LABEL_13;
    v9 = *(google::protobuf::internal **)v9;
    goto LABEL_12;
  }
  v10 = (const char *)*((unsigned __int8 *)v9 + 23);
  if (*((_BYTE *)v9 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (google::protobuf::internal *)"SnippetUI.Command.AppPunchout.bundle_id");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 3), (char *)a2);
  }
LABEL_13:
  v11 = (google::protobuf::internal *)*((_QWORD *)this + 4);
  if (*((char *)v11 + 23) < 0)
  {
    v12 = (const char *)*((_QWORD *)v11 + 1);
    if (!v12)
      goto LABEL_19;
    v11 = *(google::protobuf::internal **)v11;
    goto LABEL_18;
  }
  v12 = (const char *)*((unsigned __int8 *)v11 + 23);
  if (*((_BYTE *)v11 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (google::protobuf::internal *)"SnippetUI.Command.AppPunchout.app_display_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 4), (char *)a2);
  }
LABEL_19:
  v13 = *((_QWORD *)this + 1);
  if ((v13 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v13 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::Command_AppPunchout::CopyFrom(SnippetUI::Command_AppPunchout *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Command_AppPunchout::Clear(this);
    SnippetUI::Command_AppPunchout::MergeFrom(this, a2);
  }
}

void SnippetUI::Command_AppPunchout::MergeFrom(SnippetUI::Command_AppPunchout *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Command_AppPunchout *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 840);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Command_AppPunchout::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAA8478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Command_AppPunchout::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::Command_AppPunchout::GetMetadata(SnippetUI::Command_AppPunchout *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ActionElement_2eproto);
  return qword_1EF5827B0;
}

void *SnippetUI::Command_AppPunchout::default_instance(SnippetUI::Command_AppPunchout *this)
{
  if (atomic_load(scc_info_Command_AppPunchout_ActionElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Command_AppPunchout_ActionElement_2eproto);
  return &SnippetUI::_Command_AppPunchout_default_instance_;
}

void SnippetUI::Command_AppPunchout::MergeFrom(SnippetUI::Command_AppPunchout *this, const SnippetUI::Command_AppPunchout *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  std::string *v11;
  std::string **v12;
  std::string *v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 855);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Command_AppPunchout *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  v10 = *((_QWORD *)a2 + 4);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      return;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    return;
  }
  v13 = (std::string *)*((_QWORD *)this + 4);
  v12 = (std::string **)((char *)this + 32);
  v11 = v13;
  if (v13 != (std::string *)v10)
  {
    if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v12, v10);
    else
      std::string::operator=(v11, (const std::string *)v10);
  }
}

void sub_1BFAA8664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Command_AppPunchout *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_AppPunchout>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Command_AppPunchout *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Command_AppPunchout *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Command_AppPunchout>);
    SnippetUI::Command_AppPunchout::Command_AppPunchout(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Command_AppPunchout *)operator new();
    SnippetUI::Command_AppPunchout::Command_AppPunchout(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAA8700(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Command_AppPunchout>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Command_ResponseGroup_ActionElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", a4);
  SnippetUI::Command_ResponseGroup::Command_ResponseGroup((SnippetUI::Command_ResponseGroup *)&SnippetUI::_Command_ResponseGroup_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Command_ResponseGroup_default_instance_, v4);
}

SnippetUI::Command_ResponseGroup *SnippetUI::Command_ResponseGroup::Command_ResponseGroup(SnippetUI::Command_ResponseGroup *this)
{
  *(_QWORD *)this = &off_1E7932918;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load(scc_info_Command_ResponseGroup_ActionElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Command_ResponseGroup_ActionElement_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFAA88D0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Command_ResponseGroup::~Command_ResponseGroup(SnippetUI::Command_ResponseGroup *this)
{
  SnippetUI::Command_ResponseGroup::~Command_ResponseGroup(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7932918;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Command_ResponseGroup *SnippetUI::Command_ResponseGroup::New(SnippetUI::Command_ResponseGroup *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ResponseGroup>(0);
}

SnippetUI::Command_ResponseGroup *SnippetUI::Command_ResponseGroup::New(SnippetUI::Command_ResponseGroup *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ResponseGroup>(a2);
}

void SnippetUI::Command_ResponseGroup::Clear(SnippetUI::Command_ResponseGroup *this)
{
  uint64_t v1;
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  v1 = *((_QWORD *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::Command_ResponseGroup *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::Command_ResponseGroup::IsInitialized(SnippetUI::Command_ResponseGroup *this)
{
  return 1;
}

char *SnippetUI::Command_ResponseGroup::ByteSizeLong(SnippetUI::Command_ResponseGroup *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const google::protobuf::UnknownFieldSet *v4;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Command_ResponseGroup *)((char *)this + 8), v4, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::Command_ResponseGroup::GetCachedSize(SnippetUI::Command_ResponseGroup *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::Command_ResponseGroup::_InternalParse(SnippetUI::Command_ResponseGroup *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v4;
  std::string **v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  char *v10;
  std::string *v11;
  google::protobuf::internal *v13;

  v13 = a2;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v13, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v13;
    TagFallback = (google::protobuf::internal *)((char *)v13 + 1);
    v8 = (char *)*(unsigned __int8 *)v13;
    if ((*(char *)v13 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v13 + 2);
LABEL_6:
      v13 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v13, v8);
    v13 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v8 == 10)
    {
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
        TagFallback = v13;
      }
      v10 = google::protobuf::internal::InlineGreedyStringParserUTF8(v11, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Command.ResponseGroup.group_id");
      goto LABEL_16;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v10 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v4, TagFallback, a3, v6);
LABEL_16:
    v13 = (google::protobuf::internal *)v10;
    if (!v10)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Command_ResponseGroup::InternalSerializeWithCachedSizesToArray(SnippetUI::Command_ResponseGroup *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  uint64_t v9;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.Command.ResponseGroup.group_id");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 2), (char *)a2);
  }
LABEL_7:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v9 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::Command_ResponseGroup::CopyFrom(SnippetUI::Command_ResponseGroup *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Command_ResponseGroup::Clear(this);
    SnippetUI::Command_ResponseGroup::MergeFrom(this, a2);
  }
}

void SnippetUI::Command_ResponseGroup::MergeFrom(SnippetUI::Command_ResponseGroup *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Command_ResponseGroup *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 387);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Command_ResponseGroup::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAA8C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Command_ResponseGroup::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::Command_ResponseGroup::GetMetadata(SnippetUI::Command_ResponseGroup *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ActionElement_2eproto);
  return file_level_metadata_ActionElement_2eproto;
}

void *SnippetUI::Command_ResponseGroup::default_instance(SnippetUI::Command_ResponseGroup *this)
{
  if (atomic_load(scc_info_Command_ResponseGroup_ActionElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Command_ResponseGroup_ActionElement_2eproto);
  return &SnippetUI::_Command_ResponseGroup_default_instance_;
}

void SnippetUI::Command_ResponseGroup::MergeFrom(SnippetUI::Command_ResponseGroup *this, const SnippetUI::Command_ResponseGroup *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string **v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 402);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Command_ResponseGroup *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      return;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    return;
  }
  v9 = (std::string *)*((_QWORD *)this + 2);
  v8 = (std::string **)((char *)this + 16);
  v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, v6);
    else
      std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1BFAA8DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Command_ResponseGroup *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ResponseGroup>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Command_ResponseGroup *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Command_ResponseGroup *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Command_ResponseGroup>);
    SnippetUI::Command_ResponseGroup::Command_ResponseGroup(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Command_ResponseGroup *)operator new();
    SnippetUI::Command_ResponseGroup::Command_ResponseGroup(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAA8E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Command_ResponseGroup>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Command_ChangeBackground_ActionElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", a4);
  SnippetUI::Command_ChangeBackground::Command_ChangeBackground((SnippetUI::Command_ChangeBackground *)&SnippetUI::_Command_ChangeBackground_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Command_ChangeBackground_default_instance_, v4);
}

SnippetUI::Command_ChangeBackground *SnippetUI::Command_ChangeBackground::Command_ChangeBackground(SnippetUI::Command_ChangeBackground *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E79329D8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_Command_ChangeBackground_ActionElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Command_ChangeBackground_ActionElement_2eproto);
  return this;
}

void sub_1BFAA8FE0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Command_ChangeBackground::~Command_ChangeBackground(SnippetUI::Command_ChangeBackground *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E79329D8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Command_ChangeBackground *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E79329D8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Command_ChangeBackground *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E79329D8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Command_ChangeBackground *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
}

SnippetUI::Command_ChangeBackground *SnippetUI::Command_ChangeBackground::New(SnippetUI::Command_ChangeBackground *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ChangeBackground>(0);
}

SnippetUI::Command_ChangeBackground *SnippetUI::Command_ChangeBackground::New(SnippetUI::Command_ChangeBackground *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ChangeBackground>(a2);
}

void SnippetUI::Command_ChangeBackground::Clear(SnippetUI::Command_ChangeBackground *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 16);
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::Command_ChangeBackground *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::Command_ChangeBackground::IsInitialized(SnippetUI::Command_ChangeBackground *this)
{
  return 1;
}

char *SnippetUI::Command_ChangeBackground::ByteSizeLong(SnippetUI::Command_ChangeBackground *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::BackgroundElement **v4;
  uint64_t v5;
  SnippetUI::BackgroundElement *v6;
  char *v7;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::BackgroundElement **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::BackgroundElement::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Command_ChangeBackground *)((char *)this + 8), v2, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::Command_ChangeBackground::GetCachedSize(SnippetUI::Command_ChangeBackground *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::Command_ChangeBackground::_InternalParse(SnippetUI::Command_ChangeBackground *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  unsigned int *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  BOOL v10;
  char *v11;
  google::protobuf::internal *v12;
  int *v13;
  uint64_t v14;
  int v15;
  SnippetUI::BackgroundElement *v16;
  uint64_t v17;
  uint64_t v18;
  google::protobuf::internal *v20;

  v20 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 16);
LABEL_2:
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v20, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v20 + 1);
    v9 = (char *)*(unsigned __int8 *)v20;
    if ((*(char *)v20 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v20 + 2);
LABEL_6:
      v20 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v20, v9);
    v20 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v9 == 10)
    {
      v11 = (char *)TagFallback - 1;
      while (1)
      {
        v12 = (google::protobuf::internal *)(v11 + 1);
        v20 = (google::protobuf::internal *)(v11 + 1);
        v13 = (int *)*((_QWORD *)this + 4);
        if (!v13)
          break;
        v14 = *((int *)this + 6);
        v15 = *v13;
        if ((int)v14 >= *v13)
        {
          if (v15 == *((_DWORD *)this + 7))
          {
LABEL_20:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v15 + 1);
            v13 = (int *)*((_QWORD *)this + 4);
            v15 = *v13;
          }
          *v13 = v15 + 1;
          v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BackgroundElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                          + 2));
          v17 = *((_QWORD *)this + 4);
          v18 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v18 + 1;
          *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
          v12 = v20;
          goto LABEL_22;
        }
        *((_DWORD *)this + 6) = v14 + 1;
        v16 = *(SnippetUI::BackgroundElement **)&v13[2 * v14 + 2];
LABEL_22:
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::BackgroundElement>(a3, v16, v12);
        v20 = (google::protobuf::internal *)v11;
        if (!v11)
          return 0;
        if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
          goto LABEL_2;
      }
      v15 = *((_DWORD *)this + 7);
      goto LABEL_20;
    }
    if ((_DWORD)v9)
      v10 = (v9 & 7) == 4;
    else
      v10 = 1;
    if (v10)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
      return TagFallback;
    }
    v20 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v5, TagFallback, a3, v7);
    if (!v20)
      return 0;
  }
  return v20;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Command_ChangeBackground::InternalSerializeWithCachedSizesToArray(SnippetUI::Command_ChangeBackground *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int i;
  SnippetUI::BackgroundElement *v9;
  google::protobuf::io::EpsCopyOutputStream *v10;
  unsigned int v11;
  google::protobuf::UnknownFieldSet *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v9 = (SnippetUI::BackgroundElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 16, i);
      *(_BYTE *)a2 = 10;
      v11 = *((_DWORD *)v9 + 13);
      if (v11 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v11 | 0x80;
        v13 = v11 >> 7;
        if (v11 >> 14)
        {
          v14 = (char *)a2 + 2;
          do
          {
            v15 = v14;
            *v14++ = v13 | 0x80;
            v16 = v13 >> 7;
            v17 = v13 >> 14;
            v13 >>= 7;
          }
          while (v17);
          v12 = (google::protobuf::UnknownFieldSet *)(v15 + 2);
          *v14 = v16;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v13;
          v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v11;
        v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::BackgroundElement::InternalSerializeWithCachedSizesToArray(v9, v12, a3, v10);
    }
  }
  v18 = *((_QWORD *)this + 1);
  if ((v18 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v18 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::Command_ChangeBackground::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::Command_ChangeBackground::Clear((SnippetUI::Command_ChangeBackground *)this);
    SnippetUI::Command_ChangeBackground::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::Command_ChangeBackground::Clear((SnippetUI::Command_ChangeBackground *)this);
    SnippetUI::Command_ChangeBackground::MergeFrom(this, a2);
  }
}

void SnippetUI::Command_ChangeBackground::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 585);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Command_ChangeBackground::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BFAA953C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Command_ChangeBackground::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::Command_ChangeBackground::GetMetadata(SnippetUI::Command_ChangeBackground *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ActionElement_2eproto);
  return qword_1EF5827A0;
}

void *SnippetUI::Command_ChangeBackground::default_instance(SnippetUI::Command_ChangeBackground *this)
{
  if (atomic_load(scc_info_Command_ChangeBackground_ActionElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Command_ChangeBackground_ActionElement_2eproto);
  return &SnippetUI::_Command_ChangeBackground_default_instance_;
}

void SnippetUI::Command_ChangeBackground::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 600);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
}

void sub_1BFAA9648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  SnippetUI::BackgroundElement **v13;
  SnippetUI::BackgroundElement **v14;
  SnippetUI::BackgroundElement *v15;
  SnippetUI::BackgroundElement *v16;
  SnippetUI::BackgroundElement *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::BackgroundElement **v21;
  SnippetUI::BackgroundElement **v22;
  SnippetUI::BackgroundElement *v23;
  SnippetUI::BackgroundElement *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (SnippetUI::BackgroundElement **)(v6 + 8);
      v14 = (SnippetUI::BackgroundElement **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::BackgroundElement>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::BackgroundElement **)((char *)v8 + v20);
      v22 = (SnippetUI::BackgroundElement **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BackgroundElement>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::BackgroundElement>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFAA97B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::BackgroundElement>::Merge(SnippetUI::BackgroundElement *a1, SnippetUI::BackgroundElement *this)
{
  SnippetUI::BackgroundElement::MergeFrom(this, a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BFAA9898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::BackgroundElement>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::BackgroundElement *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::BackgroundElement::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  SnippetUI::BackgroundElement **v3;
  SnippetUI::BackgroundElement *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (SnippetUI::BackgroundElement **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::BackgroundElement::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BFAA9A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Command_ChangeBackground *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ChangeBackground>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Command_ChangeBackground *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Command_ChangeBackground *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Command_ChangeBackground>);
    SnippetUI::Command_ChangeBackground::Command_ChangeBackground(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Command_ChangeBackground *)operator new();
    SnippetUI::Command_ChangeBackground::Command_ChangeBackground(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAA9AAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Command_ChangeBackground>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::Command *SnippetUI::Command::Command(SnippetUI::Command *this)
{
  *(_QWORD *)this = &off_1E7932B58;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load(scc_info_Command_ActionElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Command_ActionElement_2eproto);
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_1BFAA9B3C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Command::~Command(SnippetUI::Command *this)
{
  SnippetUI::Command::~Command(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7932B58;
  if (*((_DWORD *)this + 9))
    SnippetUI::Command::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Command *SnippetUI::Command::New(SnippetUI::Command *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command>(0);
}

SnippetUI::Command *SnippetUI::Command::New(SnippetUI::Command *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command>(a2);
}

void SnippetUI::Command::Clear(SnippetUI::Command *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  *((_BYTE *)this + 16) = 0;
  SnippetUI::Command::clear_value((uint64_t)this);
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::Command *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::Command::IsInitialized(SnippetUI::Command *this)
{
  return 1;
}

char *SnippetUI::Command::ByteSizeLong(SnippetUI::Command *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v2 = 2 * *((unsigned __int8 *)this + 16);
  switch(*((_DWORD *)this + 9))
  {
    case 1:
      v2 += 2;
      break;
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 0xB:
      v3 = *((_QWORD *)this + 3);
      v4 = *(unsigned __int8 *)(v3 + 23);
      v5 = *(_QWORD *)(v3 + 8);
      if ((v4 & 0x80u) == 0)
        v5 = v4;
      v2 = (v2 | 1) + v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      break;
    case 5:
      v6 = SnippetUI::Command_ChangeBackground::ByteSizeLong(*((SnippetUI::Command_ChangeBackground **)this + 3));
      goto LABEL_9;
    case 9:
      v6 = SnippetUI::Command_ResponseGroup::ByteSizeLong(*((SnippetUI::Command_ResponseGroup **)this + 3));
      goto LABEL_9;
    case 0xA:
      v6 = SnippetUI::Command_AppPunchout::ByteSizeLong(*((SnippetUI::Command_AppPunchout **)this + 3));
LABEL_9:
      v2 = (uint64_t)&v6[(v2 | 1) + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)];
      break;
    default:
      break;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Command *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v2, (_DWORD *)this + 8);
  *((_DWORD *)this + 8) = v2;
  return (char *)v2;
}

uint64_t SnippetUI::Command::GetCachedSize(SnippetUI::Command *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::internal *SnippetUI::Command::_InternalParse(SnippetUI::Command *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  google::protobuf::internal *v10;
  uint64_t v11;
  int v12;
  int v13;
  std::string *v14;
  SnippetUI::Command_ChangeBackground *v15;
  google::protobuf::internal *v16;
  unint64_t v17;
  int v18;
  SnippetUI::Command_ResponseGroup *v19;
  SnippetUI::Command_AppPunchout *v20;
  std::string *v21;
  BOOL v22;
  char *v23;
  unsigned int v24;
  char *v25;
  unsigned int v26;
  char *v27;
  unsigned int v28;
  char *v29;
  char *SizeFallback;
  unsigned int v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  google::protobuf::internal *v36;
  char *v37;
  unsigned int v38;
  int v39;
  int v40;
  char *v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  google::protobuf::internal *v47;
  uint64_t v48;
  google::protobuf::internal *v50;

  v50 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v50, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v50;
    TagFallback = (google::protobuf::internal *)((char *)v50 + 1);
    v9 = (char *)*(unsigned __int8 *)v50;
    if ((*(char *)v50 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v50 + 2);
LABEL_6:
      v50 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v50, v9);
    v50 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8)
          goto LABEL_48;
        v10 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v11 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v12 = v11 + (*(unsigned __int8 *)v10 << 7);
          v11 = (v12 - 128);
          if (*(char *)v10 < 0)
          {
            v10 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, (v12 - 128));
            v11 = v46;
          }
          else
          {
            v10 = (google::protobuf::internal *)((char *)TagFallback + 2);
          }
        }
        v50 = v10;
        if (*((_DWORD *)this + 9) != 1)
        {
          SnippetUI::Command::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 1;
          v10 = v50;
        }
        *(_BYTE *)v5 = v11 != 0;
        if (v10)
          continue;
        goto LABEL_93;
      case 2u:
        if (v9 != 18)
          goto LABEL_48;
        if (*((_DWORD *)this + 9) == 2)
          goto LABEL_46;
        SnippetUI::Command::clear_value((uint64_t)this);
        v13 = 2;
        goto LABEL_66;
      case 3u:
        if (v9 != 26)
          goto LABEL_48;
        if (*((_DWORD *)this + 9) == 3)
          goto LABEL_46;
        SnippetUI::Command::clear_value((uint64_t)this);
        v13 = 3;
        goto LABEL_66;
      case 4u:
        if (v9 != 34)
          goto LABEL_48;
        if (*((_DWORD *)this + 9) == 4)
        {
          v14 = *v5;
          if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_55;
        }
        else
        {
          SnippetUI::Command::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 4;
          *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v14 = *v5;
        TagFallback = v50;
LABEL_55:
        v23 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Command.utterance");
        goto LABEL_69;
      case 5u:
        if (v9 != 42)
          goto LABEL_48;
        if (*((_DWORD *)this + 9) == 5)
        {
          v15 = (SnippetUI::Command_ChangeBackground *)*v5;
        }
        else
        {
          SnippetUI::Command::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 5;
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ChangeBackground>(0);
          *((_QWORD *)this + 3) = v15;
          TagFallback = v50;
        }
        v24 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            goto LABEL_93;
          v25 = SizeFallback;
          v24 = v31;
        }
        else
        {
          v25 = (char *)TagFallback + 1;
        }
        v32 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v25, v24);
        v33 = *((_DWORD *)a3 + 22);
        v34 = __OFSUB__(v33--, 1);
        *((_DWORD *)a3 + 22) = v33;
        if (v33 < 0 != v34)
          goto LABEL_93;
        v35 = v32;
        v36 = SnippetUI::Command_ChangeBackground::_InternalParse(v15, (google::protobuf::internal *)v25, a3);
        if (!v36)
          goto LABEL_93;
        goto LABEL_85;
      case 6u:
        if (v9 != 50)
          goto LABEL_48;
        if (*((_DWORD *)this + 9) == 6)
          goto LABEL_46;
        SnippetUI::Command::clear_value((uint64_t)this);
        v13 = 6;
        goto LABEL_66;
      case 7u:
        if (v9 != 58)
          goto LABEL_48;
        if (*((_DWORD *)this + 9) == 7)
          goto LABEL_46;
        SnippetUI::Command::clear_value((uint64_t)this);
        v13 = 7;
        goto LABEL_66;
      case 8u:
        if (v9 != 64)
          goto LABEL_48;
        v16 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v17 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_37;
        v18 = *(char *)v16;
        v17 = v17 + (v18 << 7) - 128;
        if (v18 < 0)
        {
          v47 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v17);
          v50 = v47;
          *((_BYTE *)this + 16) = v48 != 0;
          if (!v47)
            goto LABEL_93;
        }
        else
        {
          v16 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_37:
          v50 = v16;
          *((_BYTE *)this + 16) = v17 != 0;
        }
        continue;
      case 9u:
        if (v9 != 74)
          goto LABEL_48;
        if (*((_DWORD *)this + 9) == 9)
        {
          v19 = (SnippetUI::Command_ResponseGroup *)*v5;
        }
        else
        {
          SnippetUI::Command::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 9;
          v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ResponseGroup>(0);
          *((_QWORD *)this + 3) = v19;
          TagFallback = v50;
        }
        v26 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v37 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v37)
            goto LABEL_93;
          v27 = v37;
          v26 = v38;
        }
        else
        {
          v27 = (char *)TagFallback + 1;
        }
        v39 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v27, v26);
        v40 = *((_DWORD *)a3 + 22);
        v34 = __OFSUB__(v40--, 1);
        *((_DWORD *)a3 + 22) = v40;
        if (v40 < 0 != v34)
          goto LABEL_93;
        v35 = v39;
        v36 = SnippetUI::Command_ResponseGroup::_InternalParse(v19, (google::protobuf::internal *)v27, a3);
        if (!v36)
          goto LABEL_93;
        goto LABEL_85;
      case 0xAu:
        if (v9 != 82)
          goto LABEL_48;
        if (*((_DWORD *)this + 9) == 10)
        {
          v20 = (SnippetUI::Command_AppPunchout *)*v5;
        }
        else
        {
          SnippetUI::Command::clear_value((uint64_t)this);
          *((_DWORD *)this + 9) = 10;
          v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_AppPunchout>(0);
          *((_QWORD *)this + 3) = v20;
          TagFallback = v50;
        }
        v28 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v41 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v41)
            goto LABEL_93;
          v29 = v41;
          v28 = v42;
        }
        else
        {
          v29 = (char *)TagFallback + 1;
        }
        v43 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v29, v28);
        v44 = *((_DWORD *)a3 + 22);
        v34 = __OFSUB__(v44--, 1);
        *((_DWORD *)a3 + 22) = v44;
        if (v44 < 0 != v34)
          goto LABEL_93;
        v35 = v43;
        v36 = SnippetUI::Command_AppPunchout::_InternalParse(v20, (google::protobuf::internal *)v29, a3);
        if (!v36)
          goto LABEL_93;
LABEL_85:
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          goto LABEL_93;
        v45 = *((_DWORD *)a3 + 7) + v35;
        *((_DWORD *)a3 + 7) = v45;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v45 & (v45 >> 31));
        v50 = v36;
        continue;
      case 0xBu:
        if (v9 != 90)
          goto LABEL_48;
        if (*((_DWORD *)this + 9) == 11)
        {
LABEL_46:
          v21 = *v5;
          if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_68;
        }
        else
        {
          SnippetUI::Command::clear_value((uint64_t)this);
          v13 = 11;
LABEL_66:
          *((_DWORD *)this + 9) = v13;
          *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v21 = *v5;
        TagFallback = v50;
LABEL_68:
        v23 = google::protobuf::internal::InlineGreedyStringParser(v21, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_69;
      default:
LABEL_48:
        if ((_DWORD)v9)
          v22 = (v9 & 7) == 4;
        else
          v22 = 1;
        if (v22)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v23 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_69:
        v50 = (google::protobuf::internal *)v23;
        if (v23)
          continue;
LABEL_93:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Command::InternalSerializeWithCachedSizesToArray(SnippetUI::Command *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  const char *v10;
  uint64_t *v11;
  SnippetUI::Command_ChangeBackground *v12;
  unsigned int v13;
  google::protobuf::UnknownFieldSet *v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  int v21;
  SnippetUI::Command_ResponseGroup *v22;
  unsigned int v23;
  google::protobuf::UnknownFieldSet *v24;
  unsigned int v25;
  _BYTE *v26;
  _BYTE *v27;
  unsigned int v28;
  unsigned int v29;
  SnippetUI::Command_AppPunchout *v30;
  unsigned int v31;
  google::protobuf::UnknownFieldSet *v32;
  unsigned int v33;
  _BYTE *v34;
  _BYTE *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;

  v5 = a2;
  v7 = *((_DWORD *)this + 9);
  if (v7 == 1)
  {
    v8 = (*(_QWORD *)a3 > (unint64_t)a2
       || (v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2), *((_DWORD *)this + 9) == 1))
      && *((_BYTE *)this + 24) != 0;
    *v5 = 8;
    v5[1] = v8;
    v5 += 2;
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 2)
  {
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 3), v5);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 3)
  {
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 3), v5);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 4)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)this + 3);
    if ((char)v9[23] < 0)
    {
      v9 = *(unsigned __int8 **)v9;
      v10 = *(const char **)(*((_QWORD *)this + 3) + 8);
    }
    else
    {
      v10 = (const char *)v9[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v9, v10, 1, (google::protobuf::internal *)"SnippetUI.Command.utterance");
    if (*((_DWORD *)this + 9) == 4)
      v11 = (uint64_t *)*((_QWORD *)this + 3);
    else
      v11 = &google::protobuf::internal::fixed_address_empty_string;
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, (uint64_t)v11, v5);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 5)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v12 = (SnippetUI::Command_ChangeBackground *)*((_QWORD *)this + 3);
    *v5 = 42;
    v13 = *((_DWORD *)v12 + 10);
    if (v13 > 0x7F)
    {
      v5[1] = v13 | 0x80;
      v15 = v13 >> 7;
      if (v13 >> 14)
      {
        v16 = v5 + 2;
        do
        {
          v17 = v16;
          *v16++ = v15 | 0x80;
          v18 = v15 >> 7;
          v19 = v15 >> 14;
          v15 >>= 7;
        }
        while (v19);
        v14 = (google::protobuf::UnknownFieldSet *)(v17 + 2);
        *v16 = v18;
      }
      else
      {
        v5[2] = v15;
        v14 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v13;
      v14 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::Command_ChangeBackground::InternalSerializeWithCachedSizesToArray(v12, v14, a3, a4);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 6)
  {
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 3), v5);
    v7 = *((_DWORD *)this + 9);
  }
  if (v7 == 7)
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 3), v5);
  if (*((_BYTE *)this + 16))
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v20 = *((_BYTE *)this + 16);
    }
    else
    {
      v20 = 1;
    }
    *v5 = 64;
    v5[1] = v20;
    v5 += 2;
  }
  v21 = *((_DWORD *)this + 9);
  if (v21 == 9)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v22 = (SnippetUI::Command_ResponseGroup *)*((_QWORD *)this + 3);
    *v5 = 74;
    v23 = *((_DWORD *)v22 + 6);
    if (v23 > 0x7F)
    {
      v5[1] = v23 | 0x80;
      v25 = v23 >> 7;
      if (v23 >> 14)
      {
        v26 = v5 + 2;
        do
        {
          v27 = v26;
          *v26++ = v25 | 0x80;
          v28 = v25 >> 7;
          v29 = v25 >> 14;
          v25 >>= 7;
        }
        while (v29);
        v24 = (google::protobuf::UnknownFieldSet *)(v27 + 2);
        *v26 = v28;
      }
      else
      {
        v5[2] = v25;
        v24 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v23;
      v24 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::Command_ResponseGroup::InternalSerializeWithCachedSizesToArray(v22, v24, a3, a4);
    v21 = *((_DWORD *)this + 9);
  }
  if (v21 == 10)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v30 = (SnippetUI::Command_AppPunchout *)*((_QWORD *)this + 3);
    *v5 = 82;
    v31 = *((_DWORD *)v30 + 10);
    if (v31 > 0x7F)
    {
      v5[1] = v31 | 0x80;
      v33 = v31 >> 7;
      if (v31 >> 14)
      {
        v34 = v5 + 2;
        do
        {
          v35 = v34;
          *v34++ = v33 | 0x80;
          v36 = v33 >> 7;
          v37 = v33 >> 14;
          v33 >>= 7;
        }
        while (v37);
        v32 = (google::protobuf::UnknownFieldSet *)(v35 + 2);
        *v34 = v36;
      }
      else
      {
        v5[2] = v33;
        v32 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v31;
      v32 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::Command_AppPunchout::InternalSerializeWithCachedSizesToArray(v30, v32, a3, a4);
    v21 = *((_DWORD *)this + 9);
  }
  if (v21 == 11)
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 11, *((_QWORD *)this + 3), v5);
  v38 = *((_QWORD *)this + 1);
  if ((v38 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v38 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Command::CopyFrom(SnippetUI::Command *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Command::Clear(this);
    SnippetUI::Command::MergeFrom(this, a2);
  }
}

void SnippetUI::Command::MergeFrom(SnippetUI::Command *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Command *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 1430);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Command::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAAA754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Command::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t SnippetUI::Command::GetMetadata(SnippetUI::Command *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ActionElement_2eproto);
  return qword_1EF5827C0;
}

void *SnippetUI::Command::default_instance(SnippetUI::Command *this)
{
  if (atomic_load(scc_info_Command_ActionElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Command_ActionElement_2eproto);
  return &SnippetUI::_Command_default_instance_;
}

void SnippetUI::Command::MergeFrom(SnippetUI::Command *this, const SnippetUI::Command *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  const std::string *v7;
  int v8;
  int **v9;
  SnippetUI::Command_ResponseGroup *v10;
  SnippetUI::Command_AppPunchout *v11;
  std::string *v12;
  int **v13;
  const SnippetUI::Command_ResponseGroup *v14;
  const SnippetUI::Command_AppPunchout *v15;
  char v16;
  std::string v17[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 1445);
    v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Command *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  if (*((_BYTE *)a2 + 16))
    *((_BYTE *)this + 16) = 1;
  switch(*((_DWORD *)a2 + 9))
  {
    case 1:
      v6 = *((_BYTE *)a2 + 24);
      if (*((_DWORD *)this + 9) != 1)
      {
        SnippetUI::Command::clear_value((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
      }
      *((_BYTE *)this + 24) = v6;
      return;
    case 2:
      v7 = (const std::string *)*((_QWORD *)a2 + 3);
      if (*((_DWORD *)this + 9) == 2)
        goto LABEL_28;
      SnippetUI::Command::clear_value((uint64_t)this);
      v8 = 2;
      goto LABEL_37;
    case 3:
      v7 = (const std::string *)*((_QWORD *)a2 + 3);
      if (*((_DWORD *)this + 9) == 3)
        goto LABEL_28;
      SnippetUI::Command::clear_value((uint64_t)this);
      v8 = 3;
      goto LABEL_37;
    case 4:
      v7 = (const std::string *)*((_QWORD *)a2 + 3);
      if (*((_DWORD *)this + 9) == 4)
        goto LABEL_28;
      SnippetUI::Command::clear_value((uint64_t)this);
      v8 = 4;
      goto LABEL_37;
    case 5:
      if (*((_DWORD *)this + 9) == 5)
      {
        v9 = (int **)*((_QWORD *)this + 3);
LABEL_31:
        v13 = (int **)*((_QWORD *)a2 + 3);
        goto LABEL_41;
      }
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 5;
      v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ChangeBackground>(0);
      *((_QWORD *)this + 3) = v9;
      if (*((_DWORD *)a2 + 9) == 5)
        goto LABEL_31;
      v13 = (int **)&SnippetUI::_Command_ChangeBackground_default_instance_;
LABEL_41:
      SnippetUI::Command_ChangeBackground::MergeFrom(v9, v13);
      return;
    case 6:
      v7 = (const std::string *)*((_QWORD *)a2 + 3);
      if (*((_DWORD *)this + 9) == 6)
        goto LABEL_28;
      SnippetUI::Command::clear_value((uint64_t)this);
      v8 = 6;
      goto LABEL_37;
    case 7:
      v7 = (const std::string *)*((_QWORD *)a2 + 3);
      if (*((_DWORD *)this + 9) == 7)
        goto LABEL_28;
      SnippetUI::Command::clear_value((uint64_t)this);
      v8 = 7;
      goto LABEL_37;
    case 9:
      if (*((_DWORD *)this + 9) == 9)
      {
        v10 = (SnippetUI::Command_ResponseGroup *)*((_QWORD *)this + 3);
LABEL_33:
        v14 = (const SnippetUI::Command_ResponseGroup *)*((_QWORD *)a2 + 3);
        goto LABEL_43;
      }
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 9;
      v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ResponseGroup>(0);
      *((_QWORD *)this + 3) = v10;
      if (*((_DWORD *)a2 + 9) == 9)
        goto LABEL_33;
      v14 = (const SnippetUI::Command_ResponseGroup *)&SnippetUI::_Command_ResponseGroup_default_instance_;
LABEL_43:
      SnippetUI::Command_ResponseGroup::MergeFrom(v10, v14);
      return;
    case 0xA:
      if (*((_DWORD *)this + 9) == 10)
      {
        v11 = (SnippetUI::Command_AppPunchout *)*((_QWORD *)this + 3);
LABEL_35:
        v15 = (const SnippetUI::Command_AppPunchout *)*((_QWORD *)a2 + 3);
        goto LABEL_45;
      }
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 10;
      v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_AppPunchout>(0);
      *((_QWORD *)this + 3) = v11;
      if (*((_DWORD *)a2 + 9) == 10)
        goto LABEL_35;
      v15 = (const SnippetUI::Command_AppPunchout *)&SnippetUI::_Command_AppPunchout_default_instance_;
LABEL_45:
      SnippetUI::Command_AppPunchout::MergeFrom(v11, v15);
      return;
    case 0xB:
      v7 = (const std::string *)*((_QWORD *)a2 + 3);
      if (*((_DWORD *)this + 9) == 11)
      {
LABEL_28:
        v12 = (std::string *)*((_QWORD *)this + 3);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          std::string::operator=(v12, v7);
          return;
        }
      }
      else
      {
        SnippetUI::Command::clear_value((uint64_t)this);
        v8 = 11;
LABEL_37:
        *((_DWORD *)this + 9) = v8;
        *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v7);
      return;
    default:
      return;
  }
}

void sub_1BFAAAAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Command::clear_value(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  switch(*(_DWORD *)(this + 36))
  {
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 0xB:
      v2 = *(_QWORD *)(this + 24);
      if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
      {
        if (*(char *)(v2 + 23) < 0)
          operator delete(*(void **)v2);
        this = MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
      }
      break;
    case 5:
    case 9:
    case 0xA:
      this = *(_QWORD *)(this + 24);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

SnippetUI::Command *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Command *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Command *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Command>);
    SnippetUI::Command::Command(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Command *)operator new();
    SnippetUI::Command::Command(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAAABE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A3C40C637D3DALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Command>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::ActionElement *SnippetUI::ActionElement::ActionElement(SnippetUI::ActionElement *this)
{
  *(_QWORD *)this = &off_1E7932C18;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (atomic_load(scc_info_ActionElement_ActionElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ActionElement_ActionElement_2eproto);
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_1BFAAACCC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedField<int>::~RepeatedField(v2 + 40);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ActionElement::~ActionElement(SnippetUI::ActionElement *this)
{
  SnippetUI::ActionElement::~ActionElement(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7932C18;
  if (this != (SnippetUI::ActionElement *)&SnippetUI::_ActionElement_default_instance_)
  {
    v2 = *((_QWORD *)this + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 40);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::ActionElement *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ActionElement *SnippetUI::ActionElement::New(SnippetUI::ActionElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionElement>(0);
}

SnippetUI::ActionElement *SnippetUI::ActionElement::New(SnippetUI::ActionElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionElement>(a2);
}

void SnippetUI::ActionElement::Clear(SnippetUI::ActionElement *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16);
  *((_DWORD *)this + 10) = 0;
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::ActionElement *)((char *)this + 8);
  *((_QWORD *)v3 + 7) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

uint64_t SnippetUI::ActionElement::IsInitialized(SnippetUI::ActionElement *this)
{
  return 1;
}

char *SnippetUI::ActionElement::ByteSizeLong(SnippetUI::ActionElement *this)
{
  uint64_t v2;
  uint64_t v3;
  SnippetUI::TextElement **v4;
  uint64_t v5;
  SnippetUI::TextElement *v6;
  char *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const google::protobuf::UnknownFieldSet *v15;
  SnippetUI::Command *v16;
  char *v17;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::TextElement **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::TextElement::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_DWORD *)this + 10);
  if (!v8)
  {
    v10 = 0;
LABEL_19:
    v14 = 0;
    goto LABEL_22;
  }
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get((_DWORD *)this + 10, v9);
    if (v11 < 0)
      v12 = 10;
    else
      v12 = (9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6;
    v10 += v12;
    ++v9;
  }
  while (v8 != v9);
  if (!v10)
    goto LABEL_19;
  if ((v10 & 0x80000000) != 0)
    v13 = 11;
  else
    v13 = ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v2 += v13;
  v14 = v10;
LABEL_22:
  *((_DWORD *)this + 14) = v14;
  v15 = (const google::protobuf::UnknownFieldSet *)(v2 + v10);
  if (this != (SnippetUI::ActionElement *)&SnippetUI::_ActionElement_default_instance_)
  {
    v16 = (SnippetUI::Command *)*((_QWORD *)this + 8);
    if (v16)
    {
      v17 = SnippetUI::Command::ByteSizeLong(v16);
      v15 = (const google::protobuf::UnknownFieldSet *)&v17[(_QWORD)v15
                                                          + 1
                                                          + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ActionElement *)((char *)this + 8), v15, (_DWORD *)this + 18);
  *((_DWORD *)this + 18) = (_DWORD)v15;
  return (char *)v15;
}

uint64_t SnippetUI::ActionElement::GetCachedSize(SnippetUI::ActionElement *this)
{
  return *((unsigned int *)this + 18);
}

google::protobuf::internal *SnippetUI::ActionElement::_InternalParse(SnippetUI::ActionElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  google::protobuf::internal *v5;
  unsigned int *v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal::ParseContext *v9;
  google::protobuf::internal *TagFallback;
  char *v11;
  unsigned int v12;
  BOOL v14;
  char *v15;
  char *v16;
  google::protobuf::internal *v17;
  int *v18;
  uint64_t v19;
  int v20;
  SnippetUI::TextElement *v21;
  uint64_t v22;
  uint64_t v23;
  SnippetUI::Command *v24;
  unsigned int v25;
  char *v26;
  char *SizeFallback;
  unsigned int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  google::protobuf::internal *v33;
  int v34;
  int v35;
  google::protobuf::internal *v37;

  v37 = a2;
  v5 = (SnippetUI::ActionElement *)((char *)this + 40);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v37, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v37 + 1);
    v11 = (char *)*(unsigned __int8 *)v37;
    if (*(char *)v37 < 0)
    {
      v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if (*(char *)TagFallback < 0)
      {
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v37, v11);
        v37 = TagFallback;
        if (!TagFallback)
          return TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)((char *)v37 + 2);
    }
    v37 = TagFallback;
LABEL_7:
    v12 = v11 >> 3;
    if (v11 >> 3 == 3)
    {
      if (v11 == 26)
      {
        v15 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v8);
        goto LABEL_20;
      }
      if (v11 != 24)
        goto LABEL_13;
      v35 = google::protobuf::internal::ReadVarint(&v37, (const char **)v11);
      if (!v37)
        return 0;
      SnippetUI::ImageElement::_internal_add_idioms((uint64_t)this, v35);
    }
    else if (v12 == 2)
    {
      if (v11 == 18)
      {
        v16 = (char *)TagFallback - 1;
        while (1)
        {
          v17 = (google::protobuf::internal *)(v16 + 1);
          v37 = (google::protobuf::internal *)(v16 + 1);
          v18 = (int *)*((_QWORD *)this + 4);
          if (!v18)
            break;
          v19 = *((int *)this + 6);
          v20 = *v18;
          if ((int)v19 >= *v18)
          {
            if (v20 == *((_DWORD *)this + 7))
            {
LABEL_29:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v20 + 1);
              v18 = (int *)*((_QWORD *)this + 4);
              v20 = *v18;
            }
            *v18 = v20 + 1;
            v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                      + 2));
            v22 = *((_QWORD *)this + 4);
            v23 = *((int *)this + 6);
            *((_DWORD *)this + 6) = v23 + 1;
            *(_QWORD *)(v22 + 8 * v23 + 8) = v21;
            v17 = v37;
            goto LABEL_31;
          }
          *((_DWORD *)this + 6) = v19 + 1;
          v21 = *(SnippetUI::TextElement **)&v18[2 * v19 + 2];
LABEL_31:
          v16 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextElement>(a3, v21, v17);
          v37 = (google::protobuf::internal *)v16;
          if (!v16)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v16 || *v16 != 18)
            goto LABEL_2;
        }
        v20 = *((_DWORD *)this + 7);
        goto LABEL_29;
      }
LABEL_13:
      if ((_DWORD)v11)
        v14 = (v11 & 7) == 4;
      else
        v14 = 1;
      if (v14)
      {
        *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
        return TagFallback;
      }
      v15 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v7, TagFallback, a3, v9);
LABEL_20:
      v37 = (google::protobuf::internal *)v15;
      if (!v15)
        return 0;
    }
    else
    {
      if (v12 != 1 || v11 != 10)
        goto LABEL_13;
      v24 = (SnippetUI::Command *)*((_QWORD *)this + 8);
      if (!v24)
      {
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command>(0);
        *((_QWORD *)this + 8) = v24;
        TagFallback = v37;
      }
      v25 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback)
          return 0;
        v26 = SizeFallback;
        v25 = v28;
      }
      else
      {
        v26 = (char *)TagFallback + 1;
      }
      v29 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v26, v25);
      v30 = *((_DWORD *)a3 + 22);
      v31 = __OFSUB__(v30--, 1);
      *((_DWORD *)a3 + 22) = v30;
      if (v30 < 0 != v31)
        return 0;
      v32 = v29;
      v33 = SnippetUI::Command::_InternalParse(v24, (google::protobuf::internal *)v26, a3);
      if (!v33)
        return 0;
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20))
        return 0;
      v34 = *((_DWORD *)a3 + 7) + v32;
      *((_DWORD *)a3 + 7) = v34;
      *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v34 & (v34 >> 31));
      v37 = v33;
    }
  }
  return v37;
}

const google::protobuf::UnknownFieldSet *SnippetUI::ActionElement::InternalSerializeWithCachedSizesToArray(SnippetUI::ActionElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::Command *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int i;
  SnippetUI::TextElement *v17;
  google::protobuf::io::EpsCopyOutputStream *v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  unsigned int v21;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  std::string *v28;
  _BYTE *v29;
  int *v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v41;
  char v42;
  std::string v43[2];

  v5 = (char *)a2;
  if (this != (SnippetUI::ActionElement *)&SnippetUI::_ActionElement_default_instance_)
  {
    v7 = (SnippetUI::Command *)*((_QWORD *)this + 8);
    if (v7)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v7 = (SnippetUI::Command *)*((_QWORD *)this + 8);
      }
      *v5 = 10;
      v8 = *((_DWORD *)v7 + 8);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = v5 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = v12 + 2;
          *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          v9 = v5 + 3;
        }
      }
      else
      {
        v5[1] = v8;
        v9 = v5 + 2;
      }
      v5 = (char *)SnippetUI::Command::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  v15 = *((_DWORD *)this + 6);
  if (v15)
  {
    for (i = 0; i != v15; ++i)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v17 = (SnippetUI::TextElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16, i);
      *v5 = 18;
      v19 = *((_DWORD *)v17 + 24);
      if (v19 > 0x7F)
      {
        v5[1] = v19 | 0x80;
        v21 = v19 >> 7;
        if (v19 >> 14)
        {
          v22 = v5 + 2;
          do
          {
            v23 = v22;
            *v22++ = v21 | 0x80;
            v24 = v21 >> 7;
            v25 = v21 >> 14;
            v21 >>= 7;
          }
          while (v25);
          v20 = (google::protobuf::UnknownFieldSet *)(v23 + 2);
          *v22 = v24;
        }
        else
        {
          v5[2] = v21;
          v20 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v19;
        v20 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextElement::InternalSerializeWithCachedSizesToArray(v17, v20, a3, v18);
    }
  }
  v26 = *((_DWORD *)this + 14);
  if ((int)v26 > 0)
  {
    v27 = *(_QWORD *)a3;
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v27 = *(_QWORD *)a3;
    }
    if (v27 <= (unint64_t)v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      v28 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v28->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
    }
    *v5 = 26;
    v29 = v5 + 1;
    if (v26 >= 0x80)
    {
      do
      {
        *v29++ = v26 | 0x80;
        v41 = v26 >> 14;
        v26 >>= 7;
      }
      while (v41);
      v5 = v29 - 1;
    }
    v5 += 2;
    *v29 = v26;
    v30 = (int *)*((_QWORD *)this + 6);
    v31 = &v30[*((int *)this + 10)];
    do
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v33 = *v30++;
      v32 = v33;
      if (v33 > 0x7F)
      {
        *v5 = v32 | 0x80;
        v34 = v32 >> 7;
        if (v32 >> 14)
        {
          v35 = v5 + 1;
          do
          {
            v36 = v35;
            *v35++ = v34 | 0x80;
            v37 = v34 >> 7;
            v38 = v34 >> 14;
            v34 >>= 7;
          }
          while (v38);
          v5 = v36 + 2;
          *v35 = v37;
        }
        else
        {
          v5[1] = v34;
          v5 += 2;
        }
      }
      else
      {
        *v5++ = v32;
      }
    }
    while (v30 < v31);
  }
  v39 = *((_QWORD *)this + 1);
  if ((v39 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v39 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1BFAAB51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ActionElement::CopyFrom(SnippetUI::ActionElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ActionElement::Clear(this);
    SnippetUI::ActionElement::MergeFrom(this, a2);
  }
}

void SnippetUI::ActionElement::MergeFrom(SnippetUI::ActionElement *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ActionElement *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 1753);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ActionElement::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAAB614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ActionElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

uint64_t SnippetUI::ActionElement::GetMetadata(SnippetUI::ActionElement *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ActionElement_2eproto);
  return qword_1EF5827D0;
}

void *SnippetUI::ActionElement::default_instance(SnippetUI::ActionElement *this)
{
  if (atomic_load(scc_info_ActionElement_ActionElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ActionElement_ActionElement_2eproto);
  return &SnippetUI::_ActionElement_default_instance_;
}

void SnippetUI::ActionElement::MergeFrom(SnippetUI::ActionElement *this, const SnippetUI::ActionElement *a2)
{
  std::string *v4;
  uint64_t v5;
  const SnippetUI::Command *v6;
  SnippetUI::Command *v7;
  const SnippetUI::Command *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionElement.pb.cc", 1768);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ActionElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 10, (int *)a2 + 10);
  if (a2 != (const SnippetUI::ActionElement *)&SnippetUI::_ActionElement_default_instance_)
  {
    v6 = (const SnippetUI::Command *)*((_QWORD *)a2 + 8);
    if (v6)
    {
      v7 = (SnippetUI::Command *)*((_QWORD *)this + 8);
      if (!v7)
      {
        v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command>(0);
        *((_QWORD *)this + 8) = v7;
        v6 = (const SnippetUI::Command *)*((_QWORD *)a2 + 8);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::Command *)&SnippetUI::_Command_default_instance_;
      SnippetUI::Command::MergeFrom(v7, v8);
    }
  }
}

void sub_1BFAAB76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  SnippetUI::TextElement **v13;
  SnippetUI::TextElement **v14;
  SnippetUI::TextElement *v15;
  SnippetUI::TextElement *v16;
  SnippetUI::TextElement *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::TextElement **v21;
  SnippetUI::TextElement **v22;
  SnippetUI::TextElement *v23;
  SnippetUI::TextElement *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (SnippetUI::TextElement **)(v6 + 8);
      v14 = (SnippetUI::TextElement **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::TextElement>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::TextElement **)((char *)v8 + v20);
      v22 = (SnippetUI::TextElement **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextElement>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::TextElement>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFAAB8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::TextElement>::Merge(SnippetUI::TextElement *a1, SnippetUI::TextElement *this)
{
  SnippetUI::TextElement::MergeFrom(this, a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BFAAB9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextElement>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::TextElement *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::TextElement::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  SnippetUI::TextElement **v3;
  SnippetUI::TextElement *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (SnippetUI::TextElement **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::TextElement::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BFAABB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::ActionElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionElement>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ActionElement *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ActionElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ActionElement>);
    SnippetUI::ActionElement::ActionElement(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ActionElement *)operator new();
    SnippetUI::ActionElement::ActionElement(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAABBD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4053CFED8BLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ActionElement>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::Command_ResponseGroup *SnippetUI::Command_ResponseGroup::Command_ResponseGroup(SnippetUI::Command_ResponseGroup *this, const SnippetUI::Command_ResponseGroup *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7932918;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Command_ResponseGroup *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  return this;
}

void sub_1BFAABD00(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Command_ResponseGroup::CopyFrom(SnippetUI::Command_ResponseGroup *this, const SnippetUI::Command_ResponseGroup *a2)
{
  if (a2 != this)
  {
    SnippetUI::Command_ResponseGroup::Clear(this);
    SnippetUI::Command_ResponseGroup::MergeFrom(this, a2);
  }
}

__n128 SnippetUI::Command_ResponseGroup::InternalSwap(SnippetUI::Command_ResponseGroup *this, SnippetUI::Command_ResponseGroup *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  __n128 result;
  std::string **v8;
  std::string *v9;
  uint64_t *v10;
  std::string **v11;
  std::string *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::Command_ResponseGroup *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v10 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (std::string **)((char *)this + 16);
  v9 = (std::string *)v10;
  v11 = (std::string **)((char *)a2 + 16);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = *v11;
  }
  v13 = v9->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

void SnippetUI::Command_ChangeBackground::clear_background(SnippetUI::Command_ChangeBackground *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((uint64_t)this + 16);
}

SnippetUI::Command_ChangeBackground *SnippetUI::Command_ChangeBackground::Command_ChangeBackground(SnippetUI::Command_ChangeBackground *this, const SnippetUI::Command_ChangeBackground *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E79329D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::Command_ChangeBackground *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::BackgroundElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 10) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  return this;
}

void sub_1BFAABEB8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Command_ChangeBackground::InternalSwap(SnippetUI::Command_ChangeBackground *this, SnippetUI::Command_ChangeBackground *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  google::protobuf::UnknownFieldSet *v7;

  v4 = (SnippetUI::Command_ChangeBackground *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v7;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Command_ChangeBackground *)((char *)this + 16), (SnippetUI::Command_ChangeBackground *)((char *)a2 + 16));
}

SnippetUI::Command_AppPunchout *SnippetUI::Command_AppPunchout::Command_AppPunchout(SnippetUI::Command_AppPunchout *this, const SnippetUI::Command_AppPunchout *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E7932A98;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Command_AppPunchout *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  v10 = *((_QWORD *)a2 + 4);
  if (*(char *)(v10 + 23) < 0)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = *(unsigned __int8 *)(v10 + 23);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v11)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, v10);
  return this;
}

void sub_1BFAAC0C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Command_AppPunchout::CopyFrom(SnippetUI::Command_AppPunchout *this, const SnippetUI::Command_AppPunchout *a2)
{
  if (a2 != this)
  {
    SnippetUI::Command_AppPunchout::Clear(this);
    SnippetUI::Command_AppPunchout::MergeFrom(this, a2);
  }
}

__n128 SnippetUI::Command_AppPunchout::InternalSwap(SnippetUI::Command_AppPunchout *this, SnippetUI::Command_AppPunchout *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  __n128 result;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::string **v18;
  std::string *v19;
  uint64_t *v20;
  std::string **v21;
  std::string *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  google::protobuf::UnknownFieldSet *v25;

  v4 = (SnippetUI::Command_AppPunchout *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v25;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v8 = (uint64_t *)*((_QWORD *)this + 2);
  v9 = (uint64_t **)((char *)a2 + 16);
  if (v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v9 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v8 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v10 = *v9;
  if (*v9 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v10 = *v9;
  }
  v11 = v8[2];
  result = *(__n128 *)v8;
  v12 = v10[2];
  *(_OWORD *)v8 = *(_OWORD *)v10;
  v8[2] = v12;
  *(__n128 *)v10 = result;
  v10[2] = v11;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  result = *(__n128 *)v13;
  v17 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v17;
  *(__n128 *)v15 = result;
  v15[2] = v16;
LABEL_19:
  v20 = (uint64_t *)*((_QWORD *)this + 4);
  v18 = (std::string **)((char *)this + 32);
  v19 = (std::string *)v20;
  v21 = (std::string **)((char *)a2 + 32);
  if (v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = *v18;
  }
  v22 = *v21;
  if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v21, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v22 = *v21;
  }
  v23 = v19->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v19->__r_.__value_.__l.__data_;
  v24 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v19->__r_.__value_.__r.__words[2] = v24;
  *(__n128 *)&v22->__r_.__value_.__l.__data_ = result;
  v22->__r_.__value_.__r.__words[2] = v23;
  return result;
}

void SnippetUI::Command::InitAsDefaultInstance(SnippetUI::Command *this)
{
  byte_1ED1D4E38 = 0;
  qword_1ED1D4E40 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED1D4E48 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1ED1D4E50 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED1D4E58 = &SnippetUI::_Command_ChangeBackground_default_instance_;
  qword_1ED1D4E60 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED1D4E68 = &google::protobuf::internal::fixed_address_empty_string;
  qword_1ED1D4E70 = (uint64_t)&SnippetUI::_Command_ResponseGroup_default_instance_;
  unk_1ED1D4E78 = &SnippetUI::_Command_AppPunchout_default_instance_;
  qword_1ED1D4E80 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
}

uint64_t SnippetUI::Command::_Internal::change_background(SnippetUI::Command::_Internal *this, const SnippetUI::Command *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Command::_Internal::response_group(SnippetUI::Command::_Internal *this, const SnippetUI::Command *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Command::_Internal::app_punchout(SnippetUI::Command::_Internal *this, const SnippetUI::Command *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Command::set_allocated_change_background(SnippetUI::Command *this, SnippetUI::Command_ChangeBackground *a2)
{
  uint64_t result;

  result = SnippetUI::Command::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 5;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Command::set_allocated_response_group(SnippetUI::Command *this, SnippetUI::Command_ResponseGroup *a2)
{
  uint64_t result;

  result = SnippetUI::Command::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 9;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t SnippetUI::Command::set_allocated_app_punchout(SnippetUI::Command *this, SnippetUI::Command_AppPunchout *a2)
{
  uint64_t result;

  result = SnippetUI::Command::clear_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 9) = 10;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

SnippetUI::Command *SnippetUI::Command::Command(SnippetUI::Command *this, const SnippetUI::Command *a2)
{
  uint64_t v4;
  int v5;
  char v6;
  int **v7;
  int **v8;
  SnippetUI::Command_ResponseGroup *v9;
  const SnippetUI::Command_ResponseGroup *v10;
  SnippetUI::Command_AppPunchout *v11;
  const SnippetUI::Command_AppPunchout *v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E7932B58;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Command *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_DWORD *)this + 9) = 0;
  v5 = *((_DWORD *)a2 + 9);
  switch(v5)
  {
    case 1:
      v6 = *((_BYTE *)a2 + 24);
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      *((_BYTE *)this + 24) = v6;
      break;
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 11:
      v13 = *((_QWORD *)a2 + 3);
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
      *((_DWORD *)this + 9) = v5;
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v13);
      break;
    case 5:
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 5;
      v7 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ChangeBackground>(0);
      *((_QWORD *)this + 3) = v7;
      if (*((_DWORD *)a2 + 9) == 5)
        v8 = (int **)*((_QWORD *)a2 + 3);
      else
        v8 = (int **)&SnippetUI::_Command_ChangeBackground_default_instance_;
      SnippetUI::Command_ChangeBackground::MergeFrom(v7, v8);
      break;
    case 9:
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 9;
      v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_ResponseGroup>(0);
      *((_QWORD *)this + 3) = v9;
      if (*((_DWORD *)a2 + 9) == 9)
        v10 = (const SnippetUI::Command_ResponseGroup *)*((_QWORD *)a2 + 3);
      else
        v10 = (const SnippetUI::Command_ResponseGroup *)&SnippetUI::_Command_ResponseGroup_default_instance_;
      SnippetUI::Command_ResponseGroup::MergeFrom(v9, v10);
      break;
    case 10:
      SnippetUI::Command::clear_value((uint64_t)this);
      *((_DWORD *)this + 9) = 10;
      v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Command_AppPunchout>(0);
      *((_QWORD *)this + 3) = v11;
      if (*((_DWORD *)a2 + 9) == 10)
        v12 = (const SnippetUI::Command_AppPunchout *)*((_QWORD *)a2 + 3);
      else
        v12 = (const SnippetUI::Command_AppPunchout *)&SnippetUI::_Command_AppPunchout_default_instance_;
      SnippetUI::Command_AppPunchout::MergeFrom(v11, v12);
      break;
    default:
      return this;
  }
  return this;
}

void sub_1BFAAC5C8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Command::CopyFrom(SnippetUI::Command *this, const SnippetUI::Command *a2)
{
  if (a2 != this)
  {
    SnippetUI::Command::Clear(this);
    SnippetUI::Command::MergeFrom(this, a2);
  }
}

void SnippetUI::Command::InternalSwap(SnippetUI::Command *this, SnippetUI::Command *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  char v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;

  v4 = (SnippetUI::Command *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
}

void SnippetUI::ActionElement::InitAsDefaultInstance(SnippetUI::ActionElement *this)
{
  qword_1ED1D5098 = (uint64_t)&SnippetUI::_Command_default_instance_;
}

uint64_t SnippetUI::ActionElement::_Internal::command(SnippetUI::ActionElement::_Internal *this, const SnippetUI::ActionElement *a2)
{
  return *((_QWORD *)this + 8);
}

void SnippetUI::ActionElement::clear_text_elements(SnippetUI::ActionElement *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((uint64_t)this + 16);
}

SnippetUI::ActionElement *SnippetUI::ActionElement::ActionElement(SnippetUI::ActionElement *this, const SnippetUI::ActionElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::Command *v6;

  *(_QWORD *)this = &off_1E7932C18;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::ActionElement *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::TextElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 40, (int *)a2 + 10);
  *((_DWORD *)this + 18) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = 0;
  if (a2 != (const SnippetUI::ActionElement *)&SnippetUI::_ActionElement_default_instance_ && *((_QWORD *)a2 + 8))
  {
    v6 = (SnippetUI::Command *)operator new();
    SnippetUI::Command::Command(v6, *((const SnippetUI::Command **)a2 + 8));
  }
  *((_QWORD *)this + 8) = v6;
  return this;
}

void sub_1BFAAC79C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1C3B8D890](v4, 0x10A3C40C637D3DALL);
  google::protobuf::RepeatedField<int>::~RepeatedField(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ActionElement::CopyFrom(SnippetUI::ActionElement *this, const SnippetUI::ActionElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::ActionElement::Clear(this);
    SnippetUI::ActionElement::MergeFrom(this, a2);
  }
}

void SnippetUI::ActionElement::InternalSwap(SnippetUI::ActionElement *this, SnippetUI::ActionElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::ActionElement *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::ActionElement *)((char *)this + 16), (SnippetUI::ActionElement *)((char *)a2 + 16));
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 40, (uint64_t)a2 + 40);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
}

void InitDefaultsscc_info_SectionHeader_Rich_SectionHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SectionHeader.pb.cc", a4);
  SnippetUI::SectionHeader_Rich::SectionHeader_Rich((SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SectionHeader_Rich_default_instance_, v4);
  qword_1EF584448 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584450 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1EF584458 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SectionHeader_Rich *SnippetUI::SectionHeader_Rich::SectionHeader_Rich(SnippetUI::SectionHeader_Rich *this)
{
  *(_QWORD *)this = &off_1E7932E48;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load(scc_info_SectionHeader_Rich_SectionHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SectionHeader_Rich_SectionHeader_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BFAAC998(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SectionHeader_Rich::~SectionHeader_Rich(SnippetUI::SectionHeader_Rich *this)
{
  SnippetUI::SectionHeader_Rich::~SectionHeader_Rich(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7932E48;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SectionHeader_Rich *SnippetUI::SectionHeader_Rich::New(SnippetUI::SectionHeader_Rich *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Rich>(0);
}

SnippetUI::SectionHeader_Rich *SnippetUI::SectionHeader_Rich::New(SnippetUI::SectionHeader_Rich *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Rich>(a2);
}

void SnippetUI::SectionHeader_Rich::Clear(SnippetUI::SectionHeader_Rich *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::SectionHeader_Rich *)((char *)this + 8);
  *((_QWORD *)v6 + 4) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

uint64_t SnippetUI::SectionHeader_Rich::IsInitialized(SnippetUI::SectionHeader_Rich *this)
{
  return 1;
}

char *SnippetUI::SectionHeader_Rich::ByteSizeLong(SnippetUI::SectionHeader_Rich *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::VisualProperty *v8;
  char *v9;
  SnippetUI::ActionProperty *v10;
  char *v11;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::VisualProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SectionHeader_Rich *)((char *)this + 8), v5, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SectionHeader_Rich::GetCachedSize(SnippetUI::SectionHeader_Rich *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::SectionHeader_Rich::_InternalParse(SnippetUI::SectionHeader_Rich *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  SnippetUI::VisualProperty *v12;
  SnippetUI::ActionProperty *v13;
  std::string *v14;
  BOOL v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    v9 = (char *)*(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v9);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_24;
        v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 3) = v10;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v10, TagFallback);
        goto LABEL_29;
      case 2u:
        if (v9 != 18)
          goto LABEL_24;
        v12 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
        if (!v12)
        {
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 4) = v12;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v12, TagFallback);
        goto LABEL_29;
      case 3u:
        if (v9 != 26)
          goto LABEL_24;
        v13 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
        if (!v13)
        {
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 5) = v13;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v13, TagFallback);
        goto LABEL_29;
      case 4u:
        if (v9 != 34)
          goto LABEL_24;
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
          TagFallback = v17;
        }
        v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.SectionHeader_Rich.component_name");
        goto LABEL_29;
      default:
LABEL_24:
        if ((_DWORD)v9)
          v15 = (v9 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
        v17 = (google::protobuf::internal *)v11;
        if (v11)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SectionHeader_Rich::InternalSerializeWithCachedSizesToArray(SnippetUI::SectionHeader_Rich *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::VisualProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::ActionProperty *v25;
  unsigned int v26;
  google::protobuf::UnknownFieldSet *v27;
  unsigned int v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  unsigned int v32;
  google::protobuf::internal *v33;
  const char *v34;
  uint64_t v35;

  v5 = (char *)a2;
  if (this == (SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_)
    goto LABEL_37;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
  if (v25)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v25 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *v5 = 26;
    v26 = *((_DWORD *)v25 + 12);
    if (v26 > 0x7F)
    {
      v5[1] = v26 | 0x80;
      v28 = v26 >> 7;
      if (v26 >> 14)
      {
        v29 = v5 + 2;
        do
        {
          v30 = v29;
          *v29++ = v28 | 0x80;
          v31 = v28 >> 7;
          v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        v27 = (google::protobuf::UnknownFieldSet *)(v30 + 2);
        *v29 = v31;
      }
      else
      {
        v5[2] = v28;
        v27 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v26;
      v27 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v25, v27, a3, a4);
  }
LABEL_37:
  v33 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v33 + 23) < 0)
  {
    v34 = (const char *)*((_QWORD *)v33 + 1);
    if (!v34)
      goto LABEL_43;
    v33 = *(google::protobuf::internal **)v33;
    goto LABEL_42;
  }
  v34 = (const char *)*((unsigned __int8 *)v33 + 23);
  if (*((_BYTE *)v33 + 23))
  {
LABEL_42:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v33, v34, 1, (google::protobuf::internal *)"SnippetUI.SectionHeader_Rich.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 2), v5);
  }
LABEL_43:
  v35 = *((_QWORD *)this + 1);
  if ((v35 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v35 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SectionHeader_Rich::CopyFrom(SnippetUI::SectionHeader_Rich *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SectionHeader_Rich::Clear(this);
    SnippetUI::SectionHeader_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::SectionHeader_Rich::MergeFrom(SnippetUI::SectionHeader_Rich *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SectionHeader_Rich *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SectionHeader.pb.cc", 708);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SectionHeader_Rich::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAAD15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SectionHeader_Rich::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::SectionHeader_Rich::GetMetadata(SnippetUI::SectionHeader_Rich *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SectionHeader_2eproto);
  return qword_1EF582800;
}

void InitDefaultsscc_info_SectionHeader_Standard_SectionHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SectionHeader.pb.cc", a4);
  SnippetUI::SectionHeader_Standard::SectionHeader_Standard((SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SectionHeader_Standard_default_instance_, v4);
  qword_1EF584418 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584420 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SectionHeader_Standard *SnippetUI::SectionHeader_Standard::SectionHeader_Standard(SnippetUI::SectionHeader_Standard *this)
{
  *(_QWORD *)this = &off_1E7932D88;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  if (atomic_load(scc_info_SectionHeader_Standard_SectionHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SectionHeader_Standard_SectionHeader_2eproto);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFAAD274(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SectionHeader_Standard::~SectionHeader_Standard(SnippetUI::SectionHeader_Standard *this)
{
  SnippetUI::SectionHeader_Standard::~SectionHeader_Standard(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7932D88;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SectionHeader_Standard *SnippetUI::SectionHeader_Standard::New(SnippetUI::SectionHeader_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Standard>(0);
}

SnippetUI::SectionHeader_Standard *SnippetUI::SectionHeader_Standard::New(SnippetUI::SectionHeader_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Standard>(a2);
}

void SnippetUI::SectionHeader_Standard::Clear(SnippetUI::SectionHeader_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArena *v5;
  char v6;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = *((_BYTE *)this + 8);
  v5 = (SnippetUI::SectionHeader_Standard *)((char *)this + 8);
  *((_QWORD *)v5 + 3) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v5);
}

uint64_t SnippetUI::SectionHeader_Standard::IsInitialized(SnippetUI::SectionHeader_Standard *this)
{
  return 1;
}

char *SnippetUI::SectionHeader_Standard::ByteSizeLong(SnippetUI::SectionHeader_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::TextProperty *v6;
  char *v7;
  SnippetUI::ActionProperty *v8;
  char *v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_)
  {
    v6 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::TextProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::ActionProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SectionHeader_Standard *)((char *)this + 8), v5, (_DWORD *)this + 10);
  *((_DWORD *)this + 10) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SectionHeader_Standard::GetCachedSize(SnippetUI::SectionHeader_Standard *this)
{
  return *((unsigned int *)this + 10);
}

google::protobuf::internal *SnippetUI::SectionHeader_Standard::_InternalParse(SnippetUI::SectionHeader_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  unsigned int v10;
  char *v13;
  std::string *v14;
  SnippetUI::ActionProperty *v15;
  SnippetUI::TextProperty *v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v18;
    TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
    v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    v18 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 == 26)
      {
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.SectionHeader_Standard.component_name");
        goto LABEL_29;
      }
    }
    else if (v10 == 2)
    {
      if (v9 == 18)
      {
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 4) = v15;
          TagFallback = v18;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_29;
      }
    }
    else if (v10 == 1 && v9 == 10)
    {
      v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
      if (!v16)
      {
        v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v16;
        TagFallback = v18;
      }
      v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v16, TagFallback);
      goto LABEL_29;
    }
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      break;
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_29:
    v18 = (google::protobuf::internal *)v13;
    if (!v13)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::SectionHeader_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::SectionHeader_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::ActionProperty *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  google::protobuf::internal *v24;
  const char *v25;
  uint64_t v26;

  v5 = (char *)a2;
  if (this == (SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_)
    goto LABEL_25;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
  if (v16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((_QWORD *)v24 + 1);
    if (!v25)
      goto LABEL_31;
    v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((_BYTE *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.SectionHeader_Standard.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 2), v5);
  }
LABEL_31:
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v26 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SectionHeader_Standard::CopyFrom(SnippetUI::SectionHeader_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SectionHeader_Standard::Clear(this);
    SnippetUI::SectionHeader_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SectionHeader_Standard::MergeFrom(SnippetUI::SectionHeader_Standard *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SectionHeader_Standard *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SectionHeader.pb.cc", 365);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SectionHeader_Standard::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFAAD900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SectionHeader_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t SnippetUI::SectionHeader_Standard::GetMetadata(SnippetUI::SectionHeader_Standard *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SectionHeader_2eproto);
  return file_level_metadata_SectionHeader_2eproto;
}

void *SnippetUI::SectionHeader_Standard::default_instance(SnippetUI::SectionHeader_Standard *this)
{
  if (atomic_load(scc_info_SectionHeader_Standard_SectionHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SectionHeader_Standard_SectionHeader_2eproto);
  return &SnippetUI::_SectionHeader_Standard_default_instance_;
}

void SnippetUI::SectionHeader_Standard::MergeFrom(SnippetUI::SectionHeader_Standard *this, const SnippetUI::SectionHeader_Standard *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SectionHeader.pb.cc", 380);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SectionHeader_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::SectionHeader_Standard *)&SnippetUI::_SectionHeader_Standard_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v12, v13);
    }
  }
}

void sub_1BFAADAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SectionHeader_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SectionHeader_Standard *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SectionHeader_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SectionHeader_Standard>);
    SnippetUI::SectionHeader_Standard::SectionHeader_Standard(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SectionHeader_Standard *)operator new();
    SnippetUI::SectionHeader_Standard::SectionHeader_Standard(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFAADB5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SectionHeader_Standard>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::SectionHeader_Rich::default_instance(SnippetUI::SectionHeader_Rich *this)
{
  if (atomic_load(scc_info_SectionHeader_Rich_SectionHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SectionHeader_Rich_SectionHeader_2eproto);
  return &SnippetUI::_SectionHeader_Rich_default_instance_;
}

void SnippetUI::SectionHeader_Rich::MergeFrom(SnippetUI::SectionHeader_Rich *this, const SnippetUI::SectionHeader_Rich *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SectionHeader.pb.cc", 723);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SectionHeader_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::SectionHeader_Rich *)&SnippetUI::_SectionHeader_Rich_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v15, v16);
    }
  }
}

void sub_1BFAADDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SectionHeader_Rich *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SectionHeader_Rich>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SectionHeader_Rich *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SectionHeader_Rich *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SectionHeader_Rich>);
    SnippetUI::SectionHeader_Rich::SectionHeader_Rich(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SectionHeader_Rich *)operator new();
    SnippetUI::SectionHeader_Rich::SectionHeader_Rich(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

